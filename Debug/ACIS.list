
ACIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e68  080001e0  080001e0  000101e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008048  08008048  00018048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008068  08008068  00020b08  2**0
                  CONTENTS
  4 .ARM          00000008  08008068  08008068  00018068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008070  08008070  00020b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008070  08008070  00018070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008074  08008074  00018074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b08  20010000  08008078  00020000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065cc  20010b08  08008b80  00020b08  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200170d4  08008b80  000270d4  2**0
                  ALLOC
 11 .itcmram      00000000  20000000  20000000  00020b08  2**0
                  CONTENTS
 12 .ARM.attributes 00000030  00000000  00000000  00020b08  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018444  00000000  00000000  00020b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000357a  00000000  00000000  00038f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000014f0  00000000  00000000  0003c4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001360  00000000  00000000  0003d9e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00025471  00000000  00000000  0003ed48  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00012718  00000000  00000000  000641b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000e4317  00000000  00000000  000768d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0015abe8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057a0  00000000  00000000  0015ac64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20010b08 	.word	0x20010b08
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008030 	.word	0x08008030

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20010b0c 	.word	0x20010b0c
 800021c:	08008030 	.word	0x08008030

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <acis_init>:
sAcisConfig acis_config;// __attribute__((section(".ItcmRamSection")));

extern TIM_HandleTypeDef htim4;

void acis_init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim4);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <acis_init+0x10>)
 8000d62:	f005 f96b 	bl	800603c <HAL_TIM_Base_Start_IT>
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20016cc4 	.word	0x20016cc4

08000d70 <acis_ignite_14>:
static volatile float angle_ignite = 0;
static volatile float angle_saturate = 0;
static volatile uint8_t table_current = 0;

static inline void acis_ignite_14(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2180      	movs	r1, #128	; 0x80
 8000d78:	4807      	ldr	r0, [pc, #28]	; (8000d98 <acis_ignite_14+0x28>)
 8000d7a:	f003 fedf 	bl	8004b3c <HAL_GPIO_WritePin>
  ign14_prev = ign14_time;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <acis_ignite_14+0x2c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <acis_ignite_14+0x30>)
 8000d84:	6013      	str	r3, [r2, #0]
  ign14_time = Delay_Tick;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <acis_ignite_14+0x34>)
 8000d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <acis_ignite_14+0x2c>)
 8000d8c:	6013      	str	r3, [r2, #0]
  ign_ftime = 0;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <acis_ignite_14+0x38>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40020400 	.word	0x40020400
 8000d9c:	20010b24 	.word	0x20010b24
 8000da0:	20010b2c 	.word	0x20010b2c
 8000da4:	40000c00 	.word	0x40000c00
 8000da8:	20010000 	.word	0x20010000

08000dac <acis_ignite_23>:

static inline void acis_ignite_23(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <acis_ignite_23+0x28>)
 8000db6:	f003 fec1 	bl	8004b3c <HAL_GPIO_WritePin>
  ign23_prev = ign23_time;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <acis_ignite_23+0x2c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <acis_ignite_23+0x30>)
 8000dc0:	6013      	str	r3, [r2, #0]
  ign23_time = Delay_Tick;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <acis_ignite_23+0x34>)
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <acis_ignite_23+0x2c>)
 8000dc8:	6013      	str	r3, [r2, #0]
  ign_ftime = 0;
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <acis_ignite_23+0x38>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	20010b28 	.word	0x20010b28
 8000ddc:	20010b30 	.word	0x20010b30
 8000de0:	40000c00 	.word	0x40000c00
 8000de4:	20010000 	.word	0x20010000

08000de8 <acis_saturate_14>:

static inline void acis_saturate_14(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <acis_saturate_14+0x18>)
 8000df2:	f003 fea3 	bl	8004b3c <HAL_GPIO_WritePin>
  ign_ftime = 0;
 8000df6:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <acis_saturate_14+0x1c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40020400 	.word	0x40020400
 8000e04:	20010000 	.word	0x20010000

08000e08 <acis_saturate_23>:

static inline void acis_saturate_23(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2140      	movs	r1, #64	; 0x40
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <acis_saturate_23+0x18>)
 8000e12:	f003 fe93 	bl	8004b3c <HAL_GPIO_WritePin>
  ign_ftime = 0;
 8000e16:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <acis_saturate_23+0x1c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40020400 	.word	0x40020400
 8000e24:	20010000 	.word	0x20010000

08000e28 <acis_ignite>:

static inline void acis_ignite(uint8_t index)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if(index == 0)
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <acis_ignite+0x16>
    acis_ignite_14();
 8000e38:	f7ff ff9a 	bl	8000d70 <acis_ignite_14>
  else if(index == 1)
    acis_ignite_23();
}
 8000e3c:	e004      	b.n	8000e48 <acis_ignite+0x20>
  else if(index == 1)
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d101      	bne.n	8000e48 <acis_ignite+0x20>
    acis_ignite_23();
 8000e44:	f7ff ffb2 	bl	8000dac <acis_ignite_23>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <acis_saturate>:

static inline void acis_saturate(uint8_t index)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  if(index == 0)
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <acis_saturate+0x16>
    acis_saturate_14();
 8000e60:	f7ff ffc2 	bl	8000de8 <acis_saturate_14>
  else if(index == 1)
    acis_saturate_23();
}
 8000e64:	e004      	b.n	8000e70 <acis_saturate+0x20>
  else if(index == 1)
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d101      	bne.n	8000e70 <acis_saturate+0x20>
    acis_saturate_23();
 8000e6c:	f7ff ffcc 	bl	8000e08 <acis_saturate_23>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <acis_ignition_loop>:

static inline void acis_ignition_loop(void)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
  uint32_t now = Delay_Tick;
 8000e7e:	4b9f      	ldr	r3, [pc, #636]	; (80010fc <acis_ignition_loop+0x284>)
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	60fb      	str	r3, [r7, #12]
  float rpm = csps_getrpm();
 8000e84:	f000 ff30 	bl	8001ce8 <csps_getrpm>
 8000e88:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t rotates = csps_isrotates() || hall_rotates;
 8000e8c:	f000 ff56 	bl	8001d3c <csps_isrotates>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d104      	bne.n	8000ea0 <acis_ignition_loop+0x28>
 8000e96:	4b9a      	ldr	r3, [pc, #616]	; (8001100 <acis_ignition_loop+0x288>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <acis_ignition_loop+0x2c>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <acis_ignition_loop+0x2e>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if(!ign_ftime && rotates)
 8000ea8:	4b96      	ldr	r3, [pc, #600]	; (8001104 <acis_ignition_loop+0x28c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f040 8114 	bne.w	80010da <acis_ignition_loop+0x262>
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 8110 	beq.w	80010da <acis_ignition_loop+0x262>
  {
    if(DelayDiff(now, ign14_time) >= IGN_OVER_TIME)
 8000eba:	4b93      	ldr	r3, [pc, #588]	; (8001108 <acis_ignition_loop+0x290>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f001 f829 	bl	8001f18 <DelayDiff>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	4b90      	ldr	r3, [pc, #576]	; (800110c <acis_ignition_loop+0x294>)
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d905      	bls.n	8000eda <acis_ignition_loop+0x62>
      HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2180      	movs	r1, #128	; 0x80
 8000ed2:	488f      	ldr	r0, [pc, #572]	; (8001110 <acis_ignition_loop+0x298>)
 8000ed4:	f003 fe32 	bl	8004b3c <HAL_GPIO_WritePin>
 8000ed8:	e071      	b.n	8000fbe <acis_ignition_loop+0x146>
    else if(acis_config.params.isIgnitionByHall)
 8000eda:	4a8e      	ldr	r2, [pc, #568]	; (8001114 <acis_ignition_loop+0x29c>)
 8000edc:	f645 1309 	movw	r3, #22793	; 0x5909
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d06a      	beq.n	8000fbe <acis_ignition_loop+0x146>
    {
      if(rpm < 300.0f)
 8000ee8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eec:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001118 <acis_ignition_loop+0x2a0>
 8000ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef8:	d51c      	bpl.n	8000f34 <acis_ignition_loop+0xbc>
      {
        if(DelayDiff(now, ign14_time) >= DelayDiff(ign14_time, ign14_prev) * 96 / 128)
 8000efa:	4b83      	ldr	r3, [pc, #524]	; (8001108 <acis_ignition_loop+0x290>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4619      	mov	r1, r3
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f001 f809 	bl	8001f18 <DelayDiff>
 8000f06:	4604      	mov	r4, r0
 8000f08:	4b7f      	ldr	r3, [pc, #508]	; (8001108 <acis_ignition_loop+0x290>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b83      	ldr	r3, [pc, #524]	; (800111c <acis_ignition_loop+0x2a4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	4610      	mov	r0, r2
 8000f14:	f001 f800 	bl	8001f18 <DelayDiff>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	015b      	lsls	r3, r3, #5
 8000f22:	09db      	lsrs	r3, r3, #7
 8000f24:	429c      	cmp	r4, r3
 8000f26:	d34a      	bcc.n	8000fbe <acis_ignition_loop+0x146>
          HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	4878      	ldr	r0, [pc, #480]	; (8001110 <acis_ignition_loop+0x298>)
 8000f2e:	f003 fe05 	bl	8004b3c <HAL_GPIO_WritePin>
 8000f32:	e044      	b.n	8000fbe <acis_ignition_loop+0x146>
      }
      else if(DelayDiff(ign14_time, ign14_prev) > 15000)
 8000f34:	4b74      	ldr	r3, [pc, #464]	; (8001108 <acis_ignition_loop+0x290>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b78      	ldr	r3, [pc, #480]	; (800111c <acis_ignition_loop+0x2a4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4610      	mov	r0, r2
 8000f40:	f000 ffea 	bl	8001f18 <DelayDiff>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d91b      	bls.n	8000f86 <acis_ignition_loop+0x10e>
      {
        if((int32_t)DelayDiff(ign14_time, ign14_prev) - (int32_t)DelayDiff(now, ign14_time) < 11719)
 8000f4e:	4b6e      	ldr	r3, [pc, #440]	; (8001108 <acis_ignition_loop+0x290>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4b72      	ldr	r3, [pc, #456]	; (800111c <acis_ignition_loop+0x2a4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4619      	mov	r1, r3
 8000f58:	4610      	mov	r0, r2
 8000f5a:	f000 ffdd 	bl	8001f18 <DelayDiff>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461c      	mov	r4, r3
 8000f62:	4b69      	ldr	r3, [pc, #420]	; (8001108 <acis_ignition_loop+0x290>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4619      	mov	r1, r3
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 ffd5 	bl	8001f18 <DelayDiff>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	1ae3      	subs	r3, r4, r3
 8000f72:	f642 52c6 	movw	r2, #11718	; 0x2dc6
 8000f76:	4293      	cmp	r3, r2
 8000f78:	dc21      	bgt.n	8000fbe <acis_ignition_loop+0x146>
        {
          HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	4864      	ldr	r0, [pc, #400]	; (8001110 <acis_ignition_loop+0x298>)
 8000f80:	f003 fddc 	bl	8004b3c <HAL_GPIO_WritePin>
 8000f84:	e01b      	b.n	8000fbe <acis_ignition_loop+0x146>
        }
      }
      else if(DelayDiff(now, ign14_time) >= DelayDiff(ign14_time, ign14_prev) * 28 / 128)
 8000f86:	4b60      	ldr	r3, [pc, #384]	; (8001108 <acis_ignition_loop+0x290>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	68f8      	ldr	r0, [r7, #12]
 8000f8e:	f000 ffc3 	bl	8001f18 <DelayDiff>
 8000f92:	4604      	mov	r4, r0
 8000f94:	4b5c      	ldr	r3, [pc, #368]	; (8001108 <acis_ignition_loop+0x290>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b60      	ldr	r3, [pc, #384]	; (800111c <acis_ignition_loop+0x2a4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f000 ffba 	bl	8001f18 <DelayDiff>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	1a9b      	subs	r3, r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	09db      	lsrs	r3, r3, #7
 8000fb0:	429c      	cmp	r4, r3
 8000fb2:	d304      	bcc.n	8000fbe <acis_ignition_loop+0x146>
        HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	4855      	ldr	r0, [pc, #340]	; (8001110 <acis_ignition_loop+0x298>)
 8000fba:	f003 fdbf 	bl	8004b3c <HAL_GPIO_WritePin>
    }

    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 8000fbe:	4b58      	ldr	r3, [pc, #352]	; (8001120 <acis_ignition_loop+0x2a8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f000 ffa7 	bl	8001f18 <DelayDiff>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	4b4f      	ldr	r3, [pc, #316]	; (800110c <acis_ignition_loop+0x294>)
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d905      	bls.n	8000fde <acis_ignition_loop+0x166>
      HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	484e      	ldr	r0, [pc, #312]	; (8001110 <acis_ignition_loop+0x298>)
 8000fd8:	f003 fdb0 	bl	8004b3c <HAL_GPIO_WritePin>
    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 8000fdc:	e088      	b.n	80010f0 <acis_ignition_loop+0x278>
    else if(acis_config.params.isIgnitionByHall)
 8000fde:	4a4d      	ldr	r2, [pc, #308]	; (8001114 <acis_ignition_loop+0x29c>)
 8000fe0:	f645 1309 	movw	r3, #22793	; 0x5909
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 8081 	beq.w	80010f0 <acis_ignition_loop+0x278>
    {
      if(rpm < 300.0f)
 8000fee:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ff2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001118 <acis_ignition_loop+0x2a0>
 8000ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffe:	d51c      	bpl.n	800103a <acis_ignition_loop+0x1c2>
      {
        if(DelayDiff(now, ign23_time) >= DelayDiff(ign23_time, ign23_prev) * 96 / 128)
 8001000:	4b47      	ldr	r3, [pc, #284]	; (8001120 <acis_ignition_loop+0x2a8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f000 ff86 	bl	8001f18 <DelayDiff>
 800100c:	4604      	mov	r4, r0
 800100e:	4b44      	ldr	r3, [pc, #272]	; (8001120 <acis_ignition_loop+0x2a8>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b44      	ldr	r3, [pc, #272]	; (8001124 <acis_ignition_loop+0x2ac>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4619      	mov	r1, r3
 8001018:	4610      	mov	r0, r2
 800101a:	f000 ff7d 	bl	8001f18 <DelayDiff>
 800101e:	4602      	mov	r2, r0
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	015b      	lsls	r3, r3, #5
 8001028:	09db      	lsrs	r3, r3, #7
 800102a:	429c      	cmp	r4, r3
 800102c:	d360      	bcc.n	80010f0 <acis_ignition_loop+0x278>
          HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2140      	movs	r1, #64	; 0x40
 8001032:	4837      	ldr	r0, [pc, #220]	; (8001110 <acis_ignition_loop+0x298>)
 8001034:	f003 fd82 	bl	8004b3c <HAL_GPIO_WritePin>
    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 8001038:	e05a      	b.n	80010f0 <acis_ignition_loop+0x278>
      }
      else if(rpm > 500.0f && DelayDiff(ign23_time, ign23_prev) > 15000)
 800103a:	edd7 7a02 	vldr	s15, [r7, #8]
 800103e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001128 <acis_ignition_loop+0x2b0>
 8001042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	dd28      	ble.n	800109e <acis_ignition_loop+0x226>
 800104c:	4b34      	ldr	r3, [pc, #208]	; (8001120 <acis_ignition_loop+0x2a8>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b34      	ldr	r3, [pc, #208]	; (8001124 <acis_ignition_loop+0x2ac>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	4610      	mov	r0, r2
 8001058:	f000 ff5e 	bl	8001f18 <DelayDiff>
 800105c:	4602      	mov	r2, r0
 800105e:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001062:	429a      	cmp	r2, r3
 8001064:	d91b      	bls.n	800109e <acis_ignition_loop+0x226>
      {
        if((int32_t)DelayDiff(ign23_time, ign23_prev) - (int32_t)DelayDiff(now, ign23_time) < 11719)
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <acis_ignition_loop+0x2a8>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <acis_ignition_loop+0x2ac>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	4610      	mov	r0, r2
 8001072:	f000 ff51 	bl	8001f18 <DelayDiff>
 8001076:	4603      	mov	r3, r0
 8001078:	461c      	mov	r4, r3
 800107a:	4b29      	ldr	r3, [pc, #164]	; (8001120 <acis_ignition_loop+0x2a8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4619      	mov	r1, r3
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f000 ff49 	bl	8001f18 <DelayDiff>
 8001086:	4603      	mov	r3, r0
 8001088:	1ae3      	subs	r3, r4, r3
 800108a:	f642 52c6 	movw	r2, #11718	; 0x2dc6
 800108e:	4293      	cmp	r3, r2
 8001090:	dc22      	bgt.n	80010d8 <acis_ignition_loop+0x260>
        {
          HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2140      	movs	r1, #64	; 0x40
 8001096:	481e      	ldr	r0, [pc, #120]	; (8001110 <acis_ignition_loop+0x298>)
 8001098:	f003 fd50 	bl	8004b3c <HAL_GPIO_WritePin>
        if((int32_t)DelayDiff(ign23_time, ign23_prev) - (int32_t)DelayDiff(now, ign23_time) < 11719)
 800109c:	e01c      	b.n	80010d8 <acis_ignition_loop+0x260>
        }
      }
      else if(DelayDiff(now, ign23_time) >= DelayDiff(ign23_time, ign23_prev) * 28 / 128)
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <acis_ignition_loop+0x2a8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4619      	mov	r1, r3
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f000 ff37 	bl	8001f18 <DelayDiff>
 80010aa:	4604      	mov	r4, r0
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <acis_ignition_loop+0x2a8>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <acis_ignition_loop+0x2ac>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	4610      	mov	r0, r2
 80010b8:	f000 ff2e 	bl	8001f18 <DelayDiff>
 80010bc:	4602      	mov	r2, r0
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	1a9b      	subs	r3, r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	09db      	lsrs	r3, r3, #7
 80010c8:	429c      	cmp	r4, r3
 80010ca:	d311      	bcc.n	80010f0 <acis_ignition_loop+0x278>
        HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2140      	movs	r1, #64	; 0x40
 80010d0:	480f      	ldr	r0, [pc, #60]	; (8001110 <acis_ignition_loop+0x298>)
 80010d2:	f003 fd33 	bl	8004b3c <HAL_GPIO_WritePin>
    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 80010d6:	e00b      	b.n	80010f0 <acis_ignition_loop+0x278>
 80010d8:	e00a      	b.n	80010f0 <acis_ignition_loop+0x278>
    }
  }
  else
  {
    HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	480c      	ldr	r0, [pc, #48]	; (8001110 <acis_ignition_loop+0x298>)
 80010e0:	f003 fd2c 	bl	8004b3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2140      	movs	r1, #64	; 0x40
 80010e8:	4809      	ldr	r0, [pc, #36]	; (8001110 <acis_ignition_loop+0x298>)
 80010ea:	f003 fd27 	bl	8004b3c <HAL_GPIO_WritePin>
  }
}
 80010ee:	e000      	b.n	80010f2 <acis_ignition_loop+0x27a>
    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 80010f0:	bf00      	nop
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40000c00 	.word	0x40000c00
 8001100:	20010b40 	.word	0x20010b40
 8001104:	20010000 	.word	0x20010000
 8001108:	20010b24 	.word	0x20010b24
 800110c:	0007a11f 	.word	0x0007a11f
 8001110:	40020400 	.word	0x40020400
 8001114:	20010e10 	.word	0x20010e10
 8001118:	43960000 	.word	0x43960000
 800111c:	20010b2c 	.word	0x20010b2c
 8001120:	20010b28 	.word	0x20010b28
 8001124:	20010b30 	.word	0x20010b30
 8001128:	43fa0000 	.word	0x43fa0000

0800112c <acis_hall_exti>:

inline void acis_hall_exti(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
  uint32_t now = Delay_Tick;
 8001132:	4b42      	ldr	r3, [pc, #264]	; (800123c <acis_hall_exti+0x110>)
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	617b      	str	r3, [r7, #20]
  uint8_t hall_cylinders = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	77fb      	strb	r3, [r7, #31]
  hall_prev = now;
 800113c:	4a40      	ldr	r2, [pc, #256]	; (8001240 <acis_hall_exti+0x114>)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	6013      	str	r3, [r2, #0]
  float angle = 0.0f;
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
  float angle14 = csps_getangle14();
 8001148:	f000 fcec 	bl	8001b24 <csps_getangle14>
 800114c:	ed87 0a04 	vstr	s0, [r7, #16]
  float rpm = csps_getrpm();
 8001150:	f000 fdca 	bl	8001ce8 <csps_getrpm>
 8001154:	ed87 0a03 	vstr	s0, [r7, #12]
  float pressure = map_getpressure();
 8001158:	f001 fdbc 	bl	8002cd4 <map_getpressure>
 800115c:	ed87 0a02 	vstr	s0, [r7, #8]
  float angle23 = csps_getangle23from14(angle14);
 8001160:	ed97 0a04 	vldr	s0, [r7, #16]
 8001164:	f000 fd96 	bl	8001c94 <csps_getangle23from14>
 8001168:	ed87 0a01 	vstr	s0, [r7, #4]
  float cspsfound = csps_isfound();
 800116c:	f000 fdf2 	bl	8001d54 <csps_isfound>
 8001170:	4603      	mov	r3, r0
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800117a:	edc7 7a00 	vstr	s15, [r7]

  if(angle23 > 90.0f || angle23 <= -90.0f)
 800117e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001182:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001244 <acis_hall_exti+0x118>
 8001186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118e:	dc08      	bgt.n	80011a2 <acis_hall_exti+0x76>
 8001190:	edd7 7a01 	vldr	s15, [r7, #4]
 8001194:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001248 <acis_hall_exti+0x11c>
 8001198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a0:	d803      	bhi.n	80011aa <acis_hall_exti+0x7e>
  {
      hall_cylinders = 2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	77fb      	strb	r3, [r7, #31]
      angle = angle14;
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	61bb      	str	r3, [r7, #24]
  }
  if(angle14 > 90.0f || angle14 <= -90.0f)
 80011aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80011ae:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001244 <acis_hall_exti+0x118>
 80011b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	dc08      	bgt.n	80011ce <acis_hall_exti+0xa2>
 80011bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001248 <acis_hall_exti+0x11c>
 80011c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011cc:	d813      	bhi.n	80011f6 <acis_hall_exti+0xca>
  {
    if(hall_cylinders == 0)
 80011ce:	7ffb      	ldrb	r3, [r7, #31]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d104      	bne.n	80011de <acis_hall_exti+0xb2>
    {
      hall_cylinders = 1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	77fb      	strb	r3, [r7, #31]
      angle = angle23;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	61bb      	str	r3, [r7, #24]
 80011dc:	e00b      	b.n	80011f6 <acis_hall_exti+0xca>
    }
    else
    {
      hall_cylinders = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	77fb      	strb	r3, [r7, #31]
      hall_error += 1.0f;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <acis_hall_exti+0x120>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <acis_hall_exti+0x120>)
 80011f2:	edc3 7a00 	vstr	s15, [r3]
    }
  }
  hall_angle = angle;
 80011f6:	4a16      	ldr	r2, [pc, #88]	; (8001250 <acis_hall_exti+0x124>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6013      	str	r3, [r2, #0]

  if(cspsfound && acis_config.params.isIgnitionByHall)
 80011fc:	edd7 7a00 	vldr	s15, [r7]
 8001200:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001208:	d011      	beq.n	800122e <acis_hall_exti+0x102>
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <acis_hall_exti+0x128>)
 800120c:	f645 1309 	movw	r3, #22793	; 0x5909
 8001210:	4413      	add	r3, r2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00a      	beq.n	800122e <acis_hall_exti+0x102>
  {
    if(hall_cylinders == 1)
 8001218:	7ffb      	ldrb	r3, [r7, #31]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d102      	bne.n	8001224 <acis_hall_exti+0xf8>
    {
      acis_ignite_14();
 800121e:	f7ff fda7 	bl	8000d70 <acis_ignite_14>
 8001222:	e004      	b.n	800122e <acis_hall_exti+0x102>
    }
    else if(hall_cylinders == 2)
 8001224:	7ffb      	ldrb	r3, [r7, #31]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d101      	bne.n	800122e <acis_hall_exti+0x102>
    {
      acis_ignite_23();
 800122a:	f7ff fdbf 	bl	8000dac <acis_ignite_23>
    }
  }
  hall_rotates = 1;
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <acis_hall_exti+0x12c>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40000c00 	.word	0x40000c00
 8001240:	20010b34 	.word	0x20010b34
 8001244:	42b40000 	.word	0x42b40000
 8001248:	c2b40000 	.word	0xc2b40000
 800124c:	20010b3c 	.word	0x20010b3c
 8001250:	20010b38 	.word	0x20010b38
 8001254:	20010e10 	.word	0x20010e10
 8001258:	20010b40 	.word	0x20010b40
 800125c:	00000000 	.word	0x00000000

08001260 <acis_hall_loop>:

static inline void acis_hall_loop(void)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
  static uint32_t last_error_null = 0;
  uint32_t prev = hall_prev;
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <acis_hall_loop+0x78>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	607b      	str	r3, [r7, #4]
  uint32_t now = Delay_Tick;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <acis_hall_loop+0x7c>)
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	603b      	str	r3, [r7, #0]
  if(DelayDiff(now, last_error_null) > 100000)
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <acis_hall_loop+0x80>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4619      	mov	r1, r3
 8001278:	6838      	ldr	r0, [r7, #0]
 800127a:	f000 fe4d 	bl	8001f18 <DelayDiff>
 800127e:	4602      	mov	r2, r0
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <acis_hall_loop+0x84>)
 8001282:	429a      	cmp	r2, r3
 8001284:	d915      	bls.n	80012b2 <acis_hall_loop+0x52>
  {
    hall_error *= 0.95;
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <acis_hall_loop+0x88>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f92c 	bl	80004e8 <__aeabi_f2d>
 8001290:	a30f      	add	r3, pc, #60	; (adr r3, 80012d0 <acis_hall_loop+0x70>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	f7ff f97f 	bl	8000598 <__aeabi_dmul>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	4618      	mov	r0, r3
 80012a0:	4621      	mov	r1, r4
 80012a2:	f7ff fb8b 	bl	80009bc <__aeabi_d2f>
 80012a6:	4602      	mov	r2, r0
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <acis_hall_loop+0x88>)
 80012aa:	601a      	str	r2, [r3, #0]
    last_error_null = now;
 80012ac:	4a0c      	ldr	r2, [pc, #48]	; (80012e0 <acis_hall_loop+0x80>)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	6013      	str	r3, [r2, #0]
  }
  if(DelayDiff(now, prev) > 600000)
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	6838      	ldr	r0, [r7, #0]
 80012b6:	f000 fe2f 	bl	8001f18 <DelayDiff>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <acis_hall_loop+0x8c>)
 80012be:	429a      	cmp	r2, r3
 80012c0:	d902      	bls.n	80012c8 <acis_hall_loop+0x68>
  {
    hall_rotates = 0;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <acis_hall_loop+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
  }
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	66666666 	.word	0x66666666
 80012d4:	3fee6666 	.word	0x3fee6666
 80012d8:	20010b34 	.word	0x20010b34
 80012dc:	40000c00 	.word	0x40000c00
 80012e0:	20010b58 	.word	0x20010b58
 80012e4:	000186a0 	.word	0x000186a0
 80012e8:	20010b3c 	.word	0x20010b3c
 80012ec:	000927c0 	.word	0x000927c0
 80012f0:	20010b40 	.word	0x20010b40

080012f4 <acis_loop>:

inline void acis_loop(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b090      	sub	sp, #64	; 0x40
 80012f8:	af00      	add	r7, sp, #0
  static float oldanglesbeforeignite[2] = {0,0};
  static uint8_t saturated[2] = { 1,1 };
  static uint8_t ignited[2] = { 1,1 };
  float angle[2] = { 0.0f, 0.0f };
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  float anglesbeforeignite[2];
  angle[0] = csps_getangle14();
 8001306:	f000 fc0d 	bl	8001b24 <csps_getangle14>
 800130a:	eef0 7a40 	vmov.f32	s15, s0
 800130e:	edc7 7a02 	vstr	s15, [r7, #8]
  angle[1] = csps_getangle23from14(angle[0]);
 8001312:	edd7 7a02 	vldr	s15, [r7, #8]
 8001316:	eeb0 0a67 	vmov.f32	s0, s15
 800131a:	f000 fcbb 	bl	8001c94 <csps_getangle23from14>
 800131e:	eef0 7a40 	vmov.f32	s15, s0
 8001322:	edc7 7a03 	vstr	s15, [r7, #12]
  sAcisIgnTable * table = NULL;
 8001326:	2300      	movs	r3, #0
 8001328:	637b      	str	r3, [r7, #52]	; 0x34

  float rpm = csps_getrpm();
 800132a:	f000 fcdd 	bl	8001ce8 <csps_getrpm>
 800132e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  float uspa = csps_getuspa();
 8001332:	f000 fce7 	bl	8001d04 <csps_getuspa>
 8001336:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  float period = csps_getperiod();
 800133a:	f000 fcf1 	bl	8001d20 <csps_getperiod>
 800133e:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
  float pressure = map_getpressure();
 8001342:	f001 fcc7 	bl	8002cd4 <map_getpressure>
 8001346:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  float time_sat = IGN_SATURATION;
 800134a:	4ba4      	ldr	r3, [pc, #656]	; (80015dc <acis_loop+0x2e8>)
 800134c:	63fb      	str	r3, [r7, #60]	; 0x3c

  float found = csps_isfound();
 800134e:	f000 fd01 	bl	8001d54 <csps_isfound>
 8001352:	4603      	mov	r3, r0
 8001354:	ee07 3a90 	vmov	s15, r3
 8001358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800135c:	edc7 7a08 	vstr	s15, [r7, #32]
  uint32_t now = Delay_Tick;
 8001360:	4b9f      	ldr	r3, [pc, #636]	; (80015e0 <acis_loop+0x2ec>)
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	61fb      	str	r3, [r7, #28]

  int table_num = table_current;
 8001366:	4b9f      	ldr	r3, [pc, #636]	; (80015e4 <acis_loop+0x2f0>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	61bb      	str	r3, [r7, #24]

  if(table_num < acis_config.tables_count || table_num < TABLE_SETUPS_MAX)
 800136e:	4b9e      	ldr	r3, [pc, #632]	; (80015e8 <acis_loop+0x2f4>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	429a      	cmp	r2, r3
 8001376:	d802      	bhi.n	800137e <acis_loop+0x8a>
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b03      	cmp	r3, #3
 800137c:	dc08      	bgt.n	8001390 <acis_loop+0x9c>
    table = &acis_config.tables[table_num];
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	f44f 52b2 	mov.w	r2, #5696	; 0x1640
 8001384:	fb02 f303 	mul.w	r3, r2, r3
 8001388:	4a97      	ldr	r2, [pc, #604]	; (80015e8 <acis_loop+0x2f4>)
 800138a:	4413      	add	r3, r2
 800138c:	3304      	adds	r3, #4
 800138e:	637b      	str	r3, [r7, #52]	; 0x34


  float ignite = pressure / 4200.0f;
 8001390:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001394:	eddf 6a95 	vldr	s13, [pc, #596]	; 80015ec <acis_loop+0x2f8>
 8001398:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800139c:	edc7 7a05 	vstr	s15, [r7, #20]

  if(period < IGN_SATURATION + IGN_PULSE)
 80013a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80013a4:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80015f0 <acis_loop+0x2fc>
 80013a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b0:	d507      	bpl.n	80013c2 <acis_loop+0xce>
  {
    time_sat = period * ((float)IGN_SATURATION / (float)(IGN_SATURATION + IGN_PULSE));
 80013b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80013b6:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80015f4 <acis_loop+0x300>
 80013ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013be:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  if(table)
  {

  }

  float saturate = time_sat / uspa;
 80013c2:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80013c6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80013ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ce:	edc7 7a04 	vstr	s15, [r7, #16]

  angle_ignite = ignite;
 80013d2:	4a89      	ldr	r2, [pc, #548]	; (80015f8 <acis_loop+0x304>)
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	6013      	str	r3, [r2, #0]
  angle_saturate = saturate;
 80013d8:	4a88      	ldr	r2, [pc, #544]	; (80015fc <acis_loop+0x308>)
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	6013      	str	r3, [r2, #0]


  if(found)
 80013de:	edd7 7a08 	vldr	s15, [r7, #32]
 80013e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	f000 80ea 	beq.w	80015c2 <acis_loop+0x2ce>
  {
    for(int i = 0; i < 2; i++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80013f2:	e0e1      	b.n	80015b8 <acis_loop+0x2c4>
    {


      if(angle[i] < -ignite)
 80013f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80013fc:	4413      	add	r3, r2
 80013fe:	3b38      	subs	r3, #56	; 0x38
 8001400:	ed93 7a00 	vldr	s14, [r3]
 8001404:	edd7 7a05 	vldr	s15, [r7, #20]
 8001408:	eef1 7a67 	vneg.f32	s15, s15
 800140c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001414:	d516      	bpl.n	8001444 <acis_loop+0x150>
        anglesbeforeignite[i] = -angle[i] - ignite;
 8001416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800141e:	4413      	add	r3, r2
 8001420:	3b38      	subs	r3, #56	; 0x38
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	eeb1 7a67 	vneg.f32	s14, s15
 800142a:	edd7 7a05 	vldr	s15, [r7, #20]
 800142e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800143a:	4413      	add	r3, r2
 800143c:	3b40      	subs	r3, #64	; 0x40
 800143e:	edc3 7a00 	vstr	s15, [r3]
 8001442:	e017      	b.n	8001474 <acis_loop+0x180>
      else
        anglesbeforeignite[i] = 360.0f - angle[i] - ignite;
 8001444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800144c:	4413      	add	r3, r2
 800144e:	3b38      	subs	r3, #56	; 0x38
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001600 <acis_loop+0x30c>
 8001458:	ee37 7a67 	vsub.f32	s14, s14, s15
 800145c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800146c:	4413      	add	r3, r2
 800146e:	3b40      	subs	r3, #64	; 0x40
 8001470:	edc3 7a00 	vstr	s15, [r3]

      if(anglesbeforeignite[i] - oldanglesbeforeignite[i] > 0.0f && anglesbeforeignite[i] - oldanglesbeforeignite[i] < 180.0f)
 8001474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800147c:	4413      	add	r3, r2
 800147e:	3b40      	subs	r3, #64	; 0x40
 8001480:	ed93 7a00 	vldr	s14, [r3]
 8001484:	4a5f      	ldr	r2, [pc, #380]	; (8001604 <acis_loop+0x310>)
 8001486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001494:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149c:	dd22      	ble.n	80014e4 <acis_loop+0x1f0>
 800149e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80014a6:	4413      	add	r3, r2
 80014a8:	3b40      	subs	r3, #64	; 0x40
 80014aa:	ed93 7a00 	vldr	s14, [r3]
 80014ae:	4a55      	ldr	r2, [pc, #340]	; (8001604 <acis_loop+0x310>)
 80014b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014be:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001608 <acis_loop+0x314>
 80014c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	d50b      	bpl.n	80014e4 <acis_loop+0x1f0>
        anglesbeforeignite[i] = oldanglesbeforeignite[i];
 80014cc:	4a4d      	ldr	r2, [pc, #308]	; (8001604 <acis_loop+0x310>)
 80014ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80014de:	440b      	add	r3, r1
 80014e0:	3b40      	subs	r3, #64	; 0x40
 80014e2:	601a      	str	r2, [r3, #0]

      if(anglesbeforeignite[i] - saturate < 0.0f)
 80014e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80014ec:	4413      	add	r3, r2
 80014ee:	3b40      	subs	r3, #64	; 0x40
 80014f0:	ed93 7a00 	vldr	s14, [r3]
 80014f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80014f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001504:	d513      	bpl.n	800152e <acis_loop+0x23a>
      {
        if(!saturated[i] && !ignited[0])
 8001506:	4a41      	ldr	r2, [pc, #260]	; (800160c <acis_loop+0x318>)
 8001508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800150a:	4413      	add	r3, r2
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10d      	bne.n	800152e <acis_loop+0x23a>
 8001512:	4b3f      	ldr	r3, [pc, #252]	; (8001610 <acis_loop+0x31c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d109      	bne.n	800152e <acis_loop+0x23a>
        {
          saturated[i] = 1;
 800151a:	4a3c      	ldr	r2, [pc, #240]	; (800160c <acis_loop+0x318>)
 800151c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151e:	4413      	add	r3, r2
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
          acis_saturate(i);
 8001524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fc91 	bl	8000e50 <acis_saturate>
        }
      }

      if(oldanglesbeforeignite[i] - anglesbeforeignite[i] < 0.0f)
 800152e:	4a35      	ldr	r2, [pc, #212]	; (8001604 <acis_loop+0x310>)
 8001530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	ed93 7a00 	vldr	s14, [r3]
 800153a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001542:	4413      	add	r3, r2
 8001544:	3b40      	subs	r3, #64	; 0x40
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800154e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	d51b      	bpl.n	8001590 <acis_loop+0x29c>
      {
        if(!ignited[i] && saturated[i])
 8001558:	4a2d      	ldr	r2, [pc, #180]	; (8001610 <acis_loop+0x31c>)
 800155a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800155c:	4413      	add	r3, r2
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d11a      	bne.n	800159a <acis_loop+0x2a6>
 8001564:	4a29      	ldr	r2, [pc, #164]	; (800160c <acis_loop+0x318>)
 8001566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001568:	4413      	add	r3, r2
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d014      	beq.n	800159a <acis_loop+0x2a6>
        {
          ignited[i] = 1;
 8001570:	4a27      	ldr	r2, [pc, #156]	; (8001610 <acis_loop+0x31c>)
 8001572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001574:	4413      	add	r3, r2
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
          saturated[i] = 0;
 800157a:	4a24      	ldr	r2, [pc, #144]	; (800160c <acis_loop+0x318>)
 800157c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800157e:	4413      	add	r3, r2
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
          acis_ignite(i);
 8001584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fc4d 	bl	8000e28 <acis_ignite>
 800158e:	e004      	b.n	800159a <acis_loop+0x2a6>
        }
      }
      else ignited[i] = 0;
 8001590:	4a1f      	ldr	r2, [pc, #124]	; (8001610 <acis_loop+0x31c>)
 8001592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001594:	4413      	add	r3, r2
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]

      oldanglesbeforeignite[i] = anglesbeforeignite[i];
 800159a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80015a2:	4413      	add	r3, r2
 80015a4:	3b40      	subs	r3, #64	; 0x40
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4916      	ldr	r1, [pc, #88]	; (8001604 <acis_loop+0x310>)
 80015aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 2; i++)
 80015b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b4:	3301      	adds	r3, #1
 80015b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80015b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	f77f af1a 	ble.w	80013f4 <acis_loop+0x100>
 80015c0:	e003      	b.n	80015ca <acis_loop+0x2d6>
    }
  }
  else
  {
    angle_ignite = 0;
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <acis_loop+0x304>)
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
  }

  acis_hall_loop();
 80015ca:	f7ff fe49 	bl	8001260 <acis_hall_loop>

  acis_ignition_loop();
 80015ce:	f7ff fc53 	bl	8000e78 <acis_ignition_loop>
}
 80015d2:	bf00      	nop
 80015d4:	3740      	adds	r7, #64	; 0x40
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	463b8000 	.word	0x463b8000
 80015e0:	40000c00 	.word	0x40000c00
 80015e4:	20010b4c 	.word	0x20010b4c
 80015e8:	20010e10 	.word	0x20010e10
 80015ec:	45834000 	.word	0x45834000
 80015f0:	465ac000 	.word	0x465ac000
 80015f4:	3f5b6db7 	.word	0x3f5b6db7
 80015f8:	20010b44 	.word	0x20010b44
 80015fc:	20010b48 	.word	0x20010b48
 8001600:	43b40000 	.word	0x43b40000
 8001604:	20010b50 	.word	0x20010b50
 8001608:	43340000 	.word	0x43340000
 800160c:	20010004 	.word	0x20010004
 8001610:	20010008 	.word	0x20010008

08001614 <csps_exti>:
{

}

inline void csps_exti(void)
{
 8001614:	b5b0      	push	{r4, r5, r7, lr}
 8001616:	b092      	sub	sp, #72	; 0x48
 8001618:	af00      	add	r7, sp, #0
  static uint32_t t1 = 0;
  static uint32_t t2 = 0;
  uint32_t i, ticks, cur, prev;
  sCspsData data;
  float cs14, cs23;
  float average = 0;
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	63fb      	str	r3, [r7, #60]	; 0x3c
  float diff = 0;
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	637b      	str	r3, [r7, #52]	; 0x34
  float rpm_koff = 1.0f / 60.0f;
 8001626:	4baf      	ldr	r3, [pc, #700]	; (80018e4 <csps_exti+0x2d0>)
 8001628:	63bb      	str	r3, [r7, #56]	; 0x38
  float uspa_koff = 1.0f / 10.0f;
 800162a:	4baf      	ldr	r3, [pc, #700]	; (80018e8 <csps_exti+0x2d4>)
 800162c:	633b      	str	r3, [r7, #48]	; 0x30

  cur = Delay_Tick;
 800162e:	4baf      	ldr	r3, [pc, #700]	; (80018ec <csps_exti+0x2d8>)
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  csps_pulse_last = cur;
 8001634:	4aae      	ldr	r2, [pc, #696]	; (80018f0 <csps_exti+0x2dc>)
 8001636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001638:	6013      	str	r3, [r2, #0]
  for(i = 1; i < IRQ_SIZE; i++)
 800163a:	2301      	movs	r3, #1
 800163c:	647b      	str	r3, [r7, #68]	; 0x44
 800163e:	e00b      	b.n	8001658 <csps_exti+0x44>
    cspc_irq_data[i - 1] = cspc_irq_data[i];
 8001640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001642:	3b01      	subs	r3, #1
 8001644:	49ab      	ldr	r1, [pc, #684]	; (80018f4 <csps_exti+0x2e0>)
 8001646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001648:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800164c:	49a9      	ldr	r1, [pc, #676]	; (80018f4 <csps_exti+0x2e0>)
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(i = 1; i < IRQ_SIZE; i++)
 8001652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001654:	3301      	adds	r3, #1
 8001656:	647b      	str	r3, [r7, #68]	; 0x44
 8001658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800165a:	2b07      	cmp	r3, #7
 800165c:	d9f0      	bls.n	8001640 <csps_exti+0x2c>
  cspc_irq_data[IRQ_SIZE - 1] = cur;
 800165e:	4aa5      	ldr	r2, [pc, #660]	; (80018f4 <csps_exti+0x2e0>)
 8001660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001662:	61d3      	str	r3, [r2, #28]
  if(cspc_irq_data[0] == 0)
 8001664:	4ba3      	ldr	r3, [pc, #652]	; (80018f4 <csps_exti+0x2e0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 8239 	beq.w	8001ae0 <csps_exti+0x4cc>
    return;
  prev = cspc_irq_data[IRQ_SIZE - 2];
 800166e:	4ba1      	ldr	r3, [pc, #644]	; (80018f4 <csps_exti+0x2e0>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	643b      	str	r3, [r7, #64]	; 0x40
  csps_rotates = 1;
 8001674:	4ba0      	ldr	r3, [pc, #640]	; (80018f8 <csps_exti+0x2e4>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]

  t1++;
 800167a:	4ba0      	ldr	r3, [pc, #640]	; (80018fc <csps_exti+0x2e8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	4a9e      	ldr	r2, [pc, #632]	; (80018fc <csps_exti+0x2e8>)
 8001682:	6013      	str	r3, [r2, #0]

  for(i = 1; i < IRQ_SIZE; i++)
 8001684:	2301      	movs	r3, #1
 8001686:	647b      	str	r3, [r7, #68]	; 0x44
 8001688:	e018      	b.n	80016bc <csps_exti+0xa8>
  {
    average += DelayDiff(cspc_irq_data[i], cspc_irq_data[i - 1]);;
 800168a:	4a9a      	ldr	r2, [pc, #616]	; (80018f4 <csps_exti+0x2e0>)
 800168c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800168e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001694:	3b01      	subs	r3, #1
 8001696:	4a97      	ldr	r2, [pc, #604]	; (80018f4 <csps_exti+0x2e0>)
 8001698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169c:	4619      	mov	r1, r3
 800169e:	f000 fc3b 	bl	8001f18 <DelayDiff>
 80016a2:	ee07 0a90 	vmov	s15, r0
 80016a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016aa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  for(i = 1; i < IRQ_SIZE; i++)
 80016b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016b8:	3301      	adds	r3, #1
 80016ba:	647b      	str	r3, [r7, #68]	; 0x44
 80016bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016be:	2b07      	cmp	r3, #7
 80016c0:	d9e3      	bls.n	800168a <csps_exti+0x76>
  }
  average /= (float)(IRQ_SIZE - 1);
 80016c2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80016c6:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 80016ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ce:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  avg = average / average_prev;
 80016d2:	4b8b      	ldr	r3, [pc, #556]	; (8001900 <csps_exti+0x2ec>)
 80016d4:	ed93 7a00 	vldr	s14, [r3]
 80016d8:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80016dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e0:	4b88      	ldr	r3, [pc, #544]	; (8001904 <csps_exti+0x2f0>)
 80016e2:	edc3 7a00 	vstr	s15, [r3]

  if(average / average_prev > 1.0f + 1.0f / IRQ_SIZE)
 80016e6:	4b86      	ldr	r3, [pc, #536]	; (8001900 <csps_exti+0x2ec>)
 80016e8:	ed93 7a00 	vldr	s14, [r3]
 80016ec:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80016f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f4:	eeb7 7a02 	vmov.f32	s14, #114	; 0x3f900000  1.125
 80016f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001700:	dd26      	ble.n	8001750 <csps_exti+0x13c>
  {
    if(++t2 == 2)
 8001702:	4b81      	ldr	r3, [pc, #516]	; (8001908 <csps_exti+0x2f4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	4a7f      	ldr	r2, [pc, #508]	; (8001908 <csps_exti+0x2f4>)
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b7e      	ldr	r3, [pc, #504]	; (8001908 <csps_exti+0x2f4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d12e      	bne.n	8001772 <csps_exti+0x15e>
    {
      ticks = t1;
 8001714:	4b79      	ldr	r3, [pc, #484]	; (80018fc <csps_exti+0x2e8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
      t1 = 0;
 800171a:	4b78      	ldr	r3, [pc, #480]	; (80018fc <csps_exti+0x2e8>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
      t2 = 0;
 8001720:	4b79      	ldr	r3, [pc, #484]	; (8001908 <csps_exti+0x2f4>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
      if(ticks != 116)
 8001726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001728:	2b74      	cmp	r3, #116	; 0x74
 800172a:	d00a      	beq.n	8001742 <csps_exti+0x12e>
        csps_errors += 1.0f;
 800172c:	4b77      	ldr	r3, [pc, #476]	; (800190c <csps_exti+0x2f8>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001736:	ee77 7a87 	vadd.f32	s15, s15, s14
 800173a:	4b74      	ldr	r3, [pc, #464]	; (800190c <csps_exti+0x2f8>)
 800173c:	edc3 7a00 	vstr	s15, [r3]
 8001740:	e017      	b.n	8001772 <csps_exti+0x15e>
      else
      {
        csps_last = cur;
 8001742:	4a73      	ldr	r2, [pc, #460]	; (8001910 <csps_exti+0x2fc>)
 8001744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001746:	6013      	str	r3, [r2, #0]
        csps_found = 1;
 8001748:	4b72      	ldr	r3, [pc, #456]	; (8001914 <csps_exti+0x300>)
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
 800174e:	e010      	b.n	8001772 <csps_exti+0x15e>
      }
    }
  }
  else if(t1 >= 116)
 8001750:	4b6a      	ldr	r3, [pc, #424]	; (80018fc <csps_exti+0x2e8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b73      	cmp	r3, #115	; 0x73
 8001756:	d90c      	bls.n	8001772 <csps_exti+0x15e>
  {
    t1 = 1;
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <csps_exti+0x2e8>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]
    csps_errors += 1.0f;
 800175e:	4b6b      	ldr	r3, [pc, #428]	; (800190c <csps_exti+0x2f8>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001768:	ee77 7a87 	vadd.f32	s15, s15, s14
 800176c:	4b67      	ldr	r3, [pc, #412]	; (800190c <csps_exti+0x2f8>)
 800176e:	edc3 7a00 	vstr	s15, [r3]
  }

  average_prev = average;
 8001772:	4a63      	ldr	r2, [pc, #396]	; (8001900 <csps_exti+0x2ec>)
 8001774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001776:	6013      	str	r3, [r2, #0]

  if(csps_found)
 8001778:	4b66      	ldr	r3, [pc, #408]	; (8001914 <csps_exti+0x300>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8162 	beq.w	8001a48 <csps_exti+0x434>
  {
    switch(t1)
 8001784:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <csps_exti+0x2e8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <csps_exti+0x17e>
 800178c:	2b01      	cmp	r3, #1
 800178e:	d029      	beq.n	80017e4 <csps_exti+0x1d0>
 8001790:	e036      	b.n	8001800 <csps_exti+0x1ec>
    {
      case 0:
        csps_angle14 = ANGLE_INITIAL;
 8001792:	4b61      	ldr	r3, [pc, #388]	; (8001918 <csps_exti+0x304>)
 8001794:	4a61      	ldr	r2, [pc, #388]	; (800191c <csps_exti+0x308>)
 8001796:	601a      	str	r2, [r3, #0]
        if (ANGLE_INITIAL > 0)
          csps_angle23 = ANGLE_INITIAL - 180.0f;
        else
          csps_angle23 = ANGLE_INITIAL + 180.0f;
 8001798:	4b61      	ldr	r3, [pc, #388]	; (8001920 <csps_exti+0x30c>)
 800179a:	4a62      	ldr	r2, [pc, #392]	; (8001924 <csps_exti+0x310>)
 800179c:	601a      	str	r2, [r3, #0]
        cs14_p = csps_angle14 - 3.0f;
 800179e:	4b5e      	ldr	r3, [pc, #376]	; (8001918 <csps_exti+0x304>)
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80017a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017ac:	4b5e      	ldr	r3, [pc, #376]	; (8001928 <csps_exti+0x314>)
 80017ae:	edc3 7a00 	vstr	s15, [r3]
        cs23_p = csps_angle23 - 3.0f;
 80017b2:	4b5b      	ldr	r3, [pc, #364]	; (8001920 <csps_exti+0x30c>)
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80017bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017c0:	4b5a      	ldr	r3, [pc, #360]	; (800192c <csps_exti+0x318>)
 80017c2:	edc3 7a00 	vstr	s15, [r3]
        prev = DelayDiff(cur, (DelayDiff(cur, prev) / 3));
 80017c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80017c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017ca:	f000 fba5 	bl	8001f18 <DelayDiff>
 80017ce:	4602      	mov	r2, r0
 80017d0:	4b57      	ldr	r3, [pc, #348]	; (8001930 <csps_exti+0x31c>)
 80017d2:	fba3 2302 	umull	r2, r3, r3, r2
 80017d6:	085b      	lsrs	r3, r3, #1
 80017d8:	4619      	mov	r1, r3
 80017da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017dc:	f000 fb9c 	bl	8001f18 <DelayDiff>
 80017e0:	6438      	str	r0, [r7, #64]	; 0x40
        break;
 80017e2:	e0b6      	b.n	8001952 <csps_exti+0x33e>
      case 1:
        prev = DelayDiff(cur, (DelayDiff(cur, prev) / 3)); // @suppress("No break at end of case")
 80017e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80017e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017e8:	f000 fb96 	bl	8001f18 <DelayDiff>
 80017ec:	4602      	mov	r2, r0
 80017ee:	4b50      	ldr	r3, [pc, #320]	; (8001930 <csps_exti+0x31c>)
 80017f0:	fba3 2302 	umull	r2, r3, r3, r2
 80017f4:	085b      	lsrs	r3, r3, #1
 80017f6:	4619      	mov	r1, r3
 80017f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017fa:	f000 fb8d 	bl	8001f18 <DelayDiff>
 80017fe:	6438      	str	r0, [r7, #64]	; 0x40
      default:
        cs14 = csps_angle14 + 3.0f;
 8001800:	4b45      	ldr	r3, [pc, #276]	; (8001918 <csps_exti+0x304>)
 8001802:	edd3 7a00 	vldr	s15, [r3]
 8001806:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800180a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800180e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        if(cs14 > 180.0f) csps_angle14 = cs14 - 360.0f;
 8001812:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001816:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001934 <csps_exti+0x320>
 800181a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001822:	dd09      	ble.n	8001838 <csps_exti+0x224>
 8001824:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001828:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001938 <csps_exti+0x324>
 800182c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001830:	4b39      	ldr	r3, [pc, #228]	; (8001918 <csps_exti+0x304>)
 8001832:	edc3 7a00 	vstr	s15, [r3]
 8001836:	e002      	b.n	800183e <csps_exti+0x22a>
        else csps_angle14 = cs14;
 8001838:	4a37      	ldr	r2, [pc, #220]	; (8001918 <csps_exti+0x304>)
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	6013      	str	r3, [r2, #0]

        cs23 = csps_angle23 + 3.0f;
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <csps_exti+0x30c>)
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001848:	ee77 7a87 	vadd.f32	s15, s15, s14
 800184c:	edc7 7a08 	vstr	s15, [r7, #32]
        if(cs23 > 180.0f) csps_angle23 = cs23 - 360.0f;
 8001850:	edd7 7a08 	vldr	s15, [r7, #32]
 8001854:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001934 <csps_exti+0x320>
 8001858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	dd09      	ble.n	8001876 <csps_exti+0x262>
 8001862:	edd7 7a08 	vldr	s15, [r7, #32]
 8001866:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001938 <csps_exti+0x324>
 800186a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800186e:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <csps_exti+0x30c>)
 8001870:	edc3 7a00 	vstr	s15, [r3]
 8001874:	e002      	b.n	800187c <csps_exti+0x268>
        else csps_angle23 = cs23;
 8001876:	4a2a      	ldr	r2, [pc, #168]	; (8001920 <csps_exti+0x30c>)
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	6013      	str	r3, [r2, #0]

        cs14_p += 3.0f;
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <csps_exti+0x314>)
 800187e:	edd3 7a00 	vldr	s15, [r3]
 8001882:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001886:	ee77 7a87 	vadd.f32	s15, s15, s14
 800188a:	4b27      	ldr	r3, [pc, #156]	; (8001928 <csps_exti+0x314>)
 800188c:	edc3 7a00 	vstr	s15, [r3]
        if(cs14_p > 180.0f)
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <csps_exti+0x314>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001934 <csps_exti+0x320>
 800189a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800189e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a2:	dd09      	ble.n	80018b8 <csps_exti+0x2a4>
          cs14_p -= 360.0f;
 80018a4:	4b20      	ldr	r3, [pc, #128]	; (8001928 <csps_exti+0x314>)
 80018a6:	edd3 7a00 	vldr	s15, [r3]
 80018aa:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001938 <csps_exti+0x324>
 80018ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018b2:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <csps_exti+0x314>)
 80018b4:	edc3 7a00 	vstr	s15, [r3]

        cs23_p += 3.0f;
 80018b8:	4b1c      	ldr	r3, [pc, #112]	; (800192c <csps_exti+0x318>)
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80018c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <csps_exti+0x318>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]
        if(cs23_p > 180.0f)
 80018cc:	4b17      	ldr	r3, [pc, #92]	; (800192c <csps_exti+0x318>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001934 <csps_exti+0x320>
 80018d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	dc2d      	bgt.n	800193c <csps_exti+0x328>
          cs23_p -= 360.0f;
        break;
 80018e0:	e036      	b.n	8001950 <csps_exti+0x33c>
 80018e2:	bf00      	nop
 80018e4:	3c888889 	.word	0x3c888889
 80018e8:	3dcccccd 	.word	0x3dcccccd
 80018ec:	40000c00 	.word	0x40000c00
 80018f0:	20010b80 	.word	0x20010b80
 80018f4:	20010b5c 	.word	0x20010b5c
 80018f8:	20010b7d 	.word	0x20010b7d
 80018fc:	20010d9c 	.word	0x20010d9c
 8001900:	20010da0 	.word	0x20010da0
 8001904:	20010b98 	.word	0x20010b98
 8001908:	20010da4 	.word	0x20010da4
 800190c:	20010b88 	.word	0x20010b88
 8001910:	20010b84 	.word	0x20010b84
 8001914:	20010b7c 	.word	0x20010b7c
 8001918:	20010da8 	.word	0x20010da8
 800191c:	c2e40000 	.word	0xc2e40000
 8001920:	20010dac 	.word	0x20010dac
 8001924:	42840000 	.word	0x42840000
 8001928:	20010db0 	.word	0x20010db0
 800192c:	20010db4 	.word	0x20010db4
 8001930:	aaaaaaab 	.word	0xaaaaaaab
 8001934:	43340000 	.word	0x43340000
 8001938:	43b40000 	.word	0x43b40000
          cs23_p -= 360.0f;
 800193c:	4b6a      	ldr	r3, [pc, #424]	; (8001ae8 <csps_exti+0x4d4>)
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001aec <csps_exti+0x4d8>
 8001946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800194a:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <csps_exti+0x4d4>)
 800194c:	edc3 7a00 	vstr	s15, [r3]
        break;
 8001950:	bf00      	nop
    }

    if(csps_rpm == 0.0f)
 8001952:	4b67      	ldr	r3, [pc, #412]	; (8001af0 <csps_exti+0x4dc>)
 8001954:	edd3 7a00 	vldr	s15, [r3]
 8001958:	eef5 7a40 	vcmp.f32	s15, #0.0
 800195c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001960:	d102      	bne.n	8001968 <csps_exti+0x354>
      rpm_koff = 1.0f;
 8001962:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001966:	63bb      	str	r3, [r7, #56]	; 0x38

    diff = (float)DelayDiff(cur, prev);
 8001968:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800196a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800196c:	f000 fad4 	bl	8001f18 <DelayDiff>
 8001970:	ee07 0a90 	vmov	s15, r0
 8001974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001978:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    if(csps_period > 1000000.0f)
 800197c:	4b5d      	ldr	r3, [pc, #372]	; (8001af4 <csps_exti+0x4e0>)
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001af8 <csps_exti+0x4e4>
 8001986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198e:	dd02      	ble.n	8001996 <csps_exti+0x382>
      csps_period = 1000000.0f;
 8001990:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <csps_exti+0x4e0>)
 8001992:	4a5a      	ldr	r2, [pc, #360]	; (8001afc <csps_exti+0x4e8>)
 8001994:	601a      	str	r2, [r3, #0]

    csps_period = csps_period * (1.0f - rpm_koff) + (diff * 120.0f) * rpm_koff;
 8001996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800199a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800199e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019a2:	4b54      	ldr	r3, [pc, #336]	; (8001af4 <csps_exti+0x4e0>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80019b0:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001b00 <csps_exti+0x4ec>
 80019b4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80019b8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80019bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c4:	4b4b      	ldr	r3, [pc, #300]	; (8001af4 <csps_exti+0x4e0>)
 80019c6:	edc3 7a00 	vstr	s15, [r3]
    csps_rpm = 1000000.0f / csps_period * 60.0f;
 80019ca:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <csps_exti+0x4e0>)
 80019cc:	ed93 7a00 	vldr	s14, [r3]
 80019d0:	eddf 6a49 	vldr	s13, [pc, #292]	; 8001af8 <csps_exti+0x4e4>
 80019d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019d8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001b04 <csps_exti+0x4f0>
 80019dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e0:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <csps_exti+0x4dc>)
 80019e2:	edc3 7a00 	vstr	s15, [r3]
    csps_uspa = csps_uspa * (1.0f - uspa_koff) + (diff / 3.0f) * uspa_koff;
 80019e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019f2:	4b45      	ldr	r3, [pc, #276]	; (8001b08 <csps_exti+0x4f4>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a00:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8001a04:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001a08:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a14:	4b3c      	ldr	r3, [pc, #240]	; (8001b08 <csps_exti+0x4f4>)
 8001a16:	edc3 7a00 	vstr	s15, [r3]

    data.AngleCur14 = csps_angle14;
 8001a1a:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <csps_exti+0x4f8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	60bb      	str	r3, [r7, #8]
    data.AngleCur23 = csps_angle23;
 8001a20:	4b3b      	ldr	r3, [pc, #236]	; (8001b10 <csps_exti+0x4fc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	613b      	str	r3, [r7, #16]
    data.AnglePrev14 = cs14_p;
 8001a26:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <csps_exti+0x500>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	60fb      	str	r3, [r7, #12]
    data.AnglePrev23 = cs23_p;
 8001a2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <csps_exti+0x4d4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	617b      	str	r3, [r7, #20]
    data.DelayPrev = prev;
 8001a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a34:	607b      	str	r3, [r7, #4]
    data.DelayCur = cur;
 8001a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a38:	603b      	str	r3, [r7, #0]
    data.RPM = csps_rpm;
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <csps_exti+0x4dc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	61bb      	str	r3, [r7, #24]
    data.uSPA = csps_uspa;
 8001a40:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <csps_exti+0x4f4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	e029      	b.n	8001a9c <csps_exti+0x488>

  }
  else
  {
    data.AngleCur14 = 0;
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
    data.AngleCur23 = 0;
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
    data.AnglePrev14 = 0;
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
    data.AnglePrev23 = 0;
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
    data.DelayPrev = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
    data.DelayCur = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	603b      	str	r3, [r7, #0]
    data.RPM = 0;
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
    csps_rpm = 0;
 8001a6e:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <csps_exti+0x4dc>)
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
    data.uSPA = 1.0f / csps_rpm;
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <csps_exti+0x4dc>)
 8001a78:	ed93 7a00 	vldr	s14, [r3]
 8001a7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a84:	edc7 7a07 	vstr	s15, [r7, #28]
    csps_period = 1.0f / csps_rpm;
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <csps_exti+0x4dc>)
 8001a8a:	ed93 7a00 	vldr	s14, [r3]
 8001a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a96:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <csps_exti+0x4e0>)
 8001a98:	edc3 7a00 	vstr	s15, [r3]
  }
  CspsData[dataindex] = data;
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <csps_exti+0x504>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4a1e      	ldr	r2, [pc, #120]	; (8001b1c <csps_exti+0x508>)
 8001aa2:	015b      	lsls	r3, r3, #5
 8001aa4:	4413      	add	r3, r2
 8001aa6:	461d      	mov	r5, r3
 8001aa8:	463c      	mov	r4, r7
 8001aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ab2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  CspsDataPtr = &CspsData[dataindex];
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <csps_exti+0x504>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	015b      	lsls	r3, r3, #5
 8001abc:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <csps_exti+0x508>)
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <csps_exti+0x50c>)
 8001ac2:	6013      	str	r3, [r2, #0]
  if(++dataindex >= DATA_SIZE)
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <csps_exti+0x504>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <csps_exti+0x504>)
 8001ace:	701a      	strb	r2, [r3, #0]
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <csps_exti+0x504>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d904      	bls.n	8001ae2 <csps_exti+0x4ce>
    dataindex = 0;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <csps_exti+0x504>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	e000      	b.n	8001ae2 <csps_exti+0x4ce>
    return;
 8001ae0:	bf00      	nop

}
 8001ae2:	3748      	adds	r7, #72	; 0x48
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae8:	20010db4 	.word	0x20010db4
 8001aec:	43b40000 	.word	0x43b40000
 8001af0:	20010b8c 	.word	0x20010b8c
 8001af4:	20010b94 	.word	0x20010b94
 8001af8:	49742400 	.word	0x49742400
 8001afc:	49742400 	.word	0x49742400
 8001b00:	42f00000 	.word	0x42f00000
 8001b04:	42700000 	.word	0x42700000
 8001b08:	20010b90 	.word	0x20010b90
 8001b0c:	20010da8 	.word	0x20010da8
 8001b10:	20010dac 	.word	0x20010dac
 8001b14:	20010db0 	.word	0x20010db0
 8001b18:	20010db8 	.word	0x20010db8
 8001b1c:	20010b9c 	.word	0x20010b9c
 8001b20:	2001000c 	.word	0x2001000c

08001b24 <csps_getangle14>:
  else return 360 + a - b;
}
*/
volatile float rettttt;
inline float csps_getangle14(void)
{
 8001b24:	b5b0      	push	{r4, r5, r7, lr}
 8001b26:	b08e      	sub	sp, #56	; 0x38
 8001b28:	af00      	add	r7, sp, #0
  static float angle_prev = 0;
  float now = Delay_Tick;
 8001b2a:	4b53      	ldr	r3, [pc, #332]	; (8001c78 <csps_getangle14+0x154>)
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	ee07 3a90 	vmov	s15, r3
 8001b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b36:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float angle, acur, aprev, mult, cur;
  sCspsData data = *CspsDataPtr;
 8001b3a:	4b50      	ldr	r3, [pc, #320]	; (8001c7c <csps_getangle14+0x158>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	463c      	mov	r4, r7
 8001b40:	461d      	mov	r5, r3
 8001b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  cur = DelayDiff(data.DelayCur, data.DelayPrev);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 f9df 	bl	8001f18 <DelayDiff>
 8001b5a:	ee07 0a90 	vmov	s15, r0
 8001b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b62:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  now = DelayDiff(now, data.DelayPrev);
 8001b66:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4619      	mov	r1, r3
 8001b72:	ee17 0a90 	vmov	r0, s15
 8001b76:	f000 f9cf 	bl	8001f18 <DelayDiff>
 8001b7a:	ee07 0a90 	vmov	s15, r0
 8001b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b82:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

  acur = data.AngleCur14;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	633b      	str	r3, [r7, #48]	; 0x30
  aprev = data.AnglePrev14;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24

  if(acur < aprev)
 8001b8e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001b92:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9e:	d507      	bpl.n	8001bb0 <csps_getangle14+0x8c>
    acur += 360.0f;
 8001ba0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ba4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001c80 <csps_getangle14+0x15c>
 8001ba8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bac:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

  angle = acur - aprev;
 8001bb0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001bb4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bbc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  mult = angle / cur;
 8001bc0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001bc4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bcc:	edc7 7a08 	vstr	s15, [r7, #32]
  angle = mult * now + aprev;
 8001bd0:	ed97 7a08 	vldr	s14, [r7, #32]
 8001bd4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bdc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

  while(angle > 180.0f)
 8001be8:	e007      	b.n	8001bfa <csps_getangle14+0xd6>
    angle -= 360.0f;
 8001bea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001bee:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001c80 <csps_getangle14+0x15c>
 8001bf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bf6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  while(angle > 180.0f)
 8001bfa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001bfe:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001c84 <csps_getangle14+0x160>
 8001c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	dcee      	bgt.n	8001bea <csps_getangle14+0xc6>

  if((angle - angle_prev < 0.0f && angle - angle_prev > -90.0f) || angle - angle_prev > 90.0f)
 8001c0c:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <csps_getangle14+0x164>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c22:	d50d      	bpl.n	8001c40 <csps_getangle14+0x11c>
 8001c24:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <csps_getangle14+0x164>)
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c32:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001c8c <csps_getangle14+0x168>
 8001c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3e:	dc0d      	bgt.n	8001c5c <csps_getangle14+0x138>
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <csps_getangle14+0x164>)
 8001c42:	edd3 7a00 	vldr	s15, [r3]
 8001c46:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001c90 <csps_getangle14+0x16c>
 8001c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	dd02      	ble.n	8001c62 <csps_getangle14+0x13e>
  {
    angle = angle_prev;
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <csps_getangle14+0x164>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
  }
  angle_prev = angle;
 8001c62:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <csps_getangle14+0x164>)
 8001c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c66:	6013      	str	r3, [r2, #0]

  return angle;
 8001c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6a:	ee07 3a90 	vmov	s15, r3
}
 8001c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c72:	3738      	adds	r7, #56	; 0x38
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bdb0      	pop	{r4, r5, r7, pc}
 8001c78:	40000c00 	.word	0x40000c00
 8001c7c:	2001000c 	.word	0x2001000c
 8001c80:	43b40000 	.word	0x43b40000
 8001c84:	43340000 	.word	0x43340000
 8001c88:	20010dbc 	.word	0x20010dbc
 8001c8c:	c2b40000 	.word	0xc2b40000
 8001c90:	42b40000 	.word	0x42b40000

08001c94 <csps_getangle23from14>:

  return angle;
}

inline float csps_getangle23from14(float angle)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	ed87 0a01 	vstr	s0, [r7, #4]
  if(angle > 0.0f) angle -= 180.0f;
 8001c9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001caa:	dd08      	ble.n	8001cbe <csps_getangle23from14+0x2a>
 8001cac:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cb0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001ce4 <csps_getangle23from14+0x50>
 8001cb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8001cbc:	e007      	b.n	8001cce <csps_getangle23from14+0x3a>
  else angle += 180.0f;
 8001cbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cc2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001ce4 <csps_getangle23from14+0x50>
 8001cc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cca:	edc7 7a01 	vstr	s15, [r7, #4]
  return angle;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	ee07 3a90 	vmov	s15, r3
}
 8001cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	43340000 	.word	0x43340000

08001ce8 <csps_getrpm>:

inline float csps_getrpm(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return csps_rpm;
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <csps_getrpm+0x18>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	ee07 3a90 	vmov	s15, r3
}
 8001cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	20010b8c 	.word	0x20010b8c

08001d04 <csps_getuspa>:

inline float csps_getuspa(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return csps_uspa;
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <csps_getuspa+0x18>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	ee07 3a90 	vmov	s15, r3
}
 8001d10:	eeb0 0a67 	vmov.f32	s0, s15
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	20010b90 	.word	0x20010b90

08001d20 <csps_getperiod>:

inline float csps_getperiod(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return csps_period;
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <csps_getperiod+0x18>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	ee07 3a90 	vmov	s15, r3
}
 8001d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	20010b94 	.word	0x20010b94

08001d3c <csps_isrotates>:

inline uint8_t csps_isrotates(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return csps_rotates;
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <csps_isrotates+0x14>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	b2db      	uxtb	r3, r3
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	20010b7d 	.word	0x20010b7d

08001d54 <csps_isfound>:

inline uint8_t csps_isfound(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return csps_found;
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <csps_isfound+0x14>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b2db      	uxtb	r3, r3
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	20010b7c 	.word	0x20010b7c

08001d6c <csps_loop>:
{
  return csps_errors > 3.0f;
}

inline void csps_loop(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
  static uint32_t last_error_null = 0;

  uint32_t pulse_last = csps_pulse_last;
 8001d72:	4b37      	ldr	r3, [pc, #220]	; (8001e50 <csps_loop+0xe4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	60bb      	str	r3, [r7, #8]
  uint32_t last = csps_last;
 8001d78:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <csps_loop+0xe8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	607b      	str	r3, [r7, #4]
  uint32_t now = Delay_Tick;
 8001d7e:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <csps_loop+0xec>)
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	603b      	str	r3, [r7, #0]

  if(DelayDiff(now, pulse_last) > 50000)
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6838      	ldr	r0, [r7, #0]
 8001d88:	f000 f8c6 	bl	8001f18 <DelayDiff>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d921      	bls.n	8001dda <csps_loop+0x6e>
  {
    pulse_last = now;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	60bb      	str	r3, [r7, #8]
    for(int i = 0; i < IRQ_SIZE; i++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e007      	b.n	8001db0 <csps_loop+0x44>
      cspc_irq_data[i] = 0;
 8001da0:	4a2e      	ldr	r2, [pc, #184]	; (8001e5c <csps_loop+0xf0>)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2100      	movs	r1, #0
 8001da6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0; i < IRQ_SIZE; i++)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3301      	adds	r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b07      	cmp	r3, #7
 8001db4:	ddf4      	ble.n	8001da0 <csps_loop+0x34>
    csps_found = 0;
 8001db6:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <csps_loop+0xf4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
    csps_rpm = 0;
 8001dbc:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <csps_loop+0xf8>)
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
    csps_period = 1.0f / csps_rpm;
 8001dc4:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <csps_loop+0xf8>)
 8001dc6:	ed93 7a00 	vldr	s14, [r3]
 8001dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd2:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <csps_loop+0xfc>)
 8001dd4:	edc3 7a00 	vstr	s15, [r3]
 8001dd8:	e01d      	b.n	8001e16 <csps_loop+0xaa>
  }
  else if(DelayDiff(now, last) > 3000000)
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	6838      	ldr	r0, [r7, #0]
 8001dde:	f000 f89b 	bl	8001f18 <DelayDiff>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <csps_loop+0x100>)
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d915      	bls.n	8001e16 <csps_loop+0xaa>
  {
    last = now;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	607b      	str	r3, [r7, #4]
    csps_found = 0;
 8001dee:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <csps_loop+0xf4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
    csps_rpm = 0;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <csps_loop+0xf8>)
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
    csps_rotates = 0;
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <csps_loop+0x104>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
    csps_period = 1.0f / csps_rpm;
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <csps_loop+0xf8>)
 8001e04:	ed93 7a00 	vldr	s14, [r3]
 8001e08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <csps_loop+0xfc>)
 8001e12:	edc3 7a00 	vstr	s15, [r3]
  }

  if(DelayDiff(now, last_error_null) > 50000)
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <csps_loop+0x108>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6838      	ldr	r0, [r7, #0]
 8001e1e:	f000 f87b 	bl	8001f18 <DelayDiff>
 8001e22:	4602      	mov	r2, r0
 8001e24:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d90c      	bls.n	8001e46 <csps_loop+0xda>
  {
    csps_errors *= 0.95f;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <csps_loop+0x10c>)
 8001e2e:	edd3 7a00 	vldr	s15, [r3]
 8001e32:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001e7c <csps_loop+0x110>
 8001e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <csps_loop+0x10c>)
 8001e3c:	edc3 7a00 	vstr	s15, [r3]
    last_error_null = now;
 8001e40:	4a0c      	ldr	r2, [pc, #48]	; (8001e74 <csps_loop+0x108>)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	6013      	str	r3, [r2, #0]
  }

}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20010b80 	.word	0x20010b80
 8001e54:	20010b84 	.word	0x20010b84
 8001e58:	40000c00 	.word	0x40000c00
 8001e5c:	20010b5c 	.word	0x20010b5c
 8001e60:	20010b7c 	.word	0x20010b7c
 8001e64:	20010b8c 	.word	0x20010b8c
 8001e68:	20010b94 	.word	0x20010b94
 8001e6c:	002dc6c0 	.word	0x002dc6c0
 8001e70:	20010b7d 	.word	0x20010b7d
 8001e74:	20010dc0 	.word	0x20010dc0
 8001e78:	20010b88 	.word	0x20010b88
 8001e7c:	3f733333 	.word	0x3f733333

08001e80 <DelayInit>:
static TIM_HandleTypeDef htim_delay;

volatile uint32_t DelStart[COUNTERS];

void DelayInit(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
  __DELAY_TIM_CLK_ENABLE();
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <DelayInit+0x88>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <DelayInit+0x88>)
 8001e8c:	f043 0308 	orr.w	r3, r3, #8
 8001e90:	6413      	str	r3, [r2, #64]	; 0x40
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <DelayInit+0x88>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig;
    TIM_MasterConfigTypeDef sMasterConfig;

    htim_delay.Instance = DelayTimer;
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <DelayInit+0x8c>)
 8001ea0:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <DelayInit+0x90>)
 8001ea2:	601a      	str	r2, [r3, #0]
    htim_delay.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) - 1;
 8001ea4:	f003 fb2a 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4a19      	ldr	r2, [pc, #100]	; (8001f14 <DelayInit+0x94>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	0c9b      	lsrs	r3, r3, #18
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <DelayInit+0x8c>)
 8001eb8:	6053      	str	r3, [r2, #4]
    htim_delay.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <DelayInit+0x8c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
    htim_delay.Init.Period = 0xFFFFFFFF;
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <DelayInit+0x8c>)
 8001ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec6:	60da      	str	r2, [r3, #12]
    htim_delay.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <DelayInit+0x8c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim_delay);
 8001ece:	480f      	ldr	r0, [pc, #60]	; (8001f0c <DelayInit+0x8c>)
 8001ed0:	f004 f85f 	bl	8005f92 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed8:	613b      	str	r3, [r7, #16]
    HAL_TIM_ConfigClockSource(&htim_delay, &sClockSourceConfig);
 8001eda:	f107 0310 	add.w	r3, r7, #16
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480a      	ldr	r0, [pc, #40]	; (8001f0c <DelayInit+0x8c>)
 8001ee2:	f004 fb7d 	bl	80065e0 <HAL_TIM_ConfigClockSource>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
    HAL_TIMEx_MasterConfigSynchronization(&htim_delay, &sMasterConfig);
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4806      	ldr	r0, [pc, #24]	; (8001f0c <DelayInit+0x8c>)
 8001ef4:	f005 f81e 	bl	8006f34 <HAL_TIMEx_MasterConfigSynchronization>

    HAL_TIM_Base_Start(&htim_delay);
 8001ef8:	4804      	ldr	r0, [pc, #16]	; (8001f0c <DelayInit+0x8c>)
 8001efa:	f004 f875 	bl	8005fe8 <HAL_TIM_Base_Start>

}
 8001efe:	bf00      	nop
 8001f00:	3720      	adds	r7, #32
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	20010dc4 	.word	0x20010dc4
 8001f10:	40000c00 	.word	0x40000c00
 8001f14:	431bde83 	.word	0x431bde83

08001f18 <DelayDiff>:
{
  DelayUs(val * 1000);
}

inline uint32_t DelayDiff(uint32_t a, uint32_t b)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  if(a >= b)
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d303      	bcc.n	8001f32 <DelayDiff+0x1a>
    return (a - b);
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	e003      	b.n	8001f3a <DelayDiff+0x22>
  return ((0xFFFFFFFF - b) + a);
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	3b01      	subs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f50:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <SCB_EnableICache+0x3c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001f5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f60:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <SCB_EnableICache+0x3c>)
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <SCB_EnableICache+0x3c>)
 8001f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f74:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <SCB_EnableDCache+0x7c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001f96:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <SCB_EnableDCache+0x7c>)
 8001f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fa0:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	0b5b      	lsrs	r3, r3, #13
 8001fa6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001faa:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	08db      	lsrs	r3, r3, #3
 8001fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001fbe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001fc4:	490f      	ldr	r1, [pc, #60]	; (8002004 <SCB_EnableDCache+0x7c>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	1e5a      	subs	r2, r3, #1
 8001fd0:	60ba      	str	r2, [r7, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1ef      	bne.n	8001fb6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1e5a      	subs	r2, r3, #1
 8001fda:	60fa      	str	r2, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1e5      	bne.n	8001fac <SCB_EnableDCache+0x24>
 8001fe0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001fe4:	4b07      	ldr	r3, [pc, #28]	; (8002004 <SCB_EnableDCache+0x7c>)
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	4a06      	ldr	r2, [pc, #24]	; (8002004 <SCB_EnableDCache+0x7c>)
 8001fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fee:	6153      	str	r3, [r2, #20]
 8001ff0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ff4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <HAL_GPIO_EXTI_Callback>:
static void MX_RNG_Init(void);
static void UpdateIWDG(void);
static void UpdateDebugger(void);

inline void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002018:	d006      	beq.n	8002028 <HAL_GPIO_EXTI_Callback+0x20>
 800201a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800201e:	d006      	beq.n	800202e <HAL_GPIO_EXTI_Callback+0x26>
 8002020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002024:	d006      	beq.n	8002034 <HAL_GPIO_EXTI_Callback+0x2c>
      break;
    case ADC_STATUS_Pin :
      HAL_TIM_Base_Start_IT(&htim7);
      break;
    default:
      break;
 8002026:	e009      	b.n	800203c <HAL_GPIO_EXTI_Callback+0x34>
      csps_exti();
 8002028:	f7ff faf4 	bl	8001614 <csps_exti>
      break;
 800202c:	e006      	b.n	800203c <HAL_GPIO_EXTI_Callback+0x34>
      acis_hall_exti();
 800202e:	f7ff f87d 	bl	800112c <acis_hall_exti>
      break;
 8002032:	e003      	b.n	800203c <HAL_GPIO_EXTI_Callback+0x34>
      HAL_TIM_Base_Start_IT(&htim7);
 8002034:	4803      	ldr	r0, [pc, #12]	; (8002044 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002036:	f004 f801 	bl	800603c <HAL_TIM_Base_Start_IT>
      break;
 800203a:	bf00      	nop
  }
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20017090 	.word	0x20017090

08002048 <HAL_TIM_PeriodElapsedCallback>:

inline void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  static uint16_t ms_tim = 0;
  if(htim == &htim4)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a10      	ldr	r2, [pc, #64]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d112      	bne.n	800207e <HAL_TIM_PeriodElapsedCallback+0x36>
  {
    acis_loop();
 8002058:	f7ff f94c 	bl	80012f4 <acis_loop>
    if(++ms_tim >= 500)
 800205c:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002066:	801a      	strh	r2, [r3, #0]
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002070:	d30b      	bcc.n	800208a <HAL_TIM_PeriodElapsedCallback+0x42>
    {
      csps_loop();
 8002072:	f7ff fe7b 	bl	8001d6c <csps_loop>
      ms_tim = 0;
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002078:	2200      	movs	r2, #0
 800207a:	801a      	strh	r2, [r3, #0]
  }
  else if(htim == &htim7)
  {
    map_adc_read();
  }
}
 800207c:	e005      	b.n	800208a <HAL_TIM_PeriodElapsedCallback+0x42>
  else if(htim == &htim7)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a06      	ldr	r2, [pc, #24]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d101      	bne.n	800208a <HAL_TIM_PeriodElapsedCallback+0x42>
    map_adc_read();
 8002086:	f000 fdc5 	bl	8002c14 <map_adc_read>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20016cc4 	.word	0x20016cc4
 8002098:	20010e04 	.word	0x20010e04
 800209c:	20017090 	.word	0x20017090

080020a0 <main>:


int main(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  SCB_EnableICache();
 80020a4:	f7ff ff50 	bl	8001f48 <SCB_EnableICache>

  SCB_EnableDCache();
 80020a8:	f7ff ff6e 	bl	8001f88 <SCB_EnableDCache>

  HAL_Init();
 80020ac:	f001 fb2a 	bl	8003704 <HAL_Init>

  SystemClock_Config();
 80020b0:	f000 f8a8 	bl	8002204 <SystemClock_Config>

  MX_GPIO_Init();
 80020b4:	f000 fc3c 	bl	8002930 <MX_GPIO_Init>
  MX_DMA_Init();
 80020b8:	f000 fbe8 	bl	800288c <MX_DMA_Init>
  //MX_IWDG_Init();
  MX_USART1_UART_Init();  //Control Communication
 80020bc:	f000 fbae 	bl	800281c <MX_USART1_UART_Init>
  MX_SPI2_Init(); //SPI Flash
 80020c0:	f000 f9da 	bl	8002478 <MX_SPI2_Init>
  MX_ADC1_Init(); //Temperature and battery sensor
 80020c4:	f000 f936 	bl	8002334 <MX_ADC1_Init>
  MX_TIM3_Init(); //Servo PWM
 80020c8:	f000 fa14 	bl	80024f4 <MX_TIM3_Init>
  MX_TIM4_Init(); //ACIS common workout IT
 80020cc:	f000 fa82 	bl	80025d4 <MX_TIM4_Init>
  MX_TIM7_Init(); //Wait timer for ADC670
 80020d0:	f000 fac2 	bl	8002658 <MX_TIM7_Init>
  MX_TIM8_Init(); //ADCs trigger strobe
 80020d4:	f000 fb08 	bl	80026e8 <MX_TIM8_Init>
  MX_CRC_Init();
 80020d8:	f000 f98e 	bl	80023f8 <MX_CRC_Init>
  MX_RNG_Init();
 80020dc:	f000 f9b8 	bl	8002450 <MX_RNG_Init>

  xFifosInit();
 80020e0:	f001 fa54 	bl	800358c <xFifosInit>
  xGetterInit();
 80020e4:	f001 fa92 	bl	800360c <xGetterInit>

  DelayInit();
 80020e8:	f7ff feca 	bl	8001e80 <DelayInit>


  map_init();
 80020ec:	f000 fd6e 	bl	8002bcc <map_init>
  acis_init();
 80020f0:	f7fe fe34 	bl	8000d5c <acis_init>

  HAL_TIM_Base_Start(&htim8);
 80020f4:	4803      	ldr	r0, [pc, #12]	; (8002104 <main+0x64>)
 80020f6:	f003 ff77 	bl	8005fe8 <HAL_TIM_Base_Start>

  while (1)
  {
    UpdateIWDG();
 80020fa:	f000 f805 	bl	8002108 <UpdateIWDG>
    UpdateDebugger();
 80020fe:	f000 f825 	bl	800214c <UpdateDebugger>
    UpdateIWDG();
 8002102:	e7fa      	b.n	80020fa <main+0x5a>
 8002104:	20016c84 	.word	0x20016c84

08002108 <UpdateIWDG>:

  }
}

static inline void UpdateIWDG(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
  static uint32_t delay_old = 0;
  uint32_t delay = Delay_Tick;
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <UpdateIWDG+0x34>)
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	607b      	str	r3, [r7, #4]
  if(DelayDiff(delay, delay_old) > 1000000)
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <UpdateIWDG+0x38>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4619      	mov	r1, r3
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fefc 	bl	8001f18 <DelayDiff>
 8002120:	4602      	mov	r2, r0
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <UpdateIWDG+0x3c>)
 8002124:	429a      	cmp	r2, r3
 8002126:	d905      	bls.n	8002134 <UpdateIWDG+0x2c>
  {
    delay_old = delay;
 8002128:	4a05      	ldr	r2, [pc, #20]	; (8002140 <UpdateIWDG+0x38>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6013      	str	r3, [r2, #0]
    HAL_IWDG_Refresh(&hiwdg);
 800212e:	4806      	ldr	r0, [pc, #24]	; (8002148 <UpdateIWDG+0x40>)
 8002130:	f002 fd36 	bl	8004ba0 <HAL_IWDG_Refresh>
  }
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40000c00 	.word	0x40000c00
 8002140:	20010e08 	.word	0x20010e08
 8002144:	000f4240 	.word	0x000f4240
 8002148:	20016d64 	.word	0x20016d64

0800214c <UpdateDebugger>:

static inline void UpdateDebugger(void)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
  static uint8_t was_attached = 0;
  uint8_t attached = IS_DEBUGGER_ATTACHED();
 8002152:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <UpdateDebugger+0xb0>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	71fb      	strb	r3, [r7, #7]
  if(was_attached != attached)
 800215e:	4b28      	ldr	r3, [pc, #160]	; (8002200 <UpdateDebugger+0xb4>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	79fa      	ldrb	r2, [r7, #7]
 8002164:	429a      	cmp	r2, r3
 8002166:	d042      	beq.n	80021ee <UpdateDebugger+0xa2>
  {
    was_attached = attached;
 8002168:	4a25      	ldr	r2, [pc, #148]	; (8002200 <UpdateDebugger+0xb4>)
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	7013      	strb	r3, [r2, #0]
    if(attached)
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01e      	beq.n	80021b2 <UpdateDebugger+0x66>
    {
      __HAL_DBGMCU_FREEZE_IWDG();
 8002174:	4b21      	ldr	r3, [pc, #132]	; (80021fc <UpdateDebugger+0xb0>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4a20      	ldr	r2, [pc, #128]	; (80021fc <UpdateDebugger+0xb0>)
 800217a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800217e:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM4();
 8002180:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <UpdateDebugger+0xb0>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <UpdateDebugger+0xb0>)
 8002186:	f043 0304 	orr.w	r3, r3, #4
 800218a:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM5();
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <UpdateDebugger+0xb0>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a1a      	ldr	r2, [pc, #104]	; (80021fc <UpdateDebugger+0xb0>)
 8002192:	f043 0308 	orr.w	r3, r3, #8
 8002196:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM7();
 8002198:	4b18      	ldr	r3, [pc, #96]	; (80021fc <UpdateDebugger+0xb0>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4a17      	ldr	r2, [pc, #92]	; (80021fc <UpdateDebugger+0xb0>)
 800219e:	f043 0320 	orr.w	r3, r3, #32
 80021a2:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM8();
 80021a4:	4b15      	ldr	r3, [pc, #84]	; (80021fc <UpdateDebugger+0xb0>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4a14      	ldr	r2, [pc, #80]	; (80021fc <UpdateDebugger+0xb0>)
 80021aa:	f043 0302 	orr.w	r3, r3, #2
 80021ae:	60d3      	str	r3, [r2, #12]
      __HAL_DBGMCU_UNFREEZE_TIM5();
      __HAL_DBGMCU_UNFREEZE_TIM7();
      __HAL_DBGMCU_UNFREEZE_TIM8();
    }
  }
}
 80021b0:	e01d      	b.n	80021ee <UpdateDebugger+0xa2>
      __HAL_DBGMCU_UNFREEZE_IWDG();
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <UpdateDebugger+0xb0>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	4a11      	ldr	r2, [pc, #68]	; (80021fc <UpdateDebugger+0xb0>)
 80021b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021bc:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM4();
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <UpdateDebugger+0xb0>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4a0e      	ldr	r2, [pc, #56]	; (80021fc <UpdateDebugger+0xb0>)
 80021c4:	f023 0304 	bic.w	r3, r3, #4
 80021c8:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM5();
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <UpdateDebugger+0xb0>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <UpdateDebugger+0xb0>)
 80021d0:	f023 0308 	bic.w	r3, r3, #8
 80021d4:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM7();
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <UpdateDebugger+0xb0>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4a08      	ldr	r2, [pc, #32]	; (80021fc <UpdateDebugger+0xb0>)
 80021dc:	f023 0320 	bic.w	r3, r3, #32
 80021e0:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM8();
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <UpdateDebugger+0xb0>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <UpdateDebugger+0xb0>)
 80021e8:	f023 0302 	bic.w	r3, r3, #2
 80021ec:	60d3      	str	r3, [r2, #12]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e0042000 	.word	0xe0042000
 8002200:	20010e0c 	.word	0x20010e0c

08002204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0b4      	sub	sp, #208	; 0xd0
 8002208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800220a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800220e:	2230      	movs	r2, #48	; 0x30
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f005 ff04 	bl	8008020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002218:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	2280      	movs	r2, #128	; 0x80
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f005 fef5 	bl	8008020 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	4b3c      	ldr	r3, [pc, #240]	; (8002328 <SystemClock_Config+0x124>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a3b      	ldr	r2, [pc, #236]	; (8002328 <SystemClock_Config+0x124>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
 8002242:	4b39      	ldr	r3, [pc, #228]	; (8002328 <SystemClock_Config+0x124>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800224e:	4b37      	ldr	r3, [pc, #220]	; (800232c <SystemClock_Config+0x128>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a36      	ldr	r2, [pc, #216]	; (800232c <SystemClock_Config+0x128>)
 8002254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b34      	ldr	r3, [pc, #208]	; (800232c <SystemClock_Config+0x128>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002266:	230a      	movs	r3, #10
 8002268:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800226c:	2301      	movs	r3, #1
 800226e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = 10;
 8002272:	230a      	movs	r3, #10
 8002274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002278:	2301      	movs	r3, #1
 800227a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800227e:	2302      	movs	r3, #2
 8002280:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 800228a:	2308      	movs	r3, #8
 800228c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002290:	23d8      	movs	r3, #216	; 0xd8
 8002292:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002296:	2302      	movs	r3, #2
 8002298:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800229c:	2309      	movs	r3, #9
 800229e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f002 fcda 	bl	8004c60 <HAL_RCC_OscConfig>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80022b2:	f000 fc87 	bl	8002bc4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022b6:	f002 fc83 	bl	8004bc0 <HAL_PWREx_EnableOverDrive>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80022c0:	f000 fc80 	bl	8002bc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c4:	230f      	movs	r3, #15
 80022c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ca:	2302      	movs	r3, #2
 80022cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80022e6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80022ea:	2107      	movs	r1, #7
 80022ec:	4618      	mov	r0, r3
 80022ee:	f002 ff5b 	bl	80051a8 <HAL_RCC_ClockConfig>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80022f8:	f000 fc64 	bl	8002bc4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_CLK48;
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <SystemClock_Config+0x12c>)
 80022fe:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002300:	2300      	movs	r3, #0
 8002302:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002304:	2300      	movs	r3, #0
 8002306:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800230a:	f107 030c 	add.w	r3, r7, #12
 800230e:	4618      	mov	r0, r3
 8002310:	f003 f91c 	bl	800554c <HAL_RCCEx_PeriphCLKConfig>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <SystemClock_Config+0x11a>
  {
    Error_Handler();
 800231a:	f000 fc53 	bl	8002bc4 <Error_Handler>
  }
}
 800231e:	bf00      	nop
 8002320:	37d0      	adds	r7, #208	; 0xd0
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800
 800232c:	40007000 	.word	0x40007000
 8002330:	00200040 	.word	0x00200040

08002334 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800233a:	463b      	mov	r3, r7
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002346:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <MX_ADC1_Init+0xbc>)
 8002348:	4a2a      	ldr	r2, [pc, #168]	; (80023f4 <MX_ADC1_Init+0xc0>)
 800234a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800234c:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <MX_ADC1_Init+0xbc>)
 800234e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002352:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002354:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <MX_ADC1_Init+0xbc>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800235a:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <MX_ADC1_Init+0xbc>)
 800235c:	2201      	movs	r2, #1
 800235e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002360:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <MX_ADC1_Init+0xbc>)
 8002362:	2200      	movs	r2, #0
 8002364:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002366:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <MX_ADC1_Init+0xbc>)
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800236e:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <MX_ADC1_Init+0xbc>)
 8002370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002374:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8002376:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <MX_ADC1_Init+0xbc>)
 8002378:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800237c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800237e:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <MX_ADC1_Init+0xbc>)
 8002380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002384:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <MX_ADC1_Init+0xbc>)
 8002388:	2202      	movs	r2, #2
 800238a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <MX_ADC1_Init+0xbc>)
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002394:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <MX_ADC1_Init+0xbc>)
 8002396:	2200      	movs	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800239a:	4815      	ldr	r0, [pc, #84]	; (80023f0 <MX_ADC1_Init+0xbc>)
 800239c:	f001 fa18 	bl	80037d0 <HAL_ADC_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80023a6:	f000 fc0d 	bl	8002bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80023aa:	230c      	movs	r3, #12
 80023ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023ae:	2301      	movs	r3, #1
 80023b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023b6:	463b      	mov	r3, r7
 80023b8:	4619      	mov	r1, r3
 80023ba:	480d      	ldr	r0, [pc, #52]	; (80023f0 <MX_ADC1_Init+0xbc>)
 80023bc:	f001 fa4c 	bl	8003858 <HAL_ADC_ConfigChannel>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80023c6:	f000 fbfd 	bl	8002bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80023ca:	230d      	movs	r3, #13
 80023cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80023ce:	2302      	movs	r3, #2
 80023d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023d2:	463b      	mov	r3, r7
 80023d4:	4619      	mov	r1, r3
 80023d6:	4806      	ldr	r0, [pc, #24]	; (80023f0 <MX_ADC1_Init+0xbc>)
 80023d8:	f001 fa3e 	bl	8003858 <HAL_ADC_ConfigChannel>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80023e2:	f000 fbef 	bl	8002bc4 <Error_Handler>
  */
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20016e98 	.word	0x20016e98
 80023f4:	40012000 	.word	0x40012000

080023f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <MX_CRC_Init+0x50>)
 80023fe:	4a13      	ldr	r2, [pc, #76]	; (800244c <MX_CRC_Init+0x54>)
 8002400:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <MX_CRC_Init+0x50>)
 8002404:	2201      	movs	r2, #1
 8002406:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <MX_CRC_Init+0x50>)
 800240a:	2201      	movs	r2, #1
 800240c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = CRC_POLY;
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <MX_CRC_Init+0x50>)
 8002410:	f24a 0201 	movw	r2, #40961	; 0xa001
 8002414:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8002416:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <MX_CRC_Init+0x50>)
 8002418:	2208      	movs	r2, #8
 800241a:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 800241c:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <MX_CRC_Init+0x50>)
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <MX_CRC_Init+0x50>)
 8002424:	2220      	movs	r2, #32
 8002426:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8002428:	4b07      	ldr	r3, [pc, #28]	; (8002448 <MX_CRC_Init+0x50>)
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <MX_CRC_Init+0x50>)
 8002430:	2201      	movs	r2, #1
 8002432:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002434:	4804      	ldr	r0, [pc, #16]	; (8002448 <MX_CRC_Init+0x50>)
 8002436:	f001 fd65 	bl	8003f04 <HAL_CRC_Init>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8002440:	f000 fbc0 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20016d74 	.word	0x20016d74
 800244c:	40023000 	.word	0x40023000

08002450 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <MX_RNG_Init+0x20>)
 8002456:	4a07      	ldr	r2, [pc, #28]	; (8002474 <MX_RNG_Init+0x24>)
 8002458:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800245a:	4805      	ldr	r0, [pc, #20]	; (8002470 <MX_RNG_Init+0x20>)
 800245c:	f003 fbbe 	bl	8005bdc <HAL_RNG_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002466:	f000 fbad 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20017020 	.word	0x20017020
 8002474:	50060800 	.word	0x50060800

08002478 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <MX_SPI2_Init+0x74>)
 800247e:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <MX_SPI2_Init+0x78>)
 8002480:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <MX_SPI2_Init+0x74>)
 8002484:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002488:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <MX_SPI2_Init+0x74>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <MX_SPI2_Init+0x74>)
 8002492:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002496:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002498:	4b14      	ldr	r3, [pc, #80]	; (80024ec <MX_SPI2_Init+0x74>)
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800249e:	4b13      	ldr	r3, [pc, #76]	; (80024ec <MX_SPI2_Init+0x74>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <MX_SPI2_Init+0x74>)
 80024a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <MX_SPI2_Init+0x74>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <MX_SPI2_Init+0x74>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <MX_SPI2_Init+0x74>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <MX_SPI2_Init+0x74>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <MX_SPI2_Init+0x74>)
 80024c6:	2207      	movs	r2, #7
 80024c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <MX_SPI2_Init+0x74>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <MX_SPI2_Init+0x74>)
 80024d2:	2208      	movs	r2, #8
 80024d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024d6:	4805      	ldr	r0, [pc, #20]	; (80024ec <MX_SPI2_Init+0x74>)
 80024d8:	f003 fbaa 	bl	8005c30 <HAL_SPI_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80024e2:	f000 fb6f 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20016c20 	.word	0x20016c20
 80024f0:	40003800 	.word	0x40003800

080024f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fa:	f107 031c 	add.w	r3, r7, #28
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002506:	463b      	mov	r3, r7
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
 8002514:	615a      	str	r2, [r3, #20]
 8002516:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002518:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <MX_TIM3_Init+0xd4>)
 800251a:	4a2c      	ldr	r2, [pc, #176]	; (80025cc <MX_TIM3_Init+0xd8>)
 800251c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 50 / 5120) - 1; //This is to set prescaler to 1 MHz
 800251e:	f002 ffed 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 8002522:	4603      	mov	r3, r0
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4a2a      	ldr	r2, [pc, #168]	; (80025d0 <MX_TIM3_Init+0xdc>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	0b9b      	lsrs	r3, r3, #14
 800252e:	3b01      	subs	r3, #1
 8002530:	4a25      	ldr	r2, [pc, #148]	; (80025c8 <MX_TIM3_Init+0xd4>)
 8002532:	6053      	str	r3, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002534:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <MX_TIM3_Init+0xd4>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5119;
 800253a:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <MX_TIM3_Init+0xd4>)
 800253c:	f241 32ff 	movw	r2, #5119	; 0x13ff
 8002540:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <MX_TIM3_Init+0xd4>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002548:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <MX_TIM3_Init+0xd4>)
 800254a:	2200      	movs	r2, #0
 800254c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800254e:	481e      	ldr	r0, [pc, #120]	; (80025c8 <MX_TIM3_Init+0xd4>)
 8002550:	f003 fd9e 	bl	8006090 <HAL_TIM_PWM_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800255a:	f000 fb33 	bl	8002bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002566:	f107 031c 	add.w	r3, r7, #28
 800256a:	4619      	mov	r1, r3
 800256c:	4816      	ldr	r0, [pc, #88]	; (80025c8 <MX_TIM3_Init+0xd4>)
 800256e:	f004 fce1 	bl	8006f34 <HAL_TIMEx_MasterConfigSynchronization>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002578:	f000 fb24 	bl	8002bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800257c:	2360      	movs	r3, #96	; 0x60
 800257e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 256;
 8002580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002584:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800258e:	463b      	mov	r3, r7
 8002590:	2208      	movs	r2, #8
 8002592:	4619      	mov	r1, r3
 8002594:	480c      	ldr	r0, [pc, #48]	; (80025c8 <MX_TIM3_Init+0xd4>)
 8002596:	f003 ff0b 	bl	80063b0 <HAL_TIM_PWM_ConfigChannel>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80025a0:	f000 fb10 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025a4:	463b      	mov	r3, r7
 80025a6:	220c      	movs	r2, #12
 80025a8:	4619      	mov	r1, r3
 80025aa:	4807      	ldr	r0, [pc, #28]	; (80025c8 <MX_TIM3_Init+0xd4>)
 80025ac:	f003 ff00 	bl	80063b0 <HAL_TIM_PWM_ConfigChannel>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 80025b6:	f000 fb05 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025ba:	4803      	ldr	r0, [pc, #12]	; (80025c8 <MX_TIM3_Init+0xd4>)
 80025bc:	f000 fdd4 	bl	8003168 <HAL_TIM_MspPostInit>

}
 80025c0:	bf00      	nop
 80025c2:	3728      	adds	r7, #40	; 0x28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20016df8 	.word	0x20016df8
 80025cc:	40000400 	.word	0x40000400
 80025d0:	10624dd3 	.word	0x10624dd3

080025d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025da:	463b      	mov	r3, r7
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025e6:	4b19      	ldr	r3, [pc, #100]	; (800264c <MX_TIM4_Init+0x78>)
 80025e8:	4a19      	ldr	r2, [pc, #100]	; (8002650 <MX_TIM4_Init+0x7c>)
 80025ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) - 1; //This is to set prescaler to 1 MHz
 80025ec:	f002 ff86 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 80025f0:	4603      	mov	r3, r0
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4a17      	ldr	r2, [pc, #92]	; (8002654 <MX_TIM4_Init+0x80>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	0c9b      	lsrs	r3, r3, #18
 80025fc:	3b01      	subs	r3, #1
 80025fe:	4a13      	ldr	r2, [pc, #76]	; (800264c <MX_TIM4_Init+0x78>)
 8002600:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <MX_TIM4_Init+0x78>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 14;
 8002608:	4b10      	ldr	r3, [pc, #64]	; (800264c <MX_TIM4_Init+0x78>)
 800260a:	220e      	movs	r2, #14
 800260c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <MX_TIM4_Init+0x78>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002614:	4b0d      	ldr	r3, [pc, #52]	; (800264c <MX_TIM4_Init+0x78>)
 8002616:	2200      	movs	r2, #0
 8002618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800261a:	480c      	ldr	r0, [pc, #48]	; (800264c <MX_TIM4_Init+0x78>)
 800261c:	f003 fcb9 	bl	8005f92 <HAL_TIM_Base_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002626:	f000 facd 	bl	8002bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800262a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800262e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002630:	463b      	mov	r3, r7
 8002632:	4619      	mov	r1, r3
 8002634:	4805      	ldr	r0, [pc, #20]	; (800264c <MX_TIM4_Init+0x78>)
 8002636:	f003 ffd3 	bl	80065e0 <HAL_TIM_ConfigClockSource>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002640:	f000 fac0 	bl	8002bc4 <Error_Handler>
  }

}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20016cc4 	.word	0x20016cc4
 8002650:	40000800 	.word	0x40000800
 8002654:	431bde83 	.word	0x431bde83

08002658 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002668:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <MX_TIM7_Init+0x84>)
 800266a:	4a1d      	ldr	r2, [pc, #116]	; (80026e0 <MX_TIM7_Init+0x88>)
 800266c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800266e:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <MX_TIM7_Init+0x84>)
 8002670:	2200      	movs	r2, #0
 8002672:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <MX_TIM7_Init+0x84>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) / 2 - 1; //This is to set period to 2 MHz;
 800267a:	f002 ff3f 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 800267e:	4603      	mov	r3, r0
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <MX_TIM7_Init+0x8c>)
 8002684:	fba2 2303 	umull	r2, r3, r2, r3
 8002688:	0cdb      	lsrs	r3, r3, #19
 800268a:	3b01      	subs	r3, #1
 800268c:	4a13      	ldr	r2, [pc, #76]	; (80026dc <MX_TIM7_Init+0x84>)
 800268e:	60d3      	str	r3, [r2, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <MX_TIM7_Init+0x84>)
 8002692:	2200      	movs	r2, #0
 8002694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002696:	4811      	ldr	r0, [pc, #68]	; (80026dc <MX_TIM7_Init+0x84>)
 8002698:	f003 fc7b 	bl	8005f92 <HAL_TIM_Base_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM7_Init+0x4e>
  {
    Error_Handler();
 80026a2:	f000 fa8f 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 80026a6:	2108      	movs	r1, #8
 80026a8:	480c      	ldr	r0, [pc, #48]	; (80026dc <MX_TIM7_Init+0x84>)
 80026aa:	f003 fd1c 	bl	80060e6 <HAL_TIM_OnePulse_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM7_Init+0x60>
  {
    Error_Handler();
 80026b4:	f000 fa86 	bl	8002bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026b8:	2320      	movs	r3, #32
 80026ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	4619      	mov	r1, r3
 80026c4:	4805      	ldr	r0, [pc, #20]	; (80026dc <MX_TIM7_Init+0x84>)
 80026c6:	f004 fc35 	bl	8006f34 <HAL_TIMEx_MasterConfigSynchronization>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM7_Init+0x7c>
  {
    Error_Handler();
 80026d0:	f000 fa78 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20017090 	.word	0x20017090
 80026e0:	40001400 	.word	0x40001400
 80026e4:	431bde83 	.word	0x431bde83

080026e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b096      	sub	sp, #88	; 0x58
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	60da      	str	r2, [r3, #12]
 8002708:	611a      	str	r2, [r3, #16]
 800270a:	615a      	str	r2, [r3, #20]
 800270c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	222c      	movs	r2, #44	; 0x2c
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f005 fc83 	bl	8008020 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800271a:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <MX_TIM8_Init+0x128>)
 800271c:	4a3d      	ldr	r2, [pc, #244]	; (8002814 <MX_TIM8_Init+0x12c>)
 800271e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = (HAL_RCC_GetPCLK2Freq() * 2 / 1000000) - 1; //This is to set prescaler to 1 MHz
 8002720:	f002 ff00 	bl	8005524 <HAL_RCC_GetPCLK2Freq>
 8002724:	4603      	mov	r3, r0
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4a3b      	ldr	r2, [pc, #236]	; (8002818 <MX_TIM8_Init+0x130>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	0c9b      	lsrs	r3, r3, #18
 8002730:	3b01      	subs	r3, #1
 8002732:	4a37      	ldr	r2, [pc, #220]	; (8002810 <MX_TIM8_Init+0x128>)
 8002734:	6053      	str	r3, [r2, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002736:	4b36      	ldr	r3, [pc, #216]	; (8002810 <MX_TIM8_Init+0x128>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 800273c:	4b34      	ldr	r3, [pc, #208]	; (8002810 <MX_TIM8_Init+0x128>)
 800273e:	2231      	movs	r2, #49	; 0x31
 8002740:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002742:	4b33      	ldr	r3, [pc, #204]	; (8002810 <MX_TIM8_Init+0x128>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002748:	4b31      	ldr	r3, [pc, #196]	; (8002810 <MX_TIM8_Init+0x128>)
 800274a:	2200      	movs	r2, #0
 800274c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274e:	4b30      	ldr	r3, [pc, #192]	; (8002810 <MX_TIM8_Init+0x128>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002754:	482e      	ldr	r0, [pc, #184]	; (8002810 <MX_TIM8_Init+0x128>)
 8002756:	f003 fc9b 	bl	8006090 <HAL_TIM_PWM_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002760:	f000 fa30 	bl	8002bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002764:	2320      	movs	r3, #32
 8002766:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002768:	2300      	movs	r3, #0
 800276a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800276c:	2300      	movs	r3, #0
 800276e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002770:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002774:	4619      	mov	r1, r3
 8002776:	4826      	ldr	r0, [pc, #152]	; (8002810 <MX_TIM8_Init+0x128>)
 8002778:	f004 fbdc 	bl	8006f34 <HAL_TIMEx_MasterConfigSynchronization>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002782:	f000 fa1f 	bl	8002bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002786:	2360      	movs	r3, #96	; 0x60
 8002788:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1;
 800278a:	2301      	movs	r3, #1
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800278e:	2300      	movs	r3, #0
 8002790:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002792:	2308      	movs	r3, #8
 8002794:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002796:	2300      	movs	r3, #0
 8002798:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800279a:	2300      	movs	r3, #0
 800279c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800279e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027a8:	2208      	movs	r2, #8
 80027aa:	4619      	mov	r1, r3
 80027ac:	4818      	ldr	r0, [pc, #96]	; (8002810 <MX_TIM8_Init+0x128>)
 80027ae:	f003 fdff 	bl	80063b0 <HAL_TIM_PWM_ConfigChannel>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 80027b8:	f000 fa04 	bl	8002bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027bc:	2300      	movs	r3, #0
 80027be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80027de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	4619      	mov	r1, r3
 80027f0:	4807      	ldr	r0, [pc, #28]	; (8002810 <MX_TIM8_Init+0x128>)
 80027f2:	f004 fc2d 	bl	8007050 <HAL_TIMEx_ConfigBreakDeadTime>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80027fc:	f000 f9e2 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002800:	4803      	ldr	r0, [pc, #12]	; (8002810 <MX_TIM8_Init+0x128>)
 8002802:	f000 fcb1 	bl	8003168 <HAL_TIM_MspPostInit>

}
 8002806:	bf00      	nop
 8002808:	3758      	adds	r7, #88	; 0x58
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20016c84 	.word	0x20016c84
 8002814:	40010400 	.word	0x40010400
 8002818:	431bde83 	.word	0x431bde83

0800281c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002820:	4b17      	ldr	r3, [pc, #92]	; (8002880 <MX_USART1_UART_Init+0x64>)
 8002822:	4a18      	ldr	r2, [pc, #96]	; (8002884 <MX_USART1_UART_Init+0x68>)
 8002824:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3375000;
 8002826:	4b16      	ldr	r3, [pc, #88]	; (8002880 <MX_USART1_UART_Init+0x64>)
 8002828:	4a17      	ldr	r2, [pc, #92]	; (8002888 <MX_USART1_UART_Init+0x6c>)
 800282a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <MX_USART1_UART_Init+0x64>)
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <MX_USART1_UART_Init+0x64>)
 8002834:	2200      	movs	r2, #0
 8002836:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <MX_USART1_UART_Init+0x64>)
 800283a:	2200      	movs	r2, #0
 800283c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <MX_USART1_UART_Init+0x64>)
 8002840:	220c      	movs	r2, #12
 8002842:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <MX_USART1_UART_Init+0x64>)
 8002846:	2200      	movs	r2, #0
 8002848:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <MX_USART1_UART_Init+0x64>)
 800284c:	2200      	movs	r2, #0
 800284e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <MX_USART1_UART_Init+0x64>)
 8002852:	2200      	movs	r2, #0
 8002854:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <MX_USART1_UART_Init+0x64>)
 8002858:	2240      	movs	r2, #64	; 0x40
 800285a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <MX_USART1_UART_Init+0x64>)
 800285e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME;
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <MX_USART1_UART_Init+0x64>)
 8002866:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 800286a:	645a      	str	r2, [r3, #68]	; 0x44
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800286c:	4804      	ldr	r0, [pc, #16]	; (8002880 <MX_USART1_UART_Init+0x64>)
 800286e:	f004 fcb0 	bl	80071d2 <HAL_UART_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8002878:	f000 f9a4 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800287c:	bf00      	nop
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20016f40 	.word	0x20016f40
 8002884:	40011000 	.word	0x40011000
 8002888:	00337f98 	.word	0x00337f98

0800288c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <MX_DMA_Init+0xa0>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a25      	ldr	r2, [pc, #148]	; (800292c <MX_DMA_Init+0xa0>)
 8002898:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b23      	ldr	r3, [pc, #140]	; (800292c <MX_DMA_Init+0xa0>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <MX_DMA_Init+0xa0>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a1f      	ldr	r2, [pc, #124]	; (800292c <MX_DMA_Init+0xa0>)
 80028b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b1d      	ldr	r3, [pc, #116]	; (800292c <MX_DMA_Init+0xa0>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0); //TIM7_UP
 80028c2:	2200      	movs	r2, #0
 80028c4:	2105      	movs	r1, #5
 80028c6:	200d      	movs	r0, #13
 80028c8:	f001 fae5 	bl	8003e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80028cc:	200d      	movs	r0, #13
 80028ce:	f001 fafe 	bl	8003ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 15, 0); //SPI2_RX
 80028d2:	2200      	movs	r2, #0
 80028d4:	210f      	movs	r1, #15
 80028d6:	200e      	movs	r0, #14
 80028d8:	f001 fadd 	bl	8003e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80028dc:	200e      	movs	r0, #14
 80028de:	f001 faf6 	bl	8003ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 15, 0); //SPI2_TX
 80028e2:	2200      	movs	r2, #0
 80028e4:	210f      	movs	r1, #15
 80028e6:	200f      	movs	r0, #15
 80028e8:	f001 fad5 	bl	8003e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80028ec:	200f      	movs	r0, #15
 80028ee:	f001 faee 	bl	8003ece <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 6, 0); //ADC1
 80028f2:	2200      	movs	r2, #0
 80028f4:	2106      	movs	r1, #6
 80028f6:	2038      	movs	r0, #56	; 0x38
 80028f8:	f001 facd 	bl	8003e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80028fc:	2038      	movs	r0, #56	; 0x38
 80028fe:	f001 fae6 	bl	8003ece <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 8, 0); //USART1_RX
 8002902:	2200      	movs	r2, #0
 8002904:	2108      	movs	r1, #8
 8002906:	203a      	movs	r0, #58	; 0x3a
 8002908:	f001 fac5 	bl	8003e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800290c:	203a      	movs	r0, #58	; 0x3a
 800290e:	f001 fade 	bl	8003ece <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 9, 0); //USART1_TX
 8002912:	2200      	movs	r2, #0
 8002914:	2109      	movs	r1, #9
 8002916:	2046      	movs	r0, #70	; 0x46
 8002918:	f001 fabd 	bl	8003e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800291c:	2046      	movs	r0, #70	; 0x46
 800291e:	f001 fad6 	bl	8003ece <HAL_NVIC_EnableIRQ>

}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800

08002930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08a      	sub	sp, #40	; 0x28
 8002934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
 8002944:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002946:	4b97      	ldr	r3, [pc, #604]	; (8002ba4 <MX_GPIO_Init+0x274>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	4a96      	ldr	r2, [pc, #600]	; (8002ba4 <MX_GPIO_Init+0x274>)
 800294c:	f043 0304 	orr.w	r3, r3, #4
 8002950:	6313      	str	r3, [r2, #48]	; 0x30
 8002952:	4b94      	ldr	r3, [pc, #592]	; (8002ba4 <MX_GPIO_Init+0x274>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800295e:	4b91      	ldr	r3, [pc, #580]	; (8002ba4 <MX_GPIO_Init+0x274>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a90      	ldr	r2, [pc, #576]	; (8002ba4 <MX_GPIO_Init+0x274>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b8e      	ldr	r3, [pc, #568]	; (8002ba4 <MX_GPIO_Init+0x274>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002976:	4b8b      	ldr	r3, [pc, #556]	; (8002ba4 <MX_GPIO_Init+0x274>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a8a      	ldr	r2, [pc, #552]	; (8002ba4 <MX_GPIO_Init+0x274>)
 800297c:	f043 0302 	orr.w	r3, r3, #2
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b88      	ldr	r3, [pc, #544]	; (8002ba4 <MX_GPIO_Init+0x274>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800298e:	4b85      	ldr	r3, [pc, #532]	; (8002ba4 <MX_GPIO_Init+0x274>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a84      	ldr	r2, [pc, #528]	; (8002ba4 <MX_GPIO_Init+0x274>)
 8002994:	f043 0308 	orr.w	r3, r3, #8
 8002998:	6313      	str	r3, [r2, #48]	; 0x30
 800299a:	4b82      	ldr	r3, [pc, #520]	; (8002ba4 <MX_GPIO_Init+0x274>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VDD3V3EN_Pin|SPI2_WP_Pin|RELAY_IGN_Pin, GPIO_PIN_RESET);
 80029a6:	2200      	movs	r2, #0
 80029a8:	f240 4141 	movw	r1, #1089	; 0x441
 80029ac:	487e      	ldr	r0, [pc, #504]	; (8002ba8 <MX_GPIO_Init+0x278>)
 80029ae:	f002 f8c5 	bl	8004b3c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, IGN_14_Pin|IGN_23_Pin, GPIO_PIN_SET);
 80029b2:	2201      	movs	r2, #1
 80029b4:	21c0      	movs	r1, #192	; 0xc0
 80029b6:	487d      	ldr	r0, [pc, #500]	; (8002bac <MX_GPIO_Init+0x27c>)
 80029b8:	f002 f8c0 	bl	8004b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_nCE_Pin|LED_CHECK_Pin, GPIO_PIN_SET);
 80029bc:	2201      	movs	r2, #1
 80029be:	2190      	movs	r1, #144	; 0x90
 80029c0:	4879      	ldr	r0, [pc, #484]	; (8002ba8 <MX_GPIO_Init+0x278>)
 80029c2:	f002 f8bb 	bl	8004b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 80029c6:	2201      	movs	r2, #1
 80029c8:	2101      	movs	r1, #1
 80029ca:	4878      	ldr	r0, [pc, #480]	; (8002bac <MX_GPIO_Init+0x27c>)
 80029cc:	f002 f8b6 	bl	8004b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_FORMAT_Pin|ADC_BPO_Pin|SPI2_NSS_Pin|PROPANE_OUT_Pin
 80029d0:	2200      	movs	r2, #0
 80029d2:	f241 7104 	movw	r1, #5892	; 0x1704
 80029d6:	4875      	ldr	r0, [pc, #468]	; (8002bac <MX_GPIO_Init+0x27c>)
 80029d8:	f002 f8b0 	bl	8004b3c <HAL_GPIO_WritePin>
                          |PETROL_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_START_GPIO_Port, RELAY_START_Pin, GPIO_PIN_RESET);
 80029dc:	2200      	movs	r2, #0
 80029de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029e2:	4873      	ldr	r0, [pc, #460]	; (8002bb0 <MX_GPIO_Init+0x280>)
 80029e4:	f002 f8aa 	bl	8004b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_RESET);
 80029e8:	2200      	movs	r2, #0
 80029ea:	2104      	movs	r1, #4
 80029ec:	4871      	ldr	r0, [pc, #452]	; (8002bb4 <MX_GPIO_Init+0x284>)
 80029ee:	f002 f8a5 	bl	8004b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SENS_CSPS_Pin */
  GPIO_InitStruct.Pin = SENS_CSPS_Pin;
 80029f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80029f8:	4b6f      	ldr	r3, [pc, #444]	; (8002bb8 <MX_GPIO_Init+0x288>)
 80029fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029fc:	2302      	movs	r3, #2
 80029fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENS_CSPS_GPIO_Port, &GPIO_InitStruct);
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	4619      	mov	r1, r3
 8002a06:	4868      	ldr	r0, [pc, #416]	; (8002ba8 <MX_GPIO_Init+0x278>)
 8002a08:	f001 fefe 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_HALL_Pin */
  GPIO_InitStruct.Pin = SENS_HALL_Pin;
 8002a0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a12:	4b6a      	ldr	r3, [pc, #424]	; (8002bbc <MX_GPIO_Init+0x28c>)
 8002a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a1a:	f107 0314 	add.w	r3, r7, #20
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4861      	ldr	r0, [pc, #388]	; (8002ba8 <MX_GPIO_Init+0x278>)
 8002a22:	f001 fef1 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_ACC_Pin */
  GPIO_InitStruct.Pin = SENS_ACC_Pin;
 8002a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a30:	2301      	movs	r3, #1
 8002a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a34:	f107 0314 	add.w	r3, r7, #20
 8002a38:	4619      	mov	r1, r3
 8002a3a:	485b      	ldr	r0, [pc, #364]	; (8002ba8 <MX_GPIO_Init+0x278>)
 8002a3c:	f001 fee4 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : VDD3V3EN_Pin ADC_nCE_Pin LED_CHECK_Pin RELAY_IGN_Pin */
  GPIO_InitStruct.Pin = VDD3V3EN_Pin|ADC_nCE_Pin|LED_CHECK_Pin|RELAY_IGN_Pin;
 8002a40:	f240 4391 	movw	r3, #1169	; 0x491
 8002a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a46:	2301      	movs	r3, #1
 8002a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a52:	f107 0314 	add.w	r3, r7, #20
 8002a56:	4619      	mov	r1, r3
 8002a58:	4853      	ldr	r0, [pc, #332]	; (8002ba8 <MX_GPIO_Init+0x278>)
 8002a5a:	f001 fed5 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC0_Pin ADC1_Pin ADC2_Pin ADC3_Pin
                           ADC4_Pin ADC5_Pin ADC6_Pin ADC7_Pin */
  GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin
 8002a5e:	23ff      	movs	r3, #255	; 0xff
 8002a60:	617b      	str	r3, [r7, #20]
                          |ADC4_Pin|ADC5_Pin|ADC6_Pin|ADC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4619      	mov	r1, r3
 8002a70:	484f      	ldr	r0, [pc, #316]	; (8002bb0 <MX_GPIO_Init+0x280>)
 8002a72:	f001 fec9 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_nCS_Pin ADC_FORMAT_Pin ADC_BPO_Pin PROPANE_OUT_Pin
                           PETROL_OUT_Pin */
  GPIO_InitStruct.Pin = ADC_nCS_Pin|ADC_FORMAT_Pin|ADC_BPO_Pin|PROPANE_OUT_Pin
 8002a76:	f240 7305 	movw	r3, #1797	; 0x705
 8002a7a:	617b      	str	r3, [r7, #20]
                          |PETROL_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a84:	2303      	movs	r3, #3
 8002a86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4847      	ldr	r0, [pc, #284]	; (8002bac <MX_GPIO_Init+0x27c>)
 8002a90:	f001 feba 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_STATUS_Pin */
  GPIO_InitStruct.Pin = ADC_STATUS_Pin;
 8002a94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a9a:	4b49      	ldr	r3, [pc, #292]	; (8002bc0 <MX_GPIO_Init+0x290>)
 8002a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADC_STATUS_GPIO_Port, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4840      	ldr	r0, [pc, #256]	; (8002bac <MX_GPIO_Init+0x27c>)
 8002aaa:	f001 fead 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8002aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abc:	2303      	movs	r3, #3
 8002abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4839      	ldr	r0, [pc, #228]	; (8002bac <MX_GPIO_Init+0x27c>)
 8002ac8:	f001 fe9e 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 8002acc:	2340      	movs	r3, #64	; 0x40
 8002ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4831      	ldr	r0, [pc, #196]	; (8002ba8 <MX_GPIO_Init+0x278>)
 8002ae4:	f001 fe90 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART1_COMM_Pin MCU_IGN_Pin */
  GPIO_InitStruct.Pin = USART1_COMM_Pin|MCU_IGN_Pin;
 8002ae8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002af2:	2301      	movs	r3, #1
 8002af4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af6:	f107 0314 	add.w	r3, r7, #20
 8002afa:	4619      	mov	r1, r3
 8002afc:	482c      	ldr	r0, [pc, #176]	; (8002bb0 <MX_GPIO_Init+0x280>)
 8002afe:	f001 fe83 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_START_Pin */
  GPIO_InitStruct.Pin = RELAY_START_Pin;
 8002b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY_START_GPIO_Port, &GPIO_InitStruct);
 8002b14:	f107 0314 	add.w	r3, r7, #20
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4825      	ldr	r0, [pc, #148]	; (8002bb0 <MX_GPIO_Init+0x280>)
 8002b1c:	f001 fe74 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_PARK_Pin SENS_GEAR_Pin */
  GPIO_InitStruct.Pin = SENS_PARK_Pin|SENS_GEAR_Pin;
 8002b20:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b2e:	f107 0314 	add.w	r3, r7, #20
 8002b32:	4619      	mov	r1, r3
 8002b34:	481c      	ldr	r0, [pc, #112]	; (8002ba8 <MX_GPIO_Init+0x278>)
 8002b36:	f001 fe67 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECON_Pin */
  GPIO_InitStruct.Pin = ECON_Pin;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ECON_GPIO_Port, &GPIO_InitStruct);
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4818      	ldr	r0, [pc, #96]	; (8002bb4 <MX_GPIO_Init+0x284>)
 8002b52:	f001 fe59 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROPANE_IN_Pin PETROL_IN_Pin */
  GPIO_InitStruct.Pin = PROPANE_IN_Pin|PETROL_IN_Pin;
 8002b56:	2330      	movs	r3, #48	; 0x30
 8002b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	4810      	ldr	r0, [pc, #64]	; (8002bac <MX_GPIO_Init+0x27c>)
 8002b6a:	f001 fe4d 	bl	8004808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = IGN_23_Pin|IGN_14_Pin;
 8002b6e:	23c0      	movs	r3, #192	; 0xc0
 8002b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b72:	2301      	movs	r3, #1
 8002b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4619      	mov	r1, r3
 8002b84:	4809      	ldr	r0, [pc, #36]	; (8002bac <MX_GPIO_Init+0x27c>)
 8002b86:	f001 fe3f 	bl	8004808 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	2028      	movs	r0, #40	; 0x28
 8002b90:	f001 f981 	bl	8003e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b94:	2028      	movs	r0, #40	; 0x28
 8002b96:	f001 f99a 	bl	8003ece <HAL_NVIC_EnableIRQ>

}
 8002b9a:	bf00      	nop
 8002b9c:	3728      	adds	r7, #40	; 0x28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40020800 	.word	0x40020800
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	40020000 	.word	0x40020000
 8002bb4:	40020c00 	.word	0x40020c00
 8002bb8:	10310000 	.word	0x10310000
 8002bbc:	10110000 	.word	0x10110000
 8002bc0:	10210000 	.word	0x10210000

08002bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bca:	e7fe      	b.n	8002bca <Error_Handler+0x6>

08002bcc <map_init>:
#define REF_VOLTAGE 3.32f
#define RES_DIVIDER 1.467f


void map_init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ADC_FORMAT_GPIO_Port, ADC_FORMAT_Pin, GPIO_PIN_RESET);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2104      	movs	r1, #4
 8002bd4:	480c      	ldr	r0, [pc, #48]	; (8002c08 <map_init+0x3c>)
 8002bd6:	f001 ffb1 	bl	8004b3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_BPO_GPIO_Port, ADC_BPO_Pin, GPIO_PIN_RESET);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002be0:	4809      	ldr	r0, [pc, #36]	; (8002c08 <map_init+0x3c>)
 8002be2:	f001 ffab 	bl	8004b3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nCE_GPIO_Port, ADC_nCE_Pin, GPIO_PIN_RESET);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2110      	movs	r1, #16
 8002bea:	4808      	ldr	r0, [pc, #32]	; (8002c0c <map_init+0x40>)
 8002bec:	f001 ffa6 	bl	8004b3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	4804      	ldr	r0, [pc, #16]	; (8002c08 <map_init+0x3c>)
 8002bf6:	f001 ffa1 	bl	8004b3c <HAL_GPIO_WritePin>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8002bfa:	2108      	movs	r1, #8
 8002bfc:	4804      	ldr	r0, [pc, #16]	; (8002c10 <map_init+0x44>)
 8002bfe:	f004 f969 	bl	8006ed4 <HAL_TIMEx_PWMN_Start>
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40020400 	.word	0x40020400
 8002c0c:	40020800 	.word	0x40020800
 8002c10:	20016c84 	.word	0x20016c84

08002c14 <map_adc_read>:

inline void map_adc_read(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
  uint8_t portdata = GPIOA->IDR & 0xFF;
 8002c1a:	4b26      	ldr	r3, [pc, #152]	; (8002cb4 <map_adc_read+0xa0>)
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	72fb      	strb	r3, [r7, #11]
  float voltage = portdata / 50.0f;
 8002c20:	7afb      	ldrb	r3, [r7, #11]
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c2a:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002cb8 <map_adc_read+0xa4>
 8002c2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c32:	edc7 7a01 	vstr	s15, [r7, #4]
  if(voltage < 0.3f) map_error = 1;
 8002c36:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c3a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002cbc <map_adc_read+0xa8>
 8002c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c46:	d503      	bpl.n	8002c50 <map_adc_read+0x3c>
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <map_adc_read+0xac>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e002      	b.n	8002c56 <map_adc_read+0x42>
  else map_error = 0;
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <map_adc_read+0xac>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
  float pressure = (voltage - 0.5f) * 25517.0f;
 8002c56:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c5a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c62:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002cc4 <map_adc_read+0xb0>
 8002c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c6a:	edc7 7a03 	vstr	s15, [r7, #12]
  if(pressure < 0.0f)
 8002c6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7a:	d502      	bpl.n	8002c82 <map_adc_read+0x6e>
    pressure = 0.0f;
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
  map_data = map_data * (1.0f - lowpass_koff) + pressure * lowpass_koff;
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <map_adc_read+0xb4>)
 8002c84:	edd3 7a00 	vldr	s15, [r3]
 8002c88:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002ccc <map_adc_read+0xb8>
 8002c8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c90:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c94:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002cd0 <map_adc_read+0xbc>
 8002c98:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <map_adc_read+0xb4>)
 8002ca2:	edc3 7a00 	vstr	s15, [r3]
}
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40020000 	.word	0x40020000
 8002cb8:	42480000 	.word	0x42480000
 8002cbc:	3e99999a 	.word	0x3e99999a
 8002cc0:	20010e0d 	.word	0x20010e0d
 8002cc4:	46c75a00 	.word	0x46c75a00
 8002cc8:	20010010 	.word	0x20010010
 8002ccc:	3f733333 	.word	0x3f733333
 8002cd0:	3d4ccccd 	.word	0x3d4ccccd

08002cd4 <map_getpressure>:

inline float map_getpressure(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return map_data;
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <map_getpressure+0x18>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	ee07 3a90 	vmov	s15, r3
}
 8002ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	20010010 	.word	0x20010010

08002cf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <HAL_MspInit+0x44>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a0e      	ldr	r2, [pc, #56]	; (8002d34 <HAL_MspInit+0x44>)
 8002cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
 8002d02:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <HAL_MspInit+0x44>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_MspInit+0x44>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	4a08      	ldr	r2, [pc, #32]	; (8002d34 <HAL_MspInit+0x44>)
 8002d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d18:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_MspInit+0x44>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800

08002d38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a33      	ldr	r2, [pc, #204]	; (8002e24 <HAL_ADC_MspInit+0xec>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d15f      	bne.n	8002e1a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d5a:	4b33      	ldr	r3, [pc, #204]	; (8002e28 <HAL_ADC_MspInit+0xf0>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	4a32      	ldr	r2, [pc, #200]	; (8002e28 <HAL_ADC_MspInit+0xf0>)
 8002d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d64:	6453      	str	r3, [r2, #68]	; 0x44
 8002d66:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <HAL_ADC_MspInit+0xf0>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d72:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <HAL_ADC_MspInit+0xf0>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a2c      	ldr	r2, [pc, #176]	; (8002e28 <HAL_ADC_MspInit+0xf0>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b2a      	ldr	r3, [pc, #168]	; (8002e28 <HAL_ADC_MspInit+0xf0>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8a:	4b27      	ldr	r3, [pc, #156]	; (8002e28 <HAL_ADC_MspInit+0xf0>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <HAL_ADC_MspInit+0xf0>)
 8002d90:	f043 0304 	orr.w	r3, r3, #4
 8002d94:	6313      	str	r3, [r2, #48]	; 0x30
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_ADC_MspInit+0xf0>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_12_TEMP_Pin|ADC1_13_BAT_Pin;
 8002da2:	230c      	movs	r3, #12
 8002da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002da6:	2303      	movs	r3, #3
 8002da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dae:	f107 0314 	add.w	r3, r7, #20
 8002db2:	4619      	mov	r1, r3
 8002db4:	481d      	ldr	r0, [pc, #116]	; (8002e2c <HAL_ADC_MspInit+0xf4>)
 8002db6:	f001 fd27 	bl	8004808 <HAL_GPIO_Init>
    //GPIO_InitStruct.Pull = GPIO_NOPULL;
    //HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002dba:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002dbc:	4a1d      	ldr	r2, [pc, #116]	; (8002e34 <HAL_ADC_MspInit+0xfc>)
 8002dbe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dcc:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002dd2:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dd8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002de0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002de2:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002de4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002de8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002dea:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002dec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002df0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002dfe:	480c      	ldr	r0, [pc, #48]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002e00:	f001 f96a 	bl	80040d8 <HAL_DMA_Init>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8002e0a:	f7ff fedb 	bl	8002bc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a07      	ldr	r2, [pc, #28]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002e12:	639a      	str	r2, [r3, #56]	; 0x38
 8002e14:	4a06      	ldr	r2, [pc, #24]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e1a:	bf00      	nop
 8002e1c:	3728      	adds	r7, #40	; 0x28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40012000 	.word	0x40012000
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40020800 	.word	0x40020800
 8002e30:	20016fc0 	.word	0x20016fc0
 8002e34:	40026410 	.word	0x40026410

08002e38 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <HAL_CRC_MspInit+0x38>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d10b      	bne.n	8002e62 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <HAL_CRC_MspInit+0x3c>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4a09      	ldr	r2, [pc, #36]	; (8002e74 <HAL_CRC_MspInit+0x3c>)
 8002e50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e54:	6313      	str	r3, [r2, #48]	; 0x30
 8002e56:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <HAL_CRC_MspInit+0x3c>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40023000 	.word	0x40023000
 8002e74:	40023800 	.word	0x40023800

08002e78 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <HAL_RNG_MspInit+0x38>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10b      	bne.n	8002ea2 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <HAL_RNG_MspInit+0x3c>)
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8e:	4a09      	ldr	r2, [pc, #36]	; (8002eb4 <HAL_RNG_MspInit+0x3c>)
 8002e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e94:	6353      	str	r3, [r2, #52]	; 0x34
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <HAL_RNG_MspInit+0x3c>)
 8002e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	50060800 	.word	0x50060800
 8002eb4:	40023800 	.word	0x40023800

08002eb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08a      	sub	sp, #40	; 0x28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a49      	ldr	r2, [pc, #292]	; (8002ffc <HAL_SPI_MspInit+0x144>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	f040 808b 	bne.w	8002ff2 <HAL_SPI_MspInit+0x13a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002edc:	4b48      	ldr	r3, [pc, #288]	; (8003000 <HAL_SPI_MspInit+0x148>)
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	4a47      	ldr	r2, [pc, #284]	; (8003000 <HAL_SPI_MspInit+0x148>)
 8002ee2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee8:	4b45      	ldr	r3, [pc, #276]	; (8003000 <HAL_SPI_MspInit+0x148>)
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef4:	4b42      	ldr	r3, [pc, #264]	; (8003000 <HAL_SPI_MspInit+0x148>)
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	4a41      	ldr	r2, [pc, #260]	; (8003000 <HAL_SPI_MspInit+0x148>)
 8002efa:	f043 0302 	orr.w	r3, r3, #2
 8002efe:	6313      	str	r3, [r2, #48]	; 0x30
 8002f00:	4b3f      	ldr	r3, [pc, #252]	; (8003000 <HAL_SPI_MspInit+0x148>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f0c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f16:	2301      	movs	r3, #1
 8002f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f1e:	2305      	movs	r3, #5
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f22:	f107 0314 	add.w	r3, r7, #20
 8002f26:	4619      	mov	r1, r3
 8002f28:	4836      	ldr	r0, [pc, #216]	; (8003004 <HAL_SPI_MspInit+0x14c>)
 8002f2a:	f001 fc6d 	bl	8004808 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002f2e:	4b36      	ldr	r3, [pc, #216]	; (8003008 <HAL_SPI_MspInit+0x150>)
 8002f30:	4a36      	ldr	r2, [pc, #216]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002f32:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002f34:	4b34      	ldr	r3, [pc, #208]	; (8003008 <HAL_SPI_MspInit+0x150>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f3a:	4b33      	ldr	r3, [pc, #204]	; (8003008 <HAL_SPI_MspInit+0x150>)
 8002f3c:	2240      	movs	r2, #64	; 0x40
 8002f3e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f40:	4b31      	ldr	r3, [pc, #196]	; (8003008 <HAL_SPI_MspInit+0x150>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f46:	4b30      	ldr	r3, [pc, #192]	; (8003008 <HAL_SPI_MspInit+0x150>)
 8002f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f4c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f4e:	4b2e      	ldr	r3, [pc, #184]	; (8003008 <HAL_SPI_MspInit+0x150>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f54:	4b2c      	ldr	r3, [pc, #176]	; (8003008 <HAL_SPI_MspInit+0x150>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002f5a:	4b2b      	ldr	r3, [pc, #172]	; (8003008 <HAL_SPI_MspInit+0x150>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f60:	4b29      	ldr	r3, [pc, #164]	; (8003008 <HAL_SPI_MspInit+0x150>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f66:	4b28      	ldr	r3, [pc, #160]	; (8003008 <HAL_SPI_MspInit+0x150>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002f6c:	4826      	ldr	r0, [pc, #152]	; (8003008 <HAL_SPI_MspInit+0x150>)
 8002f6e:	f001 f8b3 	bl	80040d8 <HAL_DMA_Init>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8002f78:	f7ff fe24 	bl	8002bc4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a22      	ldr	r2, [pc, #136]	; (8003008 <HAL_SPI_MspInit+0x150>)
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54
 8002f82:	4a21      	ldr	r2, [pc, #132]	; (8003008 <HAL_SPI_MspInit+0x150>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002f88:	4b21      	ldr	r3, [pc, #132]	; (8003010 <HAL_SPI_MspInit+0x158>)
 8002f8a:	4a22      	ldr	r2, [pc, #136]	; (8003014 <HAL_SPI_MspInit+0x15c>)
 8002f8c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002f8e:	4b20      	ldr	r3, [pc, #128]	; (8003010 <HAL_SPI_MspInit+0x158>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f94:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <HAL_SPI_MspInit+0x158>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <HAL_SPI_MspInit+0x158>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <HAL_SPI_MspInit+0x158>)
 8002fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fa6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fa8:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_SPI_MspInit+0x158>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fae:	4b18      	ldr	r3, [pc, #96]	; (8003010 <HAL_SPI_MspInit+0x158>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002fb4:	4b16      	ldr	r3, [pc, #88]	; (8003010 <HAL_SPI_MspInit+0x158>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_SPI_MspInit+0x158>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fc0:	4b13      	ldr	r3, [pc, #76]	; (8003010 <HAL_SPI_MspInit+0x158>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002fc6:	4812      	ldr	r0, [pc, #72]	; (8003010 <HAL_SPI_MspInit+0x158>)
 8002fc8:	f001 f886 	bl	80040d8 <HAL_DMA_Init>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_SPI_MspInit+0x11e>
    {
      Error_Handler();
 8002fd2:	f7ff fdf7 	bl	8002bc4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a0d      	ldr	r2, [pc, #52]	; (8003010 <HAL_SPI_MspInit+0x158>)
 8002fda:	659a      	str	r2, [r3, #88]	; 0x58
 8002fdc:	4a0c      	ldr	r2, [pc, #48]	; (8003010 <HAL_SPI_MspInit+0x158>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 14, 0);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	210e      	movs	r1, #14
 8002fe6:	2024      	movs	r0, #36	; 0x24
 8002fe8:	f000 ff55 	bl	8003e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002fec:	2024      	movs	r0, #36	; 0x24
 8002fee:	f000 ff6e 	bl	8003ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ff2:	bf00      	nop
 8002ff4:	3728      	adds	r7, #40	; 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40003800 	.word	0x40003800
 8003000:	40023800 	.word	0x40023800
 8003004:	40020400 	.word	0x40020400
 8003008:	20017030 	.word	0x20017030
 800300c:	40026070 	.word	0x40026070
 8003010:	20016d98 	.word	0x20016d98
 8003014:	40026058 	.word	0x40026058

08003018 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a13      	ldr	r2, [pc, #76]	; (8003074 <HAL_TIM_PWM_MspInit+0x5c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d10c      	bne.n	8003044 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800302a:	4b13      	ldr	r3, [pc, #76]	; (8003078 <HAL_TIM_PWM_MspInit+0x60>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	4a12      	ldr	r2, [pc, #72]	; (8003078 <HAL_TIM_PWM_MspInit+0x60>)
 8003030:	f043 0302 	orr.w	r3, r3, #2
 8003034:	6413      	str	r3, [r2, #64]	; 0x40
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_TIM_PWM_MspInit+0x60>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003042:	e010      	b.n	8003066 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0c      	ldr	r2, [pc, #48]	; (800307c <HAL_TIM_PWM_MspInit+0x64>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d10b      	bne.n	8003066 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800304e:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <HAL_TIM_PWM_MspInit+0x60>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	4a09      	ldr	r2, [pc, #36]	; (8003078 <HAL_TIM_PWM_MspInit+0x60>)
 8003054:	f043 0302 	orr.w	r3, r3, #2
 8003058:	6453      	str	r3, [r2, #68]	; 0x44
 800305a:	4b07      	ldr	r3, [pc, #28]	; (8003078 <HAL_TIM_PWM_MspInit+0x60>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40000400 	.word	0x40000400
 8003078:	40023800 	.word	0x40023800
 800307c:	40010400 	.word	0x40010400

08003080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a31      	ldr	r2, [pc, #196]	; (8003154 <HAL_TIM_Base_MspInit+0xd4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d114      	bne.n	80030bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003092:	4b31      	ldr	r3, [pc, #196]	; (8003158 <HAL_TIM_Base_MspInit+0xd8>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	4a30      	ldr	r2, [pc, #192]	; (8003158 <HAL_TIM_Base_MspInit+0xd8>)
 8003098:	f043 0304 	orr.w	r3, r3, #4
 800309c:	6413      	str	r3, [r2, #64]	; 0x40
 800309e:	4b2e      	ldr	r3, [pc, #184]	; (8003158 <HAL_TIM_Base_MspInit+0xd8>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 80030aa:	2200      	movs	r2, #0
 80030ac:	2103      	movs	r1, #3
 80030ae:	201e      	movs	r0, #30
 80030b0:	f000 fef1 	bl	8003e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030b4:	201e      	movs	r0, #30
 80030b6:	f000 ff0a 	bl	8003ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80030ba:	e047      	b.n	800314c <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM7)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a26      	ldr	r2, [pc, #152]	; (800315c <HAL_TIM_Base_MspInit+0xdc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d142      	bne.n	800314c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80030c6:	4b24      	ldr	r3, [pc, #144]	; (8003158 <HAL_TIM_Base_MspInit+0xd8>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	4a23      	ldr	r2, [pc, #140]	; (8003158 <HAL_TIM_Base_MspInit+0xd8>)
 80030cc:	f043 0320 	orr.w	r3, r3, #32
 80030d0:	6413      	str	r3, [r2, #64]	; 0x40
 80030d2:	4b21      	ldr	r3, [pc, #132]	; (8003158 <HAL_TIM_Base_MspInit+0xd8>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
    hdma_tim7_up.Instance = DMA1_Stream2;
 80030de:	4b20      	ldr	r3, [pc, #128]	; (8003160 <HAL_TIM_Base_MspInit+0xe0>)
 80030e0:	4a20      	ldr	r2, [pc, #128]	; (8003164 <HAL_TIM_Base_MspInit+0xe4>)
 80030e2:	601a      	str	r2, [r3, #0]
    hdma_tim7_up.Init.Channel = DMA_CHANNEL_1;
 80030e4:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <HAL_TIM_Base_MspInit+0xe0>)
 80030e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ea:	605a      	str	r2, [r3, #4]
    hdma_tim7_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ec:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <HAL_TIM_Base_MspInit+0xe0>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
    hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f2:	4b1b      	ldr	r3, [pc, #108]	; (8003160 <HAL_TIM_Base_MspInit+0xe0>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	60da      	str	r2, [r3, #12]
    hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 80030f8:	4b19      	ldr	r3, [pc, #100]	; (8003160 <HAL_TIM_Base_MspInit+0xe0>)
 80030fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030fe:	611a      	str	r2, [r3, #16]
    hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003100:	4b17      	ldr	r3, [pc, #92]	; (8003160 <HAL_TIM_Base_MspInit+0xe0>)
 8003102:	2200      	movs	r2, #0
 8003104:	615a      	str	r2, [r3, #20]
    hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003106:	4b16      	ldr	r3, [pc, #88]	; (8003160 <HAL_TIM_Base_MspInit+0xe0>)
 8003108:	2200      	movs	r2, #0
 800310a:	619a      	str	r2, [r3, #24]
    hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 800310c:	4b14      	ldr	r3, [pc, #80]	; (8003160 <HAL_TIM_Base_MspInit+0xe0>)
 800310e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003112:	61da      	str	r2, [r3, #28]
    hdma_tim7_up.Init.Priority = DMA_PRIORITY_LOW;
 8003114:	4b12      	ldr	r3, [pc, #72]	; (8003160 <HAL_TIM_Base_MspInit+0xe0>)
 8003116:	2200      	movs	r2, #0
 8003118:	621a      	str	r2, [r3, #32]
    hdma_tim7_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800311a:	4b11      	ldr	r3, [pc, #68]	; (8003160 <HAL_TIM_Base_MspInit+0xe0>)
 800311c:	2200      	movs	r2, #0
 800311e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 8003120:	480f      	ldr	r0, [pc, #60]	; (8003160 <HAL_TIM_Base_MspInit+0xe0>)
 8003122:	f000 ffd9 	bl	80040d8 <HAL_DMA_Init>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_TIM_Base_MspInit+0xb0>
      Error_Handler();
 800312c:	f7ff fd4a 	bl	8002bc4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a0b      	ldr	r2, [pc, #44]	; (8003160 <HAL_TIM_Base_MspInit+0xe0>)
 8003134:	621a      	str	r2, [r3, #32]
 8003136:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <HAL_TIM_Base_MspInit+0xe0>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800313c:	2200      	movs	r2, #0
 800313e:	2105      	movs	r1, #5
 8003140:	2037      	movs	r0, #55	; 0x37
 8003142:	f000 fea8 	bl	8003e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003146:	2037      	movs	r0, #55	; 0x37
 8003148:	f000 fec1 	bl	8003ece <HAL_NVIC_EnableIRQ>
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40000800 	.word	0x40000800
 8003158:	40023800 	.word	0x40023800
 800315c:	40001400 	.word	0x40001400
 8003160:	20016d04 	.word	0x20016d04
 8003164:	40026040 	.word	0x40026040

08003168 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08a      	sub	sp, #40	; 0x28
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	60da      	str	r2, [r3, #12]
 800317e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a22      	ldr	r2, [pc, #136]	; (8003210 <HAL_TIM_MspPostInit+0xa8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d11d      	bne.n	80031c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800318a:	4b22      	ldr	r3, [pc, #136]	; (8003214 <HAL_TIM_MspPostInit+0xac>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	4a21      	ldr	r2, [pc, #132]	; (8003214 <HAL_TIM_MspPostInit+0xac>)
 8003190:	f043 0304 	orr.w	r3, r3, #4
 8003194:	6313      	str	r3, [r2, #48]	; 0x30
 8003196:	4b1f      	ldr	r3, [pc, #124]	; (8003214 <HAL_TIM_MspPostInit+0xac>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH3_CHOKE_Pin|TIM3_CH4_ACC_Pin;
 80031a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031ac:	2302      	movs	r3, #2
 80031ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b0:	2303      	movs	r3, #3
 80031b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031b4:	2302      	movs	r3, #2
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	4619      	mov	r1, r3
 80031be:	4816      	ldr	r0, [pc, #88]	; (8003218 <HAL_TIM_MspPostInit+0xb0>)
 80031c0:	f001 fb22 	bl	8004808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80031c4:	e020      	b.n	8003208 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a14      	ldr	r2, [pc, #80]	; (800321c <HAL_TIM_MspPostInit+0xb4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d11b      	bne.n	8003208 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d0:	4b10      	ldr	r3, [pc, #64]	; (8003214 <HAL_TIM_MspPostInit+0xac>)
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	4a0f      	ldr	r2, [pc, #60]	; (8003214 <HAL_TIM_MspPostInit+0xac>)
 80031d6:	f043 0302 	orr.w	r3, r3, #2
 80031da:	6313      	str	r3, [r2, #48]	; 0x30
 80031dc:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <HAL_TIM_MspPostInit+0xac>)
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH3N_ADC_RW_Pin;
 80031e8:	2302      	movs	r3, #2
 80031ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ec:	2302      	movs	r3, #2
 80031ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031f0:	2301      	movs	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f4:	2303      	movs	r3, #3
 80031f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80031f8:	2303      	movs	r3, #3
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM8_CH3N_ADC_RW_GPIO_Port, &GPIO_InitStruct);
 80031fc:	f107 0314 	add.w	r3, r7, #20
 8003200:	4619      	mov	r1, r3
 8003202:	4807      	ldr	r0, [pc, #28]	; (8003220 <HAL_TIM_MspPostInit+0xb8>)
 8003204:	f001 fb00 	bl	8004808 <HAL_GPIO_Init>
}
 8003208:	bf00      	nop
 800320a:	3728      	adds	r7, #40	; 0x28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40000400 	.word	0x40000400
 8003214:	40023800 	.word	0x40023800
 8003218:	40020800 	.word	0x40020800
 800321c:	40010400 	.word	0x40010400
 8003220:	40020400 	.word	0x40020400

08003224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a4a      	ldr	r2, [pc, #296]	; (800336c <HAL_UART_MspInit+0x148>)
 8003242:	4293      	cmp	r3, r2
 8003244:	f040 808d 	bne.w	8003362 <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003248:	4b49      	ldr	r3, [pc, #292]	; (8003370 <HAL_UART_MspInit+0x14c>)
 800324a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324c:	4a48      	ldr	r2, [pc, #288]	; (8003370 <HAL_UART_MspInit+0x14c>)
 800324e:	f043 0310 	orr.w	r3, r3, #16
 8003252:	6453      	str	r3, [r2, #68]	; 0x44
 8003254:	4b46      	ldr	r3, [pc, #280]	; (8003370 <HAL_UART_MspInit+0x14c>)
 8003256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003260:	4b43      	ldr	r3, [pc, #268]	; (8003370 <HAL_UART_MspInit+0x14c>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	4a42      	ldr	r2, [pc, #264]	; (8003370 <HAL_UART_MspInit+0x14c>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6313      	str	r3, [r2, #48]	; 0x30
 800326c:	4b40      	ldr	r3, [pc, #256]	; (8003370 <HAL_UART_MspInit+0x14c>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003278:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800327c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327e:	2302      	movs	r3, #2
 8003280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003282:	2301      	movs	r3, #1
 8003284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003286:	2303      	movs	r3, #3
 8003288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800328a:	2307      	movs	r3, #7
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328e:	f107 0314 	add.w	r3, r7, #20
 8003292:	4619      	mov	r1, r3
 8003294:	4837      	ldr	r0, [pc, #220]	; (8003374 <HAL_UART_MspInit+0x150>)
 8003296:	f001 fab7 	bl	8004808 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800329a:	4b37      	ldr	r3, [pc, #220]	; (8003378 <HAL_UART_MspInit+0x154>)
 800329c:	4a37      	ldr	r2, [pc, #220]	; (800337c <HAL_UART_MspInit+0x158>)
 800329e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80032a0:	4b35      	ldr	r3, [pc, #212]	; (8003378 <HAL_UART_MspInit+0x154>)
 80032a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032a6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032a8:	4b33      	ldr	r3, [pc, #204]	; (8003378 <HAL_UART_MspInit+0x154>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ae:	4b32      	ldr	r3, [pc, #200]	; (8003378 <HAL_UART_MspInit+0x154>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032b4:	4b30      	ldr	r3, [pc, #192]	; (8003378 <HAL_UART_MspInit+0x154>)
 80032b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032ba:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032bc:	4b2e      	ldr	r3, [pc, #184]	; (8003378 <HAL_UART_MspInit+0x154>)
 80032be:	2200      	movs	r2, #0
 80032c0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032c2:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <HAL_UART_MspInit+0x154>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80032c8:	4b2b      	ldr	r3, [pc, #172]	; (8003378 <HAL_UART_MspInit+0x154>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032ce:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <HAL_UART_MspInit+0x154>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032d4:	4b28      	ldr	r3, [pc, #160]	; (8003378 <HAL_UART_MspInit+0x154>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80032da:	4827      	ldr	r0, [pc, #156]	; (8003378 <HAL_UART_MspInit+0x154>)
 80032dc:	f000 fefc 	bl	80040d8 <HAL_DMA_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80032e6:	f7ff fc6d 	bl	8002bc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a22      	ldr	r2, [pc, #136]	; (8003378 <HAL_UART_MspInit+0x154>)
 80032ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80032f0:	4a21      	ldr	r2, [pc, #132]	; (8003378 <HAL_UART_MspInit+0x154>)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80032f6:	4b22      	ldr	r3, [pc, #136]	; (8003380 <HAL_UART_MspInit+0x15c>)
 80032f8:	4a22      	ldr	r2, [pc, #136]	; (8003384 <HAL_UART_MspInit+0x160>)
 80032fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80032fc:	4b20      	ldr	r3, [pc, #128]	; (8003380 <HAL_UART_MspInit+0x15c>)
 80032fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003302:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003304:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <HAL_UART_MspInit+0x15c>)
 8003306:	2240      	movs	r2, #64	; 0x40
 8003308:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800330a:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <HAL_UART_MspInit+0x15c>)
 800330c:	2200      	movs	r2, #0
 800330e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_UART_MspInit+0x15c>)
 8003312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003316:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003318:	4b19      	ldr	r3, [pc, #100]	; (8003380 <HAL_UART_MspInit+0x15c>)
 800331a:	2200      	movs	r2, #0
 800331c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800331e:	4b18      	ldr	r3, [pc, #96]	; (8003380 <HAL_UART_MspInit+0x15c>)
 8003320:	2200      	movs	r2, #0
 8003322:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003324:	4b16      	ldr	r3, [pc, #88]	; (8003380 <HAL_UART_MspInit+0x15c>)
 8003326:	2200      	movs	r2, #0
 8003328:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_UART_MspInit+0x15c>)
 800332c:	2200      	movs	r2, #0
 800332e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003330:	4b13      	ldr	r3, [pc, #76]	; (8003380 <HAL_UART_MspInit+0x15c>)
 8003332:	2200      	movs	r2, #0
 8003334:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003336:	4812      	ldr	r0, [pc, #72]	; (8003380 <HAL_UART_MspInit+0x15c>)
 8003338:	f000 fece 	bl	80040d8 <HAL_DMA_Init>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 8003342:	f7ff fc3f 	bl	8002bc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <HAL_UART_MspInit+0x15c>)
 800334a:	669a      	str	r2, [r3, #104]	; 0x68
 800334c:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <HAL_UART_MspInit+0x15c>)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8003352:	2200      	movs	r2, #0
 8003354:	2107      	movs	r1, #7
 8003356:	2025      	movs	r0, #37	; 0x25
 8003358:	f000 fd9d 	bl	8003e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800335c:	2025      	movs	r0, #37	; 0x25
 800335e:	f000 fdb6 	bl	8003ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003362:	bf00      	nop
 8003364:	3728      	adds	r7, #40	; 0x28
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40011000 	.word	0x40011000
 8003370:	40023800 	.word	0x40023800
 8003374:	40020000 	.word	0x40020000
 8003378:	20016ee0 	.word	0x20016ee0
 800337c:	40026440 	.word	0x40026440
 8003380:	20016e38 	.word	0x20016e38
 8003384:	400264b8 	.word	0x400264b8

08003388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800338c:	e7fe      	b.n	800338c <NMI_Handler+0x4>

0800338e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800338e:	b480      	push	{r7}
 8003390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003392:	e7fe      	b.n	8003392 <HardFault_Handler+0x4>

08003394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003398:	e7fe      	b.n	8003398 <MemManage_Handler+0x4>

0800339a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800339e:	e7fe      	b.n	800339e <BusFault_Handler+0x4>

080033a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033a4:	e7fe      	b.n	80033a4 <UsageFault_Handler+0x4>

080033a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033aa:	bf00      	nop
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033d4:	f000 f9dc 	bl	8003790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}

080033dc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim7_up);
 80033e0:	4802      	ldr	r0, [pc, #8]	; (80033ec <DMA1_Stream2_IRQHandler+0x10>)
 80033e2:	f000 ffa9 	bl	8004338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20016d04 	.word	0x20016d04

080033f0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80033f4:	4802      	ldr	r0, [pc, #8]	; (8003400 <DMA1_Stream3_IRQHandler+0x10>)
 80033f6:	f000 ff9f 	bl	8004338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20016d98 	.word	0x20016d98

08003404 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <DMA1_Stream4_IRQHandler+0x10>)
 800340a:	f000 ff95 	bl	8004338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20017030 	.word	0x20017030

08003418 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800341c:	4802      	ldr	r0, [pc, #8]	; (8003428 <SPI2_IRQHandler+0x10>)
 800341e:	f002 fc99 	bl	8005d54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20016c20 	.word	0x20016c20

0800342c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003430:	4802      	ldr	r0, [pc, #8]	; (800343c <USART1_IRQHandler+0x10>)
 8003432:	f003 ffa1 	bl	8007378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20016f40 	.word	0x20016f40

08003440 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003444:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003448:	f001 fb92 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800344c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003450:	f001 fb8e 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003454:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003458:	f001 fb8a 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800345c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003460:	f001 fb86 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003464:	bf00      	nop
 8003466:	bd80      	pop	{r7, pc}

08003468 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800346c:	4802      	ldr	r0, [pc, #8]	; (8003478 <TIM4_IRQHandler+0x10>)
 800346e:	f002 fe80 	bl	8006172 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20016cc4 	.word	0x20016cc4

0800347c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003480:	4802      	ldr	r0, [pc, #8]	; (800348c <TIM7_IRQHandler+0x10>)
 8003482:	f002 fe76 	bl	8006172 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20017090 	.word	0x20017090

08003490 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003494:	4802      	ldr	r0, [pc, #8]	; (80034a0 <DMA2_Stream0_IRQHandler+0x10>)
 8003496:	f000 ff4f 	bl	8004338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20016fc0 	.word	0x20016fc0

080034a4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80034a8:	4802      	ldr	r0, [pc, #8]	; (80034b4 <DMA2_Stream2_IRQHandler+0x10>)
 80034aa:	f000 ff45 	bl	8004338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20016ee0 	.word	0x20016ee0

080034b8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80034bc:	4802      	ldr	r0, [pc, #8]	; (80034c8 <DMA2_Stream7_IRQHandler+0x10>)
 80034be:	f000 ff3b 	bl	8004338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20016e38 	.word	0x20016e38

080034cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034d0:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <SystemInit+0x28>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d6:	4a07      	ldr	r2, [pc, #28]	; (80034f4 <SystemInit+0x28>)
 80034d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <SystemInit+0x28>)
 80034e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034e6:	609a      	str	r2, [r3, #8]
#endif
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800350a:	2320      	movs	r3, #32
 800350c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800350e:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8003512:	e00b      	b.n	800352c <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 8003514:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <SCB_CleanDCache_by_Addr+0x50>)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4413      	add	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2b00      	cmp	r3, #0
 8003530:	dcf0      	bgt.n	8003514 <SCB_CleanDCache_by_Addr+0x1c>
 8003532:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003536:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <CacheClean>:
    SCB_InvalidateDCache_by_Addr((uint32_t*)buffer, size);
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}

static inline void CacheClean(void * buffer, uint32_t size)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d105      	bne.n	8003570 <CacheClean+0x24>
    SCB_CleanDCache_by_Addr((uint32_t*)buffer, size);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4619      	mov	r1, r3
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ffc5 	bl	80034f8 <SCB_CleanDCache_by_Addr>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 800356e:	e009      	b.n	8003584 <CacheClean+0x38>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	4618      	mov	r0, r3
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4413      	add	r3, r2
 800357e:	4619      	mov	r1, r3
 8003580:	f7ff ffba 	bl	80034f8 <SCB_CleanDCache_by_Addr>
}
 8003584:	bf00      	nop
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <xFifosInit>:
  }
}


void xFifosInit(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	e02f      	b.n	80035f8 <xFifosInit+0x6c>
  {
    protInit(&xHandles[i].xTxFifo,xHandles[i].xTxFifoBuf,1,sizeof(MAX_PACK_LEN));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f640 22c4 	movw	r2, #2756	; 0xac4
 800359e:	fb02 f303 	mul.w	r3, r2, r3
 80035a2:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 80035a6:	4a18      	ldr	r2, [pc, #96]	; (8003608 <xFifosInit+0x7c>)
 80035a8:	1898      	adds	r0, r3, r2
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f640 22c4 	movw	r2, #2756	; 0xac4
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80035b8:	4a13      	ldr	r2, [pc, #76]	; (8003608 <xFifosInit+0x7c>)
 80035ba:	1899      	adds	r1, r3, r2
 80035bc:	2304      	movs	r3, #4
 80035be:	2201      	movs	r2, #1
 80035c0:	f000 f856 	bl	8003670 <protInit>
    protInit(&xHandles[i].xRxFifo,xHandles[i].xRxFifoBuf,1,sizeof(MAX_PACK_LEN));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f640 22c4 	movw	r2, #2756	; 0xac4
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	f603 2398 	addw	r3, r3, #2712	; 0xa98
 80035d2:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <xFifosInit+0x7c>)
 80035d4:	4413      	add	r3, r2
 80035d6:	1d18      	adds	r0, r3, #4
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f640 22c4 	movw	r2, #2756	; 0xac4
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80035e6:	4a08      	ldr	r2, [pc, #32]	; (8003608 <xFifosInit+0x7c>)
 80035e8:	1899      	adds	r1, r3, r2
 80035ea:	2304      	movs	r3, #4
 80035ec:	2201      	movs	r2, #1
 80035ee:	f000 f83f 	bl	8003670 <protInit>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3301      	adds	r3, #1
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0cc      	beq.n	8003598 <xFifosInit+0xc>
  }
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20010020 	.word	0x20010020

0800360c <xGetterInit>:

void xGetterInit(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
  sGetterHandle * handle;

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003612:	2300      	movs	r3, #0
 8003614:	607b      	str	r3, [r7, #4]
 8003616:	e022      	b.n	800365e <xGetterInit+0x52>
  {
    handle = &xHandles[i];
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f640 22c4 	movw	r2, #2756	; 0xac4
 800361e:	fb02 f303 	mul.w	r3, r2, r3
 8003622:	4a12      	ldr	r2, [pc, #72]	; (800366c <xGetterInit+0x60>)
 8003624:	4413      	add	r3, r2
 8003626:	603b      	str	r3, [r7, #0]
    CacheClean(handle->BufRx, UART_DMA_BUFFER);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff ff8c 	bl	800354c <CacheClean>
    HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 800363a:	6839      	ldr	r1, [r7, #0]
 800363c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003640:	4618      	mov	r0, r3
 8003642:	f003 fe15 	bl	8007270 <HAL_UART_Receive_DMA>
    handle->RxPointer = handle->xUart->RxXferSize;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 800364c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003650:	461a      	mov	r2, r3
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f8c3 2abc 	str.w	r2, [r3, #2748]	; 0xabc
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3301      	adds	r3, #1
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0d9      	beq.n	8003618 <xGetterInit+0xc>
  }
}
 8003664:	bf00      	nop
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20010020 	.word	0x20010020

08003670 <protInit>:
    uint32_t value;
        value = infoGetAvail(&fifo->info);
    return value;
}

void protInit(sProFIFO* fifo, void* xBuffer, uint8_t xElemSize, int xCapacity) {
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	4613      	mov	r3, r2
 800367e:	71fb      	strb	r3, [r7, #7]
    fifo->buffer = xBuffer;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	601a      	str	r2, [r3, #0]
    fifo->info.capacity = xCapacity;
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	605a      	str	r2, [r3, #4]
    fifo->info.read = 0;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
    fifo->info.write = 0;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	60da      	str	r2, [r3, #12]
    fifo->info.overflow = 0;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	745a      	strb	r2, [r3, #17]
    fifo->info.elemsize = xElemSize;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	79fa      	ldrb	r2, [r7, #7]
 80036a2:	741a      	strb	r2, [r3, #16]
}
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80036b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036b6:	e003      	b.n	80036c0 <LoopCopyDataInit>

080036b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80036ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036be:	3104      	adds	r1, #4

080036c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80036c0:	480b      	ldr	r0, [pc, #44]	; (80036f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80036c2:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80036c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80036c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036c8:	d3f6      	bcc.n	80036b8 <CopyDataInit>
  ldr  r2, =_sbss
 80036ca:	4a0b      	ldr	r2, [pc, #44]	; (80036f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80036cc:	e002      	b.n	80036d4 <LoopFillZerobss>

080036ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80036ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80036d0:	f842 3b04 	str.w	r3, [r2], #4

080036d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80036d4:	4b09      	ldr	r3, [pc, #36]	; (80036fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80036d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80036d8:	d3f9      	bcc.n	80036ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036da:	f7ff fef7 	bl	80034cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036de:	f004 fc7b 	bl	8007fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036e2:	f7fe fcdd 	bl	80020a0 <main>
  bx  lr    
 80036e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036e8:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80036ec:	08008078 	.word	0x08008078
  ldr  r0, =_sdata
 80036f0:	20010000 	.word	0x20010000
  ldr  r3, =_edata
 80036f4:	20010b08 	.word	0x20010b08
  ldr  r2, =_sbss
 80036f8:	20010b08 	.word	0x20010b08
  ldr  r3, = _ebss
 80036fc:	200170d4 	.word	0x200170d4

08003700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003700:	e7fe      	b.n	8003700 <ADC_IRQHandler>
	...

08003704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8003708:	4b08      	ldr	r3, [pc, #32]	; (800372c <HAL_Init+0x28>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a07      	ldr	r2, [pc, #28]	; (800372c <HAL_Init+0x28>)
 800370e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003712:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003714:	2003      	movs	r0, #3
 8003716:	f000 fbb3 	bl	8003e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800371a:	2000      	movs	r0, #0
 800371c:	f000 f808 	bl	8003730 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003720:	f7ff fae6 	bl	8002cf0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40023c00 	.word	0x40023c00

08003730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003738:	4b12      	ldr	r3, [pc, #72]	; (8003784 <HAL_InitTick+0x54>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4b12      	ldr	r3, [pc, #72]	; (8003788 <HAL_InitTick+0x58>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	4619      	mov	r1, r3
 8003742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003746:	fbb3 f3f1 	udiv	r3, r3, r1
 800374a:	fbb2 f3f3 	udiv	r3, r2, r3
 800374e:	4618      	mov	r0, r3
 8003750:	f000 fbcb 	bl	8003eea <HAL_SYSTICK_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e00e      	b.n	800377c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b0f      	cmp	r3, #15
 8003762:	d80a      	bhi.n	800377a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003764:	2200      	movs	r2, #0
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	f04f 30ff 	mov.w	r0, #4294967295
 800376c:	f000 fb93 	bl	8003e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003770:	4a06      	ldr	r2, [pc, #24]	; (800378c <HAL_InitTick+0x5c>)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	e000      	b.n	800377c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20010014 	.word	0x20010014
 8003788:	20010b04 	.word	0x20010b04
 800378c:	20010b00 	.word	0x20010b00

08003790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003794:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_IncTick+0x20>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_IncTick+0x24>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4413      	add	r3, r2
 80037a0:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <HAL_IncTick+0x24>)
 80037a2:	6013      	str	r3, [r2, #0]
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20010b04 	.word	0x20010b04
 80037b4:	200170d0 	.word	0x200170d0

080037b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return uwTick;
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <HAL_GetTick+0x14>)
 80037be:	681b      	ldr	r3, [r3, #0]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	200170d0 	.word	0x200170d0

080037d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e031      	b.n	800384a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff faa2 	bl	8002d38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b00      	cmp	r3, #0
 800380c:	d116      	bne.n	800383c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003812:	4b10      	ldr	r3, [pc, #64]	; (8003854 <HAL_ADC_Init+0x84>)
 8003814:	4013      	ands	r3, r2
 8003816:	f043 0202 	orr.w	r2, r3, #2
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f964 	bl	8003aec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f023 0303 	bic.w	r3, r3, #3
 8003832:	f043 0201 	orr.w	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
 800383a:	e001      	b.n	8003840 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	ffffeefd 	.word	0xffffeefd

08003858 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x1c>
 8003870:	2302      	movs	r3, #2
 8003872:	e12a      	b.n	8003aca <HAL_ADC_ConfigChannel+0x272>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b09      	cmp	r3, #9
 8003882:	d93a      	bls.n	80038fa <HAL_ADC_ConfigChannel+0xa2>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800388c:	d035      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68d9      	ldr	r1, [r3, #12]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	b29b      	uxth	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	4613      	mov	r3, r2
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4413      	add	r3, r2
 80038a2:	3b1e      	subs	r3, #30
 80038a4:	2207      	movs	r2, #7
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43da      	mvns	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	400a      	ands	r2, r1
 80038b2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a87      	ldr	r2, [pc, #540]	; (8003ad8 <HAL_ADC_ConfigChannel+0x280>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d10a      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68d9      	ldr	r1, [r3, #12]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	061a      	lsls	r2, r3, #24
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038d2:	e035      	b.n	8003940 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68d9      	ldr	r1, [r3, #12]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	4618      	mov	r0, r3
 80038e6:	4603      	mov	r3, r0
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	4403      	add	r3, r0
 80038ec:	3b1e      	subs	r3, #30
 80038ee:	409a      	lsls	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038f8:	e022      	b.n	8003940 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6919      	ldr	r1, [r3, #16]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	4613      	mov	r3, r2
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	4413      	add	r3, r2
 800390e:	2207      	movs	r2, #7
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43da      	mvns	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	400a      	ands	r2, r1
 800391c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6919      	ldr	r1, [r3, #16]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	b29b      	uxth	r3, r3
 800392e:	4618      	mov	r0, r3
 8003930:	4603      	mov	r3, r0
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4403      	add	r3, r0
 8003936:	409a      	lsls	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b06      	cmp	r3, #6
 8003946:	d824      	bhi.n	8003992 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	3b05      	subs	r3, #5
 800395a:	221f      	movs	r2, #31
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43da      	mvns	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	400a      	ands	r2, r1
 8003968:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	b29b      	uxth	r3, r3
 8003976:	4618      	mov	r0, r3
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	3b05      	subs	r3, #5
 8003984:	fa00 f203 	lsl.w	r2, r0, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	635a      	str	r2, [r3, #52]	; 0x34
 8003990:	e04c      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b0c      	cmp	r3, #12
 8003998:	d824      	bhi.n	80039e4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	3b23      	subs	r3, #35	; 0x23
 80039ac:	221f      	movs	r2, #31
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43da      	mvns	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	400a      	ands	r2, r1
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	4618      	mov	r0, r3
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	3b23      	subs	r3, #35	; 0x23
 80039d6:	fa00 f203 	lsl.w	r2, r0, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	631a      	str	r2, [r3, #48]	; 0x30
 80039e2:	e023      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	3b41      	subs	r3, #65	; 0x41
 80039f6:	221f      	movs	r2, #31
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43da      	mvns	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	400a      	ands	r2, r1
 8003a04:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	4618      	mov	r0, r3
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3b41      	subs	r3, #65	; 0x41
 8003a20:	fa00 f203 	lsl.w	r2, r0, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a2a      	ldr	r2, [pc, #168]	; (8003adc <HAL_ADC_ConfigChannel+0x284>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d10a      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x1f4>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a3e:	d105      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003a40:	4b27      	ldr	r3, [pc, #156]	; (8003ae0 <HAL_ADC_ConfigChannel+0x288>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a26      	ldr	r2, [pc, #152]	; (8003ae0 <HAL_ADC_ConfigChannel+0x288>)
 8003a46:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003a4a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a22      	ldr	r2, [pc, #136]	; (8003adc <HAL_ADC_ConfigChannel+0x284>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d109      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x212>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b12      	cmp	r3, #18
 8003a5c:	d105      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003a5e:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <HAL_ADC_ConfigChannel+0x288>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4a1f      	ldr	r2, [pc, #124]	; (8003ae0 <HAL_ADC_ConfigChannel+0x288>)
 8003a64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a68:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1b      	ldr	r2, [pc, #108]	; (8003adc <HAL_ADC_ConfigChannel+0x284>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d125      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x268>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <HAL_ADC_ConfigChannel+0x280>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d003      	beq.n	8003a86 <HAL_ADC_ConfigChannel+0x22e>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b11      	cmp	r3, #17
 8003a84:	d11c      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003a86:	4b16      	ldr	r3, [pc, #88]	; (8003ae0 <HAL_ADC_ConfigChannel+0x288>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4a15      	ldr	r2, [pc, #84]	; (8003ae0 <HAL_ADC_ConfigChannel+0x288>)
 8003a8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a90:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a10      	ldr	r2, [pc, #64]	; (8003ad8 <HAL_ADC_ConfigChannel+0x280>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d111      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003a9c:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <HAL_ADC_ConfigChannel+0x28c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a11      	ldr	r2, [pc, #68]	; (8003ae8 <HAL_ADC_ConfigChannel+0x290>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	0c9a      	lsrs	r2, r3, #18
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003ab2:	e002      	b.n	8003aba <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f9      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	10000012 	.word	0x10000012
 8003adc:	40012000 	.word	0x40012000
 8003ae0:	40012300 	.word	0x40012300
 8003ae4:	20010014 	.word	0x20010014
 8003ae8:	431bde83 	.word	0x431bde83

08003aec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003af4:	4b78      	ldr	r3, [pc, #480]	; (8003cd8 <ADC_Init+0x1ec>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a77      	ldr	r2, [pc, #476]	; (8003cd8 <ADC_Init+0x1ec>)
 8003afa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003afe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003b00:	4b75      	ldr	r3, [pc, #468]	; (8003cd8 <ADC_Init+0x1ec>)
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	4973      	ldr	r1, [pc, #460]	; (8003cd8 <ADC_Init+0x1ec>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	021a      	lsls	r2, r3, #8
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6859      	ldr	r1, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6899      	ldr	r1, [r3, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	4a58      	ldr	r2, [pc, #352]	; (8003cdc <ADC_Init+0x1f0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d022      	beq.n	8003bc6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6899      	ldr	r1, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6899      	ldr	r1, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	e00f      	b.n	8003be6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003be4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0202 	bic.w	r2, r2, #2
 8003bf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6899      	ldr	r1, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	005a      	lsls	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01b      	beq.n	8003c4c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6859      	ldr	r1, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	035a      	lsls	r2, r3, #13
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	e007      	b.n	8003c5c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	051a      	lsls	r2, r3, #20
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6899      	ldr	r1, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c9e:	025a      	lsls	r2, r3, #9
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6899      	ldr	r1, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	029a      	lsls	r2, r3, #10
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	609a      	str	r2, [r3, #8]
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40012300 	.word	0x40012300
 8003cdc:	0f000001 	.word	0x0f000001

08003ce0 <__NVIC_SetPriorityGrouping>:
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <__NVIC_SetPriorityGrouping+0x40>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <__NVIC_SetPriorityGrouping+0x44>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d0e:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <__NVIC_SetPriorityGrouping+0x40>)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	60d3      	str	r3, [r2, #12]
}
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	e000ed00 	.word	0xe000ed00
 8003d24:	05fa0000 	.word	0x05fa0000

08003d28 <__NVIC_GetPriorityGrouping>:
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d2c:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <__NVIC_GetPriorityGrouping+0x18>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	0a1b      	lsrs	r3, r3, #8
 8003d32:	f003 0307 	and.w	r3, r3, #7
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <__NVIC_EnableIRQ>:
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	db0b      	blt.n	8003d6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	f003 021f 	and.w	r2, r3, #31
 8003d5c:	4907      	ldr	r1, [pc, #28]	; (8003d7c <__NVIC_EnableIRQ+0x38>)
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	2001      	movs	r0, #1
 8003d66:	fa00 f202 	lsl.w	r2, r0, r2
 8003d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	e000e100 	.word	0xe000e100

08003d80 <__NVIC_SetPriority>:
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	6039      	str	r1, [r7, #0]
 8003d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	db0a      	blt.n	8003daa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	490c      	ldr	r1, [pc, #48]	; (8003dcc <__NVIC_SetPriority+0x4c>)
 8003d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9e:	0112      	lsls	r2, r2, #4
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	440b      	add	r3, r1
 8003da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003da8:	e00a      	b.n	8003dc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	4908      	ldr	r1, [pc, #32]	; (8003dd0 <__NVIC_SetPriority+0x50>)
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	3b04      	subs	r3, #4
 8003db8:	0112      	lsls	r2, r2, #4
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	761a      	strb	r2, [r3, #24]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	e000e100 	.word	0xe000e100
 8003dd0:	e000ed00 	.word	0xe000ed00

08003dd4 <NVIC_EncodePriority>:
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b089      	sub	sp, #36	; 0x24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f1c3 0307 	rsb	r3, r3, #7
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	bf28      	it	cs
 8003df2:	2304      	movcs	r3, #4
 8003df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	2b06      	cmp	r3, #6
 8003dfc:	d902      	bls.n	8003e04 <NVIC_EncodePriority+0x30>
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	3b03      	subs	r3, #3
 8003e02:	e000      	b.n	8003e06 <NVIC_EncodePriority+0x32>
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e08:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43da      	mvns	r2, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	401a      	ands	r2, r3
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	fa01 f303 	lsl.w	r3, r1, r3
 8003e26:	43d9      	mvns	r1, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e2c:	4313      	orrs	r3, r2
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3724      	adds	r7, #36	; 0x24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e4c:	d301      	bcc.n	8003e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e00f      	b.n	8003e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e52:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <SysTick_Config+0x40>)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e5a:	210f      	movs	r1, #15
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e60:	f7ff ff8e 	bl	8003d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e64:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <SysTick_Config+0x40>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e6a:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <SysTick_Config+0x40>)
 8003e6c:	2207      	movs	r2, #7
 8003e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	e000e010 	.word	0xe000e010

08003e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff ff29 	bl	8003ce0 <__NVIC_SetPriorityGrouping>
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b086      	sub	sp, #24
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ea8:	f7ff ff3e 	bl	8003d28 <__NVIC_GetPriorityGrouping>
 8003eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	6978      	ldr	r0, [r7, #20]
 8003eb4:	f7ff ff8e 	bl	8003dd4 <NVIC_EncodePriority>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff ff5d 	bl	8003d80 <__NVIC_SetPriority>
}
 8003ec6:	bf00      	nop
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b082      	sub	sp, #8
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff ff31 	bl	8003d44 <__NVIC_EnableIRQ>
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff ffa2 	bl	8003e3c <SysTick_Config>
 8003ef8:	4603      	mov	r3, r0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e054      	b.n	8003fc0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	7f5b      	ldrb	r3, [r3, #29]
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d105      	bne.n	8003f2c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fe ff86 	bl	8002e38 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	791b      	ldrb	r3, [r3, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10c      	bne.n	8003f54 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a22      	ldr	r2, [pc, #136]	; (8003fc8 <HAL_CRC_Init+0xc4>)
 8003f40:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0218 	bic.w	r2, r2, #24
 8003f50:	609a      	str	r2, [r3, #8]
 8003f52:	e00c      	b.n	8003f6e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6899      	ldr	r1, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f834 	bl	8003fcc <HAL_CRCEx_Polynomial_Set>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e028      	b.n	8003fc0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	795b      	ldrb	r3, [r3, #5]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d105      	bne.n	8003f82 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7e:	611a      	str	r2, [r3, #16]
 8003f80:	e004      	b.n	8003f8c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6912      	ldr	r2, [r2, #16]
 8003f8a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695a      	ldr	r2, [r3, #20]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699a      	ldr	r2, [r3, #24]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	04c11db7 	.word	0x04c11db7

08003fcc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003fdc:	231f      	movs	r3, #31
 8003fde:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003fe0:	bf00      	nop
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1e5a      	subs	r2, r3, #1
 8003fe6:	613a      	str	r2, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d009      	beq.n	8004000 <HAL_CRCEx_Polynomial_Set+0x34>
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0f0      	beq.n	8003fe2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b18      	cmp	r3, #24
 8004004:	d846      	bhi.n	8004094 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004006:	a201      	add	r2, pc, #4	; (adr r2, 800400c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400c:	0800409b 	.word	0x0800409b
 8004010:	08004095 	.word	0x08004095
 8004014:	08004095 	.word	0x08004095
 8004018:	08004095 	.word	0x08004095
 800401c:	08004095 	.word	0x08004095
 8004020:	08004095 	.word	0x08004095
 8004024:	08004095 	.word	0x08004095
 8004028:	08004095 	.word	0x08004095
 800402c:	08004089 	.word	0x08004089
 8004030:	08004095 	.word	0x08004095
 8004034:	08004095 	.word	0x08004095
 8004038:	08004095 	.word	0x08004095
 800403c:	08004095 	.word	0x08004095
 8004040:	08004095 	.word	0x08004095
 8004044:	08004095 	.word	0x08004095
 8004048:	08004095 	.word	0x08004095
 800404c:	0800407d 	.word	0x0800407d
 8004050:	08004095 	.word	0x08004095
 8004054:	08004095 	.word	0x08004095
 8004058:	08004095 	.word	0x08004095
 800405c:	08004095 	.word	0x08004095
 8004060:	08004095 	.word	0x08004095
 8004064:	08004095 	.word	0x08004095
 8004068:	08004095 	.word	0x08004095
 800406c:	08004071 	.word	0x08004071
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b06      	cmp	r3, #6
 8004074:	d913      	bls.n	800409e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800407a:	e010      	b.n	800409e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b07      	cmp	r3, #7
 8004080:	d90f      	bls.n	80040a2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004086:	e00c      	b.n	80040a2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b0f      	cmp	r3, #15
 800408c:	d90b      	bls.n	80040a6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004092:	e008      	b.n	80040a6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	75fb      	strb	r3, [r7, #23]
      break;
 8004098:	e006      	b.n	80040a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800409a:	bf00      	nop
 800409c:	e004      	b.n	80040a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800409e:	bf00      	nop
 80040a0:	e002      	b.n	80040a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80040a2:	bf00      	nop
 80040a4:	e000      	b.n	80040a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80040a6:	bf00      	nop
  }
  if (status == HAL_OK)
 80040a8:	7dfb      	ldrb	r3, [r7, #23]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10d      	bne.n	80040ca <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f023 0118 	bic.w	r1, r3, #24
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80040ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	371c      	adds	r7, #28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040e4:	f7ff fb68 	bl	80037b8 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e099      	b.n	8004228 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0201 	bic.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004114:	e00f      	b.n	8004136 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004116:	f7ff fb4f 	bl	80037b8 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b05      	cmp	r3, #5
 8004122:	d908      	bls.n	8004136 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2203      	movs	r2, #3
 800412e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e078      	b.n	8004228 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e8      	bne.n	8004116 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4b38      	ldr	r3, [pc, #224]	; (8004230 <HAL_DMA_Init+0x158>)
 8004150:	4013      	ands	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004162:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800416e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800417a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	2b04      	cmp	r3, #4
 800418e:	d107      	bne.n	80041a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004198:	4313      	orrs	r3, r2
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f023 0307 	bic.w	r3, r3, #7
 80041b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d117      	bne.n	80041fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00e      	beq.n	80041fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fa99 	bl	8004714 <DMA_CheckFifoParam>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2240      	movs	r2, #64	; 0x40
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041f6:	2301      	movs	r3, #1
 80041f8:	e016      	b.n	8004228 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fa50 	bl	80046a8 <DMA_CalcBaseAndBitshift>
 8004208:	4603      	mov	r3, r0
 800420a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	223f      	movs	r2, #63	; 0x3f
 8004212:	409a      	lsls	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	e010803f 	.word	0xe010803f

08004234 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_DMA_Start_IT+0x26>
 8004256:	2302      	movs	r3, #2
 8004258:	e048      	b.n	80042ec <HAL_DMA_Start_IT+0xb8>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	d137      	bne.n	80042de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2202      	movs	r2, #2
 8004272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f9e2 	bl	800464c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428c:	223f      	movs	r2, #63	; 0x3f
 800428e:	409a      	lsls	r2, r3
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0216 	orr.w	r2, r2, #22
 80042a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042b2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d007      	beq.n	80042cc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0208 	orr.w	r2, r2, #8
 80042ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	e005      	b.n	80042ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
 80042e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d004      	beq.n	8004312 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2280      	movs	r2, #128	; 0x80
 800430c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e00c      	b.n	800432c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2205      	movs	r2, #5
 8004316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0201 	bic.w	r2, r2, #1
 8004328:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
inline void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004344:	4b92      	ldr	r3, [pc, #584]	; (8004590 <HAL_DMA_IRQHandler+0x258>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a92      	ldr	r2, [pc, #584]	; (8004594 <HAL_DMA_IRQHandler+0x25c>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	0a9b      	lsrs	r3, r3, #10
 8004350:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004356:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004362:	2208      	movs	r2, #8
 8004364:	409a      	lsls	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4013      	ands	r3, r2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01a      	beq.n	80043a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d013      	beq.n	80043a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0204 	bic.w	r2, r2, #4
 800438a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004390:	2208      	movs	r2, #8
 8004392:	409a      	lsls	r2, r3
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439c:	f043 0201 	orr.w	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a8:	2201      	movs	r2, #1
 80043aa:	409a      	lsls	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d012      	beq.n	80043da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00b      	beq.n	80043da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c6:	2201      	movs	r2, #1
 80043c8:	409a      	lsls	r2, r3
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d2:	f043 0202 	orr.w	r2, r3, #2
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043de:	2204      	movs	r2, #4
 80043e0:	409a      	lsls	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d012      	beq.n	8004410 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00b      	beq.n	8004410 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fc:	2204      	movs	r2, #4
 80043fe:	409a      	lsls	r2, r3
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004408:	f043 0204 	orr.w	r2, r3, #4
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004414:	2210      	movs	r2, #16
 8004416:	409a      	lsls	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d043      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d03c      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004432:	2210      	movs	r2, #16
 8004434:	409a      	lsls	r2, r3
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d018      	beq.n	800447a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d108      	bne.n	8004468 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	2b00      	cmp	r3, #0
 800445c:	d024      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	4798      	blx	r3
 8004466:	e01f      	b.n	80044a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446c:	2b00      	cmp	r3, #0
 800446e:	d01b      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
 8004478:	e016      	b.n	80044a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d107      	bne.n	8004498 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0208 	bic.w	r2, r2, #8
 8004496:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ac:	2220      	movs	r2, #32
 80044ae:	409a      	lsls	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 808e 	beq.w	80045d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8086 	beq.w	80045d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ce:	2220      	movs	r2, #32
 80044d0:	409a      	lsls	r2, r3
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b05      	cmp	r3, #5
 80044e0:	d136      	bne.n	8004550 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0216 	bic.w	r2, r2, #22
 80044f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695a      	ldr	r2, [r3, #20]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004500:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	2b00      	cmp	r3, #0
 8004508:	d103      	bne.n	8004512 <HAL_DMA_IRQHandler+0x1da>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0208 	bic.w	r2, r2, #8
 8004520:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004526:	223f      	movs	r2, #63	; 0x3f
 8004528:	409a      	lsls	r2, r3
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004542:	2b00      	cmp	r3, #0
 8004544:	d07d      	beq.n	8004642 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	4798      	blx	r3
        }
        return;
 800454e:	e078      	b.n	8004642 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01c      	beq.n	8004598 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d108      	bne.n	800457e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004570:	2b00      	cmp	r3, #0
 8004572:	d030      	beq.n	80045d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	4798      	blx	r3
 800457c:	e02b      	b.n	80045d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d027      	beq.n	80045d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	4798      	blx	r3
 800458e:	e022      	b.n	80045d6 <HAL_DMA_IRQHandler+0x29e>
 8004590:	20010014 	.word	0x20010014
 8004594:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10f      	bne.n	80045c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0210 	bic.w	r2, r2, #16
 80045b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d032      	beq.n	8004644 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d022      	beq.n	8004630 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2205      	movs	r2, #5
 80045ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0201 	bic.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	3301      	adds	r3, #1
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	429a      	cmp	r2, r3
 800460c:	d307      	bcc.n	800461e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f2      	bne.n	8004602 <HAL_DMA_IRQHandler+0x2ca>
 800461c:	e000      	b.n	8004620 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800461e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	4798      	blx	r3
 8004640:	e000      	b.n	8004644 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004642:	bf00      	nop
    }
  }
}
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop

0800464c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004668:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b40      	cmp	r3, #64	; 0x40
 8004678:	d108      	bne.n	800468c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800468a:	e007      	b.n	800469c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	60da      	str	r2, [r3, #12]
}
 800469c:	bf00      	nop
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	3b10      	subs	r3, #16
 80046b8:	4a13      	ldr	r2, [pc, #76]	; (8004708 <DMA_CalcBaseAndBitshift+0x60>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	091b      	lsrs	r3, r3, #4
 80046c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046c2:	4a12      	ldr	r2, [pc, #72]	; (800470c <DMA_CalcBaseAndBitshift+0x64>)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4413      	add	r3, r2
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d908      	bls.n	80046e8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <DMA_CalcBaseAndBitshift+0x68>)
 80046de:	4013      	ands	r3, r2
 80046e0:	1d1a      	adds	r2, r3, #4
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	659a      	str	r2, [r3, #88]	; 0x58
 80046e6:	e006      	b.n	80046f6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	4b08      	ldr	r3, [pc, #32]	; (8004710 <DMA_CalcBaseAndBitshift+0x68>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	aaaaaaab 	.word	0xaaaaaaab
 800470c:	08008060 	.word	0x08008060
 8004710:	fffffc00 	.word	0xfffffc00

08004714 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d11f      	bne.n	800476e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b03      	cmp	r3, #3
 8004732:	d855      	bhi.n	80047e0 <DMA_CheckFifoParam+0xcc>
 8004734:	a201      	add	r2, pc, #4	; (adr r2, 800473c <DMA_CheckFifoParam+0x28>)
 8004736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473a:	bf00      	nop
 800473c:	0800474d 	.word	0x0800474d
 8004740:	0800475f 	.word	0x0800475f
 8004744:	0800474d 	.word	0x0800474d
 8004748:	080047e1 	.word	0x080047e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d045      	beq.n	80047e4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800475c:	e042      	b.n	80047e4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004766:	d13f      	bne.n	80047e8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800476c:	e03c      	b.n	80047e8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004776:	d121      	bne.n	80047bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b03      	cmp	r3, #3
 800477c:	d836      	bhi.n	80047ec <DMA_CheckFifoParam+0xd8>
 800477e:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <DMA_CheckFifoParam+0x70>)
 8004780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004784:	08004795 	.word	0x08004795
 8004788:	0800479b 	.word	0x0800479b
 800478c:	08004795 	.word	0x08004795
 8004790:	080047ad 	.word	0x080047ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
      break;
 8004798:	e02f      	b.n	80047fa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d024      	beq.n	80047f0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047aa:	e021      	b.n	80047f0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047b4:	d11e      	bne.n	80047f4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047ba:	e01b      	b.n	80047f4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d902      	bls.n	80047c8 <DMA_CheckFifoParam+0xb4>
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d003      	beq.n	80047ce <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047c6:	e018      	b.n	80047fa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	73fb      	strb	r3, [r7, #15]
      break;
 80047cc:	e015      	b.n	80047fa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00e      	beq.n	80047f8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	73fb      	strb	r3, [r7, #15]
      break;
 80047de:	e00b      	b.n	80047f8 <DMA_CheckFifoParam+0xe4>
      break;
 80047e0:	bf00      	nop
 80047e2:	e00a      	b.n	80047fa <DMA_CheckFifoParam+0xe6>
      break;
 80047e4:	bf00      	nop
 80047e6:	e008      	b.n	80047fa <DMA_CheckFifoParam+0xe6>
      break;
 80047e8:	bf00      	nop
 80047ea:	e006      	b.n	80047fa <DMA_CheckFifoParam+0xe6>
      break;
 80047ec:	bf00      	nop
 80047ee:	e004      	b.n	80047fa <DMA_CheckFifoParam+0xe6>
      break;
 80047f0:	bf00      	nop
 80047f2:	e002      	b.n	80047fa <DMA_CheckFifoParam+0xe6>
      break;   
 80047f4:	bf00      	nop
 80047f6:	e000      	b.n	80047fa <DMA_CheckFifoParam+0xe6>
      break;
 80047f8:	bf00      	nop
    }
  } 
  
  return status; 
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004808:	b480      	push	{r7}
 800480a:	b089      	sub	sp, #36	; 0x24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004812:	2300      	movs	r3, #0
 8004814:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800481a:	2300      	movs	r3, #0
 800481c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800481e:	2300      	movs	r3, #0
 8004820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	e169      	b.n	8004afc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004828:	2201      	movs	r2, #1
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4013      	ands	r3, r2
 800483a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	429a      	cmp	r2, r3
 8004842:	f040 8158 	bne.w	8004af6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d00b      	beq.n	8004866 <HAL_GPIO_Init+0x5e>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d007      	beq.n	8004866 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800485a:	2b11      	cmp	r3, #17
 800485c:	d003      	beq.n	8004866 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b12      	cmp	r3, #18
 8004864:	d130      	bne.n	80048c8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	2203      	movs	r2, #3
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43db      	mvns	r3, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4313      	orrs	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800489c:	2201      	movs	r2, #1
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	43db      	mvns	r3, r3
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	4013      	ands	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 0201 	and.w	r2, r3, #1
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	2203      	movs	r2, #3
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d003      	beq.n	8004908 <HAL_GPIO_Init+0x100>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b12      	cmp	r3, #18
 8004906:	d123      	bne.n	8004950 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	08da      	lsrs	r2, r3, #3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3208      	adds	r2, #8
 8004910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	220f      	movs	r2, #15
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	08da      	lsrs	r2, r3, #3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3208      	adds	r2, #8
 800494a:	69b9      	ldr	r1, [r7, #24]
 800494c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	2203      	movs	r2, #3
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	43db      	mvns	r3, r3
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4013      	ands	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 0203 	and.w	r2, r3, #3
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4313      	orrs	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 80b2 	beq.w	8004af6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004992:	4b5f      	ldr	r3, [pc, #380]	; (8004b10 <HAL_GPIO_Init+0x308>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	4a5e      	ldr	r2, [pc, #376]	; (8004b10 <HAL_GPIO_Init+0x308>)
 8004998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800499c:	6453      	str	r3, [r2, #68]	; 0x44
 800499e:	4b5c      	ldr	r3, [pc, #368]	; (8004b10 <HAL_GPIO_Init+0x308>)
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80049aa:	4a5a      	ldr	r2, [pc, #360]	; (8004b14 <HAL_GPIO_Init+0x30c>)
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	089b      	lsrs	r3, r3, #2
 80049b0:	3302      	adds	r3, #2
 80049b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	220f      	movs	r2, #15
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	43db      	mvns	r3, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4013      	ands	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a51      	ldr	r2, [pc, #324]	; (8004b18 <HAL_GPIO_Init+0x310>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d02b      	beq.n	8004a2e <HAL_GPIO_Init+0x226>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a50      	ldr	r2, [pc, #320]	; (8004b1c <HAL_GPIO_Init+0x314>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d025      	beq.n	8004a2a <HAL_GPIO_Init+0x222>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a4f      	ldr	r2, [pc, #316]	; (8004b20 <HAL_GPIO_Init+0x318>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d01f      	beq.n	8004a26 <HAL_GPIO_Init+0x21e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a4e      	ldr	r2, [pc, #312]	; (8004b24 <HAL_GPIO_Init+0x31c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d019      	beq.n	8004a22 <HAL_GPIO_Init+0x21a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a4d      	ldr	r2, [pc, #308]	; (8004b28 <HAL_GPIO_Init+0x320>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d013      	beq.n	8004a1e <HAL_GPIO_Init+0x216>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a4c      	ldr	r2, [pc, #304]	; (8004b2c <HAL_GPIO_Init+0x324>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00d      	beq.n	8004a1a <HAL_GPIO_Init+0x212>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a4b      	ldr	r2, [pc, #300]	; (8004b30 <HAL_GPIO_Init+0x328>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d007      	beq.n	8004a16 <HAL_GPIO_Init+0x20e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a4a      	ldr	r2, [pc, #296]	; (8004b34 <HAL_GPIO_Init+0x32c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d101      	bne.n	8004a12 <HAL_GPIO_Init+0x20a>
 8004a0e:	2307      	movs	r3, #7
 8004a10:	e00e      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a12:	2308      	movs	r3, #8
 8004a14:	e00c      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a16:	2306      	movs	r3, #6
 8004a18:	e00a      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a1a:	2305      	movs	r3, #5
 8004a1c:	e008      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a1e:	2304      	movs	r3, #4
 8004a20:	e006      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a22:	2303      	movs	r3, #3
 8004a24:	e004      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e002      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	f002 0203 	and.w	r2, r2, #3
 8004a36:	0092      	lsls	r2, r2, #2
 8004a38:	4093      	lsls	r3, r2
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004a40:	4934      	ldr	r1, [pc, #208]	; (8004b14 <HAL_GPIO_Init+0x30c>)
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	089b      	lsrs	r3, r3, #2
 8004a46:	3302      	adds	r3, #2
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a4e:	4b3a      	ldr	r3, [pc, #232]	; (8004b38 <HAL_GPIO_Init+0x330>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	43db      	mvns	r3, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a72:	4a31      	ldr	r2, [pc, #196]	; (8004b38 <HAL_GPIO_Init+0x330>)
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a78:	4b2f      	ldr	r3, [pc, #188]	; (8004b38 <HAL_GPIO_Init+0x330>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a9c:	4a26      	ldr	r2, [pc, #152]	; (8004b38 <HAL_GPIO_Init+0x330>)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004aa2:	4b25      	ldr	r3, [pc, #148]	; (8004b38 <HAL_GPIO_Init+0x330>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ac6:	4a1c      	ldr	r2, [pc, #112]	; (8004b38 <HAL_GPIO_Init+0x330>)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004acc:	4b1a      	ldr	r3, [pc, #104]	; (8004b38 <HAL_GPIO_Init+0x330>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004af0:	4a11      	ldr	r2, [pc, #68]	; (8004b38 <HAL_GPIO_Init+0x330>)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	3301      	adds	r3, #1
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	2b0f      	cmp	r3, #15
 8004b00:	f67f ae92 	bls.w	8004828 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004b04:	bf00      	nop
 8004b06:	3724      	adds	r7, #36	; 0x24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	40023800 	.word	0x40023800
 8004b14:	40013800 	.word	0x40013800
 8004b18:	40020000 	.word	0x40020000
 8004b1c:	40020400 	.word	0x40020400
 8004b20:	40020800 	.word	0x40020800
 8004b24:	40020c00 	.word	0x40020c00
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	40021400 	.word	0x40021400
 8004b30:	40021800 	.word	0x40021800
 8004b34:	40021c00 	.word	0x40021c00
 8004b38:	40013c00 	.word	0x40013c00

08004b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
inline void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	807b      	strh	r3, [r7, #2]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b4c:	787b      	ldrb	r3, [r7, #1]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b52:	887a      	ldrh	r2, [r7, #2]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004b58:	e003      	b.n	8004b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004b5a:	887b      	ldrh	r3, [r7, #2]
 8004b5c:	041a      	lsls	r2, r3, #16
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	619a      	str	r2, [r3, #24]
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
inline void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b7a:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d006      	beq.n	8004b94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b86:	4a05      	ldr	r2, [pc, #20]	; (8004b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fd fa3a 	bl	8002008 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b94:	bf00      	nop
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40013c00 	.word	0x40013c00

08004ba0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004bb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bca:	4b23      	ldr	r3, [pc, #140]	; (8004c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	4a22      	ldr	r2, [pc, #136]	; (8004c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bd6:	4b20      	ldr	r3, [pc, #128]	; (8004c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004be2:	4b1e      	ldr	r3, [pc, #120]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1d      	ldr	r2, [pc, #116]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bee:	f7fe fde3 	bl	80037b8 <HAL_GetTick>
 8004bf2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bf4:	e009      	b.n	8004c0a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bf6:	f7fe fddf 	bl	80037b8 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c04:	d901      	bls.n	8004c0a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e022      	b.n	8004c50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c0a:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c16:	d1ee      	bne.n	8004bf6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c18:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a0f      	ldr	r2, [pc, #60]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c24:	f7fe fdc8 	bl	80037b8 <HAL_GetTick>
 8004c28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c2a:	e009      	b.n	8004c40 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c2c:	f7fe fdc4 	bl	80037b8 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c3a:	d901      	bls.n	8004c40 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e007      	b.n	8004c50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c40:	4b06      	ldr	r3, [pc, #24]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c4c:	d1ee      	bne.n	8004c2c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	40007000 	.word	0x40007000

08004c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e291      	b.n	800519a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 8087 	beq.w	8004d92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c84:	4b96      	ldr	r3, [pc, #600]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d00c      	beq.n	8004caa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c90:	4b93      	ldr	r3, [pc, #588]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 030c 	and.w	r3, r3, #12
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d112      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x62>
 8004c9c:	4b90      	ldr	r3, [pc, #576]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ca8:	d10b      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004caa:	4b8d      	ldr	r3, [pc, #564]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d06c      	beq.n	8004d90 <HAL_RCC_OscConfig+0x130>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d168      	bne.n	8004d90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e26b      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cca:	d106      	bne.n	8004cda <HAL_RCC_OscConfig+0x7a>
 8004ccc:	4b84      	ldr	r3, [pc, #528]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a83      	ldr	r2, [pc, #524]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	e02e      	b.n	8004d38 <HAL_RCC_OscConfig+0xd8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10c      	bne.n	8004cfc <HAL_RCC_OscConfig+0x9c>
 8004ce2:	4b7f      	ldr	r3, [pc, #508]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a7e      	ldr	r2, [pc, #504]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	4b7c      	ldr	r3, [pc, #496]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a7b      	ldr	r2, [pc, #492]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e01d      	b.n	8004d38 <HAL_RCC_OscConfig+0xd8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0xc0>
 8004d06:	4b76      	ldr	r3, [pc, #472]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a75      	ldr	r2, [pc, #468]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	4b73      	ldr	r3, [pc, #460]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a72      	ldr	r2, [pc, #456]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0xd8>
 8004d20:	4b6f      	ldr	r3, [pc, #444]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a6e      	ldr	r2, [pc, #440]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	4b6c      	ldr	r3, [pc, #432]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a6b      	ldr	r2, [pc, #428]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d013      	beq.n	8004d68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fe fd3a 	bl	80037b8 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fe fd36 	bl	80037b8 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	; 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e21f      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5a:	4b61      	ldr	r3, [pc, #388]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0xe8>
 8004d66:	e014      	b.n	8004d92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fe fd26 	bl	80037b8 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d70:	f7fe fd22 	bl	80037b8 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b64      	cmp	r3, #100	; 0x64
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e20b      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d82:	4b57      	ldr	r3, [pc, #348]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0x110>
 8004d8e:	e000      	b.n	8004d92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d069      	beq.n	8004e72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d9e:	4b50      	ldr	r3, [pc, #320]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004daa:	4b4d      	ldr	r3, [pc, #308]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d11c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x190>
 8004db6:	4b4a      	ldr	r3, [pc, #296]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d116      	bne.n	8004df0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc2:	4b47      	ldr	r3, [pc, #284]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_RCC_OscConfig+0x17a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d001      	beq.n	8004dda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e1df      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dda:	4b41      	ldr	r3, [pc, #260]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	493d      	ldr	r1, [pc, #244]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dee:	e040      	b.n	8004e72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d023      	beq.n	8004e40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004df8:	4b39      	ldr	r3, [pc, #228]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a38      	ldr	r2, [pc, #224]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e04:	f7fe fcd8 	bl	80037b8 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e0c:	f7fe fcd4 	bl	80037b8 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e1bd      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1e:	4b30      	ldr	r3, [pc, #192]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e2a:	4b2d      	ldr	r3, [pc, #180]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4929      	ldr	r1, [pc, #164]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	600b      	str	r3, [r1, #0]
 8004e3e:	e018      	b.n	8004e72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e40:	4b27      	ldr	r3, [pc, #156]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a26      	ldr	r2, [pc, #152]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e46:	f023 0301 	bic.w	r3, r3, #1
 8004e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4c:	f7fe fcb4 	bl	80037b8 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e54:	f7fe fcb0 	bl	80037b8 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e199      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e66:	4b1e      	ldr	r3, [pc, #120]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d038      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d019      	beq.n	8004eba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e86:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8a:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e92:	f7fe fc91 	bl	80037b8 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e9a:	f7fe fc8d 	bl	80037b8 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e176      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0f0      	beq.n	8004e9a <HAL_RCC_OscConfig+0x23a>
 8004eb8:	e01a      	b.n	8004ef0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eba:	4b09      	ldr	r3, [pc, #36]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ebe:	4a08      	ldr	r2, [pc, #32]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec6:	f7fe fc77 	bl	80037b8 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ecc:	e00a      	b.n	8004ee4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ece:	f7fe fc73 	bl	80037b8 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d903      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e15c      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
 8004ee0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee4:	4b91      	ldr	r3, [pc, #580]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1ee      	bne.n	8004ece <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 80a4 	beq.w	8005046 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004efe:	4b8b      	ldr	r3, [pc, #556]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10d      	bne.n	8004f26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f0a:	4b88      	ldr	r3, [pc, #544]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	4a87      	ldr	r2, [pc, #540]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f14:	6413      	str	r3, [r2, #64]	; 0x40
 8004f16:	4b85      	ldr	r3, [pc, #532]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f22:	2301      	movs	r3, #1
 8004f24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f26:	4b82      	ldr	r3, [pc, #520]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d118      	bne.n	8004f64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004f32:	4b7f      	ldr	r3, [pc, #508]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a7e      	ldr	r2, [pc, #504]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3e:	f7fe fc3b 	bl	80037b8 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f46:	f7fe fc37 	bl	80037b8 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b64      	cmp	r3, #100	; 0x64
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e120      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f58:	4b75      	ldr	r3, [pc, #468]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d106      	bne.n	8004f7a <HAL_RCC_OscConfig+0x31a>
 8004f6c:	4b6f      	ldr	r3, [pc, #444]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f70:	4a6e      	ldr	r2, [pc, #440]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	6713      	str	r3, [r2, #112]	; 0x70
 8004f78:	e02d      	b.n	8004fd6 <HAL_RCC_OscConfig+0x376>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10c      	bne.n	8004f9c <HAL_RCC_OscConfig+0x33c>
 8004f82:	4b6a      	ldr	r3, [pc, #424]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	4a69      	ldr	r2, [pc, #420]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f88:	f023 0301 	bic.w	r3, r3, #1
 8004f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8e:	4b67      	ldr	r3, [pc, #412]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	4a66      	ldr	r2, [pc, #408]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f94:	f023 0304 	bic.w	r3, r3, #4
 8004f98:	6713      	str	r3, [r2, #112]	; 0x70
 8004f9a:	e01c      	b.n	8004fd6 <HAL_RCC_OscConfig+0x376>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b05      	cmp	r3, #5
 8004fa2:	d10c      	bne.n	8004fbe <HAL_RCC_OscConfig+0x35e>
 8004fa4:	4b61      	ldr	r3, [pc, #388]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa8:	4a60      	ldr	r2, [pc, #384]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004faa:	f043 0304 	orr.w	r3, r3, #4
 8004fae:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb0:	4b5e      	ldr	r3, [pc, #376]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb4:	4a5d      	ldr	r2, [pc, #372]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004fb6:	f043 0301 	orr.w	r3, r3, #1
 8004fba:	6713      	str	r3, [r2, #112]	; 0x70
 8004fbc:	e00b      	b.n	8004fd6 <HAL_RCC_OscConfig+0x376>
 8004fbe:	4b5b      	ldr	r3, [pc, #364]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	4a5a      	ldr	r2, [pc, #360]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004fc4:	f023 0301 	bic.w	r3, r3, #1
 8004fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fca:	4b58      	ldr	r3, [pc, #352]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fce:	4a57      	ldr	r2, [pc, #348]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004fd0:	f023 0304 	bic.w	r3, r3, #4
 8004fd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d015      	beq.n	800500a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fde:	f7fe fbeb 	bl	80037b8 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe4:	e00a      	b.n	8004ffc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe6:	f7fe fbe7 	bl	80037b8 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e0ce      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ffc:	4b4b      	ldr	r3, [pc, #300]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0ee      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x386>
 8005008:	e014      	b.n	8005034 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500a:	f7fe fbd5 	bl	80037b8 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005010:	e00a      	b.n	8005028 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005012:	f7fe fbd1 	bl	80037b8 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005020:	4293      	cmp	r3, r2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e0b8      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005028:	4b40      	ldr	r3, [pc, #256]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1ee      	bne.n	8005012 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005034:	7dfb      	ldrb	r3, [r7, #23]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d105      	bne.n	8005046 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800503a:	4b3c      	ldr	r3, [pc, #240]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	4a3b      	ldr	r2, [pc, #236]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8005040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005044:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 80a4 	beq.w	8005198 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005050:	4b36      	ldr	r3, [pc, #216]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 030c 	and.w	r3, r3, #12
 8005058:	2b08      	cmp	r3, #8
 800505a:	d06b      	beq.n	8005134 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	2b02      	cmp	r3, #2
 8005062:	d149      	bne.n	80050f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005064:	4b31      	ldr	r3, [pc, #196]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a30      	ldr	r2, [pc, #192]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 800506a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800506e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fe fba2 	bl	80037b8 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005078:	f7fe fb9e 	bl	80037b8 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e087      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508a:	4b28      	ldr	r3, [pc, #160]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69da      	ldr	r2, [r3, #28]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	019b      	lsls	r3, r3, #6
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	085b      	lsrs	r3, r3, #1
 80050ae:	3b01      	subs	r3, #1
 80050b0:	041b      	lsls	r3, r3, #16
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	061b      	lsls	r3, r3, #24
 80050ba:	4313      	orrs	r3, r2
 80050bc:	4a1b      	ldr	r2, [pc, #108]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 80050be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050c4:	4b19      	ldr	r3, [pc, #100]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a18      	ldr	r2, [pc, #96]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 80050ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d0:	f7fe fb72 	bl	80037b8 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d8:	f7fe fb6e 	bl	80037b8 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e057      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ea:	4b10      	ldr	r3, [pc, #64]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0f0      	beq.n	80050d8 <HAL_RCC_OscConfig+0x478>
 80050f6:	e04f      	b.n	8005198 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a0b      	ldr	r2, [pc, #44]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 80050fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7fe fb58 	bl	80037b8 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800510c:	f7fe fb54 	bl	80037b8 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e03d      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511e:	4b03      	ldr	r3, [pc, #12]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCC_OscConfig+0x4ac>
 800512a:	e035      	b.n	8005198 <HAL_RCC_OscConfig+0x538>
 800512c:	40023800 	.word	0x40023800
 8005130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005134:	4b1b      	ldr	r3, [pc, #108]	; (80051a4 <HAL_RCC_OscConfig+0x544>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d028      	beq.n	8005194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800514c:	429a      	cmp	r2, r3
 800514e:	d121      	bne.n	8005194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800515a:	429a      	cmp	r2, r3
 800515c:	d11a      	bne.n	8005194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005164:	4013      	ands	r3, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800516a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800516c:	4293      	cmp	r3, r2
 800516e:	d111      	bne.n	8005194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517a:	085b      	lsrs	r3, r3, #1
 800517c:	3b01      	subs	r3, #1
 800517e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005180:	429a      	cmp	r2, r3
 8005182:	d107      	bne.n	8005194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40023800 	.word	0x40023800

080051a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0d0      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051c0:	4b6a      	ldr	r3, [pc, #424]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d910      	bls.n	80051f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ce:	4b67      	ldr	r3, [pc, #412]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f023 020f 	bic.w	r2, r3, #15
 80051d6:	4965      	ldr	r1, [pc, #404]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	4313      	orrs	r3, r2
 80051dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051de:	4b63      	ldr	r3, [pc, #396]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d001      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e0b8      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d020      	beq.n	800523e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005208:	4b59      	ldr	r3, [pc, #356]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	4a58      	ldr	r2, [pc, #352]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 800520e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005212:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005220:	4b53      	ldr	r3, [pc, #332]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	4a52      	ldr	r2, [pc, #328]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 8005226:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800522a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800522c:	4b50      	ldr	r3, [pc, #320]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	494d      	ldr	r1, [pc, #308]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 800523a:	4313      	orrs	r3, r2
 800523c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d040      	beq.n	80052cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d107      	bne.n	8005262 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005252:	4b47      	ldr	r3, [pc, #284]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d115      	bne.n	800528a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e07f      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b02      	cmp	r3, #2
 8005268:	d107      	bne.n	800527a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800526a:	4b41      	ldr	r3, [pc, #260]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d109      	bne.n	800528a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e073      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800527a:	4b3d      	ldr	r3, [pc, #244]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e06b      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800528a:	4b39      	ldr	r3, [pc, #228]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f023 0203 	bic.w	r2, r3, #3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	4936      	ldr	r1, [pc, #216]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 8005298:	4313      	orrs	r3, r2
 800529a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800529c:	f7fe fa8c 	bl	80037b8 <HAL_GetTick>
 80052a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a2:	e00a      	b.n	80052ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052a4:	f7fe fa88 	bl	80037b8 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e053      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ba:	4b2d      	ldr	r3, [pc, #180]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 020c 	and.w	r2, r3, #12
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d1eb      	bne.n	80052a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052cc:	4b27      	ldr	r3, [pc, #156]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 030f 	and.w	r3, r3, #15
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d210      	bcs.n	80052fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052da:	4b24      	ldr	r3, [pc, #144]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f023 020f 	bic.w	r2, r3, #15
 80052e2:	4922      	ldr	r1, [pc, #136]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ea:	4b20      	ldr	r3, [pc, #128]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d001      	beq.n	80052fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e032      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005308:	4b19      	ldr	r3, [pc, #100]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4916      	ldr	r1, [pc, #88]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005326:	4b12      	ldr	r3, [pc, #72]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	490e      	ldr	r1, [pc, #56]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 8005336:	4313      	orrs	r3, r2
 8005338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800533a:	f000 f821 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 800533e:	4601      	mov	r1, r0
 8005340:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	091b      	lsrs	r3, r3, #4
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	4a0a      	ldr	r2, [pc, #40]	; (8005374 <HAL_RCC_ClockConfig+0x1cc>)
 800534c:	5cd3      	ldrb	r3, [r2, r3]
 800534e:	fa21 f303 	lsr.w	r3, r1, r3
 8005352:	4a09      	ldr	r2, [pc, #36]	; (8005378 <HAL_RCC_ClockConfig+0x1d0>)
 8005354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005356:	4b09      	ldr	r3, [pc, #36]	; (800537c <HAL_RCC_ClockConfig+0x1d4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f7fe f9e8 	bl	8003730 <HAL_InitTick>

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40023c00 	.word	0x40023c00
 8005370:	40023800 	.word	0x40023800
 8005374:	08008048 	.word	0x08008048
 8005378:	20010014 	.word	0x20010014
 800537c:	20010b00 	.word	0x20010b00

08005380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	607b      	str	r3, [r7, #4]
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	2300      	movs	r3, #0
 8005390:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005396:	4b50      	ldr	r3, [pc, #320]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 030c 	and.w	r3, r3, #12
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d007      	beq.n	80053b2 <HAL_RCC_GetSysClockFreq+0x32>
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d008      	beq.n	80053b8 <HAL_RCC_GetSysClockFreq+0x38>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f040 808d 	bne.w	80054c6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053ac:	4b4b      	ldr	r3, [pc, #300]	; (80054dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80053ae:	60bb      	str	r3, [r7, #8]
      break;
 80053b0:	e08c      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053b2:	4b4b      	ldr	r3, [pc, #300]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80053b4:	60bb      	str	r3, [r7, #8]
      break;
 80053b6:	e089      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053b8:	4b47      	ldr	r3, [pc, #284]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053c0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053c2:	4b45      	ldr	r3, [pc, #276]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d023      	beq.n	8005416 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ce:	4b42      	ldr	r3, [pc, #264]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	099b      	lsrs	r3, r3, #6
 80053d4:	f04f 0400 	mov.w	r4, #0
 80053d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	ea03 0501 	and.w	r5, r3, r1
 80053e4:	ea04 0602 	and.w	r6, r4, r2
 80053e8:	4a3d      	ldr	r2, [pc, #244]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80053ea:	fb02 f106 	mul.w	r1, r2, r6
 80053ee:	2200      	movs	r2, #0
 80053f0:	fb02 f205 	mul.w	r2, r2, r5
 80053f4:	440a      	add	r2, r1
 80053f6:	493a      	ldr	r1, [pc, #232]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80053f8:	fba5 0101 	umull	r0, r1, r5, r1
 80053fc:	1853      	adds	r3, r2, r1
 80053fe:	4619      	mov	r1, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f04f 0400 	mov.w	r4, #0
 8005406:	461a      	mov	r2, r3
 8005408:	4623      	mov	r3, r4
 800540a:	f7fb fb27 	bl	8000a5c <__aeabi_uldivmod>
 800540e:	4603      	mov	r3, r0
 8005410:	460c      	mov	r4, r1
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	e049      	b.n	80054aa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005416:	4b30      	ldr	r3, [pc, #192]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	099b      	lsrs	r3, r3, #6
 800541c:	f04f 0400 	mov.w	r4, #0
 8005420:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	ea03 0501 	and.w	r5, r3, r1
 800542c:	ea04 0602 	and.w	r6, r4, r2
 8005430:	4629      	mov	r1, r5
 8005432:	4632      	mov	r2, r6
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	f04f 0400 	mov.w	r4, #0
 800543c:	0154      	lsls	r4, r2, #5
 800543e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005442:	014b      	lsls	r3, r1, #5
 8005444:	4619      	mov	r1, r3
 8005446:	4622      	mov	r2, r4
 8005448:	1b49      	subs	r1, r1, r5
 800544a:	eb62 0206 	sbc.w	r2, r2, r6
 800544e:	f04f 0300 	mov.w	r3, #0
 8005452:	f04f 0400 	mov.w	r4, #0
 8005456:	0194      	lsls	r4, r2, #6
 8005458:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800545c:	018b      	lsls	r3, r1, #6
 800545e:	1a5b      	subs	r3, r3, r1
 8005460:	eb64 0402 	sbc.w	r4, r4, r2
 8005464:	f04f 0100 	mov.w	r1, #0
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	00e2      	lsls	r2, r4, #3
 800546e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005472:	00d9      	lsls	r1, r3, #3
 8005474:	460b      	mov	r3, r1
 8005476:	4614      	mov	r4, r2
 8005478:	195b      	adds	r3, r3, r5
 800547a:	eb44 0406 	adc.w	r4, r4, r6
 800547e:	f04f 0100 	mov.w	r1, #0
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	02a2      	lsls	r2, r4, #10
 8005488:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800548c:	0299      	lsls	r1, r3, #10
 800548e:	460b      	mov	r3, r1
 8005490:	4614      	mov	r4, r2
 8005492:	4618      	mov	r0, r3
 8005494:	4621      	mov	r1, r4
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f04f 0400 	mov.w	r4, #0
 800549c:	461a      	mov	r2, r3
 800549e:	4623      	mov	r3, r4
 80054a0:	f7fb fadc 	bl	8000a5c <__aeabi_uldivmod>
 80054a4:	4603      	mov	r3, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80054aa:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	0c1b      	lsrs	r3, r3, #16
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	3301      	adds	r3, #1
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c2:	60bb      	str	r3, [r7, #8]
      break;
 80054c4:	e002      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054c6:	4b05      	ldr	r3, [pc, #20]	; (80054dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80054c8:	60bb      	str	r3, [r7, #8]
      break;
 80054ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054cc:	68bb      	ldr	r3, [r7, #8]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40023800 	.word	0x40023800
 80054dc:	00f42400 	.word	0x00f42400
 80054e0:	017d7840 	.word	0x017d7840

080054e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e8:	4b03      	ldr	r3, [pc, #12]	; (80054f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054ea:	681b      	ldr	r3, [r3, #0]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	20010014 	.word	0x20010014

080054fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005500:	f7ff fff0 	bl	80054e4 <HAL_RCC_GetHCLKFreq>
 8005504:	4601      	mov	r1, r0
 8005506:	4b05      	ldr	r3, [pc, #20]	; (800551c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	0a9b      	lsrs	r3, r3, #10
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	4a03      	ldr	r2, [pc, #12]	; (8005520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005512:	5cd3      	ldrb	r3, [r2, r3]
 8005514:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005518:	4618      	mov	r0, r3
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40023800 	.word	0x40023800
 8005520:	08008058 	.word	0x08008058

08005524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005528:	f7ff ffdc 	bl	80054e4 <HAL_RCC_GetHCLKFreq>
 800552c:	4601      	mov	r1, r0
 800552e:	4b05      	ldr	r3, [pc, #20]	; (8005544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	0b5b      	lsrs	r3, r3, #13
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	4a03      	ldr	r2, [pc, #12]	; (8005548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800553a:	5cd3      	ldrb	r3, [r2, r3]
 800553c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005540:	4618      	mov	r0, r3
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40023800 	.word	0x40023800
 8005548:	08008058 	.word	0x08008058

0800554c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005560:	2300      	movs	r3, #0
 8005562:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d012      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005570:	4b65      	ldr	r3, [pc, #404]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4a64      	ldr	r2, [pc, #400]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005576:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800557a:	6093      	str	r3, [r2, #8]
 800557c:	4b62      	ldr	r3, [pc, #392]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	4960      	ldr	r1, [pc, #384]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005586:	4313      	orrs	r3, r2
 8005588:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8005592:	2301      	movs	r3, #1
 8005594:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d017      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055a2:	4b59      	ldr	r3, [pc, #356]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b0:	4955      	ldr	r1, [pc, #340]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055c0:	d101      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80055c2:	2301      	movs	r3, #1
 80055c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80055ce:	2301      	movs	r3, #1
 80055d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d017      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055de:	4b4a      	ldr	r3, [pc, #296]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ec:	4946      	ldr	r1, [pc, #280]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055fc:	d101      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80055fe:	2301      	movs	r3, #1
 8005600:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800560a:	2301      	movs	r3, #1
 800560c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 808b 	beq.w	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800561c:	4b3a      	ldr	r3, [pc, #232]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	4a39      	ldr	r2, [pc, #228]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005626:	6413      	str	r3, [r2, #64]	; 0x40
 8005628:	4b37      	ldr	r3, [pc, #220]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005634:	4b35      	ldr	r3, [pc, #212]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a34      	ldr	r2, [pc, #208]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800563a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005640:	f7fe f8ba 	bl	80037b8 <HAL_GetTick>
 8005644:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005646:	e008      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005648:	f7fe f8b6 	bl	80037b8 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b64      	cmp	r3, #100	; 0x64
 8005654:	d901      	bls.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e2ba      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800565a:	4b2c      	ldr	r3, [pc, #176]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0f0      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005666:	4b28      	ldr	r3, [pc, #160]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d035      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	429a      	cmp	r2, r3
 8005682:	d02e      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005684:	4b20      	ldr	r3, [pc, #128]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800568c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800568e:	4b1e      	ldr	r3, [pc, #120]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005692:	4a1d      	ldr	r2, [pc, #116]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005698:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800569a:	4b1b      	ldr	r3, [pc, #108]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800569c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569e:	4a1a      	ldr	r2, [pc, #104]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80056a6:	4a18      	ldr	r2, [pc, #96]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056ac:	4b16      	ldr	r3, [pc, #88]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d114      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b8:	f7fe f87e 	bl	80037b8 <HAL_GetTick>
 80056bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056be:	e00a      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056c0:	f7fe f87a 	bl	80037b8 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e27c      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d6:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0ee      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ee:	d111      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80056f0:	4b05      	ldr	r3, [pc, #20]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80056fc:	4b04      	ldr	r3, [pc, #16]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056fe:	400b      	ands	r3, r1
 8005700:	4901      	ldr	r1, [pc, #4]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005702:	4313      	orrs	r3, r2
 8005704:	608b      	str	r3, [r1, #8]
 8005706:	e00b      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005708:	40023800 	.word	0x40023800
 800570c:	40007000 	.word	0x40007000
 8005710:	0ffffcff 	.word	0x0ffffcff
 8005714:	4ba3      	ldr	r3, [pc, #652]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	4aa2      	ldr	r2, [pc, #648]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800571a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800571e:	6093      	str	r3, [r2, #8]
 8005720:	4ba0      	ldr	r3, [pc, #640]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005722:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800572c:	499d      	ldr	r1, [pc, #628]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800572e:	4313      	orrs	r3, r2
 8005730:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0310 	and.w	r3, r3, #16
 800573a:	2b00      	cmp	r3, #0
 800573c:	d010      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800573e:	4b99      	ldr	r3, [pc, #612]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005744:	4a97      	ldr	r2, [pc, #604]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800574a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800574e:	4b95      	ldr	r3, [pc, #596]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005750:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	4992      	ldr	r1, [pc, #584]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800576c:	4b8d      	ldr	r3, [pc, #564]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005772:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577a:	498a      	ldr	r1, [pc, #552]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800578e:	4b85      	ldr	r3, [pc, #532]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005794:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579c:	4981      	ldr	r1, [pc, #516]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057b0:	4b7c      	ldr	r3, [pc, #496]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057be:	4979      	ldr	r1, [pc, #484]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057d2:	4b74      	ldr	r3, [pc, #464]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d8:	f023 0203 	bic.w	r2, r3, #3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e0:	4970      	ldr	r1, [pc, #448]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057f4:	4b6b      	ldr	r3, [pc, #428]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fa:	f023 020c 	bic.w	r2, r3, #12
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	4968      	ldr	r1, [pc, #416]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005816:	4b63      	ldr	r3, [pc, #396]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005824:	495f      	ldr	r1, [pc, #380]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005838:	4b5a      	ldr	r3, [pc, #360]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005846:	4957      	ldr	r1, [pc, #348]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800585a:	4b52      	ldr	r3, [pc, #328]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005868:	494e      	ldr	r1, [pc, #312]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800587c:	4b49      	ldr	r3, [pc, #292]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005882:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588a:	4946      	ldr	r1, [pc, #280]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800589e:	4b41      	ldr	r3, [pc, #260]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ac:	493d      	ldr	r1, [pc, #244]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80058c0:	4b38      	ldr	r3, [pc, #224]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ce:	4935      	ldr	r1, [pc, #212]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d011      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80058e2:	4b30      	ldr	r3, [pc, #192]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f0:	492c      	ldr	r1, [pc, #176]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005900:	d101      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8005902:	2301      	movs	r3, #1
 8005904:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005912:	4b24      	ldr	r3, [pc, #144]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005918:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005920:	4920      	ldr	r1, [pc, #128]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005934:	4b1b      	ldr	r3, [pc, #108]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005942:	4918      	ldr	r1, [pc, #96]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005956:	4b13      	ldr	r3, [pc, #76]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005964:	490f      	ldr	r1, [pc, #60]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d005      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800597a:	f040 809c 	bne.w	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800597e:	4b09      	ldr	r3, [pc, #36]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a08      	ldr	r2, [pc, #32]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005984:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800598a:	f7fd ff15 	bl	80037b8 <HAL_GetTick>
 800598e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005990:	e00a      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005992:	f7fd ff11 	bl	80037b8 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b64      	cmp	r3, #100	; 0x64
 800599e:	d903      	bls.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e115      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80059a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059a8:	4b8b      	ldr	r3, [pc, #556]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1ee      	bne.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d017      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d113      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059c8:	4b83      	ldr	r3, [pc, #524]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80059ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ce:	0e1b      	lsrs	r3, r3, #24
 80059d0:	f003 030f 	and.w	r3, r3, #15
 80059d4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	019a      	lsls	r2, r3, #6
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	061b      	lsls	r3, r3, #24
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	071b      	lsls	r3, r3, #28
 80059e8:	497b      	ldr	r1, [pc, #492]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d004      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a04:	d00a      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d024      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a1a:	d11f      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a1c:	4b6e      	ldr	r3, [pc, #440]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a22:	0f1b      	lsrs	r3, r3, #28
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	019a      	lsls	r2, r3, #6
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	061b      	lsls	r3, r3, #24
 8005a36:	431a      	orrs	r2, r3
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	071b      	lsls	r3, r3, #28
 8005a3c:	4966      	ldr	r1, [pc, #408]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a44:	4b64      	ldr	r3, [pc, #400]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a4a:	f023 021f 	bic.w	r2, r3, #31
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	4960      	ldr	r1, [pc, #384]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00d      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	019a      	lsls	r2, r3, #6
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	061b      	lsls	r3, r3, #24
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	071b      	lsls	r3, r3, #28
 8005a7c:	4956      	ldr	r1, [pc, #344]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a84:	4b54      	ldr	r3, [pc, #336]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a53      	ldr	r2, [pc, #332]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a90:	f7fd fe92 	bl	80037b8 <HAL_GetTick>
 8005a94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a96:	e008      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a98:	f7fd fe8e 	bl	80037b8 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b64      	cmp	r3, #100	; 0x64
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e092      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005aaa:	4b4b      	ldr	r3, [pc, #300]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0f0      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	f040 8088 	bne.w	8005bce <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005abe:	4b46      	ldr	r3, [pc, #280]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a45      	ldr	r2, [pc, #276]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aca:	f7fd fe75 	bl	80037b8 <HAL_GetTick>
 8005ace:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ad0:	e008      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ad2:	f7fd fe71 	bl	80037b8 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b64      	cmp	r3, #100	; 0x64
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e075      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ae4:	4b3c      	ldr	r3, [pc, #240]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005af0:	d0ef      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d009      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d024      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d120      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b1a:	4b2f      	ldr	r3, [pc, #188]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b20:	0c1b      	lsrs	r3, r3, #16
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	019a      	lsls	r2, r3, #6
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	041b      	lsls	r3, r3, #16
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	061b      	lsls	r3, r3, #24
 8005b3a:	4927      	ldr	r1, [pc, #156]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b42:	4b25      	ldr	r3, [pc, #148]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	3b01      	subs	r3, #1
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	4920      	ldr	r1, [pc, #128]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d018      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b70:	d113      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b72:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b78:	0e1b      	lsrs	r3, r3, #24
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	019a      	lsls	r2, r3, #6
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	041b      	lsls	r3, r3, #16
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	061b      	lsls	r3, r3, #24
 8005b92:	4911      	ldr	r1, [pc, #68]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b9a:	4b0f      	ldr	r3, [pc, #60]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a0e      	ldr	r2, [pc, #56]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba6:	f7fd fe07 	bl	80037b8 <HAL_GetTick>
 8005baa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bac:	e008      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bae:	f7fd fe03 	bl	80037b8 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b64      	cmp	r3, #100	; 0x64
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e007      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bc0:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bcc:	d1ef      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3720      	adds	r7, #32
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	40023800 	.word	0x40023800

08005bdc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e01c      	b.n	8005c28 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	795b      	ldrb	r3, [r3, #5]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d105      	bne.n	8005c04 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7fd f93a 	bl	8002e78 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0204 	orr.w	r2, r2, #4
 8005c18:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e084      	b.n	8005d4c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d106      	bne.n	8005c62 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7fd f92b 	bl	8002eb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2202      	movs	r2, #2
 8005c66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c78:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c82:	d902      	bls.n	8005c8a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c84:	2300      	movs	r3, #0
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	e002      	b.n	8005c90 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c8e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c98:	d007      	beq.n	8005caa <HAL_SPI_Init+0x7a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ca2:	d002      	beq.n	8005caa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10b      	bne.n	8005cca <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cba:	d903      	bls.n	8005cc4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8005cc2:	e002      	b.n	8005cca <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	ea42 0103 	orr.w	r1, r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	0c1b      	lsrs	r3, r3, #16
 8005d0a:	f003 0204 	and.w	r2, r3, #4
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	ea42 0103 	orr.w	r1, r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	69da      	ldr	r2, [r3, #28]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
inline void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	099b      	lsrs	r3, r3, #6
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10f      	bne.n	8005d98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	099b      	lsrs	r3, r3, #6
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d004      	beq.n	8005d98 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	4798      	blx	r3
    return;
 8005d96:	e0d8      	b.n	8005f4a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	085b      	lsrs	r3, r3, #1
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <HAL_SPI_IRQHandler+0x66>
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	09db      	lsrs	r3, r3, #7
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d004      	beq.n	8005dba <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	4798      	blx	r3
    return;
 8005db8:	e0c7      	b.n	8005f4a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10c      	bne.n	8005de0 <HAL_SPI_IRQHandler+0x8c>
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	099b      	lsrs	r3, r3, #6
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <HAL_SPI_IRQHandler+0x8c>
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	0a1b      	lsrs	r3, r3, #8
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 80b5 	beq.w	8005f4a <HAL_SPI_IRQHandler+0x1f6>
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	095b      	lsrs	r3, r3, #5
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 80ae 	beq.w	8005f4a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	099b      	lsrs	r3, r3, #6
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d023      	beq.n	8005e42 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d011      	beq.n	8005e2a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e0a:	f043 0204 	orr.w	r2, r3, #4
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	617b      	str	r3, [r7, #20]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	e00b      	b.n	8005e42 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	693b      	ldr	r3, [r7, #16]
        return;
 8005e40:	e083      	b.n	8005f4a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	095b      	lsrs	r3, r3, #5
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d014      	beq.n	8005e78 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e52:	f043 0201 	orr.w	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	0a1b      	lsrs	r3, r3, #8
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00c      	beq.n	8005e9e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e88:	f043 0208 	orr.w	r2, r3, #8
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e90:	2300      	movs	r3, #0
 8005e92:	60bb      	str	r3, [r7, #8]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	60bb      	str	r3, [r7, #8]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d050      	beq.n	8005f48 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005eb4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d104      	bne.n	8005ed2 <HAL_SPI_IRQHandler+0x17e>
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d034      	beq.n	8005f3c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0203 	bic.w	r2, r2, #3
 8005ee0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d011      	beq.n	8005f0e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eee:	4a18      	ldr	r2, [pc, #96]	; (8005f50 <HAL_SPI_IRQHandler+0x1fc>)
 8005ef0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fe f9fc 	bl	80042f4 <HAL_DMA_Abort_IT>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d005      	beq.n	8005f0e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d016      	beq.n	8005f44 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1a:	4a0d      	ldr	r2, [pc, #52]	; (8005f50 <HAL_SPI_IRQHandler+0x1fc>)
 8005f1c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe f9e6 	bl	80042f4 <HAL_DMA_Abort_IT>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005f3a:	e003      	b.n	8005f44 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f809 	bl	8005f54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f42:	e000      	b.n	8005f46 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005f44:	bf00      	nop
    return;
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
  }
}
 8005f4a:	3720      	adds	r7, #32
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	08005f69 	.word	0x08005f69

08005f54 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f7ff ffe5 	bl	8005f54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f8a:	bf00      	nop
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b082      	sub	sp, #8
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e01d      	b.n	8005fe0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d106      	bne.n	8005fbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7fd f861 	bl	8003080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	f000 fbe7 	bl	80067a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	4b0e      	ldr	r3, [pc, #56]	; (8006038 <HAL_TIM_Base_Start+0x50>)
 8006000:	4013      	ands	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b06      	cmp	r3, #6
 8006008:	d00b      	beq.n	8006022 <HAL_TIM_Base_Start+0x3a>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006010:	d007      	beq.n	8006022 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f042 0201 	orr.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	00010007 	.word	0x00010007

0800603c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0201 	orr.w	r2, r2, #1
 8006052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	4b0c      	ldr	r3, [pc, #48]	; (800608c <HAL_TIM_Base_Start_IT+0x50>)
 800605c:	4013      	ands	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b06      	cmp	r3, #6
 8006064:	d00b      	beq.n	800607e <HAL_TIM_Base_Start_IT+0x42>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800606c:	d007      	beq.n	800607e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0201 	orr.w	r2, r2, #1
 800607c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	00010007 	.word	0x00010007

08006090 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e01d      	b.n	80060de <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fc ffae 	bl	8003018 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3304      	adds	r3, #4
 80060cc:	4619      	mov	r1, r3
 80060ce:	4610      	mov	r0, r2
 80060d0:	f000 fb68 	bl	80067a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e02d      	b.n	8006156 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d106      	bne.n	8006114 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f825 	bl	800615e <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	3304      	adds	r3, #4
 8006124:	4619      	mov	r1, r3
 8006126:	4610      	mov	r0, r2
 8006128:	f000 fb3c 	bl	80067a4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0208 	bic.w	r2, r2, #8
 800613a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6819      	ldr	r1, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800615e:	b480      	push	{r7}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
inline void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b082      	sub	sp, #8
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b02      	cmp	r3, #2
 8006186:	d122      	bne.n	80061ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b02      	cmp	r3, #2
 8006194:	d11b      	bne.n	80061ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f06f 0202 	mvn.w	r2, #2
 800619e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	f003 0303 	and.w	r3, r3, #3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fad7 	bl	8006768 <HAL_TIM_IC_CaptureCallback>
 80061ba:	e005      	b.n	80061c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fac9 	bl	8006754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fada 	bl	800677c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d122      	bne.n	8006222 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f003 0304 	and.w	r3, r3, #4
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d11b      	bne.n	8006222 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f06f 0204 	mvn.w	r2, #4
 80061f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 faad 	bl	8006768 <HAL_TIM_IC_CaptureCallback>
 800620e:	e005      	b.n	800621c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fa9f 	bl	8006754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fab0 	bl	800677c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b08      	cmp	r3, #8
 800622e:	d122      	bne.n	8006276 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b08      	cmp	r3, #8
 800623c:	d11b      	bne.n	8006276 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f06f 0208 	mvn.w	r2, #8
 8006246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2204      	movs	r2, #4
 800624c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	f003 0303 	and.w	r3, r3, #3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fa83 	bl	8006768 <HAL_TIM_IC_CaptureCallback>
 8006262:	e005      	b.n	8006270 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fa75 	bl	8006754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fa86 	bl	800677c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	f003 0310 	and.w	r3, r3, #16
 8006280:	2b10      	cmp	r3, #16
 8006282:	d122      	bne.n	80062ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f003 0310 	and.w	r3, r3, #16
 800628e:	2b10      	cmp	r3, #16
 8006290:	d11b      	bne.n	80062ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f06f 0210 	mvn.w	r2, #16
 800629a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2208      	movs	r2, #8
 80062a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fa59 	bl	8006768 <HAL_TIM_IC_CaptureCallback>
 80062b6:	e005      	b.n	80062c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fa4b 	bl	8006754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fa5c 	bl	800677c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d10e      	bne.n	80062f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d107      	bne.n	80062f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f06f 0201 	mvn.w	r2, #1
 80062ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7fb fea9 	bl	8002048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006300:	2b80      	cmp	r3, #128	; 0x80
 8006302:	d10e      	bne.n	8006322 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630e:	2b80      	cmp	r3, #128	; 0x80
 8006310:	d107      	bne.n	8006322 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800631a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 ff1f 	bl	8007160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006330:	d10e      	bne.n	8006350 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633c:	2b80      	cmp	r3, #128	; 0x80
 800633e:	d107      	bne.n	8006350 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 ff12 	bl	8007174 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635a:	2b40      	cmp	r3, #64	; 0x40
 800635c:	d10e      	bne.n	800637c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b40      	cmp	r3, #64	; 0x40
 800636a:	d107      	bne.n	800637c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fa0a 	bl	8006790 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	2b20      	cmp	r3, #32
 8006388:	d10e      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f003 0320 	and.w	r3, r3, #32
 8006394:	2b20      	cmp	r3, #32
 8006396:	d107      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f06f 0220 	mvn.w	r2, #32
 80063a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fed2 	bl	800714c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063a8:	bf00      	nop
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80063c6:	2302      	movs	r3, #2
 80063c8:	e105      	b.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x226>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2202      	movs	r2, #2
 80063d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b14      	cmp	r3, #20
 80063de:	f200 80f0 	bhi.w	80065c2 <HAL_TIM_PWM_ConfigChannel+0x212>
 80063e2:	a201      	add	r2, pc, #4	; (adr r2, 80063e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	0800643d 	.word	0x0800643d
 80063ec:	080065c3 	.word	0x080065c3
 80063f0:	080065c3 	.word	0x080065c3
 80063f4:	080065c3 	.word	0x080065c3
 80063f8:	0800647d 	.word	0x0800647d
 80063fc:	080065c3 	.word	0x080065c3
 8006400:	080065c3 	.word	0x080065c3
 8006404:	080065c3 	.word	0x080065c3
 8006408:	080064bf 	.word	0x080064bf
 800640c:	080065c3 	.word	0x080065c3
 8006410:	080065c3 	.word	0x080065c3
 8006414:	080065c3 	.word	0x080065c3
 8006418:	080064ff 	.word	0x080064ff
 800641c:	080065c3 	.word	0x080065c3
 8006420:	080065c3 	.word	0x080065c3
 8006424:	080065c3 	.word	0x080065c3
 8006428:	08006541 	.word	0x08006541
 800642c:	080065c3 	.word	0x080065c3
 8006430:	080065c3 	.word	0x080065c3
 8006434:	080065c3 	.word	0x080065c3
 8006438:	08006581 	.word	0x08006581
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68b9      	ldr	r1, [r7, #8]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fa4e 	bl	80068e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0208 	orr.w	r2, r2, #8
 8006456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699a      	ldr	r2, [r3, #24]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0204 	bic.w	r2, r2, #4
 8006466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6999      	ldr	r1, [r3, #24]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	691a      	ldr	r2, [r3, #16]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	619a      	str	r2, [r3, #24]
      break;
 800647a:	e0a3      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68b9      	ldr	r1, [r7, #8]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 faa0 	bl	80069c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6999      	ldr	r1, [r3, #24]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	021a      	lsls	r2, r3, #8
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	619a      	str	r2, [r3, #24]
      break;
 80064bc:	e082      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 faf7 	bl	8006ab8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69da      	ldr	r2, [r3, #28]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f042 0208 	orr.w	r2, r2, #8
 80064d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69da      	ldr	r2, [r3, #28]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0204 	bic.w	r2, r2, #4
 80064e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69d9      	ldr	r1, [r3, #28]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	691a      	ldr	r2, [r3, #16]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	61da      	str	r2, [r3, #28]
      break;
 80064fc:	e062      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fb4d 	bl	8006ba4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69da      	ldr	r2, [r3, #28]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69da      	ldr	r2, [r3, #28]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	69d9      	ldr	r1, [r3, #28]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	021a      	lsls	r2, r3, #8
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	61da      	str	r2, [r3, #28]
      break;
 800653e:	e041      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68b9      	ldr	r1, [r7, #8]
 8006546:	4618      	mov	r0, r3
 8006548:	f000 fb84 	bl	8006c54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0208 	orr.w	r2, r2, #8
 800655a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 0204 	bic.w	r2, r2, #4
 800656a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	691a      	ldr	r2, [r3, #16]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800657e:	e021      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68b9      	ldr	r1, [r7, #8]
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fbb6 	bl	8006cf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800659a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	021a      	lsls	r2, r3, #8
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065c0:	e000      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80065c2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop

080065e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_TIM_ConfigClockSource+0x18>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e0a6      	b.n	8006746 <HAL_TIM_ConfigClockSource+0x166>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4b4f      	ldr	r3, [pc, #316]	; (8006750 <HAL_TIM_ConfigClockSource+0x170>)
 8006614:	4013      	ands	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800661e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b40      	cmp	r3, #64	; 0x40
 800662e:	d067      	beq.n	8006700 <HAL_TIM_ConfigClockSource+0x120>
 8006630:	2b40      	cmp	r3, #64	; 0x40
 8006632:	d80b      	bhi.n	800664c <HAL_TIM_ConfigClockSource+0x6c>
 8006634:	2b10      	cmp	r3, #16
 8006636:	d073      	beq.n	8006720 <HAL_TIM_ConfigClockSource+0x140>
 8006638:	2b10      	cmp	r3, #16
 800663a:	d802      	bhi.n	8006642 <HAL_TIM_ConfigClockSource+0x62>
 800663c:	2b00      	cmp	r3, #0
 800663e:	d06f      	beq.n	8006720 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006640:	e078      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006642:	2b20      	cmp	r3, #32
 8006644:	d06c      	beq.n	8006720 <HAL_TIM_ConfigClockSource+0x140>
 8006646:	2b30      	cmp	r3, #48	; 0x30
 8006648:	d06a      	beq.n	8006720 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800664a:	e073      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800664c:	2b70      	cmp	r3, #112	; 0x70
 800664e:	d00d      	beq.n	800666c <HAL_TIM_ConfigClockSource+0x8c>
 8006650:	2b70      	cmp	r3, #112	; 0x70
 8006652:	d804      	bhi.n	800665e <HAL_TIM_ConfigClockSource+0x7e>
 8006654:	2b50      	cmp	r3, #80	; 0x50
 8006656:	d033      	beq.n	80066c0 <HAL_TIM_ConfigClockSource+0xe0>
 8006658:	2b60      	cmp	r3, #96	; 0x60
 800665a:	d041      	beq.n	80066e0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800665c:	e06a      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800665e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006662:	d066      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x152>
 8006664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006668:	d017      	beq.n	800669a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800666a:	e063      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6818      	ldr	r0, [r3, #0]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	6899      	ldr	r1, [r3, #8]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f000 fc0a 	bl	8006e94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800668e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	609a      	str	r2, [r3, #8]
      break;
 8006698:	e04c      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	6899      	ldr	r1, [r3, #8]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f000 fbf3 	bl	8006e94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066bc:	609a      	str	r2, [r3, #8]
      break;
 80066be:	e039      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	6859      	ldr	r1, [r3, #4]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	461a      	mov	r2, r3
 80066ce:	f000 fb67 	bl	8006da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2150      	movs	r1, #80	; 0x50
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fbc0 	bl	8006e5e <TIM_ITRx_SetConfig>
      break;
 80066de:	e029      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6818      	ldr	r0, [r3, #0]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	6859      	ldr	r1, [r3, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	461a      	mov	r2, r3
 80066ee:	f000 fb86 	bl	8006dfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2160      	movs	r1, #96	; 0x60
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fbb0 	bl	8006e5e <TIM_ITRx_SetConfig>
      break;
 80066fe:	e019      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	6859      	ldr	r1, [r3, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	461a      	mov	r2, r3
 800670e:	f000 fb47 	bl	8006da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2140      	movs	r1, #64	; 0x40
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fba0 	bl	8006e5e <TIM_ITRx_SetConfig>
      break;
 800671e:	e009      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4619      	mov	r1, r3
 800672a:	4610      	mov	r0, r2
 800672c:	f000 fb97 	bl	8006e5e <TIM_ITRx_SetConfig>
      break;
 8006730:	e000      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	fffeff88 	.word	0xfffeff88

08006754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a40      	ldr	r2, [pc, #256]	; (80068b8 <TIM_Base_SetConfig+0x114>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d013      	beq.n	80067e4 <TIM_Base_SetConfig+0x40>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c2:	d00f      	beq.n	80067e4 <TIM_Base_SetConfig+0x40>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a3d      	ldr	r2, [pc, #244]	; (80068bc <TIM_Base_SetConfig+0x118>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d00b      	beq.n	80067e4 <TIM_Base_SetConfig+0x40>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a3c      	ldr	r2, [pc, #240]	; (80068c0 <TIM_Base_SetConfig+0x11c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d007      	beq.n	80067e4 <TIM_Base_SetConfig+0x40>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a3b      	ldr	r2, [pc, #236]	; (80068c4 <TIM_Base_SetConfig+0x120>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d003      	beq.n	80067e4 <TIM_Base_SetConfig+0x40>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a3a      	ldr	r2, [pc, #232]	; (80068c8 <TIM_Base_SetConfig+0x124>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d108      	bne.n	80067f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a2f      	ldr	r2, [pc, #188]	; (80068b8 <TIM_Base_SetConfig+0x114>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d02b      	beq.n	8006856 <TIM_Base_SetConfig+0xb2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006804:	d027      	beq.n	8006856 <TIM_Base_SetConfig+0xb2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a2c      	ldr	r2, [pc, #176]	; (80068bc <TIM_Base_SetConfig+0x118>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d023      	beq.n	8006856 <TIM_Base_SetConfig+0xb2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a2b      	ldr	r2, [pc, #172]	; (80068c0 <TIM_Base_SetConfig+0x11c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d01f      	beq.n	8006856 <TIM_Base_SetConfig+0xb2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a2a      	ldr	r2, [pc, #168]	; (80068c4 <TIM_Base_SetConfig+0x120>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d01b      	beq.n	8006856 <TIM_Base_SetConfig+0xb2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a29      	ldr	r2, [pc, #164]	; (80068c8 <TIM_Base_SetConfig+0x124>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d017      	beq.n	8006856 <TIM_Base_SetConfig+0xb2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a28      	ldr	r2, [pc, #160]	; (80068cc <TIM_Base_SetConfig+0x128>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d013      	beq.n	8006856 <TIM_Base_SetConfig+0xb2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a27      	ldr	r2, [pc, #156]	; (80068d0 <TIM_Base_SetConfig+0x12c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00f      	beq.n	8006856 <TIM_Base_SetConfig+0xb2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a26      	ldr	r2, [pc, #152]	; (80068d4 <TIM_Base_SetConfig+0x130>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d00b      	beq.n	8006856 <TIM_Base_SetConfig+0xb2>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a25      	ldr	r2, [pc, #148]	; (80068d8 <TIM_Base_SetConfig+0x134>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d007      	beq.n	8006856 <TIM_Base_SetConfig+0xb2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a24      	ldr	r2, [pc, #144]	; (80068dc <TIM_Base_SetConfig+0x138>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d003      	beq.n	8006856 <TIM_Base_SetConfig+0xb2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a23      	ldr	r2, [pc, #140]	; (80068e0 <TIM_Base_SetConfig+0x13c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d108      	bne.n	8006868 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800685c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a0a      	ldr	r2, [pc, #40]	; (80068b8 <TIM_Base_SetConfig+0x114>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d003      	beq.n	800689c <TIM_Base_SetConfig+0xf8>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a0c      	ldr	r2, [pc, #48]	; (80068c8 <TIM_Base_SetConfig+0x124>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d103      	bne.n	80068a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	615a      	str	r2, [r3, #20]
}
 80068aa:	bf00      	nop
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40010000 	.word	0x40010000
 80068bc:	40000400 	.word	0x40000400
 80068c0:	40000800 	.word	0x40000800
 80068c4:	40000c00 	.word	0x40000c00
 80068c8:	40010400 	.word	0x40010400
 80068cc:	40014000 	.word	0x40014000
 80068d0:	40014400 	.word	0x40014400
 80068d4:	40014800 	.word	0x40014800
 80068d8:	40001800 	.word	0x40001800
 80068dc:	40001c00 	.word	0x40001c00
 80068e0:	40002000 	.word	0x40002000

080068e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	f023 0201 	bic.w	r2, r3, #1
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	4b2b      	ldr	r3, [pc, #172]	; (80069bc <TIM_OC1_SetConfig+0xd8>)
 8006910:	4013      	ands	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0303 	bic.w	r3, r3, #3
 800691a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f023 0302 	bic.w	r3, r3, #2
 800692c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	4313      	orrs	r3, r2
 8006936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a21      	ldr	r2, [pc, #132]	; (80069c0 <TIM_OC1_SetConfig+0xdc>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d003      	beq.n	8006948 <TIM_OC1_SetConfig+0x64>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a20      	ldr	r2, [pc, #128]	; (80069c4 <TIM_OC1_SetConfig+0xe0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d10c      	bne.n	8006962 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f023 0308 	bic.w	r3, r3, #8
 800694e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f023 0304 	bic.w	r3, r3, #4
 8006960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a16      	ldr	r2, [pc, #88]	; (80069c0 <TIM_OC1_SetConfig+0xdc>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d003      	beq.n	8006972 <TIM_OC1_SetConfig+0x8e>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a15      	ldr	r2, [pc, #84]	; (80069c4 <TIM_OC1_SetConfig+0xe0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d111      	bne.n	8006996 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	4313      	orrs	r3, r2
 8006994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	621a      	str	r2, [r3, #32]
}
 80069b0:	bf00      	nop
 80069b2:	371c      	adds	r7, #28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	fffeff8f 	.word	0xfffeff8f
 80069c0:	40010000 	.word	0x40010000
 80069c4:	40010400 	.word	0x40010400

080069c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	f023 0210 	bic.w	r2, r3, #16
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4b2e      	ldr	r3, [pc, #184]	; (8006aac <TIM_OC2_SetConfig+0xe4>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	021b      	lsls	r3, r3, #8
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f023 0320 	bic.w	r3, r3, #32
 8006a12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a23      	ldr	r2, [pc, #140]	; (8006ab0 <TIM_OC2_SetConfig+0xe8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_OC2_SetConfig+0x68>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a22      	ldr	r2, [pc, #136]	; (8006ab4 <TIM_OC2_SetConfig+0xec>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d10d      	bne.n	8006a4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	011b      	lsls	r3, r3, #4
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a18      	ldr	r2, [pc, #96]	; (8006ab0 <TIM_OC2_SetConfig+0xe8>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d003      	beq.n	8006a5c <TIM_OC2_SetConfig+0x94>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a17      	ldr	r2, [pc, #92]	; (8006ab4 <TIM_OC2_SetConfig+0xec>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d113      	bne.n	8006a84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	621a      	str	r2, [r3, #32]
}
 8006a9e:	bf00      	nop
 8006aa0:	371c      	adds	r7, #28
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	feff8fff 	.word	0xfeff8fff
 8006ab0:	40010000 	.word	0x40010000
 8006ab4:	40010400 	.word	0x40010400

08006ab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	4b2d      	ldr	r3, [pc, #180]	; (8006b98 <TIM_OC3_SetConfig+0xe0>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	021b      	lsls	r3, r3, #8
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a22      	ldr	r2, [pc, #136]	; (8006b9c <TIM_OC3_SetConfig+0xe4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d003      	beq.n	8006b1e <TIM_OC3_SetConfig+0x66>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a21      	ldr	r2, [pc, #132]	; (8006ba0 <TIM_OC3_SetConfig+0xe8>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d10d      	bne.n	8006b3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	021b      	lsls	r3, r3, #8
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a17      	ldr	r2, [pc, #92]	; (8006b9c <TIM_OC3_SetConfig+0xe4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d003      	beq.n	8006b4a <TIM_OC3_SetConfig+0x92>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a16      	ldr	r2, [pc, #88]	; (8006ba0 <TIM_OC3_SetConfig+0xe8>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d113      	bne.n	8006b72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	011b      	lsls	r3, r3, #4
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	621a      	str	r2, [r3, #32]
}
 8006b8c:	bf00      	nop
 8006b8e:	371c      	adds	r7, #28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	fffeff8f 	.word	0xfffeff8f
 8006b9c:	40010000 	.word	0x40010000
 8006ba0:	40010400 	.word	0x40010400

08006ba4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4b1e      	ldr	r3, [pc, #120]	; (8006c48 <TIM_OC4_SetConfig+0xa4>)
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	021b      	lsls	r3, r3, #8
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	031b      	lsls	r3, r3, #12
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a13      	ldr	r2, [pc, #76]	; (8006c4c <TIM_OC4_SetConfig+0xa8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d003      	beq.n	8006c0c <TIM_OC4_SetConfig+0x68>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a12      	ldr	r2, [pc, #72]	; (8006c50 <TIM_OC4_SetConfig+0xac>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d109      	bne.n	8006c20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	019b      	lsls	r3, r3, #6
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	621a      	str	r2, [r3, #32]
}
 8006c3a:	bf00      	nop
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	feff8fff 	.word	0xfeff8fff
 8006c4c:	40010000 	.word	0x40010000
 8006c50:	40010400 	.word	0x40010400

08006c54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4b1b      	ldr	r3, [pc, #108]	; (8006cec <TIM_OC5_SetConfig+0x98>)
 8006c80:	4013      	ands	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	041b      	lsls	r3, r3, #16
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a12      	ldr	r2, [pc, #72]	; (8006cf0 <TIM_OC5_SetConfig+0x9c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d003      	beq.n	8006cb2 <TIM_OC5_SetConfig+0x5e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a11      	ldr	r2, [pc, #68]	; (8006cf4 <TIM_OC5_SetConfig+0xa0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d109      	bne.n	8006cc6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	021b      	lsls	r3, r3, #8
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	621a      	str	r2, [r3, #32]
}
 8006ce0:	bf00      	nop
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	fffeff8f 	.word	0xfffeff8f
 8006cf0:	40010000 	.word	0x40010000
 8006cf4:	40010400 	.word	0x40010400

08006cf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	4b1c      	ldr	r3, [pc, #112]	; (8006d94 <TIM_OC6_SetConfig+0x9c>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	051b      	lsls	r3, r3, #20
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a13      	ldr	r2, [pc, #76]	; (8006d98 <TIM_OC6_SetConfig+0xa0>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d003      	beq.n	8006d58 <TIM_OC6_SetConfig+0x60>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a12      	ldr	r2, [pc, #72]	; (8006d9c <TIM_OC6_SetConfig+0xa4>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d109      	bne.n	8006d6c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	029b      	lsls	r3, r3, #10
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	621a      	str	r2, [r3, #32]
}
 8006d86:	bf00      	nop
 8006d88:	371c      	adds	r7, #28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	feff8fff 	.word	0xfeff8fff
 8006d98:	40010000 	.word	0x40010000
 8006d9c:	40010400 	.word	0x40010400

08006da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	f023 0201 	bic.w	r2, r3, #1
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f023 030a 	bic.w	r3, r3, #10
 8006ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	621a      	str	r2, [r3, #32]
}
 8006df2:	bf00      	nop
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b087      	sub	sp, #28
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f023 0210 	bic.w	r2, r3, #16
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	031b      	lsls	r3, r3, #12
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	621a      	str	r2, [r3, #32]
}
 8006e52:	bf00      	nop
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b085      	sub	sp, #20
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	f043 0307 	orr.w	r3, r3, #7
 8006e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	609a      	str	r2, [r3, #8]
}
 8006e88:	bf00      	nop
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	021a      	lsls	r2, r3, #8
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	609a      	str	r2, [r3, #8]
}
 8006ec8:	bf00      	nop
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2204      	movs	r2, #4
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 f94e 	bl	8007188 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006efa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689a      	ldr	r2, [r3, #8]
 8006f02:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <HAL_TIMEx_PWMN_Start+0x5c>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b06      	cmp	r3, #6
 8006f0c:	d00b      	beq.n	8006f26 <HAL_TIMEx_PWMN_Start+0x52>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f14:	d007      	beq.n	8006f26 <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f042 0201 	orr.w	r2, r2, #1
 8006f24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	00010007 	.word	0x00010007

08006f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d101      	bne.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e06d      	b.n	8007028 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a30      	ldr	r2, [pc, #192]	; (8007034 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d004      	beq.n	8006f80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a2f      	ldr	r2, [pc, #188]	; (8007038 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d108      	bne.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a20      	ldr	r2, [pc, #128]	; (8007034 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d022      	beq.n	8006ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fbe:	d01d      	beq.n	8006ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a1d      	ldr	r2, [pc, #116]	; (800703c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d018      	beq.n	8006ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a1c      	ldr	r2, [pc, #112]	; (8007040 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d013      	beq.n	8006ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a1a      	ldr	r2, [pc, #104]	; (8007044 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00e      	beq.n	8006ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a15      	ldr	r2, [pc, #84]	; (8007038 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d009      	beq.n	8006ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a16      	ldr	r2, [pc, #88]	; (8007048 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d004      	beq.n	8006ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a15      	ldr	r2, [pc, #84]	; (800704c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d10c      	bne.n	8007016 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007002:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	4313      	orrs	r3, r2
 800700c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	40010000 	.word	0x40010000
 8007038:	40010400 	.word	0x40010400
 800703c:	40000400 	.word	0x40000400
 8007040:	40000800 	.word	0x40000800
 8007044:	40000c00 	.word	0x40000c00
 8007048:	40014000 	.word	0x40014000
 800704c:	40001800 	.word	0x40001800

08007050 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007064:	2b01      	cmp	r3, #1
 8007066:	d101      	bne.n	800706c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007068:	2302      	movs	r3, #2
 800706a:	e065      	b.n	8007138 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	4313      	orrs	r3, r2
 800708e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	041b      	lsls	r3, r3, #16
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a16      	ldr	r2, [pc, #88]	; (8007144 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d004      	beq.n	80070fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a14      	ldr	r2, [pc, #80]	; (8007148 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d115      	bne.n	8007126 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	051b      	lsls	r3, r3, #20
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	4313      	orrs	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	40010000 	.word	0x40010000
 8007148:	40010400 	.word	0x40010400

0800714c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f003 031f 	and.w	r3, r3, #31
 800719a:	2204      	movs	r2, #4
 800719c:	fa02 f303 	lsl.w	r3, r2, r3
 80071a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a1a      	ldr	r2, [r3, #32]
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	43db      	mvns	r3, r3
 80071aa:	401a      	ands	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6a1a      	ldr	r2, [r3, #32]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f003 031f 	and.w	r3, r3, #31
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	fa01 f303 	lsl.w	r3, r1, r3
 80071c0:	431a      	orrs	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	621a      	str	r2, [r3, #32]
}
 80071c6:	bf00      	nop
 80071c8:	371c      	adds	r7, #28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b082      	sub	sp, #8
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e040      	b.n	8007266 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d106      	bne.n	80071fa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7fc f815 	bl	8003224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2224      	movs	r2, #36	; 0x24
 80071fe:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 0201 	bic.w	r2, r2, #1
 800720e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fa0b 	bl	800762c <UART_SetConfig>
 8007216:	4603      	mov	r3, r0
 8007218:	2b01      	cmp	r3, #1
 800721a:	d101      	bne.n	8007220 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e022      	b.n	8007266 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fca9 	bl	8007b80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800723c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800724c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f042 0201 	orr.w	r2, r2, #1
 800725c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fd30 	bl	8007cc4 <UART_CheckIdleState>
 8007264:	4603      	mov	r3, r0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	4613      	mov	r3, r2
 800727c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007282:	2b20      	cmp	r3, #32
 8007284:	d16c      	bne.n	8007360 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d002      	beq.n	8007292 <HAL_UART_Receive_DMA+0x22>
 800728c:	88fb      	ldrh	r3, [r7, #6]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e065      	b.n	8007362 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_UART_Receive_DMA+0x34>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e05e      	b.n	8007362 <HAL_UART_Receive_DMA+0xf2>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	88fa      	ldrh	r2, [r7, #6]
 80072b6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2222      	movs	r2, #34	; 0x22
 80072c4:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d02a      	beq.n	8007324 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d2:	4a26      	ldr	r2, [pc, #152]	; (800736c <HAL_UART_Receive_DMA+0xfc>)
 80072d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072da:	4a25      	ldr	r2, [pc, #148]	; (8007370 <HAL_UART_Receive_DMA+0x100>)
 80072dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072e2:	4a24      	ldr	r2, [pc, #144]	; (8007374 <HAL_UART_Receive_DMA+0x104>)
 80072e4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ea:	2200      	movs	r2, #0
 80072ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3324      	adds	r3, #36	; 0x24
 80072f8:	4619      	mov	r1, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fe:	461a      	mov	r2, r3
 8007300:	88fb      	ldrh	r3, [r7, #6]
 8007302:	f7fc ff97 	bl	8004234 <HAL_DMA_Start_IT>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00b      	beq.n	8007324 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2210      	movs	r2, #16
 8007310:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2220      	movs	r2, #32
 800731e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e01e      	b.n	8007362 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800733a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689a      	ldr	r2, [r3, #8]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f042 0201 	orr.w	r2, r2, #1
 800734a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689a      	ldr	r2, [r3, #8]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800735a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	e000      	b.n	8007362 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8007360:	2302      	movs	r3, #2
  }
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	08007e83 	.word	0x08007e83
 8007370:	08007ee7 	.word	0x08007ee7
 8007374:	08007f03 	.word	0x08007f03

08007378 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
inline void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007398:	69fa      	ldr	r2, [r7, #28]
 800739a:	f640 030f 	movw	r3, #2063	; 0x80f
 800739e:	4013      	ands	r3, r2
 80073a0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d113      	bne.n	80073d0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00e      	beq.n	80073d0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	f003 0320 	and.w	r3, r3, #32
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d009      	beq.n	80073d0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 8100 	beq.w	80075c6 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	4798      	blx	r3
      }
      return;
 80073ce:	e0fa      	b.n	80075c6 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 80d5 	beq.w	8007582 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d105      	bne.n	80073ee <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 80ca 	beq.w	8007582 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00e      	beq.n	8007416 <HAL_UART_IRQHandler+0x9e>
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d009      	beq.n	8007416 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2201      	movs	r2, #1
 8007408:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800740e:	f043 0201 	orr.w	r2, r3, #1
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00e      	beq.n	800743e <HAL_UART_IRQHandler+0xc6>
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d009      	beq.n	800743e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2202      	movs	r2, #2
 8007430:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007436:	f043 0204 	orr.w	r2, r3, #4
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00e      	beq.n	8007466 <HAL_UART_IRQHandler+0xee>
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d009      	beq.n	8007466 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2204      	movs	r2, #4
 8007458:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800745e:	f043 0202 	orr.w	r2, r3, #2
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b00      	cmp	r3, #0
 800746e:	d013      	beq.n	8007498 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	f003 0320 	and.w	r3, r3, #32
 8007476:	2b00      	cmp	r3, #0
 8007478:	d104      	bne.n	8007484 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007480:	2b00      	cmp	r3, #0
 8007482:	d009      	beq.n	8007498 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2208      	movs	r2, #8
 800748a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007490:	f043 0208 	orr.w	r2, r3, #8
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00f      	beq.n	80074c2 <HAL_UART_IRQHandler+0x14a>
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ba:	f043 0220 	orr.w	r2, r3, #32
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d07f      	beq.n	80075ca <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	f003 0320 	and.w	r3, r3, #32
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00c      	beq.n	80074ee <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d007      	beq.n	80074ee <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074f2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fe:	2b40      	cmp	r3, #64	; 0x40
 8007500:	d004      	beq.n	800750c <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007508:	2b00      	cmp	r3, #0
 800750a:	d031      	beq.n	8007570 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fc98 	bl	8007e42 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751c:	2b40      	cmp	r3, #64	; 0x40
 800751e:	d123      	bne.n	8007568 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689a      	ldr	r2, [r3, #8]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800752e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007534:	2b00      	cmp	r3, #0
 8007536:	d013      	beq.n	8007560 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800753c:	4a26      	ldr	r2, [pc, #152]	; (80075d8 <HAL_UART_IRQHandler+0x260>)
 800753e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007544:	4618      	mov	r0, r3
 8007546:	f7fc fed5 	bl	80042f4 <HAL_DMA_Abort_IT>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d016      	beq.n	800757e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800755a:	4610      	mov	r0, r2
 800755c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800755e:	e00e      	b.n	800757e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f859 	bl	8007618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007566:	e00a      	b.n	800757e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f855 	bl	8007618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800756e:	e006      	b.n	800757e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f851 	bl	8007618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800757c:	e025      	b.n	80075ca <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757e:	bf00      	nop
    return;
 8007580:	e023      	b.n	80075ca <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00d      	beq.n	80075a8 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007592:	2b00      	cmp	r3, #0
 8007594:	d008      	beq.n	80075a8 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800759a:	2b00      	cmp	r3, #0
 800759c:	d017      	beq.n	80075ce <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	4798      	blx	r3
    }
    return;
 80075a6:	e012      	b.n	80075ce <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00e      	beq.n	80075d0 <HAL_UART_IRQHandler+0x258>
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d009      	beq.n	80075d0 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fcf2 	bl	8007fa6 <UART_EndTransmit_IT>
    return;
 80075c2:	bf00      	nop
 80075c4:	e004      	b.n	80075d0 <HAL_UART_IRQHandler+0x258>
      return;
 80075c6:	bf00      	nop
 80075c8:	e002      	b.n	80075d0 <HAL_UART_IRQHandler+0x258>
    return;
 80075ca:	bf00      	nop
 80075cc:	e000      	b.n	80075d0 <HAL_UART_IRQHandler+0x258>
    return;
 80075ce:	bf00      	nop
  }

}
 80075d0:	3720      	adds	r7, #32
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	08007f7b 	.word	0x08007f7b

080075dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007634:	2300      	movs	r3, #0
 8007636:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689a      	ldr	r2, [r3, #8]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	431a      	orrs	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	431a      	orrs	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	4313      	orrs	r3, r2
 8007652:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	4bb1      	ldr	r3, [pc, #708]	; (8007920 <UART_SetConfig+0x2f4>)
 800765c:	4013      	ands	r3, r2
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6812      	ldr	r2, [r2, #0]
 8007662:	6939      	ldr	r1, [r7, #16]
 8007664:	430b      	orrs	r3, r1
 8007666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	4313      	orrs	r3, r2
 800768c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	430a      	orrs	r2, r1
 80076a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a9f      	ldr	r2, [pc, #636]	; (8007924 <UART_SetConfig+0x2f8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d121      	bne.n	80076f0 <UART_SetConfig+0xc4>
 80076ac:	4b9e      	ldr	r3, [pc, #632]	; (8007928 <UART_SetConfig+0x2fc>)
 80076ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d816      	bhi.n	80076e8 <UART_SetConfig+0xbc>
 80076ba:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <UART_SetConfig+0x94>)
 80076bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c0:	080076d1 	.word	0x080076d1
 80076c4:	080076dd 	.word	0x080076dd
 80076c8:	080076d7 	.word	0x080076d7
 80076cc:	080076e3 	.word	0x080076e3
 80076d0:	2301      	movs	r3, #1
 80076d2:	77fb      	strb	r3, [r7, #31]
 80076d4:	e151      	b.n	800797a <UART_SetConfig+0x34e>
 80076d6:	2302      	movs	r3, #2
 80076d8:	77fb      	strb	r3, [r7, #31]
 80076da:	e14e      	b.n	800797a <UART_SetConfig+0x34e>
 80076dc:	2304      	movs	r3, #4
 80076de:	77fb      	strb	r3, [r7, #31]
 80076e0:	e14b      	b.n	800797a <UART_SetConfig+0x34e>
 80076e2:	2308      	movs	r3, #8
 80076e4:	77fb      	strb	r3, [r7, #31]
 80076e6:	e148      	b.n	800797a <UART_SetConfig+0x34e>
 80076e8:	2310      	movs	r3, #16
 80076ea:	77fb      	strb	r3, [r7, #31]
 80076ec:	bf00      	nop
 80076ee:	e144      	b.n	800797a <UART_SetConfig+0x34e>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a8d      	ldr	r2, [pc, #564]	; (800792c <UART_SetConfig+0x300>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d134      	bne.n	8007764 <UART_SetConfig+0x138>
 80076fa:	4b8b      	ldr	r3, [pc, #556]	; (8007928 <UART_SetConfig+0x2fc>)
 80076fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007700:	f003 030c 	and.w	r3, r3, #12
 8007704:	2b0c      	cmp	r3, #12
 8007706:	d829      	bhi.n	800775c <UART_SetConfig+0x130>
 8007708:	a201      	add	r2, pc, #4	; (adr r2, 8007710 <UART_SetConfig+0xe4>)
 800770a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770e:	bf00      	nop
 8007710:	08007745 	.word	0x08007745
 8007714:	0800775d 	.word	0x0800775d
 8007718:	0800775d 	.word	0x0800775d
 800771c:	0800775d 	.word	0x0800775d
 8007720:	08007751 	.word	0x08007751
 8007724:	0800775d 	.word	0x0800775d
 8007728:	0800775d 	.word	0x0800775d
 800772c:	0800775d 	.word	0x0800775d
 8007730:	0800774b 	.word	0x0800774b
 8007734:	0800775d 	.word	0x0800775d
 8007738:	0800775d 	.word	0x0800775d
 800773c:	0800775d 	.word	0x0800775d
 8007740:	08007757 	.word	0x08007757
 8007744:	2300      	movs	r3, #0
 8007746:	77fb      	strb	r3, [r7, #31]
 8007748:	e117      	b.n	800797a <UART_SetConfig+0x34e>
 800774a:	2302      	movs	r3, #2
 800774c:	77fb      	strb	r3, [r7, #31]
 800774e:	e114      	b.n	800797a <UART_SetConfig+0x34e>
 8007750:	2304      	movs	r3, #4
 8007752:	77fb      	strb	r3, [r7, #31]
 8007754:	e111      	b.n	800797a <UART_SetConfig+0x34e>
 8007756:	2308      	movs	r3, #8
 8007758:	77fb      	strb	r3, [r7, #31]
 800775a:	e10e      	b.n	800797a <UART_SetConfig+0x34e>
 800775c:	2310      	movs	r3, #16
 800775e:	77fb      	strb	r3, [r7, #31]
 8007760:	bf00      	nop
 8007762:	e10a      	b.n	800797a <UART_SetConfig+0x34e>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a71      	ldr	r2, [pc, #452]	; (8007930 <UART_SetConfig+0x304>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d120      	bne.n	80077b0 <UART_SetConfig+0x184>
 800776e:	4b6e      	ldr	r3, [pc, #440]	; (8007928 <UART_SetConfig+0x2fc>)
 8007770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007774:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007778:	2b10      	cmp	r3, #16
 800777a:	d00f      	beq.n	800779c <UART_SetConfig+0x170>
 800777c:	2b10      	cmp	r3, #16
 800777e:	d802      	bhi.n	8007786 <UART_SetConfig+0x15a>
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <UART_SetConfig+0x164>
 8007784:	e010      	b.n	80077a8 <UART_SetConfig+0x17c>
 8007786:	2b20      	cmp	r3, #32
 8007788:	d005      	beq.n	8007796 <UART_SetConfig+0x16a>
 800778a:	2b30      	cmp	r3, #48	; 0x30
 800778c:	d009      	beq.n	80077a2 <UART_SetConfig+0x176>
 800778e:	e00b      	b.n	80077a8 <UART_SetConfig+0x17c>
 8007790:	2300      	movs	r3, #0
 8007792:	77fb      	strb	r3, [r7, #31]
 8007794:	e0f1      	b.n	800797a <UART_SetConfig+0x34e>
 8007796:	2302      	movs	r3, #2
 8007798:	77fb      	strb	r3, [r7, #31]
 800779a:	e0ee      	b.n	800797a <UART_SetConfig+0x34e>
 800779c:	2304      	movs	r3, #4
 800779e:	77fb      	strb	r3, [r7, #31]
 80077a0:	e0eb      	b.n	800797a <UART_SetConfig+0x34e>
 80077a2:	2308      	movs	r3, #8
 80077a4:	77fb      	strb	r3, [r7, #31]
 80077a6:	e0e8      	b.n	800797a <UART_SetConfig+0x34e>
 80077a8:	2310      	movs	r3, #16
 80077aa:	77fb      	strb	r3, [r7, #31]
 80077ac:	bf00      	nop
 80077ae:	e0e4      	b.n	800797a <UART_SetConfig+0x34e>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a5f      	ldr	r2, [pc, #380]	; (8007934 <UART_SetConfig+0x308>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d120      	bne.n	80077fc <UART_SetConfig+0x1d0>
 80077ba:	4b5b      	ldr	r3, [pc, #364]	; (8007928 <UART_SetConfig+0x2fc>)
 80077bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077c4:	2b40      	cmp	r3, #64	; 0x40
 80077c6:	d00f      	beq.n	80077e8 <UART_SetConfig+0x1bc>
 80077c8:	2b40      	cmp	r3, #64	; 0x40
 80077ca:	d802      	bhi.n	80077d2 <UART_SetConfig+0x1a6>
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d005      	beq.n	80077dc <UART_SetConfig+0x1b0>
 80077d0:	e010      	b.n	80077f4 <UART_SetConfig+0x1c8>
 80077d2:	2b80      	cmp	r3, #128	; 0x80
 80077d4:	d005      	beq.n	80077e2 <UART_SetConfig+0x1b6>
 80077d6:	2bc0      	cmp	r3, #192	; 0xc0
 80077d8:	d009      	beq.n	80077ee <UART_SetConfig+0x1c2>
 80077da:	e00b      	b.n	80077f4 <UART_SetConfig+0x1c8>
 80077dc:	2300      	movs	r3, #0
 80077de:	77fb      	strb	r3, [r7, #31]
 80077e0:	e0cb      	b.n	800797a <UART_SetConfig+0x34e>
 80077e2:	2302      	movs	r3, #2
 80077e4:	77fb      	strb	r3, [r7, #31]
 80077e6:	e0c8      	b.n	800797a <UART_SetConfig+0x34e>
 80077e8:	2304      	movs	r3, #4
 80077ea:	77fb      	strb	r3, [r7, #31]
 80077ec:	e0c5      	b.n	800797a <UART_SetConfig+0x34e>
 80077ee:	2308      	movs	r3, #8
 80077f0:	77fb      	strb	r3, [r7, #31]
 80077f2:	e0c2      	b.n	800797a <UART_SetConfig+0x34e>
 80077f4:	2310      	movs	r3, #16
 80077f6:	77fb      	strb	r3, [r7, #31]
 80077f8:	bf00      	nop
 80077fa:	e0be      	b.n	800797a <UART_SetConfig+0x34e>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a4d      	ldr	r2, [pc, #308]	; (8007938 <UART_SetConfig+0x30c>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d124      	bne.n	8007850 <UART_SetConfig+0x224>
 8007806:	4b48      	ldr	r3, [pc, #288]	; (8007928 <UART_SetConfig+0x2fc>)
 8007808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800780c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007814:	d012      	beq.n	800783c <UART_SetConfig+0x210>
 8007816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800781a:	d802      	bhi.n	8007822 <UART_SetConfig+0x1f6>
 800781c:	2b00      	cmp	r3, #0
 800781e:	d007      	beq.n	8007830 <UART_SetConfig+0x204>
 8007820:	e012      	b.n	8007848 <UART_SetConfig+0x21c>
 8007822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007826:	d006      	beq.n	8007836 <UART_SetConfig+0x20a>
 8007828:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800782c:	d009      	beq.n	8007842 <UART_SetConfig+0x216>
 800782e:	e00b      	b.n	8007848 <UART_SetConfig+0x21c>
 8007830:	2300      	movs	r3, #0
 8007832:	77fb      	strb	r3, [r7, #31]
 8007834:	e0a1      	b.n	800797a <UART_SetConfig+0x34e>
 8007836:	2302      	movs	r3, #2
 8007838:	77fb      	strb	r3, [r7, #31]
 800783a:	e09e      	b.n	800797a <UART_SetConfig+0x34e>
 800783c:	2304      	movs	r3, #4
 800783e:	77fb      	strb	r3, [r7, #31]
 8007840:	e09b      	b.n	800797a <UART_SetConfig+0x34e>
 8007842:	2308      	movs	r3, #8
 8007844:	77fb      	strb	r3, [r7, #31]
 8007846:	e098      	b.n	800797a <UART_SetConfig+0x34e>
 8007848:	2310      	movs	r3, #16
 800784a:	77fb      	strb	r3, [r7, #31]
 800784c:	bf00      	nop
 800784e:	e094      	b.n	800797a <UART_SetConfig+0x34e>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a39      	ldr	r2, [pc, #228]	; (800793c <UART_SetConfig+0x310>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d124      	bne.n	80078a4 <UART_SetConfig+0x278>
 800785a:	4b33      	ldr	r3, [pc, #204]	; (8007928 <UART_SetConfig+0x2fc>)
 800785c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007860:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007868:	d012      	beq.n	8007890 <UART_SetConfig+0x264>
 800786a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800786e:	d802      	bhi.n	8007876 <UART_SetConfig+0x24a>
 8007870:	2b00      	cmp	r3, #0
 8007872:	d007      	beq.n	8007884 <UART_SetConfig+0x258>
 8007874:	e012      	b.n	800789c <UART_SetConfig+0x270>
 8007876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800787a:	d006      	beq.n	800788a <UART_SetConfig+0x25e>
 800787c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007880:	d009      	beq.n	8007896 <UART_SetConfig+0x26a>
 8007882:	e00b      	b.n	800789c <UART_SetConfig+0x270>
 8007884:	2301      	movs	r3, #1
 8007886:	77fb      	strb	r3, [r7, #31]
 8007888:	e077      	b.n	800797a <UART_SetConfig+0x34e>
 800788a:	2302      	movs	r3, #2
 800788c:	77fb      	strb	r3, [r7, #31]
 800788e:	e074      	b.n	800797a <UART_SetConfig+0x34e>
 8007890:	2304      	movs	r3, #4
 8007892:	77fb      	strb	r3, [r7, #31]
 8007894:	e071      	b.n	800797a <UART_SetConfig+0x34e>
 8007896:	2308      	movs	r3, #8
 8007898:	77fb      	strb	r3, [r7, #31]
 800789a:	e06e      	b.n	800797a <UART_SetConfig+0x34e>
 800789c:	2310      	movs	r3, #16
 800789e:	77fb      	strb	r3, [r7, #31]
 80078a0:	bf00      	nop
 80078a2:	e06a      	b.n	800797a <UART_SetConfig+0x34e>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a25      	ldr	r2, [pc, #148]	; (8007940 <UART_SetConfig+0x314>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d124      	bne.n	80078f8 <UART_SetConfig+0x2cc>
 80078ae:	4b1e      	ldr	r3, [pc, #120]	; (8007928 <UART_SetConfig+0x2fc>)
 80078b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078b4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80078b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078bc:	d012      	beq.n	80078e4 <UART_SetConfig+0x2b8>
 80078be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c2:	d802      	bhi.n	80078ca <UART_SetConfig+0x29e>
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d007      	beq.n	80078d8 <UART_SetConfig+0x2ac>
 80078c8:	e012      	b.n	80078f0 <UART_SetConfig+0x2c4>
 80078ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ce:	d006      	beq.n	80078de <UART_SetConfig+0x2b2>
 80078d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078d4:	d009      	beq.n	80078ea <UART_SetConfig+0x2be>
 80078d6:	e00b      	b.n	80078f0 <UART_SetConfig+0x2c4>
 80078d8:	2300      	movs	r3, #0
 80078da:	77fb      	strb	r3, [r7, #31]
 80078dc:	e04d      	b.n	800797a <UART_SetConfig+0x34e>
 80078de:	2302      	movs	r3, #2
 80078e0:	77fb      	strb	r3, [r7, #31]
 80078e2:	e04a      	b.n	800797a <UART_SetConfig+0x34e>
 80078e4:	2304      	movs	r3, #4
 80078e6:	77fb      	strb	r3, [r7, #31]
 80078e8:	e047      	b.n	800797a <UART_SetConfig+0x34e>
 80078ea:	2308      	movs	r3, #8
 80078ec:	77fb      	strb	r3, [r7, #31]
 80078ee:	e044      	b.n	800797a <UART_SetConfig+0x34e>
 80078f0:	2310      	movs	r3, #16
 80078f2:	77fb      	strb	r3, [r7, #31]
 80078f4:	bf00      	nop
 80078f6:	e040      	b.n	800797a <UART_SetConfig+0x34e>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a11      	ldr	r2, [pc, #68]	; (8007944 <UART_SetConfig+0x318>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d139      	bne.n	8007976 <UART_SetConfig+0x34a>
 8007902:	4b09      	ldr	r3, [pc, #36]	; (8007928 <UART_SetConfig+0x2fc>)
 8007904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007908:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800790c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007910:	d027      	beq.n	8007962 <UART_SetConfig+0x336>
 8007912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007916:	d817      	bhi.n	8007948 <UART_SetConfig+0x31c>
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01c      	beq.n	8007956 <UART_SetConfig+0x32a>
 800791c:	e027      	b.n	800796e <UART_SetConfig+0x342>
 800791e:	bf00      	nop
 8007920:	efff69f3 	.word	0xefff69f3
 8007924:	40011000 	.word	0x40011000
 8007928:	40023800 	.word	0x40023800
 800792c:	40004400 	.word	0x40004400
 8007930:	40004800 	.word	0x40004800
 8007934:	40004c00 	.word	0x40004c00
 8007938:	40005000 	.word	0x40005000
 800793c:	40011400 	.word	0x40011400
 8007940:	40007800 	.word	0x40007800
 8007944:	40007c00 	.word	0x40007c00
 8007948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800794c:	d006      	beq.n	800795c <UART_SetConfig+0x330>
 800794e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007952:	d009      	beq.n	8007968 <UART_SetConfig+0x33c>
 8007954:	e00b      	b.n	800796e <UART_SetConfig+0x342>
 8007956:	2300      	movs	r3, #0
 8007958:	77fb      	strb	r3, [r7, #31]
 800795a:	e00e      	b.n	800797a <UART_SetConfig+0x34e>
 800795c:	2302      	movs	r3, #2
 800795e:	77fb      	strb	r3, [r7, #31]
 8007960:	e00b      	b.n	800797a <UART_SetConfig+0x34e>
 8007962:	2304      	movs	r3, #4
 8007964:	77fb      	strb	r3, [r7, #31]
 8007966:	e008      	b.n	800797a <UART_SetConfig+0x34e>
 8007968:	2308      	movs	r3, #8
 800796a:	77fb      	strb	r3, [r7, #31]
 800796c:	e005      	b.n	800797a <UART_SetConfig+0x34e>
 800796e:	2310      	movs	r3, #16
 8007970:	77fb      	strb	r3, [r7, #31]
 8007972:	bf00      	nop
 8007974:	e001      	b.n	800797a <UART_SetConfig+0x34e>
 8007976:	2310      	movs	r3, #16
 8007978:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007982:	d17f      	bne.n	8007a84 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007984:	7ffb      	ldrb	r3, [r7, #31]
 8007986:	2b08      	cmp	r3, #8
 8007988:	d85c      	bhi.n	8007a44 <UART_SetConfig+0x418>
 800798a:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <UART_SetConfig+0x364>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	080079b5 	.word	0x080079b5
 8007994:	080079d5 	.word	0x080079d5
 8007998:	080079f5 	.word	0x080079f5
 800799c:	08007a45 	.word	0x08007a45
 80079a0:	08007a0d 	.word	0x08007a0d
 80079a4:	08007a45 	.word	0x08007a45
 80079a8:	08007a45 	.word	0x08007a45
 80079ac:	08007a45 	.word	0x08007a45
 80079b0:	08007a2d 	.word	0x08007a2d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079b4:	f7fd fda2 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 80079b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	005a      	lsls	r2, r3, #1
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	085b      	lsrs	r3, r3, #1
 80079c4:	441a      	add	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	61bb      	str	r3, [r7, #24]
        break;
 80079d2:	e03a      	b.n	8007a4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079d4:	f7fd fda6 	bl	8005524 <HAL_RCC_GetPCLK2Freq>
 80079d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	005a      	lsls	r2, r3, #1
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	085b      	lsrs	r3, r3, #1
 80079e4:	441a      	add	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	61bb      	str	r3, [r7, #24]
        break;
 80079f2:	e02a      	b.n	8007a4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	085a      	lsrs	r2, r3, #1
 80079fa:	4b5f      	ldr	r3, [pc, #380]	; (8007b78 <UART_SetConfig+0x54c>)
 80079fc:	4413      	add	r3, r2
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	6852      	ldr	r2, [r2, #4]
 8007a02:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	61bb      	str	r3, [r7, #24]
        break;
 8007a0a:	e01e      	b.n	8007a4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a0c:	f7fd fcb8 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 8007a10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	005a      	lsls	r2, r3, #1
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	441a      	add	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	61bb      	str	r3, [r7, #24]
        break;
 8007a2a:	e00e      	b.n	8007a4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	085b      	lsrs	r3, r3, #1
 8007a32:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	61bb      	str	r3, [r7, #24]
        break;
 8007a42:	e002      	b.n	8007a4a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	75fb      	strb	r3, [r7, #23]
        break;
 8007a48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	2b0f      	cmp	r3, #15
 8007a4e:	d916      	bls.n	8007a7e <UART_SetConfig+0x452>
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a56:	d212      	bcs.n	8007a7e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	f023 030f 	bic.w	r3, r3, #15
 8007a60:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	085b      	lsrs	r3, r3, #1
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	f003 0307 	and.w	r3, r3, #7
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	897b      	ldrh	r3, [r7, #10]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	897a      	ldrh	r2, [r7, #10]
 8007a7a:	60da      	str	r2, [r3, #12]
 8007a7c:	e070      	b.n	8007b60 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	75fb      	strb	r3, [r7, #23]
 8007a82:	e06d      	b.n	8007b60 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007a84:	7ffb      	ldrb	r3, [r7, #31]
 8007a86:	2b08      	cmp	r3, #8
 8007a88:	d859      	bhi.n	8007b3e <UART_SetConfig+0x512>
 8007a8a:	a201      	add	r2, pc, #4	; (adr r2, 8007a90 <UART_SetConfig+0x464>)
 8007a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a90:	08007ab5 	.word	0x08007ab5
 8007a94:	08007ad3 	.word	0x08007ad3
 8007a98:	08007af1 	.word	0x08007af1
 8007a9c:	08007b3f 	.word	0x08007b3f
 8007aa0:	08007b09 	.word	0x08007b09
 8007aa4:	08007b3f 	.word	0x08007b3f
 8007aa8:	08007b3f 	.word	0x08007b3f
 8007aac:	08007b3f 	.word	0x08007b3f
 8007ab0:	08007b27 	.word	0x08007b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ab4:	f7fd fd22 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 8007ab8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	085a      	lsrs	r2, r3, #1
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	441a      	add	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	61bb      	str	r3, [r7, #24]
        break;
 8007ad0:	e038      	b.n	8007b44 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ad2:	f7fd fd27 	bl	8005524 <HAL_RCC_GetPCLK2Freq>
 8007ad6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	085a      	lsrs	r2, r3, #1
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	441a      	add	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	61bb      	str	r3, [r7, #24]
        break;
 8007aee:	e029      	b.n	8007b44 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	085a      	lsrs	r2, r3, #1
 8007af6:	4b21      	ldr	r3, [pc, #132]	; (8007b7c <UART_SetConfig+0x550>)
 8007af8:	4413      	add	r3, r2
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	6852      	ldr	r2, [r2, #4]
 8007afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	61bb      	str	r3, [r7, #24]
        break;
 8007b06:	e01d      	b.n	8007b44 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b08:	f7fd fc3a 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 8007b0c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	085a      	lsrs	r2, r3, #1
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	441a      	add	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	61bb      	str	r3, [r7, #24]
        break;
 8007b24:	e00e      	b.n	8007b44 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	085b      	lsrs	r3, r3, #1
 8007b2c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	61bb      	str	r3, [r7, #24]
        break;
 8007b3c:	e002      	b.n	8007b44 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	75fb      	strb	r3, [r7, #23]
        break;
 8007b42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	2b0f      	cmp	r3, #15
 8007b48:	d908      	bls.n	8007b5c <UART_SetConfig+0x530>
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b50:	d204      	bcs.n	8007b5c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69ba      	ldr	r2, [r7, #24]
 8007b58:	60da      	str	r2, [r3, #12]
 8007b5a:	e001      	b.n	8007b60 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3720      	adds	r7, #32
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	01e84800 	.word	0x01e84800
 8007b7c:	00f42400 	.word	0x00f42400

08007b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00a      	beq.n	8007baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00a      	beq.n	8007bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd0:	f003 0304 	and.w	r3, r3, #4
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00a      	beq.n	8007bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	f003 0308 	and.w	r3, r3, #8
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	f003 0310 	and.w	r3, r3, #16
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00a      	beq.n	8007c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01a      	beq.n	8007c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c7e:	d10a      	bne.n	8007c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	430a      	orrs	r2, r1
 8007c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	605a      	str	r2, [r3, #4]
  }
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007cd2:	f7fb fd71 	bl	80037b8 <HAL_GetTick>
 8007cd6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0308 	and.w	r3, r3, #8
 8007ce2:	2b08      	cmp	r3, #8
 8007ce4:	d10e      	bne.n	8007d04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ce6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f814 	bl	8007d22 <UART_WaitOnFlagUntilTimeout>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e00a      	b.n	8007d1a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2220      	movs	r2, #32
 8007d08:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b084      	sub	sp, #16
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	603b      	str	r3, [r7, #0]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d32:	e05d      	b.n	8007df0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3a:	d059      	beq.n	8007df0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d3c:	f7fb fd3c 	bl	80037b8 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d302      	bcc.n	8007d52 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d11b      	bne.n	8007d8a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 0201 	bic.w	r2, r2, #1
 8007d70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2220      	movs	r2, #32
 8007d76:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e042      	b.n	8007e10 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d02b      	beq.n	8007df0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da6:	d123      	bne.n	8007df0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007db0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007dc0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0201 	bic.w	r2, r2, #1
 8007dd0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2220      	movs	r2, #32
 8007de2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e00f      	b.n	8007e10 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	69da      	ldr	r2, [r3, #28]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	4013      	ands	r3, r2
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	bf0c      	ite	eq
 8007e00:	2301      	moveq	r3, #1
 8007e02:	2300      	movne	r3, #0
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	461a      	mov	r2, r3
 8007e08:	79fb      	ldrb	r3, [r7, #7]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d092      	beq.n	8007d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007e2e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2220      	movs	r2, #32
 8007e34:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007e36:	bf00      	nop
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e58:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689a      	ldr	r2, [r3, #8]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f022 0201 	bic.w	r2, r2, #1
 8007e68:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007e76:	bf00      	nop
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	69db      	ldr	r3, [r3, #28]
 8007e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e98:	d01e      	beq.n	8007ed8 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007eb0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 0201 	bic.w	r2, r2, #1
 8007ec0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689a      	ldr	r2, [r3, #8]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ed0:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f7ff fb89 	bl	80075f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ede:	bf00      	nop
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b084      	sub	sp, #16
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f7ff fb85 	bl	8007604 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007efa:	bf00      	nop
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b086      	sub	sp, #24
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f14:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f26:	2b80      	cmp	r3, #128	; 0x80
 8007f28:	d109      	bne.n	8007f3e <UART_DMAError+0x3c>
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	2b21      	cmp	r3, #33	; 0x21
 8007f2e:	d106      	bne.n	8007f3e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007f38:	6978      	ldr	r0, [r7, #20]
 8007f3a:	f7ff ff6d 	bl	8007e18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f48:	2b40      	cmp	r3, #64	; 0x40
 8007f4a:	d109      	bne.n	8007f60 <UART_DMAError+0x5e>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b22      	cmp	r3, #34	; 0x22
 8007f50:	d106      	bne.n	8007f60 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007f5a:	6978      	ldr	r0, [r7, #20]
 8007f5c:	f7ff ff71 	bl	8007e42 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f64:	f043 0210 	orr.w	r2, r3, #16
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f6c:	6978      	ldr	r0, [r7, #20]
 8007f6e:	f7ff fb53 	bl	8007618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f72:	bf00      	nop
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f7ff fb3d 	bl	8007618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f9e:	bf00      	nop
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b082      	sub	sp, #8
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fbc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7ff fb06 	bl	80075dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <__libc_init_array>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	4e0d      	ldr	r6, [pc, #52]	; (8008010 <__libc_init_array+0x38>)
 8007fdc:	4c0d      	ldr	r4, [pc, #52]	; (8008014 <__libc_init_array+0x3c>)
 8007fde:	1ba4      	subs	r4, r4, r6
 8007fe0:	10a4      	asrs	r4, r4, #2
 8007fe2:	2500      	movs	r5, #0
 8007fe4:	42a5      	cmp	r5, r4
 8007fe6:	d109      	bne.n	8007ffc <__libc_init_array+0x24>
 8007fe8:	4e0b      	ldr	r6, [pc, #44]	; (8008018 <__libc_init_array+0x40>)
 8007fea:	4c0c      	ldr	r4, [pc, #48]	; (800801c <__libc_init_array+0x44>)
 8007fec:	f000 f820 	bl	8008030 <_init>
 8007ff0:	1ba4      	subs	r4, r4, r6
 8007ff2:	10a4      	asrs	r4, r4, #2
 8007ff4:	2500      	movs	r5, #0
 8007ff6:	42a5      	cmp	r5, r4
 8007ff8:	d105      	bne.n	8008006 <__libc_init_array+0x2e>
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}
 8007ffc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008000:	4798      	blx	r3
 8008002:	3501      	adds	r5, #1
 8008004:	e7ee      	b.n	8007fe4 <__libc_init_array+0xc>
 8008006:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800800a:	4798      	blx	r3
 800800c:	3501      	adds	r5, #1
 800800e:	e7f2      	b.n	8007ff6 <__libc_init_array+0x1e>
 8008010:	08008070 	.word	0x08008070
 8008014:	08008070 	.word	0x08008070
 8008018:	08008070 	.word	0x08008070
 800801c:	08008074 	.word	0x08008074

08008020 <memset>:
 8008020:	4402      	add	r2, r0
 8008022:	4603      	mov	r3, r0
 8008024:	4293      	cmp	r3, r2
 8008026:	d100      	bne.n	800802a <memset+0xa>
 8008028:	4770      	bx	lr
 800802a:	f803 1b01 	strb.w	r1, [r3], #1
 800802e:	e7f9      	b.n	8008024 <memset+0x4>

08008030 <_init>:
 8008030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008032:	bf00      	nop
 8008034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008036:	bc08      	pop	{r3}
 8008038:	469e      	mov	lr, r3
 800803a:	4770      	bx	lr

0800803c <_fini>:
 800803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803e:	bf00      	nop
 8008040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008042:	bc08      	pop	{r3}
 8008044:	469e      	mov	lr, r3
 8008046:	4770      	bx	lr
