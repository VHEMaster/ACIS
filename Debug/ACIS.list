
ACIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090dc  080001e0  080001e0  000101e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080092bc  080092bc  000192bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092dc  080092dc  00020b08  2**0
                  CONTENTS
  4 .ARM          00000008  080092dc  080092dc  000192dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092e4  080092e4  00020b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092e4  080092e4  000192e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092e8  080092e8  000192e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b08  20010000  080092ec  00020000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065d4  20010b08  08009df4  00020b08  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200170dc  08009df4  000270dc  2**0
                  ALLOC
 11 .itcmram      00000000  20000000  20000000  00020b08  2**0
                  CONTENTS
 12 .ARM.attributes 00000030  00000000  00000000  00020b08  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001887e  00000000  00000000  00020b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000036bf  00000000  00000000  000393b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001530  00000000  00000000  0003ca78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001390  00000000  00000000  0003dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000256d4  00000000  00000000  0003f338  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00012f17  00000000  00000000  00064a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000e433c  00000000  00000000  00077923  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0015bc5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005890  00000000  00000000  0015bcdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20010b08 	.word	0x20010b08
 80001fc:	00000000 	.word	0x00000000
 8000200:	080092a4 	.word	0x080092a4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20010b0c 	.word	0x20010b0c
 800021c:	080092a4 	.word	0x080092a4

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <acis_init>:
sAcisConfig acis_config;// __attribute__((section(".ItcmRamSection")));

extern TIM_HandleTypeDef htim4;

void acis_init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim4);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <acis_init+0x10>)
 8000d62:	f006 f9f1 	bl	8007148 <HAL_TIM_Base_Start_IT>
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20016ccc 	.word	0x20016ccc

08000d70 <acis_ignite_14>:
static volatile float angle_ignite = 0;
static volatile float angle_saturate = 0;
static volatile uint8_t table_current = 0;

static inline void acis_ignite_14(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2180      	movs	r1, #128	; 0x80
 8000d78:	4807      	ldr	r0, [pc, #28]	; (8000d98 <acis_ignite_14+0x28>)
 8000d7a:	f004 ff65 	bl	8005c48 <HAL_GPIO_WritePin>
  ign14_prev = ign14_time;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <acis_ignite_14+0x2c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <acis_ignite_14+0x30>)
 8000d84:	6013      	str	r3, [r2, #0]
  ign14_time = Delay_Tick;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <acis_ignite_14+0x34>)
 8000d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <acis_ignite_14+0x2c>)
 8000d8c:	6013      	str	r3, [r2, #0]
  ign_ftime = 0;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <acis_ignite_14+0x38>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40020400 	.word	0x40020400
 8000d9c:	20010b24 	.word	0x20010b24
 8000da0:	20010b2c 	.word	0x20010b2c
 8000da4:	40000c00 	.word	0x40000c00
 8000da8:	20010000 	.word	0x20010000

08000dac <acis_ignite_23>:

static inline void acis_ignite_23(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <acis_ignite_23+0x28>)
 8000db6:	f004 ff47 	bl	8005c48 <HAL_GPIO_WritePin>
  ign23_prev = ign23_time;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <acis_ignite_23+0x2c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <acis_ignite_23+0x30>)
 8000dc0:	6013      	str	r3, [r2, #0]
  ign23_time = Delay_Tick;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <acis_ignite_23+0x34>)
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <acis_ignite_23+0x2c>)
 8000dc8:	6013      	str	r3, [r2, #0]
  ign_ftime = 0;
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <acis_ignite_23+0x38>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	20010b28 	.word	0x20010b28
 8000ddc:	20010b30 	.word	0x20010b30
 8000de0:	40000c00 	.word	0x40000c00
 8000de4:	20010000 	.word	0x20010000

08000de8 <acis_saturate_14>:

static inline void acis_saturate_14(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <acis_saturate_14+0x18>)
 8000df2:	f004 ff29 	bl	8005c48 <HAL_GPIO_WritePin>
  ign_ftime = 0;
 8000df6:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <acis_saturate_14+0x1c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40020400 	.word	0x40020400
 8000e04:	20010000 	.word	0x20010000

08000e08 <acis_saturate_23>:

static inline void acis_saturate_23(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2140      	movs	r1, #64	; 0x40
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <acis_saturate_23+0x18>)
 8000e12:	f004 ff19 	bl	8005c48 <HAL_GPIO_WritePin>
  ign_ftime = 0;
 8000e16:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <acis_saturate_23+0x1c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40020400 	.word	0x40020400
 8000e24:	20010000 	.word	0x20010000

08000e28 <acis_ignite>:

static inline void acis_ignite(uint8_t index)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if(index == 0)
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <acis_ignite+0x16>
    acis_ignite_14();
 8000e38:	f7ff ff9a 	bl	8000d70 <acis_ignite_14>
  else if(index == 1)
    acis_ignite_23();
}
 8000e3c:	e004      	b.n	8000e48 <acis_ignite+0x20>
  else if(index == 1)
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d101      	bne.n	8000e48 <acis_ignite+0x20>
    acis_ignite_23();
 8000e44:	f7ff ffb2 	bl	8000dac <acis_ignite_23>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <acis_saturate>:

static inline void acis_saturate(uint8_t index)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  if(index == 0)
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <acis_saturate+0x16>
    acis_saturate_14();
 8000e60:	f7ff ffc2 	bl	8000de8 <acis_saturate_14>
  else if(index == 1)
    acis_saturate_23();
}
 8000e64:	e004      	b.n	8000e70 <acis_saturate+0x20>
  else if(index == 1)
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d101      	bne.n	8000e70 <acis_saturate+0x20>
    acis_saturate_23();
 8000e6c:	f7ff ffcc 	bl	8000e08 <acis_saturate_23>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <acis_ignition_loop>:

static inline void acis_ignition_loop(void)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
  uint32_t now = Delay_Tick;
 8000e7e:	4b9f      	ldr	r3, [pc, #636]	; (80010fc <acis_ignition_loop+0x284>)
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	60fb      	str	r3, [r7, #12]
  float rpm = csps_getrpm();
 8000e84:	f000 ff8e 	bl	8001da4 <csps_getrpm>
 8000e88:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t rotates = csps_isrotates() || hall_rotates;
 8000e8c:	f000 ffb4 	bl	8001df8 <csps_isrotates>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d104      	bne.n	8000ea0 <acis_ignition_loop+0x28>
 8000e96:	4b9a      	ldr	r3, [pc, #616]	; (8001100 <acis_ignition_loop+0x288>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <acis_ignition_loop+0x2c>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <acis_ignition_loop+0x2e>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if(!ign_ftime && rotates)
 8000ea8:	4b96      	ldr	r3, [pc, #600]	; (8001104 <acis_ignition_loop+0x28c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f040 8114 	bne.w	80010da <acis_ignition_loop+0x262>
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 8110 	beq.w	80010da <acis_ignition_loop+0x262>
  {
    if(DelayDiff(now, ign14_time) >= IGN_OVER_TIME)
 8000eba:	4b93      	ldr	r3, [pc, #588]	; (8001108 <acis_ignition_loop+0x290>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f001 f887 	bl	8001fd4 <DelayDiff>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	4b90      	ldr	r3, [pc, #576]	; (800110c <acis_ignition_loop+0x294>)
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d905      	bls.n	8000eda <acis_ignition_loop+0x62>
      HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2180      	movs	r1, #128	; 0x80
 8000ed2:	488f      	ldr	r0, [pc, #572]	; (8001110 <acis_ignition_loop+0x298>)
 8000ed4:	f004 feb8 	bl	8005c48 <HAL_GPIO_WritePin>
 8000ed8:	e071      	b.n	8000fbe <acis_ignition_loop+0x146>
    else if(acis_config.params.isIgnitionByHall)
 8000eda:	4a8e      	ldr	r2, [pc, #568]	; (8001114 <acis_ignition_loop+0x29c>)
 8000edc:	f645 1309 	movw	r3, #22793	; 0x5909
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d06a      	beq.n	8000fbe <acis_ignition_loop+0x146>
    {
      if(rpm < 300.0f)
 8000ee8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eec:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001118 <acis_ignition_loop+0x2a0>
 8000ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef8:	d51c      	bpl.n	8000f34 <acis_ignition_loop+0xbc>
      {
        if(DelayDiff(now, ign14_time) >= DelayDiff(ign14_time, ign14_prev) * 96 / 128)
 8000efa:	4b83      	ldr	r3, [pc, #524]	; (8001108 <acis_ignition_loop+0x290>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4619      	mov	r1, r3
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f001 f867 	bl	8001fd4 <DelayDiff>
 8000f06:	4604      	mov	r4, r0
 8000f08:	4b7f      	ldr	r3, [pc, #508]	; (8001108 <acis_ignition_loop+0x290>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b83      	ldr	r3, [pc, #524]	; (800111c <acis_ignition_loop+0x2a4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	4610      	mov	r0, r2
 8000f14:	f001 f85e 	bl	8001fd4 <DelayDiff>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	015b      	lsls	r3, r3, #5
 8000f22:	09db      	lsrs	r3, r3, #7
 8000f24:	429c      	cmp	r4, r3
 8000f26:	d34a      	bcc.n	8000fbe <acis_ignition_loop+0x146>
          HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	4878      	ldr	r0, [pc, #480]	; (8001110 <acis_ignition_loop+0x298>)
 8000f2e:	f004 fe8b 	bl	8005c48 <HAL_GPIO_WritePin>
 8000f32:	e044      	b.n	8000fbe <acis_ignition_loop+0x146>
      }
      else if(DelayDiff(ign14_time, ign14_prev) > 15000)
 8000f34:	4b74      	ldr	r3, [pc, #464]	; (8001108 <acis_ignition_loop+0x290>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b78      	ldr	r3, [pc, #480]	; (800111c <acis_ignition_loop+0x2a4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4610      	mov	r0, r2
 8000f40:	f001 f848 	bl	8001fd4 <DelayDiff>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d91b      	bls.n	8000f86 <acis_ignition_loop+0x10e>
      {
        if((int32_t)DelayDiff(ign14_time, ign14_prev) - (int32_t)DelayDiff(now, ign14_time) < 11719)
 8000f4e:	4b6e      	ldr	r3, [pc, #440]	; (8001108 <acis_ignition_loop+0x290>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4b72      	ldr	r3, [pc, #456]	; (800111c <acis_ignition_loop+0x2a4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4619      	mov	r1, r3
 8000f58:	4610      	mov	r0, r2
 8000f5a:	f001 f83b 	bl	8001fd4 <DelayDiff>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461c      	mov	r4, r3
 8000f62:	4b69      	ldr	r3, [pc, #420]	; (8001108 <acis_ignition_loop+0x290>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4619      	mov	r1, r3
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f001 f833 	bl	8001fd4 <DelayDiff>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	1ae3      	subs	r3, r4, r3
 8000f72:	f642 52c6 	movw	r2, #11718	; 0x2dc6
 8000f76:	4293      	cmp	r3, r2
 8000f78:	dc21      	bgt.n	8000fbe <acis_ignition_loop+0x146>
        {
          HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	4864      	ldr	r0, [pc, #400]	; (8001110 <acis_ignition_loop+0x298>)
 8000f80:	f004 fe62 	bl	8005c48 <HAL_GPIO_WritePin>
 8000f84:	e01b      	b.n	8000fbe <acis_ignition_loop+0x146>
        }
      }
      else if(DelayDiff(now, ign14_time) >= DelayDiff(ign14_time, ign14_prev) * 28 / 128)
 8000f86:	4b60      	ldr	r3, [pc, #384]	; (8001108 <acis_ignition_loop+0x290>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	68f8      	ldr	r0, [r7, #12]
 8000f8e:	f001 f821 	bl	8001fd4 <DelayDiff>
 8000f92:	4604      	mov	r4, r0
 8000f94:	4b5c      	ldr	r3, [pc, #368]	; (8001108 <acis_ignition_loop+0x290>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b60      	ldr	r3, [pc, #384]	; (800111c <acis_ignition_loop+0x2a4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f001 f818 	bl	8001fd4 <DelayDiff>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	1a9b      	subs	r3, r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	09db      	lsrs	r3, r3, #7
 8000fb0:	429c      	cmp	r4, r3
 8000fb2:	d304      	bcc.n	8000fbe <acis_ignition_loop+0x146>
        HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	4855      	ldr	r0, [pc, #340]	; (8001110 <acis_ignition_loop+0x298>)
 8000fba:	f004 fe45 	bl	8005c48 <HAL_GPIO_WritePin>
    }

    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 8000fbe:	4b58      	ldr	r3, [pc, #352]	; (8001120 <acis_ignition_loop+0x2a8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f001 f805 	bl	8001fd4 <DelayDiff>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	4b4f      	ldr	r3, [pc, #316]	; (800110c <acis_ignition_loop+0x294>)
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d905      	bls.n	8000fde <acis_ignition_loop+0x166>
      HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	484e      	ldr	r0, [pc, #312]	; (8001110 <acis_ignition_loop+0x298>)
 8000fd8:	f004 fe36 	bl	8005c48 <HAL_GPIO_WritePin>
    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 8000fdc:	e088      	b.n	80010f0 <acis_ignition_loop+0x278>
    else if(acis_config.params.isIgnitionByHall)
 8000fde:	4a4d      	ldr	r2, [pc, #308]	; (8001114 <acis_ignition_loop+0x29c>)
 8000fe0:	f645 1309 	movw	r3, #22793	; 0x5909
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 8081 	beq.w	80010f0 <acis_ignition_loop+0x278>
    {
      if(rpm < 300.0f)
 8000fee:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ff2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001118 <acis_ignition_loop+0x2a0>
 8000ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffe:	d51c      	bpl.n	800103a <acis_ignition_loop+0x1c2>
      {
        if(DelayDiff(now, ign23_time) >= DelayDiff(ign23_time, ign23_prev) * 96 / 128)
 8001000:	4b47      	ldr	r3, [pc, #284]	; (8001120 <acis_ignition_loop+0x2a8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f000 ffe4 	bl	8001fd4 <DelayDiff>
 800100c:	4604      	mov	r4, r0
 800100e:	4b44      	ldr	r3, [pc, #272]	; (8001120 <acis_ignition_loop+0x2a8>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b44      	ldr	r3, [pc, #272]	; (8001124 <acis_ignition_loop+0x2ac>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4619      	mov	r1, r3
 8001018:	4610      	mov	r0, r2
 800101a:	f000 ffdb 	bl	8001fd4 <DelayDiff>
 800101e:	4602      	mov	r2, r0
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	015b      	lsls	r3, r3, #5
 8001028:	09db      	lsrs	r3, r3, #7
 800102a:	429c      	cmp	r4, r3
 800102c:	d360      	bcc.n	80010f0 <acis_ignition_loop+0x278>
          HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2140      	movs	r1, #64	; 0x40
 8001032:	4837      	ldr	r0, [pc, #220]	; (8001110 <acis_ignition_loop+0x298>)
 8001034:	f004 fe08 	bl	8005c48 <HAL_GPIO_WritePin>
    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 8001038:	e05a      	b.n	80010f0 <acis_ignition_loop+0x278>
      }
      else if(rpm > 500.0f && DelayDiff(ign23_time, ign23_prev) > 15000)
 800103a:	edd7 7a02 	vldr	s15, [r7, #8]
 800103e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001128 <acis_ignition_loop+0x2b0>
 8001042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	dd28      	ble.n	800109e <acis_ignition_loop+0x226>
 800104c:	4b34      	ldr	r3, [pc, #208]	; (8001120 <acis_ignition_loop+0x2a8>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b34      	ldr	r3, [pc, #208]	; (8001124 <acis_ignition_loop+0x2ac>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	4610      	mov	r0, r2
 8001058:	f000 ffbc 	bl	8001fd4 <DelayDiff>
 800105c:	4602      	mov	r2, r0
 800105e:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001062:	429a      	cmp	r2, r3
 8001064:	d91b      	bls.n	800109e <acis_ignition_loop+0x226>
      {
        if((int32_t)DelayDiff(ign23_time, ign23_prev) - (int32_t)DelayDiff(now, ign23_time) < 11719)
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <acis_ignition_loop+0x2a8>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <acis_ignition_loop+0x2ac>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	4610      	mov	r0, r2
 8001072:	f000 ffaf 	bl	8001fd4 <DelayDiff>
 8001076:	4603      	mov	r3, r0
 8001078:	461c      	mov	r4, r3
 800107a:	4b29      	ldr	r3, [pc, #164]	; (8001120 <acis_ignition_loop+0x2a8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4619      	mov	r1, r3
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f000 ffa7 	bl	8001fd4 <DelayDiff>
 8001086:	4603      	mov	r3, r0
 8001088:	1ae3      	subs	r3, r4, r3
 800108a:	f642 52c6 	movw	r2, #11718	; 0x2dc6
 800108e:	4293      	cmp	r3, r2
 8001090:	dc22      	bgt.n	80010d8 <acis_ignition_loop+0x260>
        {
          HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2140      	movs	r1, #64	; 0x40
 8001096:	481e      	ldr	r0, [pc, #120]	; (8001110 <acis_ignition_loop+0x298>)
 8001098:	f004 fdd6 	bl	8005c48 <HAL_GPIO_WritePin>
        if((int32_t)DelayDiff(ign23_time, ign23_prev) - (int32_t)DelayDiff(now, ign23_time) < 11719)
 800109c:	e01c      	b.n	80010d8 <acis_ignition_loop+0x260>
        }
      }
      else if(DelayDiff(now, ign23_time) >= DelayDiff(ign23_time, ign23_prev) * 28 / 128)
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <acis_ignition_loop+0x2a8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4619      	mov	r1, r3
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f000 ff95 	bl	8001fd4 <DelayDiff>
 80010aa:	4604      	mov	r4, r0
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <acis_ignition_loop+0x2a8>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <acis_ignition_loop+0x2ac>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	4610      	mov	r0, r2
 80010b8:	f000 ff8c 	bl	8001fd4 <DelayDiff>
 80010bc:	4602      	mov	r2, r0
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	1a9b      	subs	r3, r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	09db      	lsrs	r3, r3, #7
 80010c8:	429c      	cmp	r4, r3
 80010ca:	d311      	bcc.n	80010f0 <acis_ignition_loop+0x278>
        HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2140      	movs	r1, #64	; 0x40
 80010d0:	480f      	ldr	r0, [pc, #60]	; (8001110 <acis_ignition_loop+0x298>)
 80010d2:	f004 fdb9 	bl	8005c48 <HAL_GPIO_WritePin>
    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 80010d6:	e00b      	b.n	80010f0 <acis_ignition_loop+0x278>
 80010d8:	e00a      	b.n	80010f0 <acis_ignition_loop+0x278>
    }
  }
  else
  {
    HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	480c      	ldr	r0, [pc, #48]	; (8001110 <acis_ignition_loop+0x298>)
 80010e0:	f004 fdb2 	bl	8005c48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2140      	movs	r1, #64	; 0x40
 80010e8:	4809      	ldr	r0, [pc, #36]	; (8001110 <acis_ignition_loop+0x298>)
 80010ea:	f004 fdad 	bl	8005c48 <HAL_GPIO_WritePin>
  }
}
 80010ee:	e000      	b.n	80010f2 <acis_ignition_loop+0x27a>
    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 80010f0:	bf00      	nop
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40000c00 	.word	0x40000c00
 8001100:	20010b40 	.word	0x20010b40
 8001104:	20010000 	.word	0x20010000
 8001108:	20010b24 	.word	0x20010b24
 800110c:	0007a11f 	.word	0x0007a11f
 8001110:	40020400 	.word	0x40020400
 8001114:	20010e18 	.word	0x20010e18
 8001118:	43960000 	.word	0x43960000
 800111c:	20010b2c 	.word	0x20010b2c
 8001120:	20010b28 	.word	0x20010b28
 8001124:	20010b30 	.word	0x20010b30
 8001128:	43fa0000 	.word	0x43fa0000

0800112c <acis_hall_exti>:

inline void acis_hall_exti(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
  uint32_t now = Delay_Tick;
 8001132:	4b42      	ldr	r3, [pc, #264]	; (800123c <acis_hall_exti+0x110>)
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	617b      	str	r3, [r7, #20]
  uint8_t hall_cylinders = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	77fb      	strb	r3, [r7, #31]
  hall_prev = now;
 800113c:	4a40      	ldr	r2, [pc, #256]	; (8001240 <acis_hall_exti+0x114>)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	6013      	str	r3, [r2, #0]
  float angle = 0.0f;
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
  float angle14 = csps_getangle14();
 8001148:	f000 fd4a 	bl	8001be0 <csps_getangle14>
 800114c:	ed87 0a04 	vstr	s0, [r7, #16]
  float rpm = csps_getrpm();
 8001150:	f000 fe28 	bl	8001da4 <csps_getrpm>
 8001154:	ed87 0a03 	vstr	s0, [r7, #12]
  float pressure = map_getpressure();
 8001158:	f001 fe38 	bl	8002dcc <map_getpressure>
 800115c:	ed87 0a02 	vstr	s0, [r7, #8]
  float angle23 = csps_getangle23from14(angle14);
 8001160:	ed97 0a04 	vldr	s0, [r7, #16]
 8001164:	f000 fdf4 	bl	8001d50 <csps_getangle23from14>
 8001168:	ed87 0a01 	vstr	s0, [r7, #4]
  float cspsfound = csps_isfound();
 800116c:	f000 fe50 	bl	8001e10 <csps_isfound>
 8001170:	4603      	mov	r3, r0
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800117a:	edc7 7a00 	vstr	s15, [r7]

  if(angle23 > 90.0f || angle23 <= -90.0f)
 800117e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001182:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001244 <acis_hall_exti+0x118>
 8001186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118e:	dc08      	bgt.n	80011a2 <acis_hall_exti+0x76>
 8001190:	edd7 7a01 	vldr	s15, [r7, #4]
 8001194:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001248 <acis_hall_exti+0x11c>
 8001198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a0:	d803      	bhi.n	80011aa <acis_hall_exti+0x7e>
  {
      hall_cylinders = 2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	77fb      	strb	r3, [r7, #31]
      angle = angle14;
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	61bb      	str	r3, [r7, #24]
  }
  if(angle14 > 90.0f || angle14 <= -90.0f)
 80011aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80011ae:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001244 <acis_hall_exti+0x118>
 80011b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	dc08      	bgt.n	80011ce <acis_hall_exti+0xa2>
 80011bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001248 <acis_hall_exti+0x11c>
 80011c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011cc:	d813      	bhi.n	80011f6 <acis_hall_exti+0xca>
  {
    if(hall_cylinders == 0)
 80011ce:	7ffb      	ldrb	r3, [r7, #31]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d104      	bne.n	80011de <acis_hall_exti+0xb2>
    {
      hall_cylinders = 1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	77fb      	strb	r3, [r7, #31]
      angle = angle23;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	61bb      	str	r3, [r7, #24]
 80011dc:	e00b      	b.n	80011f6 <acis_hall_exti+0xca>
    }
    else
    {
      hall_cylinders = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	77fb      	strb	r3, [r7, #31]
      hall_error += 1.0f;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <acis_hall_exti+0x120>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <acis_hall_exti+0x120>)
 80011f2:	edc3 7a00 	vstr	s15, [r3]
    }
  }
  hall_angle = angle;
 80011f6:	4a16      	ldr	r2, [pc, #88]	; (8001250 <acis_hall_exti+0x124>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6013      	str	r3, [r2, #0]

  if(cspsfound && acis_config.params.isIgnitionByHall)
 80011fc:	edd7 7a00 	vldr	s15, [r7]
 8001200:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001208:	d011      	beq.n	800122e <acis_hall_exti+0x102>
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <acis_hall_exti+0x128>)
 800120c:	f645 1309 	movw	r3, #22793	; 0x5909
 8001210:	4413      	add	r3, r2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00a      	beq.n	800122e <acis_hall_exti+0x102>
  {
    if(hall_cylinders == 1)
 8001218:	7ffb      	ldrb	r3, [r7, #31]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d102      	bne.n	8001224 <acis_hall_exti+0xf8>
    {
      acis_ignite_14();
 800121e:	f7ff fda7 	bl	8000d70 <acis_ignite_14>
 8001222:	e004      	b.n	800122e <acis_hall_exti+0x102>
    }
    else if(hall_cylinders == 2)
 8001224:	7ffb      	ldrb	r3, [r7, #31]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d101      	bne.n	800122e <acis_hall_exti+0x102>
    {
      acis_ignite_23();
 800122a:	f7ff fdbf 	bl	8000dac <acis_ignite_23>
    }
  }
  hall_rotates = 1;
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <acis_hall_exti+0x12c>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40000c00 	.word	0x40000c00
 8001240:	20010b34 	.word	0x20010b34
 8001244:	42b40000 	.word	0x42b40000
 8001248:	c2b40000 	.word	0xc2b40000
 800124c:	20010b3c 	.word	0x20010b3c
 8001250:	20010b38 	.word	0x20010b38
 8001254:	20010e18 	.word	0x20010e18
 8001258:	20010b40 	.word	0x20010b40
 800125c:	00000000 	.word	0x00000000

08001260 <acis_hall_loop>:

static inline void acis_hall_loop(void)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
  static uint32_t last_error_null = 0;
  uint32_t prev = hall_prev;
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <acis_hall_loop+0x78>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	607b      	str	r3, [r7, #4]
  uint32_t now = Delay_Tick;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <acis_hall_loop+0x7c>)
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	603b      	str	r3, [r7, #0]
  if(DelayDiff(now, last_error_null) > 100000)
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <acis_hall_loop+0x80>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4619      	mov	r1, r3
 8001278:	6838      	ldr	r0, [r7, #0]
 800127a:	f000 feab 	bl	8001fd4 <DelayDiff>
 800127e:	4602      	mov	r2, r0
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <acis_hall_loop+0x84>)
 8001282:	429a      	cmp	r2, r3
 8001284:	d915      	bls.n	80012b2 <acis_hall_loop+0x52>
  {
    hall_error *= 0.95;
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <acis_hall_loop+0x88>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f92c 	bl	80004e8 <__aeabi_f2d>
 8001290:	a30f      	add	r3, pc, #60	; (adr r3, 80012d0 <acis_hall_loop+0x70>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	f7ff f97f 	bl	8000598 <__aeabi_dmul>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	4618      	mov	r0, r3
 80012a0:	4621      	mov	r1, r4
 80012a2:	f7ff fb8b 	bl	80009bc <__aeabi_d2f>
 80012a6:	4602      	mov	r2, r0
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <acis_hall_loop+0x88>)
 80012aa:	601a      	str	r2, [r3, #0]
    last_error_null = now;
 80012ac:	4a0c      	ldr	r2, [pc, #48]	; (80012e0 <acis_hall_loop+0x80>)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	6013      	str	r3, [r2, #0]
  }
  if(DelayDiff(now, prev) > 600000)
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	6838      	ldr	r0, [r7, #0]
 80012b6:	f000 fe8d 	bl	8001fd4 <DelayDiff>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <acis_hall_loop+0x8c>)
 80012be:	429a      	cmp	r2, r3
 80012c0:	d902      	bls.n	80012c8 <acis_hall_loop+0x68>
  {
    hall_rotates = 0;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <acis_hall_loop+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
  }
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	66666666 	.word	0x66666666
 80012d4:	3fee6666 	.word	0x3fee6666
 80012d8:	20010b34 	.word	0x20010b34
 80012dc:	40000c00 	.word	0x40000c00
 80012e0:	20010b58 	.word	0x20010b58
 80012e4:	000186a0 	.word	0x000186a0
 80012e8:	20010b3c 	.word	0x20010b3c
 80012ec:	000927c0 	.word	0x000927c0
 80012f0:	20010b40 	.word	0x20010b40

080012f4 <acis_loop>:

inline void acis_loop(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b090      	sub	sp, #64	; 0x40
 80012f8:	af00      	add	r7, sp, #0
  static float oldanglesbeforeignite[2] = {0,0};
  static uint8_t saturated[2] = { 1,1 };
  static uint8_t ignited[2] = { 1,1 };
  float angle[2] = { 0.0f, 0.0f };
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  float anglesbeforeignite[2];
  angle[0] = csps_getangle14();
 8001306:	f000 fc6b 	bl	8001be0 <csps_getangle14>
 800130a:	eef0 7a40 	vmov.f32	s15, s0
 800130e:	edc7 7a02 	vstr	s15, [r7, #8]
  angle[1] = csps_getangle23from14(angle[0]);
 8001312:	edd7 7a02 	vldr	s15, [r7, #8]
 8001316:	eeb0 0a67 	vmov.f32	s0, s15
 800131a:	f000 fd19 	bl	8001d50 <csps_getangle23from14>
 800131e:	eef0 7a40 	vmov.f32	s15, s0
 8001322:	edc7 7a03 	vstr	s15, [r7, #12]
  sAcisIgnTable * table = NULL;
 8001326:	2300      	movs	r3, #0
 8001328:	637b      	str	r3, [r7, #52]	; 0x34

  float rpm = csps_getrpm();
 800132a:	f000 fd3b 	bl	8001da4 <csps_getrpm>
 800132e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  float uspa = csps_getuspa();
 8001332:	f000 fd45 	bl	8001dc0 <csps_getuspa>
 8001336:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  float period = csps_getperiod();
 800133a:	f000 fd4f 	bl	8001ddc <csps_getperiod>
 800133e:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
  float pressure = map_getpressure();
 8001342:	f001 fd43 	bl	8002dcc <map_getpressure>
 8001346:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  float time_sat = IGN_SATURATION;
 800134a:	4ba4      	ldr	r3, [pc, #656]	; (80015dc <acis_loop+0x2e8>)
 800134c:	63fb      	str	r3, [r7, #60]	; 0x3c

  float found = csps_isfound();
 800134e:	f000 fd5f 	bl	8001e10 <csps_isfound>
 8001352:	4603      	mov	r3, r0
 8001354:	ee07 3a90 	vmov	s15, r3
 8001358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800135c:	edc7 7a08 	vstr	s15, [r7, #32]
  uint32_t now = Delay_Tick;
 8001360:	4b9f      	ldr	r3, [pc, #636]	; (80015e0 <acis_loop+0x2ec>)
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	61fb      	str	r3, [r7, #28]

  int table_num = table_current;
 8001366:	4b9f      	ldr	r3, [pc, #636]	; (80015e4 <acis_loop+0x2f0>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	61bb      	str	r3, [r7, #24]

  if(table_num < acis_config.tables_count || table_num < TABLE_SETUPS_MAX)
 800136e:	4b9e      	ldr	r3, [pc, #632]	; (80015e8 <acis_loop+0x2f4>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	429a      	cmp	r2, r3
 8001376:	d802      	bhi.n	800137e <acis_loop+0x8a>
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b03      	cmp	r3, #3
 800137c:	dc08      	bgt.n	8001390 <acis_loop+0x9c>
    table = &acis_config.tables[table_num];
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	f44f 52b2 	mov.w	r2, #5696	; 0x1640
 8001384:	fb02 f303 	mul.w	r3, r2, r3
 8001388:	4a97      	ldr	r2, [pc, #604]	; (80015e8 <acis_loop+0x2f4>)
 800138a:	4413      	add	r3, r2
 800138c:	3304      	adds	r3, #4
 800138e:	637b      	str	r3, [r7, #52]	; 0x34


  float ignite = pressure / 4200.0f;
 8001390:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001394:	eddf 6a95 	vldr	s13, [pc, #596]	; 80015ec <acis_loop+0x2f8>
 8001398:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800139c:	edc7 7a05 	vstr	s15, [r7, #20]

  if(period < IGN_SATURATION + IGN_PULSE)
 80013a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80013a4:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80015f0 <acis_loop+0x2fc>
 80013a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b0:	d507      	bpl.n	80013c2 <acis_loop+0xce>
  {
    time_sat = period * ((float)IGN_SATURATION / (float)(IGN_SATURATION + IGN_PULSE));
 80013b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80013b6:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80015f4 <acis_loop+0x300>
 80013ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013be:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  if(table)
  {

  }

  float saturate = time_sat / uspa;
 80013c2:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80013c6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80013ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ce:	edc7 7a04 	vstr	s15, [r7, #16]

  angle_ignite = ignite;
 80013d2:	4a89      	ldr	r2, [pc, #548]	; (80015f8 <acis_loop+0x304>)
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	6013      	str	r3, [r2, #0]
  angle_saturate = saturate;
 80013d8:	4a88      	ldr	r2, [pc, #544]	; (80015fc <acis_loop+0x308>)
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	6013      	str	r3, [r2, #0]


  if(found)
 80013de:	edd7 7a08 	vldr	s15, [r7, #32]
 80013e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	f000 80ea 	beq.w	80015c2 <acis_loop+0x2ce>
  {
    for(int i = 0; i < 2; i++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80013f2:	e0e1      	b.n	80015b8 <acis_loop+0x2c4>
    {


      if(angle[i] < -ignite)
 80013f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80013fc:	4413      	add	r3, r2
 80013fe:	3b38      	subs	r3, #56	; 0x38
 8001400:	ed93 7a00 	vldr	s14, [r3]
 8001404:	edd7 7a05 	vldr	s15, [r7, #20]
 8001408:	eef1 7a67 	vneg.f32	s15, s15
 800140c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001414:	d516      	bpl.n	8001444 <acis_loop+0x150>
        anglesbeforeignite[i] = -angle[i] - ignite;
 8001416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800141e:	4413      	add	r3, r2
 8001420:	3b38      	subs	r3, #56	; 0x38
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	eeb1 7a67 	vneg.f32	s14, s15
 800142a:	edd7 7a05 	vldr	s15, [r7, #20]
 800142e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800143a:	4413      	add	r3, r2
 800143c:	3b40      	subs	r3, #64	; 0x40
 800143e:	edc3 7a00 	vstr	s15, [r3]
 8001442:	e017      	b.n	8001474 <acis_loop+0x180>
      else
        anglesbeforeignite[i] = 360.0f - angle[i] - ignite;
 8001444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800144c:	4413      	add	r3, r2
 800144e:	3b38      	subs	r3, #56	; 0x38
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001600 <acis_loop+0x30c>
 8001458:	ee37 7a67 	vsub.f32	s14, s14, s15
 800145c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800146c:	4413      	add	r3, r2
 800146e:	3b40      	subs	r3, #64	; 0x40
 8001470:	edc3 7a00 	vstr	s15, [r3]

      if(anglesbeforeignite[i] - oldanglesbeforeignite[i] > 0.0f && anglesbeforeignite[i] - oldanglesbeforeignite[i] < 180.0f)
 8001474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800147c:	4413      	add	r3, r2
 800147e:	3b40      	subs	r3, #64	; 0x40
 8001480:	ed93 7a00 	vldr	s14, [r3]
 8001484:	4a5f      	ldr	r2, [pc, #380]	; (8001604 <acis_loop+0x310>)
 8001486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001494:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149c:	dd22      	ble.n	80014e4 <acis_loop+0x1f0>
 800149e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80014a6:	4413      	add	r3, r2
 80014a8:	3b40      	subs	r3, #64	; 0x40
 80014aa:	ed93 7a00 	vldr	s14, [r3]
 80014ae:	4a55      	ldr	r2, [pc, #340]	; (8001604 <acis_loop+0x310>)
 80014b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014be:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001608 <acis_loop+0x314>
 80014c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	d50b      	bpl.n	80014e4 <acis_loop+0x1f0>
        anglesbeforeignite[i] = oldanglesbeforeignite[i];
 80014cc:	4a4d      	ldr	r2, [pc, #308]	; (8001604 <acis_loop+0x310>)
 80014ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80014de:	440b      	add	r3, r1
 80014e0:	3b40      	subs	r3, #64	; 0x40
 80014e2:	601a      	str	r2, [r3, #0]

      if(anglesbeforeignite[i] - saturate < 0.0f)
 80014e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80014ec:	4413      	add	r3, r2
 80014ee:	3b40      	subs	r3, #64	; 0x40
 80014f0:	ed93 7a00 	vldr	s14, [r3]
 80014f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80014f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001504:	d513      	bpl.n	800152e <acis_loop+0x23a>
      {
        if(!saturated[i] && !ignited[0])
 8001506:	4a41      	ldr	r2, [pc, #260]	; (800160c <acis_loop+0x318>)
 8001508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800150a:	4413      	add	r3, r2
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10d      	bne.n	800152e <acis_loop+0x23a>
 8001512:	4b3f      	ldr	r3, [pc, #252]	; (8001610 <acis_loop+0x31c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d109      	bne.n	800152e <acis_loop+0x23a>
        {
          saturated[i] = 1;
 800151a:	4a3c      	ldr	r2, [pc, #240]	; (800160c <acis_loop+0x318>)
 800151c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151e:	4413      	add	r3, r2
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
          acis_saturate(i);
 8001524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fc91 	bl	8000e50 <acis_saturate>
        }
      }

      if(oldanglesbeforeignite[i] - anglesbeforeignite[i] < 0.0f)
 800152e:	4a35      	ldr	r2, [pc, #212]	; (8001604 <acis_loop+0x310>)
 8001530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	ed93 7a00 	vldr	s14, [r3]
 800153a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001542:	4413      	add	r3, r2
 8001544:	3b40      	subs	r3, #64	; 0x40
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800154e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	d51b      	bpl.n	8001590 <acis_loop+0x29c>
      {
        if(!ignited[i] && saturated[i])
 8001558:	4a2d      	ldr	r2, [pc, #180]	; (8001610 <acis_loop+0x31c>)
 800155a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800155c:	4413      	add	r3, r2
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d11a      	bne.n	800159a <acis_loop+0x2a6>
 8001564:	4a29      	ldr	r2, [pc, #164]	; (800160c <acis_loop+0x318>)
 8001566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001568:	4413      	add	r3, r2
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d014      	beq.n	800159a <acis_loop+0x2a6>
        {
          ignited[i] = 1;
 8001570:	4a27      	ldr	r2, [pc, #156]	; (8001610 <acis_loop+0x31c>)
 8001572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001574:	4413      	add	r3, r2
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
          saturated[i] = 0;
 800157a:	4a24      	ldr	r2, [pc, #144]	; (800160c <acis_loop+0x318>)
 800157c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800157e:	4413      	add	r3, r2
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
          acis_ignite(i);
 8001584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fc4d 	bl	8000e28 <acis_ignite>
 800158e:	e004      	b.n	800159a <acis_loop+0x2a6>
        }
      }
      else ignited[i] = 0;
 8001590:	4a1f      	ldr	r2, [pc, #124]	; (8001610 <acis_loop+0x31c>)
 8001592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001594:	4413      	add	r3, r2
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]

      oldanglesbeforeignite[i] = anglesbeforeignite[i];
 800159a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80015a2:	4413      	add	r3, r2
 80015a4:	3b40      	subs	r3, #64	; 0x40
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4916      	ldr	r1, [pc, #88]	; (8001604 <acis_loop+0x310>)
 80015aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 2; i++)
 80015b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b4:	3301      	adds	r3, #1
 80015b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80015b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	f77f af1a 	ble.w	80013f4 <acis_loop+0x100>
 80015c0:	e003      	b.n	80015ca <acis_loop+0x2d6>
    }
  }
  else
  {
    angle_ignite = 0;
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <acis_loop+0x304>)
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
  }

  acis_hall_loop();
 80015ca:	f7ff fe49 	bl	8001260 <acis_hall_loop>

  acis_ignition_loop();
 80015ce:	f7ff fc53 	bl	8000e78 <acis_ignition_loop>
}
 80015d2:	bf00      	nop
 80015d4:	3740      	adds	r7, #64	; 0x40
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	463b8000 	.word	0x463b8000
 80015e0:	40000c00 	.word	0x40000c00
 80015e4:	20010b4c 	.word	0x20010b4c
 80015e8:	20010e18 	.word	0x20010e18
 80015ec:	45834000 	.word	0x45834000
 80015f0:	465ac000 	.word	0x465ac000
 80015f4:	3f5b6db7 	.word	0x3f5b6db7
 80015f8:	20010b44 	.word	0x20010b44
 80015fc:	20010b48 	.word	0x20010b48
 8001600:	43b40000 	.word	0x43b40000
 8001604:	20010b50 	.word	0x20010b50
 8001608:	43340000 	.word	0x43340000
 800160c:	20010004 	.word	0x20010004
 8001610:	20010008 	.word	0x20010008

08001614 <acis_parse_command>:


void acis_parse_command(eTransChannels xChaSrc, uint8_t * msgBuf, uint32_t length)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	73fb      	strb	r3, [r7, #15]

}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <CRC16_RegisterHardware>:
#elif defined(CRC_HW)

static CRC_HandleTypeDef * handle_crc;

void CRC16_RegisterHardware(CRC_HandleTypeDef * hcrc)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  handle_crc = hcrc;
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <CRC16_RegisterHardware+0x1c>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20010b5c 	.word	0x20010b5c

08001650 <CRC16_Generate>:

inline uint16_t CRC16_Generate(uint8_t * input, uint32_t size)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	81fb      	strh	r3, [r7, #14]
  if(handle_crc != NULL)
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <CRC16_Generate+0x34>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d008      	beq.n	8001678 <CRC16_Generate+0x28>
  {
      result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <CRC16_Generate+0x34>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4618      	mov	r0, r3
 8001670:	f003 fc20 	bl	8004eb4 <HAL_CRC_Calculate>
 8001674:	4603      	mov	r3, r0
 8001676:	81fb      	strh	r3, [r7, #14]
  }
  return result;
 8001678:	89fb      	ldrh	r3, [r7, #14]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20010b5c 	.word	0x20010b5c

08001688 <CRC8_Generate>:

inline uint8_t CRC8_Generate(uint8_t * input, uint32_t size)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	81fb      	strh	r3, [r7, #14]
  if(handle_crc != NULL)
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <CRC8_Generate+0x44>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d008      	beq.n	80016b0 <CRC8_Generate+0x28>
  {
    result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <CRC8_Generate+0x44>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 fc04 	bl	8004eb4 <HAL_CRC_Calculate>
 80016ac:	4603      	mov	r3, r0
 80016ae:	81fb      	strh	r3, [r7, #14]

  }
  return (result & 0xFF) ^ (result >> 8);
 80016b0:	89fb      	ldrh	r3, [r7, #14]
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	89fb      	ldrh	r3, [r7, #14]
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	4053      	eors	r3, r2
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20010b5c 	.word	0x20010b5c

080016d0 <csps_exti>:
{

}

inline void csps_exti(void)
{
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b092      	sub	sp, #72	; 0x48
 80016d4:	af00      	add	r7, sp, #0
  static uint32_t t1 = 0;
  static uint32_t t2 = 0;
  uint32_t i, ticks, cur, prev;
  sCspsData data;
  float cs14, cs23;
  float average = 0;
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	63fb      	str	r3, [r7, #60]	; 0x3c
  float diff = 0;
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
  float rpm_koff = 1.0f / 60.0f;
 80016e2:	4baf      	ldr	r3, [pc, #700]	; (80019a0 <csps_exti+0x2d0>)
 80016e4:	63bb      	str	r3, [r7, #56]	; 0x38
  float uspa_koff = 1.0f / 10.0f;
 80016e6:	4baf      	ldr	r3, [pc, #700]	; (80019a4 <csps_exti+0x2d4>)
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30

  cur = Delay_Tick;
 80016ea:	4baf      	ldr	r3, [pc, #700]	; (80019a8 <csps_exti+0x2d8>)
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  csps_pulse_last = cur;
 80016f0:	4aae      	ldr	r2, [pc, #696]	; (80019ac <csps_exti+0x2dc>)
 80016f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f4:	6013      	str	r3, [r2, #0]
  for(i = 1; i < IRQ_SIZE; i++)
 80016f6:	2301      	movs	r3, #1
 80016f8:	647b      	str	r3, [r7, #68]	; 0x44
 80016fa:	e00b      	b.n	8001714 <csps_exti+0x44>
    cspc_irq_data[i - 1] = cspc_irq_data[i];
 80016fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016fe:	3b01      	subs	r3, #1
 8001700:	49ab      	ldr	r1, [pc, #684]	; (80019b0 <csps_exti+0x2e0>)
 8001702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001704:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001708:	49a9      	ldr	r1, [pc, #676]	; (80019b0 <csps_exti+0x2e0>)
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(i = 1; i < IRQ_SIZE; i++)
 800170e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001710:	3301      	adds	r3, #1
 8001712:	647b      	str	r3, [r7, #68]	; 0x44
 8001714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001716:	2b07      	cmp	r3, #7
 8001718:	d9f0      	bls.n	80016fc <csps_exti+0x2c>
  cspc_irq_data[IRQ_SIZE - 1] = cur;
 800171a:	4aa5      	ldr	r2, [pc, #660]	; (80019b0 <csps_exti+0x2e0>)
 800171c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171e:	61d3      	str	r3, [r2, #28]
  if(cspc_irq_data[0] == 0)
 8001720:	4ba3      	ldr	r3, [pc, #652]	; (80019b0 <csps_exti+0x2e0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 8239 	beq.w	8001b9c <csps_exti+0x4cc>
    return;
  prev = cspc_irq_data[IRQ_SIZE - 2];
 800172a:	4ba1      	ldr	r3, [pc, #644]	; (80019b0 <csps_exti+0x2e0>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	643b      	str	r3, [r7, #64]	; 0x40
  csps_rotates = 1;
 8001730:	4ba0      	ldr	r3, [pc, #640]	; (80019b4 <csps_exti+0x2e4>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]

  t1++;
 8001736:	4ba0      	ldr	r3, [pc, #640]	; (80019b8 <csps_exti+0x2e8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	3301      	adds	r3, #1
 800173c:	4a9e      	ldr	r2, [pc, #632]	; (80019b8 <csps_exti+0x2e8>)
 800173e:	6013      	str	r3, [r2, #0]

  for(i = 1; i < IRQ_SIZE; i++)
 8001740:	2301      	movs	r3, #1
 8001742:	647b      	str	r3, [r7, #68]	; 0x44
 8001744:	e018      	b.n	8001778 <csps_exti+0xa8>
  {
    average += DelayDiff(cspc_irq_data[i], cspc_irq_data[i - 1]);;
 8001746:	4a9a      	ldr	r2, [pc, #616]	; (80019b0 <csps_exti+0x2e0>)
 8001748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800174a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800174e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001750:	3b01      	subs	r3, #1
 8001752:	4a97      	ldr	r2, [pc, #604]	; (80019b0 <csps_exti+0x2e0>)
 8001754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001758:	4619      	mov	r1, r3
 800175a:	f000 fc3b 	bl	8001fd4 <DelayDiff>
 800175e:	ee07 0a90 	vmov	s15, r0
 8001762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001766:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800176a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  for(i = 1; i < IRQ_SIZE; i++)
 8001772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001774:	3301      	adds	r3, #1
 8001776:	647b      	str	r3, [r7, #68]	; 0x44
 8001778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800177a:	2b07      	cmp	r3, #7
 800177c:	d9e3      	bls.n	8001746 <csps_exti+0x76>
  }
  average /= (float)(IRQ_SIZE - 1);
 800177e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001782:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 8001786:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800178a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  avg = average / average_prev;
 800178e:	4b8b      	ldr	r3, [pc, #556]	; (80019bc <csps_exti+0x2ec>)
 8001790:	ed93 7a00 	vldr	s14, [r3]
 8001794:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800179c:	4b88      	ldr	r3, [pc, #544]	; (80019c0 <csps_exti+0x2f0>)
 800179e:	edc3 7a00 	vstr	s15, [r3]

  if(average / average_prev > 1.0f + 1.0f / IRQ_SIZE)
 80017a2:	4b86      	ldr	r3, [pc, #536]	; (80019bc <csps_exti+0x2ec>)
 80017a4:	ed93 7a00 	vldr	s14, [r3]
 80017a8:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80017ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b0:	eeb7 7a02 	vmov.f32	s14, #114	; 0x3f900000  1.125
 80017b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017bc:	dd26      	ble.n	800180c <csps_exti+0x13c>
  {
    if(++t2 == 2)
 80017be:	4b81      	ldr	r3, [pc, #516]	; (80019c4 <csps_exti+0x2f4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	4a7f      	ldr	r2, [pc, #508]	; (80019c4 <csps_exti+0x2f4>)
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b7e      	ldr	r3, [pc, #504]	; (80019c4 <csps_exti+0x2f4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d12e      	bne.n	800182e <csps_exti+0x15e>
    {
      ticks = t1;
 80017d0:	4b79      	ldr	r3, [pc, #484]	; (80019b8 <csps_exti+0x2e8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
      t1 = 0;
 80017d6:	4b78      	ldr	r3, [pc, #480]	; (80019b8 <csps_exti+0x2e8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
      t2 = 0;
 80017dc:	4b79      	ldr	r3, [pc, #484]	; (80019c4 <csps_exti+0x2f4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
      if(ticks != 116)
 80017e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e4:	2b74      	cmp	r3, #116	; 0x74
 80017e6:	d00a      	beq.n	80017fe <csps_exti+0x12e>
        csps_errors += 1.0f;
 80017e8:	4b77      	ldr	r3, [pc, #476]	; (80019c8 <csps_exti+0x2f8>)
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017f6:	4b74      	ldr	r3, [pc, #464]	; (80019c8 <csps_exti+0x2f8>)
 80017f8:	edc3 7a00 	vstr	s15, [r3]
 80017fc:	e017      	b.n	800182e <csps_exti+0x15e>
      else
      {
        csps_last = cur;
 80017fe:	4a73      	ldr	r2, [pc, #460]	; (80019cc <csps_exti+0x2fc>)
 8001800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001802:	6013      	str	r3, [r2, #0]
        csps_found = 1;
 8001804:	4b72      	ldr	r3, [pc, #456]	; (80019d0 <csps_exti+0x300>)
 8001806:	2201      	movs	r2, #1
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	e010      	b.n	800182e <csps_exti+0x15e>
      }
    }
  }
  else if(t1 >= 116)
 800180c:	4b6a      	ldr	r3, [pc, #424]	; (80019b8 <csps_exti+0x2e8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b73      	cmp	r3, #115	; 0x73
 8001812:	d90c      	bls.n	800182e <csps_exti+0x15e>
  {
    t1 = 1;
 8001814:	4b68      	ldr	r3, [pc, #416]	; (80019b8 <csps_exti+0x2e8>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]
    csps_errors += 1.0f;
 800181a:	4b6b      	ldr	r3, [pc, #428]	; (80019c8 <csps_exti+0x2f8>)
 800181c:	edd3 7a00 	vldr	s15, [r3]
 8001820:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001824:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001828:	4b67      	ldr	r3, [pc, #412]	; (80019c8 <csps_exti+0x2f8>)
 800182a:	edc3 7a00 	vstr	s15, [r3]
  }

  average_prev = average;
 800182e:	4a63      	ldr	r2, [pc, #396]	; (80019bc <csps_exti+0x2ec>)
 8001830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001832:	6013      	str	r3, [r2, #0]

  if(csps_found)
 8001834:	4b66      	ldr	r3, [pc, #408]	; (80019d0 <csps_exti+0x300>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8162 	beq.w	8001b04 <csps_exti+0x434>
  {
    switch(t1)
 8001840:	4b5d      	ldr	r3, [pc, #372]	; (80019b8 <csps_exti+0x2e8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <csps_exti+0x17e>
 8001848:	2b01      	cmp	r3, #1
 800184a:	d029      	beq.n	80018a0 <csps_exti+0x1d0>
 800184c:	e036      	b.n	80018bc <csps_exti+0x1ec>
    {
      case 0:
        csps_angle14 = ANGLE_INITIAL;
 800184e:	4b61      	ldr	r3, [pc, #388]	; (80019d4 <csps_exti+0x304>)
 8001850:	4a61      	ldr	r2, [pc, #388]	; (80019d8 <csps_exti+0x308>)
 8001852:	601a      	str	r2, [r3, #0]
        if (ANGLE_INITIAL > 0)
          csps_angle23 = ANGLE_INITIAL - 180.0f;
        else
          csps_angle23 = ANGLE_INITIAL + 180.0f;
 8001854:	4b61      	ldr	r3, [pc, #388]	; (80019dc <csps_exti+0x30c>)
 8001856:	4a62      	ldr	r2, [pc, #392]	; (80019e0 <csps_exti+0x310>)
 8001858:	601a      	str	r2, [r3, #0]
        cs14_p = csps_angle14 - 3.0f;
 800185a:	4b5e      	ldr	r3, [pc, #376]	; (80019d4 <csps_exti+0x304>)
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001864:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001868:	4b5e      	ldr	r3, [pc, #376]	; (80019e4 <csps_exti+0x314>)
 800186a:	edc3 7a00 	vstr	s15, [r3]
        cs23_p = csps_angle23 - 3.0f;
 800186e:	4b5b      	ldr	r3, [pc, #364]	; (80019dc <csps_exti+0x30c>)
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001878:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800187c:	4b5a      	ldr	r3, [pc, #360]	; (80019e8 <csps_exti+0x318>)
 800187e:	edc3 7a00 	vstr	s15, [r3]
        prev = DelayDiff(cur, (DelayDiff(cur, prev) / 3));
 8001882:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001884:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001886:	f000 fba5 	bl	8001fd4 <DelayDiff>
 800188a:	4602      	mov	r2, r0
 800188c:	4b57      	ldr	r3, [pc, #348]	; (80019ec <csps_exti+0x31c>)
 800188e:	fba3 2302 	umull	r2, r3, r3, r2
 8001892:	085b      	lsrs	r3, r3, #1
 8001894:	4619      	mov	r1, r3
 8001896:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001898:	f000 fb9c 	bl	8001fd4 <DelayDiff>
 800189c:	6438      	str	r0, [r7, #64]	; 0x40
        break;
 800189e:	e0b6      	b.n	8001a0e <csps_exti+0x33e>
      case 1:
        prev = DelayDiff(cur, (DelayDiff(cur, prev) / 3)); // @suppress("No break at end of case")
 80018a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80018a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018a4:	f000 fb96 	bl	8001fd4 <DelayDiff>
 80018a8:	4602      	mov	r2, r0
 80018aa:	4b50      	ldr	r3, [pc, #320]	; (80019ec <csps_exti+0x31c>)
 80018ac:	fba3 2302 	umull	r2, r3, r3, r2
 80018b0:	085b      	lsrs	r3, r3, #1
 80018b2:	4619      	mov	r1, r3
 80018b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018b6:	f000 fb8d 	bl	8001fd4 <DelayDiff>
 80018ba:	6438      	str	r0, [r7, #64]	; 0x40
      default:
        cs14 = csps_angle14 + 3.0f;
 80018bc:	4b45      	ldr	r3, [pc, #276]	; (80019d4 <csps_exti+0x304>)
 80018be:	edd3 7a00 	vldr	s15, [r3]
 80018c2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80018c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        if(cs14 > 180.0f) csps_angle14 = cs14 - 360.0f;
 80018ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018d2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80019f0 <csps_exti+0x320>
 80018d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	dd09      	ble.n	80018f4 <csps_exti+0x224>
 80018e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018e4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80019f4 <csps_exti+0x324>
 80018e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018ec:	4b39      	ldr	r3, [pc, #228]	; (80019d4 <csps_exti+0x304>)
 80018ee:	edc3 7a00 	vstr	s15, [r3]
 80018f2:	e002      	b.n	80018fa <csps_exti+0x22a>
        else csps_angle14 = cs14;
 80018f4:	4a37      	ldr	r2, [pc, #220]	; (80019d4 <csps_exti+0x304>)
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	6013      	str	r3, [r2, #0]

        cs23 = csps_angle23 + 3.0f;
 80018fa:	4b38      	ldr	r3, [pc, #224]	; (80019dc <csps_exti+0x30c>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001904:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001908:	edc7 7a08 	vstr	s15, [r7, #32]
        if(cs23 > 180.0f) csps_angle23 = cs23 - 360.0f;
 800190c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001910:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80019f0 <csps_exti+0x320>
 8001914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191c:	dd09      	ble.n	8001932 <csps_exti+0x262>
 800191e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001922:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80019f4 <csps_exti+0x324>
 8001926:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800192a:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <csps_exti+0x30c>)
 800192c:	edc3 7a00 	vstr	s15, [r3]
 8001930:	e002      	b.n	8001938 <csps_exti+0x268>
        else csps_angle23 = cs23;
 8001932:	4a2a      	ldr	r2, [pc, #168]	; (80019dc <csps_exti+0x30c>)
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	6013      	str	r3, [r2, #0]

        cs14_p += 3.0f;
 8001938:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <csps_exti+0x314>)
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001942:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001946:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <csps_exti+0x314>)
 8001948:	edc3 7a00 	vstr	s15, [r3]
        if(cs14_p > 180.0f)
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <csps_exti+0x314>)
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80019f0 <csps_exti+0x320>
 8001956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	dd09      	ble.n	8001974 <csps_exti+0x2a4>
          cs14_p -= 360.0f;
 8001960:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <csps_exti+0x314>)
 8001962:	edd3 7a00 	vldr	s15, [r3]
 8001966:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80019f4 <csps_exti+0x324>
 800196a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <csps_exti+0x314>)
 8001970:	edc3 7a00 	vstr	s15, [r3]

        cs23_p += 3.0f;
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <csps_exti+0x318>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800197e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <csps_exti+0x318>)
 8001984:	edc3 7a00 	vstr	s15, [r3]
        if(cs23_p > 180.0f)
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <csps_exti+0x318>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80019f0 <csps_exti+0x320>
 8001992:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199a:	dc2d      	bgt.n	80019f8 <csps_exti+0x328>
          cs23_p -= 360.0f;
        break;
 800199c:	e036      	b.n	8001a0c <csps_exti+0x33c>
 800199e:	bf00      	nop
 80019a0:	3c888889 	.word	0x3c888889
 80019a4:	3dcccccd 	.word	0x3dcccccd
 80019a8:	40000c00 	.word	0x40000c00
 80019ac:	20010b84 	.word	0x20010b84
 80019b0:	20010b60 	.word	0x20010b60
 80019b4:	20010b81 	.word	0x20010b81
 80019b8:	20010da0 	.word	0x20010da0
 80019bc:	20010da4 	.word	0x20010da4
 80019c0:	20010b9c 	.word	0x20010b9c
 80019c4:	20010da8 	.word	0x20010da8
 80019c8:	20010b8c 	.word	0x20010b8c
 80019cc:	20010b88 	.word	0x20010b88
 80019d0:	20010b80 	.word	0x20010b80
 80019d4:	20010dac 	.word	0x20010dac
 80019d8:	c2e40000 	.word	0xc2e40000
 80019dc:	20010db0 	.word	0x20010db0
 80019e0:	42840000 	.word	0x42840000
 80019e4:	20010db4 	.word	0x20010db4
 80019e8:	20010db8 	.word	0x20010db8
 80019ec:	aaaaaaab 	.word	0xaaaaaaab
 80019f0:	43340000 	.word	0x43340000
 80019f4:	43b40000 	.word	0x43b40000
          cs23_p -= 360.0f;
 80019f8:	4b6a      	ldr	r3, [pc, #424]	; (8001ba4 <csps_exti+0x4d4>)
 80019fa:	edd3 7a00 	vldr	s15, [r3]
 80019fe:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001ba8 <csps_exti+0x4d8>
 8001a02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a06:	4b67      	ldr	r3, [pc, #412]	; (8001ba4 <csps_exti+0x4d4>)
 8001a08:	edc3 7a00 	vstr	s15, [r3]
        break;
 8001a0c:	bf00      	nop
    }

    if(csps_rpm == 0.0f)
 8001a0e:	4b67      	ldr	r3, [pc, #412]	; (8001bac <csps_exti+0x4dc>)
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1c:	d102      	bne.n	8001a24 <csps_exti+0x354>
      rpm_koff = 1.0f;
 8001a1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a22:	63bb      	str	r3, [r7, #56]	; 0x38

    diff = (float)DelayDiff(cur, prev);
 8001a24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001a26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a28:	f000 fad4 	bl	8001fd4 <DelayDiff>
 8001a2c:	ee07 0a90 	vmov	s15, r0
 8001a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a34:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    if(csps_period > 1000000.0f)
 8001a38:	4b5d      	ldr	r3, [pc, #372]	; (8001bb0 <csps_exti+0x4e0>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001bb4 <csps_exti+0x4e4>
 8001a42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	dd02      	ble.n	8001a52 <csps_exti+0x382>
      csps_period = 1000000.0f;
 8001a4c:	4b58      	ldr	r3, [pc, #352]	; (8001bb0 <csps_exti+0x4e0>)
 8001a4e:	4a5a      	ldr	r2, [pc, #360]	; (8001bb8 <csps_exti+0x4e8>)
 8001a50:	601a      	str	r2, [r3, #0]

    csps_period = csps_period * (1.0f - rpm_koff) + (diff * 120.0f) * rpm_koff;
 8001a52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a56:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a5e:	4b54      	ldr	r3, [pc, #336]	; (8001bb0 <csps_exti+0x4e0>)
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a68:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a6c:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001bbc <csps_exti+0x4ec>
 8001a70:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a74:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a80:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <csps_exti+0x4e0>)
 8001a82:	edc3 7a00 	vstr	s15, [r3]
    csps_rpm = 1000000.0f / csps_period * 60.0f;
 8001a86:	4b4a      	ldr	r3, [pc, #296]	; (8001bb0 <csps_exti+0x4e0>)
 8001a88:	ed93 7a00 	vldr	s14, [r3]
 8001a8c:	eddf 6a49 	vldr	s13, [pc, #292]	; 8001bb4 <csps_exti+0x4e4>
 8001a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a94:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001bc0 <csps_exti+0x4f0>
 8001a98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a9c:	4b43      	ldr	r3, [pc, #268]	; (8001bac <csps_exti+0x4dc>)
 8001a9e:	edc3 7a00 	vstr	s15, [r3]
    csps_uspa = csps_uspa * (1.0f - uspa_koff) + (diff / 3.0f) * uspa_koff;
 8001aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001aa6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001aaa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aae:	4b45      	ldr	r3, [pc, #276]	; (8001bc4 <csps_exti+0x4f4>)
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001abc:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8001ac0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001ac4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad0:	4b3c      	ldr	r3, [pc, #240]	; (8001bc4 <csps_exti+0x4f4>)
 8001ad2:	edc3 7a00 	vstr	s15, [r3]

    data.AngleCur14 = csps_angle14;
 8001ad6:	4b3c      	ldr	r3, [pc, #240]	; (8001bc8 <csps_exti+0x4f8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	60bb      	str	r3, [r7, #8]
    data.AngleCur23 = csps_angle23;
 8001adc:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <csps_exti+0x4fc>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	613b      	str	r3, [r7, #16]
    data.AnglePrev14 = cs14_p;
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <csps_exti+0x500>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	60fb      	str	r3, [r7, #12]
    data.AnglePrev23 = cs23_p;
 8001ae8:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <csps_exti+0x4d4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	617b      	str	r3, [r7, #20]
    data.DelayPrev = prev;
 8001aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af0:	607b      	str	r3, [r7, #4]
    data.DelayCur = cur;
 8001af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af4:	603b      	str	r3, [r7, #0]
    data.RPM = csps_rpm;
 8001af6:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <csps_exti+0x4dc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	61bb      	str	r3, [r7, #24]
    data.uSPA = csps_uspa;
 8001afc:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <csps_exti+0x4f4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	e029      	b.n	8001b58 <csps_exti+0x488>

  }
  else
  {
    data.AngleCur14 = 0;
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
    data.AngleCur23 = 0;
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
    data.AnglePrev14 = 0;
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
    data.AnglePrev23 = 0;
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
    data.DelayPrev = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	607b      	str	r3, [r7, #4]
    data.DelayCur = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	603b      	str	r3, [r7, #0]
    data.RPM = 0;
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
    csps_rpm = 0;
 8001b2a:	4b20      	ldr	r3, [pc, #128]	; (8001bac <csps_exti+0x4dc>)
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
    data.uSPA = 1.0f / csps_rpm;
 8001b32:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <csps_exti+0x4dc>)
 8001b34:	ed93 7a00 	vldr	s14, [r3]
 8001b38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b40:	edc7 7a07 	vstr	s15, [r7, #28]
    csps_period = 1.0f / csps_rpm;
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <csps_exti+0x4dc>)
 8001b46:	ed93 7a00 	vldr	s14, [r3]
 8001b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <csps_exti+0x4e0>)
 8001b54:	edc3 7a00 	vstr	s15, [r3]
  }
  CspsData[dataindex] = data;
 8001b58:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <csps_exti+0x504>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4a1e      	ldr	r2, [pc, #120]	; (8001bd8 <csps_exti+0x508>)
 8001b5e:	015b      	lsls	r3, r3, #5
 8001b60:	4413      	add	r3, r2
 8001b62:	461d      	mov	r5, r3
 8001b64:	463c      	mov	r4, r7
 8001b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b6e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  CspsDataPtr = &CspsData[dataindex];
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <csps_exti+0x504>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	015b      	lsls	r3, r3, #5
 8001b78:	4a17      	ldr	r2, [pc, #92]	; (8001bd8 <csps_exti+0x508>)
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <csps_exti+0x50c>)
 8001b7e:	6013      	str	r3, [r2, #0]
  if(++dataindex >= DATA_SIZE)
 8001b80:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <csps_exti+0x504>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <csps_exti+0x504>)
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <csps_exti+0x504>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b0f      	cmp	r3, #15
 8001b92:	d904      	bls.n	8001b9e <csps_exti+0x4ce>
    dataindex = 0;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <csps_exti+0x504>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
 8001b9a:	e000      	b.n	8001b9e <csps_exti+0x4ce>
    return;
 8001b9c:	bf00      	nop

}
 8001b9e:	3748      	adds	r7, #72	; 0x48
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba4:	20010db8 	.word	0x20010db8
 8001ba8:	43b40000 	.word	0x43b40000
 8001bac:	20010b90 	.word	0x20010b90
 8001bb0:	20010b98 	.word	0x20010b98
 8001bb4:	49742400 	.word	0x49742400
 8001bb8:	49742400 	.word	0x49742400
 8001bbc:	42f00000 	.word	0x42f00000
 8001bc0:	42700000 	.word	0x42700000
 8001bc4:	20010b94 	.word	0x20010b94
 8001bc8:	20010dac 	.word	0x20010dac
 8001bcc:	20010db0 	.word	0x20010db0
 8001bd0:	20010db4 	.word	0x20010db4
 8001bd4:	20010dbc 	.word	0x20010dbc
 8001bd8:	20010ba0 	.word	0x20010ba0
 8001bdc:	2001000c 	.word	0x2001000c

08001be0 <csps_getangle14>:
  else return 360 + a - b;
}
*/
volatile float rettttt;
inline float csps_getangle14(void)
{
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	b08e      	sub	sp, #56	; 0x38
 8001be4:	af00      	add	r7, sp, #0
  static float angle_prev = 0;
  float now = Delay_Tick;
 8001be6:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <csps_getangle14+0x154>)
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	ee07 3a90 	vmov	s15, r3
 8001bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float angle, acur, aprev, mult, cur;
  sCspsData data = *CspsDataPtr;
 8001bf6:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <csps_getangle14+0x158>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	463c      	mov	r4, r7
 8001bfc:	461d      	mov	r5, r3
 8001bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c02:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  cur = DelayDiff(data.DelayCur, data.DelayPrev);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 f9df 	bl	8001fd4 <DelayDiff>
 8001c16:	ee07 0a90 	vmov	s15, r0
 8001c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c1e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  now = DelayDiff(now, data.DelayPrev);
 8001c22:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	ee17 0a90 	vmov	r0, s15
 8001c32:	f000 f9cf 	bl	8001fd4 <DelayDiff>
 8001c36:	ee07 0a90 	vmov	s15, r0
 8001c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

  acur = data.AngleCur14;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	633b      	str	r3, [r7, #48]	; 0x30
  aprev = data.AnglePrev14;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24

  if(acur < aprev)
 8001c4a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001c4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	d507      	bpl.n	8001c6c <csps_getangle14+0x8c>
    acur += 360.0f;
 8001c5c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c60:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001d3c <csps_getangle14+0x15c>
 8001c64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c68:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

  angle = acur - aprev;
 8001c6c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001c70:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c78:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  mult = angle / cur;
 8001c7c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001c80:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c88:	edc7 7a08 	vstr	s15, [r7, #32]
  angle = mult * now + aprev;
 8001c8c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c90:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c98:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

  while(angle > 180.0f)
 8001ca4:	e007      	b.n	8001cb6 <csps_getangle14+0xd6>
    angle -= 360.0f;
 8001ca6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001caa:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001d3c <csps_getangle14+0x15c>
 8001cae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cb2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  while(angle > 180.0f)
 8001cb6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001cba:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001d40 <csps_getangle14+0x160>
 8001cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc6:	dcee      	bgt.n	8001ca6 <csps_getangle14+0xc6>

  if((angle - angle_prev < 0.0f && angle - angle_prev > -90.0f) || angle - angle_prev > 90.0f)
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <csps_getangle14+0x164>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	d50d      	bpl.n	8001cfc <csps_getangle14+0x11c>
 8001ce0:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <csps_getangle14+0x164>)
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cee:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001d48 <csps_getangle14+0x168>
 8001cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfa:	dc0d      	bgt.n	8001d18 <csps_getangle14+0x138>
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <csps_getangle14+0x164>)
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d0a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001d4c <csps_getangle14+0x16c>
 8001d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d16:	dd02      	ble.n	8001d1e <csps_getangle14+0x13e>
  {
    angle = angle_prev;
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <csps_getangle14+0x164>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  angle_prev = angle;
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <csps_getangle14+0x164>)
 8001d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d22:	6013      	str	r3, [r2, #0]

  return angle;
 8001d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d26:	ee07 3a90 	vmov	s15, r3
}
 8001d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2e:	3738      	adds	r7, #56	; 0x38
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bdb0      	pop	{r4, r5, r7, pc}
 8001d34:	40000c00 	.word	0x40000c00
 8001d38:	2001000c 	.word	0x2001000c
 8001d3c:	43b40000 	.word	0x43b40000
 8001d40:	43340000 	.word	0x43340000
 8001d44:	20010dc0 	.word	0x20010dc0
 8001d48:	c2b40000 	.word	0xc2b40000
 8001d4c:	42b40000 	.word	0x42b40000

08001d50 <csps_getangle23from14>:

  return angle;
}

inline float csps_getangle23from14(float angle)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	ed87 0a01 	vstr	s0, [r7, #4]
  if(angle > 0.0f) angle -= 180.0f;
 8001d5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d66:	dd08      	ble.n	8001d7a <csps_getangle23from14+0x2a>
 8001d68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d6c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001da0 <csps_getangle23from14+0x50>
 8001d70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d74:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d78:	e007      	b.n	8001d8a <csps_getangle23from14+0x3a>
  else angle += 180.0f;
 8001d7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d7e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001da0 <csps_getangle23from14+0x50>
 8001d82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d86:	edc7 7a01 	vstr	s15, [r7, #4]
  return angle;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	ee07 3a90 	vmov	s15, r3
}
 8001d90:	eeb0 0a67 	vmov.f32	s0, s15
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	43340000 	.word	0x43340000

08001da4 <csps_getrpm>:

inline float csps_getrpm(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return csps_rpm;
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <csps_getrpm+0x18>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	ee07 3a90 	vmov	s15, r3
}
 8001db0:	eeb0 0a67 	vmov.f32	s0, s15
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	20010b90 	.word	0x20010b90

08001dc0 <csps_getuspa>:

inline float csps_getuspa(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return csps_uspa;
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <csps_getuspa+0x18>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	ee07 3a90 	vmov	s15, r3
}
 8001dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	20010b94 	.word	0x20010b94

08001ddc <csps_getperiod>:

inline float csps_getperiod(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return csps_period;
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <csps_getperiod+0x18>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	ee07 3a90 	vmov	s15, r3
}
 8001de8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	20010b98 	.word	0x20010b98

08001df8 <csps_isrotates>:

inline uint8_t csps_isrotates(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return csps_rotates;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <csps_isrotates+0x14>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	b2db      	uxtb	r3, r3
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	20010b81 	.word	0x20010b81

08001e10 <csps_isfound>:

inline uint8_t csps_isfound(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return csps_found;
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <csps_isfound+0x14>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b2db      	uxtb	r3, r3
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	20010b80 	.word	0x20010b80

08001e28 <csps_loop>:
{
  return csps_errors > 3.0f;
}

inline void csps_loop(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
  static uint32_t last_error_null = 0;

  uint32_t pulse_last = csps_pulse_last;
 8001e2e:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <csps_loop+0xe4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	60bb      	str	r3, [r7, #8]
  uint32_t last = csps_last;
 8001e34:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <csps_loop+0xe8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	607b      	str	r3, [r7, #4]
  uint32_t now = Delay_Tick;
 8001e3a:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <csps_loop+0xec>)
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	603b      	str	r3, [r7, #0]

  if(DelayDiff(now, pulse_last) > 50000)
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	6838      	ldr	r0, [r7, #0]
 8001e44:	f000 f8c6 	bl	8001fd4 <DelayDiff>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d921      	bls.n	8001e96 <csps_loop+0x6e>
  {
    pulse_last = now;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	60bb      	str	r3, [r7, #8]
    for(int i = 0; i < IRQ_SIZE; i++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	e007      	b.n	8001e6c <csps_loop+0x44>
      cspc_irq_data[i] = 0;
 8001e5c:	4a2e      	ldr	r2, [pc, #184]	; (8001f18 <csps_loop+0xf0>)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2100      	movs	r1, #0
 8001e62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0; i < IRQ_SIZE; i++)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b07      	cmp	r3, #7
 8001e70:	ddf4      	ble.n	8001e5c <csps_loop+0x34>
    csps_found = 0;
 8001e72:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <csps_loop+0xf4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
    csps_rpm = 0;
 8001e78:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <csps_loop+0xf8>)
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
    csps_period = 1.0f / csps_rpm;
 8001e80:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <csps_loop+0xf8>)
 8001e82:	ed93 7a00 	vldr	s14, [r3]
 8001e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e8e:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <csps_loop+0xfc>)
 8001e90:	edc3 7a00 	vstr	s15, [r3]
 8001e94:	e01d      	b.n	8001ed2 <csps_loop+0xaa>
  }
  else if(DelayDiff(now, last) > 3000000)
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	6838      	ldr	r0, [r7, #0]
 8001e9a:	f000 f89b 	bl	8001fd4 <DelayDiff>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <csps_loop+0x100>)
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d915      	bls.n	8001ed2 <csps_loop+0xaa>
  {
    last = now;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	607b      	str	r3, [r7, #4]
    csps_found = 0;
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <csps_loop+0xf4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
    csps_rpm = 0;
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <csps_loop+0xf8>)
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
    csps_rotates = 0;
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <csps_loop+0x104>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
    csps_period = 1.0f / csps_rpm;
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <csps_loop+0xf8>)
 8001ec0:	ed93 7a00 	vldr	s14, [r3]
 8001ec4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ecc:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <csps_loop+0xfc>)
 8001ece:	edc3 7a00 	vstr	s15, [r3]
  }

  if(DelayDiff(now, last_error_null) > 50000)
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <csps_loop+0x108>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	6838      	ldr	r0, [r7, #0]
 8001eda:	f000 f87b 	bl	8001fd4 <DelayDiff>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d90c      	bls.n	8001f02 <csps_loop+0xda>
  {
    csps_errors *= 0.95f;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <csps_loop+0x10c>)
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001f38 <csps_loop+0x110>
 8001ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <csps_loop+0x10c>)
 8001ef8:	edc3 7a00 	vstr	s15, [r3]
    last_error_null = now;
 8001efc:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <csps_loop+0x108>)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6013      	str	r3, [r2, #0]
  }

}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20010b84 	.word	0x20010b84
 8001f10:	20010b88 	.word	0x20010b88
 8001f14:	40000c00 	.word	0x40000c00
 8001f18:	20010b60 	.word	0x20010b60
 8001f1c:	20010b80 	.word	0x20010b80
 8001f20:	20010b90 	.word	0x20010b90
 8001f24:	20010b98 	.word	0x20010b98
 8001f28:	002dc6c0 	.word	0x002dc6c0
 8001f2c:	20010b81 	.word	0x20010b81
 8001f30:	20010dc4 	.word	0x20010dc4
 8001f34:	20010b8c 	.word	0x20010b8c
 8001f38:	3f733333 	.word	0x3f733333

08001f3c <DelayInit>:
static TIM_HandleTypeDef htim_delay;

volatile uint32_t DelStart[COUNTERS];

void DelayInit(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
  __DELAY_TIM_CLK_ENABLE();
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <DelayInit+0x88>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	4a1f      	ldr	r2, [pc, #124]	; (8001fc4 <DelayInit+0x88>)
 8001f48:	f043 0308 	orr.w	r3, r3, #8
 8001f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <DelayInit+0x88>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig;
    TIM_MasterConfigTypeDef sMasterConfig;

    htim_delay.Instance = DelayTimer;
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <DelayInit+0x8c>)
 8001f5c:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <DelayInit+0x90>)
 8001f5e:	601a      	str	r2, [r3, #0]
    htim_delay.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) - 1;
 8001f60:	f004 fb52 	bl	8006608 <HAL_RCC_GetPCLK1Freq>
 8001f64:	4603      	mov	r3, r0
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <DelayInit+0x94>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0c9b      	lsrs	r3, r3, #18
 8001f70:	3b01      	subs	r3, #1
 8001f72:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <DelayInit+0x8c>)
 8001f74:	6053      	str	r3, [r2, #4]
    htim_delay.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <DelayInit+0x8c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
    htim_delay.Init.Period = 0xFFFFFFFF;
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <DelayInit+0x8c>)
 8001f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f82:	60da      	str	r2, [r3, #12]
    htim_delay.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f84:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <DelayInit+0x8c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim_delay);
 8001f8a:	480f      	ldr	r0, [pc, #60]	; (8001fc8 <DelayInit+0x8c>)
 8001f8c:	f005 f887 	bl	800709e <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f94:	613b      	str	r3, [r7, #16]
    HAL_TIM_ConfigClockSource(&htim_delay, &sClockSourceConfig);
 8001f96:	f107 0310 	add.w	r3, r7, #16
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	480a      	ldr	r0, [pc, #40]	; (8001fc8 <DelayInit+0x8c>)
 8001f9e:	f005 fba5 	bl	80076ec <HAL_TIM_ConfigClockSource>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
    HAL_TIMEx_MasterConfigSynchronization(&htim_delay, &sMasterConfig);
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4806      	ldr	r0, [pc, #24]	; (8001fc8 <DelayInit+0x8c>)
 8001fb0:	f006 f846 	bl	8008040 <HAL_TIMEx_MasterConfigSynchronization>

    HAL_TIM_Base_Start(&htim_delay);
 8001fb4:	4804      	ldr	r0, [pc, #16]	; (8001fc8 <DelayInit+0x8c>)
 8001fb6:	f005 f89d 	bl	80070f4 <HAL_TIM_Base_Start>

}
 8001fba:	bf00      	nop
 8001fbc:	3720      	adds	r7, #32
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	20010dc8 	.word	0x20010dc8
 8001fcc:	40000c00 	.word	0x40000c00
 8001fd0:	431bde83 	.word	0x431bde83

08001fd4 <DelayDiff>:
{
  DelayUs(val * 1000);
}

inline uint32_t DelayDiff(uint32_t a, uint32_t b)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  if(a >= b)
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d303      	bcc.n	8001fee <DelayDiff+0x1a>
    return (a - b);
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	e003      	b.n	8001ff6 <DelayDiff+0x22>
  return ((0xFFFFFFFF - b) + a);
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	3b01      	subs	r3, #1
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002008:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800200c:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <SCB_EnableICache+0x3c>)
 8002012:	2200      	movs	r2, #0
 8002014:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002018:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800201c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <SCB_EnableICache+0x3c>)
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	4a06      	ldr	r2, [pc, #24]	; (8002040 <SCB_EnableICache+0x3c>)
 8002026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800202c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002030:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <SCB_EnableDCache+0x7c>)
 800204c:	2200      	movs	r2, #0
 800204e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002052:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002056:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <SCB_EnableDCache+0x7c>)
 8002058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800205c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	0b5b      	lsrs	r3, r3, #13
 8002062:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002066:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	08db      	lsrs	r3, r3, #3
 800206c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002070:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800207a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002080:	490f      	ldr	r1, [pc, #60]	; (80020c0 <SCB_EnableDCache+0x7c>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	1e5a      	subs	r2, r3, #1
 800208c:	60ba      	str	r2, [r7, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ef      	bne.n	8002072 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1e5a      	subs	r2, r3, #1
 8002096:	60fa      	str	r2, [r7, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1e5      	bne.n	8002068 <SCB_EnableDCache+0x24>
 800209c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <SCB_EnableDCache+0x7c>)
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <SCB_EnableDCache+0x7c>)
 80020a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020aa:	6153      	str	r3, [r2, #20]
 80020ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80020b0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <HAL_GPIO_EXTI_Callback>:
static void MX_RNG_Init(void);
static void UpdateIWDG(void);
static void UpdateDebugger(void);

inline void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d4:	d006      	beq.n	80020e4 <HAL_GPIO_EXTI_Callback+0x20>
 80020d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020da:	d006      	beq.n	80020ea <HAL_GPIO_EXTI_Callback+0x26>
 80020dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020e0:	d006      	beq.n	80020f0 <HAL_GPIO_EXTI_Callback+0x2c>
      break;
    case ADC_STATUS_Pin :
      HAL_TIM_Base_Start_IT(&htim7);
      break;
    default:
      break;
 80020e2:	e009      	b.n	80020f8 <HAL_GPIO_EXTI_Callback+0x34>
      csps_exti();
 80020e4:	f7ff faf4 	bl	80016d0 <csps_exti>
      break;
 80020e8:	e006      	b.n	80020f8 <HAL_GPIO_EXTI_Callback+0x34>
      acis_hall_exti();
 80020ea:	f7ff f81f 	bl	800112c <acis_hall_exti>
      break;
 80020ee:	e003      	b.n	80020f8 <HAL_GPIO_EXTI_Callback+0x34>
      HAL_TIM_Base_Start_IT(&htim7);
 80020f0:	4803      	ldr	r0, [pc, #12]	; (8002100 <HAL_GPIO_EXTI_Callback+0x3c>)
 80020f2:	f005 f829 	bl	8007148 <HAL_TIM_Base_Start_IT>
      break;
 80020f6:	bf00      	nop
  }
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20017098 	.word	0x20017098

08002104 <HAL_TIM_PeriodElapsedCallback>:

inline void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  static uint16_t ms_tim = 0;
  if(htim == &htim4)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a10      	ldr	r2, [pc, #64]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d112      	bne.n	800213a <HAL_TIM_PeriodElapsedCallback+0x36>
  {
    acis_loop();
 8002114:	f7ff f8ee 	bl	80012f4 <acis_loop>
    if(++ms_tim >= 500)
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	3301      	adds	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002122:	801a      	strh	r2, [r3, #0]
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800212c:	d30b      	bcc.n	8002146 <HAL_TIM_PeriodElapsedCallback+0x42>
    {
      csps_loop();
 800212e:	f7ff fe7b 	bl	8001e28 <csps_loop>
      ms_tim = 0;
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002134:	2200      	movs	r2, #0
 8002136:	801a      	strh	r2, [r3, #0]
  }
  else if(htim == &htim7)
  {
    map_adc_read();
  }
}
 8002138:	e005      	b.n	8002146 <HAL_TIM_PeriodElapsedCallback+0x42>
  else if(htim == &htim7)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a06      	ldr	r2, [pc, #24]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d101      	bne.n	8002146 <HAL_TIM_PeriodElapsedCallback+0x42>
    map_adc_read();
 8002142:	f000 fde3 	bl	8002d0c <map_adc_read>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20016ccc 	.word	0x20016ccc
 8002154:	20010e08 	.word	0x20010e08
 8002158:	20017098 	.word	0x20017098

0800215c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  xDmaTxIrqHandler(huart);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f001 fe39 	bl	8003ddc <xDmaTxIrqHandler>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  xDmaErIrqHandler(huart);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f001 fe8c 	bl	8003e98 <xDmaErIrqHandler>
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <main>:

int main(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  SCB_EnableICache();
 800218c:	f7ff ff3a 	bl	8002004 <SCB_EnableICache>

  SCB_EnableDCache();
 8002190:	f7ff ff58 	bl	8002044 <SCB_EnableDCache>

  HAL_Init();
 8002194:	f002 fa2a 	bl	80045ec <HAL_Init>

  SystemClock_Config();
 8002198:	f000 f8b0 	bl	80022fc <SystemClock_Config>

  MX_GPIO_Init();
 800219c:	f000 fc44 	bl	8002a28 <MX_GPIO_Init>
  MX_DMA_Init();
 80021a0:	f000 fbf0 	bl	8002984 <MX_DMA_Init>
  //MX_IWDG_Init();
  MX_USART1_UART_Init();  //Control Communication
 80021a4:	f000 fbb6 	bl	8002914 <MX_USART1_UART_Init>
  MX_SPI2_Init(); //SPI Flash
 80021a8:	f000 f9e2 	bl	8002570 <MX_SPI2_Init>
  MX_ADC1_Init(); //Temperature and battery sensor
 80021ac:	f000 f93e 	bl	800242c <MX_ADC1_Init>
  MX_TIM3_Init(); //Servo PWM
 80021b0:	f000 fa1c 	bl	80025ec <MX_TIM3_Init>
  MX_TIM4_Init(); //ACIS common workout IT
 80021b4:	f000 fa8a 	bl	80026cc <MX_TIM4_Init>
  MX_TIM7_Init(); //Wait timer for ADC670
 80021b8:	f000 faca 	bl	8002750 <MX_TIM7_Init>
  MX_TIM8_Init(); //ADCs trigger strobe
 80021bc:	f000 fb10 	bl	80027e0 <MX_TIM8_Init>
  MX_CRC_Init();
 80021c0:	f000 f996 	bl	80024f0 <MX_CRC_Init>
  MX_RNG_Init();
 80021c4:	f000 f9c0 	bl	8002548 <MX_RNG_Init>

  CRC16_RegisterHardware(&hcrc);
 80021c8:	480b      	ldr	r0, [pc, #44]	; (80021f8 <main+0x70>)
 80021ca:	f7ff fa31 	bl	8001630 <CRC16_RegisterHardware>

  xFifosInit();
 80021ce:	f001 fe97 	bl	8003f00 <xFifosInit>
  xGetterInit();
 80021d2:	f001 fed7 	bl	8003f84 <xGetterInit>

  DelayInit();
 80021d6:	f7ff feb1 	bl	8001f3c <DelayInit>


  map_init();
 80021da:	f000 fd73 	bl	8002cc4 <map_init>
  acis_init();
 80021de:	f7fe fdbd 	bl	8000d5c <acis_init>

  HAL_TIM_Base_Start(&htim8);
 80021e2:	4806      	ldr	r0, [pc, #24]	; (80021fc <main+0x74>)
 80021e4:	f004 ff86 	bl	80070f4 <HAL_TIM_Base_Start>

  while (1)
  {
    UpdateIWDG();
 80021e8:	f000 f80a 	bl	8002200 <UpdateIWDG>
    UpdateDebugger();
 80021ec:	f000 f82a 	bl	8002244 <UpdateDebugger>
    xGetterLoop();
 80021f0:	f001 fefa 	bl	8003fe8 <xGetterLoop>
    UpdateIWDG();
 80021f4:	e7f8      	b.n	80021e8 <main+0x60>
 80021f6:	bf00      	nop
 80021f8:	20016d7c 	.word	0x20016d7c
 80021fc:	20016c8c 	.word	0x20016c8c

08002200 <UpdateIWDG>:

  }
}

static inline void UpdateIWDG(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
  static uint32_t delay_old = 0;
  uint32_t delay = Delay_Tick;
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <UpdateIWDG+0x34>)
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	607b      	str	r3, [r7, #4]
  if(DelayDiff(delay, delay_old) > 1000000)
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <UpdateIWDG+0x38>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4619      	mov	r1, r3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fede 	bl	8001fd4 <DelayDiff>
 8002218:	4602      	mov	r2, r0
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <UpdateIWDG+0x3c>)
 800221c:	429a      	cmp	r2, r3
 800221e:	d905      	bls.n	800222c <UpdateIWDG+0x2c>
  {
    delay_old = delay;
 8002220:	4a05      	ldr	r2, [pc, #20]	; (8002238 <UpdateIWDG+0x38>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6013      	str	r3, [r2, #0]
    HAL_IWDG_Refresh(&hiwdg);
 8002226:	4806      	ldr	r0, [pc, #24]	; (8002240 <UpdateIWDG+0x40>)
 8002228:	f003 fd40 	bl	8005cac <HAL_IWDG_Refresh>
  }
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40000c00 	.word	0x40000c00
 8002238:	20010e0c 	.word	0x20010e0c
 800223c:	000f4240 	.word	0x000f4240
 8002240:	20016d6c 	.word	0x20016d6c

08002244 <UpdateDebugger>:

static inline void UpdateDebugger(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
  static uint8_t was_attached = 0;
  uint8_t attached = IS_DEBUGGER_ATTACHED();
 800224a:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <UpdateDebugger+0xb0>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	71fb      	strb	r3, [r7, #7]
  if(was_attached != attached)
 8002256:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <UpdateDebugger+0xb4>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	79fa      	ldrb	r2, [r7, #7]
 800225c:	429a      	cmp	r2, r3
 800225e:	d042      	beq.n	80022e6 <UpdateDebugger+0xa2>
  {
    was_attached = attached;
 8002260:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <UpdateDebugger+0xb4>)
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	7013      	strb	r3, [r2, #0]
    if(attached)
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d01e      	beq.n	80022aa <UpdateDebugger+0x66>
    {
      __HAL_DBGMCU_FREEZE_IWDG();
 800226c:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <UpdateDebugger+0xb0>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a20      	ldr	r2, [pc, #128]	; (80022f4 <UpdateDebugger+0xb0>)
 8002272:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002276:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM4();
 8002278:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <UpdateDebugger+0xb0>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <UpdateDebugger+0xb0>)
 800227e:	f043 0304 	orr.w	r3, r3, #4
 8002282:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM5();
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <UpdateDebugger+0xb0>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a1a      	ldr	r2, [pc, #104]	; (80022f4 <UpdateDebugger+0xb0>)
 800228a:	f043 0308 	orr.w	r3, r3, #8
 800228e:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM7();
 8002290:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <UpdateDebugger+0xb0>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <UpdateDebugger+0xb0>)
 8002296:	f043 0320 	orr.w	r3, r3, #32
 800229a:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM8();
 800229c:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <UpdateDebugger+0xb0>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a14      	ldr	r2, [pc, #80]	; (80022f4 <UpdateDebugger+0xb0>)
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	60d3      	str	r3, [r2, #12]
      __HAL_DBGMCU_UNFREEZE_TIM5();
      __HAL_DBGMCU_UNFREEZE_TIM7();
      __HAL_DBGMCU_UNFREEZE_TIM8();
    }
  }
}
 80022a8:	e01d      	b.n	80022e6 <UpdateDebugger+0xa2>
      __HAL_DBGMCU_UNFREEZE_IWDG();
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <UpdateDebugger+0xb0>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	4a11      	ldr	r2, [pc, #68]	; (80022f4 <UpdateDebugger+0xb0>)
 80022b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022b4:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM4();
 80022b6:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <UpdateDebugger+0xb0>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <UpdateDebugger+0xb0>)
 80022bc:	f023 0304 	bic.w	r3, r3, #4
 80022c0:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM5();
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <UpdateDebugger+0xb0>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <UpdateDebugger+0xb0>)
 80022c8:	f023 0308 	bic.w	r3, r3, #8
 80022cc:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM7();
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <UpdateDebugger+0xb0>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <UpdateDebugger+0xb0>)
 80022d4:	f023 0320 	bic.w	r3, r3, #32
 80022d8:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM8();
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <UpdateDebugger+0xb0>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	4a05      	ldr	r2, [pc, #20]	; (80022f4 <UpdateDebugger+0xb0>)
 80022e0:	f023 0302 	bic.w	r3, r3, #2
 80022e4:	60d3      	str	r3, [r2, #12]
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e0042000 	.word	0xe0042000
 80022f8:	20010e10 	.word	0x20010e10

080022fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b0b4      	sub	sp, #208	; 0xd0
 8002300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002302:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002306:	2230      	movs	r2, #48	; 0x30
 8002308:	2100      	movs	r1, #0
 800230a:	4618      	mov	r0, r3
 800230c:	f006 ffc1 	bl	8009292 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002310:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002320:	f107 030c 	add.w	r3, r7, #12
 8002324:	2280      	movs	r2, #128	; 0x80
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f006 ffb2 	bl	8009292 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	4b3c      	ldr	r3, [pc, #240]	; (8002420 <SystemClock_Config+0x124>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a3b      	ldr	r2, [pc, #236]	; (8002420 <SystemClock_Config+0x124>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b39      	ldr	r3, [pc, #228]	; (8002420 <SystemClock_Config+0x124>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002346:	4b37      	ldr	r3, [pc, #220]	; (8002424 <SystemClock_Config+0x128>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a36      	ldr	r2, [pc, #216]	; (8002424 <SystemClock_Config+0x128>)
 800234c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	4b34      	ldr	r3, [pc, #208]	; (8002424 <SystemClock_Config+0x128>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800235e:	230a      	movs	r3, #10
 8002360:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002364:	2301      	movs	r3, #1
 8002366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = 10;
 800236a:	230a      	movs	r3, #10
 800236c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002370:	2301      	movs	r3, #1
 8002372:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002376:	2302      	movs	r3, #2
 8002378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800237c:	2300      	movs	r3, #0
 800237e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002382:	2308      	movs	r3, #8
 8002384:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002388:	23d8      	movs	r3, #216	; 0xd8
 800238a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800238e:	2302      	movs	r3, #2
 8002390:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002394:	2309      	movs	r3, #9
 8002396:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800239a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 fce4 	bl	8005d6c <HAL_RCC_OscConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80023aa:	f000 fc87 	bl	8002cbc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80023ae:	f003 fc8d 	bl	8005ccc <HAL_PWREx_EnableOverDrive>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80023b8:	f000 fc80 	bl	8002cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023bc:	230f      	movs	r3, #15
 80023be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023c2:	2302      	movs	r3, #2
 80023c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80023de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80023e2:	2107      	movs	r1, #7
 80023e4:	4618      	mov	r0, r3
 80023e6:	f003 ff65 	bl	80062b4 <HAL_RCC_ClockConfig>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80023f0:	f000 fc64 	bl	8002cbc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_CLK48;
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <SystemClock_Config+0x12c>)
 80023f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023f8:	2300      	movs	r3, #0
 80023fa:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002402:	f107 030c 	add.w	r3, r7, #12
 8002406:	4618      	mov	r0, r3
 8002408:	f004 f926 	bl	8006658 <HAL_RCCEx_PeriphCLKConfig>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8002412:	f000 fc53 	bl	8002cbc <Error_Handler>
  }
}
 8002416:	bf00      	nop
 8002418:	37d0      	adds	r7, #208	; 0xd0
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	40007000 	.word	0x40007000
 8002428:	00200040 	.word	0x00200040

0800242c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002432:	463b      	mov	r3, r7
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800243e:	4b2a      	ldr	r3, [pc, #168]	; (80024e8 <MX_ADC1_Init+0xbc>)
 8002440:	4a2a      	ldr	r2, [pc, #168]	; (80024ec <MX_ADC1_Init+0xc0>)
 8002442:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002444:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <MX_ADC1_Init+0xbc>)
 8002446:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800244a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800244c:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <MX_ADC1_Init+0xbc>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002452:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <MX_ADC1_Init+0xbc>)
 8002454:	2201      	movs	r2, #1
 8002456:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002458:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <MX_ADC1_Init+0xbc>)
 800245a:	2200      	movs	r2, #0
 800245c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800245e:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <MX_ADC1_Init+0xbc>)
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <MX_ADC1_Init+0xbc>)
 8002468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800246c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800246e:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <MX_ADC1_Init+0xbc>)
 8002470:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002474:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8002476:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <MX_ADC1_Init+0xbc>)
 8002478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800247c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <MX_ADC1_Init+0xbc>)
 8002480:	2202      	movs	r2, #2
 8002482:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002484:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <MX_ADC1_Init+0xbc>)
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <MX_ADC1_Init+0xbc>)
 800248e:	2200      	movs	r2, #0
 8002490:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002492:	4815      	ldr	r0, [pc, #84]	; (80024e8 <MX_ADC1_Init+0xbc>)
 8002494:	f002 f910 	bl	80046b8 <HAL_ADC_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 800249e:	f000 fc0d 	bl	8002cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80024a2:	230c      	movs	r3, #12
 80024a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024ae:	463b      	mov	r3, r7
 80024b0:	4619      	mov	r1, r3
 80024b2:	480d      	ldr	r0, [pc, #52]	; (80024e8 <MX_ADC1_Init+0xbc>)
 80024b4:	f002 f944 	bl	8004740 <HAL_ADC_ConfigChannel>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80024be:	f000 fbfd 	bl	8002cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80024c2:	230d      	movs	r3, #13
 80024c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80024c6:	2302      	movs	r3, #2
 80024c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024ca:	463b      	mov	r3, r7
 80024cc:	4619      	mov	r1, r3
 80024ce:	4806      	ldr	r0, [pc, #24]	; (80024e8 <MX_ADC1_Init+0xbc>)
 80024d0:	f002 f936 	bl	8004740 <HAL_ADC_ConfigChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80024da:	f000 fbef 	bl	8002cbc <Error_Handler>
  */
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20016ea0 	.word	0x20016ea0
 80024ec:	40012000 	.word	0x40012000

080024f0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <MX_CRC_Init+0x50>)
 80024f6:	4a13      	ldr	r2, [pc, #76]	; (8002544 <MX_CRC_Init+0x54>)
 80024f8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <MX_CRC_Init+0x50>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002500:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <MX_CRC_Init+0x50>)
 8002502:	2201      	movs	r2, #1
 8002504:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = CRC_POLY;
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <MX_CRC_Init+0x50>)
 8002508:	f24a 0201 	movw	r2, #40961	; 0xa001
 800250c:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800250e:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <MX_CRC_Init+0x50>)
 8002510:	2208      	movs	r2, #8
 8002512:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8002514:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <MX_CRC_Init+0x50>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <MX_CRC_Init+0x50>)
 800251c:	2220      	movs	r2, #32
 800251e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8002520:	4b07      	ldr	r3, [pc, #28]	; (8002540 <MX_CRC_Init+0x50>)
 8002522:	2280      	movs	r2, #128	; 0x80
 8002524:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <MX_CRC_Init+0x50>)
 8002528:	2201      	movs	r2, #1
 800252a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800252c:	4804      	ldr	r0, [pc, #16]	; (8002540 <MX_CRC_Init+0x50>)
 800252e:	f002 fc5d 	bl	8004dec <HAL_CRC_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8002538:	f000 fbc0 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20016d7c 	.word	0x20016d7c
 8002544:	40023000 	.word	0x40023000

08002548 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MX_RNG_Init+0x20>)
 800254e:	4a07      	ldr	r2, [pc, #28]	; (800256c <MX_RNG_Init+0x24>)
 8002550:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <MX_RNG_Init+0x20>)
 8002554:	f004 fbc8 	bl	8006ce8 <HAL_RNG_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800255e:	f000 fbad 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20017028 	.word	0x20017028
 800256c:	50060800 	.word	0x50060800

08002570 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <MX_SPI2_Init+0x74>)
 8002576:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <MX_SPI2_Init+0x78>)
 8002578:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <MX_SPI2_Init+0x74>)
 800257c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002580:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002582:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <MX_SPI2_Init+0x74>)
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002588:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <MX_SPI2_Init+0x74>)
 800258a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800258e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <MX_SPI2_Init+0x74>)
 8002592:	2200      	movs	r2, #0
 8002594:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <MX_SPI2_Init+0x74>)
 8002598:	2200      	movs	r2, #0
 800259a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <MX_SPI2_Init+0x74>)
 800259e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <MX_SPI2_Init+0x74>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <MX_SPI2_Init+0x74>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <MX_SPI2_Init+0x74>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <MX_SPI2_Init+0x74>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <MX_SPI2_Init+0x74>)
 80025be:	2207      	movs	r2, #7
 80025c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <MX_SPI2_Init+0x74>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <MX_SPI2_Init+0x74>)
 80025ca:	2208      	movs	r2, #8
 80025cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025ce:	4805      	ldr	r0, [pc, #20]	; (80025e4 <MX_SPI2_Init+0x74>)
 80025d0:	f004 fbb4 	bl	8006d3c <HAL_SPI_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80025da:	f000 fb6f 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20016c28 	.word	0x20016c28
 80025e8:	40003800 	.word	0x40003800

080025ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f2:	f107 031c 	add.w	r3, r7, #28
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025fe:	463b      	mov	r3, r7
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
 800260c:	615a      	str	r2, [r3, #20]
 800260e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <MX_TIM3_Init+0xd4>)
 8002612:	4a2c      	ldr	r2, [pc, #176]	; (80026c4 <MX_TIM3_Init+0xd8>)
 8002614:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 50 / 5120) - 1; //This is to set prescaler to 1 MHz
 8002616:	f003 fff7 	bl	8006608 <HAL_RCC_GetPCLK1Freq>
 800261a:	4603      	mov	r3, r0
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4a2a      	ldr	r2, [pc, #168]	; (80026c8 <MX_TIM3_Init+0xdc>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	0b9b      	lsrs	r3, r3, #14
 8002626:	3b01      	subs	r3, #1
 8002628:	4a25      	ldr	r2, [pc, #148]	; (80026c0 <MX_TIM3_Init+0xd4>)
 800262a:	6053      	str	r3, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262c:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <MX_TIM3_Init+0xd4>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5119;
 8002632:	4b23      	ldr	r3, [pc, #140]	; (80026c0 <MX_TIM3_Init+0xd4>)
 8002634:	f241 32ff 	movw	r2, #5119	; 0x13ff
 8002638:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800263a:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <MX_TIM3_Init+0xd4>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002640:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <MX_TIM3_Init+0xd4>)
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002646:	481e      	ldr	r0, [pc, #120]	; (80026c0 <MX_TIM3_Init+0xd4>)
 8002648:	f004 fda8 	bl	800719c <HAL_TIM_PWM_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8002652:	f000 fb33 	bl	8002cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800265e:	f107 031c 	add.w	r3, r7, #28
 8002662:	4619      	mov	r1, r3
 8002664:	4816      	ldr	r0, [pc, #88]	; (80026c0 <MX_TIM3_Init+0xd4>)
 8002666:	f005 fceb 	bl	8008040 <HAL_TIMEx_MasterConfigSynchronization>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002670:	f000 fb24 	bl	8002cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002674:	2360      	movs	r3, #96	; 0x60
 8002676:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 256;
 8002678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800267c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002686:	463b      	mov	r3, r7
 8002688:	2208      	movs	r2, #8
 800268a:	4619      	mov	r1, r3
 800268c:	480c      	ldr	r0, [pc, #48]	; (80026c0 <MX_TIM3_Init+0xd4>)
 800268e:	f004 ff15 	bl	80074bc <HAL_TIM_PWM_ConfigChannel>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002698:	f000 fb10 	bl	8002cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800269c:	463b      	mov	r3, r7
 800269e:	220c      	movs	r2, #12
 80026a0:	4619      	mov	r1, r3
 80026a2:	4807      	ldr	r0, [pc, #28]	; (80026c0 <MX_TIM3_Init+0xd4>)
 80026a4:	f004 ff0a 	bl	80074bc <HAL_TIM_PWM_ConfigChannel>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 80026ae:	f000 fb05 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026b2:	4803      	ldr	r0, [pc, #12]	; (80026c0 <MX_TIM3_Init+0xd4>)
 80026b4:	f000 fdd4 	bl	8003260 <HAL_TIM_MspPostInit>

}
 80026b8:	bf00      	nop
 80026ba:	3728      	adds	r7, #40	; 0x28
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20016e00 	.word	0x20016e00
 80026c4:	40000400 	.word	0x40000400
 80026c8:	10624dd3 	.word	0x10624dd3

080026cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026d2:	463b      	mov	r3, r7
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <MX_TIM4_Init+0x78>)
 80026e0:	4a19      	ldr	r2, [pc, #100]	; (8002748 <MX_TIM4_Init+0x7c>)
 80026e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) - 1; //This is to set prescaler to 1 MHz
 80026e4:	f003 ff90 	bl	8006608 <HAL_RCC_GetPCLK1Freq>
 80026e8:	4603      	mov	r3, r0
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4a17      	ldr	r2, [pc, #92]	; (800274c <MX_TIM4_Init+0x80>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	0c9b      	lsrs	r3, r3, #18
 80026f4:	3b01      	subs	r3, #1
 80026f6:	4a13      	ldr	r2, [pc, #76]	; (8002744 <MX_TIM4_Init+0x78>)
 80026f8:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <MX_TIM4_Init+0x78>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 14;
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <MX_TIM4_Init+0x78>)
 8002702:	220e      	movs	r2, #14
 8002704:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <MX_TIM4_Init+0x78>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <MX_TIM4_Init+0x78>)
 800270e:	2200      	movs	r2, #0
 8002710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002712:	480c      	ldr	r0, [pc, #48]	; (8002744 <MX_TIM4_Init+0x78>)
 8002714:	f004 fcc3 	bl	800709e <HAL_TIM_Base_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800271e:	f000 facd 	bl	8002cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002726:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002728:	463b      	mov	r3, r7
 800272a:	4619      	mov	r1, r3
 800272c:	4805      	ldr	r0, [pc, #20]	; (8002744 <MX_TIM4_Init+0x78>)
 800272e:	f004 ffdd 	bl	80076ec <HAL_TIM_ConfigClockSource>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002738:	f000 fac0 	bl	8002cbc <Error_Handler>
  }

}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20016ccc 	.word	0x20016ccc
 8002748:	40000800 	.word	0x40000800
 800274c:	431bde83 	.word	0x431bde83

08002750 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002760:	4b1c      	ldr	r3, [pc, #112]	; (80027d4 <MX_TIM7_Init+0x84>)
 8002762:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <MX_TIM7_Init+0x88>)
 8002764:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <MX_TIM7_Init+0x84>)
 8002768:	2200      	movs	r2, #0
 800276a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276c:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <MX_TIM7_Init+0x84>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) / 2 - 1; //This is to set period to 2 MHz;
 8002772:	f003 ff49 	bl	8006608 <HAL_RCC_GetPCLK1Freq>
 8002776:	4603      	mov	r3, r0
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4a18      	ldr	r2, [pc, #96]	; (80027dc <MX_TIM7_Init+0x8c>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	0cdb      	lsrs	r3, r3, #19
 8002782:	3b01      	subs	r3, #1
 8002784:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <MX_TIM7_Init+0x84>)
 8002786:	60d3      	str	r3, [r2, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <MX_TIM7_Init+0x84>)
 800278a:	2200      	movs	r2, #0
 800278c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800278e:	4811      	ldr	r0, [pc, #68]	; (80027d4 <MX_TIM7_Init+0x84>)
 8002790:	f004 fc85 	bl	800709e <HAL_TIM_Base_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_TIM7_Init+0x4e>
  {
    Error_Handler();
 800279a:	f000 fa8f 	bl	8002cbc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 800279e:	2108      	movs	r1, #8
 80027a0:	480c      	ldr	r0, [pc, #48]	; (80027d4 <MX_TIM7_Init+0x84>)
 80027a2:	f004 fd26 	bl	80071f2 <HAL_TIM_OnePulse_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM7_Init+0x60>
  {
    Error_Handler();
 80027ac:	f000 fa86 	bl	8002cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80027b0:	2320      	movs	r3, #32
 80027b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	4619      	mov	r1, r3
 80027bc:	4805      	ldr	r0, [pc, #20]	; (80027d4 <MX_TIM7_Init+0x84>)
 80027be:	f005 fc3f 	bl	8008040 <HAL_TIMEx_MasterConfigSynchronization>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM7_Init+0x7c>
  {
    Error_Handler();
 80027c8:	f000 fa78 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80027cc:	bf00      	nop
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20017098 	.word	0x20017098
 80027d8:	40001400 	.word	0x40001400
 80027dc:	431bde83 	.word	0x431bde83

080027e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b096      	sub	sp, #88	; 0x58
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	60da      	str	r2, [r3, #12]
 8002800:	611a      	str	r2, [r3, #16]
 8002802:	615a      	str	r2, [r3, #20]
 8002804:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	222c      	movs	r2, #44	; 0x2c
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f006 fd40 	bl	8009292 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002812:	4b3d      	ldr	r3, [pc, #244]	; (8002908 <MX_TIM8_Init+0x128>)
 8002814:	4a3d      	ldr	r2, [pc, #244]	; (800290c <MX_TIM8_Init+0x12c>)
 8002816:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = (HAL_RCC_GetPCLK2Freq() * 2 / 1000000) - 1; //This is to set prescaler to 1 MHz
 8002818:	f003 ff0a 	bl	8006630 <HAL_RCC_GetPCLK2Freq>
 800281c:	4603      	mov	r3, r0
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4a3b      	ldr	r2, [pc, #236]	; (8002910 <MX_TIM8_Init+0x130>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	0c9b      	lsrs	r3, r3, #18
 8002828:	3b01      	subs	r3, #1
 800282a:	4a37      	ldr	r2, [pc, #220]	; (8002908 <MX_TIM8_Init+0x128>)
 800282c:	6053      	str	r3, [r2, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282e:	4b36      	ldr	r3, [pc, #216]	; (8002908 <MX_TIM8_Init+0x128>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8002834:	4b34      	ldr	r3, [pc, #208]	; (8002908 <MX_TIM8_Init+0x128>)
 8002836:	2231      	movs	r2, #49	; 0x31
 8002838:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283a:	4b33      	ldr	r3, [pc, #204]	; (8002908 <MX_TIM8_Init+0x128>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002840:	4b31      	ldr	r3, [pc, #196]	; (8002908 <MX_TIM8_Init+0x128>)
 8002842:	2200      	movs	r2, #0
 8002844:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002846:	4b30      	ldr	r3, [pc, #192]	; (8002908 <MX_TIM8_Init+0x128>)
 8002848:	2200      	movs	r2, #0
 800284a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800284c:	482e      	ldr	r0, [pc, #184]	; (8002908 <MX_TIM8_Init+0x128>)
 800284e:	f004 fca5 	bl	800719c <HAL_TIM_PWM_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002858:	f000 fa30 	bl	8002cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800285c:	2320      	movs	r3, #32
 800285e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002860:	2300      	movs	r3, #0
 8002862:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002868:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800286c:	4619      	mov	r1, r3
 800286e:	4826      	ldr	r0, [pc, #152]	; (8002908 <MX_TIM8_Init+0x128>)
 8002870:	f005 fbe6 	bl	8008040 <HAL_TIMEx_MasterConfigSynchronization>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800287a:	f000 fa1f 	bl	8002cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800287e:	2360      	movs	r3, #96	; 0x60
 8002880:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1;
 8002882:	2301      	movs	r3, #1
 8002884:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002886:	2300      	movs	r3, #0
 8002888:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800288a:	2308      	movs	r3, #8
 800288c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8002896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800289a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800289c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028a0:	2208      	movs	r2, #8
 80028a2:	4619      	mov	r1, r3
 80028a4:	4818      	ldr	r0, [pc, #96]	; (8002908 <MX_TIM8_Init+0x128>)
 80028a6:	f004 fe09 	bl	80074bc <HAL_TIM_PWM_ConfigChannel>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 80028b0:	f000 fa04 	bl	8002cbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80028d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028e0:	2300      	movs	r3, #0
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80028e4:	1d3b      	adds	r3, r7, #4
 80028e6:	4619      	mov	r1, r3
 80028e8:	4807      	ldr	r0, [pc, #28]	; (8002908 <MX_TIM8_Init+0x128>)
 80028ea:	f005 fc37 	bl	800815c <HAL_TIMEx_ConfigBreakDeadTime>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80028f4:	f000 f9e2 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80028f8:	4803      	ldr	r0, [pc, #12]	; (8002908 <MX_TIM8_Init+0x128>)
 80028fa:	f000 fcb1 	bl	8003260 <HAL_TIM_MspPostInit>

}
 80028fe:	bf00      	nop
 8002900:	3758      	adds	r7, #88	; 0x58
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20016c8c 	.word	0x20016c8c
 800290c:	40010400 	.word	0x40010400
 8002910:	431bde83 	.word	0x431bde83

08002914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002918:	4b17      	ldr	r3, [pc, #92]	; (8002978 <MX_USART1_UART_Init+0x64>)
 800291a:	4a18      	ldr	r2, [pc, #96]	; (800297c <MX_USART1_UART_Init+0x68>)
 800291c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3375000;
 800291e:	4b16      	ldr	r3, [pc, #88]	; (8002978 <MX_USART1_UART_Init+0x64>)
 8002920:	4a17      	ldr	r2, [pc, #92]	; (8002980 <MX_USART1_UART_Init+0x6c>)
 8002922:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002924:	4b14      	ldr	r3, [pc, #80]	; (8002978 <MX_USART1_UART_Init+0x64>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800292a:	4b13      	ldr	r3, [pc, #76]	; (8002978 <MX_USART1_UART_Init+0x64>)
 800292c:	2200      	movs	r2, #0
 800292e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <MX_USART1_UART_Init+0x64>)
 8002932:	2200      	movs	r2, #0
 8002934:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <MX_USART1_UART_Init+0x64>)
 8002938:	220c      	movs	r2, #12
 800293a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800293c:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <MX_USART1_UART_Init+0x64>)
 800293e:	2200      	movs	r2, #0
 8002940:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002942:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <MX_USART1_UART_Init+0x64>)
 8002944:	2200      	movs	r2, #0
 8002946:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <MX_USART1_UART_Init+0x64>)
 800294a:	2200      	movs	r2, #0
 800294c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <MX_USART1_UART_Init+0x64>)
 8002950:	2240      	movs	r2, #64	; 0x40
 8002952:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <MX_USART1_UART_Init+0x64>)
 8002956:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800295a:	641a      	str	r2, [r3, #64]	; 0x40
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME;
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <MX_USART1_UART_Init+0x64>)
 800295e:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8002962:	645a      	str	r2, [r3, #68]	; 0x44
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002964:	4804      	ldr	r0, [pc, #16]	; (8002978 <MX_USART1_UART_Init+0x64>)
 8002966:	f005 fcba 	bl	80082de <HAL_UART_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8002970:	f000 f9a4 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002974:	bf00      	nop
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20016f48 	.word	0x20016f48
 800297c:	40011000 	.word	0x40011000
 8002980:	00337f98 	.word	0x00337f98

08002984 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800298a:	4b26      	ldr	r3, [pc, #152]	; (8002a24 <MX_DMA_Init+0xa0>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a25      	ldr	r2, [pc, #148]	; (8002a24 <MX_DMA_Init+0xa0>)
 8002990:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <MX_DMA_Init+0xa0>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299e:	607b      	str	r3, [r7, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <MX_DMA_Init+0xa0>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4a1f      	ldr	r2, [pc, #124]	; (8002a24 <MX_DMA_Init+0xa0>)
 80029a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029ac:	6313      	str	r3, [r2, #48]	; 0x30
 80029ae:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <MX_DMA_Init+0xa0>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0); //TIM7_UP
 80029ba:	2200      	movs	r2, #0
 80029bc:	2105      	movs	r1, #5
 80029be:	200d      	movs	r0, #13
 80029c0:	f002 f9dd 	bl	8004d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80029c4:	200d      	movs	r0, #13
 80029c6:	f002 f9f6 	bl	8004db6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 15, 0); //SPI2_RX
 80029ca:	2200      	movs	r2, #0
 80029cc:	210f      	movs	r1, #15
 80029ce:	200e      	movs	r0, #14
 80029d0:	f002 f9d5 	bl	8004d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80029d4:	200e      	movs	r0, #14
 80029d6:	f002 f9ee 	bl	8004db6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 15, 0); //SPI2_TX
 80029da:	2200      	movs	r2, #0
 80029dc:	210f      	movs	r1, #15
 80029de:	200f      	movs	r0, #15
 80029e0:	f002 f9cd 	bl	8004d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80029e4:	200f      	movs	r0, #15
 80029e6:	f002 f9e6 	bl	8004db6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 6, 0); //ADC1
 80029ea:	2200      	movs	r2, #0
 80029ec:	2106      	movs	r1, #6
 80029ee:	2038      	movs	r0, #56	; 0x38
 80029f0:	f002 f9c5 	bl	8004d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80029f4:	2038      	movs	r0, #56	; 0x38
 80029f6:	f002 f9de 	bl	8004db6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 8, 0); //USART1_RX
 80029fa:	2200      	movs	r2, #0
 80029fc:	2108      	movs	r1, #8
 80029fe:	203a      	movs	r0, #58	; 0x3a
 8002a00:	f002 f9bd 	bl	8004d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002a04:	203a      	movs	r0, #58	; 0x3a
 8002a06:	f002 f9d6 	bl	8004db6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 9, 0); //USART1_TX
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2109      	movs	r1, #9
 8002a0e:	2046      	movs	r0, #70	; 0x46
 8002a10:	f002 f9b5 	bl	8004d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002a14:	2046      	movs	r0, #70	; 0x46
 8002a16:	f002 f9ce 	bl	8004db6 <HAL_NVIC_EnableIRQ>

}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800

08002a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08a      	sub	sp, #40	; 0x28
 8002a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	609a      	str	r2, [r3, #8]
 8002a3a:	60da      	str	r2, [r3, #12]
 8002a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a3e:	4b97      	ldr	r3, [pc, #604]	; (8002c9c <MX_GPIO_Init+0x274>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	4a96      	ldr	r2, [pc, #600]	; (8002c9c <MX_GPIO_Init+0x274>)
 8002a44:	f043 0304 	orr.w	r3, r3, #4
 8002a48:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4a:	4b94      	ldr	r3, [pc, #592]	; (8002c9c <MX_GPIO_Init+0x274>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a56:	4b91      	ldr	r3, [pc, #580]	; (8002c9c <MX_GPIO_Init+0x274>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a90      	ldr	r2, [pc, #576]	; (8002c9c <MX_GPIO_Init+0x274>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b8e      	ldr	r3, [pc, #568]	; (8002c9c <MX_GPIO_Init+0x274>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6e:	4b8b      	ldr	r3, [pc, #556]	; (8002c9c <MX_GPIO_Init+0x274>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4a8a      	ldr	r2, [pc, #552]	; (8002c9c <MX_GPIO_Init+0x274>)
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	4b88      	ldr	r3, [pc, #544]	; (8002c9c <MX_GPIO_Init+0x274>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a86:	4b85      	ldr	r3, [pc, #532]	; (8002c9c <MX_GPIO_Init+0x274>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	4a84      	ldr	r2, [pc, #528]	; (8002c9c <MX_GPIO_Init+0x274>)
 8002a8c:	f043 0308 	orr.w	r3, r3, #8
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
 8002a92:	4b82      	ldr	r3, [pc, #520]	; (8002c9c <MX_GPIO_Init+0x274>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	607b      	str	r3, [r7, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VDD3V3EN_Pin|SPI2_WP_Pin|RELAY_IGN_Pin, GPIO_PIN_RESET);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f240 4141 	movw	r1, #1089	; 0x441
 8002aa4:	487e      	ldr	r0, [pc, #504]	; (8002ca0 <MX_GPIO_Init+0x278>)
 8002aa6:	f003 f8cf 	bl	8005c48 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, IGN_14_Pin|IGN_23_Pin, GPIO_PIN_SET);
 8002aaa:	2201      	movs	r2, #1
 8002aac:	21c0      	movs	r1, #192	; 0xc0
 8002aae:	487d      	ldr	r0, [pc, #500]	; (8002ca4 <MX_GPIO_Init+0x27c>)
 8002ab0:	f003 f8ca 	bl	8005c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_nCE_Pin|LED_CHECK_Pin, GPIO_PIN_SET);
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	2190      	movs	r1, #144	; 0x90
 8002ab8:	4879      	ldr	r0, [pc, #484]	; (8002ca0 <MX_GPIO_Init+0x278>)
 8002aba:	f003 f8c5 	bl	8005c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8002abe:	2201      	movs	r2, #1
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	4878      	ldr	r0, [pc, #480]	; (8002ca4 <MX_GPIO_Init+0x27c>)
 8002ac4:	f003 f8c0 	bl	8005c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_FORMAT_Pin|ADC_BPO_Pin|SPI2_NSS_Pin|PROPANE_OUT_Pin
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f241 7104 	movw	r1, #5892	; 0x1704
 8002ace:	4875      	ldr	r0, [pc, #468]	; (8002ca4 <MX_GPIO_Init+0x27c>)
 8002ad0:	f003 f8ba 	bl	8005c48 <HAL_GPIO_WritePin>
                          |PETROL_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_START_GPIO_Port, RELAY_START_Pin, GPIO_PIN_RESET);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ada:	4873      	ldr	r0, [pc, #460]	; (8002ca8 <MX_GPIO_Init+0x280>)
 8002adc:	f003 f8b4 	bl	8005c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_RESET);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2104      	movs	r1, #4
 8002ae4:	4871      	ldr	r0, [pc, #452]	; (8002cac <MX_GPIO_Init+0x284>)
 8002ae6:	f003 f8af 	bl	8005c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SENS_CSPS_Pin */
  GPIO_InitStruct.Pin = SENS_CSPS_Pin;
 8002aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002af0:	4b6f      	ldr	r3, [pc, #444]	; (8002cb0 <MX_GPIO_Init+0x288>)
 8002af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002af4:	2302      	movs	r3, #2
 8002af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENS_CSPS_GPIO_Port, &GPIO_InitStruct);
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	4619      	mov	r1, r3
 8002afe:	4868      	ldr	r0, [pc, #416]	; (8002ca0 <MX_GPIO_Init+0x278>)
 8002b00:	f002 ff08 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_HALL_Pin */
  GPIO_InitStruct.Pin = SENS_HALL_Pin;
 8002b04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b0a:	4b6a      	ldr	r3, [pc, #424]	; (8002cb4 <MX_GPIO_Init+0x28c>)
 8002b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	4619      	mov	r1, r3
 8002b18:	4861      	ldr	r0, [pc, #388]	; (8002ca0 <MX_GPIO_Init+0x278>)
 8002b1a:	f002 fefb 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_ACC_Pin */
  GPIO_InitStruct.Pin = SENS_ACC_Pin;
 8002b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	4619      	mov	r1, r3
 8002b32:	485b      	ldr	r0, [pc, #364]	; (8002ca0 <MX_GPIO_Init+0x278>)
 8002b34:	f002 feee 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : VDD3V3EN_Pin ADC_nCE_Pin LED_CHECK_Pin RELAY_IGN_Pin */
  GPIO_InitStruct.Pin = VDD3V3EN_Pin|ADC_nCE_Pin|LED_CHECK_Pin|RELAY_IGN_Pin;
 8002b38:	f240 4391 	movw	r3, #1169	; 0x491
 8002b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4853      	ldr	r0, [pc, #332]	; (8002ca0 <MX_GPIO_Init+0x278>)
 8002b52:	f002 fedf 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC0_Pin ADC1_Pin ADC2_Pin ADC3_Pin
                           ADC4_Pin ADC5_Pin ADC6_Pin ADC7_Pin */
  GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin
 8002b56:	23ff      	movs	r3, #255	; 0xff
 8002b58:	617b      	str	r3, [r7, #20]
                          |ADC4_Pin|ADC5_Pin|ADC6_Pin|ADC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	484f      	ldr	r0, [pc, #316]	; (8002ca8 <MX_GPIO_Init+0x280>)
 8002b6a:	f002 fed3 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_nCS_Pin ADC_FORMAT_Pin ADC_BPO_Pin PROPANE_OUT_Pin
                           PETROL_OUT_Pin */
  GPIO_InitStruct.Pin = ADC_nCS_Pin|ADC_FORMAT_Pin|ADC_BPO_Pin|PROPANE_OUT_Pin
 8002b6e:	f240 7305 	movw	r3, #1797	; 0x705
 8002b72:	617b      	str	r3, [r7, #20]
                          |PETROL_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b74:	2301      	movs	r3, #1
 8002b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	4619      	mov	r1, r3
 8002b86:	4847      	ldr	r0, [pc, #284]	; (8002ca4 <MX_GPIO_Init+0x27c>)
 8002b88:	f002 fec4 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_STATUS_Pin */
  GPIO_InitStruct.Pin = ADC_STATUS_Pin;
 8002b8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b92:	4b49      	ldr	r3, [pc, #292]	; (8002cb8 <MX_GPIO_Init+0x290>)
 8002b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b96:	2302      	movs	r3, #2
 8002b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADC_STATUS_GPIO_Port, &GPIO_InitStruct);
 8002b9a:	f107 0314 	add.w	r3, r7, #20
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4840      	ldr	r0, [pc, #256]	; (8002ca4 <MX_GPIO_Init+0x27c>)
 8002ba2:	f002 feb7 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8002ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bac:	2301      	movs	r3, #1
 8002bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4839      	ldr	r0, [pc, #228]	; (8002ca4 <MX_GPIO_Init+0x27c>)
 8002bc0:	f002 fea8 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 8002bc4:	2340      	movs	r3, #64	; 0x40
 8002bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4831      	ldr	r0, [pc, #196]	; (8002ca0 <MX_GPIO_Init+0x278>)
 8002bdc:	f002 fe9a 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART1_COMM_Pin MCU_IGN_Pin */
  GPIO_InitStruct.Pin = USART1_COMM_Pin|MCU_IGN_Pin;
 8002be0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bea:	2301      	movs	r3, #1
 8002bec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bee:	f107 0314 	add.w	r3, r7, #20
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	482c      	ldr	r0, [pc, #176]	; (8002ca8 <MX_GPIO_Init+0x280>)
 8002bf6:	f002 fe8d 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_START_Pin */
  GPIO_InitStruct.Pin = RELAY_START_Pin;
 8002bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c00:	2301      	movs	r3, #1
 8002c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY_START_GPIO_Port, &GPIO_InitStruct);
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	4619      	mov	r1, r3
 8002c12:	4825      	ldr	r0, [pc, #148]	; (8002ca8 <MX_GPIO_Init+0x280>)
 8002c14:	f002 fe7e 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_PARK_Pin SENS_GEAR_Pin */
  GPIO_InitStruct.Pin = SENS_PARK_Pin|SENS_GEAR_Pin;
 8002c18:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c26:	f107 0314 	add.w	r3, r7, #20
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	481c      	ldr	r0, [pc, #112]	; (8002ca0 <MX_GPIO_Init+0x278>)
 8002c2e:	f002 fe71 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECON_Pin */
  GPIO_InitStruct.Pin = ECON_Pin;
 8002c32:	2304      	movs	r3, #4
 8002c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c36:	2301      	movs	r3, #1
 8002c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ECON_GPIO_Port, &GPIO_InitStruct);
 8002c42:	f107 0314 	add.w	r3, r7, #20
 8002c46:	4619      	mov	r1, r3
 8002c48:	4818      	ldr	r0, [pc, #96]	; (8002cac <MX_GPIO_Init+0x284>)
 8002c4a:	f002 fe63 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROPANE_IN_Pin PETROL_IN_Pin */
  GPIO_InitStruct.Pin = PROPANE_IN_Pin|PETROL_IN_Pin;
 8002c4e:	2330      	movs	r3, #48	; 0x30
 8002c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c56:	2301      	movs	r3, #1
 8002c58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c5a:	f107 0314 	add.w	r3, r7, #20
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4810      	ldr	r0, [pc, #64]	; (8002ca4 <MX_GPIO_Init+0x27c>)
 8002c62:	f002 fe57 	bl	8005914 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = IGN_23_Pin|IGN_14_Pin;
 8002c66:	23c0      	movs	r3, #192	; 0xc0
 8002c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c72:	2303      	movs	r3, #3
 8002c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c76:	f107 0314 	add.w	r3, r7, #20
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4809      	ldr	r0, [pc, #36]	; (8002ca4 <MX_GPIO_Init+0x27c>)
 8002c7e:	f002 fe49 	bl	8005914 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8002c82:	2200      	movs	r2, #0
 8002c84:	2102      	movs	r1, #2
 8002c86:	2028      	movs	r0, #40	; 0x28
 8002c88:	f002 f879 	bl	8004d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c8c:	2028      	movs	r0, #40	; 0x28
 8002c8e:	f002 f892 	bl	8004db6 <HAL_NVIC_EnableIRQ>

}
 8002c92:	bf00      	nop
 8002c94:	3728      	adds	r7, #40	; 0x28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40020800 	.word	0x40020800
 8002ca4:	40020400 	.word	0x40020400
 8002ca8:	40020000 	.word	0x40020000
 8002cac:	40020c00 	.word	0x40020c00
 8002cb0:	10310000 	.word	0x10310000
 8002cb4:	10110000 	.word	0x10110000
 8002cb8:	10210000 	.word	0x10210000

08002cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cc2:	e7fe      	b.n	8002cc2 <Error_Handler+0x6>

08002cc4 <map_init>:
#define REF_VOLTAGE 3.32f
#define RES_DIVIDER 1.467f


void map_init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ADC_FORMAT_GPIO_Port, ADC_FORMAT_Pin, GPIO_PIN_RESET);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2104      	movs	r1, #4
 8002ccc:	480c      	ldr	r0, [pc, #48]	; (8002d00 <map_init+0x3c>)
 8002cce:	f002 ffbb 	bl	8005c48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_BPO_GPIO_Port, ADC_BPO_Pin, GPIO_PIN_RESET);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cd8:	4809      	ldr	r0, [pc, #36]	; (8002d00 <map_init+0x3c>)
 8002cda:	f002 ffb5 	bl	8005c48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nCE_GPIO_Port, ADC_nCE_Pin, GPIO_PIN_RESET);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2110      	movs	r1, #16
 8002ce2:	4808      	ldr	r0, [pc, #32]	; (8002d04 <map_init+0x40>)
 8002ce4:	f002 ffb0 	bl	8005c48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2101      	movs	r1, #1
 8002cec:	4804      	ldr	r0, [pc, #16]	; (8002d00 <map_init+0x3c>)
 8002cee:	f002 ffab 	bl	8005c48 <HAL_GPIO_WritePin>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8002cf2:	2108      	movs	r1, #8
 8002cf4:	4804      	ldr	r0, [pc, #16]	; (8002d08 <map_init+0x44>)
 8002cf6:	f005 f973 	bl	8007fe0 <HAL_TIMEx_PWMN_Start>
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40020400 	.word	0x40020400
 8002d04:	40020800 	.word	0x40020800
 8002d08:	20016c8c 	.word	0x20016c8c

08002d0c <map_adc_read>:

inline void map_adc_read(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
  uint8_t portdata = GPIOA->IDR & 0xFF;
 8002d12:	4b26      	ldr	r3, [pc, #152]	; (8002dac <map_adc_read+0xa0>)
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	72fb      	strb	r3, [r7, #11]
  float voltage = portdata / 50.0f;
 8002d18:	7afb      	ldrb	r3, [r7, #11]
 8002d1a:	ee07 3a90 	vmov	s15, r3
 8002d1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d22:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002db0 <map_adc_read+0xa4>
 8002d26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d2a:	edc7 7a01 	vstr	s15, [r7, #4]
  if(voltage < 0.3f) map_error = 1;
 8002d2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d32:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002db4 <map_adc_read+0xa8>
 8002d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3e:	d503      	bpl.n	8002d48 <map_adc_read+0x3c>
 8002d40:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <map_adc_read+0xac>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
 8002d46:	e002      	b.n	8002d4e <map_adc_read+0x42>
  else map_error = 0;
 8002d48:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <map_adc_read+0xac>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
  float pressure = (voltage - 0.5f) * 25517.0f;
 8002d4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d5a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002dbc <map_adc_read+0xb0>
 8002d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d62:	edc7 7a03 	vstr	s15, [r7, #12]
  if(pressure < 0.0f)
 8002d66:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d72:	d502      	bpl.n	8002d7a <map_adc_read+0x6e>
    pressure = 0.0f;
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
  map_data = map_data * (1.0f - lowpass_koff) + pressure * lowpass_koff;
 8002d7a:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <map_adc_read+0xb4>)
 8002d7c:	edd3 7a00 	vldr	s15, [r3]
 8002d80:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002dc4 <map_adc_read+0xb8>
 8002d84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d88:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d8c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002dc8 <map_adc_read+0xbc>
 8002d90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <map_adc_read+0xb4>)
 8002d9a:	edc3 7a00 	vstr	s15, [r3]
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40020000 	.word	0x40020000
 8002db0:	42480000 	.word	0x42480000
 8002db4:	3e99999a 	.word	0x3e99999a
 8002db8:	20010e11 	.word	0x20010e11
 8002dbc:	46c75a00 	.word	0x46c75a00
 8002dc0:	20010010 	.word	0x20010010
 8002dc4:	3f733333 	.word	0x3f733333
 8002dc8:	3d4ccccd 	.word	0x3d4ccccd

08002dcc <map_getpressure>:

inline float map_getpressure(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return map_data;
 8002dd0:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <map_getpressure+0x18>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	ee07 3a90 	vmov	s15, r3
}
 8002dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	20010010 	.word	0x20010010

08002de8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <HAL_MspInit+0x44>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <HAL_MspInit+0x44>)
 8002df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <HAL_MspInit+0x44>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e02:	607b      	str	r3, [r7, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e06:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_MspInit+0x44>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	4a08      	ldr	r2, [pc, #32]	; (8002e2c <HAL_MspInit+0x44>)
 8002e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e10:	6453      	str	r3, [r2, #68]	; 0x44
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_MspInit+0x44>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800

08002e30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a33      	ldr	r2, [pc, #204]	; (8002f1c <HAL_ADC_MspInit+0xec>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d15f      	bne.n	8002f12 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e52:	4b33      	ldr	r3, [pc, #204]	; (8002f20 <HAL_ADC_MspInit+0xf0>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	4a32      	ldr	r2, [pc, #200]	; (8002f20 <HAL_ADC_MspInit+0xf0>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e5e:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <HAL_ADC_MspInit+0xf0>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <HAL_ADC_MspInit+0xf0>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	4a2c      	ldr	r2, [pc, #176]	; (8002f20 <HAL_ADC_MspInit+0xf0>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30
 8002e76:	4b2a      	ldr	r3, [pc, #168]	; (8002f20 <HAL_ADC_MspInit+0xf0>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e82:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <HAL_ADC_MspInit+0xf0>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <HAL_ADC_MspInit+0xf0>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_ADC_MspInit+0xf0>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_12_TEMP_Pin|ADC1_13_BAT_Pin;
 8002e9a:	230c      	movs	r3, #12
 8002e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ea6:	f107 0314 	add.w	r3, r7, #20
 8002eaa:	4619      	mov	r1, r3
 8002eac:	481d      	ldr	r0, [pc, #116]	; (8002f24 <HAL_ADC_MspInit+0xf4>)
 8002eae:	f002 fd31 	bl	8005914 <HAL_GPIO_Init>
    //GPIO_InitStruct.Pull = GPIO_NOPULL;
    //HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_ADC_MspInit+0xf8>)
 8002eb4:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <HAL_ADC_MspInit+0xfc>)
 8002eb6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <HAL_ADC_MspInit+0xf8>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <HAL_ADC_MspInit+0xf8>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ec4:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_ADC_MspInit+0xf8>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002eca:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <HAL_ADC_MspInit+0xf8>)
 8002ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ed0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <HAL_ADC_MspInit+0xf8>)
 8002ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ed8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002eda:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <HAL_ADC_MspInit+0xf8>)
 8002edc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ee0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ee2:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <HAL_ADC_MspInit+0xf8>)
 8002ee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ee8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002eea:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <HAL_ADC_MspInit+0xf8>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <HAL_ADC_MspInit+0xf8>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ef6:	480c      	ldr	r0, [pc, #48]	; (8002f28 <HAL_ADC_MspInit+0xf8>)
 8002ef8:	f002 f974 	bl	80051e4 <HAL_DMA_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8002f02:	f7ff fedb 	bl	8002cbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a07      	ldr	r2, [pc, #28]	; (8002f28 <HAL_ADC_MspInit+0xf8>)
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f0c:	4a06      	ldr	r2, [pc, #24]	; (8002f28 <HAL_ADC_MspInit+0xf8>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f12:	bf00      	nop
 8002f14:	3728      	adds	r7, #40	; 0x28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40012000 	.word	0x40012000
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40020800 	.word	0x40020800
 8002f28:	20016fc8 	.word	0x20016fc8
 8002f2c:	40026410 	.word	0x40026410

08002f30 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <HAL_CRC_MspInit+0x38>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d10b      	bne.n	8002f5a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <HAL_CRC_MspInit+0x3c>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <HAL_CRC_MspInit+0x3c>)
 8002f48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4e:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <HAL_CRC_MspInit+0x3c>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002f5a:	bf00      	nop
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40023000 	.word	0x40023000
 8002f6c:	40023800 	.word	0x40023800

08002f70 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <HAL_RNG_MspInit+0x38>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d10b      	bne.n	8002f9a <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002f82:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <HAL_RNG_MspInit+0x3c>)
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_RNG_MspInit+0x3c>)
 8002f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f8c:	6353      	str	r3, [r2, #52]	; 0x34
 8002f8e:	4b07      	ldr	r3, [pc, #28]	; (8002fac <HAL_RNG_MspInit+0x3c>)
 8002f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002f9a:	bf00      	nop
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	50060800 	.word	0x50060800
 8002fac:	40023800 	.word	0x40023800

08002fb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	; 0x28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a49      	ldr	r2, [pc, #292]	; (80030f4 <HAL_SPI_MspInit+0x144>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	f040 808b 	bne.w	80030ea <HAL_SPI_MspInit+0x13a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fd4:	4b48      	ldr	r3, [pc, #288]	; (80030f8 <HAL_SPI_MspInit+0x148>)
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	4a47      	ldr	r2, [pc, #284]	; (80030f8 <HAL_SPI_MspInit+0x148>)
 8002fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fde:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe0:	4b45      	ldr	r3, [pc, #276]	; (80030f8 <HAL_SPI_MspInit+0x148>)
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fec:	4b42      	ldr	r3, [pc, #264]	; (80030f8 <HAL_SPI_MspInit+0x148>)
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	4a41      	ldr	r2, [pc, #260]	; (80030f8 <HAL_SPI_MspInit+0x148>)
 8002ff2:	f043 0302 	orr.w	r3, r3, #2
 8002ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff8:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <HAL_SPI_MspInit+0x148>)
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003004:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800300e:	2301      	movs	r3, #1
 8003010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003012:	2303      	movs	r3, #3
 8003014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003016:	2305      	movs	r3, #5
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301a:	f107 0314 	add.w	r3, r7, #20
 800301e:	4619      	mov	r1, r3
 8003020:	4836      	ldr	r0, [pc, #216]	; (80030fc <HAL_SPI_MspInit+0x14c>)
 8003022:	f002 fc77 	bl	8005914 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003026:	4b36      	ldr	r3, [pc, #216]	; (8003100 <HAL_SPI_MspInit+0x150>)
 8003028:	4a36      	ldr	r2, [pc, #216]	; (8003104 <HAL_SPI_MspInit+0x154>)
 800302a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800302c:	4b34      	ldr	r3, [pc, #208]	; (8003100 <HAL_SPI_MspInit+0x150>)
 800302e:	2200      	movs	r2, #0
 8003030:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003032:	4b33      	ldr	r3, [pc, #204]	; (8003100 <HAL_SPI_MspInit+0x150>)
 8003034:	2240      	movs	r2, #64	; 0x40
 8003036:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003038:	4b31      	ldr	r3, [pc, #196]	; (8003100 <HAL_SPI_MspInit+0x150>)
 800303a:	2200      	movs	r2, #0
 800303c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800303e:	4b30      	ldr	r3, [pc, #192]	; (8003100 <HAL_SPI_MspInit+0x150>)
 8003040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003044:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003046:	4b2e      	ldr	r3, [pc, #184]	; (8003100 <HAL_SPI_MspInit+0x150>)
 8003048:	2200      	movs	r2, #0
 800304a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800304c:	4b2c      	ldr	r3, [pc, #176]	; (8003100 <HAL_SPI_MspInit+0x150>)
 800304e:	2200      	movs	r2, #0
 8003050:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003052:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <HAL_SPI_MspInit+0x150>)
 8003054:	2200      	movs	r2, #0
 8003056:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003058:	4b29      	ldr	r3, [pc, #164]	; (8003100 <HAL_SPI_MspInit+0x150>)
 800305a:	2200      	movs	r2, #0
 800305c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800305e:	4b28      	ldr	r3, [pc, #160]	; (8003100 <HAL_SPI_MspInit+0x150>)
 8003060:	2200      	movs	r2, #0
 8003062:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003064:	4826      	ldr	r0, [pc, #152]	; (8003100 <HAL_SPI_MspInit+0x150>)
 8003066:	f002 f8bd 	bl	80051e4 <HAL_DMA_Init>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8003070:	f7ff fe24 	bl	8002cbc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a22      	ldr	r2, [pc, #136]	; (8003100 <HAL_SPI_MspInit+0x150>)
 8003078:	655a      	str	r2, [r3, #84]	; 0x54
 800307a:	4a21      	ldr	r2, [pc, #132]	; (8003100 <HAL_SPI_MspInit+0x150>)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003080:	4b21      	ldr	r3, [pc, #132]	; (8003108 <HAL_SPI_MspInit+0x158>)
 8003082:	4a22      	ldr	r2, [pc, #136]	; (800310c <HAL_SPI_MspInit+0x15c>)
 8003084:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_SPI_MspInit+0x158>)
 8003088:	2200      	movs	r2, #0
 800308a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800308c:	4b1e      	ldr	r3, [pc, #120]	; (8003108 <HAL_SPI_MspInit+0x158>)
 800308e:	2200      	movs	r2, #0
 8003090:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003092:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <HAL_SPI_MspInit+0x158>)
 8003094:	2200      	movs	r2, #0
 8003096:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003098:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <HAL_SPI_MspInit+0x158>)
 800309a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800309e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030a0:	4b19      	ldr	r3, [pc, #100]	; (8003108 <HAL_SPI_MspInit+0x158>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030a6:	4b18      	ldr	r3, [pc, #96]	; (8003108 <HAL_SPI_MspInit+0x158>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80030ac:	4b16      	ldr	r3, [pc, #88]	; (8003108 <HAL_SPI_MspInit+0x158>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <HAL_SPI_MspInit+0x158>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030b8:	4b13      	ldr	r3, [pc, #76]	; (8003108 <HAL_SPI_MspInit+0x158>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80030be:	4812      	ldr	r0, [pc, #72]	; (8003108 <HAL_SPI_MspInit+0x158>)
 80030c0:	f002 f890 	bl	80051e4 <HAL_DMA_Init>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_SPI_MspInit+0x11e>
    {
      Error_Handler();
 80030ca:	f7ff fdf7 	bl	8002cbc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <HAL_SPI_MspInit+0x158>)
 80030d2:	659a      	str	r2, [r3, #88]	; 0x58
 80030d4:	4a0c      	ldr	r2, [pc, #48]	; (8003108 <HAL_SPI_MspInit+0x158>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 14, 0);
 80030da:	2200      	movs	r2, #0
 80030dc:	210e      	movs	r1, #14
 80030de:	2024      	movs	r0, #36	; 0x24
 80030e0:	f001 fe4d 	bl	8004d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80030e4:	2024      	movs	r0, #36	; 0x24
 80030e6:	f001 fe66 	bl	8004db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80030ea:	bf00      	nop
 80030ec:	3728      	adds	r7, #40	; 0x28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40003800 	.word	0x40003800
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40020400 	.word	0x40020400
 8003100:	20017038 	.word	0x20017038
 8003104:	40026070 	.word	0x40026070
 8003108:	20016da0 	.word	0x20016da0
 800310c:	40026058 	.word	0x40026058

08003110 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a13      	ldr	r2, [pc, #76]	; (800316c <HAL_TIM_PWM_MspInit+0x5c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d10c      	bne.n	800313c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003122:	4b13      	ldr	r3, [pc, #76]	; (8003170 <HAL_TIM_PWM_MspInit+0x60>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <HAL_TIM_PWM_MspInit+0x60>)
 8003128:	f043 0302 	orr.w	r3, r3, #2
 800312c:	6413      	str	r3, [r2, #64]	; 0x40
 800312e:	4b10      	ldr	r3, [pc, #64]	; (8003170 <HAL_TIM_PWM_MspInit+0x60>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800313a:	e010      	b.n	800315e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <HAL_TIM_PWM_MspInit+0x64>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d10b      	bne.n	800315e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_TIM_PWM_MspInit+0x60>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	4a09      	ldr	r2, [pc, #36]	; (8003170 <HAL_TIM_PWM_MspInit+0x60>)
 800314c:	f043 0302 	orr.w	r3, r3, #2
 8003150:	6453      	str	r3, [r2, #68]	; 0x44
 8003152:	4b07      	ldr	r3, [pc, #28]	; (8003170 <HAL_TIM_PWM_MspInit+0x60>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]
}
 800315e:	bf00      	nop
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40000400 	.word	0x40000400
 8003170:	40023800 	.word	0x40023800
 8003174:	40010400 	.word	0x40010400

08003178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a31      	ldr	r2, [pc, #196]	; (800324c <HAL_TIM_Base_MspInit+0xd4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d114      	bne.n	80031b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800318a:	4b31      	ldr	r3, [pc, #196]	; (8003250 <HAL_TIM_Base_MspInit+0xd8>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	4a30      	ldr	r2, [pc, #192]	; (8003250 <HAL_TIM_Base_MspInit+0xd8>)
 8003190:	f043 0304 	orr.w	r3, r3, #4
 8003194:	6413      	str	r3, [r2, #64]	; 0x40
 8003196:	4b2e      	ldr	r3, [pc, #184]	; (8003250 <HAL_TIM_Base_MspInit+0xd8>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2103      	movs	r1, #3
 80031a6:	201e      	movs	r0, #30
 80031a8:	f001 fde9 	bl	8004d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031ac:	201e      	movs	r0, #30
 80031ae:	f001 fe02 	bl	8004db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80031b2:	e047      	b.n	8003244 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM7)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a26      	ldr	r2, [pc, #152]	; (8003254 <HAL_TIM_Base_MspInit+0xdc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d142      	bne.n	8003244 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80031be:	4b24      	ldr	r3, [pc, #144]	; (8003250 <HAL_TIM_Base_MspInit+0xd8>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	4a23      	ldr	r2, [pc, #140]	; (8003250 <HAL_TIM_Base_MspInit+0xd8>)
 80031c4:	f043 0320 	orr.w	r3, r3, #32
 80031c8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ca:	4b21      	ldr	r3, [pc, #132]	; (8003250 <HAL_TIM_Base_MspInit+0xd8>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim7_up.Instance = DMA1_Stream2;
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_TIM_Base_MspInit+0xe0>)
 80031d8:	4a20      	ldr	r2, [pc, #128]	; (800325c <HAL_TIM_Base_MspInit+0xe4>)
 80031da:	601a      	str	r2, [r3, #0]
    hdma_tim7_up.Init.Channel = DMA_CHANNEL_1;
 80031dc:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <HAL_TIM_Base_MspInit+0xe0>)
 80031de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031e2:	605a      	str	r2, [r3, #4]
    hdma_tim7_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031e4:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <HAL_TIM_Base_MspInit+0xe0>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
    hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80031ea:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <HAL_TIM_Base_MspInit+0xe0>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	60da      	str	r2, [r3, #12]
    hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 80031f0:	4b19      	ldr	r3, [pc, #100]	; (8003258 <HAL_TIM_Base_MspInit+0xe0>)
 80031f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031f6:	611a      	str	r2, [r3, #16]
    hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031f8:	4b17      	ldr	r3, [pc, #92]	; (8003258 <HAL_TIM_Base_MspInit+0xe0>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	615a      	str	r2, [r3, #20]
    hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031fe:	4b16      	ldr	r3, [pc, #88]	; (8003258 <HAL_TIM_Base_MspInit+0xe0>)
 8003200:	2200      	movs	r2, #0
 8003202:	619a      	str	r2, [r3, #24]
    hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 8003204:	4b14      	ldr	r3, [pc, #80]	; (8003258 <HAL_TIM_Base_MspInit+0xe0>)
 8003206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800320a:	61da      	str	r2, [r3, #28]
    hdma_tim7_up.Init.Priority = DMA_PRIORITY_LOW;
 800320c:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_TIM_Base_MspInit+0xe0>)
 800320e:	2200      	movs	r2, #0
 8003210:	621a      	str	r2, [r3, #32]
    hdma_tim7_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <HAL_TIM_Base_MspInit+0xe0>)
 8003214:	2200      	movs	r2, #0
 8003216:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 8003218:	480f      	ldr	r0, [pc, #60]	; (8003258 <HAL_TIM_Base_MspInit+0xe0>)
 800321a:	f001 ffe3 	bl	80051e4 <HAL_DMA_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_TIM_Base_MspInit+0xb0>
      Error_Handler();
 8003224:	f7ff fd4a 	bl	8002cbc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a0b      	ldr	r2, [pc, #44]	; (8003258 <HAL_TIM_Base_MspInit+0xe0>)
 800322c:	621a      	str	r2, [r3, #32]
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <HAL_TIM_Base_MspInit+0xe0>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003234:	2200      	movs	r2, #0
 8003236:	2105      	movs	r1, #5
 8003238:	2037      	movs	r0, #55	; 0x37
 800323a:	f001 fda0 	bl	8004d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800323e:	2037      	movs	r0, #55	; 0x37
 8003240:	f001 fdb9 	bl	8004db6 <HAL_NVIC_EnableIRQ>
}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40000800 	.word	0x40000800
 8003250:	40023800 	.word	0x40023800
 8003254:	40001400 	.word	0x40001400
 8003258:	20016d0c 	.word	0x20016d0c
 800325c:	40026040 	.word	0x40026040

08003260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08a      	sub	sp, #40	; 0x28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003268:	f107 0314 	add.w	r3, r7, #20
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a22      	ldr	r2, [pc, #136]	; (8003308 <HAL_TIM_MspPostInit+0xa8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d11d      	bne.n	80032be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003282:	4b22      	ldr	r3, [pc, #136]	; (800330c <HAL_TIM_MspPostInit+0xac>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a21      	ldr	r2, [pc, #132]	; (800330c <HAL_TIM_MspPostInit+0xac>)
 8003288:	f043 0304 	orr.w	r3, r3, #4
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b1f      	ldr	r3, [pc, #124]	; (800330c <HAL_TIM_MspPostInit+0xac>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH3_CHOKE_Pin|TIM3_CH4_ACC_Pin;
 800329a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800329e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a0:	2302      	movs	r3, #2
 80032a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032a4:	2302      	movs	r3, #2
 80032a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a8:	2303      	movs	r3, #3
 80032aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032ac:	2302      	movs	r3, #2
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	4619      	mov	r1, r3
 80032b6:	4816      	ldr	r0, [pc, #88]	; (8003310 <HAL_TIM_MspPostInit+0xb0>)
 80032b8:	f002 fb2c 	bl	8005914 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80032bc:	e020      	b.n	8003300 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a14      	ldr	r2, [pc, #80]	; (8003314 <HAL_TIM_MspPostInit+0xb4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d11b      	bne.n	8003300 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c8:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_TIM_MspPostInit+0xac>)
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	4a0f      	ldr	r2, [pc, #60]	; (800330c <HAL_TIM_MspPostInit+0xac>)
 80032ce:	f043 0302 	orr.w	r3, r3, #2
 80032d2:	6313      	str	r3, [r2, #48]	; 0x30
 80032d4:	4b0d      	ldr	r3, [pc, #52]	; (800330c <HAL_TIM_MspPostInit+0xac>)
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH3N_ADC_RW_Pin;
 80032e0:	2302      	movs	r3, #2
 80032e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e4:	2302      	movs	r3, #2
 80032e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032e8:	2301      	movs	r3, #1
 80032ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ec:	2303      	movs	r3, #3
 80032ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80032f0:	2303      	movs	r3, #3
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM8_CH3N_ADC_RW_GPIO_Port, &GPIO_InitStruct);
 80032f4:	f107 0314 	add.w	r3, r7, #20
 80032f8:	4619      	mov	r1, r3
 80032fa:	4807      	ldr	r0, [pc, #28]	; (8003318 <HAL_TIM_MspPostInit+0xb8>)
 80032fc:	f002 fb0a 	bl	8005914 <HAL_GPIO_Init>
}
 8003300:	bf00      	nop
 8003302:	3728      	adds	r7, #40	; 0x28
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40000400 	.word	0x40000400
 800330c:	40023800 	.word	0x40023800
 8003310:	40020800 	.word	0x40020800
 8003314:	40010400 	.word	0x40010400
 8003318:	40020400 	.word	0x40020400

0800331c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	; 0x28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003324:	f107 0314 	add.w	r3, r7, #20
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	60da      	str	r2, [r3, #12]
 8003332:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a4a      	ldr	r2, [pc, #296]	; (8003464 <HAL_UART_MspInit+0x148>)
 800333a:	4293      	cmp	r3, r2
 800333c:	f040 808e 	bne.w	800345c <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003340:	4b49      	ldr	r3, [pc, #292]	; (8003468 <HAL_UART_MspInit+0x14c>)
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	4a48      	ldr	r2, [pc, #288]	; (8003468 <HAL_UART_MspInit+0x14c>)
 8003346:	f043 0310 	orr.w	r3, r3, #16
 800334a:	6453      	str	r3, [r2, #68]	; 0x44
 800334c:	4b46      	ldr	r3, [pc, #280]	; (8003468 <HAL_UART_MspInit+0x14c>)
 800334e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003358:	4b43      	ldr	r3, [pc, #268]	; (8003468 <HAL_UART_MspInit+0x14c>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	4a42      	ldr	r2, [pc, #264]	; (8003468 <HAL_UART_MspInit+0x14c>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6313      	str	r3, [r2, #48]	; 0x30
 8003364:	4b40      	ldr	r3, [pc, #256]	; (8003468 <HAL_UART_MspInit+0x14c>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003370:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003376:	2302      	movs	r3, #2
 8003378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800337a:	2301      	movs	r3, #1
 800337c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337e:	2303      	movs	r3, #3
 8003380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003382:	2307      	movs	r3, #7
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003386:	f107 0314 	add.w	r3, r7, #20
 800338a:	4619      	mov	r1, r3
 800338c:	4837      	ldr	r0, [pc, #220]	; (800346c <HAL_UART_MspInit+0x150>)
 800338e:	f002 fac1 	bl	8005914 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003392:	4b37      	ldr	r3, [pc, #220]	; (8003470 <HAL_UART_MspInit+0x154>)
 8003394:	4a37      	ldr	r2, [pc, #220]	; (8003474 <HAL_UART_MspInit+0x158>)
 8003396:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003398:	4b35      	ldr	r3, [pc, #212]	; (8003470 <HAL_UART_MspInit+0x154>)
 800339a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800339e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033a0:	4b33      	ldr	r3, [pc, #204]	; (8003470 <HAL_UART_MspInit+0x154>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033a6:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_UART_MspInit+0x154>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033ac:	4b30      	ldr	r3, [pc, #192]	; (8003470 <HAL_UART_MspInit+0x154>)
 80033ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033b4:	4b2e      	ldr	r3, [pc, #184]	; (8003470 <HAL_UART_MspInit+0x154>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ba:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <HAL_UART_MspInit+0x154>)
 80033bc:	2200      	movs	r2, #0
 80033be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80033c0:	4b2b      	ldr	r3, [pc, #172]	; (8003470 <HAL_UART_MspInit+0x154>)
 80033c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033c6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033c8:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_UART_MspInit+0x154>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033ce:	4b28      	ldr	r3, [pc, #160]	; (8003470 <HAL_UART_MspInit+0x154>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80033d4:	4826      	ldr	r0, [pc, #152]	; (8003470 <HAL_UART_MspInit+0x154>)
 80033d6:	f001 ff05 	bl	80051e4 <HAL_DMA_Init>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80033e0:	f7ff fc6c 	bl	8002cbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a22      	ldr	r2, [pc, #136]	; (8003470 <HAL_UART_MspInit+0x154>)
 80033e8:	66da      	str	r2, [r3, #108]	; 0x6c
 80033ea:	4a21      	ldr	r2, [pc, #132]	; (8003470 <HAL_UART_MspInit+0x154>)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80033f0:	4b21      	ldr	r3, [pc, #132]	; (8003478 <HAL_UART_MspInit+0x15c>)
 80033f2:	4a22      	ldr	r2, [pc, #136]	; (800347c <HAL_UART_MspInit+0x160>)
 80033f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80033f6:	4b20      	ldr	r3, [pc, #128]	; (8003478 <HAL_UART_MspInit+0x15c>)
 80033f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033fe:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <HAL_UART_MspInit+0x15c>)
 8003400:	2240      	movs	r2, #64	; 0x40
 8003402:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003404:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <HAL_UART_MspInit+0x15c>)
 8003406:	2200      	movs	r2, #0
 8003408:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800340a:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <HAL_UART_MspInit+0x15c>)
 800340c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003410:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003412:	4b19      	ldr	r3, [pc, #100]	; (8003478 <HAL_UART_MspInit+0x15c>)
 8003414:	2200      	movs	r2, #0
 8003416:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003418:	4b17      	ldr	r3, [pc, #92]	; (8003478 <HAL_UART_MspInit+0x15c>)
 800341a:	2200      	movs	r2, #0
 800341c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800341e:	4b16      	ldr	r3, [pc, #88]	; (8003478 <HAL_UART_MspInit+0x15c>)
 8003420:	2200      	movs	r2, #0
 8003422:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_UART_MspInit+0x15c>)
 8003426:	2200      	movs	r2, #0
 8003428:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <HAL_UART_MspInit+0x15c>)
 800342c:	2200      	movs	r2, #0
 800342e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003430:	4811      	ldr	r0, [pc, #68]	; (8003478 <HAL_UART_MspInit+0x15c>)
 8003432:	f001 fed7 	bl	80051e4 <HAL_DMA_Init>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 800343c:	f7ff fc3e 	bl	8002cbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a0d      	ldr	r2, [pc, #52]	; (8003478 <HAL_UART_MspInit+0x15c>)
 8003444:	669a      	str	r2, [r3, #104]	; 0x68
 8003446:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <HAL_UART_MspInit+0x15c>)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 800344c:	2200      	movs	r2, #0
 800344e:	2107      	movs	r1, #7
 8003450:	2025      	movs	r0, #37	; 0x25
 8003452:	f001 fc94 	bl	8004d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003456:	2025      	movs	r0, #37	; 0x25
 8003458:	f001 fcad 	bl	8004db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800345c:	bf00      	nop
 800345e:	3728      	adds	r7, #40	; 0x28
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40011000 	.word	0x40011000
 8003468:	40023800 	.word	0x40023800
 800346c:	40020000 	.word	0x40020000
 8003470:	20016ee8 	.word	0x20016ee8
 8003474:	40026440 	.word	0x40026440
 8003478:	20016e40 	.word	0x20016e40
 800347c:	400264b8 	.word	0x400264b8

08003480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003484:	e7fe      	b.n	8003484 <NMI_Handler+0x4>

08003486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003486:	b480      	push	{r7}
 8003488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800348a:	e7fe      	b.n	800348a <HardFault_Handler+0x4>

0800348c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003490:	e7fe      	b.n	8003490 <MemManage_Handler+0x4>

08003492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003496:	e7fe      	b.n	8003496 <BusFault_Handler+0x4>

08003498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800349c:	e7fe      	b.n	800349c <UsageFault_Handler+0x4>

0800349e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ba:	b480      	push	{r7}
 80034bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034be:	bf00      	nop
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034cc:	f001 f8d4 	bl	8004678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034d0:	bf00      	nop
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim7_up);
 80034d8:	4802      	ldr	r0, [pc, #8]	; (80034e4 <DMA1_Stream2_IRQHandler+0x10>)
 80034da:	f001 ffb3 	bl	8005444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20016d0c 	.word	0x20016d0c

080034e8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80034ec:	4802      	ldr	r0, [pc, #8]	; (80034f8 <DMA1_Stream3_IRQHandler+0x10>)
 80034ee:	f001 ffa9 	bl	8005444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20016da0 	.word	0x20016da0

080034fc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003500:	4802      	ldr	r0, [pc, #8]	; (800350c <DMA1_Stream4_IRQHandler+0x10>)
 8003502:	f001 ff9f 	bl	8005444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20017038 	.word	0x20017038

08003510 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003514:	4802      	ldr	r0, [pc, #8]	; (8003520 <SPI2_IRQHandler+0x10>)
 8003516:	f003 fca3 	bl	8006e60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20016c28 	.word	0x20016c28

08003524 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003528:	4802      	ldr	r0, [pc, #8]	; (8003534 <USART1_IRQHandler+0x10>)
 800352a:	f005 f827 	bl	800857c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20016f48 	.word	0x20016f48

08003538 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800353c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003540:	f002 fb9c 	bl	8005c7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003544:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003548:	f002 fb98 	bl	8005c7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800354c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003550:	f002 fb94 	bl	8005c7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003554:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003558:	f002 fb90 	bl	8005c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800355c:	bf00      	nop
 800355e:	bd80      	pop	{r7, pc}

08003560 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003564:	4802      	ldr	r0, [pc, #8]	; (8003570 <TIM4_IRQHandler+0x10>)
 8003566:	f003 fe8a 	bl	800727e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20016ccc 	.word	0x20016ccc

08003574 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003578:	4802      	ldr	r0, [pc, #8]	; (8003584 <TIM7_IRQHandler+0x10>)
 800357a:	f003 fe80 	bl	800727e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800357e:	bf00      	nop
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20017098 	.word	0x20017098

08003588 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800358c:	4802      	ldr	r0, [pc, #8]	; (8003598 <DMA2_Stream0_IRQHandler+0x10>)
 800358e:	f001 ff59 	bl	8005444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20016fc8 	.word	0x20016fc8

0800359c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <DMA2_Stream2_IRQHandler+0x10>)
 80035a2:	f001 ff4f 	bl	8005444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20016ee8 	.word	0x20016ee8

080035b0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <DMA2_Stream7_IRQHandler+0x10>)
 80035b6:	f001 ff45 	bl	8005444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20016e40 	.word	0x20016e40

080035c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <SystemInit+0x28>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	4a07      	ldr	r2, [pc, #28]	; (80035ec <SystemInit+0x28>)
 80035d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035d8:	4b04      	ldr	r3, [pc, #16]	; (80035ec <SystemInit+0x28>)
 80035da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035de:	609a      	str	r2, [r3, #8]
#endif
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8003602:	2320      	movs	r3, #32
 8003604:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003606:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800360a:	e00b      	b.n	8003624 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800360c:	4a0c      	ldr	r2, [pc, #48]	; (8003640 <SCB_InvalidateDCache_by_Addr+0x50>)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4413      	add	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	dcf0      	bgt.n	800360c <SCB_InvalidateDCache_by_Addr+0x1c>
 800362a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800362e:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8003656:	2320      	movs	r3, #32
 8003658:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800365a:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800365e:	e00b      	b.n	8003678 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 8003660:	4a0c      	ldr	r2, [pc, #48]	; (8003694 <SCB_CleanDCache_by_Addr+0x50>)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4413      	add	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b00      	cmp	r3, #0
 800367c:	dcf0      	bgt.n	8003660 <SCB_CleanDCache_by_Addr+0x1c>
 800367e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003682:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <entercritical>:

#ifndef taskENTER_CRITICAL
#define configMAX_SYSCALL_INTERRUPT_PRIORITY 5
#define taskENTER_CRITICAL entercritical
static inline void entercritical(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
    " dsb                           \n" \
    " cpsie i                         \n" \
    :"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
  );
  */
}
 800369c:	bf00      	nop
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <exitcritical>:
#endif

#ifndef taskEXIT_CRITICAL
#define taskEXIT_CRITICAL exitcritical
static inline void exitcritical(void)
{
 80036a6:	b480      	push	{r7}
 80036a8:	af00      	add	r7, sp, #0
  __asm volatile
  (
    " msr basepri, %0 " :: "r" ( 0 ) : "memory"
  );
  */
}
 80036aa:	bf00      	nop
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <Msg_GetSrc>:

static sGetterHandle xHandles[] = {
    {{0},{0},{0},{0},{0},{0}, &huart1, {etrCTRL,etrPC,etrNone} },
};

static inline int Msg_GetSrc(uint8_t xValue) { return (xValue & 7); }
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4618      	mov	r0, r3
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <Msg_GetDest>:
static inline int Msg_GetDest(uint8_t xValue) { return ((xValue >> 3) & 7); }
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	08db      	lsrs	r3, r3, #3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <CacheInvalidate>:

static inline void CacheInvalidate(void * buffer, uint32_t size)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f003 031f 	and.w	r3, r3, #31
 8003700:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d105      	bne.n	8003714 <CacheInvalidate+0x24>
    SCB_InvalidateDCache_by_Addr((uint32_t*)buffer, size);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	4619      	mov	r1, r3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff ff6f 	bl	80035f0 <SCB_InvalidateDCache_by_Addr>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 8003712:	e009      	b.n	8003728 <CacheInvalidate+0x38>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	4618      	mov	r0, r3
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4413      	add	r3, r2
 8003722:	4619      	mov	r1, r3
 8003724:	f7ff ff64 	bl	80035f0 <SCB_InvalidateDCache_by_Addr>
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <CacheClean>:

static inline void CacheClean(void * buffer, uint32_t size)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d105      	bne.n	8003754 <CacheClean+0x24>
    SCB_CleanDCache_by_Addr((uint32_t*)buffer, size);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4619      	mov	r1, r3
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff ff79 	bl	8003644 <SCB_CleanDCache_by_Addr>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 8003752:	e009      	b.n	8003768 <CacheClean+0x38>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	4618      	mov	r0, r3
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4413      	add	r3, r2
 8003762:	4619      	mov	r1, r3
 8003764:	f7ff ff6e 	bl	8003644 <SCB_CleanDCache_by_Addr>
}
 8003768:	bf00      	nop
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <acker>:
          }
        }
    }
}

static inline void acker(sGetterHandle* xHandle, uint16_t aPacketId, eTransChannels xChaDest) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	807b      	strh	r3, [r7, #2]
 800377c:	4613      	mov	r3, r2
 800377e:	707b      	strb	r3, [r7, #1]

    if (xHandle)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d06a      	beq.n	800385c <acker+0xec>
    {
        uint16_t aTotLen = 8;
 8003786:	2308      	movs	r3, #8
 8003788:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = (( etrACIS | ( xChaDest << 3 ) ) | HEADER_ACK_BIT);
 800378a:	787b      	ldrb	r3, [r7, #1]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	b25b      	sxtb	r3, r3
 8003790:	f063 037d 	orn	r3, r3, #125	; 0x7d
 8003794:	b25b      	sxtb	r3, r3
 8003796:	74fb      	strb	r3, [r7, #19]
        uint8_t header[8];

        header[0] = 0x55;
 8003798:	2355      	movs	r3, #85	; 0x55
 800379a:	723b      	strb	r3, [r7, #8]
        header[1] = 0x55;
 800379c:	2355      	movs	r3, #85	; 0x55
 800379e:	727b      	strb	r3, [r7, #9]
        header[2] = aHeadByte;
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	72bb      	strb	r3, [r7, #10]
        header[3] = aTotLen & 0xFF;
 80037a4:	8abb      	ldrh	r3, [r7, #20]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	72fb      	strb	r3, [r7, #11]
        header[4] = (aTotLen >> 8) & 0xFF;
 80037aa:	8abb      	ldrh	r3, [r7, #20]
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	733b      	strb	r3, [r7, #12]
        header[5] = aPacketId & 0xFF;
 80037b4:	887b      	ldrh	r3, [r7, #2]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	737b      	strb	r3, [r7, #13]
        header[6] = (aPacketId >> 8) & 0xFF;
 80037ba:	887b      	ldrh	r3, [r7, #2]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	b29b      	uxth	r3, r3
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	73bb      	strb	r3, [r7, #14]
        header[7] = CRC8_Generate(header, 7);
 80037c4:	f107 0308 	add.w	r3, r7, #8
 80037c8:	2107      	movs	r1, #7
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fd ff5c 	bl	8001688 <CRC8_Generate>
 80037d0:	4603      	mov	r3, r0
 80037d2:	73fb      	strb	r3, [r7, #15]

        uint8_t handled = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	75fb      	strb	r3, [r7, #23]
        if(!protIsSome(&xHandle->xTxFifo))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fec6 	bl	8004570 <protIsSome>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d12c      	bne.n	8003844 <acker+0xd4>
        {
          taskENTER_CRITICAL();
 80037ea:	f7ff ff55 	bl	8003698 <entercritical>
          if(!xHandle->TxBusy)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3ac0 	ldrb.w	r3, [r3, #2752]	; 0xac0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d122      	bne.n	8003840 <acker+0xd0>
          {
            xHandle->TxBusy = 1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2ac0 	strb.w	r2, [r3, #2752]	; 0xac0
            handled = 1;
 8003802:	2301      	movs	r3, #1
 8003804:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 8003806:	f7ff ff4e 	bl	80036a6 <exitcritical>
            memcpy(xHandle->BufTx,header,8);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003810:	461a      	mov	r2, r3
 8003812:	f107 0308 	add.w	r3, r7, #8
 8003816:	cb03      	ldmia	r3!, {r0, r1}
 8003818:	6010      	str	r0, [r2, #0]
 800381a:	6051      	str	r1, [r2, #4]
            CacheClean(xHandle->BufTx, 8);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003822:	2108      	movs	r1, #8
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff ff83 	bl	8003730 <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, 8);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8d3 0a80 	ldr.w	r0, [r3, #2688]	; 0xa80
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003836:	2208      	movs	r2, #8
 8003838:	4619      	mov	r1, r3
 800383a:	f004 fd9f 	bl	800837c <HAL_UART_Transmit_DMA>
 800383e:	e001      	b.n	8003844 <acker+0xd4>
          }
          else taskEXIT_CRITICAL();
 8003840:	f7ff ff31 	bl	80036a6 <exitcritical>
        }

        if(!handled)
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d108      	bne.n	800385c <acker+0xec>
        {
          protPushSequence(&xHandle->xTxFifo,header,8);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8003850:	f107 0108 	add.w	r1, r7, #8
 8003854:	2208      	movs	r2, #8
 8003856:	4618      	mov	r0, r3
 8003858:	f000 fe2f 	bl	80044ba <protPushSequence>
        }
    }
}
 800385c:	bf00      	nop
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <parser>:
  }
  return 0;

}

static inline void parser(sProFIFO* xFifo, uint32_t xPacketId, uint32_t xDataLen, eTransChannels xChaSrc, eTransChannels xChaDest) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b08e      	sub	sp, #56	; 0x38
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	70fb      	strb	r3, [r7, #3]

  uint32_t aCount;
  uint8_t data;
  uint8_t sCount;
  sGetterHandle * hDest = NULL;
 8003872:	2300      	movs	r3, #0
 8003874:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t header[8];
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003876:	2300      	movs	r3, #0
 8003878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800387a:	e026      	b.n	80038ca <parser+0x66>
  {
    for(int j = 0; j < sizeof(xHandles[j].xChannels) / sizeof(xHandles[j].xChannels[0]); j++)
 800387c:	2300      	movs	r3, #0
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003880:	e01a      	b.n	80038b8 <parser+0x54>
    {
      if(xHandles[i].xChannels[j] == xChaSrc)
 8003882:	4aa4      	ldr	r2, [pc, #656]	; (8003b14 <parser+0x2b0>)
 8003884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003886:	f640 21c4 	movw	r1, #2756	; 0xac4
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	441a      	add	r2, r3
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	4413      	add	r3, r2
 8003894:	f603 2384 	addw	r3, r3, #2692	; 0xa84
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	429a      	cmp	r2, r3
 800389e:	d108      	bne.n	80038b2 <parser+0x4e>
      {
        hDest = &xHandles[i];
 80038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a2:	f640 22c4 	movw	r2, #2756	; 0xac4
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	4a9a      	ldr	r2, [pc, #616]	; (8003b14 <parser+0x2b0>)
 80038ac:	4413      	add	r3, r2
 80038ae:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80038b0:	e005      	b.n	80038be <parser+0x5a>
    for(int j = 0; j < sizeof(xHandles[j].xChannels) / sizeof(xHandles[j].xChannels[0]); j++)
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	3301      	adds	r3, #1
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d9e1      	bls.n	8003882 <parser+0x1e>
      }
    }
    if(hDest)
 80038be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d106      	bne.n	80038d2 <parser+0x6e>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c6:	3301      	adds	r3, #1
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0d5      	beq.n	800387c <parser+0x18>
 80038d0:	e000      	b.n	80038d4 <parser+0x70>
      break;
 80038d2:	bf00      	nop
  }


  switch (xChaDest)
 80038d4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d006      	beq.n	80038ea <parser+0x86>
 80038dc:	2b03      	cmp	r3, #3
 80038de:	f000 808f 	beq.w	8003a00 <parser+0x19c>
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	f000 808c 	beq.w	8003a00 <parser+0x19c>
 80038e8:	e0f6      	b.n	8003ad8 <parser+0x274>
  {

      case etrACIS:
      {
          if (xDataLen)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d04f      	beq.n	8003990 <parser+0x12c>
          {
              for(int i = 0; i < 8; i++)
 80038f0:	2300      	movs	r3, #0
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
 80038f4:	e00a      	b.n	800390c <parser+0xa8>
                protPull(xFifo, &header[i]);
 80038f6:	f107 0214 	add.w	r2, r7, #20
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	4413      	add	r3, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 fdfc 	bl	80044fe <protPull>
              for(int i = 0; i < 8; i++)
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	3301      	adds	r3, #1
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	2b07      	cmp	r3, #7
 8003910:	ddf1      	ble.n	80038f6 <parser+0x92>

              for (aCount = 0; aCount < xDataLen - 10; aCount++)
 8003912:	2300      	movs	r3, #0
 8003914:	637b      	str	r3, [r7, #52]	; 0x34
 8003916:	e010      	b.n	800393a <parser+0xd6>
              {
                protPull(xFifo, &data);
 8003918:	f107 031d 	add.w	r3, r7, #29
 800391c:	4619      	mov	r1, r3
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 fded 	bl	80044fe <protPull>
                hDest->BufParser[aCount]=data;
 8003924:	7f79      	ldrb	r1, [r7, #29]
 8003926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392a:	4413      	add	r3, r2
 800392c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003930:	460a      	mov	r2, r1
 8003932:	701a      	strb	r2, [r3, #0]
              for (aCount = 0; aCount < xDataLen - 10; aCount++)
 8003934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003936:	3301      	adds	r3, #1
 8003938:	637b      	str	r3, [r7, #52]	; 0x34
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3b0a      	subs	r3, #10
 800393e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003940:	429a      	cmp	r2, r3
 8003942:	d3e9      	bcc.n	8003918 <parser+0xb4>
              }
              protPull(xFifo, &data);
 8003944:	f107 031d 	add.w	r3, r7, #29
 8003948:	4619      	mov	r1, r3
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fdd7 	bl	80044fe <protPull>
              protPull(xFifo, &data);
 8003950:	f107 031d 	add.w	r3, r7, #29
 8003954:	4619      	mov	r1, r3
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 fdd1 	bl	80044fe <protPull>

              hDest->BufParser[aCount]=0;
 800395c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800395e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003960:	4413      	add	r3, r2
 8003962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]

              if(hDest) acker(hDest,xPacketId,xChaSrc);
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	2b00      	cmp	r3, #0
 800396e:	d006      	beq.n	800397e <parser+0x11a>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	b29b      	uxth	r3, r3
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	4619      	mov	r1, r3
 8003978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800397a:	f7ff fef9 	bl	8003770 <acker>

              acis_parse_command(xChaSrc, hDest->BufParser, aCount);
 800397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003980:	f503 6110 	add.w	r1, r3, #2304	; 0x900
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003988:	4618      	mov	r0, r3
 800398a:	f7fd fe43 	bl	8001614 <acis_parse_command>
              }
              taskEXIT_CRITICAL();

          }

          break;
 800398e:	e0bd      	b.n	8003b0c <parser+0x2a8>
              for (aCount = 0; aCount < 8; aCount++)
 8003990:	2300      	movs	r3, #0
 8003992:	637b      	str	r3, [r7, #52]	; 0x34
 8003994:	e013      	b.n	80039be <parser+0x15a>
                for(int i = 0; i < 8; i++)
 8003996:	2300      	movs	r3, #0
 8003998:	623b      	str	r3, [r7, #32]
 800399a:	e00a      	b.n	80039b2 <parser+0x14e>
                  protPull(xFifo, &header[i]);
 800399c:	f107 0214 	add.w	r2, r7, #20
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	4413      	add	r3, r2
 80039a4:	4619      	mov	r1, r3
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fda9 	bl	80044fe <protPull>
                for(int i = 0; i < 8; i++)
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	3301      	adds	r3, #1
 80039b0:	623b      	str	r3, [r7, #32]
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	2b07      	cmp	r3, #7
 80039b6:	ddf1      	ble.n	800399c <parser+0x138>
              for (aCount = 0; aCount < 8; aCount++)
 80039b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ba:	3301      	adds	r3, #1
 80039bc:	637b      	str	r3, [r7, #52]	; 0x34
 80039be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c0:	2b07      	cmp	r3, #7
 80039c2:	d9e8      	bls.n	8003996 <parser+0x132>
              taskENTER_CRITICAL();
 80039c4:	f7ff fe68 	bl	8003698 <entercritical>
              if(NeedAckPacket && NeededAckPacketId != 0 && NeededAckPacketId == xPacketId && !ReceivedAckPacket)
 80039c8:	4b53      	ldr	r3, [pc, #332]	; (8003b18 <parser+0x2b4>)
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d013      	beq.n	80039fa <parser+0x196>
 80039d2:	4b52      	ldr	r3, [pc, #328]	; (8003b1c <parser+0x2b8>)
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00e      	beq.n	80039fa <parser+0x196>
 80039dc:	4b4f      	ldr	r3, [pc, #316]	; (8003b1c <parser+0x2b8>)
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	461a      	mov	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d107      	bne.n	80039fa <parser+0x196>
 80039ea:	4b4d      	ldr	r3, [pc, #308]	; (8003b20 <parser+0x2bc>)
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d102      	bne.n	80039fa <parser+0x196>
                ReceivedAckPacket = 1;
 80039f4:	4b4a      	ldr	r3, [pc, #296]	; (8003b20 <parser+0x2bc>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	801a      	strh	r2, [r3, #0]
              taskEXIT_CRITICAL();
 80039fa:	f7ff fe54 	bl	80036a6 <exitcritical>
          break;
 80039fe:	e085      	b.n	8003b0c <parser+0x2a8>
      }

      case etrCTRL:
      case etrPC:
      {
        sCount = (xDataLen > 10) ? xDataLen : 8;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b0a      	cmp	r3, #10
 8003a04:	d902      	bls.n	8003a0c <parser+0x1a8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	e000      	b.n	8003a0e <parser+0x1aa>
 8003a0c:	2308      	movs	r3, #8
 8003a0e:	77bb      	strb	r3, [r7, #30]

        if(hDest)
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d060      	beq.n	8003ad8 <parser+0x274>
        {

          uint8_t handled = 0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	77fb      	strb	r3, [r7, #31]
          if(!protIsSome(&hDest->xTxFifo))
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fda5 	bl	8004570 <protIsSome>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d138      	bne.n	8003a9e <parser+0x23a>
          {
            taskENTER_CRITICAL();
 8003a2c:	f7ff fe34 	bl	8003698 <entercritical>
            if(!hDest->TxBusy)
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	f893 3ac0 	ldrb.w	r3, [r3, #2752]	; 0xac0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d12e      	bne.n	8003a9a <parser+0x236>
            {
              hDest->TxBusy = 1;
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2ac0 	strb.w	r2, [r3, #2752]	; 0xac0
              handled = 1;
 8003a44:	2301      	movs	r3, #1
 8003a46:	77fb      	strb	r3, [r7, #31]
              taskEXIT_CRITICAL();
 8003a48:	f7ff fe2d 	bl	80036a6 <exitcritical>

              for (aCount = 0; aCount < sCount; aCount++)
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a50:	e00b      	b.n	8003a6a <parser+0x206>
              {
                protPull(xFifo, &hDest->BufTx[aCount]);
 8003a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a54:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a5a:	4413      	add	r3, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 fd4d 	bl	80044fe <protPull>
              for (aCount = 0; aCount < sCount; aCount++)
 8003a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a66:	3301      	adds	r3, #1
 8003a68:	637b      	str	r3, [r7, #52]	; 0x34
 8003a6a:	7fbb      	ldrb	r3, [r7, #30]
 8003a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d3ef      	bcc.n	8003a52 <parser+0x1ee>
              }

              CacheClean(hDest->BufTx, sCount);
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003a78:	7fba      	ldrb	r2, [r7, #30]
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff fe57 	bl	8003730 <CacheClean>
              HAL_UART_Transmit_DMA(hDest->xUart, hDest->BufTx, sCount);
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	f8d3 0a80 	ldr.w	r0, [r3, #2688]	; 0xa80
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003a8e:	7fba      	ldrb	r2, [r7, #30]
 8003a90:	b292      	uxth	r2, r2
 8003a92:	4619      	mov	r1, r3
 8003a94:	f004 fc72 	bl	800837c <HAL_UART_Transmit_DMA>
 8003a98:	e001      	b.n	8003a9e <parser+0x23a>
            }
            else taskEXIT_CRITICAL();
 8003a9a:	f7ff fe04 	bl	80036a6 <exitcritical>
          }

          if(!handled)
 8003a9e:	7ffb      	ldrb	r3, [r7, #31]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d132      	bne.n	8003b0a <parser+0x2a6>
          {
            for (aCount = 0; aCount < sCount; aCount++)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa8:	e011      	b.n	8003ace <parser+0x26a>
            {
              protPull(xFifo, &data);
 8003aaa:	f107 031d 	add.w	r3, r7, #29
 8003aae:	4619      	mov	r1, r3
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fd24 	bl	80044fe <protPull>
              protPush(&hDest->xTxFifo, &data);
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8003abc:	f107 021d 	add.w	r2, r7, #29
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fd0b 	bl	80044de <protPush>
            for (aCount = 0; aCount < sCount; aCount++)
 8003ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aca:	3301      	adds	r3, #1
 8003acc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ace:	7fbb      	ldrb	r3, [r7, #30]
 8003ad0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d3e9      	bcc.n	8003aaa <parser+0x246>
            }
          }

          break;
 8003ad6:	e018      	b.n	8003b0a <parser+0x2a6>
      }
      /* no break */

      default:
      {
        sCount = (xDataLen > 10) ? xDataLen : 8;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b0a      	cmp	r3, #10
 8003adc:	d902      	bls.n	8003ae4 <parser+0x280>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	e000      	b.n	8003ae6 <parser+0x282>
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	77bb      	strb	r3, [r7, #30]
        for (aCount = 0; aCount < sCount; aCount++)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	637b      	str	r3, [r7, #52]	; 0x34
 8003aec:	e008      	b.n	8003b00 <parser+0x29c>
        {
          protPull(xFifo, &data);
 8003aee:	f107 031d 	add.w	r3, r7, #29
 8003af2:	4619      	mov	r1, r3
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 fd02 	bl	80044fe <protPull>
        for (aCount = 0; aCount < sCount; aCount++)
 8003afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afc:	3301      	adds	r3, #1
 8003afe:	637b      	str	r3, [r7, #52]	; 0x34
 8003b00:	7fbb      	ldrb	r3, [r7, #30]
 8003b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d3f2      	bcc.n	8003aee <parser+0x28a>
        }
        break;
 8003b08:	e000      	b.n	8003b0c <parser+0x2a8>
          break;
 8003b0a:	bf00      	nop
      }
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	3738      	adds	r7, #56	; 0x38
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20010020 	.word	0x20010020
 8003b18:	20010e12 	.word	0x20010e12
 8003b1c:	20010e14 	.word	0x20010e14
 8003b20:	20010018 	.word	0x20010018

08003b24 <lookByte>:

static inline uint8_t lookByte(sProFIFO* xFifo, uint32_t xOffset) { uint8_t aByte; protLook(xFifo,xOffset,&aByte); return aByte; }
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
 8003b2e:	f107 030f 	add.w	r3, r7, #15
 8003b32:	461a      	mov	r2, r3
 8003b34:	6839      	ldr	r1, [r7, #0]
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fcf1 	bl	800451e <protLook>
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <countCRC8>:

static inline uint8_t countCRC8(sGetterHandle * handle) {
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
    uint32_t i; uint8_t aCrc8 = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	72fb      	strb	r3, [r7, #11]
    for (i=0; i<7; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	e012      	b.n	8003b7e <countCRC8+0x38>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8003b5e:	68f9      	ldr	r1, [r7, #12]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ffdf 	bl	8003b24 <lookByte>
 8003b66:	4603      	mov	r3, r0
 8003b68:	4619      	mov	r1, r3
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b74:	460a      	mov	r2, r1
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b06      	cmp	r3, #6
 8003b82:	d9e9      	bls.n	8003b58 <countCRC8+0x12>
    aCrc8 = CRC8_Generate(handle->BufParser, 7);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8a:	2107      	movs	r1, #7
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fd fd7b 	bl	8001688 <CRC8_Generate>
 8003b92:	4603      	mov	r3, r0
 8003b94:	72fb      	strb	r3, [r7, #11]
    return aCrc8;
 8003b96:	7afb      	ldrb	r3, [r7, #11]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <countCRC16>:

static inline int32_t countCRC16(sGetterHandle * handle, uint32_t xLen) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
    uint32_t i; int32_t aCrc16 = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60bb      	str	r3, [r7, #8]
    for (i=0; i<xLen-2; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	e012      	b.n	8003bda <countCRC16+0x3a>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8003bba:	68f9      	ldr	r1, [r7, #12]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff ffb1 	bl	8003b24 <lookByte>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd0:	460a      	mov	r2, r1
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	3b02      	subs	r3, #2
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d3e7      	bcc.n	8003bb4 <countCRC16+0x14>
    aCrc16 = CRC16_Generate(handle->BufParser, xLen-2);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f503 6210 	add.w	r2, r3, #2304	; 0x900
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	3b02      	subs	r3, #2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	f7fd fd2d 	bl	8001650 <CRC16_Generate>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	60bb      	str	r3, [r7, #8]
    return aCrc16;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <Getter>:

static void Getter(sGetterHandle * handle)
{
 8003c04:	b5b0      	push	{r4, r5, r7, lr}
 8003c06:	b08c      	sub	sp, #48	; 0x30
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t dataSkip = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
  sProFIFO* xFifo = &handle->xRxFifo;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8003c16:	617b      	str	r3, [r7, #20]
  uint32_t * pDataReceiving = &handle->dataReceiving;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 8003c1e:	613b      	str	r3, [r7, #16]
  uint32_t * pDataLen = &handle->dataLen;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8003c26:	60fb      	str	r3, [r7, #12]
  uint16_t * pPacketId = &handle->packetId;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 8003c2e:	60bb      	str	r3, [r7, #8]

  uint16_t packetId = *pPacketId;
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t dataLen = *pDataLen;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	61fb      	str	r3, [r7, #28]
  uint32_t dataReceiving = *pDataReceiving;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	61bb      	str	r3, [r7, #24]
  if(dataReceiving)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d043      	beq.n	8003cd0 <Getter+0xcc>
  {
    // Check if we got a data
    if (protGetSize(xFifo) >= dataLen)
 8003c48:	6978      	ldr	r0, [r7, #20]
 8003c4a:	f000 fb4b 	bl	80042e4 <protGetSize>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	4293      	cmp	r3, r2
 8003c54:	f200 80ad 	bhi.w	8003db2 <Getter+0x1ae>
    {
        if (countCRC16(handle,dataLen) == lookByte(xFifo,dataLen-2) + (lookByte(xFifo,dataLen-1) << 8))
 8003c58:	69f9      	ldr	r1, [r7, #28]
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff ffa0 	bl	8003ba0 <countCRC16>
 8003c60:	4604      	mov	r4, r0
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	3b02      	subs	r3, #2
 8003c66:	4619      	mov	r1, r3
 8003c68:	6978      	ldr	r0, [r7, #20]
 8003c6a:	f7ff ff5b 	bl	8003b24 <lookByte>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	461d      	mov	r5, r3
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	4619      	mov	r1, r3
 8003c78:	6978      	ldr	r0, [r7, #20]
 8003c7a:	f7ff ff53 	bl	8003b24 <lookByte>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	021b      	lsls	r3, r3, #8
 8003c82:	442b      	add	r3, r5
 8003c84:	429c      	cmp	r4, r3
 8003c86:	d11c      	bne.n	8003cc2 <Getter+0xbe>
        {
            // Got True package
            parser(xFifo,packetId,dataLen,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 8003c88:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	6978      	ldr	r0, [r7, #20]
 8003c8e:	f7ff ff49 	bl	8003b24 <lookByte>
 8003c92:	4603      	mov	r3, r0
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff fd0d 	bl	80036b4 <Msg_GetSrc>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	b2dd      	uxtb	r5, r3
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	6978      	ldr	r0, [r7, #20]
 8003ca2:	f7ff ff3f 	bl	8003b24 <lookByte>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff fd11 	bl	80036d0 <Msg_GetDest>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	462b      	mov	r3, r5
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	4621      	mov	r1, r4
 8003cba:	6978      	ldr	r0, [r7, #20]
 8003cbc:	f7ff fdd2 	bl	8003864 <parser>
 8003cc0:	e001      	b.n	8003cc6 <Getter+0xc2>
        }
        else { dataSkip=1; } // Wrong CRC16, so skip 1 byte
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
        dataReceiving = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61bb      	str	r3, [r7, #24]
        dataLen = 0;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	e070      	b.n	8003db2 <Getter+0x1ae>
    }
  }
  else
  {
    if (protGetSize(xFifo) > 7)
 8003cd0:	6978      	ldr	r0, [r7, #20]
 8003cd2:	f000 fb07 	bl	80042e4 <protGetSize>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b07      	cmp	r3, #7
 8003cda:	d96a      	bls.n	8003db2 <Getter+0x1ae>
    {
      if(lookByte(xFifo,0) == 0x55 && lookByte(xFifo,1) == 0x55)
 8003cdc:	2100      	movs	r1, #0
 8003cde:	6978      	ldr	r0, [r7, #20]
 8003ce0:	f7ff ff20 	bl	8003b24 <lookByte>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b55      	cmp	r3, #85	; 0x55
 8003ce8:	d161      	bne.n	8003dae <Getter+0x1aa>
 8003cea:	2101      	movs	r1, #1
 8003cec:	6978      	ldr	r0, [r7, #20]
 8003cee:	f7ff ff19 	bl	8003b24 <lookByte>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b55      	cmp	r3, #85	; 0x55
 8003cf6:	d15a      	bne.n	8003dae <Getter+0x1aa>
      {
        if (countCRC8(handle) == lookByte(xFifo,7))
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff ff24 	bl	8003b46 <countCRC8>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	461c      	mov	r4, r3
 8003d02:	2107      	movs	r1, #7
 8003d04:	6978      	ldr	r0, [r7, #20]
 8003d06:	f7ff ff0d 	bl	8003b24 <lookByte>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	429c      	cmp	r4, r3
 8003d0e:	d14a      	bne.n	8003da6 <Getter+0x1a2>
        {
          dataLen = lookByte(xFifo,3) + (lookByte(xFifo,4) << 8);
 8003d10:	2103      	movs	r1, #3
 8003d12:	6978      	ldr	r0, [r7, #20]
 8003d14:	f7ff ff06 	bl	8003b24 <lookByte>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	461c      	mov	r4, r3
 8003d1c:	2104      	movs	r1, #4
 8003d1e:	6978      	ldr	r0, [r7, #20]
 8003d20:	f7ff ff00 	bl	8003b24 <lookByte>
 8003d24:	4603      	mov	r3, r0
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	4423      	add	r3, r4
 8003d2a:	61fb      	str	r3, [r7, #28]
          packetId = lookByte(xFifo,5) + (lookByte(xFifo,6) << 8);
 8003d2c:	2105      	movs	r1, #5
 8003d2e:	6978      	ldr	r0, [r7, #20]
 8003d30:	f7ff fef8 	bl	8003b24 <lookByte>
 8003d34:	4603      	mov	r3, r0
 8003d36:	b29c      	uxth	r4, r3
 8003d38:	2106      	movs	r1, #6
 8003d3a:	6978      	ldr	r0, [r7, #20]
 8003d3c:	f7ff fef2 	bl	8003b24 <lookByte>
 8003d40:	4603      	mov	r3, r0
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	4423      	add	r3, r4
 8003d4a:	847b      	strh	r3, [r7, #34]	; 0x22
          if (packetId > 0 && dataLen < MAX_PACK_LEN)
 8003d4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d026      	beq.n	8003da0 <Getter+0x19c>
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003d58:	d222      	bcs.n	8003da0 <Getter+0x19c>
          {
              if (dataLen>10)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2b0a      	cmp	r3, #10
 8003d5e:	d902      	bls.n	8003d66 <Getter+0x162>
              {
                dataReceiving = 1;
 8003d60:	2301      	movs	r3, #1
 8003d62:	61bb      	str	r3, [r7, #24]
              if (dataLen>10)
 8003d64:	e022      	b.n	8003dac <Getter+0x1a8>
              }
              else
              {
                  // Got ShortPackage (Header Only)
                  parser(xFifo,packetId,0,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 8003d66:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8003d68:	2102      	movs	r1, #2
 8003d6a:	6978      	ldr	r0, [r7, #20]
 8003d6c:	f7ff feda 	bl	8003b24 <lookByte>
 8003d70:	4603      	mov	r3, r0
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fc9e 	bl	80036b4 <Msg_GetSrc>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	b2dd      	uxtb	r5, r3
 8003d7c:	2102      	movs	r1, #2
 8003d7e:	6978      	ldr	r0, [r7, #20]
 8003d80:	f7ff fed0 	bl	8003b24 <lookByte>
 8003d84:	4603      	mov	r3, r0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fca2 	bl	80036d0 <Msg_GetDest>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	462b      	mov	r3, r5
 8003d94:	2200      	movs	r2, #0
 8003d96:	4621      	mov	r1, r4
 8003d98:	6978      	ldr	r0, [r7, #20]
 8003d9a:	f7ff fd63 	bl	8003864 <parser>
              if (dataLen>10)
 8003d9e:	e005      	b.n	8003dac <Getter+0x1a8>
              }
          }
          else { dataSkip=1; } // Wrong data length or packet id, so skip 1 byte
 8003da0:	2301      	movs	r3, #1
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 8003da4:	e005      	b.n	8003db2 <Getter+0x1ae>
        }
        else { dataSkip=1; } // Wrong CRC8, so skip 1 byte
 8003da6:	2301      	movs	r3, #1
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 8003daa:	e002      	b.n	8003db2 <Getter+0x1ae>
 8003dac:	e001      	b.n	8003db2 <Getter+0x1ae>
      }
      else { dataSkip=1; } // Wrong sync bytes
 8003dae:	2301      	movs	r3, #1
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (dataSkip)
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <Getter+0x1bc>
  {
    protMoveRead(xFifo,dataSkip);
 8003db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dba:	6978      	ldr	r0, [r7, #20]
 8003dbc:	f000 fbc7 	bl	800454e <protMoveRead>
  }

  *pDataReceiving = dataReceiving;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	601a      	str	r2, [r3, #0]
  *pDataLen = dataLen;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	601a      	str	r2, [r3, #0]
  *pPacketId = packetId;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003dd0:	801a      	strh	r2, [r3, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	3728      	adds	r7, #40	; 0x28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003ddc <xDmaTxIrqHandler>:



void xDmaTxIrqHandler(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  uint32_t length = 0;;
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	e04a      	b.n	8003e84 <xDmaTxIrqHandler+0xa8>
  {
    handle = &xHandles[i];
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f640 22c4 	movw	r2, #2756	; 0xac4
 8003df4:	fb02 f303 	mul.w	r3, r2, r3
 8003df8:	4a26      	ldr	r2, [pc, #152]	; (8003e94 <xDmaTxIrqHandler+0xb8>)
 8003dfa:	4413      	add	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]
    if(huart == handle->xUart)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d139      	bne.n	8003e7e <xDmaTxIrqHandler+0xa2>
    {
      if(protIsSome(&handle->xTxFifo))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fbad 	bl	8004570 <protIsSome>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d02b      	beq.n	8003e74 <xDmaTxIrqHandler+0x98>
      {
        handle->TxBusy = 1;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2ac0 	strb.w	r2, [r3, #2752]	; 0xac0
        while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 8003e24:	bf00      	nop
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f603 2088 	addw	r0, r3, #2696	; 0xa88
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	617a      	str	r2, [r7, #20]
 8003e32:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4413      	add	r3, r2
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	f000 fb5f 	bl	80044fe <protPull>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <xDmaTxIrqHandler+0x72>
            && length < MAX_PACK_LEN);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003e4c:	d3eb      	bcc.n	8003e26 <xDmaTxIrqHandler+0x4a>
        CacheClean(handle->BufTx, length);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003e54:	6979      	ldr	r1, [r7, #20]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fc6a 	bl	8003730 <CacheClean>
        HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f8d3 0a80 	ldr.w	r0, [r3, #2688]	; 0xa80
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	b292      	uxth	r2, r2
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	f004 fa85 	bl	800837c <HAL_UART_Transmit_DMA>
      }
      else handle->TxBusy = 0;
      break;
 8003e72:	e00a      	b.n	8003e8a <xDmaTxIrqHandler+0xae>
      else handle->TxBusy = 0;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2ac0 	strb.w	r2, [r3, #2752]	; 0xac0
      break;
 8003e7c:	e005      	b.n	8003e8a <xDmaTxIrqHandler+0xae>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	3301      	adds	r3, #1
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0b1      	beq.n	8003dee <xDmaTxIrqHandler+0x12>
    }
  }
}
 8003e8a:	bf00      	nop
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20010020 	.word	0x20010020

08003e98 <xDmaErIrqHandler>:

void xDmaErIrqHandler(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	e023      	b.n	8003eee <xDmaErIrqHandler+0x56>
  {
    handle = &xHandles[i];
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f640 22c4 	movw	r2, #2756	; 0xac4
 8003eac:	fb02 f303 	mul.w	r3, r2, r3
 8003eb0:	4a12      	ldr	r2, [pc, #72]	; (8003efc <xDmaErIrqHandler+0x64>)
 8003eb2:	4413      	add	r3, r2
 8003eb4:	60bb      	str	r3, [r7, #8]
    if(huart == handle->xUart)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d112      	bne.n	8003ee8 <xDmaErIrqHandler+0x50>
    {
      HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f004 fad0 	bl	8008474 <HAL_UART_Receive_DMA>
      handle->RxPointer = handle->xUart->RxXferSize;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 8003eda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f8c3 2abc 	str.w	r2, [r3, #2748]	; 0xabc
      break;
 8003ee6:	e005      	b.n	8003ef4 <xDmaErIrqHandler+0x5c>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	3301      	adds	r3, #1
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0d8      	beq.n	8003ea6 <xDmaErIrqHandler+0xe>
    }
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20010020 	.word	0x20010020

08003f00 <xFifosInit>:


void xFifosInit(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003f06:	2300      	movs	r3, #0
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	e031      	b.n	8003f70 <xFifosInit+0x70>
  {
    protInit(&xHandles[i].xTxFifo,xHandles[i].xTxFifoBuf,1,MAX_PACK_LEN);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f640 22c4 	movw	r2, #2756	; 0xac4
 8003f12:	fb02 f303 	mul.w	r3, r2, r3
 8003f16:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8003f1a:	4a19      	ldr	r2, [pc, #100]	; (8003f80 <xFifosInit+0x80>)
 8003f1c:	1898      	adds	r0, r3, r2
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f640 22c4 	movw	r2, #2756	; 0xac4
 8003f24:	fb02 f303 	mul.w	r3, r2, r3
 8003f28:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003f2c:	4a14      	ldr	r2, [pc, #80]	; (8003f80 <xFifosInit+0x80>)
 8003f2e:	1899      	adds	r1, r3, r2
 8003f30:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003f34:	2201      	movs	r2, #1
 8003f36:	f000 f9e5 	bl	8004304 <protInit>
    protInit(&xHandles[i].xRxFifo,xHandles[i].xRxFifoBuf,1,MAX_PACK_LEN);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f640 22c4 	movw	r2, #2756	; 0xac4
 8003f40:	fb02 f303 	mul.w	r3, r2, r3
 8003f44:	f603 2398 	addw	r3, r3, #2712	; 0xa98
 8003f48:	4a0d      	ldr	r2, [pc, #52]	; (8003f80 <xFifosInit+0x80>)
 8003f4a:	4413      	add	r3, r2
 8003f4c:	1d18      	adds	r0, r3, #4
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f640 22c4 	movw	r2, #2756	; 0xac4
 8003f54:	fb02 f303 	mul.w	r3, r2, r3
 8003f58:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8003f5c:	4a08      	ldr	r2, [pc, #32]	; (8003f80 <xFifosInit+0x80>)
 8003f5e:	1899      	adds	r1, r3, r2
 8003f60:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003f64:	2201      	movs	r2, #1
 8003f66:	f000 f9cd 	bl	8004304 <protInit>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	607b      	str	r3, [r7, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0ca      	beq.n	8003f0c <xFifosInit+0xc>
  }
}
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20010020 	.word	0x20010020

08003f84 <xGetterInit>:

void xGetterInit(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
  sGetterHandle * handle;

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	607b      	str	r3, [r7, #4]
 8003f8e:	e022      	b.n	8003fd6 <xGetterInit+0x52>
  {
    handle = &xHandles[i];
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f640 22c4 	movw	r2, #2756	; 0xac4
 8003f96:	fb02 f303 	mul.w	r3, r2, r3
 8003f9a:	4a12      	ldr	r2, [pc, #72]	; (8003fe4 <xGetterInit+0x60>)
 8003f9c:	4413      	add	r3, r2
 8003f9e:	603b      	str	r3, [r7, #0]
    CacheClean(handle->BufRx, UART_DMA_BUFFER);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff fbc2 	bl	8003730 <CacheClean>
    HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 8003fb2:	6839      	ldr	r1, [r7, #0]
 8003fb4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f004 fa5b 	bl	8008474 <HAL_UART_Receive_DMA>
    handle->RxPointer = handle->xUart->RxXferSize;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 8003fc4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fc8:	461a      	mov	r2, r3
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f8c3 2abc 	str.w	r2, [r3, #2748]	; 0xabc
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0d9      	beq.n	8003f90 <xGetterInit+0xc>
  }
}
 8003fdc:	bf00      	nop
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20010020 	.word	0x20010020

08003fe8 <xGetterLoop>:

void xGetterLoop(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b0b6      	sub	sp, #216	; 0xd8
 8003fec:	af00      	add	r7, sp, #0
  uint32_t dmacnt;
  uint32_t length;
  uint32_t dmasize;
  uint8_t tempbuffer[MAX_PACK_LEN / 2];

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ff4:	e0f2      	b.n	80041dc <xGetterLoop+0x1f4>
  {
    handle = &xHandles[i];
 8003ff6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ffa:	f640 22c4 	movw	r2, #2756	; 0xac4
 8003ffe:	fb02 f303 	mul.w	r3, r2, r3
 8004002:	4a7b      	ldr	r2, [pc, #492]	; (80041f0 <xGetterLoop+0x208>)
 8004004:	4413      	add	r3, r2
 8004006:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    do
    {
      dmacnt = handle->xUart->hdmarx->Instance->NDTR;
 800400a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800400e:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 8004012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      dmasize = handle->xUart->RxXferSize;
 800401c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004020:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 8004024:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004028:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      if(dmacnt > handle->RxPointer)
 800402c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004030:	f8d3 3abc 	ldr.w	r3, [r3, #2748]	; 0xabc
 8004034:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004038:	429a      	cmp	r2, r3
 800403a:	d90c      	bls.n	8004056 <xGetterLoop+0x6e>
        length = (dmasize-dmacnt)+handle->RxPointer;
 800403c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004040:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004044:	1ad2      	subs	r2, r2, r3
 8004046:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800404a:	f8d3 3abc 	ldr.w	r3, [r3, #2748]	; 0xabc
 800404e:	4413      	add	r3, r2
 8004050:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004054:	e008      	b.n	8004068 <xGetterLoop+0x80>
      else length = handle->RxPointer-dmacnt;
 8004056:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800405a:	f8d3 2abc 	ldr.w	r2, [r3, #2748]	; 0xabc
 800405e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

      if(length > MAX_PACK_LEN / 2) length = MAX_PACK_LEN / 2;
 8004068:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800406c:	2bc0      	cmp	r3, #192	; 0xc0
 800406e:	d902      	bls.n	8004076 <xGetterLoop+0x8e>
 8004070:	23c0      	movs	r3, #192	; 0xc0
 8004072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if(length > 0)
 8004076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d045      	beq.n	800410a <xGetterLoop+0x122>
      {
        CacheInvalidate(handle->BufRx, UART_DMA_BUFFER);
 800407e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004082:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fb32 	bl	80036f0 <CacheInvalidate>
        for(i=0;i<length;i++)
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004092:	e02a      	b.n	80040ea <xGetterLoop+0x102>
        {
          tempbuffer[i] = handle->BufRx[dmasize-handle->RxPointer];
 8004094:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004098:	f8d3 3abc 	ldr.w	r3, [r3, #2748]	; 0xabc
 800409c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80040a6:	5cd1      	ldrb	r1, [r2, r3]
 80040a8:	1d3a      	adds	r2, r7, #4
 80040aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80040ae:	4413      	add	r3, r2
 80040b0:	460a      	mov	r2, r1
 80040b2:	701a      	strb	r2, [r3, #0]
          if(handle->RxPointer == 1) handle->RxPointer = dmasize;
 80040b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040b8:	f8d3 3abc 	ldr.w	r3, [r3, #2748]	; 0xabc
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d106      	bne.n	80040ce <xGetterLoop+0xe6>
 80040c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040c8:	f8c3 2abc 	str.w	r2, [r3, #2748]	; 0xabc
 80040cc:	e008      	b.n	80040e0 <xGetterLoop+0xf8>
          else handle->RxPointer--;
 80040ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040d2:	f8d3 3abc 	ldr.w	r3, [r3, #2748]	; 0xabc
 80040d6:	1e5a      	subs	r2, r3, #1
 80040d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040dc:	f8c3 2abc 	str.w	r2, [r3, #2748]	; 0xabc
        for(i=0;i<length;i++)
 80040e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80040e4:	3301      	adds	r3, #1
 80040e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80040ee:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d8ce      	bhi.n	8004094 <xGetterLoop+0xac>
        }

        protPushSequence(&handle->xRxFifo, tempbuffer, length);
 80040f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040fa:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 80040fe:	1d39      	adds	r1, r7, #4
 8004100:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004104:	4618      	mov	r0, r3
 8004106:	f000 f9d8 	bl	80044ba <protPushSequence>
      }
    } while(length > 0);
 800410a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800410e:	2b00      	cmp	r3, #0
 8004110:	f47f af7b 	bne.w	800400a <xGetterLoop+0x22>

    if(protIsSome(&handle->xRxFifo))
 8004114:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004118:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fa27 	bl	8004570 <protIsSome>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <xGetterLoop+0x148>
    {
      Getter(handle);
 8004128:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800412c:	f7ff fd6a 	bl	8003c04 <Getter>
    }

    taskENTER_CRITICAL();
 8004130:	f7ff fab2 	bl	8003698 <entercritical>
    if(!handle->TxBusy && protIsSome(&handle->xTxFifo))
 8004134:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004138:	f893 3ac0 	ldrb.w	r3, [r3, #2752]	; 0xac0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d145      	bne.n	80041ce <xGetterLoop+0x1e6>
 8004142:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004146:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fa10 	bl	8004570 <protIsSome>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d03b      	beq.n	80041ce <xGetterLoop+0x1e6>
    {
      length = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      handle->TxBusy = 1;
 800415c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2ac0 	strb.w	r2, [r3, #2752]	; 0xac0
      taskEXIT_CRITICAL();
 8004166:	f7ff fa9e 	bl	80036a6 <exitcritical>
      while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 800416a:	bf00      	nop
 800416c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004170:	f603 2088 	addw	r0, r3, #2696	; 0xa88
 8004174:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800417e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004182:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004186:	4413      	add	r3, r2
 8004188:	4619      	mov	r1, r3
 800418a:	f000 f9b8 	bl	80044fe <protPull>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d004      	beq.n	800419e <xGetterLoop+0x1b6>
          && length < MAX_PACK_LEN);
 8004194:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004198:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800419c:	d3e6      	bcc.n	800416c <xGetterLoop+0x184>
      CacheClean(handle->BufTx, length);
 800419e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041a2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80041a6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fac0 	bl	8003730 <CacheClean>
      HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 80041b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041b4:	f8d3 0a80 	ldr.w	r0, [r3, #2688]	; 0xa80
 80041b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041bc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80041c0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80041c4:	b292      	uxth	r2, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	f004 f8d8 	bl	800837c <HAL_UART_Transmit_DMA>
 80041cc:	e001      	b.n	80041d2 <xGetterLoop+0x1ea>
    }
    else taskEXIT_CRITICAL();
 80041ce:	f7ff fa6a 	bl	80036a6 <exitcritical>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 80041d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80041d6:	3301      	adds	r3, #1
 80041d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f43f af08 	beq.w	8003ff6 <xGetterLoop+0xe>
  }
}
 80041e6:	bf00      	nop
 80041e8:	37d8      	adds	r7, #216	; 0xd8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20010020 	.word	0x20010020

080041f4 <infoGetSize>:

#include "xProFIFO.h"
#include <string.h>


static inline int infoGetSize(sProInfo* info) {
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
    if(info->write >= info->read) return (info->write - info->read);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	429a      	cmp	r2, r3
 8004206:	d305      	bcc.n	8004214 <infoGetSize+0x20>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	e007      	b.n	8004224 <infoGetSize+0x30>
    else return (info->capacity - info->read + info->write);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	1ad2      	subs	r2, r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	4413      	add	r3, r2
}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <infoGetAvail>:

static uint32_t infoGetAvail(sProInfo* info) { return info->capacity-infoGetSize(info); }
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681c      	ldr	r4, [r3, #0]
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff ffd9 	bl	80041f4 <infoGetSize>
 8004242:	4603      	mov	r3, r0
 8004244:	1ae3      	subs	r3, r4, r3
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	bd90      	pop	{r4, r7, pc}

0800424e <infoCorrect>:
static inline uint32_t infoCorrect(sProInfo* info, uint32_t* param, uint32_t move) { return ((*param + move) % info->capacity); }
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	fbb3 f1f2 	udiv	r1, r3, r2
 800426a:	fb02 f201 	mul.w	r2, r2, r1
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <infoMovePar>:
static inline void infoMovePar(sProInfo* info, uint32_t* param, uint32_t move) { *param = (uint32_t)infoCorrect(info,param,move); }
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	68b9      	ldr	r1, [r7, #8]
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f7ff ffde 	bl	800424e <infoCorrect>
 8004292:	4602      	mov	r2, r0
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <infoIsSome>:
static uint8_t infoIsSome(sProInfo* info) { return info->read != info->write; }
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	bf14      	ite	ne
 80042b4:	2301      	movne	r3, #1
 80042b6:	2300      	moveq	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <protMovePar>:

static void protMovePar(sProInfo* info, uint32_t* param, uint32_t move) {
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
        infoMovePar(info,param,move);
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f7ff ffd0 	bl	800427c <infoMovePar>
}
 80042dc:	bf00      	nop
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <protGetSize>:


uint32_t protGetSize(sProFIFO* fifo) {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
    uint32_t value;
        value = infoGetSize(&fifo->info);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff ff7f 	bl	80041f4 <infoGetSize>
 80042f6:	4603      	mov	r3, r0
 80042f8:	60fb      	str	r3, [r7, #12]
    return value;
 80042fa:	68fb      	ldr	r3, [r7, #12]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <protInit>:
    uint32_t value;
        value = infoGetAvail(&fifo->info);
    return value;
}

void protInit(sProFIFO* fifo, void* xBuffer, uint8_t xElemSize, int xCapacity) {
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	71fb      	strb	r3, [r7, #7]
    fifo->buffer = xBuffer;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	601a      	str	r2, [r3, #0]
    fifo->info.capacity = xCapacity;
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	605a      	str	r2, [r3, #4]
    fifo->info.read = 0;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	609a      	str	r2, [r3, #8]
    fifo->info.write = 0;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	60da      	str	r2, [r3, #12]
    fifo->info.overflow = 0;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	745a      	strb	r2, [r3, #17]
    fifo->info.elemsize = xElemSize;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	79fa      	ldrb	r2, [r7, #7]
 8004336:	741a      	strb	r2, [r3, #16]
}
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <interPut>:
        fifo->info.read = 0;
        fifo->info.write = 0;
        fifo->info.overflow = 0;
}

static inline void interPut(sProFIFO* fifo, void* xData) {
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)((uint32_t)fifo->buffer + fifo->info.write * fifo->info.elemsize), (uint8_t*)xData, fifo->info.elemsize);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4619      	mov	r1, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	7c12      	ldrb	r2, [r2, #16]
 800435c:	fb02 f303 	mul.w	r3, r2, r3
 8004360:	440b      	add	r3, r1
 8004362:	4618      	mov	r0, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	7c1b      	ldrb	r3, [r3, #16]
 8004368:	461a      	mov	r2, r3
 800436a:	6839      	ldr	r1, [r7, #0]
 800436c:	f004 ff86 	bl	800927c <memcpy>
}
 8004370:	bf00      	nop
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <interGet>:

static inline void interGet(sProFIFO* fifo, void* xData) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + fifo->info.read * fifo->info.elemsize), fifo->info.elemsize);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4619      	mov	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	7c12      	ldrb	r2, [r2, #16]
 8004390:	fb02 f303 	mul.w	r3, r2, r3
 8004394:	440b      	add	r3, r1
 8004396:	4619      	mov	r1, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	7c1b      	ldrb	r3, [r3, #16]
 800439c:	461a      	mov	r2, r3
 800439e:	6838      	ldr	r0, [r7, #0]
 80043a0:	f004 ff6c 	bl	800927c <memcpy>
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <interLook>:

static inline void interLook(sProFIFO* fifo, uint32_t xIndex, void* xData) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + xIndex * fifo->info.elemsize), fifo->info.elemsize);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	7c1b      	ldrb	r3, [r3, #16]
 80043c2:	4619      	mov	r1, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	fb03 f301 	mul.w	r3, r3, r1
 80043ca:	4413      	add	r3, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	7c1b      	ldrb	r3, [r3, #16]
 80043d2:	461a      	mov	r2, r3
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f004 ff51 	bl	800927c <memcpy>
}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <interPush>:

static inline uint8_t interPush(sProFIFO* fifo, void* xData) {
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
    uint8_t retval;
    if ((retval = infoGetAvail(&fifo->info))) {
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3304      	adds	r3, #4
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff ff1d 	bl	8004230 <infoGetAvail>
 80043f6:	4603      	mov	r3, r0
 80043f8:	73fb      	strb	r3, [r7, #15]
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00c      	beq.n	800441a <interPush+0x38>
        interPut(fifo,xData);
 8004400:	6839      	ldr	r1, [r7, #0]
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7ff ff9e 	bl	8004344 <interPut>
        infoMovePar(&fifo->info, &fifo->info.write, 1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	1d18      	adds	r0, r3, #4
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	330c      	adds	r3, #12
 8004410:	2201      	movs	r2, #1
 8004412:	4619      	mov	r1, r3
 8004414:	f7ff ff32 	bl	800427c <infoMovePar>
 8004418:	e002      	b.n	8004420 <interPush+0x3e>
    } else { fifo->info.overflow=1; }
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	745a      	strb	r2, [r3, #17]
    return retval;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <interPull>:

static inline uint8_t interPull(sProFIFO* fifo, void* xDest) {
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	6039      	str	r1, [r7, #0]
    uint8_t retval;
    if ((retval = infoIsSome(&fifo->info))) {
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3304      	adds	r3, #4
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff31 	bl	80042a0 <infoIsSome>
 800443e:	4603      	mov	r3, r0
 8004440:	73fb      	strb	r3, [r7, #15]
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00b      	beq.n	8004460 <interPull+0x36>
        interGet(fifo,xDest);
 8004448:	6839      	ldr	r1, [r7, #0]
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff ff94 	bl	8004378 <interGet>
        infoMovePar(&fifo->info, &fifo->info.read, 1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	1d18      	adds	r0, r3, #4
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3308      	adds	r3, #8
 8004458:	2201      	movs	r2, #1
 800445a:	4619      	mov	r1, r3
 800445c:	f7ff ff0e 	bl	800427c <infoMovePar>
    }
    return retval;
 8004460:	7bfb      	ldrb	r3, [r7, #15]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <interPushSequence>:

static inline uint8_t interPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 800446a:	b580      	push	{r7, lr}
 800446c:	b086      	sub	sp, #24
 800446e:	af00      	add	r7, sp, #0
 8004470:	60f8      	str	r0, [r7, #12]
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	607a      	str	r2, [r7, #4]
    uint8_t retval; uint32_t i;
    for (i=0; i<xCount; i++) {
 8004476:	2300      	movs	r3, #0
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	e013      	b.n	80044a4 <interPushSequence+0x3a>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	7c1b      	ldrb	r3, [r3, #16]
 8004480:	461a      	mov	r2, r3
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	fb03 f202 	mul.w	r2, r3, r2
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4413      	add	r3, r2
 800448c:	4619      	mov	r1, r3
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f7ff ffa7 	bl	80043e2 <interPush>
 8004494:	4603      	mov	r3, r0
 8004496:	75fb      	strb	r3, [r7, #23]
 8004498:	7dfb      	ldrb	r3, [r7, #23]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d007      	beq.n	80044ae <interPushSequence+0x44>
    for (i=0; i<xCount; i++) {
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	3301      	adds	r3, #1
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d3e7      	bcc.n	800447c <interPushSequence+0x12>
 80044ac:	e000      	b.n	80044b0 <interPushSequence+0x46>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 80044ae:	bf00      	nop
    }
    return retval;
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <protPushSequence>:

uint8_t protPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b086      	sub	sp, #24
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
    uint8_t retval;
        retval=interPushSequence(fifo,xData,xCount);
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f7ff ffcd 	bl	800446a <interPushSequence>
 80044d0:	4603      	mov	r3, r0
 80044d2:	75fb      	strb	r3, [r7, #23]
    return retval;
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <protPush>:

uint8_t protPush(sProFIFO* fifo, void* xData) {
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
    uint8_t retval;
        retval=interPush(fifo,xData);
 80044e8:	6839      	ldr	r1, [r7, #0]
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff ff79 	bl	80043e2 <interPush>
 80044f0:	4603      	mov	r3, r0
 80044f2:	73fb      	strb	r3, [r7, #15]
    return retval;
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <protPull>:

uint8_t protPull(sProFIFO* fifo, void* xDest) {
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
    uint8_t retval;
        retval=interPull(fifo,xDest);
 8004508:	6839      	ldr	r1, [r7, #0]
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff ff8d 	bl	800442a <interPull>
 8004510:	4603      	mov	r3, r0
 8004512:	73fb      	strb	r3, [r7, #15]
    return retval;
 8004514:	7bfb      	ldrb	r3, [r7, #15]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <protLook>:

void protLook(sProFIFO* fifo, uint32_t xOffset, void* xDest) {
 800451e:	b580      	push	{r7, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
        uint32_t aIndex = infoCorrect(&fifo->info, &fifo->info.read, xOffset);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1d18      	adds	r0, r3, #4
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3308      	adds	r3, #8
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	4619      	mov	r1, r3
 8004536:	f7ff fe8a 	bl	800424e <infoCorrect>
 800453a:	6178      	str	r0, [r7, #20]
        interLook(fifo,aIndex,xDest);
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6979      	ldr	r1, [r7, #20]
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f7ff ff33 	bl	80043ac <interLook>
}
 8004546:	bf00      	nop
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <protMoveRead>:

void protMoveWrite(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.write, amove); }
void protMoveRead(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.read, amove); }
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	1d18      	adds	r0, r3, #4
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3308      	adds	r3, #8
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	4619      	mov	r1, r3
 8004564:	f7ff feaf 	bl	80042c6 <protMovePar>
 8004568:	bf00      	nop
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <protIsSome>:

uint8_t protIsSome(sProFIFO* fifo) { return fifo->info.read != fifo->info.write; }
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	429a      	cmp	r2, r3
 8004582:	bf14      	ite	ne
 8004584:	2301      	movne	r3, #1
 8004586:	2300      	moveq	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	4618      	mov	r0, r3
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800459c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800459e:	e003      	b.n	80045a8 <LoopCopyDataInit>

080045a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80045a0:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80045a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80045a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80045a6:	3104      	adds	r1, #4

080045a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80045a8:	480b      	ldr	r0, [pc, #44]	; (80045d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80045aa:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80045ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80045ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80045b0:	d3f6      	bcc.n	80045a0 <CopyDataInit>
  ldr  r2, =_sbss
 80045b2:	4a0b      	ldr	r2, [pc, #44]	; (80045e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80045b4:	e002      	b.n	80045bc <LoopFillZerobss>

080045b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80045b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80045b8:	f842 3b04 	str.w	r3, [r2], #4

080045bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80045bc:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80045be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80045c0:	d3f9      	bcc.n	80045b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80045c2:	f7fe ffff 	bl	80035c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045c6:	f004 fe35 	bl	8009234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045ca:	f7fd fddd 	bl	8002188 <main>
  bx  lr    
 80045ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80045d0:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80045d4:	080092ec 	.word	0x080092ec
  ldr  r0, =_sdata
 80045d8:	20010000 	.word	0x20010000
  ldr  r3, =_edata
 80045dc:	20010b08 	.word	0x20010b08
  ldr  r2, =_sbss
 80045e0:	20010b08 	.word	0x20010b08
  ldr  r3, = _ebss
 80045e4:	200170dc 	.word	0x200170dc

080045e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045e8:	e7fe      	b.n	80045e8 <ADC_IRQHandler>
	...

080045ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80045f0:	4b08      	ldr	r3, [pc, #32]	; (8004614 <HAL_Init+0x28>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a07      	ldr	r2, [pc, #28]	; (8004614 <HAL_Init+0x28>)
 80045f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045fa:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045fc:	2003      	movs	r0, #3
 80045fe:	f000 fbb3 	bl	8004d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004602:	2000      	movs	r0, #0
 8004604:	f000 f808 	bl	8004618 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004608:	f7fe fbee 	bl	8002de8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40023c00 	.word	0x40023c00

08004618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004620:	4b12      	ldr	r3, [pc, #72]	; (800466c <HAL_InitTick+0x54>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	4b12      	ldr	r3, [pc, #72]	; (8004670 <HAL_InitTick+0x58>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	4619      	mov	r1, r3
 800462a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800462e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004632:	fbb2 f3f3 	udiv	r3, r2, r3
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fbcb 	bl	8004dd2 <HAL_SYSTICK_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e00e      	b.n	8004664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b0f      	cmp	r3, #15
 800464a:	d80a      	bhi.n	8004662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800464c:	2200      	movs	r2, #0
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	f04f 30ff 	mov.w	r0, #4294967295
 8004654:	f000 fb93 	bl	8004d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004658:	4a06      	ldr	r2, [pc, #24]	; (8004674 <HAL_InitTick+0x5c>)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	e000      	b.n	8004664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
}
 8004664:	4618      	mov	r0, r3
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20010014 	.word	0x20010014
 8004670:	20010b04 	.word	0x20010b04
 8004674:	20010b00 	.word	0x20010b00

08004678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800467c:	4b06      	ldr	r3, [pc, #24]	; (8004698 <HAL_IncTick+0x20>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	4b06      	ldr	r3, [pc, #24]	; (800469c <HAL_IncTick+0x24>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4413      	add	r3, r2
 8004688:	4a04      	ldr	r2, [pc, #16]	; (800469c <HAL_IncTick+0x24>)
 800468a:	6013      	str	r3, [r2, #0]
}
 800468c:	bf00      	nop
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20010b04 	.word	0x20010b04
 800469c:	200170d8 	.word	0x200170d8

080046a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  return uwTick;
 80046a4:	4b03      	ldr	r3, [pc, #12]	; (80046b4 <HAL_GetTick+0x14>)
 80046a6:	681b      	ldr	r3, [r3, #0]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	200170d8 	.word	0x200170d8

080046b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e031      	b.n	8004732 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fe fbaa 	bl	8002e30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d116      	bne.n	8004724 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <HAL_ADC_Init+0x84>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	f043 0202 	orr.w	r2, r3, #2
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f964 	bl	80049d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f023 0303 	bic.w	r3, r3, #3
 800471a:	f043 0201 	orr.w	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	641a      	str	r2, [r3, #64]	; 0x40
 8004722:	e001      	b.n	8004728 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004730:	7bfb      	ldrb	r3, [r7, #15]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	ffffeefd 	.word	0xffffeefd

08004740 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_ADC_ConfigChannel+0x1c>
 8004758:	2302      	movs	r3, #2
 800475a:	e12a      	b.n	80049b2 <HAL_ADC_ConfigChannel+0x272>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b09      	cmp	r3, #9
 800476a:	d93a      	bls.n	80047e2 <HAL_ADC_ConfigChannel+0xa2>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004774:	d035      	beq.n	80047e2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68d9      	ldr	r1, [r3, #12]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	b29b      	uxth	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	4613      	mov	r3, r2
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	4413      	add	r3, r2
 800478a:	3b1e      	subs	r3, #30
 800478c:	2207      	movs	r2, #7
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43da      	mvns	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	400a      	ands	r2, r1
 800479a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a87      	ldr	r2, [pc, #540]	; (80049c0 <HAL_ADC_ConfigChannel+0x280>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d10a      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68d9      	ldr	r1, [r3, #12]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	061a      	lsls	r2, r3, #24
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047ba:	e035      	b.n	8004828 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68d9      	ldr	r1, [r3, #12]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	4618      	mov	r0, r3
 80047ce:	4603      	mov	r3, r0
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	4403      	add	r3, r0
 80047d4:	3b1e      	subs	r3, #30
 80047d6:	409a      	lsls	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047e0:	e022      	b.n	8004828 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6919      	ldr	r1, [r3, #16]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	4613      	mov	r3, r2
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	4413      	add	r3, r2
 80047f6:	2207      	movs	r2, #7
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	43da      	mvns	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	400a      	ands	r2, r1
 8004804:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6919      	ldr	r1, [r3, #16]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	4618      	mov	r0, r3
 8004818:	4603      	mov	r3, r0
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4403      	add	r3, r0
 800481e:	409a      	lsls	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b06      	cmp	r3, #6
 800482e:	d824      	bhi.n	800487a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	3b05      	subs	r3, #5
 8004842:	221f      	movs	r2, #31
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	43da      	mvns	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	400a      	ands	r2, r1
 8004850:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	b29b      	uxth	r3, r3
 800485e:	4618      	mov	r0, r3
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	3b05      	subs	r3, #5
 800486c:	fa00 f203 	lsl.w	r2, r0, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	635a      	str	r2, [r3, #52]	; 0x34
 8004878:	e04c      	b.n	8004914 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b0c      	cmp	r3, #12
 8004880:	d824      	bhi.n	80048cc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	3b23      	subs	r3, #35	; 0x23
 8004894:	221f      	movs	r2, #31
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43da      	mvns	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	400a      	ands	r2, r1
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	4618      	mov	r0, r3
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	3b23      	subs	r3, #35	; 0x23
 80048be:	fa00 f203 	lsl.w	r2, r0, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30
 80048ca:	e023      	b.n	8004914 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	3b41      	subs	r3, #65	; 0x41
 80048de:	221f      	movs	r2, #31
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	43da      	mvns	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	400a      	ands	r2, r1
 80048ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	4618      	mov	r0, r3
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	3b41      	subs	r3, #65	; 0x41
 8004908:	fa00 f203 	lsl.w	r2, r0, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a2a      	ldr	r2, [pc, #168]	; (80049c4 <HAL_ADC_ConfigChannel+0x284>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d10a      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x1f4>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004926:	d105      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004928:	4b27      	ldr	r3, [pc, #156]	; (80049c8 <HAL_ADC_ConfigChannel+0x288>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4a26      	ldr	r2, [pc, #152]	; (80049c8 <HAL_ADC_ConfigChannel+0x288>)
 800492e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004932:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a22      	ldr	r2, [pc, #136]	; (80049c4 <HAL_ADC_ConfigChannel+0x284>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d109      	bne.n	8004952 <HAL_ADC_ConfigChannel+0x212>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b12      	cmp	r3, #18
 8004944:	d105      	bne.n	8004952 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004946:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <HAL_ADC_ConfigChannel+0x288>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	4a1f      	ldr	r2, [pc, #124]	; (80049c8 <HAL_ADC_ConfigChannel+0x288>)
 800494c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004950:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1b      	ldr	r2, [pc, #108]	; (80049c4 <HAL_ADC_ConfigChannel+0x284>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d125      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x268>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a17      	ldr	r2, [pc, #92]	; (80049c0 <HAL_ADC_ConfigChannel+0x280>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d003      	beq.n	800496e <HAL_ADC_ConfigChannel+0x22e>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b11      	cmp	r3, #17
 800496c:	d11c      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800496e:	4b16      	ldr	r3, [pc, #88]	; (80049c8 <HAL_ADC_ConfigChannel+0x288>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4a15      	ldr	r2, [pc, #84]	; (80049c8 <HAL_ADC_ConfigChannel+0x288>)
 8004974:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004978:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a10      	ldr	r2, [pc, #64]	; (80049c0 <HAL_ADC_ConfigChannel+0x280>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d111      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004984:	4b11      	ldr	r3, [pc, #68]	; (80049cc <HAL_ADC_ConfigChannel+0x28c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a11      	ldr	r2, [pc, #68]	; (80049d0 <HAL_ADC_ConfigChannel+0x290>)
 800498a:	fba2 2303 	umull	r2, r3, r2, r3
 800498e:	0c9a      	lsrs	r2, r3, #18
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800499a:	e002      	b.n	80049a2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3b01      	subs	r3, #1
 80049a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f9      	bne.n	800499c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	10000012 	.word	0x10000012
 80049c4:	40012000 	.word	0x40012000
 80049c8:	40012300 	.word	0x40012300
 80049cc:	20010014 	.word	0x20010014
 80049d0:	431bde83 	.word	0x431bde83

080049d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80049dc:	4b78      	ldr	r3, [pc, #480]	; (8004bc0 <ADC_Init+0x1ec>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4a77      	ldr	r2, [pc, #476]	; (8004bc0 <ADC_Init+0x1ec>)
 80049e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80049e6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80049e8:	4b75      	ldr	r3, [pc, #468]	; (8004bc0 <ADC_Init+0x1ec>)
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4973      	ldr	r1, [pc, #460]	; (8004bc0 <ADC_Init+0x1ec>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6859      	ldr	r1, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	021a      	lsls	r2, r3, #8
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6859      	ldr	r1, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6899      	ldr	r1, [r3, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a62:	4a58      	ldr	r2, [pc, #352]	; (8004bc4 <ADC_Init+0x1f0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d022      	beq.n	8004aae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6899      	ldr	r1, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6899      	ldr	r1, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	e00f      	b.n	8004ace <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004acc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0202 	bic.w	r2, r2, #2
 8004adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6899      	ldr	r1, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	005a      	lsls	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01b      	beq.n	8004b34 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6859      	ldr	r1, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	3b01      	subs	r3, #1
 8004b28:	035a      	lsls	r2, r3, #13
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
 8004b32:	e007      	b.n	8004b44 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	051a      	lsls	r2, r3, #20
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6899      	ldr	r1, [r3, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b86:	025a      	lsls	r2, r3, #9
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6899      	ldr	r1, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	029a      	lsls	r2, r3, #10
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	609a      	str	r2, [r3, #8]
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	40012300 	.word	0x40012300
 8004bc4:	0f000001 	.word	0x0f000001

08004bc8 <__NVIC_SetPriorityGrouping>:
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bd8:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <__NVIC_SetPriorityGrouping+0x40>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004be4:	4013      	ands	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004bf0:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <__NVIC_SetPriorityGrouping+0x44>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bf6:	4a04      	ldr	r2, [pc, #16]	; (8004c08 <__NVIC_SetPriorityGrouping+0x40>)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	60d3      	str	r3, [r2, #12]
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	e000ed00 	.word	0xe000ed00
 8004c0c:	05fa0000 	.word	0x05fa0000

08004c10 <__NVIC_GetPriorityGrouping>:
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c14:	4b04      	ldr	r3, [pc, #16]	; (8004c28 <__NVIC_GetPriorityGrouping+0x18>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	0a1b      	lsrs	r3, r3, #8
 8004c1a:	f003 0307 	and.w	r3, r3, #7
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	e000ed00 	.word	0xe000ed00

08004c2c <__NVIC_EnableIRQ>:
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	db0b      	blt.n	8004c56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	f003 021f 	and.w	r2, r3, #31
 8004c44:	4907      	ldr	r1, [pc, #28]	; (8004c64 <__NVIC_EnableIRQ+0x38>)
 8004c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	e000e100 	.word	0xe000e100

08004c68 <__NVIC_SetPriority>:
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	6039      	str	r1, [r7, #0]
 8004c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	db0a      	blt.n	8004c92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	490c      	ldr	r1, [pc, #48]	; (8004cb4 <__NVIC_SetPriority+0x4c>)
 8004c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c86:	0112      	lsls	r2, r2, #4
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c90:	e00a      	b.n	8004ca8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	4908      	ldr	r1, [pc, #32]	; (8004cb8 <__NVIC_SetPriority+0x50>)
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	3b04      	subs	r3, #4
 8004ca0:	0112      	lsls	r2, r2, #4
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	761a      	strb	r2, [r3, #24]
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	e000e100 	.word	0xe000e100
 8004cb8:	e000ed00 	.word	0xe000ed00

08004cbc <NVIC_EncodePriority>:
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b089      	sub	sp, #36	; 0x24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f1c3 0307 	rsb	r3, r3, #7
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	bf28      	it	cs
 8004cda:	2304      	movcs	r3, #4
 8004cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	2b06      	cmp	r3, #6
 8004ce4:	d902      	bls.n	8004cec <NVIC_EncodePriority+0x30>
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	3b03      	subs	r3, #3
 8004cea:	e000      	b.n	8004cee <NVIC_EncodePriority+0x32>
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	43da      	mvns	r2, r3
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	401a      	ands	r2, r3
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d04:	f04f 31ff 	mov.w	r1, #4294967295
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0e:	43d9      	mvns	r1, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d14:	4313      	orrs	r3, r2
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3724      	adds	r7, #36	; 0x24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d34:	d301      	bcc.n	8004d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d36:	2301      	movs	r3, #1
 8004d38:	e00f      	b.n	8004d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d3a:	4a0a      	ldr	r2, [pc, #40]	; (8004d64 <SysTick_Config+0x40>)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d42:	210f      	movs	r1, #15
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295
 8004d48:	f7ff ff8e 	bl	8004c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <SysTick_Config+0x40>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d52:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <SysTick_Config+0x40>)
 8004d54:	2207      	movs	r2, #7
 8004d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	e000e010 	.word	0xe000e010

08004d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff ff29 	bl	8004bc8 <__NVIC_SetPriorityGrouping>
}
 8004d76:	bf00      	nop
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b086      	sub	sp, #24
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	4603      	mov	r3, r0
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d90:	f7ff ff3e 	bl	8004c10 <__NVIC_GetPriorityGrouping>
 8004d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	6978      	ldr	r0, [r7, #20]
 8004d9c:	f7ff ff8e 	bl	8004cbc <NVIC_EncodePriority>
 8004da0:	4602      	mov	r2, r0
 8004da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004da6:	4611      	mov	r1, r2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff ff5d 	bl	8004c68 <__NVIC_SetPriority>
}
 8004dae:	bf00      	nop
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff ff31 	bl	8004c2c <__NVIC_EnableIRQ>
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7ff ffa2 	bl	8004d24 <SysTick_Config>
 8004de0:	4603      	mov	r3, r0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e054      	b.n	8004ea8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	7f5b      	ldrb	r3, [r3, #29]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d105      	bne.n	8004e14 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fe f88e 	bl	8002f30 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	791b      	ldrb	r3, [r3, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10c      	bne.n	8004e3c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a22      	ldr	r2, [pc, #136]	; (8004eb0 <HAL_CRC_Init+0xc4>)
 8004e28:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0218 	bic.w	r2, r2, #24
 8004e38:	609a      	str	r2, [r3, #8]
 8004e3a:	e00c      	b.n	8004e56 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6899      	ldr	r1, [r3, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	461a      	mov	r2, r3
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f946 	bl	80050d8 <HAL_CRCEx_Polynomial_Set>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e028      	b.n	8004ea8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	795b      	ldrb	r3, [r3, #5]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d105      	bne.n	8004e6a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f04f 32ff 	mov.w	r2, #4294967295
 8004e66:	611a      	str	r2, [r3, #16]
 8004e68:	e004      	b.n	8004e74 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6912      	ldr	r2, [r2, #16]
 8004e72:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695a      	ldr	r2, [r3, #20]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699a      	ldr	r2, [r3, #24]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	04c11db7 	.word	0x04c11db7

08004eb4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f042 0201 	orr.w	r2, r2, #1
 8004ed8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d022      	beq.n	8004f28 <HAL_CRC_Calculate+0x74>
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d002      	beq.n	8004eec <HAL_CRC_Calculate+0x38>
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d017      	beq.n	8004f1a <HAL_CRC_Calculate+0x66>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8004eea:	e024      	b.n	8004f36 <HAL_CRC_Calculate+0x82>
      for (index = 0U; index < BufferLength; index++)
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e00a      	b.n	8004f08 <HAL_CRC_Calculate+0x54>
        hcrc->Instance->DR = pBuffer[index];
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	441a      	add	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	3301      	adds	r3, #1
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d3f0      	bcc.n	8004ef2 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	613b      	str	r3, [r7, #16]
      break;
 8004f18:	e00d      	b.n	8004f36 <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f811 	bl	8004f46 <CRC_Handle_8>
 8004f24:	6138      	str	r0, [r7, #16]
      break;
 8004f26:	e006      	b.n	8004f36 <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 f898 	bl	8005062 <CRC_Handle_16>
 8004f32:	6138      	str	r0, [r7, #16]
      break;
 8004f34:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8004f3c:	693b      	ldr	r3, [r7, #16]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b089      	sub	sp, #36	; 0x24
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004f52:	2300      	movs	r3, #0
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	e023      	b.n	8004fa0 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	4413      	add	r3, r2
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	3301      	adds	r3, #1
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	440b      	add	r3, r1
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004f72:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	3302      	adds	r3, #2
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	440b      	add	r3, r1
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004f82:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	3303      	adds	r3, #3
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	440b      	add	r3, r1
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004f96:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004f98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	61fb      	str	r3, [r7, #28]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	089b      	lsrs	r3, r3, #2
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d3d6      	bcc.n	8004f58 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d04d      	beq.n	8005050 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d107      	bne.n	8004fce <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f003 0303 	and.w	r3, r3, #3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d116      	bne.n	8005006 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	4413      	add	r3, r2
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	b21a      	sxth	r2, r3
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	3301      	adds	r3, #1
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	440b      	add	r3, r1
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	b21b      	sxth	r3, r3
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	b21b      	sxth	r3, r3
 8004ff8:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	8b7a      	ldrh	r2, [r7, #26]
 8005004:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	2b03      	cmp	r3, #3
 800500e:	d11f      	bne.n	8005050 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	4413      	add	r3, r2
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	b21a      	sxth	r2, r3
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	3301      	adds	r3, #1
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	440b      	add	r3, r1
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	b21b      	sxth	r3, r3
 800502c:	4313      	orrs	r3, r2
 800502e:	b21b      	sxth	r3, r3
 8005030:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	8b7a      	ldrh	r2, [r7, #26]
 800503c:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	3302      	adds	r3, #2
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	4413      	add	r3, r2
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3724      	adds	r7, #36	; 0x24
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005062:	b480      	push	{r7}
 8005064:	b087      	sub	sp, #28
 8005066:	af00      	add	r7, sp, #0
 8005068:	60f8      	str	r0, [r7, #12]
 800506a:	60b9      	str	r1, [r7, #8]
 800506c:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800506e:	2300      	movs	r3, #0
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	e013      	b.n	800509c <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	4413      	add	r3, r2
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	041a      	lsls	r2, r3, #16
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	3302      	adds	r3, #2
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	440b      	add	r3, r1
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	4619      	mov	r1, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	3301      	adds	r3, #1
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	085b      	lsrs	r3, r3, #1
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d3e6      	bcc.n	8005074 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d009      	beq.n	80050c4 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	4413      	add	r3, r2
 80050be:	881a      	ldrh	r2, [r3, #0]
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80050e8:	231f      	movs	r3, #31
 80050ea:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80050ec:	bf00      	nop
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1e5a      	subs	r2, r3, #1
 80050f2:	613a      	str	r2, [r7, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d009      	beq.n	800510c <HAL_CRCEx_Polynomial_Set+0x34>
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0f0      	beq.n	80050ee <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b18      	cmp	r3, #24
 8005110:	d846      	bhi.n	80051a0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005112:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005118:	080051a7 	.word	0x080051a7
 800511c:	080051a1 	.word	0x080051a1
 8005120:	080051a1 	.word	0x080051a1
 8005124:	080051a1 	.word	0x080051a1
 8005128:	080051a1 	.word	0x080051a1
 800512c:	080051a1 	.word	0x080051a1
 8005130:	080051a1 	.word	0x080051a1
 8005134:	080051a1 	.word	0x080051a1
 8005138:	08005195 	.word	0x08005195
 800513c:	080051a1 	.word	0x080051a1
 8005140:	080051a1 	.word	0x080051a1
 8005144:	080051a1 	.word	0x080051a1
 8005148:	080051a1 	.word	0x080051a1
 800514c:	080051a1 	.word	0x080051a1
 8005150:	080051a1 	.word	0x080051a1
 8005154:	080051a1 	.word	0x080051a1
 8005158:	08005189 	.word	0x08005189
 800515c:	080051a1 	.word	0x080051a1
 8005160:	080051a1 	.word	0x080051a1
 8005164:	080051a1 	.word	0x080051a1
 8005168:	080051a1 	.word	0x080051a1
 800516c:	080051a1 	.word	0x080051a1
 8005170:	080051a1 	.word	0x080051a1
 8005174:	080051a1 	.word	0x080051a1
 8005178:	0800517d 	.word	0x0800517d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2b06      	cmp	r3, #6
 8005180:	d913      	bls.n	80051aa <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005186:	e010      	b.n	80051aa <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	2b07      	cmp	r3, #7
 800518c:	d90f      	bls.n	80051ae <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005192:	e00c      	b.n	80051ae <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2b0f      	cmp	r3, #15
 8005198:	d90b      	bls.n	80051b2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800519e:	e008      	b.n	80051b2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	75fb      	strb	r3, [r7, #23]
      break;
 80051a4:	e006      	b.n	80051b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80051a6:	bf00      	nop
 80051a8:	e004      	b.n	80051b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80051aa:	bf00      	nop
 80051ac:	e002      	b.n	80051b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80051ae:	bf00      	nop
 80051b0:	e000      	b.n	80051b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80051b2:	bf00      	nop
  }
  if (status == HAL_OK)
 80051b4:	7dfb      	ldrb	r3, [r7, #23]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10d      	bne.n	80051d6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f023 0118 	bic.w	r1, r3, #24
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80051d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80051f0:	f7ff fa56 	bl	80046a0 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e099      	b.n	8005334 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0201 	bic.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005220:	e00f      	b.n	8005242 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005222:	f7ff fa3d 	bl	80046a0 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b05      	cmp	r3, #5
 800522e:	d908      	bls.n	8005242 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2220      	movs	r2, #32
 8005234:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2203      	movs	r2, #3
 800523a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e078      	b.n	8005334 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e8      	bne.n	8005222 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	4b38      	ldr	r3, [pc, #224]	; (800533c <HAL_DMA_Init+0x158>)
 800525c:	4013      	ands	r3, r2
 800525e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800526e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800527a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005286:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	2b04      	cmp	r3, #4
 800529a:	d107      	bne.n	80052ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	4313      	orrs	r3, r2
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 0307 	bic.w	r3, r3, #7
 80052c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d117      	bne.n	8005306 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00e      	beq.n	8005306 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 fa99 	bl	8005820 <DMA_CheckFifoParam>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d008      	beq.n	8005306 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2240      	movs	r2, #64	; 0x40
 80052f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005302:	2301      	movs	r3, #1
 8005304:	e016      	b.n	8005334 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fa50 	bl	80057b4 <DMA_CalcBaseAndBitshift>
 8005314:	4603      	mov	r3, r0
 8005316:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531c:	223f      	movs	r2, #63	; 0x3f
 800531e:	409a      	lsls	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	e010803f 	.word	0xe010803f

08005340 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005356:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_DMA_Start_IT+0x26>
 8005362:	2302      	movs	r3, #2
 8005364:	e048      	b.n	80053f8 <HAL_DMA_Start_IT+0xb8>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b01      	cmp	r3, #1
 8005378:	d137      	bne.n	80053ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 f9e2 	bl	8005758 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005398:	223f      	movs	r2, #63	; 0x3f
 800539a:	409a      	lsls	r2, r3
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0216 	orr.w	r2, r2, #22
 80053ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695a      	ldr	r2, [r3, #20]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053be:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0208 	orr.w	r2, r2, #8
 80053d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	e005      	b.n	80053f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80053f2:	2302      	movs	r3, #2
 80053f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d004      	beq.n	800541e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2280      	movs	r2, #128	; 0x80
 8005418:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e00c      	b.n	8005438 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2205      	movs	r2, #5
 8005422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0201 	bic.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
inline void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005450:	4b92      	ldr	r3, [pc, #584]	; (800569c <HAL_DMA_IRQHandler+0x258>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a92      	ldr	r2, [pc, #584]	; (80056a0 <HAL_DMA_IRQHandler+0x25c>)
 8005456:	fba2 2303 	umull	r2, r3, r2, r3
 800545a:	0a9b      	lsrs	r3, r3, #10
 800545c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005462:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546e:	2208      	movs	r2, #8
 8005470:	409a      	lsls	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4013      	ands	r3, r2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01a      	beq.n	80054b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d013      	beq.n	80054b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0204 	bic.w	r2, r2, #4
 8005496:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800549c:	2208      	movs	r2, #8
 800549e:	409a      	lsls	r2, r3
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a8:	f043 0201 	orr.w	r2, r3, #1
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b4:	2201      	movs	r2, #1
 80054b6:	409a      	lsls	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d012      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d2:	2201      	movs	r2, #1
 80054d4:	409a      	lsls	r2, r3
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054de:	f043 0202 	orr.w	r2, r3, #2
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ea:	2204      	movs	r2, #4
 80054ec:	409a      	lsls	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d012      	beq.n	800551c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00b      	beq.n	800551c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005508:	2204      	movs	r2, #4
 800550a:	409a      	lsls	r2, r3
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005514:	f043 0204 	orr.w	r2, r3, #4
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005520:	2210      	movs	r2, #16
 8005522:	409a      	lsls	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4013      	ands	r3, r2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d043      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d03c      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800553e:	2210      	movs	r2, #16
 8005540:	409a      	lsls	r2, r3
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d018      	beq.n	8005586 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d108      	bne.n	8005574 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	d024      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	4798      	blx	r3
 8005572:	e01f      	b.n	80055b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01b      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	4798      	blx	r3
 8005584:	e016      	b.n	80055b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005590:	2b00      	cmp	r3, #0
 8005592:	d107      	bne.n	80055a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0208 	bic.w	r2, r2, #8
 80055a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b8:	2220      	movs	r2, #32
 80055ba:	409a      	lsls	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4013      	ands	r3, r2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 808e 	beq.w	80056e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 8086 	beq.w	80056e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055da:	2220      	movs	r2, #32
 80055dc:	409a      	lsls	r2, r3
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b05      	cmp	r3, #5
 80055ec:	d136      	bne.n	800565c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0216 	bic.w	r2, r2, #22
 80055fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695a      	ldr	r2, [r3, #20]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800560c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d103      	bne.n	800561e <HAL_DMA_IRQHandler+0x1da>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561a:	2b00      	cmp	r3, #0
 800561c:	d007      	beq.n	800562e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0208 	bic.w	r2, r2, #8
 800562c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005632:	223f      	movs	r2, #63	; 0x3f
 8005634:	409a      	lsls	r2, r3
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564e:	2b00      	cmp	r3, #0
 8005650:	d07d      	beq.n	800574e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4798      	blx	r3
        }
        return;
 800565a:	e078      	b.n	800574e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01c      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d108      	bne.n	800568a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567c:	2b00      	cmp	r3, #0
 800567e:	d030      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	4798      	blx	r3
 8005688:	e02b      	b.n	80056e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d027      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
 800569a:	e022      	b.n	80056e2 <HAL_DMA_IRQHandler+0x29e>
 800569c:	20010014 	.word	0x20010014
 80056a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10f      	bne.n	80056d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0210 	bic.w	r2, r2, #16
 80056c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d032      	beq.n	8005750 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d022      	beq.n	800573c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2205      	movs	r2, #5
 80056fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0201 	bic.w	r2, r2, #1
 800570c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	3301      	adds	r3, #1
 8005712:	60bb      	str	r3, [r7, #8]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	429a      	cmp	r2, r3
 8005718:	d307      	bcc.n	800572a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1f2      	bne.n	800570e <HAL_DMA_IRQHandler+0x2ca>
 8005728:	e000      	b.n	800572c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800572a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	4798      	blx	r3
 800574c:	e000      	b.n	8005750 <HAL_DMA_IRQHandler+0x30c>
        return;
 800574e:	bf00      	nop
    }
  }
}
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop

08005758 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005774:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d108      	bne.n	8005798 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005796:	e007      	b.n	80057a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	60da      	str	r2, [r3, #12]
}
 80057a8:	bf00      	nop
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	3b10      	subs	r3, #16
 80057c4:	4a13      	ldr	r2, [pc, #76]	; (8005814 <DMA_CalcBaseAndBitshift+0x60>)
 80057c6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ca:	091b      	lsrs	r3, r3, #4
 80057cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80057ce:	4a12      	ldr	r2, [pc, #72]	; (8005818 <DMA_CalcBaseAndBitshift+0x64>)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d908      	bls.n	80057f4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	4b0c      	ldr	r3, [pc, #48]	; (800581c <DMA_CalcBaseAndBitshift+0x68>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	1d1a      	adds	r2, r3, #4
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	659a      	str	r2, [r3, #88]	; 0x58
 80057f2:	e006      	b.n	8005802 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	4b08      	ldr	r3, [pc, #32]	; (800581c <DMA_CalcBaseAndBitshift+0x68>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	aaaaaaab 	.word	0xaaaaaaab
 8005818:	080092d4 	.word	0x080092d4
 800581c:	fffffc00 	.word	0xfffffc00

08005820 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d11f      	bne.n	800587a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b03      	cmp	r3, #3
 800583e:	d855      	bhi.n	80058ec <DMA_CheckFifoParam+0xcc>
 8005840:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <DMA_CheckFifoParam+0x28>)
 8005842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005846:	bf00      	nop
 8005848:	08005859 	.word	0x08005859
 800584c:	0800586b 	.word	0x0800586b
 8005850:	08005859 	.word	0x08005859
 8005854:	080058ed 	.word	0x080058ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d045      	beq.n	80058f0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005868:	e042      	b.n	80058f0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005872:	d13f      	bne.n	80058f4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005878:	e03c      	b.n	80058f4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005882:	d121      	bne.n	80058c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b03      	cmp	r3, #3
 8005888:	d836      	bhi.n	80058f8 <DMA_CheckFifoParam+0xd8>
 800588a:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <DMA_CheckFifoParam+0x70>)
 800588c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005890:	080058a1 	.word	0x080058a1
 8005894:	080058a7 	.word	0x080058a7
 8005898:	080058a1 	.word	0x080058a1
 800589c:	080058b9 	.word	0x080058b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	73fb      	strb	r3, [r7, #15]
      break;
 80058a4:	e02f      	b.n	8005906 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d024      	beq.n	80058fc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058b6:	e021      	b.n	80058fc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058c0:	d11e      	bne.n	8005900 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80058c6:	e01b      	b.n	8005900 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d902      	bls.n	80058d4 <DMA_CheckFifoParam+0xb4>
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d003      	beq.n	80058da <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80058d2:	e018      	b.n	8005906 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	73fb      	strb	r3, [r7, #15]
      break;
 80058d8:	e015      	b.n	8005906 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00e      	beq.n	8005904 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	73fb      	strb	r3, [r7, #15]
      break;
 80058ea:	e00b      	b.n	8005904 <DMA_CheckFifoParam+0xe4>
      break;
 80058ec:	bf00      	nop
 80058ee:	e00a      	b.n	8005906 <DMA_CheckFifoParam+0xe6>
      break;
 80058f0:	bf00      	nop
 80058f2:	e008      	b.n	8005906 <DMA_CheckFifoParam+0xe6>
      break;
 80058f4:	bf00      	nop
 80058f6:	e006      	b.n	8005906 <DMA_CheckFifoParam+0xe6>
      break;
 80058f8:	bf00      	nop
 80058fa:	e004      	b.n	8005906 <DMA_CheckFifoParam+0xe6>
      break;
 80058fc:	bf00      	nop
 80058fe:	e002      	b.n	8005906 <DMA_CheckFifoParam+0xe6>
      break;   
 8005900:	bf00      	nop
 8005902:	e000      	b.n	8005906 <DMA_CheckFifoParam+0xe6>
      break;
 8005904:	bf00      	nop
    }
  } 
  
  return status; 
 8005906:	7bfb      	ldrb	r3, [r7, #15]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005914:	b480      	push	{r7}
 8005916:	b089      	sub	sp, #36	; 0x24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800591e:	2300      	movs	r3, #0
 8005920:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005926:	2300      	movs	r3, #0
 8005928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800592a:	2300      	movs	r3, #0
 800592c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
 8005932:	e169      	b.n	8005c08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005934:	2201      	movs	r2, #1
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4013      	ands	r3, r2
 8005946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	429a      	cmp	r2, r3
 800594e:	f040 8158 	bne.w	8005c02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d00b      	beq.n	8005972 <HAL_GPIO_Init+0x5e>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b02      	cmp	r3, #2
 8005960:	d007      	beq.n	8005972 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005966:	2b11      	cmp	r3, #17
 8005968:	d003      	beq.n	8005972 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b12      	cmp	r3, #18
 8005970:	d130      	bne.n	80059d4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	2203      	movs	r2, #3
 800597e:	fa02 f303 	lsl.w	r3, r2, r3
 8005982:	43db      	mvns	r3, r3
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	4013      	ands	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	fa02 f303 	lsl.w	r3, r2, r3
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	4313      	orrs	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059a8:	2201      	movs	r2, #1
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	fa02 f303 	lsl.w	r3, r2, r3
 80059b0:	43db      	mvns	r3, r3
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	4013      	ands	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	091b      	lsrs	r3, r3, #4
 80059be:	f003 0201 	and.w	r2, r3, #1
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	2203      	movs	r2, #3
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	43db      	mvns	r3, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4013      	ands	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d003      	beq.n	8005a14 <HAL_GPIO_Init+0x100>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	2b12      	cmp	r3, #18
 8005a12:	d123      	bne.n	8005a5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	08da      	lsrs	r2, r3, #3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3208      	adds	r2, #8
 8005a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	220f      	movs	r2, #15
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	43db      	mvns	r3, r3
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	4013      	ands	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	08da      	lsrs	r2, r3, #3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3208      	adds	r2, #8
 8005a56:	69b9      	ldr	r1, [r7, #24]
 8005a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	2203      	movs	r2, #3
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	4013      	ands	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f003 0203 	and.w	r2, r3, #3
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 80b2 	beq.w	8005c02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a9e:	4b5f      	ldr	r3, [pc, #380]	; (8005c1c <HAL_GPIO_Init+0x308>)
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa2:	4a5e      	ldr	r2, [pc, #376]	; (8005c1c <HAL_GPIO_Init+0x308>)
 8005aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8005aaa:	4b5c      	ldr	r3, [pc, #368]	; (8005c1c <HAL_GPIO_Init+0x308>)
 8005aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005ab6:	4a5a      	ldr	r2, [pc, #360]	; (8005c20 <HAL_GPIO_Init+0x30c>)
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	089b      	lsrs	r3, r3, #2
 8005abc:	3302      	adds	r3, #2
 8005abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	220f      	movs	r2, #15
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a51      	ldr	r2, [pc, #324]	; (8005c24 <HAL_GPIO_Init+0x310>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d02b      	beq.n	8005b3a <HAL_GPIO_Init+0x226>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a50      	ldr	r2, [pc, #320]	; (8005c28 <HAL_GPIO_Init+0x314>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d025      	beq.n	8005b36 <HAL_GPIO_Init+0x222>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a4f      	ldr	r2, [pc, #316]	; (8005c2c <HAL_GPIO_Init+0x318>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d01f      	beq.n	8005b32 <HAL_GPIO_Init+0x21e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a4e      	ldr	r2, [pc, #312]	; (8005c30 <HAL_GPIO_Init+0x31c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d019      	beq.n	8005b2e <HAL_GPIO_Init+0x21a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a4d      	ldr	r2, [pc, #308]	; (8005c34 <HAL_GPIO_Init+0x320>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d013      	beq.n	8005b2a <HAL_GPIO_Init+0x216>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a4c      	ldr	r2, [pc, #304]	; (8005c38 <HAL_GPIO_Init+0x324>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00d      	beq.n	8005b26 <HAL_GPIO_Init+0x212>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a4b      	ldr	r2, [pc, #300]	; (8005c3c <HAL_GPIO_Init+0x328>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d007      	beq.n	8005b22 <HAL_GPIO_Init+0x20e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a4a      	ldr	r2, [pc, #296]	; (8005c40 <HAL_GPIO_Init+0x32c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d101      	bne.n	8005b1e <HAL_GPIO_Init+0x20a>
 8005b1a:	2307      	movs	r3, #7
 8005b1c:	e00e      	b.n	8005b3c <HAL_GPIO_Init+0x228>
 8005b1e:	2308      	movs	r3, #8
 8005b20:	e00c      	b.n	8005b3c <HAL_GPIO_Init+0x228>
 8005b22:	2306      	movs	r3, #6
 8005b24:	e00a      	b.n	8005b3c <HAL_GPIO_Init+0x228>
 8005b26:	2305      	movs	r3, #5
 8005b28:	e008      	b.n	8005b3c <HAL_GPIO_Init+0x228>
 8005b2a:	2304      	movs	r3, #4
 8005b2c:	e006      	b.n	8005b3c <HAL_GPIO_Init+0x228>
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e004      	b.n	8005b3c <HAL_GPIO_Init+0x228>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e002      	b.n	8005b3c <HAL_GPIO_Init+0x228>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <HAL_GPIO_Init+0x228>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	69fa      	ldr	r2, [r7, #28]
 8005b3e:	f002 0203 	and.w	r2, r2, #3
 8005b42:	0092      	lsls	r2, r2, #2
 8005b44:	4093      	lsls	r3, r2
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005b4c:	4934      	ldr	r1, [pc, #208]	; (8005c20 <HAL_GPIO_Init+0x30c>)
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	089b      	lsrs	r3, r3, #2
 8005b52:	3302      	adds	r3, #2
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b5a:	4b3a      	ldr	r3, [pc, #232]	; (8005c44 <HAL_GPIO_Init+0x330>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	43db      	mvns	r3, r3
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	4013      	ands	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b7e:	4a31      	ldr	r2, [pc, #196]	; (8005c44 <HAL_GPIO_Init+0x330>)
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005b84:	4b2f      	ldr	r3, [pc, #188]	; (8005c44 <HAL_GPIO_Init+0x330>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	43db      	mvns	r3, r3
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	4013      	ands	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ba8:	4a26      	ldr	r2, [pc, #152]	; (8005c44 <HAL_GPIO_Init+0x330>)
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bae:	4b25      	ldr	r3, [pc, #148]	; (8005c44 <HAL_GPIO_Init+0x330>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bd2:	4a1c      	ldr	r2, [pc, #112]	; (8005c44 <HAL_GPIO_Init+0x330>)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bd8:	4b1a      	ldr	r3, [pc, #104]	; (8005c44 <HAL_GPIO_Init+0x330>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	43db      	mvns	r3, r3
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	4013      	ands	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005bfc:	4a11      	ldr	r2, [pc, #68]	; (8005c44 <HAL_GPIO_Init+0x330>)
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	3301      	adds	r3, #1
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	2b0f      	cmp	r3, #15
 8005c0c:	f67f ae92 	bls.w	8005934 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005c10:	bf00      	nop
 8005c12:	3724      	adds	r7, #36	; 0x24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	40013800 	.word	0x40013800
 8005c24:	40020000 	.word	0x40020000
 8005c28:	40020400 	.word	0x40020400
 8005c2c:	40020800 	.word	0x40020800
 8005c30:	40020c00 	.word	0x40020c00
 8005c34:	40021000 	.word	0x40021000
 8005c38:	40021400 	.word	0x40021400
 8005c3c:	40021800 	.word	0x40021800
 8005c40:	40021c00 	.word	0x40021c00
 8005c44:	40013c00 	.word	0x40013c00

08005c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
inline void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	807b      	strh	r3, [r7, #2]
 8005c54:	4613      	mov	r3, r2
 8005c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c58:	787b      	ldrb	r3, [r7, #1]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c5e:	887a      	ldrh	r2, [r7, #2]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005c64:	e003      	b.n	8005c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005c66:	887b      	ldrh	r3, [r7, #2]
 8005c68:	041a      	lsls	r2, r3, #16
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	619a      	str	r2, [r3, #24]
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
	...

08005c7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
inline void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c86:	4b08      	ldr	r3, [pc, #32]	; (8005ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c88:	695a      	ldr	r2, [r3, #20]
 8005c8a:	88fb      	ldrh	r3, [r7, #6]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d006      	beq.n	8005ca0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c92:	4a05      	ldr	r2, [pc, #20]	; (8005ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c94:	88fb      	ldrh	r3, [r7, #6]
 8005c96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fc fa12 	bl	80020c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ca0:	bf00      	nop
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40013c00 	.word	0x40013c00

08005cac <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005cbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005cd6:	4b23      	ldr	r3, [pc, #140]	; (8005d64 <HAL_PWREx_EnableOverDrive+0x98>)
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	4a22      	ldr	r2, [pc, #136]	; (8005d64 <HAL_PWREx_EnableOverDrive+0x98>)
 8005cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ce2:	4b20      	ldr	r3, [pc, #128]	; (8005d64 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cea:	603b      	str	r3, [r7, #0]
 8005cec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005cee:	4b1e      	ldr	r3, [pc, #120]	; (8005d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a1d      	ldr	r2, [pc, #116]	; (8005d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cf8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cfa:	f7fe fcd1 	bl	80046a0 <HAL_GetTick>
 8005cfe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d00:	e009      	b.n	8005d16 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d02:	f7fe fccd 	bl	80046a0 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d10:	d901      	bls.n	8005d16 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e022      	b.n	8005d5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d16:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d22:	d1ee      	bne.n	8005d02 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d24:	4b10      	ldr	r3, [pc, #64]	; (8005d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a0f      	ldr	r2, [pc, #60]	; (8005d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d30:	f7fe fcb6 	bl	80046a0 <HAL_GetTick>
 8005d34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d36:	e009      	b.n	8005d4c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d38:	f7fe fcb2 	bl	80046a0 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d46:	d901      	bls.n	8005d4c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e007      	b.n	8005d5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d4c:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d58:	d1ee      	bne.n	8005d38 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	40023800 	.word	0x40023800
 8005d68:	40007000 	.word	0x40007000

08005d6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005d74:	2300      	movs	r3, #0
 8005d76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e291      	b.n	80062a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 8087 	beq.w	8005e9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d90:	4b96      	ldr	r3, [pc, #600]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f003 030c 	and.w	r3, r3, #12
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d00c      	beq.n	8005db6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d9c:	4b93      	ldr	r3, [pc, #588]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 030c 	and.w	r3, r3, #12
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d112      	bne.n	8005dce <HAL_RCC_OscConfig+0x62>
 8005da8:	4b90      	ldr	r3, [pc, #576]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005db4:	d10b      	bne.n	8005dce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db6:	4b8d      	ldr	r3, [pc, #564]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d06c      	beq.n	8005e9c <HAL_RCC_OscConfig+0x130>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d168      	bne.n	8005e9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e26b      	b.n	80062a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd6:	d106      	bne.n	8005de6 <HAL_RCC_OscConfig+0x7a>
 8005dd8:	4b84      	ldr	r3, [pc, #528]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a83      	ldr	r2, [pc, #524]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	e02e      	b.n	8005e44 <HAL_RCC_OscConfig+0xd8>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10c      	bne.n	8005e08 <HAL_RCC_OscConfig+0x9c>
 8005dee:	4b7f      	ldr	r3, [pc, #508]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a7e      	ldr	r2, [pc, #504]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df8:	6013      	str	r3, [r2, #0]
 8005dfa:	4b7c      	ldr	r3, [pc, #496]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a7b      	ldr	r2, [pc, #492]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	e01d      	b.n	8005e44 <HAL_RCC_OscConfig+0xd8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e10:	d10c      	bne.n	8005e2c <HAL_RCC_OscConfig+0xc0>
 8005e12:	4b76      	ldr	r3, [pc, #472]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a75      	ldr	r2, [pc, #468]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	4b73      	ldr	r3, [pc, #460]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a72      	ldr	r2, [pc, #456]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	e00b      	b.n	8005e44 <HAL_RCC_OscConfig+0xd8>
 8005e2c:	4b6f      	ldr	r3, [pc, #444]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a6e      	ldr	r2, [pc, #440]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	4b6c      	ldr	r3, [pc, #432]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a6b      	ldr	r2, [pc, #428]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d013      	beq.n	8005e74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4c:	f7fe fc28 	bl	80046a0 <HAL_GetTick>
 8005e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e54:	f7fe fc24 	bl	80046a0 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b64      	cmp	r3, #100	; 0x64
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e21f      	b.n	80062a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e66:	4b61      	ldr	r3, [pc, #388]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0f0      	beq.n	8005e54 <HAL_RCC_OscConfig+0xe8>
 8005e72:	e014      	b.n	8005e9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e74:	f7fe fc14 	bl	80046a0 <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e7c:	f7fe fc10 	bl	80046a0 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b64      	cmp	r3, #100	; 0x64
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e20b      	b.n	80062a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e8e:	4b57      	ldr	r3, [pc, #348]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f0      	bne.n	8005e7c <HAL_RCC_OscConfig+0x110>
 8005e9a:	e000      	b.n	8005e9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d069      	beq.n	8005f7e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005eaa:	4b50      	ldr	r3, [pc, #320]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 030c 	and.w	r3, r3, #12
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00b      	beq.n	8005ece <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eb6:	4b4d      	ldr	r3, [pc, #308]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 030c 	and.w	r3, r3, #12
 8005ebe:	2b08      	cmp	r3, #8
 8005ec0:	d11c      	bne.n	8005efc <HAL_RCC_OscConfig+0x190>
 8005ec2:	4b4a      	ldr	r3, [pc, #296]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d116      	bne.n	8005efc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ece:	4b47      	ldr	r3, [pc, #284]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d005      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x17a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d001      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e1df      	b.n	80062a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee6:	4b41      	ldr	r3, [pc, #260]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	493d      	ldr	r1, [pc, #244]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005efa:	e040      	b.n	8005f7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d023      	beq.n	8005f4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f04:	4b39      	ldr	r3, [pc, #228]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a38      	ldr	r2, [pc, #224]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005f0a:	f043 0301 	orr.w	r3, r3, #1
 8005f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f10:	f7fe fbc6 	bl	80046a0 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f18:	f7fe fbc2 	bl	80046a0 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e1bd      	b.n	80062a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f2a:	4b30      	ldr	r3, [pc, #192]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0f0      	beq.n	8005f18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f36:	4b2d      	ldr	r3, [pc, #180]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	4929      	ldr	r1, [pc, #164]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	600b      	str	r3, [r1, #0]
 8005f4a:	e018      	b.n	8005f7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f4c:	4b27      	ldr	r3, [pc, #156]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a26      	ldr	r2, [pc, #152]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005f52:	f023 0301 	bic.w	r3, r3, #1
 8005f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f58:	f7fe fba2 	bl	80046a0 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f60:	f7fe fb9e 	bl	80046a0 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e199      	b.n	80062a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f72:	4b1e      	ldr	r3, [pc, #120]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1f0      	bne.n	8005f60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d038      	beq.n	8005ffc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d019      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f92:	4b16      	ldr	r3, [pc, #88]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f96:	4a15      	ldr	r2, [pc, #84]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005f98:	f043 0301 	orr.w	r3, r3, #1
 8005f9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9e:	f7fe fb7f 	bl	80046a0 <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fa6:	f7fe fb7b 	bl	80046a0 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e176      	b.n	80062a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fb8:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0f0      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x23a>
 8005fc4:	e01a      	b.n	8005ffc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fc6:	4b09      	ldr	r3, [pc, #36]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fca:	4a08      	ldr	r2, [pc, #32]	; (8005fec <HAL_RCC_OscConfig+0x280>)
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd2:	f7fe fb65 	bl	80046a0 <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fd8:	e00a      	b.n	8005ff0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fda:	f7fe fb61 	bl	80046a0 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d903      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e15c      	b.n	80062a6 <HAL_RCC_OscConfig+0x53a>
 8005fec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ff0:	4b91      	ldr	r3, [pc, #580]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 8005ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1ee      	bne.n	8005fda <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 80a4 	beq.w	8006152 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800600a:	4b8b      	ldr	r3, [pc, #556]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10d      	bne.n	8006032 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006016:	4b88      	ldr	r3, [pc, #544]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	4a87      	ldr	r2, [pc, #540]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 800601c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006020:	6413      	str	r3, [r2, #64]	; 0x40
 8006022:	4b85      	ldr	r3, [pc, #532]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800602a:	60bb      	str	r3, [r7, #8]
 800602c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800602e:	2301      	movs	r3, #1
 8006030:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006032:	4b82      	ldr	r3, [pc, #520]	; (800623c <HAL_RCC_OscConfig+0x4d0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603a:	2b00      	cmp	r3, #0
 800603c:	d118      	bne.n	8006070 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800603e:	4b7f      	ldr	r3, [pc, #508]	; (800623c <HAL_RCC_OscConfig+0x4d0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a7e      	ldr	r2, [pc, #504]	; (800623c <HAL_RCC_OscConfig+0x4d0>)
 8006044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800604a:	f7fe fb29 	bl	80046a0 <HAL_GetTick>
 800604e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006050:	e008      	b.n	8006064 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006052:	f7fe fb25 	bl	80046a0 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b64      	cmp	r3, #100	; 0x64
 800605e:	d901      	bls.n	8006064 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e120      	b.n	80062a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006064:	4b75      	ldr	r3, [pc, #468]	; (800623c <HAL_RCC_OscConfig+0x4d0>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0f0      	beq.n	8006052 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d106      	bne.n	8006086 <HAL_RCC_OscConfig+0x31a>
 8006078:	4b6f      	ldr	r3, [pc, #444]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 800607a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607c:	4a6e      	ldr	r2, [pc, #440]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 800607e:	f043 0301 	orr.w	r3, r3, #1
 8006082:	6713      	str	r3, [r2, #112]	; 0x70
 8006084:	e02d      	b.n	80060e2 <HAL_RCC_OscConfig+0x376>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10c      	bne.n	80060a8 <HAL_RCC_OscConfig+0x33c>
 800608e:	4b6a      	ldr	r3, [pc, #424]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 8006090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006092:	4a69      	ldr	r2, [pc, #420]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 8006094:	f023 0301 	bic.w	r3, r3, #1
 8006098:	6713      	str	r3, [r2, #112]	; 0x70
 800609a:	4b67      	ldr	r3, [pc, #412]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 800609c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609e:	4a66      	ldr	r2, [pc, #408]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 80060a0:	f023 0304 	bic.w	r3, r3, #4
 80060a4:	6713      	str	r3, [r2, #112]	; 0x70
 80060a6:	e01c      	b.n	80060e2 <HAL_RCC_OscConfig+0x376>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2b05      	cmp	r3, #5
 80060ae:	d10c      	bne.n	80060ca <HAL_RCC_OscConfig+0x35e>
 80060b0:	4b61      	ldr	r3, [pc, #388]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 80060b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b4:	4a60      	ldr	r2, [pc, #384]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 80060b6:	f043 0304 	orr.w	r3, r3, #4
 80060ba:	6713      	str	r3, [r2, #112]	; 0x70
 80060bc:	4b5e      	ldr	r3, [pc, #376]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 80060be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c0:	4a5d      	ldr	r2, [pc, #372]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 80060c2:	f043 0301 	orr.w	r3, r3, #1
 80060c6:	6713      	str	r3, [r2, #112]	; 0x70
 80060c8:	e00b      	b.n	80060e2 <HAL_RCC_OscConfig+0x376>
 80060ca:	4b5b      	ldr	r3, [pc, #364]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ce:	4a5a      	ldr	r2, [pc, #360]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 80060d0:	f023 0301 	bic.w	r3, r3, #1
 80060d4:	6713      	str	r3, [r2, #112]	; 0x70
 80060d6:	4b58      	ldr	r3, [pc, #352]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 80060d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060da:	4a57      	ldr	r2, [pc, #348]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 80060dc:	f023 0304 	bic.w	r3, r3, #4
 80060e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d015      	beq.n	8006116 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ea:	f7fe fad9 	bl	80046a0 <HAL_GetTick>
 80060ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060f0:	e00a      	b.n	8006108 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f2:	f7fe fad5 	bl	80046a0 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006100:	4293      	cmp	r3, r2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e0ce      	b.n	80062a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006108:	4b4b      	ldr	r3, [pc, #300]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 800610a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0ee      	beq.n	80060f2 <HAL_RCC_OscConfig+0x386>
 8006114:	e014      	b.n	8006140 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006116:	f7fe fac3 	bl	80046a0 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800611c:	e00a      	b.n	8006134 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800611e:	f7fe fabf 	bl	80046a0 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	f241 3288 	movw	r2, #5000	; 0x1388
 800612c:	4293      	cmp	r3, r2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e0b8      	b.n	80062a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006134:	4b40      	ldr	r3, [pc, #256]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 8006136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1ee      	bne.n	800611e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006140:	7dfb      	ldrb	r3, [r7, #23]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d105      	bne.n	8006152 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006146:	4b3c      	ldr	r3, [pc, #240]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	4a3b      	ldr	r2, [pc, #236]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 800614c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006150:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 80a4 	beq.w	80062a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800615c:	4b36      	ldr	r3, [pc, #216]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f003 030c 	and.w	r3, r3, #12
 8006164:	2b08      	cmp	r3, #8
 8006166:	d06b      	beq.n	8006240 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d149      	bne.n	8006204 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006170:	4b31      	ldr	r3, [pc, #196]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a30      	ldr	r2, [pc, #192]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 8006176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800617a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800617c:	f7fe fa90 	bl	80046a0 <HAL_GetTick>
 8006180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006182:	e008      	b.n	8006196 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006184:	f7fe fa8c 	bl	80046a0 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d901      	bls.n	8006196 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e087      	b.n	80062a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006196:	4b28      	ldr	r3, [pc, #160]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1f0      	bne.n	8006184 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69da      	ldr	r2, [r3, #28]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	019b      	lsls	r3, r3, #6
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b8:	085b      	lsrs	r3, r3, #1
 80061ba:	3b01      	subs	r3, #1
 80061bc:	041b      	lsls	r3, r3, #16
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	061b      	lsls	r3, r3, #24
 80061c6:	4313      	orrs	r3, r2
 80061c8:	4a1b      	ldr	r2, [pc, #108]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 80061ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061d0:	4b19      	ldr	r3, [pc, #100]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a18      	ldr	r2, [pc, #96]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 80061d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061dc:	f7fe fa60 	bl	80046a0 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061e4:	f7fe fa5c 	bl	80046a0 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e057      	b.n	80062a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061f6:	4b10      	ldr	r3, [pc, #64]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0f0      	beq.n	80061e4 <HAL_RCC_OscConfig+0x478>
 8006202:	e04f      	b.n	80062a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006204:	4b0c      	ldr	r3, [pc, #48]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a0b      	ldr	r2, [pc, #44]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 800620a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800620e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006210:	f7fe fa46 	bl	80046a0 <HAL_GetTick>
 8006214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006216:	e008      	b.n	800622a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006218:	f7fe fa42 	bl	80046a0 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e03d      	b.n	80062a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800622a:	4b03      	ldr	r3, [pc, #12]	; (8006238 <HAL_RCC_OscConfig+0x4cc>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1f0      	bne.n	8006218 <HAL_RCC_OscConfig+0x4ac>
 8006236:	e035      	b.n	80062a4 <HAL_RCC_OscConfig+0x538>
 8006238:	40023800 	.word	0x40023800
 800623c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006240:	4b1b      	ldr	r3, [pc, #108]	; (80062b0 <HAL_RCC_OscConfig+0x544>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d028      	beq.n	80062a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006258:	429a      	cmp	r2, r3
 800625a:	d121      	bne.n	80062a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006266:	429a      	cmp	r2, r3
 8006268:	d11a      	bne.n	80062a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006270:	4013      	ands	r3, r2
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006276:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006278:	4293      	cmp	r3, r2
 800627a:	d111      	bne.n	80062a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006286:	085b      	lsrs	r3, r3, #1
 8006288:	3b01      	subs	r3, #1
 800628a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800628c:	429a      	cmp	r2, r3
 800628e:	d107      	bne.n	80062a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800629c:	429a      	cmp	r2, r3
 800629e:	d001      	beq.n	80062a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	40023800 	.word	0x40023800

080062b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0d0      	b.n	800646e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062cc:	4b6a      	ldr	r3, [pc, #424]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d910      	bls.n	80062fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062da:	4b67      	ldr	r3, [pc, #412]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f023 020f 	bic.w	r2, r3, #15
 80062e2:	4965      	ldr	r1, [pc, #404]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ea:	4b63      	ldr	r3, [pc, #396]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d001      	beq.n	80062fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e0b8      	b.n	800646e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d020      	beq.n	800634a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006314:	4b59      	ldr	r3, [pc, #356]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	4a58      	ldr	r2, [pc, #352]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 800631a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800631e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800632c:	4b53      	ldr	r3, [pc, #332]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	4a52      	ldr	r2, [pc, #328]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 8006332:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006336:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006338:	4b50      	ldr	r3, [pc, #320]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	494d      	ldr	r1, [pc, #308]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 8006346:	4313      	orrs	r3, r2
 8006348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d040      	beq.n	80063d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d107      	bne.n	800636e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635e:	4b47      	ldr	r3, [pc, #284]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d115      	bne.n	8006396 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e07f      	b.n	800646e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d107      	bne.n	8006386 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006376:	4b41      	ldr	r3, [pc, #260]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d109      	bne.n	8006396 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e073      	b.n	800646e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006386:	4b3d      	ldr	r3, [pc, #244]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e06b      	b.n	800646e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006396:	4b39      	ldr	r3, [pc, #228]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f023 0203 	bic.w	r2, r3, #3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	4936      	ldr	r1, [pc, #216]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063a8:	f7fe f97a 	bl	80046a0 <HAL_GetTick>
 80063ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ae:	e00a      	b.n	80063c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063b0:	f7fe f976 	bl	80046a0 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80063be:	4293      	cmp	r3, r2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e053      	b.n	800646e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c6:	4b2d      	ldr	r3, [pc, #180]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 020c 	and.w	r2, r3, #12
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d1eb      	bne.n	80063b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063d8:	4b27      	ldr	r3, [pc, #156]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 030f 	and.w	r3, r3, #15
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d210      	bcs.n	8006408 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063e6:	4b24      	ldr	r3, [pc, #144]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f023 020f 	bic.w	r2, r3, #15
 80063ee:	4922      	ldr	r1, [pc, #136]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063f6:	4b20      	ldr	r3, [pc, #128]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d001      	beq.n	8006408 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e032      	b.n	800646e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006414:	4b19      	ldr	r3, [pc, #100]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	4916      	ldr	r1, [pc, #88]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 8006422:	4313      	orrs	r3, r2
 8006424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d009      	beq.n	8006446 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006432:	4b12      	ldr	r3, [pc, #72]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	490e      	ldr	r1, [pc, #56]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 8006442:	4313      	orrs	r3, r2
 8006444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006446:	f000 f821 	bl	800648c <HAL_RCC_GetSysClockFreq>
 800644a:	4601      	mov	r1, r0
 800644c:	4b0b      	ldr	r3, [pc, #44]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	091b      	lsrs	r3, r3, #4
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	4a0a      	ldr	r2, [pc, #40]	; (8006480 <HAL_RCC_ClockConfig+0x1cc>)
 8006458:	5cd3      	ldrb	r3, [r2, r3]
 800645a:	fa21 f303 	lsr.w	r3, r1, r3
 800645e:	4a09      	ldr	r2, [pc, #36]	; (8006484 <HAL_RCC_ClockConfig+0x1d0>)
 8006460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006462:	4b09      	ldr	r3, [pc, #36]	; (8006488 <HAL_RCC_ClockConfig+0x1d4>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe f8d6 	bl	8004618 <HAL_InitTick>

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	40023c00 	.word	0x40023c00
 800647c:	40023800 	.word	0x40023800
 8006480:	080092bc 	.word	0x080092bc
 8006484:	20010014 	.word	0x20010014
 8006488:	20010b00 	.word	0x20010b00

0800648c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800648c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006492:	2300      	movs	r3, #0
 8006494:	607b      	str	r3, [r7, #4]
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	2300      	movs	r3, #0
 800649c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064a2:	4b50      	ldr	r3, [pc, #320]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 030c 	and.w	r3, r3, #12
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d007      	beq.n	80064be <HAL_RCC_GetSysClockFreq+0x32>
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d008      	beq.n	80064c4 <HAL_RCC_GetSysClockFreq+0x38>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f040 808d 	bne.w	80065d2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064b8:	4b4b      	ldr	r3, [pc, #300]	; (80065e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80064ba:	60bb      	str	r3, [r7, #8]
      break;
 80064bc:	e08c      	b.n	80065d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064be:	4b4b      	ldr	r3, [pc, #300]	; (80065ec <HAL_RCC_GetSysClockFreq+0x160>)
 80064c0:	60bb      	str	r3, [r7, #8]
      break;
 80064c2:	e089      	b.n	80065d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064c4:	4b47      	ldr	r3, [pc, #284]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064cc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80064ce:	4b45      	ldr	r3, [pc, #276]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d023      	beq.n	8006522 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064da:	4b42      	ldr	r3, [pc, #264]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	099b      	lsrs	r3, r3, #6
 80064e0:	f04f 0400 	mov.w	r4, #0
 80064e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80064e8:	f04f 0200 	mov.w	r2, #0
 80064ec:	ea03 0501 	and.w	r5, r3, r1
 80064f0:	ea04 0602 	and.w	r6, r4, r2
 80064f4:	4a3d      	ldr	r2, [pc, #244]	; (80065ec <HAL_RCC_GetSysClockFreq+0x160>)
 80064f6:	fb02 f106 	mul.w	r1, r2, r6
 80064fa:	2200      	movs	r2, #0
 80064fc:	fb02 f205 	mul.w	r2, r2, r5
 8006500:	440a      	add	r2, r1
 8006502:	493a      	ldr	r1, [pc, #232]	; (80065ec <HAL_RCC_GetSysClockFreq+0x160>)
 8006504:	fba5 0101 	umull	r0, r1, r5, r1
 8006508:	1853      	adds	r3, r2, r1
 800650a:	4619      	mov	r1, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f04f 0400 	mov.w	r4, #0
 8006512:	461a      	mov	r2, r3
 8006514:	4623      	mov	r3, r4
 8006516:	f7fa faa1 	bl	8000a5c <__aeabi_uldivmod>
 800651a:	4603      	mov	r3, r0
 800651c:	460c      	mov	r4, r1
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	e049      	b.n	80065b6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006522:	4b30      	ldr	r3, [pc, #192]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	099b      	lsrs	r3, r3, #6
 8006528:	f04f 0400 	mov.w	r4, #0
 800652c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006530:	f04f 0200 	mov.w	r2, #0
 8006534:	ea03 0501 	and.w	r5, r3, r1
 8006538:	ea04 0602 	and.w	r6, r4, r2
 800653c:	4629      	mov	r1, r5
 800653e:	4632      	mov	r2, r6
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	f04f 0400 	mov.w	r4, #0
 8006548:	0154      	lsls	r4, r2, #5
 800654a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800654e:	014b      	lsls	r3, r1, #5
 8006550:	4619      	mov	r1, r3
 8006552:	4622      	mov	r2, r4
 8006554:	1b49      	subs	r1, r1, r5
 8006556:	eb62 0206 	sbc.w	r2, r2, r6
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	f04f 0400 	mov.w	r4, #0
 8006562:	0194      	lsls	r4, r2, #6
 8006564:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006568:	018b      	lsls	r3, r1, #6
 800656a:	1a5b      	subs	r3, r3, r1
 800656c:	eb64 0402 	sbc.w	r4, r4, r2
 8006570:	f04f 0100 	mov.w	r1, #0
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	00e2      	lsls	r2, r4, #3
 800657a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800657e:	00d9      	lsls	r1, r3, #3
 8006580:	460b      	mov	r3, r1
 8006582:	4614      	mov	r4, r2
 8006584:	195b      	adds	r3, r3, r5
 8006586:	eb44 0406 	adc.w	r4, r4, r6
 800658a:	f04f 0100 	mov.w	r1, #0
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	02a2      	lsls	r2, r4, #10
 8006594:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006598:	0299      	lsls	r1, r3, #10
 800659a:	460b      	mov	r3, r1
 800659c:	4614      	mov	r4, r2
 800659e:	4618      	mov	r0, r3
 80065a0:	4621      	mov	r1, r4
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f04f 0400 	mov.w	r4, #0
 80065a8:	461a      	mov	r2, r3
 80065aa:	4623      	mov	r3, r4
 80065ac:	f7fa fa56 	bl	8000a5c <__aeabi_uldivmod>
 80065b0:	4603      	mov	r3, r0
 80065b2:	460c      	mov	r4, r1
 80065b4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80065b6:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	0c1b      	lsrs	r3, r3, #16
 80065bc:	f003 0303 	and.w	r3, r3, #3
 80065c0:	3301      	adds	r3, #1
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ce:	60bb      	str	r3, [r7, #8]
      break;
 80065d0:	e002      	b.n	80065d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065d2:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80065d4:	60bb      	str	r3, [r7, #8]
      break;
 80065d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065d8:	68bb      	ldr	r3, [r7, #8]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065e2:	bf00      	nop
 80065e4:	40023800 	.word	0x40023800
 80065e8:	00f42400 	.word	0x00f42400
 80065ec:	017d7840 	.word	0x017d7840

080065f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065f4:	4b03      	ldr	r3, [pc, #12]	; (8006604 <HAL_RCC_GetHCLKFreq+0x14>)
 80065f6:	681b      	ldr	r3, [r3, #0]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	20010014 	.word	0x20010014

08006608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800660c:	f7ff fff0 	bl	80065f0 <HAL_RCC_GetHCLKFreq>
 8006610:	4601      	mov	r1, r0
 8006612:	4b05      	ldr	r3, [pc, #20]	; (8006628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	0a9b      	lsrs	r3, r3, #10
 8006618:	f003 0307 	and.w	r3, r3, #7
 800661c:	4a03      	ldr	r2, [pc, #12]	; (800662c <HAL_RCC_GetPCLK1Freq+0x24>)
 800661e:	5cd3      	ldrb	r3, [r2, r3]
 8006620:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006624:	4618      	mov	r0, r3
 8006626:	bd80      	pop	{r7, pc}
 8006628:	40023800 	.word	0x40023800
 800662c:	080092cc 	.word	0x080092cc

08006630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006634:	f7ff ffdc 	bl	80065f0 <HAL_RCC_GetHCLKFreq>
 8006638:	4601      	mov	r1, r0
 800663a:	4b05      	ldr	r3, [pc, #20]	; (8006650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	0b5b      	lsrs	r3, r3, #13
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	4a03      	ldr	r2, [pc, #12]	; (8006654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006646:	5cd3      	ldrb	r3, [r2, r3]
 8006648:	fa21 f303 	lsr.w	r3, r1, r3
}
 800664c:	4618      	mov	r0, r3
 800664e:	bd80      	pop	{r7, pc}
 8006650:	40023800 	.word	0x40023800
 8006654:	080092cc 	.word	0x080092cc

08006658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b088      	sub	sp, #32
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8006668:	2300      	movs	r3, #0
 800666a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d012      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800667c:	4b65      	ldr	r3, [pc, #404]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	4a64      	ldr	r2, [pc, #400]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006682:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006686:	6093      	str	r3, [r2, #8]
 8006688:	4b62      	ldr	r3, [pc, #392]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	4960      	ldr	r1, [pc, #384]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006692:	4313      	orrs	r3, r2
 8006694:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800669e:	2301      	movs	r3, #1
 80066a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d017      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066ae:	4b59      	ldr	r3, [pc, #356]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80066b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066bc:	4955      	ldr	r1, [pc, #340]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066cc:	d101      	bne.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80066ce:	2301      	movs	r3, #1
 80066d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80066da:	2301      	movs	r3, #1
 80066dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d017      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80066ea:	4b4a      	ldr	r3, [pc, #296]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80066ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	4946      	ldr	r1, [pc, #280]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006708:	d101      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800670a:	2301      	movs	r3, #1
 800670c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8006716:	2301      	movs	r3, #1
 8006718:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0320 	and.w	r3, r3, #32
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 808b 	beq.w	800683e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006728:	4b3a      	ldr	r3, [pc, #232]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800672a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672c:	4a39      	ldr	r2, [pc, #228]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800672e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006732:	6413      	str	r3, [r2, #64]	; 0x40
 8006734:	4b37      	ldr	r3, [pc, #220]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006740:	4b35      	ldr	r3, [pc, #212]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a34      	ldr	r2, [pc, #208]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800674a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800674c:	f7fd ffa8 	bl	80046a0 <HAL_GetTick>
 8006750:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006752:	e008      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006754:	f7fd ffa4 	bl	80046a0 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b64      	cmp	r3, #100	; 0x64
 8006760:	d901      	bls.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e2ba      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006766:	4b2c      	ldr	r3, [pc, #176]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0f0      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006772:	4b28      	ldr	r3, [pc, #160]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800677a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d035      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	429a      	cmp	r2, r3
 800678e:	d02e      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006790:	4b20      	ldr	r3, [pc, #128]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006798:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800679a:	4b1e      	ldr	r3, [pc, #120]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800679c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679e:	4a1d      	ldr	r2, [pc, #116]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067a6:	4b1b      	ldr	r3, [pc, #108]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067aa:	4a1a      	ldr	r2, [pc, #104]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80067b2:	4a18      	ldr	r2, [pc, #96]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80067b8:	4b16      	ldr	r3, [pc, #88]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d114      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c4:	f7fd ff6c 	bl	80046a0 <HAL_GetTick>
 80067c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ca:	e00a      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067cc:	f7fd ff68 	bl	80046a0 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067da:	4293      	cmp	r3, r2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e27c      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067e2:	4b0c      	ldr	r3, [pc, #48]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0ee      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067fa:	d111      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80067fc:	4b05      	ldr	r3, [pc, #20]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006808:	4b04      	ldr	r3, [pc, #16]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800680a:	400b      	ands	r3, r1
 800680c:	4901      	ldr	r1, [pc, #4]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800680e:	4313      	orrs	r3, r2
 8006810:	608b      	str	r3, [r1, #8]
 8006812:	e00b      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006814:	40023800 	.word	0x40023800
 8006818:	40007000 	.word	0x40007000
 800681c:	0ffffcff 	.word	0x0ffffcff
 8006820:	4ba3      	ldr	r3, [pc, #652]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	4aa2      	ldr	r2, [pc, #648]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006826:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800682a:	6093      	str	r3, [r2, #8]
 800682c:	4ba0      	ldr	r3, [pc, #640]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800682e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006838:	499d      	ldr	r1, [pc, #628]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800683a:	4313      	orrs	r3, r2
 800683c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0310 	and.w	r3, r3, #16
 8006846:	2b00      	cmp	r3, #0
 8006848:	d010      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800684a:	4b99      	ldr	r3, [pc, #612]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800684c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006850:	4a97      	ldr	r2, [pc, #604]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006856:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800685a:	4b95      	ldr	r3, [pc, #596]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800685c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006864:	4992      	ldr	r1, [pc, #584]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006866:	4313      	orrs	r3, r2
 8006868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006878:	4b8d      	ldr	r3, [pc, #564]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800687a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006886:	498a      	ldr	r1, [pc, #552]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006888:	4313      	orrs	r3, r2
 800688a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800689a:	4b85      	ldr	r3, [pc, #532]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800689c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a8:	4981      	ldr	r1, [pc, #516]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068bc:	4b7c      	ldr	r3, [pc, #496]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80068be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ca:	4979      	ldr	r1, [pc, #484]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068de:	4b74      	ldr	r3, [pc, #464]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80068e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e4:	f023 0203 	bic.w	r2, r3, #3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ec:	4970      	ldr	r1, [pc, #448]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006900:	4b6b      	ldr	r3, [pc, #428]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006906:	f023 020c 	bic.w	r2, r3, #12
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	4968      	ldr	r1, [pc, #416]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006910:	4313      	orrs	r3, r2
 8006912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006922:	4b63      	ldr	r3, [pc, #396]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006928:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006930:	495f      	ldr	r1, [pc, #380]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006932:	4313      	orrs	r3, r2
 8006934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006944:	4b5a      	ldr	r3, [pc, #360]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006952:	4957      	ldr	r1, [pc, #348]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006954:	4313      	orrs	r3, r2
 8006956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006966:	4b52      	ldr	r3, [pc, #328]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006974:	494e      	ldr	r1, [pc, #312]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006976:	4313      	orrs	r3, r2
 8006978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00a      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006988:	4b49      	ldr	r3, [pc, #292]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800698a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006996:	4946      	ldr	r1, [pc, #280]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006998:	4313      	orrs	r3, r2
 800699a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80069aa:	4b41      	ldr	r3, [pc, #260]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80069ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b8:	493d      	ldr	r1, [pc, #244]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00a      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80069cc:	4b38      	ldr	r3, [pc, #224]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80069ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069da:	4935      	ldr	r1, [pc, #212]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d011      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80069ee:	4b30      	ldr	r3, [pc, #192]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80069f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069fc:	492c      	ldr	r1, [pc, #176]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a0c:	d101      	bne.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00a      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a1e:	4b24      	ldr	r3, [pc, #144]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a2c:	4920      	ldr	r1, [pc, #128]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00a      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a40:	4b1b      	ldr	r3, [pc, #108]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a4e:	4918      	ldr	r1, [pc, #96]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00a      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006a62:	4b13      	ldr	r3, [pc, #76]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a68:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a70:	490f      	ldr	r1, [pc, #60]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d005      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a86:	f040 809c 	bne.w	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a8a:	4b09      	ldr	r3, [pc, #36]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a08      	ldr	r2, [pc, #32]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006a90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a96:	f7fd fe03 	bl	80046a0 <HAL_GetTick>
 8006a9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a9c:	e00a      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a9e:	f7fd fdff 	bl	80046a0 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b64      	cmp	r3, #100	; 0x64
 8006aaa:	d903      	bls.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e115      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x684>
 8006ab0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ab4:	4b8b      	ldr	r3, [pc, #556]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1ee      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d017      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d113      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ad4:	4b83      	ldr	r3, [pc, #524]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ada:	0e1b      	lsrs	r3, r3, #24
 8006adc:	f003 030f 	and.w	r3, r3, #15
 8006ae0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	019a      	lsls	r2, r3, #6
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	061b      	lsls	r3, r3, #24
 8006aec:	431a      	orrs	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	071b      	lsls	r3, r3, #28
 8006af4:	497b      	ldr	r1, [pc, #492]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d004      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b10:	d00a      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d024      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b26:	d11f      	bne.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b28:	4b6e      	ldr	r3, [pc, #440]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b2e:	0f1b      	lsrs	r3, r3, #28
 8006b30:	f003 0307 	and.w	r3, r3, #7
 8006b34:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	019a      	lsls	r2, r3, #6
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	061b      	lsls	r3, r3, #24
 8006b42:	431a      	orrs	r2, r3
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	071b      	lsls	r3, r3, #28
 8006b48:	4966      	ldr	r1, [pc, #408]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b50:	4b64      	ldr	r3, [pc, #400]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b56:	f023 021f 	bic.w	r2, r3, #31
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	4960      	ldr	r1, [pc, #384]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00d      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	019a      	lsls	r2, r3, #6
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	061b      	lsls	r3, r3, #24
 8006b80:	431a      	orrs	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	071b      	lsls	r3, r3, #28
 8006b88:	4956      	ldr	r1, [pc, #344]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b90:	4b54      	ldr	r3, [pc, #336]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a53      	ldr	r2, [pc, #332]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006b96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b9c:	f7fd fd80 	bl	80046a0 <HAL_GetTick>
 8006ba0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ba4:	f7fd fd7c 	bl	80046a0 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b64      	cmp	r3, #100	; 0x64
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e092      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bb6:	4b4b      	ldr	r3, [pc, #300]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0f0      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	f040 8088 	bne.w	8006cda <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006bca:	4b46      	ldr	r3, [pc, #280]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a45      	ldr	r2, [pc, #276]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bd6:	f7fd fd63 	bl	80046a0 <HAL_GetTick>
 8006bda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bdc:	e008      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006bde:	f7fd fd5f 	bl	80046a0 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b64      	cmp	r3, #100	; 0x64
 8006bea:	d901      	bls.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e075      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bf0:	4b3c      	ldr	r3, [pc, #240]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bfc:	d0ef      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d009      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d024      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d120      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c26:	4b2f      	ldr	r3, [pc, #188]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c2c:	0c1b      	lsrs	r3, r3, #16
 8006c2e:	f003 0303 	and.w	r3, r3, #3
 8006c32:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	019a      	lsls	r2, r3, #6
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	041b      	lsls	r3, r3, #16
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	061b      	lsls	r3, r3, #24
 8006c46:	4927      	ldr	r1, [pc, #156]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c4e:	4b25      	ldr	r3, [pc, #148]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	4920      	ldr	r1, [pc, #128]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d018      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c7c:	d113      	bne.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c7e:	4b19      	ldr	r3, [pc, #100]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c84:	0e1b      	lsrs	r3, r3, #24
 8006c86:	f003 030f 	and.w	r3, r3, #15
 8006c8a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	019a      	lsls	r2, r3, #6
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	041b      	lsls	r3, r3, #16
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	061b      	lsls	r3, r3, #24
 8006c9e:	4911      	ldr	r1, [pc, #68]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006ca6:	4b0f      	ldr	r3, [pc, #60]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a0e      	ldr	r2, [pc, #56]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cb2:	f7fd fcf5 	bl	80046a0 <HAL_GetTick>
 8006cb6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cb8:	e008      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006cba:	f7fd fcf1 	bl	80046a0 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b64      	cmp	r3, #100	; 0x64
 8006cc6:	d901      	bls.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e007      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ccc:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd8:	d1ef      	bne.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3720      	adds	r7, #32
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	40023800 	.word	0x40023800

08006ce8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e01c      	b.n	8006d34 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	795b      	ldrb	r3, [r3, #5]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d105      	bne.n	8006d10 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fc f930 	bl	8002f70 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0204 	orr.w	r2, r2, #4
 8006d24:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e084      	b.n	8006e58 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d106      	bne.n	8006d6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7fc f921 	bl	8002fb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2202      	movs	r2, #2
 8006d72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d84:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d8e:	d902      	bls.n	8006d96 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	e002      	b.n	8006d9c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d9a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006da4:	d007      	beq.n	8006db6 <HAL_SPI_Init+0x7a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dae:	d002      	beq.n	8006db6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10b      	bne.n	8006dd6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dc6:	d903      	bls.n	8006dd0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	631a      	str	r2, [r3, #48]	; 0x30
 8006dce:	e002      	b.n	8006dd6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006df4:	431a      	orrs	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	ea42 0103 	orr.w	r1, r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	0c1b      	lsrs	r3, r3, #16
 8006e16:	f003 0204 	and.w	r2, r3, #4
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e24:	431a      	orrs	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	ea42 0103 	orr.w	r1, r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	69da      	ldr	r2, [r3, #28]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
inline void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b088      	sub	sp, #32
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	099b      	lsrs	r3, r3, #6
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10f      	bne.n	8006ea4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	099b      	lsrs	r3, r3, #6
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d004      	beq.n	8006ea4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	4798      	blx	r3
    return;
 8006ea2:	e0d8      	b.n	8007056 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	085b      	lsrs	r3, r3, #1
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00a      	beq.n	8006ec6 <HAL_SPI_IRQHandler+0x66>
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	09db      	lsrs	r3, r3, #7
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d004      	beq.n	8006ec6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	4798      	blx	r3
    return;
 8006ec4:	e0c7      	b.n	8007056 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10c      	bne.n	8006eec <HAL_SPI_IRQHandler+0x8c>
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	099b      	lsrs	r3, r3, #6
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d106      	bne.n	8006eec <HAL_SPI_IRQHandler+0x8c>
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	0a1b      	lsrs	r3, r3, #8
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 80b5 	beq.w	8007056 <HAL_SPI_IRQHandler+0x1f6>
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	095b      	lsrs	r3, r3, #5
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 80ae 	beq.w	8007056 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	099b      	lsrs	r3, r3, #6
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d023      	beq.n	8006f4e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d011      	beq.n	8006f36 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f16:	f043 0204 	orr.w	r2, r3, #4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f1e:	2300      	movs	r3, #0
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	617b      	str	r3, [r7, #20]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	617b      	str	r3, [r7, #20]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	e00b      	b.n	8006f4e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f36:	2300      	movs	r3, #0
 8006f38:	613b      	str	r3, [r7, #16]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	613b      	str	r3, [r7, #16]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	613b      	str	r3, [r7, #16]
 8006f4a:	693b      	ldr	r3, [r7, #16]
        return;
 8006f4c:	e083      	b.n	8007056 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d014      	beq.n	8006f84 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f5e:	f043 0201 	orr.w	r2, r3, #1
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006f66:	2300      	movs	r3, #0
 8006f68:	60fb      	str	r3, [r7, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	0a1b      	lsrs	r3, r3, #8
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00c      	beq.n	8006faa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f94:	f043 0208 	orr.w	r2, r3, #8
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60bb      	str	r3, [r7, #8]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	60bb      	str	r3, [r7, #8]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d050      	beq.n	8007054 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006fc0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	f003 0302 	and.w	r3, r3, #2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d104      	bne.n	8006fde <HAL_SPI_IRQHandler+0x17e>
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d034      	beq.n	8007048 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0203 	bic.w	r2, r2, #3
 8006fec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d011      	beq.n	800701a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ffa:	4a18      	ldr	r2, [pc, #96]	; (800705c <HAL_SPI_IRQHandler+0x1fc>)
 8006ffc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007002:	4618      	mov	r0, r3
 8007004:	f7fe f9fc 	bl	8005400 <HAL_DMA_Abort_IT>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007012:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701e:	2b00      	cmp	r3, #0
 8007020:	d016      	beq.n	8007050 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007026:	4a0d      	ldr	r2, [pc, #52]	; (800705c <HAL_SPI_IRQHandler+0x1fc>)
 8007028:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe f9e6 	bl	8005400 <HAL_DMA_Abort_IT>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00a      	beq.n	8007050 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800703e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007046:	e003      	b.n	8007050 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f809 	bl	8007060 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800704e:	e000      	b.n	8007052 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007050:	bf00      	nop
    return;
 8007052:	bf00      	nop
 8007054:	bf00      	nop
  }
}
 8007056:	3720      	adds	r7, #32
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	08007075 	.word	0x08007075

08007060 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007080:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f7ff ffe5 	bl	8007060 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007096:	bf00      	nop
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b082      	sub	sp, #8
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e01d      	b.n	80070ec <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d106      	bne.n	80070ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7fc f857 	bl	8003178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2202      	movs	r2, #2
 80070ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	3304      	adds	r3, #4
 80070da:	4619      	mov	r1, r3
 80070dc:	4610      	mov	r0, r2
 80070de:	f000 fbe7 	bl	80078b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2202      	movs	r2, #2
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689a      	ldr	r2, [r3, #8]
 800710a:	4b0e      	ldr	r3, [pc, #56]	; (8007144 <HAL_TIM_Base_Start+0x50>)
 800710c:	4013      	ands	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2b06      	cmp	r3, #6
 8007114:	d00b      	beq.n	800712e <HAL_TIM_Base_Start+0x3a>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800711c:	d007      	beq.n	800712e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f042 0201 	orr.w	r2, r2, #1
 800712c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	00010007 	.word	0x00010007

08007148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f042 0201 	orr.w	r2, r2, #1
 800715e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <HAL_TIM_Base_Start_IT+0x50>)
 8007168:	4013      	ands	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b06      	cmp	r3, #6
 8007170:	d00b      	beq.n	800718a <HAL_TIM_Base_Start_IT+0x42>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007178:	d007      	beq.n	800718a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0201 	orr.w	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3714      	adds	r7, #20
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	00010007 	.word	0x00010007

0800719c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e01d      	b.n	80071ea <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d106      	bne.n	80071c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7fb ffa4 	bl	8003110 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3304      	adds	r3, #4
 80071d8:	4619      	mov	r1, r3
 80071da:	4610      	mov	r0, r2
 80071dc:	f000 fb68 	bl	80078b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b082      	sub	sp, #8
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e02d      	b.n	8007262 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d106      	bne.n	8007220 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f825 	bl	800726a <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3304      	adds	r3, #4
 8007230:	4619      	mov	r1, r3
 8007232:	4610      	mov	r0, r2
 8007234:	f000 fb3c 	bl	80078b0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f022 0208 	bic.w	r2, r2, #8
 8007246:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6819      	ldr	r1, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	430a      	orrs	r2, r1
 8007256:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
inline void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b02      	cmp	r3, #2
 8007292:	d122      	bne.n	80072da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d11b      	bne.n	80072da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f06f 0202 	mvn.w	r2, #2
 80072aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	f003 0303 	and.w	r3, r3, #3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fad7 	bl	8007874 <HAL_TIM_IC_CaptureCallback>
 80072c6:	e005      	b.n	80072d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fac9 	bl	8007860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fada 	bl	8007888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d122      	bne.n	800732e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	f003 0304 	and.w	r3, r3, #4
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d11b      	bne.n	800732e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f06f 0204 	mvn.w	r2, #4
 80072fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 faad 	bl	8007874 <HAL_TIM_IC_CaptureCallback>
 800731a:	e005      	b.n	8007328 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fa9f 	bl	8007860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fab0 	bl	8007888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	f003 0308 	and.w	r3, r3, #8
 8007338:	2b08      	cmp	r3, #8
 800733a:	d122      	bne.n	8007382 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f003 0308 	and.w	r3, r3, #8
 8007346:	2b08      	cmp	r3, #8
 8007348:	d11b      	bne.n	8007382 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f06f 0208 	mvn.w	r2, #8
 8007352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2204      	movs	r2, #4
 8007358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	69db      	ldr	r3, [r3, #28]
 8007360:	f003 0303 	and.w	r3, r3, #3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fa83 	bl	8007874 <HAL_TIM_IC_CaptureCallback>
 800736e:	e005      	b.n	800737c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fa75 	bl	8007860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa86 	bl	8007888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	f003 0310 	and.w	r3, r3, #16
 800738c:	2b10      	cmp	r3, #16
 800738e:	d122      	bne.n	80073d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	f003 0310 	and.w	r3, r3, #16
 800739a:	2b10      	cmp	r3, #16
 800739c:	d11b      	bne.n	80073d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f06f 0210 	mvn.w	r2, #16
 80073a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2208      	movs	r2, #8
 80073ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fa59 	bl	8007874 <HAL_TIM_IC_CaptureCallback>
 80073c2:	e005      	b.n	80073d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fa4b 	bl	8007860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fa5c 	bl	8007888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d10e      	bne.n	8007402 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d107      	bne.n	8007402 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f06f 0201 	mvn.w	r2, #1
 80073fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7fa fe81 	bl	8002104 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800740c:	2b80      	cmp	r3, #128	; 0x80
 800740e:	d10e      	bne.n	800742e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800741a:	2b80      	cmp	r3, #128	; 0x80
 800741c:	d107      	bne.n	800742e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 ff1f 	bl	800826c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743c:	d10e      	bne.n	800745c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007448:	2b80      	cmp	r3, #128	; 0x80
 800744a:	d107      	bne.n	800745c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 ff12 	bl	8008280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007466:	2b40      	cmp	r3, #64	; 0x40
 8007468:	d10e      	bne.n	8007488 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007474:	2b40      	cmp	r3, #64	; 0x40
 8007476:	d107      	bne.n	8007488 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fa0a 	bl	800789c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b20      	cmp	r3, #32
 8007494:	d10e      	bne.n	80074b4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	f003 0320 	and.w	r3, r3, #32
 80074a0:	2b20      	cmp	r3, #32
 80074a2:	d107      	bne.n	80074b4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f06f 0220 	mvn.w	r2, #32
 80074ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fed2 	bl	8008258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074b4:	bf00      	nop
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80074d2:	2302      	movs	r3, #2
 80074d4:	e105      	b.n	80076e2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2202      	movs	r2, #2
 80074e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b14      	cmp	r3, #20
 80074ea:	f200 80f0 	bhi.w	80076ce <HAL_TIM_PWM_ConfigChannel+0x212>
 80074ee:	a201      	add	r2, pc, #4	; (adr r2, 80074f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80074f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f4:	08007549 	.word	0x08007549
 80074f8:	080076cf 	.word	0x080076cf
 80074fc:	080076cf 	.word	0x080076cf
 8007500:	080076cf 	.word	0x080076cf
 8007504:	08007589 	.word	0x08007589
 8007508:	080076cf 	.word	0x080076cf
 800750c:	080076cf 	.word	0x080076cf
 8007510:	080076cf 	.word	0x080076cf
 8007514:	080075cb 	.word	0x080075cb
 8007518:	080076cf 	.word	0x080076cf
 800751c:	080076cf 	.word	0x080076cf
 8007520:	080076cf 	.word	0x080076cf
 8007524:	0800760b 	.word	0x0800760b
 8007528:	080076cf 	.word	0x080076cf
 800752c:	080076cf 	.word	0x080076cf
 8007530:	080076cf 	.word	0x080076cf
 8007534:	0800764d 	.word	0x0800764d
 8007538:	080076cf 	.word	0x080076cf
 800753c:	080076cf 	.word	0x080076cf
 8007540:	080076cf 	.word	0x080076cf
 8007544:	0800768d 	.word	0x0800768d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68b9      	ldr	r1, [r7, #8]
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fa4e 	bl	80079f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	699a      	ldr	r2, [r3, #24]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0208 	orr.w	r2, r2, #8
 8007562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	699a      	ldr	r2, [r3, #24]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0204 	bic.w	r2, r2, #4
 8007572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6999      	ldr	r1, [r3, #24]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	691a      	ldr	r2, [r3, #16]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	619a      	str	r2, [r3, #24]
      break;
 8007586:	e0a3      	b.n	80076d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68b9      	ldr	r1, [r7, #8]
 800758e:	4618      	mov	r0, r3
 8007590:	f000 faa0 	bl	8007ad4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699a      	ldr	r2, [r3, #24]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699a      	ldr	r2, [r3, #24]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6999      	ldr	r1, [r3, #24]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	021a      	lsls	r2, r3, #8
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	430a      	orrs	r2, r1
 80075c6:	619a      	str	r2, [r3, #24]
      break;
 80075c8:	e082      	b.n	80076d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68b9      	ldr	r1, [r7, #8]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 faf7 	bl	8007bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69da      	ldr	r2, [r3, #28]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f042 0208 	orr.w	r2, r2, #8
 80075e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69da      	ldr	r2, [r3, #28]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0204 	bic.w	r2, r2, #4
 80075f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	69d9      	ldr	r1, [r3, #28]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	691a      	ldr	r2, [r3, #16]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	61da      	str	r2, [r3, #28]
      break;
 8007608:	e062      	b.n	80076d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68b9      	ldr	r1, [r7, #8]
 8007610:	4618      	mov	r0, r3
 8007612:	f000 fb4d 	bl	8007cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	69da      	ldr	r2, [r3, #28]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	69da      	ldr	r2, [r3, #28]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69d9      	ldr	r1, [r3, #28]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	021a      	lsls	r2, r3, #8
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	61da      	str	r2, [r3, #28]
      break;
 800764a:	e041      	b.n	80076d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fb84 	bl	8007d60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0208 	orr.w	r2, r2, #8
 8007666:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0204 	bic.w	r2, r2, #4
 8007676:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	691a      	ldr	r2, [r3, #16]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800768a:	e021      	b.n	80076d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68b9      	ldr	r1, [r7, #8]
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fbb6 	bl	8007e04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	021a      	lsls	r2, r3, #8
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076cc:	e000      	b.n	80076d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80076ce:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop

080076ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d101      	bne.n	8007704 <HAL_TIM_ConfigClockSource+0x18>
 8007700:	2302      	movs	r3, #2
 8007702:	e0a6      	b.n	8007852 <HAL_TIM_ConfigClockSource+0x166>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4b4f      	ldr	r3, [pc, #316]	; (800785c <HAL_TIM_ConfigClockSource+0x170>)
 8007720:	4013      	ands	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800772a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b40      	cmp	r3, #64	; 0x40
 800773a:	d067      	beq.n	800780c <HAL_TIM_ConfigClockSource+0x120>
 800773c:	2b40      	cmp	r3, #64	; 0x40
 800773e:	d80b      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x6c>
 8007740:	2b10      	cmp	r3, #16
 8007742:	d073      	beq.n	800782c <HAL_TIM_ConfigClockSource+0x140>
 8007744:	2b10      	cmp	r3, #16
 8007746:	d802      	bhi.n	800774e <HAL_TIM_ConfigClockSource+0x62>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d06f      	beq.n	800782c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800774c:	e078      	b.n	8007840 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800774e:	2b20      	cmp	r3, #32
 8007750:	d06c      	beq.n	800782c <HAL_TIM_ConfigClockSource+0x140>
 8007752:	2b30      	cmp	r3, #48	; 0x30
 8007754:	d06a      	beq.n	800782c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007756:	e073      	b.n	8007840 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007758:	2b70      	cmp	r3, #112	; 0x70
 800775a:	d00d      	beq.n	8007778 <HAL_TIM_ConfigClockSource+0x8c>
 800775c:	2b70      	cmp	r3, #112	; 0x70
 800775e:	d804      	bhi.n	800776a <HAL_TIM_ConfigClockSource+0x7e>
 8007760:	2b50      	cmp	r3, #80	; 0x50
 8007762:	d033      	beq.n	80077cc <HAL_TIM_ConfigClockSource+0xe0>
 8007764:	2b60      	cmp	r3, #96	; 0x60
 8007766:	d041      	beq.n	80077ec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007768:	e06a      	b.n	8007840 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800776a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800776e:	d066      	beq.n	800783e <HAL_TIM_ConfigClockSource+0x152>
 8007770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007774:	d017      	beq.n	80077a6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007776:	e063      	b.n	8007840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6818      	ldr	r0, [r3, #0]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	6899      	ldr	r1, [r3, #8]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f000 fc0a 	bl	8007fa0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800779a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	609a      	str	r2, [r3, #8]
      break;
 80077a4:	e04c      	b.n	8007840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	6899      	ldr	r1, [r3, #8]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	f000 fbf3 	bl	8007fa0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077c8:	609a      	str	r2, [r3, #8]
      break;
 80077ca:	e039      	b.n	8007840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6818      	ldr	r0, [r3, #0]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	6859      	ldr	r1, [r3, #4]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	461a      	mov	r2, r3
 80077da:	f000 fb67 	bl	8007eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2150      	movs	r1, #80	; 0x50
 80077e4:	4618      	mov	r0, r3
 80077e6:	f000 fbc0 	bl	8007f6a <TIM_ITRx_SetConfig>
      break;
 80077ea:	e029      	b.n	8007840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6818      	ldr	r0, [r3, #0]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	6859      	ldr	r1, [r3, #4]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	461a      	mov	r2, r3
 80077fa:	f000 fb86 	bl	8007f0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2160      	movs	r1, #96	; 0x60
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fbb0 	bl	8007f6a <TIM_ITRx_SetConfig>
      break;
 800780a:	e019      	b.n	8007840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	6859      	ldr	r1, [r3, #4]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	461a      	mov	r2, r3
 800781a:	f000 fb47 	bl	8007eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2140      	movs	r1, #64	; 0x40
 8007824:	4618      	mov	r0, r3
 8007826:	f000 fba0 	bl	8007f6a <TIM_ITRx_SetConfig>
      break;
 800782a:	e009      	b.n	8007840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4619      	mov	r1, r3
 8007836:	4610      	mov	r0, r2
 8007838:	f000 fb97 	bl	8007f6a <TIM_ITRx_SetConfig>
      break;
 800783c:	e000      	b.n	8007840 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800783e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	fffeff88 	.word	0xfffeff88

08007860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a40      	ldr	r2, [pc, #256]	; (80079c4 <TIM_Base_SetConfig+0x114>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d013      	beq.n	80078f0 <TIM_Base_SetConfig+0x40>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ce:	d00f      	beq.n	80078f0 <TIM_Base_SetConfig+0x40>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a3d      	ldr	r2, [pc, #244]	; (80079c8 <TIM_Base_SetConfig+0x118>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d00b      	beq.n	80078f0 <TIM_Base_SetConfig+0x40>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a3c      	ldr	r2, [pc, #240]	; (80079cc <TIM_Base_SetConfig+0x11c>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d007      	beq.n	80078f0 <TIM_Base_SetConfig+0x40>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a3b      	ldr	r2, [pc, #236]	; (80079d0 <TIM_Base_SetConfig+0x120>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d003      	beq.n	80078f0 <TIM_Base_SetConfig+0x40>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a3a      	ldr	r2, [pc, #232]	; (80079d4 <TIM_Base_SetConfig+0x124>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d108      	bne.n	8007902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a2f      	ldr	r2, [pc, #188]	; (80079c4 <TIM_Base_SetConfig+0x114>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d02b      	beq.n	8007962 <TIM_Base_SetConfig+0xb2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007910:	d027      	beq.n	8007962 <TIM_Base_SetConfig+0xb2>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a2c      	ldr	r2, [pc, #176]	; (80079c8 <TIM_Base_SetConfig+0x118>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d023      	beq.n	8007962 <TIM_Base_SetConfig+0xb2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a2b      	ldr	r2, [pc, #172]	; (80079cc <TIM_Base_SetConfig+0x11c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d01f      	beq.n	8007962 <TIM_Base_SetConfig+0xb2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a2a      	ldr	r2, [pc, #168]	; (80079d0 <TIM_Base_SetConfig+0x120>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d01b      	beq.n	8007962 <TIM_Base_SetConfig+0xb2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a29      	ldr	r2, [pc, #164]	; (80079d4 <TIM_Base_SetConfig+0x124>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d017      	beq.n	8007962 <TIM_Base_SetConfig+0xb2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a28      	ldr	r2, [pc, #160]	; (80079d8 <TIM_Base_SetConfig+0x128>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d013      	beq.n	8007962 <TIM_Base_SetConfig+0xb2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a27      	ldr	r2, [pc, #156]	; (80079dc <TIM_Base_SetConfig+0x12c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d00f      	beq.n	8007962 <TIM_Base_SetConfig+0xb2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a26      	ldr	r2, [pc, #152]	; (80079e0 <TIM_Base_SetConfig+0x130>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d00b      	beq.n	8007962 <TIM_Base_SetConfig+0xb2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a25      	ldr	r2, [pc, #148]	; (80079e4 <TIM_Base_SetConfig+0x134>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d007      	beq.n	8007962 <TIM_Base_SetConfig+0xb2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a24      	ldr	r2, [pc, #144]	; (80079e8 <TIM_Base_SetConfig+0x138>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d003      	beq.n	8007962 <TIM_Base_SetConfig+0xb2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a23      	ldr	r2, [pc, #140]	; (80079ec <TIM_Base_SetConfig+0x13c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d108      	bne.n	8007974 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	4313      	orrs	r3, r2
 8007972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	4313      	orrs	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	689a      	ldr	r2, [r3, #8]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a0a      	ldr	r2, [pc, #40]	; (80079c4 <TIM_Base_SetConfig+0x114>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d003      	beq.n	80079a8 <TIM_Base_SetConfig+0xf8>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a0c      	ldr	r2, [pc, #48]	; (80079d4 <TIM_Base_SetConfig+0x124>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d103      	bne.n	80079b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	691a      	ldr	r2, [r3, #16]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	615a      	str	r2, [r3, #20]
}
 80079b6:	bf00      	nop
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	40010000 	.word	0x40010000
 80079c8:	40000400 	.word	0x40000400
 80079cc:	40000800 	.word	0x40000800
 80079d0:	40000c00 	.word	0x40000c00
 80079d4:	40010400 	.word	0x40010400
 80079d8:	40014000 	.word	0x40014000
 80079dc:	40014400 	.word	0x40014400
 80079e0:	40014800 	.word	0x40014800
 80079e4:	40001800 	.word	0x40001800
 80079e8:	40001c00 	.word	0x40001c00
 80079ec:	40002000 	.word	0x40002000

080079f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	f023 0201 	bic.w	r2, r3, #1
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4b2b      	ldr	r3, [pc, #172]	; (8007ac8 <TIM_OC1_SetConfig+0xd8>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 0303 	bic.w	r3, r3, #3
 8007a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f023 0302 	bic.w	r3, r3, #2
 8007a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a21      	ldr	r2, [pc, #132]	; (8007acc <TIM_OC1_SetConfig+0xdc>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d003      	beq.n	8007a54 <TIM_OC1_SetConfig+0x64>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a20      	ldr	r2, [pc, #128]	; (8007ad0 <TIM_OC1_SetConfig+0xe0>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d10c      	bne.n	8007a6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f023 0308 	bic.w	r3, r3, #8
 8007a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f023 0304 	bic.w	r3, r3, #4
 8007a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a16      	ldr	r2, [pc, #88]	; (8007acc <TIM_OC1_SetConfig+0xdc>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d003      	beq.n	8007a7e <TIM_OC1_SetConfig+0x8e>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a15      	ldr	r2, [pc, #84]	; (8007ad0 <TIM_OC1_SetConfig+0xe0>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d111      	bne.n	8007aa2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	621a      	str	r2, [r3, #32]
}
 8007abc:	bf00      	nop
 8007abe:	371c      	adds	r7, #28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	fffeff8f 	.word	0xfffeff8f
 8007acc:	40010000 	.word	0x40010000
 8007ad0:	40010400 	.word	0x40010400

08007ad4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	f023 0210 	bic.w	r2, r3, #16
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	4b2e      	ldr	r3, [pc, #184]	; (8007bb8 <TIM_OC2_SetConfig+0xe4>)
 8007b00:	4013      	ands	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f023 0320 	bic.w	r3, r3, #32
 8007b1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	011b      	lsls	r3, r3, #4
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a23      	ldr	r2, [pc, #140]	; (8007bbc <TIM_OC2_SetConfig+0xe8>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d003      	beq.n	8007b3c <TIM_OC2_SetConfig+0x68>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a22      	ldr	r2, [pc, #136]	; (8007bc0 <TIM_OC2_SetConfig+0xec>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d10d      	bne.n	8007b58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	011b      	lsls	r3, r3, #4
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a18      	ldr	r2, [pc, #96]	; (8007bbc <TIM_OC2_SetConfig+0xe8>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d003      	beq.n	8007b68 <TIM_OC2_SetConfig+0x94>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a17      	ldr	r2, [pc, #92]	; (8007bc0 <TIM_OC2_SetConfig+0xec>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d113      	bne.n	8007b90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	621a      	str	r2, [r3, #32]
}
 8007baa:	bf00      	nop
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	feff8fff 	.word	0xfeff8fff
 8007bbc:	40010000 	.word	0x40010000
 8007bc0:	40010400 	.word	0x40010400

08007bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	4b2d      	ldr	r3, [pc, #180]	; (8007ca4 <TIM_OC3_SetConfig+0xe0>)
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f023 0303 	bic.w	r3, r3, #3
 8007bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	021b      	lsls	r3, r3, #8
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a22      	ldr	r2, [pc, #136]	; (8007ca8 <TIM_OC3_SetConfig+0xe4>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d003      	beq.n	8007c2a <TIM_OC3_SetConfig+0x66>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a21      	ldr	r2, [pc, #132]	; (8007cac <TIM_OC3_SetConfig+0xe8>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d10d      	bne.n	8007c46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	021b      	lsls	r3, r3, #8
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a17      	ldr	r2, [pc, #92]	; (8007ca8 <TIM_OC3_SetConfig+0xe4>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d003      	beq.n	8007c56 <TIM_OC3_SetConfig+0x92>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a16      	ldr	r2, [pc, #88]	; (8007cac <TIM_OC3_SetConfig+0xe8>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d113      	bne.n	8007c7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	011b      	lsls	r3, r3, #4
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	621a      	str	r2, [r3, #32]
}
 8007c98:	bf00      	nop
 8007c9a:	371c      	adds	r7, #28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	fffeff8f 	.word	0xfffeff8f
 8007ca8:	40010000 	.word	0x40010000
 8007cac:	40010400 	.word	0x40010400

08007cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	4b1e      	ldr	r3, [pc, #120]	; (8007d54 <TIM_OC4_SetConfig+0xa4>)
 8007cdc:	4013      	ands	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	021b      	lsls	r3, r3, #8
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	031b      	lsls	r3, r3, #12
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a13      	ldr	r2, [pc, #76]	; (8007d58 <TIM_OC4_SetConfig+0xa8>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d003      	beq.n	8007d18 <TIM_OC4_SetConfig+0x68>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a12      	ldr	r2, [pc, #72]	; (8007d5c <TIM_OC4_SetConfig+0xac>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d109      	bne.n	8007d2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	019b      	lsls	r3, r3, #6
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	621a      	str	r2, [r3, #32]
}
 8007d46:	bf00      	nop
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	feff8fff 	.word	0xfeff8fff
 8007d58:	40010000 	.word	0x40010000
 8007d5c:	40010400 	.word	0x40010400

08007d60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	4b1b      	ldr	r3, [pc, #108]	; (8007df8 <TIM_OC5_SetConfig+0x98>)
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007da0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	041b      	lsls	r3, r3, #16
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a12      	ldr	r2, [pc, #72]	; (8007dfc <TIM_OC5_SetConfig+0x9c>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d003      	beq.n	8007dbe <TIM_OC5_SetConfig+0x5e>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a11      	ldr	r2, [pc, #68]	; (8007e00 <TIM_OC5_SetConfig+0xa0>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d109      	bne.n	8007dd2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	021b      	lsls	r3, r3, #8
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	621a      	str	r2, [r3, #32]
}
 8007dec:	bf00      	nop
 8007dee:	371c      	adds	r7, #28
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr
 8007df8:	fffeff8f 	.word	0xfffeff8f
 8007dfc:	40010000 	.word	0x40010000
 8007e00:	40010400 	.word	0x40010400

08007e04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	4b1c      	ldr	r3, [pc, #112]	; (8007ea0 <TIM_OC6_SetConfig+0x9c>)
 8007e30:	4013      	ands	r3, r2
 8007e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	021b      	lsls	r3, r3, #8
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	051b      	lsls	r3, r3, #20
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a13      	ldr	r2, [pc, #76]	; (8007ea4 <TIM_OC6_SetConfig+0xa0>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d003      	beq.n	8007e64 <TIM_OC6_SetConfig+0x60>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a12      	ldr	r2, [pc, #72]	; (8007ea8 <TIM_OC6_SetConfig+0xa4>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d109      	bne.n	8007e78 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	029b      	lsls	r3, r3, #10
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	621a      	str	r2, [r3, #32]
}
 8007e92:	bf00      	nop
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	feff8fff 	.word	0xfeff8fff
 8007ea4:	40010000 	.word	0x40010000
 8007ea8:	40010400 	.word	0x40010400

08007eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	f023 0201 	bic.w	r2, r3, #1
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	011b      	lsls	r3, r3, #4
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f023 030a 	bic.w	r3, r3, #10
 8007ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	621a      	str	r2, [r3, #32]
}
 8007efe:	bf00      	nop
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b087      	sub	sp, #28
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	f023 0210 	bic.w	r2, r3, #16
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a1b      	ldr	r3, [r3, #32]
 8007f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	031b      	lsls	r3, r3, #12
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	011b      	lsls	r3, r3, #4
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	621a      	str	r2, [r3, #32]
}
 8007f5e:	bf00      	nop
 8007f60:	371c      	adds	r7, #28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b085      	sub	sp, #20
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	f043 0307 	orr.w	r3, r3, #7
 8007f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	609a      	str	r2, [r3, #8]
}
 8007f94:	bf00      	nop
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
 8007fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	021a      	lsls	r2, r3, #8
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	609a      	str	r2, [r3, #8]
}
 8007fd4:	bf00      	nop
 8007fd6:	371c      	adds	r7, #28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2204      	movs	r2, #4
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 f94e 	bl	8008294 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008006:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	689a      	ldr	r2, [r3, #8]
 800800e:	4b0b      	ldr	r3, [pc, #44]	; (800803c <HAL_TIMEx_PWMN_Start+0x5c>)
 8008010:	4013      	ands	r3, r2
 8008012:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b06      	cmp	r3, #6
 8008018:	d00b      	beq.n	8008032 <HAL_TIMEx_PWMN_Start+0x52>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008020:	d007      	beq.n	8008032 <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f042 0201 	orr.w	r2, r2, #1
 8008030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	00010007 	.word	0x00010007

08008040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008050:	2b01      	cmp	r3, #1
 8008052:	d101      	bne.n	8008058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008054:	2302      	movs	r3, #2
 8008056:	e06d      	b.n	8008134 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a30      	ldr	r2, [pc, #192]	; (8008140 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d004      	beq.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a2f      	ldr	r2, [pc, #188]	; (8008144 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d108      	bne.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008092:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a20      	ldr	r2, [pc, #128]	; (8008140 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d022      	beq.n	8008108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ca:	d01d      	beq.n	8008108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a1d      	ldr	r2, [pc, #116]	; (8008148 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d018      	beq.n	8008108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a1c      	ldr	r2, [pc, #112]	; (800814c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d013      	beq.n	8008108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1a      	ldr	r2, [pc, #104]	; (8008150 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d00e      	beq.n	8008108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a15      	ldr	r2, [pc, #84]	; (8008144 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d009      	beq.n	8008108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a16      	ldr	r2, [pc, #88]	; (8008154 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d004      	beq.n	8008108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a15      	ldr	r2, [pc, #84]	; (8008158 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d10c      	bne.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800810e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	4313      	orrs	r3, r2
 8008118:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	40010000 	.word	0x40010000
 8008144:	40010400 	.word	0x40010400
 8008148:	40000400 	.word	0x40000400
 800814c:	40000800 	.word	0x40000800
 8008150:	40000c00 	.word	0x40000c00
 8008154:	40014000 	.word	0x40014000
 8008158:	40001800 	.word	0x40001800

0800815c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008170:	2b01      	cmp	r3, #1
 8008172:	d101      	bne.n	8008178 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008174:	2302      	movs	r3, #2
 8008176:	e065      	b.n	8008244 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	4313      	orrs	r3, r2
 800818c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	4313      	orrs	r3, r2
 800819a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	041b      	lsls	r3, r3, #16
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a16      	ldr	r2, [pc, #88]	; (8008250 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d004      	beq.n	8008206 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a14      	ldr	r2, [pc, #80]	; (8008254 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d115      	bne.n	8008232 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	051b      	lsls	r3, r3, #20
 8008212:	4313      	orrs	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	4313      	orrs	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	4313      	orrs	r3, r2
 8008230:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr
 8008250:	40010000 	.word	0x40010000
 8008254:	40010400 	.word	0x40010400

08008258 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008294:	b480      	push	{r7}
 8008296:	b087      	sub	sp, #28
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	f003 031f 	and.w	r3, r3, #31
 80082a6:	2204      	movs	r2, #4
 80082a8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6a1a      	ldr	r2, [r3, #32]
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	43db      	mvns	r3, r3
 80082b6:	401a      	ands	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6a1a      	ldr	r2, [r3, #32]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	f003 031f 	and.w	r3, r3, #31
 80082c6:	6879      	ldr	r1, [r7, #4]
 80082c8:	fa01 f303 	lsl.w	r3, r1, r3
 80082cc:	431a      	orrs	r2, r3
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	621a      	str	r2, [r3, #32]
}
 80082d2:	bf00      	nop
 80082d4:	371c      	adds	r7, #28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e040      	b.n	8008372 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d106      	bne.n	8008306 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7fb f80b 	bl	800331c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2224      	movs	r2, #36	; 0x24
 800830a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f022 0201 	bic.w	r2, r2, #1
 800831a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fa7d 	bl	800881c <UART_SetConfig>
 8008322:	4603      	mov	r3, r0
 8008324:	2b01      	cmp	r3, #1
 8008326:	d101      	bne.n	800832c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e022      	b.n	8008372 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fd1b 	bl	8008d70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008348:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008358:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f042 0201 	orr.w	r2, r2, #1
 8008368:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fda2 	bl	8008eb4 <UART_CheckIdleState>
 8008370:	4603      	mov	r3, r0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
	...

0800837c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	4613      	mov	r3, r2
 8008388:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800838e:	2b20      	cmp	r3, #32
 8008390:	d164      	bne.n	800845c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <HAL_UART_Transmit_DMA+0x22>
 8008398:	88fb      	ldrh	r3, [r7, #6]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e05d      	b.n	800845e <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d101      	bne.n	80083b0 <HAL_UART_Transmit_DMA+0x34>
 80083ac:	2302      	movs	r3, #2
 80083ae:	e056      	b.n	800845e <HAL_UART_Transmit_DMA+0xe2>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	88fa      	ldrh	r2, [r7, #6]
 80083c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	88fa      	ldrh	r2, [r7, #6]
 80083ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2221      	movs	r2, #33	; 0x21
 80083d8:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d02a      	beq.n	8008438 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083e6:	4a20      	ldr	r2, [pc, #128]	; (8008468 <HAL_UART_Transmit_DMA+0xec>)
 80083e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083ee:	4a1f      	ldr	r2, [pc, #124]	; (800846c <HAL_UART_Transmit_DMA+0xf0>)
 80083f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083f6:	4a1e      	ldr	r2, [pc, #120]	; (8008470 <HAL_UART_Transmit_DMA+0xf4>)
 80083f8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083fe:	2200      	movs	r2, #0
 8008400:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800840a:	4619      	mov	r1, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	3328      	adds	r3, #40	; 0x28
 8008412:	461a      	mov	r2, r3
 8008414:	88fb      	ldrh	r3, [r7, #6]
 8008416:	f7fc ff93 	bl	8005340 <HAL_DMA_Start_IT>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00b      	beq.n	8008438 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2210      	movs	r2, #16
 8008424:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2220      	movs	r2, #32
 8008432:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e012      	b.n	800845e <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2240      	movs	r2, #64	; 0x40
 800843e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689a      	ldr	r2, [r3, #8]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008456:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	e000      	b.n	800845e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800845c:	2302      	movs	r3, #2
  }
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	08009073 	.word	0x08009073
 800846c:	080090c3 	.word	0x080090c3
 8008470:	0800915f 	.word	0x0800915f

08008474 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	4613      	mov	r3, r2
 8008480:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008486:	2b20      	cmp	r3, #32
 8008488:	d16c      	bne.n	8008564 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <HAL_UART_Receive_DMA+0x22>
 8008490:	88fb      	ldrh	r3, [r7, #6]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d101      	bne.n	800849a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e065      	b.n	8008566 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d101      	bne.n	80084a8 <HAL_UART_Receive_DMA+0x34>
 80084a4:	2302      	movs	r3, #2
 80084a6:	e05e      	b.n	8008566 <HAL_UART_Receive_DMA+0xf2>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	88fa      	ldrh	r2, [r7, #6]
 80084ba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2222      	movs	r2, #34	; 0x22
 80084c8:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d02a      	beq.n	8008528 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d6:	4a26      	ldr	r2, [pc, #152]	; (8008570 <HAL_UART_Receive_DMA+0xfc>)
 80084d8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084de:	4a25      	ldr	r2, [pc, #148]	; (8008574 <HAL_UART_Receive_DMA+0x100>)
 80084e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084e6:	4a24      	ldr	r2, [pc, #144]	; (8008578 <HAL_UART_Receive_DMA+0x104>)
 80084e8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ee:	2200      	movs	r2, #0
 80084f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3324      	adds	r3, #36	; 0x24
 80084fc:	4619      	mov	r1, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008502:	461a      	mov	r2, r3
 8008504:	88fb      	ldrh	r3, [r7, #6]
 8008506:	f7fc ff1b 	bl	8005340 <HAL_DMA_Start_IT>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00b      	beq.n	8008528 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2210      	movs	r2, #16
 8008514:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2220      	movs	r2, #32
 8008522:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e01e      	b.n	8008566 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800853e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689a      	ldr	r2, [r3, #8]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f042 0201 	orr.w	r2, r2, #1
 800854e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	689a      	ldr	r2, [r3, #8]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800855e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	e000      	b.n	8008566 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8008564:	2302      	movs	r3, #2
  }
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	080090df 	.word	0x080090df
 8008574:	08009143 	.word	0x08009143
 8008578:	0800915f 	.word	0x0800915f

0800857c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
inline void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b088      	sub	sp, #32
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800859c:	69fa      	ldr	r2, [r7, #28]
 800859e:	f640 030f 	movw	r3, #2063	; 0x80f
 80085a2:	4013      	ands	r3, r2
 80085a4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d113      	bne.n	80085d4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	f003 0320 	and.w	r3, r3, #32
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00e      	beq.n	80085d4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	f003 0320 	and.w	r3, r3, #32
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d009      	beq.n	80085d4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f000 8100 	beq.w	80087ca <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4798      	blx	r3
      }
      return;
 80085d2:	e0fa      	b.n	80087ca <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 80d5 	beq.w	8008786 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d105      	bne.n	80085f2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 80ca 	beq.w	8008786 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00e      	beq.n	800861a <HAL_UART_IRQHandler+0x9e>
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008602:	2b00      	cmp	r3, #0
 8008604:	d009      	beq.n	800861a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2201      	movs	r2, #1
 800860c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008612:	f043 0201 	orr.w	r2, r3, #1
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	f003 0302 	and.w	r3, r3, #2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00e      	beq.n	8008642 <HAL_UART_IRQHandler+0xc6>
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	2b00      	cmp	r3, #0
 800862c:	d009      	beq.n	8008642 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2202      	movs	r2, #2
 8008634:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800863a:	f043 0204 	orr.w	r2, r3, #4
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	f003 0304 	and.w	r3, r3, #4
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00e      	beq.n	800866a <HAL_UART_IRQHandler+0xee>
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	2b00      	cmp	r3, #0
 8008654:	d009      	beq.n	800866a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2204      	movs	r2, #4
 800865c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008662:	f043 0202 	orr.w	r2, r3, #2
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	f003 0308 	and.w	r3, r3, #8
 8008670:	2b00      	cmp	r3, #0
 8008672:	d013      	beq.n	800869c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	f003 0320 	and.w	r3, r3, #32
 800867a:	2b00      	cmp	r3, #0
 800867c:	d104      	bne.n	8008688 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008684:	2b00      	cmp	r3, #0
 8008686:	d009      	beq.n	800869c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2208      	movs	r2, #8
 800868e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008694:	f043 0208 	orr.w	r2, r3, #8
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00f      	beq.n	80086c6 <HAL_UART_IRQHandler+0x14a>
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00a      	beq.n	80086c6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086be:	f043 0220 	orr.w	r2, r3, #32
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d07f      	beq.n	80087ce <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	f003 0320 	and.w	r3, r3, #32
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00c      	beq.n	80086f2 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	f003 0320 	and.w	r3, r3, #32
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d007      	beq.n	80086f2 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086f6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008702:	2b40      	cmp	r3, #64	; 0x40
 8008704:	d004      	beq.n	8008710 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800870c:	2b00      	cmp	r3, #0
 800870e:	d031      	beq.n	8008774 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fc8e 	bl	8009032 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008720:	2b40      	cmp	r3, #64	; 0x40
 8008722:	d123      	bne.n	800876c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689a      	ldr	r2, [r3, #8]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008732:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008738:	2b00      	cmp	r3, #0
 800873a:	d013      	beq.n	8008764 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008740:	4a26      	ldr	r2, [pc, #152]	; (80087dc <HAL_UART_IRQHandler+0x260>)
 8008742:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008748:	4618      	mov	r0, r3
 800874a:	f7fc fe59 	bl	8005400 <HAL_DMA_Abort_IT>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d016      	beq.n	8008782 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800875e:	4610      	mov	r0, r2
 8008760:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008762:	e00e      	b.n	8008782 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7f9 fd04 	bl	8002172 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800876a:	e00a      	b.n	8008782 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7f9 fd00 	bl	8002172 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008772:	e006      	b.n	8008782 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7f9 fcfc 	bl	8002172 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008780:	e025      	b.n	80087ce <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008782:	bf00      	nop
    return;
 8008784:	e023      	b.n	80087ce <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00d      	beq.n	80087ac <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008796:	2b00      	cmp	r3, #0
 8008798:	d008      	beq.n	80087ac <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d017      	beq.n	80087d2 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	4798      	blx	r3
    }
    return;
 80087aa:	e012      	b.n	80087d2 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00e      	beq.n	80087d4 <HAL_UART_IRQHandler+0x258>
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d009      	beq.n	80087d4 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fd1e 	bl	8009202 <UART_EndTransmit_IT>
    return;
 80087c6:	bf00      	nop
 80087c8:	e004      	b.n	80087d4 <HAL_UART_IRQHandler+0x258>
      return;
 80087ca:	bf00      	nop
 80087cc:	e002      	b.n	80087d4 <HAL_UART_IRQHandler+0x258>
    return;
 80087ce:	bf00      	nop
 80087d0:	e000      	b.n	80087d4 <HAL_UART_IRQHandler+0x258>
    return;
 80087d2:	bf00      	nop
  }

}
 80087d4:	3720      	adds	r7, #32
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	080091d7 	.word	0x080091d7

080087e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008824:	2300      	movs	r3, #0
 8008826:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008828:	2300      	movs	r3, #0
 800882a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	689a      	ldr	r2, [r3, #8]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	431a      	orrs	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	431a      	orrs	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	4313      	orrs	r3, r2
 8008842:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	4bb1      	ldr	r3, [pc, #708]	; (8008b10 <UART_SetConfig+0x2f4>)
 800884c:	4013      	ands	r3, r2
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	6812      	ldr	r2, [r2, #0]
 8008852:	6939      	ldr	r1, [r7, #16]
 8008854:	430b      	orrs	r3, r1
 8008856:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68da      	ldr	r2, [r3, #12]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	430a      	orrs	r2, r1
 800886c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a1b      	ldr	r3, [r3, #32]
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	4313      	orrs	r3, r2
 800887c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	430a      	orrs	r2, r1
 8008890:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a9f      	ldr	r2, [pc, #636]	; (8008b14 <UART_SetConfig+0x2f8>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d121      	bne.n	80088e0 <UART_SetConfig+0xc4>
 800889c:	4b9e      	ldr	r3, [pc, #632]	; (8008b18 <UART_SetConfig+0x2fc>)
 800889e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a2:	f003 0303 	and.w	r3, r3, #3
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d816      	bhi.n	80088d8 <UART_SetConfig+0xbc>
 80088aa:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <UART_SetConfig+0x94>)
 80088ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b0:	080088c1 	.word	0x080088c1
 80088b4:	080088cd 	.word	0x080088cd
 80088b8:	080088c7 	.word	0x080088c7
 80088bc:	080088d3 	.word	0x080088d3
 80088c0:	2301      	movs	r3, #1
 80088c2:	77fb      	strb	r3, [r7, #31]
 80088c4:	e151      	b.n	8008b6a <UART_SetConfig+0x34e>
 80088c6:	2302      	movs	r3, #2
 80088c8:	77fb      	strb	r3, [r7, #31]
 80088ca:	e14e      	b.n	8008b6a <UART_SetConfig+0x34e>
 80088cc:	2304      	movs	r3, #4
 80088ce:	77fb      	strb	r3, [r7, #31]
 80088d0:	e14b      	b.n	8008b6a <UART_SetConfig+0x34e>
 80088d2:	2308      	movs	r3, #8
 80088d4:	77fb      	strb	r3, [r7, #31]
 80088d6:	e148      	b.n	8008b6a <UART_SetConfig+0x34e>
 80088d8:	2310      	movs	r3, #16
 80088da:	77fb      	strb	r3, [r7, #31]
 80088dc:	bf00      	nop
 80088de:	e144      	b.n	8008b6a <UART_SetConfig+0x34e>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a8d      	ldr	r2, [pc, #564]	; (8008b1c <UART_SetConfig+0x300>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d134      	bne.n	8008954 <UART_SetConfig+0x138>
 80088ea:	4b8b      	ldr	r3, [pc, #556]	; (8008b18 <UART_SetConfig+0x2fc>)
 80088ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088f0:	f003 030c 	and.w	r3, r3, #12
 80088f4:	2b0c      	cmp	r3, #12
 80088f6:	d829      	bhi.n	800894c <UART_SetConfig+0x130>
 80088f8:	a201      	add	r2, pc, #4	; (adr r2, 8008900 <UART_SetConfig+0xe4>)
 80088fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fe:	bf00      	nop
 8008900:	08008935 	.word	0x08008935
 8008904:	0800894d 	.word	0x0800894d
 8008908:	0800894d 	.word	0x0800894d
 800890c:	0800894d 	.word	0x0800894d
 8008910:	08008941 	.word	0x08008941
 8008914:	0800894d 	.word	0x0800894d
 8008918:	0800894d 	.word	0x0800894d
 800891c:	0800894d 	.word	0x0800894d
 8008920:	0800893b 	.word	0x0800893b
 8008924:	0800894d 	.word	0x0800894d
 8008928:	0800894d 	.word	0x0800894d
 800892c:	0800894d 	.word	0x0800894d
 8008930:	08008947 	.word	0x08008947
 8008934:	2300      	movs	r3, #0
 8008936:	77fb      	strb	r3, [r7, #31]
 8008938:	e117      	b.n	8008b6a <UART_SetConfig+0x34e>
 800893a:	2302      	movs	r3, #2
 800893c:	77fb      	strb	r3, [r7, #31]
 800893e:	e114      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008940:	2304      	movs	r3, #4
 8008942:	77fb      	strb	r3, [r7, #31]
 8008944:	e111      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008946:	2308      	movs	r3, #8
 8008948:	77fb      	strb	r3, [r7, #31]
 800894a:	e10e      	b.n	8008b6a <UART_SetConfig+0x34e>
 800894c:	2310      	movs	r3, #16
 800894e:	77fb      	strb	r3, [r7, #31]
 8008950:	bf00      	nop
 8008952:	e10a      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a71      	ldr	r2, [pc, #452]	; (8008b20 <UART_SetConfig+0x304>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d120      	bne.n	80089a0 <UART_SetConfig+0x184>
 800895e:	4b6e      	ldr	r3, [pc, #440]	; (8008b18 <UART_SetConfig+0x2fc>)
 8008960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008964:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008968:	2b10      	cmp	r3, #16
 800896a:	d00f      	beq.n	800898c <UART_SetConfig+0x170>
 800896c:	2b10      	cmp	r3, #16
 800896e:	d802      	bhi.n	8008976 <UART_SetConfig+0x15a>
 8008970:	2b00      	cmp	r3, #0
 8008972:	d005      	beq.n	8008980 <UART_SetConfig+0x164>
 8008974:	e010      	b.n	8008998 <UART_SetConfig+0x17c>
 8008976:	2b20      	cmp	r3, #32
 8008978:	d005      	beq.n	8008986 <UART_SetConfig+0x16a>
 800897a:	2b30      	cmp	r3, #48	; 0x30
 800897c:	d009      	beq.n	8008992 <UART_SetConfig+0x176>
 800897e:	e00b      	b.n	8008998 <UART_SetConfig+0x17c>
 8008980:	2300      	movs	r3, #0
 8008982:	77fb      	strb	r3, [r7, #31]
 8008984:	e0f1      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008986:	2302      	movs	r3, #2
 8008988:	77fb      	strb	r3, [r7, #31]
 800898a:	e0ee      	b.n	8008b6a <UART_SetConfig+0x34e>
 800898c:	2304      	movs	r3, #4
 800898e:	77fb      	strb	r3, [r7, #31]
 8008990:	e0eb      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008992:	2308      	movs	r3, #8
 8008994:	77fb      	strb	r3, [r7, #31]
 8008996:	e0e8      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008998:	2310      	movs	r3, #16
 800899a:	77fb      	strb	r3, [r7, #31]
 800899c:	bf00      	nop
 800899e:	e0e4      	b.n	8008b6a <UART_SetConfig+0x34e>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a5f      	ldr	r2, [pc, #380]	; (8008b24 <UART_SetConfig+0x308>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d120      	bne.n	80089ec <UART_SetConfig+0x1d0>
 80089aa:	4b5b      	ldr	r3, [pc, #364]	; (8008b18 <UART_SetConfig+0x2fc>)
 80089ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80089b4:	2b40      	cmp	r3, #64	; 0x40
 80089b6:	d00f      	beq.n	80089d8 <UART_SetConfig+0x1bc>
 80089b8:	2b40      	cmp	r3, #64	; 0x40
 80089ba:	d802      	bhi.n	80089c2 <UART_SetConfig+0x1a6>
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d005      	beq.n	80089cc <UART_SetConfig+0x1b0>
 80089c0:	e010      	b.n	80089e4 <UART_SetConfig+0x1c8>
 80089c2:	2b80      	cmp	r3, #128	; 0x80
 80089c4:	d005      	beq.n	80089d2 <UART_SetConfig+0x1b6>
 80089c6:	2bc0      	cmp	r3, #192	; 0xc0
 80089c8:	d009      	beq.n	80089de <UART_SetConfig+0x1c2>
 80089ca:	e00b      	b.n	80089e4 <UART_SetConfig+0x1c8>
 80089cc:	2300      	movs	r3, #0
 80089ce:	77fb      	strb	r3, [r7, #31]
 80089d0:	e0cb      	b.n	8008b6a <UART_SetConfig+0x34e>
 80089d2:	2302      	movs	r3, #2
 80089d4:	77fb      	strb	r3, [r7, #31]
 80089d6:	e0c8      	b.n	8008b6a <UART_SetConfig+0x34e>
 80089d8:	2304      	movs	r3, #4
 80089da:	77fb      	strb	r3, [r7, #31]
 80089dc:	e0c5      	b.n	8008b6a <UART_SetConfig+0x34e>
 80089de:	2308      	movs	r3, #8
 80089e0:	77fb      	strb	r3, [r7, #31]
 80089e2:	e0c2      	b.n	8008b6a <UART_SetConfig+0x34e>
 80089e4:	2310      	movs	r3, #16
 80089e6:	77fb      	strb	r3, [r7, #31]
 80089e8:	bf00      	nop
 80089ea:	e0be      	b.n	8008b6a <UART_SetConfig+0x34e>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a4d      	ldr	r2, [pc, #308]	; (8008b28 <UART_SetConfig+0x30c>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d124      	bne.n	8008a40 <UART_SetConfig+0x224>
 80089f6:	4b48      	ldr	r3, [pc, #288]	; (8008b18 <UART_SetConfig+0x2fc>)
 80089f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a04:	d012      	beq.n	8008a2c <UART_SetConfig+0x210>
 8008a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a0a:	d802      	bhi.n	8008a12 <UART_SetConfig+0x1f6>
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d007      	beq.n	8008a20 <UART_SetConfig+0x204>
 8008a10:	e012      	b.n	8008a38 <UART_SetConfig+0x21c>
 8008a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a16:	d006      	beq.n	8008a26 <UART_SetConfig+0x20a>
 8008a18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a1c:	d009      	beq.n	8008a32 <UART_SetConfig+0x216>
 8008a1e:	e00b      	b.n	8008a38 <UART_SetConfig+0x21c>
 8008a20:	2300      	movs	r3, #0
 8008a22:	77fb      	strb	r3, [r7, #31]
 8008a24:	e0a1      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008a26:	2302      	movs	r3, #2
 8008a28:	77fb      	strb	r3, [r7, #31]
 8008a2a:	e09e      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008a2c:	2304      	movs	r3, #4
 8008a2e:	77fb      	strb	r3, [r7, #31]
 8008a30:	e09b      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008a32:	2308      	movs	r3, #8
 8008a34:	77fb      	strb	r3, [r7, #31]
 8008a36:	e098      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008a38:	2310      	movs	r3, #16
 8008a3a:	77fb      	strb	r3, [r7, #31]
 8008a3c:	bf00      	nop
 8008a3e:	e094      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a39      	ldr	r2, [pc, #228]	; (8008b2c <UART_SetConfig+0x310>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d124      	bne.n	8008a94 <UART_SetConfig+0x278>
 8008a4a:	4b33      	ldr	r3, [pc, #204]	; (8008b18 <UART_SetConfig+0x2fc>)
 8008a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a58:	d012      	beq.n	8008a80 <UART_SetConfig+0x264>
 8008a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a5e:	d802      	bhi.n	8008a66 <UART_SetConfig+0x24a>
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d007      	beq.n	8008a74 <UART_SetConfig+0x258>
 8008a64:	e012      	b.n	8008a8c <UART_SetConfig+0x270>
 8008a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a6a:	d006      	beq.n	8008a7a <UART_SetConfig+0x25e>
 8008a6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a70:	d009      	beq.n	8008a86 <UART_SetConfig+0x26a>
 8008a72:	e00b      	b.n	8008a8c <UART_SetConfig+0x270>
 8008a74:	2301      	movs	r3, #1
 8008a76:	77fb      	strb	r3, [r7, #31]
 8008a78:	e077      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	77fb      	strb	r3, [r7, #31]
 8008a7e:	e074      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008a80:	2304      	movs	r3, #4
 8008a82:	77fb      	strb	r3, [r7, #31]
 8008a84:	e071      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008a86:	2308      	movs	r3, #8
 8008a88:	77fb      	strb	r3, [r7, #31]
 8008a8a:	e06e      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008a8c:	2310      	movs	r3, #16
 8008a8e:	77fb      	strb	r3, [r7, #31]
 8008a90:	bf00      	nop
 8008a92:	e06a      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a25      	ldr	r2, [pc, #148]	; (8008b30 <UART_SetConfig+0x314>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d124      	bne.n	8008ae8 <UART_SetConfig+0x2cc>
 8008a9e:	4b1e      	ldr	r3, [pc, #120]	; (8008b18 <UART_SetConfig+0x2fc>)
 8008aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aa4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aac:	d012      	beq.n	8008ad4 <UART_SetConfig+0x2b8>
 8008aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ab2:	d802      	bhi.n	8008aba <UART_SetConfig+0x29e>
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d007      	beq.n	8008ac8 <UART_SetConfig+0x2ac>
 8008ab8:	e012      	b.n	8008ae0 <UART_SetConfig+0x2c4>
 8008aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008abe:	d006      	beq.n	8008ace <UART_SetConfig+0x2b2>
 8008ac0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ac4:	d009      	beq.n	8008ada <UART_SetConfig+0x2be>
 8008ac6:	e00b      	b.n	8008ae0 <UART_SetConfig+0x2c4>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	77fb      	strb	r3, [r7, #31]
 8008acc:	e04d      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008ace:	2302      	movs	r3, #2
 8008ad0:	77fb      	strb	r3, [r7, #31]
 8008ad2:	e04a      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008ad4:	2304      	movs	r3, #4
 8008ad6:	77fb      	strb	r3, [r7, #31]
 8008ad8:	e047      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008ada:	2308      	movs	r3, #8
 8008adc:	77fb      	strb	r3, [r7, #31]
 8008ade:	e044      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008ae0:	2310      	movs	r3, #16
 8008ae2:	77fb      	strb	r3, [r7, #31]
 8008ae4:	bf00      	nop
 8008ae6:	e040      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a11      	ldr	r2, [pc, #68]	; (8008b34 <UART_SetConfig+0x318>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d139      	bne.n	8008b66 <UART_SetConfig+0x34a>
 8008af2:	4b09      	ldr	r3, [pc, #36]	; (8008b18 <UART_SetConfig+0x2fc>)
 8008af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008af8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008afc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b00:	d027      	beq.n	8008b52 <UART_SetConfig+0x336>
 8008b02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b06:	d817      	bhi.n	8008b38 <UART_SetConfig+0x31c>
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d01c      	beq.n	8008b46 <UART_SetConfig+0x32a>
 8008b0c:	e027      	b.n	8008b5e <UART_SetConfig+0x342>
 8008b0e:	bf00      	nop
 8008b10:	efff69f3 	.word	0xefff69f3
 8008b14:	40011000 	.word	0x40011000
 8008b18:	40023800 	.word	0x40023800
 8008b1c:	40004400 	.word	0x40004400
 8008b20:	40004800 	.word	0x40004800
 8008b24:	40004c00 	.word	0x40004c00
 8008b28:	40005000 	.word	0x40005000
 8008b2c:	40011400 	.word	0x40011400
 8008b30:	40007800 	.word	0x40007800
 8008b34:	40007c00 	.word	0x40007c00
 8008b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b3c:	d006      	beq.n	8008b4c <UART_SetConfig+0x330>
 8008b3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008b42:	d009      	beq.n	8008b58 <UART_SetConfig+0x33c>
 8008b44:	e00b      	b.n	8008b5e <UART_SetConfig+0x342>
 8008b46:	2300      	movs	r3, #0
 8008b48:	77fb      	strb	r3, [r7, #31]
 8008b4a:	e00e      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	77fb      	strb	r3, [r7, #31]
 8008b50:	e00b      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008b52:	2304      	movs	r3, #4
 8008b54:	77fb      	strb	r3, [r7, #31]
 8008b56:	e008      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008b58:	2308      	movs	r3, #8
 8008b5a:	77fb      	strb	r3, [r7, #31]
 8008b5c:	e005      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008b5e:	2310      	movs	r3, #16
 8008b60:	77fb      	strb	r3, [r7, #31]
 8008b62:	bf00      	nop
 8008b64:	e001      	b.n	8008b6a <UART_SetConfig+0x34e>
 8008b66:	2310      	movs	r3, #16
 8008b68:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b72:	d17f      	bne.n	8008c74 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008b74:	7ffb      	ldrb	r3, [r7, #31]
 8008b76:	2b08      	cmp	r3, #8
 8008b78:	d85c      	bhi.n	8008c34 <UART_SetConfig+0x418>
 8008b7a:	a201      	add	r2, pc, #4	; (adr r2, 8008b80 <UART_SetConfig+0x364>)
 8008b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b80:	08008ba5 	.word	0x08008ba5
 8008b84:	08008bc5 	.word	0x08008bc5
 8008b88:	08008be5 	.word	0x08008be5
 8008b8c:	08008c35 	.word	0x08008c35
 8008b90:	08008bfd 	.word	0x08008bfd
 8008b94:	08008c35 	.word	0x08008c35
 8008b98:	08008c35 	.word	0x08008c35
 8008b9c:	08008c35 	.word	0x08008c35
 8008ba0:	08008c1d 	.word	0x08008c1d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ba4:	f7fd fd30 	bl	8006608 <HAL_RCC_GetPCLK1Freq>
 8008ba8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	005a      	lsls	r2, r3, #1
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	085b      	lsrs	r3, r3, #1
 8008bb4:	441a      	add	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	61bb      	str	r3, [r7, #24]
        break;
 8008bc2:	e03a      	b.n	8008c3a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bc4:	f7fd fd34 	bl	8006630 <HAL_RCC_GetPCLK2Freq>
 8008bc8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	005a      	lsls	r2, r3, #1
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	085b      	lsrs	r3, r3, #1
 8008bd4:	441a      	add	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	61bb      	str	r3, [r7, #24]
        break;
 8008be2:	e02a      	b.n	8008c3a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	085a      	lsrs	r2, r3, #1
 8008bea:	4b5f      	ldr	r3, [pc, #380]	; (8008d68 <UART_SetConfig+0x54c>)
 8008bec:	4413      	add	r3, r2
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	6852      	ldr	r2, [r2, #4]
 8008bf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	61bb      	str	r3, [r7, #24]
        break;
 8008bfa:	e01e      	b.n	8008c3a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bfc:	f7fd fc46 	bl	800648c <HAL_RCC_GetSysClockFreq>
 8008c00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	005a      	lsls	r2, r3, #1
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	085b      	lsrs	r3, r3, #1
 8008c0c:	441a      	add	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	61bb      	str	r3, [r7, #24]
        break;
 8008c1a:	e00e      	b.n	8008c3a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	085b      	lsrs	r3, r3, #1
 8008c22:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	61bb      	str	r3, [r7, #24]
        break;
 8008c32:	e002      	b.n	8008c3a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	75fb      	strb	r3, [r7, #23]
        break;
 8008c38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	2b0f      	cmp	r3, #15
 8008c3e:	d916      	bls.n	8008c6e <UART_SetConfig+0x452>
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c46:	d212      	bcs.n	8008c6e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	f023 030f 	bic.w	r3, r3, #15
 8008c50:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	085b      	lsrs	r3, r3, #1
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	f003 0307 	and.w	r3, r3, #7
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	897b      	ldrh	r3, [r7, #10]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	897a      	ldrh	r2, [r7, #10]
 8008c6a:	60da      	str	r2, [r3, #12]
 8008c6c:	e070      	b.n	8008d50 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	75fb      	strb	r3, [r7, #23]
 8008c72:	e06d      	b.n	8008d50 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008c74:	7ffb      	ldrb	r3, [r7, #31]
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d859      	bhi.n	8008d2e <UART_SetConfig+0x512>
 8008c7a:	a201      	add	r2, pc, #4	; (adr r2, 8008c80 <UART_SetConfig+0x464>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008ca5 	.word	0x08008ca5
 8008c84:	08008cc3 	.word	0x08008cc3
 8008c88:	08008ce1 	.word	0x08008ce1
 8008c8c:	08008d2f 	.word	0x08008d2f
 8008c90:	08008cf9 	.word	0x08008cf9
 8008c94:	08008d2f 	.word	0x08008d2f
 8008c98:	08008d2f 	.word	0x08008d2f
 8008c9c:	08008d2f 	.word	0x08008d2f
 8008ca0:	08008d17 	.word	0x08008d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ca4:	f7fd fcb0 	bl	8006608 <HAL_RCC_GetPCLK1Freq>
 8008ca8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	085a      	lsrs	r2, r3, #1
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	441a      	add	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	61bb      	str	r3, [r7, #24]
        break;
 8008cc0:	e038      	b.n	8008d34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cc2:	f7fd fcb5 	bl	8006630 <HAL_RCC_GetPCLK2Freq>
 8008cc6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	085a      	lsrs	r2, r3, #1
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	441a      	add	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	61bb      	str	r3, [r7, #24]
        break;
 8008cde:	e029      	b.n	8008d34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	085a      	lsrs	r2, r3, #1
 8008ce6:	4b21      	ldr	r3, [pc, #132]	; (8008d6c <UART_SetConfig+0x550>)
 8008ce8:	4413      	add	r3, r2
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	6852      	ldr	r2, [r2, #4]
 8008cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	61bb      	str	r3, [r7, #24]
        break;
 8008cf6:	e01d      	b.n	8008d34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cf8:	f7fd fbc8 	bl	800648c <HAL_RCC_GetSysClockFreq>
 8008cfc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	085a      	lsrs	r2, r3, #1
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	441a      	add	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	61bb      	str	r3, [r7, #24]
        break;
 8008d14:	e00e      	b.n	8008d34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	085b      	lsrs	r3, r3, #1
 8008d1c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	61bb      	str	r3, [r7, #24]
        break;
 8008d2c:	e002      	b.n	8008d34 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	75fb      	strb	r3, [r7, #23]
        break;
 8008d32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	2b0f      	cmp	r3, #15
 8008d38:	d908      	bls.n	8008d4c <UART_SetConfig+0x530>
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d40:	d204      	bcs.n	8008d4c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	60da      	str	r2, [r3, #12]
 8008d4a:	e001      	b.n	8008d50 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3720      	adds	r7, #32
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	01e84800 	.word	0x01e84800
 8008d6c:	00f42400 	.word	0x00f42400

08008d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00a      	beq.n	8008d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	430a      	orrs	r2, r1
 8008d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00a      	beq.n	8008dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	430a      	orrs	r2, r1
 8008dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc0:	f003 0304 	and.w	r3, r3, #4
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00a      	beq.n	8008dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de2:	f003 0308 	and.w	r3, r3, #8
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00a      	beq.n	8008e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	f003 0310 	and.w	r3, r3, #16
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00a      	beq.n	8008e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e26:	f003 0320 	and.w	r3, r3, #32
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00a      	beq.n	8008e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	430a      	orrs	r2, r1
 8008e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d01a      	beq.n	8008e86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	430a      	orrs	r2, r1
 8008e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e6e:	d10a      	bne.n	8008e86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00a      	beq.n	8008ea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	605a      	str	r2, [r3, #4]
  }
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af02      	add	r7, sp, #8
 8008eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008ec2:	f7fb fbed 	bl	80046a0 <HAL_GetTick>
 8008ec6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0308 	and.w	r3, r3, #8
 8008ed2:	2b08      	cmp	r3, #8
 8008ed4:	d10e      	bne.n	8008ef4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ed6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f814 	bl	8008f12 <UART_WaitOnFlagUntilTimeout>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	e00a      	b.n	8008f0a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2220      	movs	r2, #32
 8008ef8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b084      	sub	sp, #16
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	60b9      	str	r1, [r7, #8]
 8008f1c:	603b      	str	r3, [r7, #0]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f22:	e05d      	b.n	8008fe0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2a:	d059      	beq.n	8008fe0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f2c:	f7fb fbb8 	bl	80046a0 <HAL_GetTick>
 8008f30:	4602      	mov	r2, r0
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	69ba      	ldr	r2, [r7, #24]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d302      	bcc.n	8008f42 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d11b      	bne.n	8008f7a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f50:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689a      	ldr	r2, [r3, #8]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f022 0201 	bic.w	r2, r2, #1
 8008f60:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2220      	movs	r2, #32
 8008f66:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e042      	b.n	8009000 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0304 	and.w	r3, r3, #4
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d02b      	beq.n	8008fe0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f96:	d123      	bne.n	8008fe0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fa0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008fb0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689a      	ldr	r2, [r3, #8]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f022 0201 	bic.w	r2, r2, #1
 8008fc0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2220      	movs	r2, #32
 8008fc6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2220      	movs	r2, #32
 8008fcc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2220      	movs	r2, #32
 8008fd2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e00f      	b.n	8009000 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	69da      	ldr	r2, [r3, #28]
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	bf0c      	ite	eq
 8008ff0:	2301      	moveq	r3, #1
 8008ff2:	2300      	movne	r3, #0
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	79fb      	ldrb	r3, [r7, #7]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d092      	beq.n	8008f24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800901e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2220      	movs	r2, #32
 8009024:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009026:	bf00      	nop
 8009028:	370c      	adds	r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009032:	b480      	push	{r7}
 8009034:	b083      	sub	sp, #12
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009048:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689a      	ldr	r2, [r3, #8]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f022 0201 	bic.w	r2, r2, #1
 8009058:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2220      	movs	r2, #32
 800905e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009066:	bf00      	nop
 8009068:	370c      	adds	r7, #12
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr

08009072 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b084      	sub	sp, #16
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	69db      	ldr	r3, [r3, #28]
 8009084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009088:	d014      	beq.n	80090b4 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	689a      	ldr	r2, [r3, #8]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090a0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090b0:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090b2:	e002      	b.n	80090ba <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f7f9 f851 	bl	800215c <HAL_UART_TxCpltCallback>
}
 80090ba:	bf00      	nop
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b084      	sub	sp, #16
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f7ff fb85 	bl	80087e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090d6:	bf00      	nop
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b084      	sub	sp, #16
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ea:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090f4:	d01e      	beq.n	8009134 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800910c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689a      	ldr	r2, [r3, #8]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f022 0201 	bic.w	r2, r2, #1
 800911c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	689a      	ldr	r2, [r3, #8]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800912c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2220      	movs	r2, #32
 8009132:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f7ff fb5d 	bl	80087f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800913a:	bf00      	nop
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b084      	sub	sp, #16
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f7ff fb59 	bl	8008808 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009156:	bf00      	nop
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b086      	sub	sp, #24
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009170:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009176:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009182:	2b80      	cmp	r3, #128	; 0x80
 8009184:	d109      	bne.n	800919a <UART_DMAError+0x3c>
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	2b21      	cmp	r3, #33	; 0x21
 800918a:	d106      	bne.n	800919a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	2200      	movs	r2, #0
 8009190:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009194:	6978      	ldr	r0, [r7, #20]
 8009196:	f7ff ff37 	bl	8009008 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a4:	2b40      	cmp	r3, #64	; 0x40
 80091a6:	d109      	bne.n	80091bc <UART_DMAError+0x5e>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2b22      	cmp	r3, #34	; 0x22
 80091ac:	d106      	bne.n	80091bc <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80091b6:	6978      	ldr	r0, [r7, #20]
 80091b8:	f7ff ff3b 	bl	8009032 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091c0:	f043 0210 	orr.w	r2, r3, #16
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091c8:	6978      	ldr	r0, [r7, #20]
 80091ca:	f7f8 ffd2 	bl	8002172 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091ce:	bf00      	nop
 80091d0:	3718      	adds	r7, #24
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b084      	sub	sp, #16
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f7f8 ffbc 	bl	8002172 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091fa:	bf00      	nop
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b082      	sub	sp, #8
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009218:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2220      	movs	r2, #32
 800921e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7f8 ff98 	bl	800215c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800922c:	bf00      	nop
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <__libc_init_array>:
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	4e0d      	ldr	r6, [pc, #52]	; (800926c <__libc_init_array+0x38>)
 8009238:	4c0d      	ldr	r4, [pc, #52]	; (8009270 <__libc_init_array+0x3c>)
 800923a:	1ba4      	subs	r4, r4, r6
 800923c:	10a4      	asrs	r4, r4, #2
 800923e:	2500      	movs	r5, #0
 8009240:	42a5      	cmp	r5, r4
 8009242:	d109      	bne.n	8009258 <__libc_init_array+0x24>
 8009244:	4e0b      	ldr	r6, [pc, #44]	; (8009274 <__libc_init_array+0x40>)
 8009246:	4c0c      	ldr	r4, [pc, #48]	; (8009278 <__libc_init_array+0x44>)
 8009248:	f000 f82c 	bl	80092a4 <_init>
 800924c:	1ba4      	subs	r4, r4, r6
 800924e:	10a4      	asrs	r4, r4, #2
 8009250:	2500      	movs	r5, #0
 8009252:	42a5      	cmp	r5, r4
 8009254:	d105      	bne.n	8009262 <__libc_init_array+0x2e>
 8009256:	bd70      	pop	{r4, r5, r6, pc}
 8009258:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800925c:	4798      	blx	r3
 800925e:	3501      	adds	r5, #1
 8009260:	e7ee      	b.n	8009240 <__libc_init_array+0xc>
 8009262:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009266:	4798      	blx	r3
 8009268:	3501      	adds	r5, #1
 800926a:	e7f2      	b.n	8009252 <__libc_init_array+0x1e>
 800926c:	080092e4 	.word	0x080092e4
 8009270:	080092e4 	.word	0x080092e4
 8009274:	080092e4 	.word	0x080092e4
 8009278:	080092e8 	.word	0x080092e8

0800927c <memcpy>:
 800927c:	b510      	push	{r4, lr}
 800927e:	1e43      	subs	r3, r0, #1
 8009280:	440a      	add	r2, r1
 8009282:	4291      	cmp	r1, r2
 8009284:	d100      	bne.n	8009288 <memcpy+0xc>
 8009286:	bd10      	pop	{r4, pc}
 8009288:	f811 4b01 	ldrb.w	r4, [r1], #1
 800928c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009290:	e7f7      	b.n	8009282 <memcpy+0x6>

08009292 <memset>:
 8009292:	4402      	add	r2, r0
 8009294:	4603      	mov	r3, r0
 8009296:	4293      	cmp	r3, r2
 8009298:	d100      	bne.n	800929c <memset+0xa>
 800929a:	4770      	bx	lr
 800929c:	f803 1b01 	strb.w	r1, [r3], #1
 80092a0:	e7f9      	b.n	8009296 <memset+0x4>
	...

080092a4 <_init>:
 80092a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a6:	bf00      	nop
 80092a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092aa:	bc08      	pop	{r3}
 80092ac:	469e      	mov	lr, r3
 80092ae:	4770      	bx	lr

080092b0 <_fini>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	bf00      	nop
 80092b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b6:	bc08      	pop	{r3}
 80092b8:	469e      	mov	lr, r3
 80092ba:	4770      	bx	lr
