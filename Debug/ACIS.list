
ACIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecb8  080001e0  080001e0  000101e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800ee98  0800ee98  0001ee98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eec8  0800eec8  00021448  2**0
                  CONTENTS
  4 .ARM          00000008  0800eec8  0800eec8  0001eec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eed0  0800eed0  00021448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eed0  0800eed0  0001eed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eed4  0800eed4  0001eed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001448  20010000  0800eed8  00020000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005040  20011460  08010320  00021460  2**5
                  ALLOC
 10 ._user_heap_stack 00000c00  200164a0  08010320  000264a0  2**0
                  ALLOC
 11 .itcmram      00000000  20000000  20000000  00021448  2**0
                  CONTENTS
 12 .ARM.attributes 00000030  00000000  00000000  00021448  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bcbd  00000000  00000000  00021478  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003d6d  00000000  00000000  0003d135  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000016c0  00000000  00000000  00040ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001508  00000000  00000000  00042568  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000263bf  00000000  00000000  00043a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000155ab  00000000  00000000  00069e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000e4ba8  00000000  00000000  0007f3da  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00163f82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ea4  00000000  00000000  00164000  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20011460 	.word	0x20011460
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ee80 	.word	0x0800ee80

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20011464 	.word	0x20011464
 800021c:	0800ee80 	.word	0x0800ee80

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <acis_init>:
volatile uint32_t TIME33 = 0;

static int8_t acis_send_command(eTransChannels xChaDst, void * msgBuf, uint32_t length);

void acis_init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_BUSY;
 8000d62:	2302      	movs	r3, #2
 8000d64:	71fb      	strb	r3, [r7, #7]
  protInit(&fifoSendingQueue, buffSendingQueue, 1, SENDING_QUEUE_SIZE);
 8000d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	490a      	ldr	r1, [pc, #40]	; (8000d98 <acis_init+0x3c>)
 8000d6e:	480b      	ldr	r0, [pc, #44]	; (8000d9c <acis_init+0x40>)
 8000d70:	f008 fb70 	bl	8009454 <protInit>
  //do
  //{
  //  status = config_load(&acis_config);
  //} while(status == HAL_BUSY);

  StatusInit = status;
 8000d74:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <acis_init+0x44>)
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	7013      	strb	r3, [r2, #0]

  //if(status != HAL_OK)
  //{
    config_default(&acis_config);
 8000d7a:	480a      	ldr	r0, [pc, #40]	; (8000da4 <acis_init+0x48>)
 8000d7c:	f004 fb6e 	bl	800545c <config_default>
  //  {
  //    status = config_save(&acis_config);
  //  } while(status == HAL_BUSY);
  //}

  HAL_TIM_Base_Start_IT(&htim4);
 8000d80:	4809      	ldr	r0, [pc, #36]	; (8000da8 <acis_init+0x4c>)
 8000d82:	f00b ffc7 	bl	800cd14 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(VDD3V3EN_GPIO_Port, VDD3V3EN_Pin, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2101      	movs	r1, #1
 8000d8a:	4808      	ldr	r0, [pc, #32]	; (8000dac <acis_init+0x50>)
 8000d8c:	f00a f816 	bl	800adbc <HAL_GPIO_WritePin>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20011924 	.word	0x20011924
 8000d9c:	20011810 	.word	0x20011810
 8000da0:	20010031 	.word	0x20010031
 8000da4:	20011d24 	.word	0x20011d24
 8000da8:	20016090 	.word	0x20016090
 8000dac:	40020800 	.word	0x40020800

08000db0 <acis_deinitIfNeed>:

void acis_deinitIfNeed(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  if(HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_SET)
 8000db4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db8:	4809      	ldr	r0, [pc, #36]	; (8000de0 <acis_deinitIfNeed+0x30>)
 8000dba:	f009 ffe7 	bl	800ad8c <HAL_GPIO_ReadPin>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d105      	bne.n	8000dd0 <acis_deinitIfNeed+0x20>
    HAL_GPIO_WritePin(VDD3V3EN_GPIO_Port, VDD3V3EN_Pin, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <acis_deinitIfNeed+0x34>)
 8000dca:	f009 fff7 	bl	800adbc <HAL_GPIO_WritePin>
  else HAL_GPIO_WritePin(VDD3V3EN_GPIO_Port, VDD3V3EN_Pin, GPIO_PIN_SET);
}
 8000dce:	e004      	b.n	8000dda <acis_deinitIfNeed+0x2a>
  else HAL_GPIO_WritePin(VDD3V3EN_GPIO_Port, VDD3V3EN_Pin, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <acis_deinitIfNeed+0x34>)
 8000dd6:	f009 fff1 	bl	800adbc <HAL_GPIO_WritePin>
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40020000 	.word	0x40020000
 8000de4:	40020800 	.word	0x40020800

08000de8 <acis_ignite_14>:

static inline void acis_ignite_14(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  ign14_prev = ign14_time;
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <acis_ignite_14+0x30>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <acis_ignite_14+0x34>)
 8000df2:	6013      	str	r3, [r2, #0]
  ign14_time = Delay_Tick;
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <acis_ignite_14+0x38>)
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <acis_ignite_14+0x30>)
 8000dfa:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	4808      	ldr	r0, [pc, #32]	; (8000e24 <acis_ignite_14+0x3c>)
 8000e02:	f009 ffdb 	bl	800adbc <HAL_GPIO_WritePin>
  ign_ftime = 0;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <acis_ignite_14+0x40>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
  saturated_14 = 0;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <acis_ignite_14+0x44>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20011484 	.word	0x20011484
 8000e1c:	2001148c 	.word	0x2001148c
 8000e20:	40000c00 	.word	0x40000c00
 8000e24:	40020400 	.word	0x40020400
 8000e28:	20010030 	.word	0x20010030
 8000e2c:	200114b9 	.word	0x200114b9

08000e30 <acis_ignite_23>:

static inline void acis_ignite_23(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  ign23_prev = ign23_time;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <acis_ignite_23+0x30>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <acis_ignite_23+0x34>)
 8000e3a:	6013      	str	r3, [r2, #0]
  ign23_time = Delay_Tick;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <acis_ignite_23+0x38>)
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <acis_ignite_23+0x30>)
 8000e42:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2140      	movs	r1, #64	; 0x40
 8000e48:	4808      	ldr	r0, [pc, #32]	; (8000e6c <acis_ignite_23+0x3c>)
 8000e4a:	f009 ffb7 	bl	800adbc <HAL_GPIO_WritePin>
  ign_ftime = 0;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <acis_ignite_23+0x40>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
  saturated_23 = 0;
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <acis_ignite_23+0x44>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20011488 	.word	0x20011488
 8000e64:	20011490 	.word	0x20011490
 8000e68:	40000c00 	.word	0x40000c00
 8000e6c:	40020400 	.word	0x40020400
 8000e70:	20010030 	.word	0x20010030
 8000e74:	200114ba 	.word	0x200114ba

08000e78 <acis_saturate_14>:

static inline void acis_saturate_14(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  ign14_sat = Delay_Tick;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <acis_saturate_14+0x4c>)
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	4a11      	ldr	r2, [pc, #68]	; (8000ec8 <acis_saturate_14+0x50>)
 8000e84:	6013      	str	r3, [r2, #0]
  uint8_t isIgn = HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_RESET;
 8000e86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e8a:	4810      	ldr	r0, [pc, #64]	; (8000ecc <acis_saturate_14+0x54>)
 8000e8c:	f009 ff7e 	bl	800ad8c <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	bf0c      	ite	eq
 8000e96:	2301      	moveq	r3, #1
 8000e98:	2300      	movne	r3, #0
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if(isIgn)
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d004      	beq.n	8000eae <acis_saturate_14+0x36>
    HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2180      	movs	r1, #128	; 0x80
 8000ea8:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <acis_saturate_14+0x58>)
 8000eaa:	f009 ff87 	bl	800adbc <HAL_GPIO_WritePin>
  ign_ftime = 0;
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <acis_saturate_14+0x5c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
  saturated_14 = 1;
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <acis_saturate_14+0x60>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40000c00 	.word	0x40000c00
 8000ec8:	2001147c 	.word	0x2001147c
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	20010030 	.word	0x20010030
 8000ed8:	200114b9 	.word	0x200114b9

08000edc <acis_saturate_23>:

static inline void acis_saturate_23(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  ign23_sat = Delay_Tick;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <acis_saturate_23+0x4c>)
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	4a11      	ldr	r2, [pc, #68]	; (8000f2c <acis_saturate_23+0x50>)
 8000ee8:	6013      	str	r3, [r2, #0]
  uint8_t isIgn = HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_RESET;
 8000eea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eee:	4810      	ldr	r0, [pc, #64]	; (8000f30 <acis_saturate_23+0x54>)
 8000ef0:	f009 ff4c 	bl	800ad8c <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	bf0c      	ite	eq
 8000efa:	2301      	moveq	r3, #1
 8000efc:	2300      	movne	r3, #0
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	71fb      	strb	r3, [r7, #7]
  if(isIgn)
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d004      	beq.n	8000f12 <acis_saturate_23+0x36>
    HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2140      	movs	r1, #64	; 0x40
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <acis_saturate_23+0x58>)
 8000f0e:	f009 ff55 	bl	800adbc <HAL_GPIO_WritePin>
  ign_ftime = 0;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <acis_saturate_23+0x5c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
  saturated_23 = 1;
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <acis_saturate_23+0x60>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40000c00 	.word	0x40000c00
 8000f2c:	20011480 	.word	0x20011480
 8000f30:	40020000 	.word	0x40020000
 8000f34:	40020400 	.word	0x40020400
 8000f38:	20010030 	.word	0x20010030
 8000f3c:	200114ba 	.word	0x200114ba

08000f40 <acis_ignite>:

static inline void acis_ignite(uint8_t index)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if(index == 0)
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <acis_ignite+0x16>
    acis_ignite_14();
 8000f50:	f7ff ff4a 	bl	8000de8 <acis_ignite_14>
  else if(index == 1)
    acis_ignite_23();
}
 8000f54:	e004      	b.n	8000f60 <acis_ignite+0x20>
  else if(index == 1)
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <acis_ignite+0x20>
    acis_ignite_23();
 8000f5c:	f7ff ff68 	bl	8000e30 <acis_ignite_23>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <acis_saturate>:

static inline void acis_saturate(uint8_t index)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if(index == 0)
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <acis_saturate+0x16>
    acis_saturate_14();
 8000f78:	f7ff ff7e 	bl	8000e78 <acis_saturate_14>
  else if(index == 1)
    acis_saturate_23();
}
 8000f7c:	e004      	b.n	8000f88 <acis_saturate+0x20>
  else if(index == 1)
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d101      	bne.n	8000f88 <acis_saturate+0x20>
    acis_saturate_23();
 8000f84:	f7ff ffaa 	bl	8000edc <acis_saturate_23>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <acis_ignition_loop>:

static inline void acis_ignition_loop(void)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b08b      	sub	sp, #44	; 0x2c
 8000f94:	af00      	add	r7, sp, #0
  TIME11 = Delay_Tick;
 8000f96:	4bb7      	ldr	r3, [pc, #732]	; (8001274 <acis_ignition_loop+0x2e4>)
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	4ab7      	ldr	r2, [pc, #732]	; (8001278 <acis_ignition_loop+0x2e8>)
 8000f9c:	6013      	str	r3, [r2, #0]
  float rpm = csps_getrpm();
 8000f9e:	f005 fb6f 	bl	8006680 <csps_getrpm>
 8000fa2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  uint8_t rotates = csps_isrotates() || hall_rotates;
 8000fa6:	f005 fba3 	bl	80066f0 <csps_isrotates>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d104      	bne.n	8000fba <acis_ignition_loop+0x2a>
 8000fb0:	4bb2      	ldr	r3, [pc, #712]	; (800127c <acis_ignition_loop+0x2ec>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <acis_ignition_loop+0x2e>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <acis_ignition_loop+0x30>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t isIgn = HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_RESET;
 8000fc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fc8:	48ad      	ldr	r0, [pc, #692]	; (8001280 <acis_ignition_loop+0x2f0>)
 8000fca:	f009 fedf 	bl	800ad8c <HAL_GPIO_ReadPin>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bf0c      	ite	eq
 8000fd4:	2301      	moveq	r3, #1
 8000fd6:	2300      	movne	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  if(isIgn && !ign_ftime && rotates)
 8000fde:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 8134 	beq.w	8001250 <acis_ignition_loop+0x2c0>
 8000fe8:	4ba6      	ldr	r3, [pc, #664]	; (8001284 <acis_ignition_loop+0x2f4>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f040 812f 	bne.w	8001250 <acis_ignition_loop+0x2c0>
 8000ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 812a 	beq.w	8001250 <acis_ignition_loop+0x2c0>
  {
    uint8_t t_saturated_14 = saturated_14;
 8000ffc:	4ba2      	ldr	r3, [pc, #648]	; (8001288 <acis_ignition_loop+0x2f8>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    uint32_t t_ign14_sat = ign14_sat;
 8001004:	4ba1      	ldr	r3, [pc, #644]	; (800128c <acis_ignition_loop+0x2fc>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	61fb      	str	r3, [r7, #28]
    uint32_t t_ign14_time = ign14_time;
 800100a:	4ba1      	ldr	r3, [pc, #644]	; (8001290 <acis_ignition_loop+0x300>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	61bb      	str	r3, [r7, #24]
    uint32_t t_ign14_prev = ign14_prev;
 8001010:	4ba0      	ldr	r3, [pc, #640]	; (8001294 <acis_ignition_loop+0x304>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	617b      	str	r3, [r7, #20]
    uint32_t now = Delay_Tick;
 8001016:	4b97      	ldr	r3, [pc, #604]	; (8001274 <acis_ignition_loop+0x2e4>)
 8001018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101a:	613b      	str	r3, [r7, #16]
    if(DelayDiff(now, t_ign14_time) >= IGN_OVER_TIME && DelayDiff(now, t_ign14_sat) >= IGN_OVER_TIME)
 800101c:	69b9      	ldr	r1, [r7, #24]
 800101e:	6938      	ldr	r0, [r7, #16]
 8001020:	f005 fc52 	bl	80068c8 <DelayDiff>
 8001024:	4602      	mov	r2, r0
 8001026:	4b9c      	ldr	r3, [pc, #624]	; (8001298 <acis_ignition_loop+0x308>)
 8001028:	429a      	cmp	r2, r3
 800102a:	d910      	bls.n	800104e <acis_ignition_loop+0xbe>
 800102c:	69f9      	ldr	r1, [r7, #28]
 800102e:	6938      	ldr	r0, [r7, #16]
 8001030:	f005 fc4a 	bl	80068c8 <DelayDiff>
 8001034:	4602      	mov	r2, r0
 8001036:	4b98      	ldr	r3, [pc, #608]	; (8001298 <acis_ignition_loop+0x308>)
 8001038:	429a      	cmp	r2, r3
 800103a:	d908      	bls.n	800104e <acis_ignition_loop+0xbe>
    {
      HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	2180      	movs	r1, #128	; 0x80
 8001040:	4896      	ldr	r0, [pc, #600]	; (800129c <acis_ignition_loop+0x30c>)
 8001042:	f009 febb 	bl	800adbc <HAL_GPIO_WritePin>
      saturated_14 = 0;
 8001046:	4b90      	ldr	r3, [pc, #576]	; (8001288 <acis_ignition_loop+0x2f8>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	e065      	b.n	800111a <acis_ignition_loop+0x18a>
    }
    else if(!t_saturated_14 && acis_config.params.isIgnitionByHall)
 800104e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001052:	2b00      	cmp	r3, #0
 8001054:	d161      	bne.n	800111a <acis_ignition_loop+0x18a>
 8001056:	4a92      	ldr	r2, [pc, #584]	; (80012a0 <acis_ignition_loop+0x310>)
 8001058:	f643 53b8 	movw	r3, #15800	; 0x3db8
 800105c:	4413      	add	r3, r2
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d05a      	beq.n	800111a <acis_ignition_loop+0x18a>
    {
      if(rpm < 300.0f)
 8001064:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001068:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80012a4 <acis_ignition_loop+0x314>
 800106c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001074:	d519      	bpl.n	80010aa <acis_ignition_loop+0x11a>
      {
        if(DelayDiff(now, t_ign14_time) >= DelayDiff(t_ign14_time, t_ign14_prev) * 96 / 128)
 8001076:	69b9      	ldr	r1, [r7, #24]
 8001078:	6938      	ldr	r0, [r7, #16]
 800107a:	f005 fc25 	bl	80068c8 <DelayDiff>
 800107e:	4604      	mov	r4, r0
 8001080:	6979      	ldr	r1, [r7, #20]
 8001082:	69b8      	ldr	r0, [r7, #24]
 8001084:	f005 fc20 	bl	80068c8 <DelayDiff>
 8001088:	4602      	mov	r2, r0
 800108a:	4613      	mov	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4413      	add	r3, r2
 8001090:	015b      	lsls	r3, r3, #5
 8001092:	09db      	lsrs	r3, r3, #7
 8001094:	429c      	cmp	r4, r3
 8001096:	d340      	bcc.n	800111a <acis_ignition_loop+0x18a>
        {
          HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	487f      	ldr	r0, [pc, #508]	; (800129c <acis_ignition_loop+0x30c>)
 800109e:	f009 fe8d 	bl	800adbc <HAL_GPIO_WritePin>
          saturated_14 = 1;
 80010a2:	4b79      	ldr	r3, [pc, #484]	; (8001288 <acis_ignition_loop+0x2f8>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	e037      	b.n	800111a <acis_ignition_loop+0x18a>
        }
      }
      else if(DelayDiff(t_ign14_time, t_ign14_prev) > 15000)
 80010aa:	6979      	ldr	r1, [r7, #20]
 80010ac:	69b8      	ldr	r0, [r7, #24]
 80010ae:	f005 fc0b 	bl	80068c8 <DelayDiff>
 80010b2:	4602      	mov	r2, r0
 80010b4:	f643 2398 	movw	r3, #15000	; 0x3a98
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d918      	bls.n	80010ee <acis_ignition_loop+0x15e>
      {
        if((int32_t)DelayDiff(t_ign14_time, t_ign14_prev) - (int32_t)DelayDiff(now, t_ign14_time) < 11719)
 80010bc:	6979      	ldr	r1, [r7, #20]
 80010be:	69b8      	ldr	r0, [r7, #24]
 80010c0:	f005 fc02 	bl	80068c8 <DelayDiff>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461c      	mov	r4, r3
 80010c8:	69b9      	ldr	r1, [r7, #24]
 80010ca:	6938      	ldr	r0, [r7, #16]
 80010cc:	f005 fbfc 	bl	80068c8 <DelayDiff>
 80010d0:	4603      	mov	r3, r0
 80010d2:	1ae3      	subs	r3, r4, r3
 80010d4:	f642 52c6 	movw	r2, #11718	; 0x2dc6
 80010d8:	4293      	cmp	r3, r2
 80010da:	dc1e      	bgt.n	800111a <acis_ignition_loop+0x18a>
        {
          HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2180      	movs	r1, #128	; 0x80
 80010e0:	486e      	ldr	r0, [pc, #440]	; (800129c <acis_ignition_loop+0x30c>)
 80010e2:	f009 fe6b 	bl	800adbc <HAL_GPIO_WritePin>
          saturated_14 = 1;
 80010e6:	4b68      	ldr	r3, [pc, #416]	; (8001288 <acis_ignition_loop+0x2f8>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e015      	b.n	800111a <acis_ignition_loop+0x18a>
        }
      }
      else if(DelayDiff(now, t_ign14_time) >= DelayDiff(t_ign14_time, t_ign14_prev) * 64 / 128)
 80010ee:	69b9      	ldr	r1, [r7, #24]
 80010f0:	6938      	ldr	r0, [r7, #16]
 80010f2:	f005 fbe9 	bl	80068c8 <DelayDiff>
 80010f6:	4604      	mov	r4, r0
 80010f8:	6979      	ldr	r1, [r7, #20]
 80010fa:	69b8      	ldr	r0, [r7, #24]
 80010fc:	f005 fbe4 	bl	80068c8 <DelayDiff>
 8001100:	4603      	mov	r3, r0
 8001102:	019b      	lsls	r3, r3, #6
 8001104:	09db      	lsrs	r3, r3, #7
 8001106:	429c      	cmp	r4, r3
 8001108:	d307      	bcc.n	800111a <acis_ignition_loop+0x18a>
      {
        HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	4863      	ldr	r0, [pc, #396]	; (800129c <acis_ignition_loop+0x30c>)
 8001110:	f009 fe54 	bl	800adbc <HAL_GPIO_WritePin>
        saturated_14 = 1;
 8001114:	4b5c      	ldr	r3, [pc, #368]	; (8001288 <acis_ignition_loop+0x2f8>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
      }
    }

    uint8_t t_saturated_23 = saturated_23;
 800111a:	4b63      	ldr	r3, [pc, #396]	; (80012a8 <acis_ignition_loop+0x318>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	73fb      	strb	r3, [r7, #15]
    uint32_t t_ign23_sat = ign23_sat;
 8001120:	4b62      	ldr	r3, [pc, #392]	; (80012ac <acis_ignition_loop+0x31c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60bb      	str	r3, [r7, #8]
    uint32_t t_ign23_time = ign23_time;
 8001126:	4b62      	ldr	r3, [pc, #392]	; (80012b0 <acis_ignition_loop+0x320>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	607b      	str	r3, [r7, #4]
    uint32_t t_ign23_prev = ign23_prev;
 800112c:	4b61      	ldr	r3, [pc, #388]	; (80012b4 <acis_ignition_loop+0x324>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	603b      	str	r3, [r7, #0]
    now = Delay_Tick;
 8001132:	4b50      	ldr	r3, [pc, #320]	; (8001274 <acis_ignition_loop+0x2e4>)
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	613b      	str	r3, [r7, #16]
    if(DelayDiff(now, t_ign23_time) >= IGN_OVER_TIME && DelayDiff(now, t_ign23_sat) >= IGN_OVER_TIME)
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	6938      	ldr	r0, [r7, #16]
 800113c:	f005 fbc4 	bl	80068c8 <DelayDiff>
 8001140:	4602      	mov	r2, r0
 8001142:	4b55      	ldr	r3, [pc, #340]	; (8001298 <acis_ignition_loop+0x308>)
 8001144:	429a      	cmp	r2, r3
 8001146:	d910      	bls.n	800116a <acis_ignition_loop+0x1da>
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6938      	ldr	r0, [r7, #16]
 800114c:	f005 fbbc 	bl	80068c8 <DelayDiff>
 8001150:	4602      	mov	r2, r0
 8001152:	4b51      	ldr	r3, [pc, #324]	; (8001298 <acis_ignition_loop+0x308>)
 8001154:	429a      	cmp	r2, r3
 8001156:	d908      	bls.n	800116a <acis_ignition_loop+0x1da>
    {
      HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	2140      	movs	r1, #64	; 0x40
 800115c:	484f      	ldr	r0, [pc, #316]	; (800129c <acis_ignition_loop+0x30c>)
 800115e:	f009 fe2d 	bl	800adbc <HAL_GPIO_WritePin>
      saturated_23 = 0;
 8001162:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <acis_ignition_loop+0x318>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e071      	b.n	800124e <acis_ignition_loop+0x2be>
    }
    else if(!t_saturated_23 && acis_config.params.isIgnitionByHall)
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	2b00      	cmp	r3, #0
 800116e:	f040 80a5 	bne.w	80012bc <acis_ignition_loop+0x32c>
 8001172:	4a4b      	ldr	r2, [pc, #300]	; (80012a0 <acis_ignition_loop+0x310>)
 8001174:	f643 53b8 	movw	r3, #15800	; 0x3db8
 8001178:	4413      	add	r3, r2
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 809d 	beq.w	80012bc <acis_ignition_loop+0x32c>
    {
      if(rpm < 300.0f)
 8001182:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001186:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80012a4 <acis_ignition_loop+0x314>
 800118a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001192:	d51a      	bpl.n	80011ca <acis_ignition_loop+0x23a>
      {
        if(DelayDiff(now, t_ign23_time) >= DelayDiff(t_ign23_time, t_ign23_prev) * 96 / 128)
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	6938      	ldr	r0, [r7, #16]
 8001198:	f005 fb96 	bl	80068c8 <DelayDiff>
 800119c:	4604      	mov	r4, r0
 800119e:	6839      	ldr	r1, [r7, #0]
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f005 fb91 	bl	80068c8 <DelayDiff>
 80011a6:	4602      	mov	r2, r0
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	015b      	lsls	r3, r3, #5
 80011b0:	09db      	lsrs	r3, r3, #7
 80011b2:	429c      	cmp	r4, r3
 80011b4:	f0c0 8082 	bcc.w	80012bc <acis_ignition_loop+0x32c>
        {
          HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2140      	movs	r1, #64	; 0x40
 80011bc:	4837      	ldr	r0, [pc, #220]	; (800129c <acis_ignition_loop+0x30c>)
 80011be:	f009 fdfd 	bl	800adbc <HAL_GPIO_WritePin>
          saturated_23 = 1;
 80011c2:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <acis_ignition_loop+0x318>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]
  {
 80011c8:	e078      	b.n	80012bc <acis_ignition_loop+0x32c>
        }
      }
      else if(rpm > 500.0f && DelayDiff(t_ign23_time, t_ign23_prev) > 15000)
 80011ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80011ce:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80012b8 <acis_ignition_loop+0x328>
 80011d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	dd21      	ble.n	8001220 <acis_ignition_loop+0x290>
 80011dc:	6839      	ldr	r1, [r7, #0]
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f005 fb72 	bl	80068c8 <DelayDiff>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f643 2398 	movw	r3, #15000	; 0x3a98
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d918      	bls.n	8001220 <acis_ignition_loop+0x290>
      {
        if((int32_t)DelayDiff(t_ign23_time, t_ign23_prev) - (int32_t)DelayDiff(now, t_ign23_time) < 11719)
 80011ee:	6839      	ldr	r1, [r7, #0]
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f005 fb69 	bl	80068c8 <DelayDiff>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461c      	mov	r4, r3
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	6938      	ldr	r0, [r7, #16]
 80011fe:	f005 fb63 	bl	80068c8 <DelayDiff>
 8001202:	4603      	mov	r3, r0
 8001204:	1ae3      	subs	r3, r4, r3
 8001206:	f642 52c6 	movw	r2, #11718	; 0x2dc6
 800120a:	4293      	cmp	r3, r2
 800120c:	dc1f      	bgt.n	800124e <acis_ignition_loop+0x2be>
        {
          HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2140      	movs	r1, #64	; 0x40
 8001212:	4822      	ldr	r0, [pc, #136]	; (800129c <acis_ignition_loop+0x30c>)
 8001214:	f009 fdd2 	bl	800adbc <HAL_GPIO_WritePin>
          saturated_23 = 1;
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <acis_ignition_loop+0x318>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
        if((int32_t)DelayDiff(t_ign23_time, t_ign23_prev) - (int32_t)DelayDiff(now, t_ign23_time) < 11719)
 800121e:	e016      	b.n	800124e <acis_ignition_loop+0x2be>
        }
      }
      else if(DelayDiff(now, t_ign23_time) >= DelayDiff(t_ign23_time, t_ign23_prev) * 64 / 128)
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	6938      	ldr	r0, [r7, #16]
 8001224:	f005 fb50 	bl	80068c8 <DelayDiff>
 8001228:	4604      	mov	r4, r0
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f005 fb4b 	bl	80068c8 <DelayDiff>
 8001232:	4603      	mov	r3, r0
 8001234:	019b      	lsls	r3, r3, #6
 8001236:	09db      	lsrs	r3, r3, #7
 8001238:	429c      	cmp	r4, r3
 800123a:	d33f      	bcc.n	80012bc <acis_ignition_loop+0x32c>
      {
        HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	4816      	ldr	r0, [pc, #88]	; (800129c <acis_ignition_loop+0x30c>)
 8001242:	f009 fdbb 	bl	800adbc <HAL_GPIO_WritePin>
        saturated_23 = 1;
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <acis_ignition_loop+0x318>)
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
  {
 800124c:	e036      	b.n	80012bc <acis_ignition_loop+0x32c>
 800124e:	e035      	b.n	80012bc <acis_ignition_loop+0x32c>
      }
    }
  }
  else
  {
    HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	4811      	ldr	r0, [pc, #68]	; (800129c <acis_ignition_loop+0x30c>)
 8001256:	f009 fdb1 	bl	800adbc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 800125a:	2201      	movs	r2, #1
 800125c:	2140      	movs	r1, #64	; 0x40
 800125e:	480f      	ldr	r0, [pc, #60]	; (800129c <acis_ignition_loop+0x30c>)
 8001260:	f009 fdac 	bl	800adbc <HAL_GPIO_WritePin>
    saturated_14 = 0;
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <acis_ignition_loop+0x2f8>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
    saturated_23 = 0;
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <acis_ignition_loop+0x318>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
 8001270:	e025      	b.n	80012be <acis_ignition_loop+0x32e>
 8001272:	bf00      	nop
 8001274:	40000c00 	.word	0x40000c00
 8001278:	200114c8 	.word	0x200114c8
 800127c:	200114a0 	.word	0x200114a0
 8001280:	40020000 	.word	0x40020000
 8001284:	20010030 	.word	0x20010030
 8001288:	200114b9 	.word	0x200114b9
 800128c:	2001147c 	.word	0x2001147c
 8001290:	20011484 	.word	0x20011484
 8001294:	2001148c 	.word	0x2001148c
 8001298:	000927bf 	.word	0x000927bf
 800129c:	40020400 	.word	0x40020400
 80012a0:	20011d24 	.word	0x20011d24
 80012a4:	43960000 	.word	0x43960000
 80012a8:	200114ba 	.word	0x200114ba
 80012ac:	20011480 	.word	0x20011480
 80012b0:	20011488 	.word	0x20011488
 80012b4:	20011490 	.word	0x20011490
 80012b8:	43fa0000 	.word	0x43fa0000
  {
 80012bc:	bf00      	nop
  }
  TIME1 = Delay_Tick - TIME11;
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <acis_ignition_loop+0x344>)
 80012c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <acis_ignition_loop+0x348>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <acis_ignition_loop+0x34c>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	372c      	adds	r7, #44	; 0x2c
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd90      	pop	{r4, r7, pc}
 80012d4:	40000c00 	.word	0x40000c00
 80012d8:	200114c8 	.word	0x200114c8
 80012dc:	200114bc 	.word	0x200114bc

080012e0 <acis_hall_exti>:

inline void acis_hall_exti(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
  uint32_t now = Delay_Tick;
 80012e6:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <acis_hall_exti+0xc0>)
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	60fb      	str	r3, [r7, #12]
  uint8_t hall_cylinders = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	75fb      	strb	r3, [r7, #23]
  hall_prev = now;
 80012f0:	4a2c      	ldr	r2, [pc, #176]	; (80013a4 <acis_hall_exti+0xc4>)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6013      	str	r3, [r2, #0]
  float angle = 0.0f;
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
  float angle14 = csps_getangle14();
 80012fc:	f005 f8ca 	bl	8006494 <csps_getangle14>
 8001300:	ed87 0a02 	vstr	s0, [r7, #8]
  float angle23 = csps_getangle23from14(angle14);
 8001304:	ed97 0a02 	vldr	s0, [r7, #8]
 8001308:	f005 f986 	bl	8006618 <csps_getangle23from14>
 800130c:	ed87 0a01 	vstr	s0, [r7, #4]
  float cspsfound = csps_isfound();
 8001310:	f005 f9fa 	bl	8006708 <csps_isfound>
 8001314:	4603      	mov	r3, r0
 8001316:	ee07 3a90 	vmov	s15, r3
 800131a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800131e:	edc7 7a00 	vstr	s15, [r7]

  if(angle14 < 90.0f && angle14 >= -90.0f)
 8001322:	edd7 7a02 	vldr	s15, [r7, #8]
 8001326:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80013a8 <acis_hall_exti+0xc8>
 800132a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001332:	d50d      	bpl.n	8001350 <acis_hall_exti+0x70>
 8001334:	edd7 7a02 	vldr	s15, [r7, #8]
 8001338:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80013ac <acis_hall_exti+0xcc>
 800133c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001344:	db04      	blt.n	8001350 <acis_hall_exti+0x70>
  {
      hall_cylinders = 1;
 8001346:	2301      	movs	r3, #1
 8001348:	75fb      	strb	r3, [r7, #23]
      angle = angle14;
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	e003      	b.n	8001358 <acis_hall_exti+0x78>
  }
  else
  {
    hall_cylinders = 2;
 8001350:	2302      	movs	r3, #2
 8001352:	75fb      	strb	r3, [r7, #23]
    angle = angle23;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	613b      	str	r3, [r7, #16]
  }
  hall_angle = angle;
 8001358:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <acis_hall_exti+0xd0>)
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	6013      	str	r3, [r2, #0]

  if(cspsfound && acis_config.params.isIgnitionByHall)
 800135e:	edd7 7a00 	vldr	s15, [r7]
 8001362:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136a:	d011      	beq.n	8001390 <acis_hall_exti+0xb0>
 800136c:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <acis_hall_exti+0xd4>)
 800136e:	f643 53b8 	movw	r3, #15800	; 0x3db8
 8001372:	4413      	add	r3, r2
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00a      	beq.n	8001390 <acis_hall_exti+0xb0>
  {
    if(hall_cylinders == 1)
 800137a:	7dfb      	ldrb	r3, [r7, #23]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d102      	bne.n	8001386 <acis_hall_exti+0xa6>
    {
      acis_ignite_14();
 8001380:	f7ff fd32 	bl	8000de8 <acis_ignite_14>
 8001384:	e004      	b.n	8001390 <acis_hall_exti+0xb0>
    }
    else if(hall_cylinders == 2)
 8001386:	7dfb      	ldrb	r3, [r7, #23]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d101      	bne.n	8001390 <acis_hall_exti+0xb0>
    {
      acis_ignite_23();
 800138c:	f7ff fd50 	bl	8000e30 <acis_ignite_23>
    }
  }
  hall_rotates = 1;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <acis_hall_exti+0xd8>)
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40000c00 	.word	0x40000c00
 80013a4:	20011494 	.word	0x20011494
 80013a8:	42b40000 	.word	0x42b40000
 80013ac:	c2b40000 	.word	0xc2b40000
 80013b0:	20011498 	.word	0x20011498
 80013b4:	20011d24 	.word	0x20011d24
 80013b8:	200114a0 	.word	0x200114a0
 80013bc:	00000000 	.word	0x00000000

080013c0 <acis_hall_loop>:

static inline void acis_hall_loop(void)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
  static uint32_t last_error_null = 0;
  uint32_t prev = hall_prev;
 80013c6:	4b28      	ldr	r3, [pc, #160]	; (8001468 <acis_hall_loop+0xa8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	607b      	str	r3, [r7, #4]
  uint32_t now = Delay_Tick;
 80013cc:	4b27      	ldr	r3, [pc, #156]	; (800146c <acis_hall_loop+0xac>)
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	603b      	str	r3, [r7, #0]
  if(DelayDiff(now, last_error_null) > 10000)
 80013d2:	4b27      	ldr	r3, [pc, #156]	; (8001470 <acis_hall_loop+0xb0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4619      	mov	r1, r3
 80013d8:	6838      	ldr	r0, [r7, #0]
 80013da:	f005 fa75 	bl	80068c8 <DelayDiff>
 80013de:	4602      	mov	r2, r0
 80013e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d915      	bls.n	8001414 <acis_hall_loop+0x54>
  {
    hall_error *= 0.95;
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <acis_hall_loop+0xb4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f87b 	bl	80004e8 <__aeabi_f2d>
 80013f2:	a31b      	add	r3, pc, #108	; (adr r3, 8001460 <acis_hall_loop+0xa0>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	f7ff f8ce 	bl	8000598 <__aeabi_dmul>
 80013fc:	4603      	mov	r3, r0
 80013fe:	460c      	mov	r4, r1
 8001400:	4618      	mov	r0, r3
 8001402:	4621      	mov	r1, r4
 8001404:	f7ff fada 	bl	80009bc <__aeabi_d2f>
 8001408:	4602      	mov	r2, r0
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <acis_hall_loop+0xb4>)
 800140c:	601a      	str	r2, [r3, #0]
    last_error_null = now;
 800140e:	4a18      	ldr	r2, [pc, #96]	; (8001470 <acis_hall_loop+0xb0>)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	6013      	str	r3, [r2, #0]
  }
  if(DelayDiff(now, prev) > 600000)
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	6838      	ldr	r0, [r7, #0]
 8001418:	f005 fa56 	bl	80068c8 <DelayDiff>
 800141c:	4602      	mov	r2, r0
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <acis_hall_loop+0xb8>)
 8001420:	429a      	cmp	r2, r3
 8001422:	d918      	bls.n	8001456 <acis_hall_loop+0x96>
  {
    if((acis_config.params.isHallLearningMode || acis_config.params.isIgnitionByHall) && csps_isfound())
 8001424:	4a15      	ldr	r2, [pc, #84]	; (800147c <acis_hall_loop+0xbc>)
 8001426:	f643 53ba 	movw	r3, #15802	; 0x3dba
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <acis_hall_loop+0x80>
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <acis_hall_loop+0xbc>)
 8001434:	f643 53b8 	movw	r3, #15800	; 0x3db8
 8001438:	4413      	add	r3, r2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d007      	beq.n	8001450 <acis_hall_loop+0x90>
 8001440:	f005 f962 	bl	8006708 <csps_isfound>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <acis_hall_loop+0x90>
      hall_error = 3.0f;
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <acis_hall_loop+0xb4>)
 800144c:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <acis_hall_loop+0xc0>)
 800144e:	601a      	str	r2, [r3, #0]
    hall_rotates = 0;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <acis_hall_loop+0xc4>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}
 800145e:	bf00      	nop
 8001460:	66666666 	.word	0x66666666
 8001464:	3fee6666 	.word	0x3fee6666
 8001468:	20011494 	.word	0x20011494
 800146c:	40000c00 	.word	0x40000c00
 8001470:	200114f8 	.word	0x200114f8
 8001474:	2001149c 	.word	0x2001149c
 8001478:	000927c0 	.word	0x000927c0
 800147c:	20011d24 	.word	0x20011d24
 8001480:	40400000 	.word	0x40400000
 8001484:	200114a0 	.word	0x200114a0

08001488 <CalculateIgnition>:

static float CalculateIgnition(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b0a4      	sub	sp, #144	; 0x90
 800148c:	af00      	add	r7, sp, #0
  float rpm = csps_getrpm();
 800148e:	f005 f8f7 	bl	8006680 <csps_getrpm>
 8001492:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
  float pressure = map_getpressure();
 8001496:	f006 f97b 	bl	8007790 <map_getpressure>
 800149a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
  float temperature = 80.0f;
 800149e:	4bbe      	ldr	r3, [pc, #760]	; (8001798 <CalculateIgnition+0x310>)
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t isIdle = HAL_GPIO_ReadPin(SENS_ACC_GPIO_Port, SENS_ACC_Pin) == GPIO_PIN_SET;
 80014a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a6:	48bd      	ldr	r0, [pc, #756]	; (800179c <CalculateIgnition+0x314>)
 80014a8:	f009 fc70 	bl	800ad8c <HAL_GPIO_ReadPin>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	bf0c      	ite	eq
 80014b2:	2301      	moveq	r3, #1
 80014b4:	2300      	movne	r3, #0
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33


  static uint32_t lastRotated = 0x80000000;
  static uint8_t isInitial = 1;
  uint32_t now = Delay_Tick;
 80014bc:	4bb8      	ldr	r3, [pc, #736]	; (80017a0 <CalculateIgnition+0x318>)
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  float angle = 0.0f;
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  float angle_1, angle_2;
  float mult, mult_rpm, mult_press,
      temprpm1 = 0.0f,temprpm2 = 0.0f,
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      temppress1 = 0.0f,temppress2 = 0.0f,
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	67fb      	str	r3, [r7, #124]	; 0x7c
      temptemp1 = 0.0f,temptemp2 = 0.0f,
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	677b      	str	r3, [r7, #116]	; 0x74
      tempign1 = 0.0f, tempign2 = 0.0f,
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	673b      	str	r3, [r7, #112]	; 0x70
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	66fb      	str	r3, [r7, #108]	; 0x6c
      tempign11 = 0.0f, tempign12 = 0.0f,
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
      tempign21 = 0.0f, tempign22 = 0.0f;
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t rpmindex1 = 0, rpmindex2 = 0,
 8001518:	2300      	movs	r3, #0
 800151a:	66bb      	str	r3, [r7, #104]	; 0x68
 800151c:	2300      	movs	r3, #0
 800151e:	667b      	str	r3, [r7, #100]	; 0x64
      pressindex1 = 0, pressindex2 = 0,
 8001520:	2300      	movs	r3, #0
 8001522:	663b      	str	r3, [r7, #96]	; 0x60
 8001524:	2300      	movs	r3, #0
 8001526:	65fb      	str	r3, [r7, #92]	; 0x5c
      tempindex1 = 0, tempindex2 = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	65bb      	str	r3, [r7, #88]	; 0x58
 800152c:	2300      	movs	r3, #0
 800152e:	657b      	str	r3, [r7, #84]	; 0x54

  sAcisIgnTable * table = NULL;
 8001530:	2300      	movs	r3, #0
 8001532:	653b      	str	r3, [r7, #80]	; 0x50
  int table_num = table_current;
 8001534:	4b9b      	ldr	r3, [pc, #620]	; (80017a4 <CalculateIgnition+0x31c>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	61bb      	str	r3, [r7, #24]

  if(table_num < acis_config.tables_count || table_num < TABLE_SETUPS_MAX)
 800153c:	4b9a      	ldr	r3, [pc, #616]	; (80017a8 <CalculateIgnition+0x320>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	429a      	cmp	r2, r3
 8001544:	d802      	bhi.n	800154c <CalculateIgnition+0xc4>
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	2b03      	cmp	r3, #3
 800154a:	dc08      	bgt.n	800155e <CalculateIgnition+0xd6>
    table = &acis_config.tables[table_num];
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	f640 726c 	movw	r2, #3948	; 0xf6c
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	4a94      	ldr	r2, [pc, #592]	; (80017a8 <CalculateIgnition+0x320>)
 8001558:	4413      	add	r3, r2
 800155a:	3304      	adds	r3, #4
 800155c:	653b      	str	r3, [r7, #80]	; 0x50

  if(rpm > 400.0f)
 800155e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001562:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80017ac <CalculateIgnition+0x324>
 8001566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156e:	dd06      	ble.n	800157e <CalculateIgnition+0xf6>
  {
    isInitial = 0;
 8001570:	4b8f      	ldr	r3, [pc, #572]	; (80017b0 <CalculateIgnition+0x328>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
    lastRotated = now;
 8001576:	4a8f      	ldr	r2, [pc, #572]	; (80017b4 <CalculateIgnition+0x32c>)
 8001578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	e015      	b.n	80015aa <CalculateIgnition+0x122>
  }
  else if(rpm < 10.0f)
 800157e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001582:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	d50c      	bpl.n	80015aa <CalculateIgnition+0x122>
  {
    if(DelayDiff(now, lastRotated) < INITIAL_TIMEOUT)
 8001590:	4b88      	ldr	r3, [pc, #544]	; (80017b4 <CalculateIgnition+0x32c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001598:	f005 f996 	bl	80068c8 <DelayDiff>
 800159c:	4602      	mov	r2, r0
 800159e:	4b86      	ldr	r3, [pc, #536]	; (80017b8 <CalculateIgnition+0x330>)
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d802      	bhi.n	80015aa <CalculateIgnition+0x122>
    {
      isInitial = 1;
 80015a4:	4b82      	ldr	r3, [pc, #520]	; (80017b0 <CalculateIgnition+0x328>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
    }
  }

  if(table)
 80015aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 84a3 	beq.w	8001ef8 <CalculateIgnition+0xa70>
  {
    angle = table->initial_ignition;
 80015b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if(!isInitial && rpm > 10.0f)
 80015ba:	4b7d      	ldr	r3, [pc, #500]	; (80017b0 <CalculateIgnition+0x328>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f040 8479 	bne.w	8001eb6 <CalculateIgnition+0xa2e>
 80015c4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80015c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d4:	f340 846f 	ble.w	8001eb6 <CalculateIgnition+0xa2e>
    {
      if(isIdle)
 80015d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80ed 	beq.w	80017bc <CalculateIgnition+0x334>
      {
        if(table->idles_count == 0)
 80015e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d104      	bne.n	80015f4 <CalculateIgnition+0x16c>
          angle = table->initial_ignition;
 80015ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015f2:	e35e      	b.n	8001cb2 <CalculateIgnition+0x82a>
        else if(table->idles_count == 1)
 80015f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d104      	bne.n	8001606 <CalculateIgnition+0x17e>
          angle = table->idle_ignitions[0];
 80015fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001604:	e355      	b.n	8001cb2 <CalculateIgnition+0x82a>
        else
        {
          if(rpm <= table->idle_rotates[0])
 8001606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001608:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800160c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001610:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	d804      	bhi.n	8001624 <CalculateIgnition+0x19c>
          {
            angle = table->idle_ignitions[0];
 800161a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001622:	e065      	b.n	80016f0 <CalculateIgnition+0x268>
          }
          else if(rpm >= table->idle_rotates[table->rotates_count-1])
 8001624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001626:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800162a:	3b01      	subs	r3, #1
 800162c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800162e:	3320      	adds	r3, #32
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800163c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001644:	db18      	blt.n	8001678 <CalculateIgnition+0x1f0>
          {
            rpmindex1 = table->idles_count-2;
 8001646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	3b02      	subs	r3, #2
 800164c:	66bb      	str	r3, [r7, #104]	; 0x68
            rpmindex2 = table->idles_count-1;
 800164e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	3b01      	subs	r3, #1
 8001654:	667b      	str	r3, [r7, #100]	; 0x64
            temprpm1 = table->idle_rotates[rpmindex1];
 8001656:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001658:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800165a:	3320      	adds	r3, #32
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            temprpm2 = table->idle_rotates[rpmindex2];
 8001666:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800166a:	3320      	adds	r3, #32
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001676:	e03b      	b.n	80016f0 <CalculateIgnition+0x268>
          }
          else
          {
            for(int i = 1; i < table->idles_count; i++)
 8001678:	2301      	movs	r3, #1
 800167a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800167c:	e033      	b.n	80016e6 <CalculateIgnition+0x25e>
            {
              temprpm1 = table->idle_rotates[i-1];
 800167e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001680:	3b01      	subs	r3, #1
 8001682:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001684:	3320      	adds	r3, #32
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              temprpm2 = table->idle_rotates[i];
 8001690:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001694:	3320      	adds	r3, #32
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              if(temprpm1 < rpm && temprpm2 > rpm)
 80016a0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80016a4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80016a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b0:	d50e      	bpl.n	80016d0 <CalculateIgnition+0x248>
 80016b2:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80016b6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80016ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	dd05      	ble.n	80016d0 <CalculateIgnition+0x248>
              {
                rpmindex1 = i-1;
 80016c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016c6:	3b01      	subs	r3, #1
 80016c8:	66bb      	str	r3, [r7, #104]	; 0x68
                rpmindex2 = i;
 80016ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016cc:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 80016ce:	e00f      	b.n	80016f0 <CalculateIgnition+0x268>
              }
              temprpm1 = 0.0f;
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              temprpm2 = 0.0f;
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            for(int i = 1; i < table->idles_count; i++)
 80016e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016e2:	3301      	adds	r3, #1
 80016e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016e8:	69da      	ldr	r2, [r3, #28]
 80016ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d8c6      	bhi.n	800167e <CalculateIgnition+0x1f6>
            }
          }
          if(temprpm1 != 0.0f || temprpm2 != 0.0f)
 80016f0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80016f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fc:	d107      	bne.n	800170e <CalculateIgnition+0x286>
 80016fe:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001702:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	f000 82d2 	beq.w	8001cb2 <CalculateIgnition+0x82a>
          {
            if(temprpm1 != temprpm2)
 800170e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001712:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001716:	eeb4 7a67 	vcmp.f32	s14, s15
 800171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171e:	d02e      	beq.n	800177e <CalculateIgnition+0x2f6>
            {
              tempign1 = table->idle_ignitions[rpmindex1];
 8001720:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001722:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001724:	3308      	adds	r3, #8
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	673b      	str	r3, [r7, #112]	; 0x70
              tempign2 = table->idle_ignitions[rpmindex2];
 800172e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001732:	3308      	adds	r3, #8
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	66fb      	str	r3, [r7, #108]	; 0x6c
              mult = (rpm - temprpm1) / (temprpm2 - temprpm1);
 800173c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001740:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001744:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001748:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800174c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001750:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001758:	edc7 7a01 	vstr	s15, [r7, #4]
              angle = (tempign2 - tempign1) * mult + tempign1;
 800175c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001760:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001764:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001768:	edd7 7a01 	vldr	s15, [r7, #4]
 800176c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001770:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001778:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 800177c:	e299      	b.n	8001cb2 <CalculateIgnition+0x82a>
            }
            else angle = (tempign1 + tempign2) / 2.0f;
 800177e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001782:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001786:	ee37 7a27 	vadd.f32	s14, s14, s15
 800178a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800178e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001792:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8001796:	e28c      	b.n	8001cb2 <CalculateIgnition+0x82a>
 8001798:	42a00000 	.word	0x42a00000
 800179c:	40020800 	.word	0x40020800
 80017a0:	40000c00 	.word	0x40000c00
 80017a4:	200114b0 	.word	0x200114b0
 80017a8:	20011d24 	.word	0x20011d24
 80017ac:	43c80000 	.word	0x43c80000
 80017b0:	20010032 	.word	0x20010032
 80017b4:	20010034 	.word	0x20010034
 80017b8:	0001869f 	.word	0x0001869f

        }
      }
      else
      {
        if(table->pressures_count != 0 && table->rotates_count != 0)
 80017bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8275 	beq.w	8001cb2 <CalculateIgnition+0x82a>
 80017c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017ca:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 826f 	beq.w	8001cb2 <CalculateIgnition+0x82a>
        {
          if(table->pressures_count == 1)
 80017d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d10d      	bne.n	80017fa <CalculateIgnition+0x372>
          {
            pressindex1 = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	663b      	str	r3, [r7, #96]	; 0x60
            pressindex2 = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	65fb      	str	r3, [r7, #92]	; 0x5c
            temppress1 = table->pressures[0];
 80017e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80017ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            temppress2 = table->pressures[0];
 80017f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80017f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017f8:	e08a      	b.n	8001910 <CalculateIgnition+0x488>
          }
          else if(pressure <= table->pressures[0])
 80017fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017fc:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8001800:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001804:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180c:	d815      	bhi.n	800183a <CalculateIgnition+0x3b2>
          {
            pressindex1 = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	663b      	str	r3, [r7, #96]	; 0x60
            pressindex2 = 1;
 8001812:	2301      	movs	r3, #1
 8001814:	65fb      	str	r3, [r7, #92]	; 0x5c
            temppress1 = table->pressures[pressindex1];
 8001816:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800181a:	3338      	adds	r3, #56	; 0x38
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	3304      	adds	r3, #4
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            temppress2 = table->pressures[pressindex2];
 8001828:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800182a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800182c:	3338      	adds	r3, #56	; 0x38
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	3304      	adds	r3, #4
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001838:	e06a      	b.n	8001910 <CalculateIgnition+0x488>
          }
          else if(pressure >= table->pressures[table->pressures_count - 1])
 800183a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800183c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001840:	3b01      	subs	r3, #1
 8001842:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001844:	3338      	adds	r3, #56	; 0x38
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	3304      	adds	r3, #4
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	db1b      	blt.n	8001896 <CalculateIgnition+0x40e>
          {
            pressindex1 = table->pressures_count - 2;
 800185e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001864:	3b02      	subs	r3, #2
 8001866:	663b      	str	r3, [r7, #96]	; 0x60
            pressindex2 = table->pressures_count - 1;
 8001868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800186a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186e:	3b01      	subs	r3, #1
 8001870:	65fb      	str	r3, [r7, #92]	; 0x5c
            temppress1 = table->pressures[pressindex1];
 8001872:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001874:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001876:	3338      	adds	r3, #56	; 0x38
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	3304      	adds	r3, #4
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            temppress2 = table->pressures[pressindex2];
 8001884:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001888:	3338      	adds	r3, #56	; 0x38
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	3304      	adds	r3, #4
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001894:	e03c      	b.n	8001910 <CalculateIgnition+0x488>
          }
          else
          {
            for(int i = 1; i < table->pressures_count; i++)
 8001896:	2301      	movs	r3, #1
 8001898:	64bb      	str	r3, [r7, #72]	; 0x48
 800189a:	e033      	b.n	8001904 <CalculateIgnition+0x47c>
            {
              temppress1 = table->pressures[i-1];
 800189c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800189e:	3b01      	subs	r3, #1
 80018a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80018a2:	3338      	adds	r3, #56	; 0x38
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	3304      	adds	r3, #4
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
              temppress2 = table->pressures[i];
 80018b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80018b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018b4:	3338      	adds	r3, #56	; 0x38
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	3304      	adds	r3, #4
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	67fb      	str	r3, [r7, #124]	; 0x7c
              if(temppress1 < pressure && temppress2 > pressure)
 80018c0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80018c4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	d50e      	bpl.n	80018f0 <CalculateIgnition+0x468>
 80018d2:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80018d6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e2:	dd05      	ble.n	80018f0 <CalculateIgnition+0x468>
              {
                pressindex1 = i-1;
 80018e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018e6:	3b01      	subs	r3, #1
 80018e8:	663b      	str	r3, [r7, #96]	; 0x60
                pressindex2 = i;
 80018ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018ec:	65fb      	str	r3, [r7, #92]	; 0x5c
                break;
 80018ee:	e00f      	b.n	8001910 <CalculateIgnition+0x488>
              }
              temppress1 = 0.0f;
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
              temppress2 = 0.0f;
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	67fb      	str	r3, [r7, #124]	; 0x7c
            for(int i = 1; i < table->pressures_count; i++)
 80018fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001900:	3301      	adds	r3, #1
 8001902:	64bb      	str	r3, [r7, #72]	; 0x48
 8001904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001906:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800190a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800190c:	429a      	cmp	r2, r3
 800190e:	d8c5      	bhi.n	800189c <CalculateIgnition+0x414>
            }
          }

          if(table->rotates_count == 1)
 8001910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001912:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001916:	2b01      	cmp	r3, #1
 8001918:	d10e      	bne.n	8001938 <CalculateIgnition+0x4b0>
          {
            rpmindex1 = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	66bb      	str	r3, [r7, #104]	; 0x68
            rpmindex2 = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	667b      	str	r3, [r7, #100]	; 0x64
            temprpm1 = table->rotates[0];
 8001922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001924:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            temprpm2 = table->rotates[0];
 800192c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800192e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001932:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001936:	e087      	b.n	8001a48 <CalculateIgnition+0x5c0>
          }
          else if(rpm <= table->rotates[0])
 8001938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800193a:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800193e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194a:	d814      	bhi.n	8001976 <CalculateIgnition+0x4ee>
          {
            rpmindex1 = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	66bb      	str	r3, [r7, #104]	; 0x68
            rpmindex2 = 1;
 8001950:	2301      	movs	r3, #1
 8001952:	667b      	str	r3, [r7, #100]	; 0x64
            temprpm1 = table->rotates[rpmindex1];
 8001954:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001956:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001958:	3352      	adds	r3, #82	; 0x52
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            temprpm2 = table->rotates[rpmindex2];
 8001964:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001968:	3352      	adds	r3, #82	; 0x52
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001974:	e068      	b.n	8001a48 <CalculateIgnition+0x5c0>
          }
          else if(rpm >= table->rotates[table->rotates_count - 1])
 8001976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001978:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800197c:	3b01      	subs	r3, #1
 800197e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001980:	3352      	adds	r3, #82	; 0x52
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800198e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001996:	db1a      	blt.n	80019ce <CalculateIgnition+0x546>
          {
            rpmindex1 = table->rotates_count - 2;
 8001998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800199a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800199e:	3b02      	subs	r3, #2
 80019a0:	66bb      	str	r3, [r7, #104]	; 0x68
            rpmindex2 = table->rotates_count - 1;
 80019a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019a4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80019a8:	3b01      	subs	r3, #1
 80019aa:	667b      	str	r3, [r7, #100]	; 0x64
            temprpm1 = table->rotates[rpmindex1];
 80019ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019b0:	3352      	adds	r3, #82	; 0x52
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            temprpm2 = table->rotates[rpmindex2];
 80019bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019c0:	3352      	adds	r3, #82	; 0x52
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80019cc:	e03c      	b.n	8001a48 <CalculateIgnition+0x5c0>
          }
          else
          {
            for(int i = 1; i < table->rotates_count; i++)
 80019ce:	2301      	movs	r3, #1
 80019d0:	647b      	str	r3, [r7, #68]	; 0x44
 80019d2:	e033      	b.n	8001a3c <CalculateIgnition+0x5b4>
            {
              temprpm1 = table->rotates[i-1];
 80019d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019da:	3352      	adds	r3, #82	; 0x52
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              temprpm2 = table->rotates[i];
 80019e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ea:	3352      	adds	r3, #82	; 0x52
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              if(temprpm1 < rpm && temprpm2 > rpm)
 80019f6:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80019fa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	d50e      	bpl.n	8001a26 <CalculateIgnition+0x59e>
 8001a08:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001a0c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001a10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	dd05      	ble.n	8001a26 <CalculateIgnition+0x59e>
              {
                rpmindex1 = i-1;
 8001a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	66bb      	str	r3, [r7, #104]	; 0x68
                rpmindex2 = i;
 8001a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a22:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 8001a24:	e010      	b.n	8001a48 <CalculateIgnition+0x5c0>
              }
              temprpm1 = 0.0f;
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              temprpm2 = 0.0f;
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            for(int i = 1; i < table->rotates_count; i++)
 8001a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a38:	3301      	adds	r3, #1
 8001a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a3e:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8001a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d8c5      	bhi.n	80019d4 <CalculateIgnition+0x54c>
            }
          }

          if((temprpm1 != 0.0f || temprpm2 != 0.0f) && (temppress1 != 0.0f || temppress2 != 0.0f))
 8001a48:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001a4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a54:	d107      	bne.n	8001a66 <CalculateIgnition+0x5de>
 8001a56:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001a5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a62:	f000 8126 	beq.w	8001cb2 <CalculateIgnition+0x82a>
 8001a66:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a72:	d107      	bne.n	8001a84 <CalculateIgnition+0x5fc>
 8001a74:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001a78:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a80:	f000 8117 	beq.w	8001cb2 <CalculateIgnition+0x82a>
          {
            tempign11 = table->ignitions[pressindex1][rpmindex1];
 8001a84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001a86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001a92:	4413      	add	r3, r2
 8001a94:	336a      	adds	r3, #106	; 0x6a
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
            tempign12 = table->ignitions[pressindex1][rpmindex2];
 8001a9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001aa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001aac:	4413      	add	r3, r2
 8001aae:	336a      	adds	r3, #106	; 0x6a
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
            tempign21 = table->ignitions[pressindex2][rpmindex1];
 8001ab8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001aba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001ac6:	4413      	add	r3, r2
 8001ac8:	336a      	adds	r3, #106	; 0x6a
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	623b      	str	r3, [r7, #32]
            tempign22 = table->ignitions[pressindex2][rpmindex2];
 8001ad2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001ad4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001ae0:	4413      	add	r3, r2
 8001ae2:	336a      	adds	r3, #106	; 0x6a
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	61fb      	str	r3, [r7, #28]

            if(temprpm2 != temprpm1 && temppress1 != temppress2)
 8001aec:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001af0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001af4:	eeb4 7a67 	vcmp.f32	s14, s15
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	d059      	beq.n	8001bb2 <CalculateIgnition+0x72a>
 8001afe:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001b02:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001b06:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0e:	d050      	beq.n	8001bb2 <CalculateIgnition+0x72a>
            {
              mult_rpm = (rpm - temprpm1) / (temprpm2 - temprpm1);
 8001b10:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b14:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001b18:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b1c:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001b20:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001b24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b2c:	edc7 7a05 	vstr	s15, [r7, #20]
              mult_press = (pressure - temppress1) / (temppress2 - temppress1);
 8001b30:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001b34:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b38:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b3c:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001b40:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b4c:	edc7 7a04 	vstr	s15, [r7, #16]

              angle_1 = (tempign12 - tempign11) * mult_rpm + tempign11;
 8001b50:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001b54:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001b58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b64:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b6c:	edc7 7a03 	vstr	s15, [r7, #12]
              angle_2 = (tempign22 - tempign21) * mult_rpm + tempign21;
 8001b70:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b74:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b84:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8c:	edc7 7a02 	vstr	s15, [r7, #8]

              angle = (angle_2 - angle_1) * mult_press + angle_1;
 8001b90:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bac:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8001bb0:	e07f      	b.n	8001cb2 <CalculateIgnition+0x82a>
            }
            else if(temprpm2 == temprpm1 && temppress1 != temppress2)
 8001bb2:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001bb6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001bba:	eeb4 7a67 	vcmp.f32	s14, s15
 8001bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc2:	d12c      	bne.n	8001c1e <CalculateIgnition+0x796>
 8001bc4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001bc8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001bcc:	eeb4 7a67 	vcmp.f32	s14, s15
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	d023      	beq.n	8001c1e <CalculateIgnition+0x796>
            {
              mult_press = (pressure - temppress1) / (temppress2 - temppress1);
 8001bd6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001bda:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001bde:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001be2:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001be6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001bea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bf2:	edc7 7a04 	vstr	s15, [r7, #16]
              mult_rpm = 1.0f;
 8001bf6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001bfa:	617b      	str	r3, [r7, #20]
              angle = (tempign21 - tempign11) * mult_press + tempign11;
 8001bfc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c08:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c10:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c18:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8001c1c:	e049      	b.n	8001cb2 <CalculateIgnition+0x82a>
            }
            else if(temprpm2 != temprpm1 && temppress1 == temppress2)
 8001c1e:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001c22:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001c26:	eeb4 7a67 	vcmp.f32	s14, s15
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	d02c      	beq.n	8001c8a <CalculateIgnition+0x802>
 8001c30:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001c34:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001c38:	eeb4 7a67 	vcmp.f32	s14, s15
 8001c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c40:	d123      	bne.n	8001c8a <CalculateIgnition+0x802>
            {
              mult_rpm = (rpm - temprpm1) / (temprpm2 - temprpm1);
 8001c42:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001c46:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001c4a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c4e:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001c52:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001c56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c5e:	edc7 7a05 	vstr	s15, [r7, #20]
              mult_press = 1.0f;
 8001c62:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001c66:	613b      	str	r3, [r7, #16]
              angle = (tempign12 - tempign11) * mult_rpm + tempign11;
 8001c68:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001c6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c74:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c84:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8001c88:	e013      	b.n	8001cb2 <CalculateIgnition+0x82a>
            }
            else angle = (tempign11 + tempign12 + tempign21 + tempign22) / 4.0f;
 8001c8a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c8e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c96:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ca2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ca6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001caa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cae:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

          }
        }
      }

      if(acis_config.params.isTemperatureEnabled)
 8001cb2:	4a96      	ldr	r2, [pc, #600]	; (8001f0c <CalculateIgnition+0xa84>)
 8001cb4:	f643 53b5 	movw	r3, #15797	; 0x3db5
 8001cb8:	4413      	add	r3, r2
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80fa 	beq.w	8001eb6 <CalculateIgnition+0xa2e>
      {
        if(table->temperatures_count == 1)
 8001cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cc4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d10b      	bne.n	8001ce4 <CalculateIgnition+0x85c>
        {
          angle += table->temperature_ignitions[0];
 8001ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cce:	f603 23dc 	addw	r3, r3, #2780	; 0xadc
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cde:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8001ce2:	e0e8      	b.n	8001eb6 <CalculateIgnition+0xa2e>
        }
        else if(table->temperatures_count >= 2)
 8001ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	f240 80e3 	bls.w	8001eb6 <CalculateIgnition+0xa2e>
        {
          if(temperature <= table->temperatures[0])
 8001cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cf2:	f603 23ac 	addw	r3, r3, #2732	; 0xaac
 8001cf6:	edd3 7a00 	vldr	s15, [r3]
 8001cfa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001cfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d06:	d80b      	bhi.n	8001d20 <CalculateIgnition+0x898>
            angle += table->temperature_ignitions[0];
 8001d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d0a:	f603 23dc 	addw	r3, r3, #2780	; 0xadc
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8001d1e:	e06c      	b.n	8001dfa <CalculateIgnition+0x972>
          else if(temperature >= table->temperatures[table->temperatures_count - 1])
 8001d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d22:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8001d26:	3b01      	subs	r3, #1
 8001d28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	3304      	adds	r3, #4
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001d3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	db1c      	blt.n	8001d80 <CalculateIgnition+0x8f8>
          {
            tempindex1 = table->temperatures_count-2;
 8001d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d48:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8001d4c:	3b02      	subs	r3, #2
 8001d4e:	65bb      	str	r3, [r7, #88]	; 0x58
            tempindex2 = table->temperatures_count-1;
 8001d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d52:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8001d56:	3b01      	subs	r3, #1
 8001d58:	657b      	str	r3, [r7, #84]	; 0x54
            temptemp1 = table->temperatures[tempindex1];
 8001d5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	3304      	adds	r3, #4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	67bb      	str	r3, [r7, #120]	; 0x78
            temptemp2 = table->temperatures[tempindex2];
 8001d6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	3304      	adds	r3, #4
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	677b      	str	r3, [r7, #116]	; 0x74
 8001d7e:	e03c      	b.n	8001dfa <CalculateIgnition+0x972>
          }
          else
          {
            for(int i = 1; i < table->temperatures_count; i++)
 8001d80:	2301      	movs	r3, #1
 8001d82:	643b      	str	r3, [r7, #64]	; 0x40
 8001d84:	e033      	b.n	8001dee <CalculateIgnition+0x966>
            {
              temptemp1 = table->temperatures[i-1];
 8001d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	3304      	adds	r3, #4
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	67bb      	str	r3, [r7, #120]	; 0x78
              temptemp2 = table->temperatures[i];
 8001d9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	3304      	adds	r3, #4
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	677b      	str	r3, [r7, #116]	; 0x74
              if(temptemp1 < temperature && temptemp2 > temperature)
 8001dac:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001db0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	d50e      	bpl.n	8001ddc <CalculateIgnition+0x954>
 8001dbe:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001dc2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	dd05      	ble.n	8001ddc <CalculateIgnition+0x954>
              {
                tempindex1 = i-1;
 8001dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	65bb      	str	r3, [r7, #88]	; 0x58
                tempindex2 = i;
 8001dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dd8:	657b      	str	r3, [r7, #84]	; 0x54
                break;
 8001dda:	e00e      	b.n	8001dfa <CalculateIgnition+0x972>
              }
              temptemp1 = 0.0f;
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	67bb      	str	r3, [r7, #120]	; 0x78
              temptemp2 = 0.0f;
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	677b      	str	r3, [r7, #116]	; 0x74
            for(int i = 1; i < table->temperatures_count; i++)
 8001de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dea:	3301      	adds	r3, #1
 8001dec:	643b      	str	r3, [r7, #64]	; 0x40
 8001dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001df0:	f8d3 2aa8 	ldr.w	r2, [r3, #2728]	; 0xaa8
 8001df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d8c5      	bhi.n	8001d86 <CalculateIgnition+0x8fe>
            }
          }
          if(temptemp1 != 0.0f || temptemp2 != 0.0f)
 8001dfa:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001dfe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e06:	d106      	bne.n	8001e16 <CalculateIgnition+0x98e>
 8001e08:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001e0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e14:	d04f      	beq.n	8001eb6 <CalculateIgnition+0xa2e>
          {
            if(temptemp1 != temptemp2)
 8001e16:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001e1a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001e1e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e26:	d036      	beq.n	8001e96 <CalculateIgnition+0xa0e>
            {
              tempign1 = table->temperature_ignitions[tempindex1];
 8001e28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e2c:	f203 23b6 	addw	r3, r3, #694	; 0x2b6
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	3304      	adds	r3, #4
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	673b      	str	r3, [r7, #112]	; 0x70
              tempign2 = table->temperature_ignitions[tempindex2];
 8001e3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3e:	f203 23b6 	addw	r3, r3, #694	; 0x2b6
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	3304      	adds	r3, #4
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
              mult = (temperature - temptemp1) / (temptemp2 - temptemp1);
 8001e4c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001e50:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001e54:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e58:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001e5c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001e60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e68:	edc7 7a01 	vstr	s15, [r7, #4]
              angle += (tempign2 - tempign1) * mult + tempign1;
 8001e6c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001e70:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001e74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e78:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e80:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e88:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e90:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8001e94:	e00f      	b.n	8001eb6 <CalculateIgnition+0xa2e>
            }
            else angle += (tempign1 + tempign2) / 2.0f;
 8001e96:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001e9a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ea6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eaa:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
          }
        }
      }
    }
    angle += table->octane_corrector;
 8001eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eb8:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ebc:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec4:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    if(angle > 60.0f) angle = 60.0f;
 8001ec8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001ecc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001f10 <CalculateIgnition+0xa88>
 8001ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed8:	dd02      	ble.n	8001ee0 <CalculateIgnition+0xa58>
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <CalculateIgnition+0xa8c>)
 8001edc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if(angle < -60.0f) angle = -60.0f;
 8001ee0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001ee4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001f18 <CalculateIgnition+0xa90>
 8001ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef0:	d502      	bpl.n	8001ef8 <CalculateIgnition+0xa70>
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <CalculateIgnition+0xa94>)
 8001ef4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  }
  return angle;
 8001ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001efc:	ee07 3a90 	vmov	s15, r3
}
 8001f00:	eeb0 0a67 	vmov.f32	s0, s15
 8001f04:	3790      	adds	r7, #144	; 0x90
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20011d24 	.word	0x20011d24
 8001f10:	42700000 	.word	0x42700000
 8001f14:	42700000 	.word	0x42700000
 8001f18:	c2700000 	.word	0xc2700000
 8001f1c:	c2700000 	.word	0xc2700000

08001f20 <LearnIgnition>:

static void LearnIgnition(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b0a2      	sub	sp, #136	; 0x88
 8001f24:	af00      	add	r7, sp, #0
  if(!hall_rotates)
 8001f26:	4b9c      	ldr	r3, [pc, #624]	; (8002198 <LearnIgnition+0x278>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 8640 	beq.w	8002bb2 <LearnIgnition+0xc92>
    return;

  float rpm = csps_getrpm();
 8001f32:	f004 fba5 	bl	8006680 <csps_getrpm>
 8001f36:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
  float angle_needed = hall_angle;
 8001f3a:	4b98      	ldr	r3, [pc, #608]	; (800219c <LearnIgnition+0x27c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	653b      	str	r3, [r7, #80]	; 0x50
  float pressure = map_getpressure();
 8001f40:	f005 fc26 	bl	8007790 <map_getpressure>
 8001f44:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
  uint8_t isIdle = HAL_GPIO_ReadPin(SENS_ACC_GPIO_Port, SENS_ACC_Pin) == GPIO_PIN_SET;
 8001f48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f4c:	4894      	ldr	r0, [pc, #592]	; (80021a0 <LearnIgnition+0x280>)
 8001f4e:	f008 ff1d 	bl	800ad8c <HAL_GPIO_ReadPin>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

  static uint32_t lastRotated = 0x80000000;
  static uint32_t lastAccepted = 0;
  static uint8_t isInitial = 1;
  uint32_t now = Delay_Tick;
 8001f62:	4b90      	ldr	r3, [pc, #576]	; (80021a4 <LearnIgnition+0x284>)
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	647b      	str	r3, [r7, #68]	; 0x44
  float angle = 0.0f;
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	643b      	str	r3, [r7, #64]	; 0x40
  float angle_1, angle_2;
  float mult, diff, mult_rpm, mult_press,
      temprpm1 = 0.0f,temprpm2 = 0.0f,
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      temppress1 = 0.0f,temppress2 = 0.0f,
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	67bb      	str	r3, [r7, #120]	; 0x78
      tempign1 = 0.0f, tempign2 = 0.0f,
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	63bb      	str	r3, [r7, #56]	; 0x38
      tempign11 = 0.0f, tempign12 = 0.0f,
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	633b      	str	r3, [r7, #48]	; 0x30
      tempign21 = 0.0f, tempign22 = 0.0f;
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t rpmindex1 = 0, rpmindex2 = 0,
 8001fae:	2300      	movs	r3, #0
 8001fb0:	677b      	str	r3, [r7, #116]	; 0x74
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	673b      	str	r3, [r7, #112]	; 0x70
      pressindex1 = 0, pressindex2 = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001fba:	2300      	movs	r3, #0
 8001fbc:	66bb      	str	r3, [r7, #104]	; 0x68

  sAcisIgnTable * table = NULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	667b      	str	r3, [r7, #100]	; 0x64
  int table_num = table_current;
 8001fc2:	4b79      	ldr	r3, [pc, #484]	; (80021a8 <LearnIgnition+0x288>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24

  if(table_num < acis_config.tables_count || table_num < TABLE_SETUPS_MAX)
 8001fca:	4b78      	ldr	r3, [pc, #480]	; (80021ac <LearnIgnition+0x28c>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d802      	bhi.n	8001fda <LearnIgnition+0xba>
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	dc08      	bgt.n	8001fec <LearnIgnition+0xcc>
    table = &acis_config.tables[table_num];
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	f640 726c 	movw	r2, #3948	; 0xf6c
 8001fe0:	fb02 f303 	mul.w	r3, r2, r3
 8001fe4:	4a71      	ldr	r2, [pc, #452]	; (80021ac <LearnIgnition+0x28c>)
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3304      	adds	r3, #4
 8001fea:	667b      	str	r3, [r7, #100]	; 0x64

  if(rpm > 100.0f)
 8001fec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ff0:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80021b0 <LearnIgnition+0x290>
 8001ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffc:	dd06      	ble.n	800200c <LearnIgnition+0xec>
  {
    isInitial = 0;
 8001ffe:	4b6d      	ldr	r3, [pc, #436]	; (80021b4 <LearnIgnition+0x294>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
    lastRotated = now;
 8002004:	4a6c      	ldr	r2, [pc, #432]	; (80021b8 <LearnIgnition+0x298>)
 8002006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e018      	b.n	800203e <LearnIgnition+0x11e>
  }
  else if(rpm < 10.0f)
 800200c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002010:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201c:	d50f      	bpl.n	800203e <LearnIgnition+0x11e>
  {
    lastAccepted = now;
 800201e:	4a67      	ldr	r2, [pc, #412]	; (80021bc <LearnIgnition+0x29c>)
 8002020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002022:	6013      	str	r3, [r2, #0]
    if(DelayDiff(now, lastRotated) < INITIAL_TIMEOUT)
 8002024:	4b64      	ldr	r3, [pc, #400]	; (80021b8 <LearnIgnition+0x298>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800202c:	f004 fc4c 	bl	80068c8 <DelayDiff>
 8002030:	4602      	mov	r2, r0
 8002032:	4b63      	ldr	r3, [pc, #396]	; (80021c0 <LearnIgnition+0x2a0>)
 8002034:	429a      	cmp	r2, r3
 8002036:	d802      	bhi.n	800203e <LearnIgnition+0x11e>
    {
      isInitial = 1;
 8002038:	4b5e      	ldr	r3, [pc, #376]	; (80021b4 <LearnIgnition+0x294>)
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
    }
  }

  float timediff = DelayDiff(now, lastAccepted);
 800203e:	4b5f      	ldr	r3, [pc, #380]	; (80021bc <LearnIgnition+0x29c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4619      	mov	r1, r3
 8002044:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002046:	f004 fc3f 	bl	80068c8 <DelayDiff>
 800204a:	ee07 0a90 	vmov	s15, r0
 800204e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002052:	edc7 7a08 	vstr	s15, [r7, #32]
  if(timediff < 10000)
 8002056:	edd7 7a08 	vldr	s15, [r7, #32]
 800205a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80021c4 <LearnIgnition+0x2a4>
 800205e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	f100 85a6 	bmi.w	8002bb6 <LearnIgnition+0xc96>
    return;

  float accept_coff = timediff / 10000000.0f;
 800206a:	ed97 7a08 	vldr	s14, [r7, #32]
 800206e:	eddf 6a56 	vldr	s13, [pc, #344]	; 80021c8 <LearnIgnition+0x2a8>
 8002072:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002076:	edc7 7a07 	vstr	s15, [r7, #28]
  float accept_coff_inv = 1.0f - accept_coff;
 800207a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800207e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002086:	edc7 7a06 	vstr	s15, [r7, #24]
  lastAccepted = now;
 800208a:	4a4c      	ldr	r2, [pc, #304]	; (80021bc <LearnIgnition+0x29c>)
 800208c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800208e:	6013      	str	r3, [r2, #0]

  if(table)
 8002090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8590 	beq.w	8002bb8 <LearnIgnition+0xc98>
  {
    if(!isInitial)
 8002098:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <LearnIgnition+0x294>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	f040 858b 	bne.w	8002bb8 <LearnIgnition+0xc98>
    {
      if(isIdle)
 80020a2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8148 	beq.w	800233c <LearnIgnition+0x41c>
      {
        if(table->idles_count == 0)
 80020ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d104      	bne.n	80020be <LearnIgnition+0x19e>
          angle = table->initial_ignition;
 80020b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	643b      	str	r3, [r7, #64]	; 0x40
 80020ba:	f000 bd7d 	b.w	8002bb8 <LearnIgnition+0xc98>
        else if(table->idles_count == 1)
 80020be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d104      	bne.n	80020d0 <LearnIgnition+0x1b0>
          angle = table->idle_ignitions[0];
 80020c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	643b      	str	r3, [r7, #64]	; 0x40
 80020cc:	f000 bd74 	b.w	8002bb8 <LearnIgnition+0xc98>
        else
        {
          if(rpm <= table->idle_rotates[0])
 80020d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020d2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80020d6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80020da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e2:	d803      	bhi.n	80020ec <LearnIgnition+0x1cc>
          {
            angle = table->idle_ignitions[0];
 80020e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	643b      	str	r3, [r7, #64]	; 0x40
 80020ea:	e07f      	b.n	80021ec <LearnIgnition+0x2cc>
          }
          else if(rpm >= table->idle_rotates[table->rotates_count-1])
 80020ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020ee:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80020f2:	3b01      	subs	r3, #1
 80020f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80020f6:	3320      	adds	r3, #32
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002104:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210c:	db18      	blt.n	8002140 <LearnIgnition+0x220>
          {
            rpmindex1 = table->idles_count-2;
 800210e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	3b02      	subs	r3, #2
 8002114:	677b      	str	r3, [r7, #116]	; 0x74
            rpmindex2 = table->idles_count-1;
 8002116:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	3b01      	subs	r3, #1
 800211c:	673b      	str	r3, [r7, #112]	; 0x70
            temprpm1 = table->idle_rotates[rpmindex1];
 800211e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002122:	3320      	adds	r3, #32
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            temprpm2 = table->idle_rotates[rpmindex2];
 800212e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002130:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002132:	3320      	adds	r3, #32
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800213e:	e055      	b.n	80021ec <LearnIgnition+0x2cc>
          }
          else
          {
            for(int i = 1; i < table->idles_count; i++)
 8002140:	2301      	movs	r3, #1
 8002142:	663b      	str	r3, [r7, #96]	; 0x60
 8002144:	e04d      	b.n	80021e2 <LearnIgnition+0x2c2>
            {
              temprpm1 = table->idle_rotates[i-1];
 8002146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002148:	3b01      	subs	r3, #1
 800214a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800214c:	3320      	adds	r3, #32
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              temprpm2 = table->idle_rotates[i];
 8002158:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800215a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800215c:	3320      	adds	r3, #32
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
              if(temprpm1 < rpm && temprpm2 > rpm)
 8002168:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800216c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002178:	d528      	bpl.n	80021cc <LearnIgnition+0x2ac>
 800217a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800217e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002182:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218a:	dd1f      	ble.n	80021cc <LearnIgnition+0x2ac>
              {
                rpmindex1 = i-1;
 800218c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800218e:	3b01      	subs	r3, #1
 8002190:	677b      	str	r3, [r7, #116]	; 0x74
                rpmindex2 = i;
 8002192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002194:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 8002196:	e029      	b.n	80021ec <LearnIgnition+0x2cc>
 8002198:	200114a0 	.word	0x200114a0
 800219c:	20011498 	.word	0x20011498
 80021a0:	40020800 	.word	0x40020800
 80021a4:	40000c00 	.word	0x40000c00
 80021a8:	200114b0 	.word	0x200114b0
 80021ac:	20011d24 	.word	0x20011d24
 80021b0:	42c80000 	.word	0x42c80000
 80021b4:	20010038 	.word	0x20010038
 80021b8:	2001003c 	.word	0x2001003c
 80021bc:	200114d4 	.word	0x200114d4
 80021c0:	0001869f 	.word	0x0001869f
 80021c4:	461c4000 	.word	0x461c4000
 80021c8:	4b189680 	.word	0x4b189680
              }
              temprpm1 = 0.0f;
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              temprpm2 = 0.0f;
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for(int i = 1; i < table->idles_count; i++)
 80021dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021de:	3301      	adds	r3, #1
 80021e0:	663b      	str	r3, [r7, #96]	; 0x60
 80021e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d8ac      	bhi.n	8002146 <LearnIgnition+0x226>
            }
          }
          if(temprpm1 != 0.0f || temprpm2 != 0.0f)
 80021ec:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80021f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f8:	d107      	bne.n	800220a <LearnIgnition+0x2ea>
 80021fa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80021fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002206:	f000 84d7 	beq.w	8002bb8 <LearnIgnition+0xc98>
          {
            tempign1 = table->idle_ignitions[rpmindex1];
 800220a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800220c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800220e:	3308      	adds	r3, #8
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	63fb      	str	r3, [r7, #60]	; 0x3c
            tempign2 = table->idle_ignitions[rpmindex2];
 8002218:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800221a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800221c:	3308      	adds	r3, #8
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	63bb      	str	r3, [r7, #56]	; 0x38
            if(tempign1 != tempign2)
 8002226:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800222a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800222e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002236:	d05f      	beq.n	80022f8 <LearnIgnition+0x3d8>
            {
              mult = (rpm - temprpm1) / (temprpm2 - temprpm1);
 8002238:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800223c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002240:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002244:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002248:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800224c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002254:	edc7 7a00 	vstr	s15, [r7]
              angle = (tempign2 - tempign1) * mult + tempign1;
 8002258:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800225c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002260:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002264:	edd7 7a00 	vldr	s15, [r7]
 8002268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002274:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 8002278:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800227c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002280:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002284:	edd7 6a07 	vldr	s13, [r7, #28]
 8002288:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800228c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002294:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
              diff = angle_needed - angle;
 8002298:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800229c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80022a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a4:	edc7 7a01 	vstr	s15, [r7, #4]

              table->idle_ignitions[rpmindex1] = tempign1 + diff * (1.0f - mult);
 80022a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022ac:	edd7 7a00 	vldr	s15, [r7]
 80022b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80022b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022bc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80022c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80022c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022c8:	3308      	adds	r3, #8
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	edc3 7a00 	vstr	s15, [r3]
              table->idle_ignitions[rpmindex2] = tempign2 + diff * mult;
 80022d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80022d6:	edd7 7a00 	vldr	s15, [r7]
 80022da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022de:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80022e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80022e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022ea:	3308      	adds	r3, #8
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	edc3 7a00 	vstr	s15, [r3]
 80022f4:	f000 bc60 	b.w	8002bb8 <LearnIgnition+0xc98>
            }
            else
            {
              angle = tempign1;
 80022f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022fa:	643b      	str	r3, [r7, #64]	; 0x40
              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 80022fc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002300:	edd7 7a06 	vldr	s15, [r7, #24]
 8002304:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002308:	edd7 6a07 	vldr	s13, [r7, #28]
 800230c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002318:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

              table->idle_ignitions[rpmindex1] = angle_needed;
 800231c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800231e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002320:	3308      	adds	r3, #8
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002328:	601a      	str	r2, [r3, #0]
              table->idle_ignitions[rpmindex2] = angle_needed;
 800232a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800232c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800232e:	3308      	adds	r3, #8
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f000 bc3e 	b.w	8002bb8 <LearnIgnition+0xc98>

        }
      }
      else
      {
        if(table->pressures_count != 0 && table->rotates_count != 0)
 800233c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800233e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 8438 	beq.w	8002bb8 <LearnIgnition+0xc98>
 8002348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800234a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8432 	beq.w	8002bb8 <LearnIgnition+0xc98>
        {
          if(table->pressures_count == 1)
 8002354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800235a:	2b01      	cmp	r3, #1
 800235c:	d10c      	bne.n	8002378 <LearnIgnition+0x458>
          {
            pressindex1 = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	66fb      	str	r3, [r7, #108]	; 0x6c
            pressindex2 = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	66bb      	str	r3, [r7, #104]	; 0x68
            temppress1 = table->pressures[0];
 8002366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002368:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800236c:	67fb      	str	r3, [r7, #124]	; 0x7c
            temppress2 = table->pressures[0];
 800236e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002370:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002374:	67bb      	str	r3, [r7, #120]	; 0x78
 8002376:	e086      	b.n	8002486 <LearnIgnition+0x566>
          }
          else if(pressure <= table->pressures[0])
 8002378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800237a:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 800237e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002382:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238a:	d814      	bhi.n	80023b6 <LearnIgnition+0x496>
          {
            pressindex1 = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	66fb      	str	r3, [r7, #108]	; 0x6c
            pressindex2 = 1;
 8002390:	2301      	movs	r3, #1
 8002392:	66bb      	str	r3, [r7, #104]	; 0x68
            temppress1 = table->pressures[pressindex1];
 8002394:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002398:	3338      	adds	r3, #56	; 0x38
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	3304      	adds	r3, #4
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	67fb      	str	r3, [r7, #124]	; 0x7c
            temppress2 = table->pressures[pressindex2];
 80023a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80023a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023a8:	3338      	adds	r3, #56	; 0x38
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	3304      	adds	r3, #4
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80023b4:	e067      	b.n	8002486 <LearnIgnition+0x566>
          }
          else if(pressure >= table->pressures[table->pressures_count - 1])
 80023b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023bc:	3b01      	subs	r3, #1
 80023be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80023c0:	3338      	adds	r3, #56	; 0x38
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	3304      	adds	r3, #4
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80023d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	db1a      	blt.n	8002410 <LearnIgnition+0x4f0>
          {
            pressindex1 = table->pressures_count - 2;
 80023da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e0:	3b02      	subs	r3, #2
 80023e2:	66fb      	str	r3, [r7, #108]	; 0x6c
            pressindex2 = table->pressures_count - 1;
 80023e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ea:	3b01      	subs	r3, #1
 80023ec:	66bb      	str	r3, [r7, #104]	; 0x68
            temppress1 = table->pressures[pressindex1];
 80023ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80023f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f2:	3338      	adds	r3, #56	; 0x38
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	3304      	adds	r3, #4
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	67fb      	str	r3, [r7, #124]	; 0x7c
            temppress2 = table->pressures[pressindex2];
 80023fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002402:	3338      	adds	r3, #56	; 0x38
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	3304      	adds	r3, #4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	67bb      	str	r3, [r7, #120]	; 0x78
 800240e:	e03a      	b.n	8002486 <LearnIgnition+0x566>
          }
          else
          {
            for(int i = 1; i < table->pressures_count; i++)
 8002410:	2301      	movs	r3, #1
 8002412:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002414:	e031      	b.n	800247a <LearnIgnition+0x55a>
            {
              temppress1 = table->pressures[i-1];
 8002416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002418:	3b01      	subs	r3, #1
 800241a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800241c:	3338      	adds	r3, #56	; 0x38
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	3304      	adds	r3, #4
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	67fb      	str	r3, [r7, #124]	; 0x7c
              temppress2 = table->pressures[i];
 8002428:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800242a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800242c:	3338      	adds	r3, #56	; 0x38
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	3304      	adds	r3, #4
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	67bb      	str	r3, [r7, #120]	; 0x78
              if(temppress1 < pressure && temppress2 > pressure)
 8002438:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800243c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002440:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002448:	d50e      	bpl.n	8002468 <LearnIgnition+0x548>
 800244a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800244e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245a:	dd05      	ble.n	8002468 <LearnIgnition+0x548>
              {
                pressindex1 = i-1;
 800245c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800245e:	3b01      	subs	r3, #1
 8002460:	66fb      	str	r3, [r7, #108]	; 0x6c
                pressindex2 = i;
 8002462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002464:	66bb      	str	r3, [r7, #104]	; 0x68
                break;
 8002466:	e00e      	b.n	8002486 <LearnIgnition+0x566>
              }
              temppress1 = 0.0f;
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	67fb      	str	r3, [r7, #124]	; 0x7c
              temppress2 = 0.0f;
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	67bb      	str	r3, [r7, #120]	; 0x78
            for(int i = 1; i < table->pressures_count; i++)
 8002474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002476:	3301      	adds	r3, #1
 8002478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800247a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800247c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002480:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002482:	429a      	cmp	r2, r3
 8002484:	d8c7      	bhi.n	8002416 <LearnIgnition+0x4f6>
            }
          }

          if(table->rotates_count == 1)
 8002486:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002488:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800248c:	2b01      	cmp	r3, #1
 800248e:	d10e      	bne.n	80024ae <LearnIgnition+0x58e>
          {
            rpmindex1 = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	677b      	str	r3, [r7, #116]	; 0x74
            rpmindex2 = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	673b      	str	r3, [r7, #112]	; 0x70
            temprpm1 = table->rotates[0];
 8002498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800249a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800249e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            temprpm2 = table->rotates[0];
 80024a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80024a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024ac:	e087      	b.n	80025be <LearnIgnition+0x69e>
          }
          else if(rpm <= table->rotates[0])
 80024ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024b0:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 80024b4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80024b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c0:	d814      	bhi.n	80024ec <LearnIgnition+0x5cc>
          {
            rpmindex1 = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	677b      	str	r3, [r7, #116]	; 0x74
            rpmindex2 = 1;
 80024c6:	2301      	movs	r3, #1
 80024c8:	673b      	str	r3, [r7, #112]	; 0x70
            temprpm1 = table->rotates[rpmindex1];
 80024ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80024cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ce:	3352      	adds	r3, #82	; 0x52
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            temprpm2 = table->rotates[rpmindex2];
 80024da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80024dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024de:	3352      	adds	r3, #82	; 0x52
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024ea:	e068      	b.n	80025be <LearnIgnition+0x69e>
          }
          else if(rpm >= table->rotates[table->rotates_count - 1])
 80024ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024ee:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80024f2:	3b01      	subs	r3, #1
 80024f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80024f6:	3352      	adds	r3, #82	; 0x52
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	edd3 7a00 	vldr	s15, [r3]
 8002500:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	db1a      	blt.n	8002544 <LearnIgnition+0x624>
          {
            rpmindex1 = table->rotates_count - 2;
 800250e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002510:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002514:	3b02      	subs	r3, #2
 8002516:	677b      	str	r3, [r7, #116]	; 0x74
            rpmindex2 = table->rotates_count - 1;
 8002518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800251a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800251e:	3b01      	subs	r3, #1
 8002520:	673b      	str	r3, [r7, #112]	; 0x70
            temprpm1 = table->rotates[rpmindex1];
 8002522:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002524:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002526:	3352      	adds	r3, #82	; 0x52
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            temprpm2 = table->rotates[rpmindex2];
 8002532:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002536:	3352      	adds	r3, #82	; 0x52
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002542:	e03c      	b.n	80025be <LearnIgnition+0x69e>
          }
          else
          {
            for(int i = 1; i < table->rotates_count; i++)
 8002544:	2301      	movs	r3, #1
 8002546:	65bb      	str	r3, [r7, #88]	; 0x58
 8002548:	e033      	b.n	80025b2 <LearnIgnition+0x692>
            {
              temprpm1 = table->rotates[i-1];
 800254a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800254c:	3b01      	subs	r3, #1
 800254e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002550:	3352      	adds	r3, #82	; 0x52
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              temprpm2 = table->rotates[i];
 800255c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800255e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002560:	3352      	adds	r3, #82	; 0x52
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
              if(temprpm1 < rpm && temprpm2 > rpm)
 800256c:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002570:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257c:	d50e      	bpl.n	800259c <LearnIgnition+0x67c>
 800257e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002582:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800258a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258e:	dd05      	ble.n	800259c <LearnIgnition+0x67c>
              {
                rpmindex1 = i-1;
 8002590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002592:	3b01      	subs	r3, #1
 8002594:	677b      	str	r3, [r7, #116]	; 0x74
                rpmindex2 = i;
 8002596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002598:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 800259a:	e010      	b.n	80025be <LearnIgnition+0x69e>
              }
              temprpm1 = 0.0f;
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              temprpm2 = 0.0f;
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for(int i = 1; i < table->rotates_count; i++)
 80025ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ae:	3301      	adds	r3, #1
 80025b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80025b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025b4:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80025b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d8c5      	bhi.n	800254a <LearnIgnition+0x62a>
            }
          }

          if((temprpm1 != 0.0f || temprpm2 != 0.0f) && (temppress1 != 0.0f || temppress2 != 0.0f))
 80025be:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80025c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ca:	d107      	bne.n	80025dc <LearnIgnition+0x6bc>
 80025cc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80025d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d8:	f000 82ee 	beq.w	8002bb8 <LearnIgnition+0xc98>
 80025dc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80025e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e8:	d107      	bne.n	80025fa <LearnIgnition+0x6da>
 80025ea:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80025ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	f000 82df 	beq.w	8002bb8 <LearnIgnition+0xc98>
          {
            tempign11 = table->ignitions[pressindex1][rpmindex1];
 80025fa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80025fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002608:	4413      	add	r3, r2
 800260a:	336a      	adds	r3, #106	; 0x6a
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	637b      	str	r3, [r7, #52]	; 0x34
            tempign12 = table->ignitions[pressindex1][rpmindex2];
 8002614:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002616:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002618:	4613      	mov	r3, r2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4413      	add	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002622:	4413      	add	r3, r2
 8002624:	336a      	adds	r3, #106	; 0x6a
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	633b      	str	r3, [r7, #48]	; 0x30
            tempign21 = table->ignitions[pressindex2][rpmindex1];
 800262e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002630:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002632:	4613      	mov	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800263c:	4413      	add	r3, r2
 800263e:	336a      	adds	r3, #106	; 0x6a
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
            tempign22 = table->ignitions[pressindex2][rpmindex2];
 8002648:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800264a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002656:	4413      	add	r3, r2
 8002658:	336a      	adds	r3, #106	; 0x6a
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28

            if(temprpm2 != temprpm1 && temppress1 != temppress2)
 8002662:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002666:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800266a:	eeb4 7a67 	vcmp.f32	s14, s15
 800266e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002672:	f000 80ef 	beq.w	8002854 <LearnIgnition+0x934>
 8002676:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800267a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800267e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002686:	f000 80e5 	beq.w	8002854 <LearnIgnition+0x934>
            {
              mult_rpm = (rpm - temprpm1) / (temprpm2 - temprpm1);
 800268a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800268e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002692:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002696:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800269a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800269e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026a6:	edc7 7a05 	vstr	s15, [r7, #20]
              mult_press = (pressure - temppress1) / (temppress2 - temppress1);
 80026aa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80026ae:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80026b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026b6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80026ba:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80026be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026c6:	edc7 7a04 	vstr	s15, [r7, #16]

              angle_1 = (tempign12 - tempign11) * mult_rpm + tempign11;
 80026ca:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80026ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80026d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80026da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026de:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80026e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026e6:	edc7 7a03 	vstr	s15, [r7, #12]
              angle_2 = (tempign22 - tempign21) * mult_rpm + tempign21;
 80026ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80026ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80026fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fe:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002706:	edc7 7a02 	vstr	s15, [r7, #8]

              angle = (angle_2 - angle_1) * mult_press + angle_1;
 800270a:	ed97 7a02 	vldr	s14, [r7, #8]
 800270e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002712:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002716:	edd7 7a04 	vldr	s15, [r7, #16]
 800271a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002726:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 800272a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800272e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002732:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002736:	edd7 6a07 	vldr	s13, [r7, #28]
 800273a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800273e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002746:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
              diff = angle_needed - angle;
 800274a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800274e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002756:	edc7 7a01 	vstr	s15, [r7, #4]

              table->ignitions[pressindex1][rpmindex1] = tempign11 + diff * (1.0f - mult_rpm) * (1.0f - mult_press);
 800275a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800275e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002762:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002766:	edd7 7a01 	vldr	s15, [r7, #4]
 800276a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800276e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002772:	edd7 7a04 	vldr	s15, [r7, #16]
 8002776:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800277a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800277e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002786:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002788:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002794:	4413      	add	r3, r2
 8002796:	336a      	adds	r3, #106	; 0x6a
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex1][rpmindex2] = tempign12 + diff * mult_rpm * (1.0f - mult_press);
 80027a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80027a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80027a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80027b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80027b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80027c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80027c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80027d2:	4413      	add	r3, r2
 80027d4:	336a      	adds	r3, #106	; 0x6a
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex1] = tempign21 + diff * (1.0f - mult_rpm) * mult_press;
 80027de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80027e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80027f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80027fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002802:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002804:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002810:	4413      	add	r3, r2
 8002812:	336a      	adds	r3, #106	; 0x6a
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex2] = tempign22 + diff * mult_rpm * mult_press;
 800281c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002820:	edd7 7a05 	vldr	s15, [r7, #20]
 8002824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002828:	edd7 7a04 	vldr	s15, [r7, #16]
 800282c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002830:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002838:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800283a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800283c:	4613      	mov	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002846:	4413      	add	r3, r2
 8002848:	336a      	adds	r3, #106	; 0x6a
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	edc3 7a00 	vstr	s15, [r3]
 8002852:	e1b1      	b.n	8002bb8 <LearnIgnition+0xc98>

            }
            else if(temprpm2 == temprpm1 && temppress1 != temppress2)
 8002854:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002858:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800285c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002864:	f040 80aa 	bne.w	80029bc <LearnIgnition+0xa9c>
 8002868:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800286c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002870:	eeb4 7a67 	vcmp.f32	s14, s15
 8002874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002878:	f000 80a0 	beq.w	80029bc <LearnIgnition+0xa9c>
            {
              mult_press = (pressure - temppress1) / (temppress2 - temppress1);
 800287c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002880:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002884:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002888:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800288c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002890:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002898:	edc7 7a04 	vstr	s15, [r7, #16]
              mult_rpm = 1.0f;
 800289c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80028a0:	617b      	str	r3, [r7, #20]
              angle = (tempign21 - tempign11) * mult_press + tempign11;
 80028a2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80028a6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80028b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80028ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028be:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 80028c2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80028c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80028ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80028d2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80028d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028de:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
              diff = angle_needed - angle;
 80028e2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80028e6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80028ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ee:	edc7 7a01 	vstr	s15, [r7, #4]

              table->ignitions[pressindex1][rpmindex1] = tempign11 + diff * (1.0f - mult_press);
 80028f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80028fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002902:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002906:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800290a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002910:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800291c:	4413      	add	r3, r2
 800291e:	336a      	adds	r3, #106	; 0x6a
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex1][rpmindex2] = tempign12 + diff * (1.0f - mult_press);
 8002928:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800292c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002930:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002934:	edd7 7a01 	vldr	s15, [r7, #4]
 8002938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800293c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002944:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002946:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002952:	4413      	add	r3, r2
 8002954:	336a      	adds	r3, #106	; 0x6a
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex1] = tempign21 + diff * mult_press;
 800295e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002962:	edd7 7a04 	vldr	s15, [r7, #16]
 8002966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800296a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800296e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002972:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002974:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002980:	4413      	add	r3, r2
 8002982:	336a      	adds	r3, #106	; 0x6a
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex2] = tempign22 + diff * mult_press;
 800298c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002990:	edd7 7a04 	vldr	s15, [r7, #16]
 8002994:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002998:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800299c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80029a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80029ae:	4413      	add	r3, r2
 80029b0:	336a      	adds	r3, #106	; 0x6a
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	edc3 7a00 	vstr	s15, [r3]
 80029ba:	e0fd      	b.n	8002bb8 <LearnIgnition+0xc98>
            }
            else if(temprpm2 != temprpm1 && temppress1 == temppress2)
 80029bc:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80029c0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80029c4:	eeb4 7a67 	vcmp.f32	s14, s15
 80029c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029cc:	f000 80aa 	beq.w	8002b24 <LearnIgnition+0xc04>
 80029d0:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80029d4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80029d8:	eeb4 7a67 	vcmp.f32	s14, s15
 80029dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e0:	f040 80a0 	bne.w	8002b24 <LearnIgnition+0xc04>
            {
              mult_rpm = (rpm - temprpm1) / (temprpm2 - temprpm1);
 80029e4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80029e8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80029ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029f0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80029f4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80029f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a00:	edc7 7a05 	vstr	s15, [r7, #20]
              mult_press = 1.0f;
 8002a04:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002a08:	613b      	str	r3, [r7, #16]
              angle = (tempign12 - tempign11) * mult_rpm + tempign11;
 8002a0a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002a0e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a16:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a26:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 8002a2a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002a2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a36:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a3a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a46:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
              diff = angle_needed - angle;
 8002a4a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002a4e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a56:	edc7 7a01 	vstr	s15, [r7, #4]

              table->ignitions[pressindex1][rpmindex1] = tempign11 + diff * (1.0f - mult_rpm);
 8002a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a66:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a6e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a76:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002a78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a84:	4413      	add	r3, r2
 8002a86:	336a      	adds	r3, #106	; 0x6a
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex1][rpmindex2] = tempign12 + diff * mult_rpm;
 8002a90:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a94:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a9c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002aa6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ab2:	4413      	add	r3, r2
 8002ab4:	336a      	adds	r3, #106	; 0x6a
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex1] = tempign21 + diff * (1.0f - mult_rpm);
 8002abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ac2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ac6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002aca:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ace:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ad2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ada:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002adc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ae8:	4413      	add	r3, r2
 8002aea:	336a      	adds	r3, #106	; 0x6a
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex2] = tempign22 + diff * mult_rpm;
 8002af4:	ed97 7a01 	vldr	s14, [r7, #4]
 8002af8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002afc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b08:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002b0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002b16:	4413      	add	r3, r2
 8002b18:	336a      	adds	r3, #106	; 0x6a
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	edc3 7a00 	vstr	s15, [r3]
 8002b22:	e049      	b.n	8002bb8 <LearnIgnition+0xc98>
            }
            else
            {
              angle = tempign11;
 8002b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b26:	643b      	str	r3, [r7, #64]	; 0x40
              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 8002b28:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002b2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b38:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b44:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

              table->ignitions[pressindex1][rpmindex1] = angle_needed;
 8002b48:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002b4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b56:	4413      	add	r3, r2
 8002b58:	336a      	adds	r3, #106	; 0x6a
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b60:	601a      	str	r2, [r3, #0]
              table->ignitions[pressindex1][rpmindex2] = angle_needed;
 8002b62:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002b64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002b70:	4413      	add	r3, r2
 8002b72:	336a      	adds	r3, #106	; 0x6a
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b7a:	601a      	str	r2, [r3, #0]
              table->ignitions[pressindex2][rpmindex1] = angle_needed;
 8002b7c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002b7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b80:	4613      	mov	r3, r2
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	4413      	add	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b8a:	4413      	add	r3, r2
 8002b8c:	336a      	adds	r3, #106	; 0x6a
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b94:	601a      	str	r2, [r3, #0]
              table->ignitions[pressindex2][rpmindex2] = angle_needed;
 8002b96:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002b98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ba4:	4413      	add	r3, r2
 8002ba6:	336a      	adds	r3, #106	; 0x6a
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	e002      	b.n	8002bb8 <LearnIgnition+0xc98>
    return;
 8002bb2:	bf00      	nop
 8002bb4:	e000      	b.n	8002bb8 <LearnIgnition+0xc98>
    return;
 8002bb6:	bf00      	nop
          }
        }
      }
    }
  }
}
 8002bb8:	3788      	adds	r7, #136	; 0x88
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop

08002bc0 <acis_loop_irq>:

inline void acis_loop_irq(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08e      	sub	sp, #56	; 0x38
 8002bc4:	af00      	add	r7, sp, #0
  TIME22 = Delay_Tick;
 8002bc6:	4b88      	ldr	r3, [pc, #544]	; (8002de8 <acis_loop_irq+0x228>)
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	4a88      	ldr	r2, [pc, #544]	; (8002dec <acis_loop_irq+0x22c>)
 8002bcc:	6013      	str	r3, [r2, #0]
  static uint8_t saturated[2] = { 1,1 };
  static uint8_t ignited[2] = { 1,1 };
  static uint8_t start_ign_state[2] = {0,0};
  static uint8_t start_ign_allow[2] = {0,0};
  static uint32_t start_ign_last[2] = {0,0};
  uint32_t now = Delay_Tick;
 8002bce:	4b86      	ldr	r3, [pc, #536]	; (8002de8 <acis_loop_irq+0x228>)
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  float angle[2] = { 0.0f, 0.0f };
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
  float anglesbeforeignite[2];
  uint8_t isIgn = HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_RESET;
 8002be0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002be4:	4882      	ldr	r0, [pc, #520]	; (8002df0 <acis_loop_irq+0x230>)
 8002be6:	f008 f8d1 	bl	800ad8c <HAL_GPIO_ReadPin>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  angle[0] = csps_getangle14();
 8002bfa:	f003 fc4b 	bl	8006494 <csps_getangle14>
 8002bfe:	eef0 7a40 	vmov.f32	s15, s0
 8002c02:	edc7 7a02 	vstr	s15, [r7, #8]
  angle[1] = csps_getangle23from14(angle[0]);
 8002c06:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0e:	f003 fd03 	bl	8006618 <csps_getangle23from14>
 8002c12:	eef0 7a40 	vmov.f32	s15, s0
 8002c16:	edc7 7a03 	vstr	s15, [r7, #12]

  if(!isIgn)
 8002c1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8273 	beq.w	800310a <acis_loop_irq+0x54a>
    return;

  if(acis_config.params.isEconOutAsStrobe)
 8002c24:	4a73      	ldr	r2, [pc, #460]	; (8002df4 <acis_loop_irq+0x234>)
 8002c26:	f643 53bc 	movw	r3, #15804	; 0x3dbc
 8002c2a:	4413      	add	r3, r2
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d021      	beq.n	8002c76 <acis_loop_irq+0xb6>
  {
    if(csps_isrotates() && angle[0] > -1.0f && angle[0] < 1.0f)
 8002c32:	f003 fd5d 	bl	80066f0 <csps_isrotates>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d017      	beq.n	8002c6c <acis_loop_irq+0xac>
 8002c3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c40:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4c:	dd0e      	ble.n	8002c6c <acis_loop_irq+0xac>
 8002c4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5e:	d505      	bpl.n	8002c6c <acis_loop_irq+0xac>
    {
      HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_SET);
 8002c60:	2201      	movs	r2, #1
 8002c62:	2104      	movs	r1, #4
 8002c64:	4864      	ldr	r0, [pc, #400]	; (8002df8 <acis_loop_irq+0x238>)
 8002c66:	f008 f8a9 	bl	800adbc <HAL_GPIO_WritePin>
 8002c6a:	e004      	b.n	8002c76 <acis_loop_irq+0xb6>
    }
    else
    {
      HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_RESET);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2104      	movs	r1, #4
 8002c70:	4861      	ldr	r0, [pc, #388]	; (8002df8 <acis_loop_irq+0x238>)
 8002c72:	f008 f8a3 	bl	800adbc <HAL_GPIO_WritePin>
    }
  }

  if(acis_config.params.isIgnitionByHall)
 8002c76:	4a5f      	ldr	r2, [pc, #380]	; (8002df4 <acis_loop_irq+0x234>)
 8002c78:	f643 53b8 	movw	r3, #15800	; 0x3db8
 8002c7c:	4413      	add	r3, r2
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f040 8244 	bne.w	800310e <acis_loop_irq+0x54e>
    return;

  float rpm = csps_getrpm();
 8002c86:	f003 fcfb 	bl	8006680 <csps_getrpm>
 8002c8a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  float uspa = csps_getuspa();
 8002c8e:	f003 fd13 	bl	80066b8 <csps_getuspa>
 8002c92:	ed87 0a08 	vstr	s0, [r7, #32]
  float period = csps_getperiod();
 8002c96:	f003 fd1d 	bl	80066d4 <csps_getperiod>
 8002c9a:	ed87 0a07 	vstr	s0, [r7, #28]
  float time_sat = IGN_SATURATION;
 8002c9e:	4b57      	ldr	r3, [pc, #348]	; (8002dfc <acis_loop_irq+0x23c>)
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34

  if(rpm < 400) time_sat = 7000;
 8002ca2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ca6:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8002e00 <acis_loop_irq+0x240>
 8002caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb2:	d502      	bpl.n	8002cba <acis_loop_irq+0xfa>
 8002cb4:	4b53      	ldr	r3, [pc, #332]	; (8002e04 <acis_loop_irq+0x244>)
 8002cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb8:	e02e      	b.n	8002d18 <acis_loop_irq+0x158>
  else if(rpm < 700) time_sat = 6000;
 8002cba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cbe:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8002e08 <acis_loop_irq+0x248>
 8002cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cca:	d502      	bpl.n	8002cd2 <acis_loop_irq+0x112>
 8002ccc:	4b4f      	ldr	r3, [pc, #316]	; (8002e0c <acis_loop_irq+0x24c>)
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34
 8002cd0:	e022      	b.n	8002d18 <acis_loop_irq+0x158>
  else if(rpm < 1000) time_sat = 5000;
 8002cd2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cd6:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002e10 <acis_loop_irq+0x250>
 8002cda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce2:	d502      	bpl.n	8002cea <acis_loop_irq+0x12a>
 8002ce4:	4b4b      	ldr	r3, [pc, #300]	; (8002e14 <acis_loop_irq+0x254>)
 8002ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ce8:	e016      	b.n	8002d18 <acis_loop_irq+0x158>
  else if(rpm < 1300) time_sat = 4000;
 8002cea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cee:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002e18 <acis_loop_irq+0x258>
 8002cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfa:	d502      	bpl.n	8002d02 <acis_loop_irq+0x142>
 8002cfc:	4b47      	ldr	r3, [pc, #284]	; (8002e1c <acis_loop_irq+0x25c>)
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8002d00:	e00a      	b.n	8002d18 <acis_loop_irq+0x158>
  else if(rpm < 1500) time_sat = 3000;
 8002d02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d06:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002e20 <acis_loop_irq+0x260>
 8002d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d12:	d501      	bpl.n	8002d18 <acis_loop_irq+0x158>
 8002d14:	4b43      	ldr	r3, [pc, #268]	; (8002e24 <acis_loop_irq+0x264>)
 8002d16:	637b      	str	r3, [r7, #52]	; 0x34
  float ignite = 0;
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]

  float found = csps_isfound();
 8002d1e:	f003 fcf3 	bl	8006708 <csps_isfound>
 8002d22:	4603      	mov	r3, r0
 8002d24:	ee07 3a90 	vmov	s15, r3
 8002d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2c:	edc7 7a05 	vstr	s15, [r7, #20]


  if(found)
 8002d30:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3c:	f000 81d9 	beq.w	80030f2 <acis_loop_irq+0x532>
  {
    if(period < IGN_SATURATION + IGN_PULSE)
 8002d40:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d44:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002e28 <acis_loop_irq+0x268>
 8002d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d50:	d507      	bpl.n	8002d62 <acis_loop_irq+0x1a2>
    {
      time_sat = period * ((float)IGN_SATURATION / (float)(IGN_SATURATION + IGN_PULSE));
 8002d52:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d56:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002e2c <acis_loop_irq+0x26c>
 8002d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    }

    float saturate = time_sat / uspa;
 8002d62:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002d66:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d6e:	edc7 7a04 	vstr	s15, [r7, #16]

    ignite = angle_ignite;
 8002d72:	4b2f      	ldr	r3, [pc, #188]	; (8002e30 <acis_loop_irq+0x270>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	61bb      	str	r3, [r7, #24]
    angle_saturate = saturate;
 8002d78:	4a2e      	ldr	r2, [pc, #184]	; (8002e34 <acis_loop_irq+0x274>)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	6013      	str	r3, [r2, #0]

    angle_time = ignite * uspa;
 8002d7e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d82:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8a:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <acis_loop_irq+0x278>)
 8002d8c:	edc3 7a00 	vstr	s15, [r3]

    for(int i = 0; i < 2; i++)
 8002d90:	2300      	movs	r3, #0
 8002d92:	633b      	str	r3, [r7, #48]	; 0x30
 8002d94:	e1a8      	b.n	80030e8 <acis_loop_irq+0x528>
    {

      if(angle[i] < -ignite)
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d9e:	4413      	add	r3, r2
 8002da0:	3b30      	subs	r3, #48	; 0x30
 8002da2:	ed93 7a00 	vldr	s14, [r3]
 8002da6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002daa:	eef1 7a67 	vneg.f32	s15, s15
 8002dae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db6:	d543      	bpl.n	8002e40 <acis_loop_irq+0x280>
        anglesbeforeignite[i] = -angle[i] - ignite;
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3b30      	subs	r3, #48	; 0x30
 8002dc4:	edd3 7a00 	vldr	s15, [r3]
 8002dc8:	eeb1 7a67 	vneg.f32	s14, s15
 8002dcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ddc:	4413      	add	r3, r2
 8002dde:	3b38      	subs	r3, #56	; 0x38
 8002de0:	edc3 7a00 	vstr	s15, [r3]
 8002de4:	e044      	b.n	8002e70 <acis_loop_irq+0x2b0>
 8002de6:	bf00      	nop
 8002de8:	40000c00 	.word	0x40000c00
 8002dec:	200114cc 	.word	0x200114cc
 8002df0:	40020000 	.word	0x40020000
 8002df4:	20011d24 	.word	0x20011d24
 8002df8:	40020c00 	.word	0x40020c00
 8002dfc:	44e10000 	.word	0x44e10000
 8002e00:	43c80000 	.word	0x43c80000
 8002e04:	45dac000 	.word	0x45dac000
 8002e08:	442f0000 	.word	0x442f0000
 8002e0c:	45bb8000 	.word	0x45bb8000
 8002e10:	447a0000 	.word	0x447a0000
 8002e14:	459c4000 	.word	0x459c4000
 8002e18:	44a28000 	.word	0x44a28000
 8002e1c:	457a0000 	.word	0x457a0000
 8002e20:	44bb8000 	.word	0x44bb8000
 8002e24:	453b8000 	.word	0x453b8000
 8002e28:	45866000 	.word	0x45866000
 8002e2c:	3ed65359 	.word	0x3ed65359
 8002e30:	200114a8 	.word	0x200114a8
 8002e34:	200114ac 	.word	0x200114ac
 8002e38:	200114a4 	.word	0x200114a4
 8002e3c:	43b40000 	.word	0x43b40000
      else
        anglesbeforeignite[i] = 360.0f - angle[i] - ignite;
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e48:	4413      	add	r3, r2
 8002e4a:	3b30      	subs	r3, #48	; 0x30
 8002e4c:	edd3 7a00 	vldr	s15, [r3]
 8002e50:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8002e3c <acis_loop_irq+0x27c>
 8002e54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e58:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e68:	4413      	add	r3, r2
 8002e6a:	3b38      	subs	r3, #56	; 0x38
 8002e6c:	edc3 7a00 	vstr	s15, [r3]

      if(anglesbeforeignite[i] - oldanglesbeforeignite[i] > 0.0f && anglesbeforeignite[i] - oldanglesbeforeignite[i] < 180.0f)
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e78:	4413      	add	r3, r2
 8002e7a:	3b38      	subs	r3, #56	; 0x38
 8002e7c:	ed93 7a00 	vldr	s14, [r3]
 8002e80:	4aa5      	ldr	r2, [pc, #660]	; (8003118 <acis_loop_irq+0x558>)
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	edd3 7a00 	vldr	s15, [r3]
 8002e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e98:	dd22      	ble.n	8002ee0 <acis_loop_irq+0x320>
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3b38      	subs	r3, #56	; 0x38
 8002ea6:	ed93 7a00 	vldr	s14, [r3]
 8002eaa:	4a9b      	ldr	r2, [pc, #620]	; (8003118 <acis_loop_irq+0x558>)
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	edd3 7a00 	vldr	s15, [r3]
 8002eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eba:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800311c <acis_loop_irq+0x55c>
 8002ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec6:	d50b      	bpl.n	8002ee0 <acis_loop_irq+0x320>
        anglesbeforeignite[i] = oldanglesbeforeignite[i];
 8002ec8:	4a93      	ldr	r2, [pc, #588]	; (8003118 <acis_loop_irq+0x558>)
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002eda:	440b      	add	r3, r1
 8002edc:	3b38      	subs	r3, #56	; 0x38
 8002ede:	601a      	str	r2, [r3, #0]

      if(rpm < 350.0f && start_ign_allow[i] && angle[i] < 80.0f)
 8002ee0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ee4:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8003120 <acis_loop_irq+0x560>
 8002ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef0:	d558      	bpl.n	8002fa4 <acis_loop_irq+0x3e4>
 8002ef2:	4a8c      	ldr	r2, [pc, #560]	; (8003124 <acis_loop_irq+0x564>)
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	4413      	add	r3, r2
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d052      	beq.n	8002fa4 <acis_loop_irq+0x3e4>
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f06:	4413      	add	r3, r2
 8002f08:	3b30      	subs	r3, #48	; 0x30
 8002f0a:	edd3 7a00 	vldr	s15, [r3]
 8002f0e:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8003128 <acis_loop_irq+0x568>
 8002f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1a:	d543      	bpl.n	8002fa4 <acis_loop_irq+0x3e4>
      {
        if(start_ign_state[i] && DelayDiff(now, start_ign_last[i]) > 4000)
 8002f1c:	4a83      	ldr	r2, [pc, #524]	; (800312c <acis_loop_irq+0x56c>)
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	4413      	add	r3, r2
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01b      	beq.n	8002f60 <acis_loop_irq+0x3a0>
 8002f28:	4a81      	ldr	r2, [pc, #516]	; (8003130 <acis_loop_irq+0x570>)
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f30:	4619      	mov	r1, r3
 8002f32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f34:	f003 fcc8 	bl	80068c8 <DelayDiff>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002f3e:	d90f      	bls.n	8002f60 <acis_loop_irq+0x3a0>
        {
          acis_ignite(i);
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd fffb 	bl	8000f40 <acis_ignite>
          start_ign_state[i] = 0;
 8002f4a:	4a78      	ldr	r2, [pc, #480]	; (800312c <acis_loop_irq+0x56c>)
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	4413      	add	r3, r2
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
          start_ign_last[i] = now;
 8002f54:	4976      	ldr	r1, [pc, #472]	; (8003130 <acis_loop_irq+0x570>)
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if(start_ign_state[i] && DelayDiff(now, start_ign_last[i]) > 4000)
 8002f5e:	e037      	b.n	8002fd0 <acis_loop_irq+0x410>
        }
        else if(!start_ign_state[i] && DelayDiff(now, start_ign_last[i]) > 1000)
 8002f60:	4a72      	ldr	r2, [pc, #456]	; (800312c <acis_loop_irq+0x56c>)
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	4413      	add	r3, r2
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d131      	bne.n	8002fd0 <acis_loop_irq+0x410>
 8002f6c:	4a70      	ldr	r2, [pc, #448]	; (8003130 <acis_loop_irq+0x570>)
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f74:	4619      	mov	r1, r3
 8002f76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f78:	f003 fca6 	bl	80068c8 <DelayDiff>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f82:	d925      	bls.n	8002fd0 <acis_loop_irq+0x410>
        {
          acis_saturate(i);
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd ffed 	bl	8000f68 <acis_saturate>
          start_ign_state[i] = 1;
 8002f8e:	4a67      	ldr	r2, [pc, #412]	; (800312c <acis_loop_irq+0x56c>)
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	4413      	add	r3, r2
 8002f94:	2201      	movs	r2, #1
 8002f96:	701a      	strb	r2, [r3, #0]
          start_ign_last[i] = now;
 8002f98:	4965      	ldr	r1, [pc, #404]	; (8003130 <acis_loop_irq+0x570>)
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if(start_ign_state[i] && DelayDiff(now, start_ign_last[i]) > 4000)
 8002fa2:	e015      	b.n	8002fd0 <acis_loop_irq+0x410>
        }
      }
      else
      {
        if(start_ign_state[i])
 8002fa4:	4a61      	ldr	r2, [pc, #388]	; (800312c <acis_loop_irq+0x56c>)
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa8:	4413      	add	r3, r2
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d009      	beq.n	8002fc4 <acis_loop_irq+0x404>
        {
          start_ign_state[i] = 0;
 8002fb0:	4a5e      	ldr	r2, [pc, #376]	; (800312c <acis_loop_irq+0x56c>)
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	4413      	add	r3, r2
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
          acis_ignite(i);
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd ffbe 	bl	8000f40 <acis_ignite>
        }
        start_ign_allow[i] = 0;
 8002fc4:	4a57      	ldr	r2, [pc, #348]	; (8003124 <acis_loop_irq+0x564>)
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	4413      	add	r3, r2
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
 8002fce:	e000      	b.n	8002fd2 <acis_loop_irq+0x412>
        if(start_ign_state[i] && DelayDiff(now, start_ign_last[i]) > 4000)
 8002fd0:	bf00      	nop
      }

      if(anglesbeforeignite[i] - saturate < 0.0f)
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b38      	subs	r3, #56	; 0x38
 8002fde:	ed93 7a00 	vldr	s14, [r3]
 8002fe2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff2:	d51a      	bpl.n	800302a <acis_loop_irq+0x46a>
      {
        if(!saturated[i] && !ignited[i])
 8002ff4:	4a4f      	ldr	r2, [pc, #316]	; (8003134 <acis_loop_irq+0x574>)
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	4413      	add	r3, r2
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d114      	bne.n	800302a <acis_loop_irq+0x46a>
 8003000:	4a4d      	ldr	r2, [pc, #308]	; (8003138 <acis_loop_irq+0x578>)
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	4413      	add	r3, r2
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10e      	bne.n	800302a <acis_loop_irq+0x46a>
        {
          saturated[i] = 1;
 800300c:	4a49      	ldr	r2, [pc, #292]	; (8003134 <acis_loop_irq+0x574>)
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	4413      	add	r3, r2
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]
          start_ign_allow[i] = 0;
 8003016:	4a43      	ldr	r2, [pc, #268]	; (8003124 <acis_loop_irq+0x564>)
 8003018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301a:	4413      	add	r3, r2
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
          acis_saturate(i);
 8003020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003022:	b2db      	uxtb	r3, r3
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd ff9f 	bl	8000f68 <acis_saturate>
        }
      }

      if(oldanglesbeforeignite[i] - anglesbeforeignite[i] < -1.0f)
 800302a:	4a3b      	ldr	r2, [pc, #236]	; (8003118 <acis_loop_irq+0x558>)
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	ed93 7a00 	vldr	s14, [r3]
 8003036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800303e:	4413      	add	r3, r2
 8003040:	3b38      	subs	r3, #56	; 0x38
 8003042:	edd3 7a00 	vldr	s15, [r3]
 8003046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800304a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800304e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	d533      	bpl.n	80030c0 <acis_loop_irq+0x500>
      {
        if(!ignited[i] && saturated[i])
 8003058:	4a37      	ldr	r2, [pc, #220]	; (8003138 <acis_loop_irq+0x578>)
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	4413      	add	r3, r2
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d132      	bne.n	80030ca <acis_loop_irq+0x50a>
 8003064:	4a33      	ldr	r2, [pc, #204]	; (8003134 <acis_loop_irq+0x574>)
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	4413      	add	r3, r2
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d02c      	beq.n	80030ca <acis_loop_irq+0x50a>
        {
          ignited[i] = 1;
 8003070:	4a31      	ldr	r2, [pc, #196]	; (8003138 <acis_loop_irq+0x578>)
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	4413      	add	r3, r2
 8003076:	2201      	movs	r2, #1
 8003078:	701a      	strb	r2, [r3, #0]
          saturated[i] = 0;
 800307a:	4a2e      	ldr	r2, [pc, #184]	; (8003134 <acis_loop_irq+0x574>)
 800307c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307e:	4413      	add	r3, r2
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
          acis_ignite(i);
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	b2db      	uxtb	r3, r3
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd ff59 	bl	8000f40 <acis_ignite>
          if(rpm < 350.0f)
 800308e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003092:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003120 <acis_loop_irq+0x560>
 8003096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800309a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309e:	d514      	bpl.n	80030ca <acis_loop_irq+0x50a>
          {
            start_ign_last[i] = now;
 80030a0:	4923      	ldr	r1, [pc, #140]	; (8003130 <acis_loop_irq+0x570>)
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            start_ign_state[i] = 0;
 80030aa:	4a20      	ldr	r2, [pc, #128]	; (800312c <acis_loop_irq+0x56c>)
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	4413      	add	r3, r2
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
            start_ign_allow[i] = 1;
 80030b4:	4a1b      	ldr	r2, [pc, #108]	; (8003124 <acis_loop_irq+0x564>)
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	4413      	add	r3, r2
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	e004      	b.n	80030ca <acis_loop_irq+0x50a>
          }
        }
      }
      else ignited[i] = 0;
 80030c0:	4a1d      	ldr	r2, [pc, #116]	; (8003138 <acis_loop_irq+0x578>)
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	4413      	add	r3, r2
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]

      oldanglesbeforeignite[i] = anglesbeforeignite[i];
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030d2:	4413      	add	r3, r2
 80030d4:	3b38      	subs	r3, #56	; 0x38
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	490f      	ldr	r1, [pc, #60]	; (8003118 <acis_loop_irq+0x558>)
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 2; i++)
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	3301      	adds	r3, #1
 80030e6:	633b      	str	r3, [r7, #48]	; 0x30
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	f77f ae53 	ble.w	8002d96 <acis_loop_irq+0x1d6>
 80030f0:	e003      	b.n	80030fa <acis_loop_irq+0x53a>
    }
  }
  else
  {
    angle_ignite = 0;
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <acis_loop_irq+0x57c>)
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
  }
  TIME2 = Delay_Tick - TIME22;
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <acis_loop_irq+0x580>)
 80030fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030fe:	4b11      	ldr	r3, [pc, #68]	; (8003144 <acis_loop_irq+0x584>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	4a10      	ldr	r2, [pc, #64]	; (8003148 <acis_loop_irq+0x588>)
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	e002      	b.n	8003110 <acis_loop_irq+0x550>
    return;
 800310a:	bf00      	nop
 800310c:	e000      	b.n	8003110 <acis_loop_irq+0x550>
    return;
 800310e:	bf00      	nop
}
 8003110:	3738      	adds	r7, #56	; 0x38
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200114d8 	.word	0x200114d8
 800311c:	43340000 	.word	0x43340000
 8003120:	43af0000 	.word	0x43af0000
 8003124:	200114e0 	.word	0x200114e0
 8003128:	42a00000 	.word	0x42a00000
 800312c:	200114e4 	.word	0x200114e4
 8003130:	200114e8 	.word	0x200114e8
 8003134:	20010040 	.word	0x20010040
 8003138:	20010044 	.word	0x20010044
 800313c:	200114a8 	.word	0x200114a8
 8003140:	40000c00 	.word	0x40000c00
 8003144:	200114cc 	.word	0x200114cc
 8003148:	200114c0 	.word	0x200114c0

0800314c <acis_loop>:

inline void acis_loop(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
  TIME33 = Delay_Tick;
 8003152:	4b8a      	ldr	r3, [pc, #552]	; (800337c <acis_loop+0x230>)
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	4a8a      	ldr	r2, [pc, #552]	; (8003380 <acis_loop+0x234>)
 8003158:	6013      	str	r3, [r2, #0]
  static uint8_t sending = 0;
  static uint8_t destination = 0;
  static uint8_t size = 0;
  static uint32_t rpm_last = 0;
  static eValveChannel valve_old = ValveAllClosed;
  uint32_t now = Delay_Tick;
 800315a:	4b88      	ldr	r3, [pc, #544]	; (800337c <acis_loop+0x230>)
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	60bb      	str	r3, [r7, #8]
  float rpm = csps_getrpm();
 8003160:	f003 fa8e 	bl	8006680 <csps_getrpm>
 8003164:	ed87 0a01 	vstr	s0, [r7, #4]
  uint8_t isIdle = HAL_GPIO_ReadPin(SENS_ACC_GPIO_Port,SENS_ACC_Pin) == GPIO_PIN_SET;
 8003168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800316c:	4885      	ldr	r0, [pc, #532]	; (8003384 <acis_loop+0x238>)
 800316e:	f007 fe0d 	bl	800ad8c <HAL_GPIO_ReadPin>
 8003172:	4603      	mov	r3, r0
 8003174:	2b01      	cmp	r3, #1
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	70fb      	strb	r3, [r7, #3]
  uint8_t isIgn = HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_RESET;
 8003180:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003184:	4880      	ldr	r0, [pc, #512]	; (8003388 <acis_loop+0x23c>)
 8003186:	f007 fe01 	bl	800ad8c <HAL_GPIO_ReadPin>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	70bb      	strb	r3, [r7, #2]
  uint8_t * pnt;
  uint8_t status;
  uint8_t table = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	74fb      	strb	r3, [r7, #19]
  uint8_t fuelsw = switch_fuel_pos;
 800319c:	4b7b      	ldr	r3, [pc, #492]	; (800338c <acis_loop+0x240>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	b25b      	sxtb	r3, r3
 80031a2:	707b      	strb	r3, [r7, #1]

  if(rpm_last == 0 || rpm > 10.0f) rpm_last = now;
 80031a4:	4b7a      	ldr	r3, [pc, #488]	; (8003390 <acis_loop+0x244>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <acis_loop+0x72>
 80031ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80031b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031bc:	dd02      	ble.n	80031c4 <acis_loop+0x78>
 80031be:	4a74      	ldr	r2, [pc, #464]	; (8003390 <acis_loop+0x244>)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	6013      	str	r3, [r2, #0]

  do
  {
    if(!sending && protGetSize(&fifoSendingQueue) > 4)
 80031c4:	4b73      	ldr	r3, [pc, #460]	; (8003394 <acis_loop+0x248>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d133      	bne.n	8003234 <acis_loop+0xe8>
 80031cc:	4872      	ldr	r0, [pc, #456]	; (8003398 <acis_loop+0x24c>)
 80031ce:	f006 f931 	bl	8009434 <protGetSize>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d92d      	bls.n	8003234 <acis_loop+0xe8>
    {
      protLook(&fifoSendingQueue,1,&size);
 80031d8:	4a70      	ldr	r2, [pc, #448]	; (800339c <acis_loop+0x250>)
 80031da:	2101      	movs	r1, #1
 80031dc:	486e      	ldr	r0, [pc, #440]	; (8003398 <acis_loop+0x24c>)
 80031de:	f006 fa41 	bl	8009664 <protLook>
      protLook(&fifoSendingQueue,2,&destination);
 80031e2:	4a6f      	ldr	r2, [pc, #444]	; (80033a0 <acis_loop+0x254>)
 80031e4:	2102      	movs	r1, #2
 80031e6:	486c      	ldr	r0, [pc, #432]	; (8003398 <acis_loop+0x24c>)
 80031e8:	f006 fa3c 	bl	8009664 <protLook>
      if(protGetSize(&fifoSendingQueue) >= size)
 80031ec:	486a      	ldr	r0, [pc, #424]	; (8003398 <acis_loop+0x24c>)
 80031ee:	f006 f921 	bl	8009434 <protGetSize>
 80031f2:	4602      	mov	r2, r0
 80031f4:	4b69      	ldr	r3, [pc, #420]	; (800339c <acis_loop+0x250>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d31b      	bcc.n	8003234 <acis_loop+0xe8>
      {
        pnt = buffSendingBuffer;
 80031fc:	4b69      	ldr	r3, [pc, #420]	; (80033a4 <acis_loop+0x258>)
 80031fe:	617b      	str	r3, [r7, #20]
        for(int i = 0; i < size; i++)
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	e009      	b.n	800321a <acis_loop+0xce>
          protPull(&fifoSendingQueue, pnt++);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	617a      	str	r2, [r7, #20]
 800320c:	4619      	mov	r1, r3
 800320e:	4862      	ldr	r0, [pc, #392]	; (8003398 <acis_loop+0x24c>)
 8003210:	f006 fa19 	bl	8009646 <protPull>
        for(int i = 0; i < size; i++)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3301      	adds	r3, #1
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	4b60      	ldr	r3, [pc, #384]	; (800339c <acis_loop+0x250>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4293      	cmp	r3, r2
 8003224:	dbef      	blt.n	8003206 <acis_loop+0xba>
        if(destination)
 8003226:	4b5e      	ldr	r3, [pc, #376]	; (80033a0 <acis_loop+0x254>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <acis_loop+0xe8>
          sending = 1;
 800322e:	4b59      	ldr	r3, [pc, #356]	; (8003394 <acis_loop+0x248>)
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
      }
    }
    if(sending)
 8003234:	4b57      	ldr	r3, [pc, #348]	; (8003394 <acis_loop+0x248>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d010      	beq.n	800325e <acis_loop+0x112>
    {
      status = acis_send_command(destination, buffSendingBuffer, size);
 800323c:	4b58      	ldr	r3, [pc, #352]	; (80033a0 <acis_loop+0x254>)
 800323e:	7818      	ldrb	r0, [r3, #0]
 8003240:	4b56      	ldr	r3, [pc, #344]	; (800339c <acis_loop+0x250>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	4957      	ldr	r1, [pc, #348]	; (80033a4 <acis_loop+0x258>)
 8003248:	f000 fa5e 	bl	8003708 <acis_send_command>
 800324c:	4603      	mov	r3, r0
 800324e:	703b      	strb	r3, [r7, #0]
      if(status != 0)
 8003250:	783b      	ldrb	r3, [r7, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <acis_loop+0x112>
      {
        sending = 0;
 8003256:	4b4f      	ldr	r3, [pc, #316]	; (8003394 <acis_loop+0x248>)
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
        continue;
 800325c:	bf00      	nop
      }
    }
  } while(0);

  if(isIgn && !acis_config.params.isIgnitionByHall)
 800325e:	78bb      	ldrb	r3, [r7, #2]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00e      	beq.n	8003282 <acis_loop+0x136>
 8003264:	4a50      	ldr	r2, [pc, #320]	; (80033a8 <acis_loop+0x25c>)
 8003266:	f643 53b8 	movw	r3, #15800	; 0x3db8
 800326a:	4413      	add	r3, r2
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <acis_loop+0x136>
    angle_ignite = CalculateIgnition();
 8003272:	f7fe f909 	bl	8001488 <CalculateIgnition>
 8003276:	eef0 7a40 	vmov.f32	s15, s0
 800327a:	4b4c      	ldr	r3, [pc, #304]	; (80033ac <acis_loop+0x260>)
 800327c:	edc3 7a00 	vstr	s15, [r3]
 8003280:	e003      	b.n	800328a <acis_loop+0x13e>
  else angle_ignite = 0.0f;
 8003282:	4b4a      	ldr	r3, [pc, #296]	; (80033ac <acis_loop+0x260>)
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	601a      	str	r2, [r3, #0]

  if(isIgn && acis_config.params.isHallLearningMode)
 800328a:	78bb      	ldrb	r3, [r7, #2]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <acis_loop+0x156>
 8003290:	4a45      	ldr	r2, [pc, #276]	; (80033a8 <acis_loop+0x25c>)
 8003292:	f643 53ba 	movw	r3, #15802	; 0x3dba
 8003296:	4413      	add	r3, r2
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <acis_loop+0x156>
    LearnIgnition();
 800329e:	f7fe fe3f 	bl	8001f20 <LearnIgnition>

  acis_hall_loop();
 80032a2:	f7fe f88d 	bl	80013c0 <acis_hall_loop>

  acis_ignition_loop();
 80032a6:	f7fd fe73 	bl	8000f90 <acis_ignition_loop>

  if(isIgn)
 80032aa:	78bb      	ldrb	r3, [r7, #2]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8116 	beq.w	80034de <acis_loop+0x392>
  {
    if(acis_config.params.isForceTable)
 80032b2:	4a3d      	ldr	r2, [pc, #244]	; (80033a8 <acis_loop+0x25c>)
 80032b4:	f643 53b9 	movw	r3, #15801	; 0x3db9
 80032b8:	4413      	add	r3, r2
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <acis_loop+0x180>
    {
      table = acis_config.params.forceTableNumber;
 80032c0:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <acis_loop+0x25c>)
 80032c2:	f503 5377 	add.w	r3, r3, #15808	; 0x3dc0
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	74fb      	strb	r3, [r7, #19]
 80032ca:	e07c      	b.n	80033c6 <acis_loop+0x27a>
    }
    else if(acis_config.params.isSwitchByExternal)
 80032cc:	4a36      	ldr	r2, [pc, #216]	; (80033a8 <acis_loop+0x25c>)
 80032ce:	f643 53bb 	movw	r3, #15803	; 0x3dbb
 80032d2:	4413      	add	r3, r2
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d03c      	beq.n	8003354 <acis_loop+0x208>
    {
      HAL_GPIO_WritePin(PROPANE_OUT_GPIO_Port, PROPANE_OUT_Pin, GPIO_PIN_RESET);
 80032da:	2200      	movs	r2, #0
 80032dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032e0:	4833      	ldr	r0, [pc, #204]	; (80033b0 <acis_loop+0x264>)
 80032e2:	f007 fd6b 	bl	800adbc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PETROL_OUT_GPIO_Port, PETROL_OUT_Pin, GPIO_PIN_RESET);
 80032e6:	2200      	movs	r2, #0
 80032e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032ec:	4830      	ldr	r0, [pc, #192]	; (80033b0 <acis_loop+0x264>)
 80032ee:	f007 fd65 	bl	800adbc <HAL_GPIO_WritePin>

      if(HAL_GPIO_ReadPin(PETROL_IN_GPIO_Port, PETROL_IN_Pin) == GPIO_PIN_RESET &&
 80032f2:	2120      	movs	r1, #32
 80032f4:	482e      	ldr	r0, [pc, #184]	; (80033b0 <acis_loop+0x264>)
 80032f6:	f007 fd49 	bl	800ad8c <HAL_GPIO_ReadPin>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10d      	bne.n	800331c <acis_loop+0x1d0>
          HAL_GPIO_ReadPin(PROPANE_IN_GPIO_Port, PROPANE_IN_Pin) == GPIO_PIN_SET)
 8003300:	2110      	movs	r1, #16
 8003302:	482b      	ldr	r0, [pc, #172]	; (80033b0 <acis_loop+0x264>)
 8003304:	f007 fd42 	bl	800ad8c <HAL_GPIO_ReadPin>
 8003308:	4603      	mov	r3, r0
      if(HAL_GPIO_ReadPin(PETROL_IN_GPIO_Port, PETROL_IN_Pin) == GPIO_PIN_RESET &&
 800330a:	2b01      	cmp	r3, #1
 800330c:	d106      	bne.n	800331c <acis_loop+0x1d0>
        table = acis_config.params.switchPos1Table;
 800330e:	4a26      	ldr	r2, [pc, #152]	; (80033a8 <acis_loop+0x25c>)
 8003310:	f643 53bd 	movw	r3, #15805	; 0x3dbd
 8003314:	4413      	add	r3, r2
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	74fb      	strb	r3, [r7, #19]
 800331a:	e054      	b.n	80033c6 <acis_loop+0x27a>
      else if(HAL_GPIO_ReadPin(PETROL_IN_GPIO_Port, PETROL_IN_Pin) == GPIO_PIN_SET &&
 800331c:	2120      	movs	r1, #32
 800331e:	4824      	ldr	r0, [pc, #144]	; (80033b0 <acis_loop+0x264>)
 8003320:	f007 fd34 	bl	800ad8c <HAL_GPIO_ReadPin>
 8003324:	4603      	mov	r3, r0
 8003326:	2b01      	cmp	r3, #1
 8003328:	d10d      	bne.n	8003346 <acis_loop+0x1fa>
          HAL_GPIO_ReadPin(PROPANE_IN_GPIO_Port, PROPANE_IN_Pin) == GPIO_PIN_RESET)
 800332a:	2110      	movs	r1, #16
 800332c:	4820      	ldr	r0, [pc, #128]	; (80033b0 <acis_loop+0x264>)
 800332e:	f007 fd2d 	bl	800ad8c <HAL_GPIO_ReadPin>
 8003332:	4603      	mov	r3, r0
      else if(HAL_GPIO_ReadPin(PETROL_IN_GPIO_Port, PETROL_IN_Pin) == GPIO_PIN_SET &&
 8003334:	2b00      	cmp	r3, #0
 8003336:	d106      	bne.n	8003346 <acis_loop+0x1fa>
        table = acis_config.params.switchPos2Table;
 8003338:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <acis_loop+0x25c>)
 800333a:	f643 53bf 	movw	r3, #15807	; 0x3dbf
 800333e:	4413      	add	r3, r2
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	74fb      	strb	r3, [r7, #19]
 8003344:	e03f      	b.n	80033c6 <acis_loop+0x27a>
      else table = acis_config.params.switchPos0Table;
 8003346:	4a18      	ldr	r2, [pc, #96]	; (80033a8 <acis_loop+0x25c>)
 8003348:	f643 53be 	movw	r3, #15806	; 0x3dbe
 800334c:	4413      	add	r3, r2
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	74fb      	strb	r3, [r7, #19]
 8003352:	e038      	b.n	80033c6 <acis_loop+0x27a>
    }
    else
    {
      if(fuelsw == 0)
 8003354:	787b      	ldrb	r3, [r7, #1]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <acis_loop+0x21c>
        table = acis_config.params.switchPos0Table;
 800335a:	4a13      	ldr	r2, [pc, #76]	; (80033a8 <acis_loop+0x25c>)
 800335c:	f643 53be 	movw	r3, #15806	; 0x3dbe
 8003360:	4413      	add	r3, r2
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	74fb      	strb	r3, [r7, #19]
 8003366:	e02e      	b.n	80033c6 <acis_loop+0x27a>
      else if(fuelsw == 1)
 8003368:	787b      	ldrb	r3, [r7, #1]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d122      	bne.n	80033b4 <acis_loop+0x268>
        table = acis_config.params.switchPos1Table;
 800336e:	4a0e      	ldr	r2, [pc, #56]	; (80033a8 <acis_loop+0x25c>)
 8003370:	f643 53bd 	movw	r3, #15805	; 0x3dbd
 8003374:	4413      	add	r3, r2
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	74fb      	strb	r3, [r7, #19]
 800337a:	e024      	b.n	80033c6 <acis_loop+0x27a>
 800337c:	40000c00 	.word	0x40000c00
 8003380:	200114d0 	.word	0x200114d0
 8003384:	40020800 	.word	0x40020800
 8003388:	40020000 	.word	0x40020000
 800338c:	200114b8 	.word	0x200114b8
 8003390:	200114f0 	.word	0x200114f0
 8003394:	200114f4 	.word	0x200114f4
 8003398:	20011810 	.word	0x20011810
 800339c:	200114f5 	.word	0x200114f5
 80033a0:	200114f6 	.word	0x200114f6
 80033a4:	20011824 	.word	0x20011824
 80033a8:	20011d24 	.word	0x20011d24
 80033ac:	200114a8 	.word	0x200114a8
 80033b0:	40020400 	.word	0x40020400
      else if(fuelsw == 2)
 80033b4:	787b      	ldrb	r3, [r7, #1]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d105      	bne.n	80033c6 <acis_loop+0x27a>
        table = acis_config.params.switchPos2Table;
 80033ba:	4a7c      	ldr	r2, [pc, #496]	; (80035ac <acis_loop+0x460>)
 80033bc:	f643 53bf 	movw	r3, #15807	; 0x3dbf
 80033c0:	4413      	add	r3, r2
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	74fb      	strb	r3, [r7, #19]
    }

    if(table < TABLE_SETUPS_MAX)
 80033c6:	7cfb      	ldrb	r3, [r7, #19]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	f200 8094 	bhi.w	80034f6 <acis_loop+0x3aa>
    {
      table_current = table;
 80033ce:	4a78      	ldr	r2, [pc, #480]	; (80035b0 <acis_loop+0x464>)
 80033d0:	7cfb      	ldrb	r3, [r7, #19]
 80033d2:	7013      	strb	r3, [r2, #0]
      valve_current = acis_config.tables[table].valve_channel;
 80033d4:	7cfb      	ldrb	r3, [r7, #19]
 80033d6:	4a75      	ldr	r2, [pc, #468]	; (80035ac <acis_loop+0x460>)
 80033d8:	f640 716c 	movw	r1, #3948	; 0xf6c
 80033dc:	fb01 f303 	mul.w	r3, r1, r3
 80033e0:	4413      	add	r3, r2
 80033e2:	3310      	adds	r3, #16
 80033e4:	781a      	ldrb	r2, [r3, #0]
 80033e6:	4b73      	ldr	r3, [pc, #460]	; (80035b4 <acis_loop+0x468>)
 80033e8:	701a      	strb	r2, [r3, #0]
      if(valve_current != valve_old)
 80033ea:	4b72      	ldr	r3, [pc, #456]	; (80035b4 <acis_loop+0x468>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	4b71      	ldr	r3, [pc, #452]	; (80035b8 <acis_loop+0x46c>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d007      	beq.n	8003408 <acis_loop+0x2bc>
      {
        valve_old = valve_current;
 80033f8:	4b6e      	ldr	r3, [pc, #440]	; (80035b4 <acis_loop+0x468>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	4b6e      	ldr	r3, [pc, #440]	; (80035b8 <acis_loop+0x46c>)
 8003400:	701a      	strb	r2, [r3, #0]
        rpm_last = now;
 8003402:	4a6e      	ldr	r2, [pc, #440]	; (80035bc <acis_loop+0x470>)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	6013      	str	r3, [r2, #0]
      }
      if(!acis_config.params.isSwitchByExternal)
 8003408:	4a68      	ldr	r2, [pc, #416]	; (80035ac <acis_loop+0x460>)
 800340a:	f643 53bb 	movw	r3, #15803	; 0x3dbb
 800340e:	4413      	add	r3, r2
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d16f      	bne.n	80034f6 <acis_loop+0x3aa>
      {
        if(acis_config.tables[table].valve_channel == ValveAllClosed ||
 8003416:	7cfb      	ldrb	r3, [r7, #19]
 8003418:	4a64      	ldr	r2, [pc, #400]	; (80035ac <acis_loop+0x460>)
 800341a:	f640 716c 	movw	r1, #3948	; 0xf6c
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	4413      	add	r3, r2
 8003424:	3310      	adds	r3, #16
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01b      	beq.n	8003464 <acis_loop+0x318>
            (acis_config.tables[table].valve_timeout != 0 && DelayDiff(now, rpm_last) > acis_config.tables[table].valve_timeout))
 800342c:	7cfb      	ldrb	r3, [r7, #19]
 800342e:	4a5f      	ldr	r2, [pc, #380]	; (80035ac <acis_loop+0x460>)
 8003430:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	4413      	add	r3, r2
 800343a:	3314      	adds	r3, #20
 800343c:	681b      	ldr	r3, [r3, #0]
        if(acis_config.tables[table].valve_channel == ValveAllClosed ||
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01d      	beq.n	800347e <acis_loop+0x332>
            (acis_config.tables[table].valve_timeout != 0 && DelayDiff(now, rpm_last) > acis_config.tables[table].valve_timeout))
 8003442:	4b5e      	ldr	r3, [pc, #376]	; (80035bc <acis_loop+0x470>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4619      	mov	r1, r3
 8003448:	68b8      	ldr	r0, [r7, #8]
 800344a:	f003 fa3d 	bl	80068c8 <DelayDiff>
 800344e:	7cfb      	ldrb	r3, [r7, #19]
 8003450:	4a56      	ldr	r2, [pc, #344]	; (80035ac <acis_loop+0x460>)
 8003452:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	3314      	adds	r3, #20
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4298      	cmp	r0, r3
 8003462:	d90c      	bls.n	800347e <acis_loop+0x332>
        {
          HAL_GPIO_WritePin(PROPANE_OUT_GPIO_Port, PROPANE_OUT_Pin, GPIO_PIN_RESET);
 8003464:	2200      	movs	r2, #0
 8003466:	f44f 7180 	mov.w	r1, #256	; 0x100
 800346a:	4855      	ldr	r0, [pc, #340]	; (80035c0 <acis_loop+0x474>)
 800346c:	f007 fca6 	bl	800adbc <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(PETROL_OUT_GPIO_Port, PETROL_OUT_Pin, GPIO_PIN_RESET);
 8003470:	2200      	movs	r2, #0
 8003472:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003476:	4852      	ldr	r0, [pc, #328]	; (80035c0 <acis_loop+0x474>)
 8003478:	f007 fca0 	bl	800adbc <HAL_GPIO_WritePin>
 800347c:	e03b      	b.n	80034f6 <acis_loop+0x3aa>
        }
        else if(acis_config.tables[table].valve_channel == ValvePetrol)
 800347e:	7cfb      	ldrb	r3, [r7, #19]
 8003480:	4a4a      	ldr	r2, [pc, #296]	; (80035ac <acis_loop+0x460>)
 8003482:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	3310      	adds	r3, #16
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d10c      	bne.n	80034ae <acis_loop+0x362>
        {
          HAL_GPIO_WritePin(PROPANE_OUT_GPIO_Port, PROPANE_OUT_Pin, GPIO_PIN_RESET);
 8003494:	2200      	movs	r2, #0
 8003496:	f44f 7180 	mov.w	r1, #256	; 0x100
 800349a:	4849      	ldr	r0, [pc, #292]	; (80035c0 <acis_loop+0x474>)
 800349c:	f007 fc8e 	bl	800adbc <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(PETROL_OUT_GPIO_Port, PETROL_OUT_Pin, GPIO_PIN_SET);
 80034a0:	2201      	movs	r2, #1
 80034a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034a6:	4846      	ldr	r0, [pc, #280]	; (80035c0 <acis_loop+0x474>)
 80034a8:	f007 fc88 	bl	800adbc <HAL_GPIO_WritePin>
 80034ac:	e023      	b.n	80034f6 <acis_loop+0x3aa>
        }
        else if(acis_config.tables[table].valve_channel == ValvePropane)
 80034ae:	7cfb      	ldrb	r3, [r7, #19]
 80034b0:	4a3e      	ldr	r2, [pc, #248]	; (80035ac <acis_loop+0x460>)
 80034b2:	f640 716c 	movw	r1, #3948	; 0xf6c
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	3310      	adds	r3, #16
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d118      	bne.n	80034f6 <acis_loop+0x3aa>
        {
          HAL_GPIO_WritePin(PROPANE_OUT_GPIO_Port, PROPANE_OUT_Pin, GPIO_PIN_SET);
 80034c4:	2201      	movs	r2, #1
 80034c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034ca:	483d      	ldr	r0, [pc, #244]	; (80035c0 <acis_loop+0x474>)
 80034cc:	f007 fc76 	bl	800adbc <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(PETROL_OUT_GPIO_Port, PETROL_OUT_Pin, GPIO_PIN_RESET);
 80034d0:	2200      	movs	r2, #0
 80034d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034d6:	483a      	ldr	r0, [pc, #232]	; (80035c0 <acis_loop+0x474>)
 80034d8:	f007 fc70 	bl	800adbc <HAL_GPIO_WritePin>
 80034dc:	e00b      	b.n	80034f6 <acis_loop+0x3aa>
      }
    }
  }
  else
  {
    HAL_GPIO_WritePin(PROPANE_OUT_GPIO_Port, PROPANE_OUT_Pin, GPIO_PIN_RESET);
 80034de:	2200      	movs	r2, #0
 80034e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034e4:	4836      	ldr	r0, [pc, #216]	; (80035c0 <acis_loop+0x474>)
 80034e6:	f007 fc69 	bl	800adbc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PETROL_OUT_GPIO_Port, PETROL_OUT_Pin, GPIO_PIN_RESET);
 80034ea:	2200      	movs	r2, #0
 80034ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034f0:	4833      	ldr	r0, [pc, #204]	; (80035c0 <acis_loop+0x474>)
 80034f2:	f007 fc63 	bl	800adbc <HAL_GPIO_WritePin>
  }

  if(!isIgn)
 80034f6:	78bb      	ldrb	r3, [r7, #2]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d105      	bne.n	8003508 <acis_loop+0x3bc>
  {
    HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_RESET);
 80034fc:	2200      	movs	r2, #0
 80034fe:	2104      	movs	r1, #4
 8003500:	4830      	ldr	r0, [pc, #192]	; (80035c4 <acis_loop+0x478>)
 8003502:	f007 fc5b 	bl	800adbc <HAL_GPIO_WritePin>
 8003506:	e046      	b.n	8003596 <acis_loop+0x44a>
  }
  else if(!acis_config.params.isEconOutAsStrobe)
 8003508:	4a28      	ldr	r2, [pc, #160]	; (80035ac <acis_loop+0x460>)
 800350a:	f643 53bc 	movw	r3, #15804	; 0x3dbc
 800350e:	4413      	add	r3, r2
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d13f      	bne.n	8003596 <acis_loop+0x44a>
  {
    if(acis_config.params.isEconomEnabled)
 8003516:	4a25      	ldr	r2, [pc, #148]	; (80035ac <acis_loop+0x460>)
 8003518:	f643 53b6 	movw	r3, #15798	; 0x3db6
 800351c:	4413      	add	r3, r2
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d033      	beq.n	800358c <acis_loop+0x440>
    {
      if(isIdle && rpm > acis_config.params.EconRpmThreshold + 75)
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d016      	beq.n	8003558 <acis_loop+0x40c>
 800352a:	4a20      	ldr	r2, [pc, #128]	; (80035ac <acis_loop+0x460>)
 800352c:	f643 63bc 	movw	r3, #16060	; 0x3ebc
 8003530:	4413      	add	r3, r2
 8003532:	edd3 7a00 	vldr	s15, [r3]
 8003536:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80035c8 <acis_loop+0x47c>
 800353a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800353e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354a:	dd05      	ble.n	8003558 <acis_loop+0x40c>
        HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_RESET);
 800354c:	2200      	movs	r2, #0
 800354e:	2104      	movs	r1, #4
 8003550:	481c      	ldr	r0, [pc, #112]	; (80035c4 <acis_loop+0x478>)
 8003552:	f007 fc33 	bl	800adbc <HAL_GPIO_WritePin>
 8003556:	e01e      	b.n	8003596 <acis_loop+0x44a>
      else if(!isIdle || rpm < acis_config.params.EconRpmThreshold - 75)
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d010      	beq.n	8003580 <acis_loop+0x434>
 800355e:	4a13      	ldr	r2, [pc, #76]	; (80035ac <acis_loop+0x460>)
 8003560:	f643 63bc 	movw	r3, #16060	; 0x3ebc
 8003564:	4413      	add	r3, r2
 8003566:	edd3 7a00 	vldr	s15, [r3]
 800356a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80035c8 <acis_loop+0x47c>
 800356e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003572:	ed97 7a01 	vldr	s14, [r7, #4]
 8003576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800357a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357e:	d50a      	bpl.n	8003596 <acis_loop+0x44a>
        HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_SET);
 8003580:	2201      	movs	r2, #1
 8003582:	2104      	movs	r1, #4
 8003584:	480f      	ldr	r0, [pc, #60]	; (80035c4 <acis_loop+0x478>)
 8003586:	f007 fc19 	bl	800adbc <HAL_GPIO_WritePin>
 800358a:	e004      	b.n	8003596 <acis_loop+0x44a>
    }
    else
      HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_SET);
 800358c:	2201      	movs	r2, #1
 800358e:	2104      	movs	r1, #4
 8003590:	480c      	ldr	r0, [pc, #48]	; (80035c4 <acis_loop+0x478>)
 8003592:	f007 fc13 	bl	800adbc <HAL_GPIO_WritePin>
  }
  TIME3 = Delay_Tick - TIME33;
 8003596:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <acis_loop+0x480>)
 8003598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800359a:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <acis_loop+0x484>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <acis_loop+0x488>)
 80035a2:	6013      	str	r3, [r2, #0]
}
 80035a4:	bf00      	nop
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20011d24 	.word	0x20011d24
 80035b0:	200114b0 	.word	0x200114b0
 80035b4:	200114b1 	.word	0x200114b1
 80035b8:	200114f7 	.word	0x200114f7
 80035bc:	200114f0 	.word	0x200114f0
 80035c0:	40020400 	.word	0x40020400
 80035c4:	40020c00 	.word	0x40020c00
 80035c8:	42960000 	.word	0x42960000
 80035cc:	40000c00 	.word	0x40000c00
 80035d0:	200114d0 	.word	0x200114d0
 80035d4:	200114c4 	.word	0x200114c4

080035d8 <acis_parse_command>:

void acis_parse_command(eTransChannels xChaSrc, uint8_t * msgBuf, uint32_t length)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	73fb      	strb	r3, [r7, #15]
  switch(msgBuf[0])
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d000      	beq.n	80035f0 <acis_parse_command+0x18>
      PK_GeneralStatusResponse.tablenum = table_current;
      strcpy(PK_GeneralStatusResponse.tablename, PK_GeneralStatusResponse.tablenum < TABLE_SETUPS_MAX ? (char*)acis_config.tables[PK_GeneralStatusResponse.tablenum].name : (char*)"");
      protPushSequence(&fifoSendingQueue, &PK_GeneralStatusResponse, sizeof(PK_GeneralStatusResponse));
      break;
    default:
      break;
 80035ee:	e06f      	b.n	80036d0 <acis_parse_command+0xf8>
      PK_GeneralStatusResponse.Destination = xChaSrc;
 80035f0:	4a39      	ldr	r2, [pc, #228]	; (80036d8 <acis_parse_command+0x100>)
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	7093      	strb	r3, [r2, #2]
      PK_GeneralStatusResponse.RealRPM = csps_getrpm();
 80035f6:	f003 f843 	bl	8006680 <csps_getrpm>
 80035fa:	eef0 7a40 	vmov.f32	s15, s0
 80035fe:	4b36      	ldr	r3, [pc, #216]	; (80036d8 <acis_parse_command+0x100>)
 8003600:	edc3 7a05 	vstr	s15, [r3, #20]
      PK_GeneralStatusResponse.RPM = csps_getrpmgui();
 8003604:	f003 f84a 	bl	800669c <csps_getrpmgui>
 8003608:	eef0 7a40 	vmov.f32	s15, s0
 800360c:	4b32      	ldr	r3, [pc, #200]	; (80036d8 <acis_parse_command+0x100>)
 800360e:	edc3 7a06 	vstr	s15, [r3, #24]
      PK_GeneralStatusResponse.Pressure = map_getpressure();
 8003612:	f004 f8bd 	bl	8007790 <map_getpressure>
 8003616:	eef0 7a40 	vmov.f32	s15, s0
 800361a:	4b2f      	ldr	r3, [pc, #188]	; (80036d8 <acis_parse_command+0x100>)
 800361c:	edc3 7a07 	vstr	s15, [r3, #28]
      PK_GeneralStatusResponse.Load = map_getpressure() / 110000.0f * 100.0f;
 8003620:	f004 f8b6 	bl	8007790 <map_getpressure>
 8003624:	eef0 6a40 	vmov.f32	s13, s0
 8003628:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80036dc <acis_parse_command+0x104>
 800362c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003630:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80036e0 <acis_parse_command+0x108>
 8003634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003638:	4b27      	ldr	r3, [pc, #156]	; (80036d8 <acis_parse_command+0x100>)
 800363a:	edc3 7a08 	vstr	s15, [r3, #32]
      PK_GeneralStatusResponse.IgnitionAngle = angle_ignite;
 800363e:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <acis_parse_command+0x10c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a25      	ldr	r2, [pc, #148]	; (80036d8 <acis_parse_command+0x100>)
 8003644:	6253      	str	r3, [r2, #36]	; 0x24
      PK_GeneralStatusResponse.Voltage = power_voltage;
 8003646:	4b28      	ldr	r3, [pc, #160]	; (80036e8 <acis_parse_command+0x110>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a23      	ldr	r2, [pc, #140]	; (80036d8 <acis_parse_command+0x100>)
 800364c:	62d3      	str	r3, [r2, #44]	; 0x2c
      PK_GeneralStatusResponse.valvenum = valve_current;
 800364e:	4b27      	ldr	r3, [pc, #156]	; (80036ec <acis_parse_command+0x114>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	b2da      	uxtb	r2, r3
 8003654:	4b20      	ldr	r3, [pc, #128]	; (80036d8 <acis_parse_command+0x100>)
 8003656:	715a      	strb	r2, [r3, #5]
      PK_GeneralStatusResponse.check = csps_iserror() || (hall_error > 1.0f) || PK_GeneralStatusResponse.Load == 0.0f;
 8003658:	f003 f862 	bl	8006720 <csps_iserror>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d111      	bne.n	8003686 <acis_parse_command+0xae>
 8003662:	4b23      	ldr	r3, [pc, #140]	; (80036f0 <acis_parse_command+0x118>)
 8003664:	edd3 7a00 	vldr	s15, [r3]
 8003668:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800366c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003674:	dc07      	bgt.n	8003686 <acis_parse_command+0xae>
 8003676:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <acis_parse_command+0x100>)
 8003678:	edd3 7a08 	vldr	s15, [r3, #32]
 800367c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003684:	d101      	bne.n	800368a <acis_parse_command+0xb2>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <acis_parse_command+0xb4>
 800368a:	2300      	movs	r3, #0
 800368c:	b2da      	uxtb	r2, r3
 800368e:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <acis_parse_command+0x100>)
 8003690:	719a      	strb	r2, [r3, #6]
      PK_GeneralStatusResponse.tablenum = table_current;
 8003692:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <acis_parse_command+0x11c>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	b2da      	uxtb	r2, r3
 8003698:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <acis_parse_command+0x100>)
 800369a:	711a      	strb	r2, [r3, #4]
      strcpy(PK_GeneralStatusResponse.tablename, PK_GeneralStatusResponse.tablenum < TABLE_SETUPS_MAX ? (char*)acis_config.tables[PK_GeneralStatusResponse.tablenum].name : (char*)"");
 800369c:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <acis_parse_command+0x100>)
 800369e:	791b      	ldrb	r3, [r3, #4]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d80a      	bhi.n	80036ba <acis_parse_command+0xe2>
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <acis_parse_command+0x100>)
 80036a6:	791b      	ldrb	r3, [r3, #4]
 80036a8:	461a      	mov	r2, r3
 80036aa:	f640 736c 	movw	r3, #3948	; 0xf6c
 80036ae:	fb03 f302 	mul.w	r3, r3, r2
 80036b2:	4a11      	ldr	r2, [pc, #68]	; (80036f8 <acis_parse_command+0x120>)
 80036b4:	4413      	add	r3, r2
 80036b6:	3304      	adds	r3, #4
 80036b8:	e000      	b.n	80036bc <acis_parse_command+0xe4>
 80036ba:	4b10      	ldr	r3, [pc, #64]	; (80036fc <acis_parse_command+0x124>)
 80036bc:	4619      	mov	r1, r3
 80036be:	4810      	ldr	r0, [pc, #64]	; (8003700 <acis_parse_command+0x128>)
 80036c0:	f00b fbd5 	bl	800ee6e <strcpy>
      protPushSequence(&fifoSendingQueue, &PK_GeneralStatusResponse, sizeof(PK_GeneralStatusResponse));
 80036c4:	2230      	movs	r2, #48	; 0x30
 80036c6:	4904      	ldr	r1, [pc, #16]	; (80036d8 <acis_parse_command+0x100>)
 80036c8:	480e      	ldr	r0, [pc, #56]	; (8003704 <acis_parse_command+0x12c>)
 80036ca:	f005 ff9c 	bl	8009606 <protPushSequence>
      break;
 80036ce:	bf00      	nop
  }
}
 80036d0:	bf00      	nop
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20010000 	.word	0x20010000
 80036dc:	47d6d800 	.word	0x47d6d800
 80036e0:	42c80000 	.word	0x42c80000
 80036e4:	200114a8 	.word	0x200114a8
 80036e8:	200114b4 	.word	0x200114b4
 80036ec:	200114b1 	.word	0x200114b1
 80036f0:	2001149c 	.word	0x2001149c
 80036f4:	200114b0 	.word	0x200114b0
 80036f8:	20011d24 	.word	0x20011d24
 80036fc:	0800ee98 	.word	0x0800ee98
 8003700:	20010007 	.word	0x20010007
 8003704:	20011810 	.word	0x20011810

08003708 <acis_send_command>:

inline int8_t acis_send_command(eTransChannels xChaDst, void * msgBuf, uint32_t length)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	73fb      	strb	r3, [r7, #15]
  return xSender(xChaDst, (uint8_t*)msgBuf, length);
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	4618      	mov	r0, r3
 800371e:	f005 f861 	bl	80087e4 <xSender>
 8003722:	4603      	mov	r3, r0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <setconfig_standart1dot6>:
  config->tables[i].ignitions[0][11] = 33.0f;
  config->tables[i].ignitions[0][12] = 33.0f;
}

static void setconfig_standart1dot6(sAcisConfig * config, uint8_t i)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	70fb      	strb	r3, [r7, #3]

  config->tables[i].rotates_count = 16;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800374a:	2210      	movs	r2, #16
 800374c:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[0] = 600;
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003756:	fb01 f303 	mul.w	r3, r1, r3
 800375a:	4413      	add	r3, r2
 800375c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003760:	4ab9      	ldr	r2, [pc, #740]	; (8003a48 <setconfig_standart1dot6+0x31c>)
 8003762:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[1] = 720;
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	f640 716c 	movw	r1, #3948	; 0xf6c
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003776:	4ab5      	ldr	r2, [pc, #724]	; (8003a4c <setconfig_standart1dot6+0x320>)
 8003778:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[2] = 840;
 800377a:	78fb      	ldrb	r3, [r7, #3]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800378c:	4ab0      	ldr	r2, [pc, #704]	; (8003a50 <setconfig_standart1dot6+0x324>)
 800378e:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[3] = 990;
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	4413      	add	r3, r2
 800379e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80037a2:	4aac      	ldr	r2, [pc, #688]	; (8003a54 <setconfig_standart1dot6+0x328>)
 80037a4:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[4] = 1170;
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	f640 716c 	movw	r1, #3948	; 0xf6c
 80037ae:	fb01 f303 	mul.w	r3, r1, r3
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80037b8:	4aa7      	ldr	r2, [pc, #668]	; (8003a58 <setconfig_standart1dot6+0x32c>)
 80037ba:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[5] = 1380;
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	f640 716c 	movw	r1, #3948	; 0xf6c
 80037c4:	fb01 f303 	mul.w	r3, r1, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80037ce:	4aa3      	ldr	r2, [pc, #652]	; (8003a5c <setconfig_standart1dot6+0x330>)
 80037d0:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[6] = 1650;
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	f640 716c 	movw	r1, #3948	; 0xf6c
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	4413      	add	r3, r2
 80037e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80037e4:	4a9e      	ldr	r2, [pc, #632]	; (8003a60 <setconfig_standart1dot6+0x334>)
 80037e6:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[7] = 1950;
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	f640 716c 	movw	r1, #3948	; 0xf6c
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037fa:	4a9a      	ldr	r2, [pc, #616]	; (8003a64 <setconfig_standart1dot6+0x338>)
 80037fc:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[8] = 2310;
 80037fe:	78fb      	ldrb	r3, [r7, #3]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003806:	fb01 f303 	mul.w	r3, r1, r3
 800380a:	4413      	add	r3, r2
 800380c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003810:	4a95      	ldr	r2, [pc, #596]	; (8003a68 <setconfig_standart1dot6+0x33c>)
 8003812:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[9] = 2730;
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	f640 716c 	movw	r1, #3948	; 0xf6c
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	4413      	add	r3, r2
 8003822:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8003826:	4a91      	ldr	r2, [pc, #580]	; (8003a6c <setconfig_standart1dot6+0x340>)
 8003828:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[10] = 3210;
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	4413      	add	r3, r2
 8003838:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800383c:	4a8c      	ldr	r2, [pc, #560]	; (8003a70 <setconfig_standart1dot6+0x344>)
 800383e:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[11] = 3840;
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	4413      	add	r3, r2
 800384e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003852:	4a88      	ldr	r2, [pc, #544]	; (8003a74 <setconfig_standart1dot6+0x348>)
 8003854:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[12] = 4530;
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	f640 716c 	movw	r1, #3948	; 0xf6c
 800385e:	fb01 f303 	mul.w	r3, r1, r3
 8003862:	4413      	add	r3, r2
 8003864:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003868:	4a83      	ldr	r2, [pc, #524]	; (8003a78 <setconfig_standart1dot6+0x34c>)
 800386a:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[13] = 5370;
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800387e:	4a7f      	ldr	r2, [pc, #508]	; (8003a7c <setconfig_standart1dot6+0x350>)
 8003880:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[14] = 6360;
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	f640 716c 	movw	r1, #3948	; 0xf6c
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	4413      	add	r3, r2
 8003890:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003894:	4a7a      	ldr	r2, [pc, #488]	; (8003a80 <setconfig_standart1dot6+0x354>)
 8003896:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[15] = 7500;
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	f640 716c 	movw	r1, #3948	; 0xf6c
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80038aa:	4a76      	ldr	r2, [pc, #472]	; (8003a84 <setconfig_standart1dot6+0x358>)
 80038ac:	601a      	str	r2, [r3, #0]

  config->tables[i].pressures_count = 16;
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	f640 716c 	movw	r1, #3948	; 0xf6c
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	4413      	add	r3, r2
 80038bc:	33e4      	adds	r3, #228	; 0xe4
 80038be:	2210      	movs	r2, #16
 80038c0:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[0] = 28000.0f;
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	f640 716c 	movw	r1, #3948	; 0xf6c
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	33e8      	adds	r3, #232	; 0xe8
 80038d2:	4a6d      	ldr	r2, [pc, #436]	; (8003a88 <setconfig_standart1dot6+0x35c>)
 80038d4:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[1] = 32800.0f;
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	f640 716c 	movw	r1, #3948	; 0xf6c
 80038de:	fb01 f303 	mul.w	r3, r1, r3
 80038e2:	4413      	add	r3, r2
 80038e4:	33ec      	adds	r3, #236	; 0xec
 80038e6:	4a69      	ldr	r2, [pc, #420]	; (8003a8c <setconfig_standart1dot6+0x360>)
 80038e8:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[2] = 37600.0f;
 80038ea:	78fb      	ldrb	r3, [r7, #3]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	f640 716c 	movw	r1, #3948	; 0xf6c
 80038f2:	fb01 f303 	mul.w	r3, r1, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	33f0      	adds	r3, #240	; 0xf0
 80038fa:	4a65      	ldr	r2, [pc, #404]	; (8003a90 <setconfig_standart1dot6+0x364>)
 80038fc:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[3] = 42400.0f;
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	4413      	add	r3, r2
 800390c:	33f4      	adds	r3, #244	; 0xf4
 800390e:	4a61      	ldr	r2, [pc, #388]	; (8003a94 <setconfig_standart1dot6+0x368>)
 8003910:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[4] = 47200.0f;
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	f640 716c 	movw	r1, #3948	; 0xf6c
 800391a:	fb01 f303 	mul.w	r3, r1, r3
 800391e:	4413      	add	r3, r2
 8003920:	33f8      	adds	r3, #248	; 0xf8
 8003922:	4a5d      	ldr	r2, [pc, #372]	; (8003a98 <setconfig_standart1dot6+0x36c>)
 8003924:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[5] = 52000.0f;
 8003926:	78fb      	ldrb	r3, [r7, #3]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	f640 716c 	movw	r1, #3948	; 0xf6c
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	4413      	add	r3, r2
 8003934:	33fc      	adds	r3, #252	; 0xfc
 8003936:	4a59      	ldr	r2, [pc, #356]	; (8003a9c <setconfig_standart1dot6+0x370>)
 8003938:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[6] = 56800.0f;
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003942:	fb01 f303 	mul.w	r3, r1, r3
 8003946:	4413      	add	r3, r2
 8003948:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800394c:	4a54      	ldr	r2, [pc, #336]	; (8003aa0 <setconfig_standart1dot6+0x374>)
 800394e:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[7] = 61600.0f;
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003958:	fb01 f303 	mul.w	r3, r1, r3
 800395c:	4413      	add	r3, r2
 800395e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003962:	4a50      	ldr	r2, [pc, #320]	; (8003aa4 <setconfig_standart1dot6+0x378>)
 8003964:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[8] = 66400.0f;
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	f640 716c 	movw	r1, #3948	; 0xf6c
 800396e:	fb01 f303 	mul.w	r3, r1, r3
 8003972:	4413      	add	r3, r2
 8003974:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003978:	4a4b      	ldr	r2, [pc, #300]	; (8003aa8 <setconfig_standart1dot6+0x37c>)
 800397a:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[9] = 71200.0f;
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	4413      	add	r3, r2
 800398a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800398e:	4a47      	ldr	r2, [pc, #284]	; (8003aac <setconfig_standart1dot6+0x380>)
 8003990:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[10] = 76000.0f;
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	f640 716c 	movw	r1, #3948	; 0xf6c
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80039a4:	4a42      	ldr	r2, [pc, #264]	; (8003ab0 <setconfig_standart1dot6+0x384>)
 80039a6:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[11] = 80800.0f;
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	f640 716c 	movw	r1, #3948	; 0xf6c
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80039ba:	4a3e      	ldr	r2, [pc, #248]	; (8003ab4 <setconfig_standart1dot6+0x388>)
 80039bc:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[12] = 85600.0f;
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	f640 716c 	movw	r1, #3948	; 0xf6c
 80039c6:	fb01 f303 	mul.w	r3, r1, r3
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80039d0:	4a39      	ldr	r2, [pc, #228]	; (8003ab8 <setconfig_standart1dot6+0x38c>)
 80039d2:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[13] = 90400.0f;
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	f640 716c 	movw	r1, #3948	; 0xf6c
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80039e6:	4a35      	ldr	r2, [pc, #212]	; (8003abc <setconfig_standart1dot6+0x390>)
 80039e8:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[14] = 95200.0f;
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	f640 716c 	movw	r1, #3948	; 0xf6c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80039fc:	4a30      	ldr	r2, [pc, #192]	; (8003ac0 <setconfig_standart1dot6+0x394>)
 80039fe:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[15] = 100000.0f;
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003a12:	4a2c      	ldr	r2, [pc, #176]	; (8003ac4 <setconfig_standart1dot6+0x398>)
 8003a14:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[0][0]  = 14.5f;
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003a28:	4a27      	ldr	r2, [pc, #156]	; (8003ac8 <setconfig_standart1dot6+0x39c>)
 8003a2a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][1]  = 16.1f;
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8003a3e:	4a23      	ldr	r2, [pc, #140]	; (8003acc <setconfig_standart1dot6+0x3a0>)
 8003a40:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][2]  = 18.0f;
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	e044      	b.n	8003ad0 <setconfig_standart1dot6+0x3a4>
 8003a46:	bf00      	nop
 8003a48:	44160000 	.word	0x44160000
 8003a4c:	44340000 	.word	0x44340000
 8003a50:	44520000 	.word	0x44520000
 8003a54:	44778000 	.word	0x44778000
 8003a58:	44924000 	.word	0x44924000
 8003a5c:	44ac8000 	.word	0x44ac8000
 8003a60:	44ce4000 	.word	0x44ce4000
 8003a64:	44f3c000 	.word	0x44f3c000
 8003a68:	45106000 	.word	0x45106000
 8003a6c:	452aa000 	.word	0x452aa000
 8003a70:	4548a000 	.word	0x4548a000
 8003a74:	45700000 	.word	0x45700000
 8003a78:	458d9000 	.word	0x458d9000
 8003a7c:	45a7d000 	.word	0x45a7d000
 8003a80:	45c6c000 	.word	0x45c6c000
 8003a84:	45ea6000 	.word	0x45ea6000
 8003a88:	46dac000 	.word	0x46dac000
 8003a8c:	47002000 	.word	0x47002000
 8003a90:	4712e000 	.word	0x4712e000
 8003a94:	4725a000 	.word	0x4725a000
 8003a98:	47386000 	.word	0x47386000
 8003a9c:	474b2000 	.word	0x474b2000
 8003aa0:	475de000 	.word	0x475de000
 8003aa4:	4770a000 	.word	0x4770a000
 8003aa8:	4781b000 	.word	0x4781b000
 8003aac:	478b1000 	.word	0x478b1000
 8003ab0:	47947000 	.word	0x47947000
 8003ab4:	479dd000 	.word	0x479dd000
 8003ab8:	47a73000 	.word	0x47a73000
 8003abc:	47b09000 	.word	0x47b09000
 8003ac0:	47b9f000 	.word	0x47b9f000
 8003ac4:	47c35000 	.word	0x47c35000
 8003ac8:	41680000 	.word	0x41680000
 8003acc:	4180cccd 	.word	0x4180cccd
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8003ae0:	4aba      	ldr	r2, [pc, #744]	; (8003dcc <setconfig_standart1dot6+0x6a0>)
 8003ae2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][3]  = 20.9f;
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003af6:	4ab6      	ldr	r2, [pc, #728]	; (8003dd0 <setconfig_standart1dot6+0x6a4>)
 8003af8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][4]  = 24.7f;
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003b02:	fb01 f303 	mul.w	r3, r1, r3
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b0c:	4ab1      	ldr	r2, [pc, #708]	; (8003dd4 <setconfig_standart1dot6+0x6a8>)
 8003b0e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][5]  = 29.7f;
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003b18:	fb01 f303 	mul.w	r3, r1, r3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8003b22:	4aad      	ldr	r2, [pc, #692]	; (8003dd8 <setconfig_standart1dot6+0x6ac>)
 8003b24:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][6]  = 37.8f;
 8003b26:	78fb      	ldrb	r3, [r7, #3]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003b38:	4aa8      	ldr	r2, [pc, #672]	; (8003ddc <setconfig_standart1dot6+0x6b0>)
 8003b3a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][7]  = 40.9f;
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8003b4e:	4aa4      	ldr	r2, [pc, #656]	; (8003de0 <setconfig_standart1dot6+0x6b4>)
 8003b50:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][8]  = 42.6f;
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8003b64:	4a9f      	ldr	r2, [pc, #636]	; (8003de4 <setconfig_standart1dot6+0x6b8>)
 8003b66:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][9]  = 43.4f;
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8003b7a:	4a9b      	ldr	r2, [pc, #620]	; (8003de8 <setconfig_standart1dot6+0x6bc>)
 8003b7c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][10] = 44.0f;
 8003b7e:	78fb      	ldrb	r3, [r7, #3]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003b86:	fb01 f303 	mul.w	r3, r1, r3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8003b90:	4a96      	ldr	r2, [pc, #600]	; (8003dec <setconfig_standart1dot6+0x6c0>)
 8003b92:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][11] = 44.4f;
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003ba6:	4a92      	ldr	r2, [pc, #584]	; (8003df0 <setconfig_standart1dot6+0x6c4>)
 8003ba8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][12] = 44.3f;
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8003bbc:	4a8d      	ldr	r2, [pc, #564]	; (8003df4 <setconfig_standart1dot6+0x6c8>)
 8003bbe:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][13] = 44.3f;
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003bd2:	4a88      	ldr	r2, [pc, #544]	; (8003df4 <setconfig_standart1dot6+0x6c8>)
 8003bd4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][14] = 44.8f;
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003bde:	fb01 f303 	mul.w	r3, r1, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003be8:	4a83      	ldr	r2, [pc, #524]	; (8003df8 <setconfig_standart1dot6+0x6cc>)
 8003bea:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][15] = 45.0f;
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003bf4:	fb01 f303 	mul.w	r3, r1, r3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003bfe:	4a7f      	ldr	r2, [pc, #508]	; (8003dfc <setconfig_standart1dot6+0x6d0>)
 8003c00:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[1][0]  = 16.1f;
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003c0a:	fb01 f303 	mul.w	r3, r1, r3
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003c14:	4a7a      	ldr	r2, [pc, #488]	; (8003e00 <setconfig_standart1dot6+0x6d4>)
 8003c16:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][1]  = 18.0f;
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c2a:	4a68      	ldr	r2, [pc, #416]	; (8003dcc <setconfig_standart1dot6+0x6a0>)
 8003c2c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][2]  = 20.1f;
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003c36:	fb01 f303 	mul.w	r3, r1, r3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c40:	4a70      	ldr	r2, [pc, #448]	; (8003e04 <setconfig_standart1dot6+0x6d8>)
 8003c42:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][3]  = 23.1f;
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8003c56:	4a6c      	ldr	r2, [pc, #432]	; (8003e08 <setconfig_standart1dot6+0x6dc>)
 8003c58:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][4]  = 26.6f;
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003c62:	fb01 f303 	mul.w	r3, r1, r3
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003c6c:	4a67      	ldr	r2, [pc, #412]	; (8003e0c <setconfig_standart1dot6+0x6e0>)
 8003c6e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][5]  = 31.0f;
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8003c82:	4a63      	ldr	r2, [pc, #396]	; (8003e10 <setconfig_standart1dot6+0x6e4>)
 8003c84:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][6]  = 38.1f;
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8003c98:	4a5e      	ldr	r2, [pc, #376]	; (8003e14 <setconfig_standart1dot6+0x6e8>)
 8003c9a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][7]  = 41.0f;
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003ca4:	fb01 f303 	mul.w	r3, r1, r3
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8003cae:	4a5a      	ldr	r2, [pc, #360]	; (8003e18 <setconfig_standart1dot6+0x6ec>)
 8003cb0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][8]  = 42.6f;
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8003cc4:	4a47      	ldr	r2, [pc, #284]	; (8003de4 <setconfig_standart1dot6+0x6b8>)
 8003cc6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][9]  = 43.4f;
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003cda:	4a43      	ldr	r2, [pc, #268]	; (8003de8 <setconfig_standart1dot6+0x6bc>)
 8003cdc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][10] = 43.0f;
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003ce6:	fb01 f303 	mul.w	r3, r1, r3
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003cf0:	4a4a      	ldr	r2, [pc, #296]	; (8003e1c <setconfig_standart1dot6+0x6f0>)
 8003cf2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][11] = 44.4f;
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8003d06:	4a3a      	ldr	r2, [pc, #232]	; (8003df0 <setconfig_standart1dot6+0x6c4>)
 8003d08:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][12] = 44.3f;
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8003d1c:	4a35      	ldr	r2, [pc, #212]	; (8003df4 <setconfig_standart1dot6+0x6c8>)
 8003d1e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][13] = 44.3f;
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8003d32:	4a30      	ldr	r2, [pc, #192]	; (8003df4 <setconfig_standart1dot6+0x6c8>)
 8003d34:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][14] = 44.8f;
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8003d48:	4a2b      	ldr	r2, [pc, #172]	; (8003df8 <setconfig_standart1dot6+0x6cc>)
 8003d4a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][15] = 45.0f;
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8003d5e:	4a27      	ldr	r2, [pc, #156]	; (8003dfc <setconfig_standart1dot6+0x6d0>)
 8003d60:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[2][0]  = 17.8f;
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8003d74:	4a2a      	ldr	r2, [pc, #168]	; (8003e20 <setconfig_standart1dot6+0x6f4>)
 8003d76:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][1]  = 19.7f;
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8003d8a:	4a26      	ldr	r2, [pc, #152]	; (8003e24 <setconfig_standart1dot6+0x6f8>)
 8003d8c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][2]  = 21.5f;
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8003da0:	4a21      	ldr	r2, [pc, #132]	; (8003e28 <setconfig_standart1dot6+0x6fc>)
 8003da2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][3]  = 24.2f;
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003db6:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <setconfig_standart1dot6+0x700>)
 8003db8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][4]  = 27.6f;
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	e032      	b.n	8003e30 <setconfig_standart1dot6+0x704>
 8003dca:	bf00      	nop
 8003dcc:	41900000 	.word	0x41900000
 8003dd0:	41a73333 	.word	0x41a73333
 8003dd4:	41c5999a 	.word	0x41c5999a
 8003dd8:	41ed999a 	.word	0x41ed999a
 8003ddc:	42173333 	.word	0x42173333
 8003de0:	4223999a 	.word	0x4223999a
 8003de4:	422a6666 	.word	0x422a6666
 8003de8:	422d999a 	.word	0x422d999a
 8003dec:	42300000 	.word	0x42300000
 8003df0:	4231999a 	.word	0x4231999a
 8003df4:	42313333 	.word	0x42313333
 8003df8:	42333333 	.word	0x42333333
 8003dfc:	42340000 	.word	0x42340000
 8003e00:	4180cccd 	.word	0x4180cccd
 8003e04:	41a0cccd 	.word	0x41a0cccd
 8003e08:	41b8cccd 	.word	0x41b8cccd
 8003e0c:	41d4cccd 	.word	0x41d4cccd
 8003e10:	41f80000 	.word	0x41f80000
 8003e14:	42186666 	.word	0x42186666
 8003e18:	42240000 	.word	0x42240000
 8003e1c:	422c0000 	.word	0x422c0000
 8003e20:	418e6666 	.word	0x418e6666
 8003e24:	419d999a 	.word	0x419d999a
 8003e28:	41ac0000 	.word	0x41ac0000
 8003e2c:	41c1999a 	.word	0x41c1999a
 8003e30:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003e34:	4aba      	ldr	r2, [pc, #744]	; (8004120 <setconfig_standart1dot6+0x9f4>)
 8003e36:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][5]  = 31.7f;
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e4a:	4ab6      	ldr	r2, [pc, #728]	; (8004124 <setconfig_standart1dot6+0x9f8>)
 8003e4c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][6]  = 38.3f;
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003e56:	fb01 f303 	mul.w	r3, r1, r3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003e60:	4ab1      	ldr	r2, [pc, #708]	; (8004128 <setconfig_standart1dot6+0x9fc>)
 8003e62:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][7]  = 41.1f;
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003e6c:	fb01 f303 	mul.w	r3, r1, r3
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003e76:	4aad      	ldr	r2, [pc, #692]	; (800412c <setconfig_standart1dot6+0xa00>)
 8003e78:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][8]  = 42.6f;
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003e8c:	4aa8      	ldr	r2, [pc, #672]	; (8004130 <setconfig_standart1dot6+0xa04>)
 8003e8e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][9]  = 43.4f;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003ea2:	4aa4      	ldr	r2, [pc, #656]	; (8004134 <setconfig_standart1dot6+0xa08>)
 8003ea4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][10] = 43.0f;
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003eae:	fb01 f303 	mul.w	r3, r1, r3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003eb8:	4a9f      	ldr	r2, [pc, #636]	; (8004138 <setconfig_standart1dot6+0xa0c>)
 8003eba:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][11] = 44.4f;
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8003ece:	4a9b      	ldr	r2, [pc, #620]	; (800413c <setconfig_standart1dot6+0xa10>)
 8003ed0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][12] = 44.3f;
 8003ed2:	78fb      	ldrb	r3, [r7, #3]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003eda:	fb01 f303 	mul.w	r3, r1, r3
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003ee4:	4a96      	ldr	r2, [pc, #600]	; (8004140 <setconfig_standart1dot6+0xa14>)
 8003ee6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][13] = 44.3f;
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8003efa:	4a91      	ldr	r2, [pc, #580]	; (8004140 <setconfig_standart1dot6+0xa14>)
 8003efc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][14] = 44.8f;
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8003f10:	4a8c      	ldr	r2, [pc, #560]	; (8004144 <setconfig_standart1dot6+0xa18>)
 8003f12:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][15] = 45.0f;
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003f26:	4a88      	ldr	r2, [pc, #544]	; (8004148 <setconfig_standart1dot6+0xa1c>)
 8003f28:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[3][0]  = 18.7f;
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003f32:	fb01 f303 	mul.w	r3, r1, r3
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8003f3c:	4a83      	ldr	r2, [pc, #524]	; (800414c <setconfig_standart1dot6+0xa20>)
 8003f3e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][1]  = 20.5f;
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003f48:	fb01 f303 	mul.w	r3, r1, r3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8003f52:	4a7f      	ldr	r2, [pc, #508]	; (8004150 <setconfig_standart1dot6+0xa24>)
 8003f54:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][2]  = 22.2f;
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003f5e:	fb01 f303 	mul.w	r3, r1, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 8003f68:	4a7a      	ldr	r2, [pc, #488]	; (8004154 <setconfig_standart1dot6+0xa28>)
 8003f6a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][3]  = 24.6f;
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8003f7e:	4a76      	ldr	r2, [pc, #472]	; (8004158 <setconfig_standart1dot6+0xa2c>)
 8003f80:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][4]  = 27.7f;
 8003f82:	78fb      	ldrb	r3, [r7, #3]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003f8a:	fb01 f303 	mul.w	r3, r1, r3
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 8003f94:	4a71      	ldr	r2, [pc, #452]	; (800415c <setconfig_standart1dot6+0xa30>)
 8003f96:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][5]  = 31.8f;
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8003faa:	4a6d      	ldr	r2, [pc, #436]	; (8004160 <setconfig_standart1dot6+0xa34>)
 8003fac:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][6]  = 38.2f;
 8003fae:	78fb      	ldrb	r3, [r7, #3]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003fb6:	fb01 f303 	mul.w	r3, r1, r3
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8003fc0:	4a68      	ldr	r2, [pc, #416]	; (8004164 <setconfig_standart1dot6+0xa38>)
 8003fc2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][7]  = 40.9f;
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8003fd6:	4a64      	ldr	r2, [pc, #400]	; (8004168 <setconfig_standart1dot6+0xa3c>)
 8003fd8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][8]  = 42.4f;
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8003fec:	4a5f      	ldr	r2, [pc, #380]	; (800416c <setconfig_standart1dot6+0xa40>)
 8003fee:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][9]  = 43.2f;
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	f640 716c 	movw	r1, #3948	; 0xf6c
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8004002:	4a5b      	ldr	r2, [pc, #364]	; (8004170 <setconfig_standart1dot6+0xa44>)
 8004004:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][10] = 43.7f;
 8004006:	78fb      	ldrb	r3, [r7, #3]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	f640 716c 	movw	r1, #3948	; 0xf6c
 800400e:	fb01 f303 	mul.w	r3, r1, r3
 8004012:	4413      	add	r3, r2
 8004014:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8004018:	4a56      	ldr	r2, [pc, #344]	; (8004174 <setconfig_standart1dot6+0xa48>)
 800401a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][11] = 44.1f;
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	4413      	add	r3, r2
 800402a:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800402e:	4a52      	ldr	r2, [pc, #328]	; (8004178 <setconfig_standart1dot6+0xa4c>)
 8004030:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][12] = 44.0f;
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	f640 716c 	movw	r1, #3948	; 0xf6c
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	4413      	add	r3, r2
 8004040:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8004044:	4a4d      	ldr	r2, [pc, #308]	; (800417c <setconfig_standart1dot6+0xa50>)
 8004046:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][13] = 44.1f;
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	4413      	add	r3, r2
 8004056:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800405a:	4a47      	ldr	r2, [pc, #284]	; (8004178 <setconfig_standart1dot6+0xa4c>)
 800405c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][14] = 44.7f;
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8004070:	4a43      	ldr	r2, [pc, #268]	; (8004180 <setconfig_standart1dot6+0xa54>)
 8004072:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][15] = 44.9f;
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	f640 716c 	movw	r1, #3948	; 0xf6c
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	4413      	add	r3, r2
 8004082:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8004086:	4a3f      	ldr	r2, [pc, #252]	; (8004184 <setconfig_standart1dot6+0xa58>)
 8004088:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[4][0]  = 18.7f;
 800408a:	78fb      	ldrb	r3, [r7, #3]
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	4413      	add	r3, r2
 8004098:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 800409c:	4a2b      	ldr	r2, [pc, #172]	; (800414c <setconfig_standart1dot6+0xa20>)
 800409e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][1]  = 20.4f;
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	f640 716c 	movw	r1, #3948	; 0xf6c
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 734c 	add.w	r3, r3, #816	; 0x330
 80040b2:	4a35      	ldr	r2, [pc, #212]	; (8004188 <setconfig_standart1dot6+0xa5c>)
 80040b4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][2]  = 21.9f;
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	f640 716c 	movw	r1, #3948	; 0xf6c
 80040be:	fb01 f303 	mul.w	r3, r1, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80040c8:	4a30      	ldr	r2, [pc, #192]	; (800418c <setconfig_standart1dot6+0xa60>)
 80040ca:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][3]  = 24.3f;
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	f640 716c 	movw	r1, #3948	; 0xf6c
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	4413      	add	r3, r2
 80040da:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80040de:	4a2c      	ldr	r2, [pc, #176]	; (8004190 <setconfig_standart1dot6+0xa64>)
 80040e0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][4]  = 27.3f;
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	f640 716c 	movw	r1, #3948	; 0xf6c
 80040ea:	fb01 f303 	mul.w	r3, r1, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80040f4:	4a27      	ldr	r2, [pc, #156]	; (8004194 <setconfig_standart1dot6+0xa68>)
 80040f6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][5]  = 31.3f;
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	4413      	add	r3, r2
 8004106:	f503 7350 	add.w	r3, r3, #832	; 0x340
 800410a:	4a23      	ldr	r2, [pc, #140]	; (8004198 <setconfig_standart1dot6+0xa6c>)
 800410c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][6]  = 37.6f;
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004116:	fb01 f303 	mul.w	r3, r1, r3
 800411a:	4413      	add	r3, r2
 800411c:	e03e      	b.n	800419c <setconfig_standart1dot6+0xa70>
 800411e:	bf00      	nop
 8004120:	41dccccd 	.word	0x41dccccd
 8004124:	41fd999a 	.word	0x41fd999a
 8004128:	42193333 	.word	0x42193333
 800412c:	42246666 	.word	0x42246666
 8004130:	422a6666 	.word	0x422a6666
 8004134:	422d999a 	.word	0x422d999a
 8004138:	422c0000 	.word	0x422c0000
 800413c:	4231999a 	.word	0x4231999a
 8004140:	42313333 	.word	0x42313333
 8004144:	42333333 	.word	0x42333333
 8004148:	42340000 	.word	0x42340000
 800414c:	4195999a 	.word	0x4195999a
 8004150:	41a40000 	.word	0x41a40000
 8004154:	41b1999a 	.word	0x41b1999a
 8004158:	41c4cccd 	.word	0x41c4cccd
 800415c:	41dd999a 	.word	0x41dd999a
 8004160:	41fe6666 	.word	0x41fe6666
 8004164:	4218cccd 	.word	0x4218cccd
 8004168:	4223999a 	.word	0x4223999a
 800416c:	4229999a 	.word	0x4229999a
 8004170:	422ccccd 	.word	0x422ccccd
 8004174:	422ecccd 	.word	0x422ecccd
 8004178:	42306666 	.word	0x42306666
 800417c:	42300000 	.word	0x42300000
 8004180:	4232cccd 	.word	0x4232cccd
 8004184:	4233999a 	.word	0x4233999a
 8004188:	41a33333 	.word	0x41a33333
 800418c:	41af3333 	.word	0x41af3333
 8004190:	41c26666 	.word	0x41c26666
 8004194:	41da6666 	.word	0x41da6666
 8004198:	41fa6666 	.word	0x41fa6666
 800419c:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80041a0:	4aba      	ldr	r2, [pc, #744]	; (800448c <setconfig_standart1dot6+0xd60>)
 80041a2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][7]  = 40.3f;
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	f640 716c 	movw	r1, #3948	; 0xf6c
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80041b6:	4ab6      	ldr	r2, [pc, #728]	; (8004490 <setconfig_standart1dot6+0xd64>)
 80041b8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][8]  = 41.7f;
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	f640 716c 	movw	r1, #3948	; 0xf6c
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80041cc:	4ab1      	ldr	r2, [pc, #708]	; (8004494 <setconfig_standart1dot6+0xd68>)
 80041ce:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][9]  = 42.4f;
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	f640 716c 	movw	r1, #3948	; 0xf6c
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	4413      	add	r3, r2
 80041de:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80041e2:	4aad      	ldr	r2, [pc, #692]	; (8004498 <setconfig_standart1dot6+0xd6c>)
 80041e4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][10] = 42.9f;
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	f640 716c 	movw	r1, #3948	; 0xf6c
 80041ee:	fb01 f303 	mul.w	r3, r1, r3
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80041f8:	4aa8      	ldr	r2, [pc, #672]	; (800449c <setconfig_standart1dot6+0xd70>)
 80041fa:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][11] = 43.2f;
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	4413      	add	r3, r2
 800420a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800420e:	4aa4      	ldr	r2, [pc, #656]	; (80044a0 <setconfig_standart1dot6+0xd74>)
 8004210:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][12] = 43.1f;
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	f640 716c 	movw	r1, #3948	; 0xf6c
 800421a:	fb01 f303 	mul.w	r3, r1, r3
 800421e:	4413      	add	r3, r2
 8004220:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8004224:	4a9f      	ldr	r2, [pc, #636]	; (80044a4 <setconfig_standart1dot6+0xd78>)
 8004226:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][13] = 43.3f;
 8004228:	78fb      	ldrb	r3, [r7, #3]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004230:	fb01 f303 	mul.w	r3, r1, r3
 8004234:	4413      	add	r3, r2
 8004236:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800423a:	4a9b      	ldr	r2, [pc, #620]	; (80044a8 <setconfig_standart1dot6+0xd7c>)
 800423c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][14] = 43.0f;
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004246:	fb01 f303 	mul.w	r3, r1, r3
 800424a:	4413      	add	r3, r2
 800424c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8004250:	4a96      	ldr	r2, [pc, #600]	; (80044ac <setconfig_standart1dot6+0xd80>)
 8004252:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][15] = 44.2f;
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	f640 716c 	movw	r1, #3948	; 0xf6c
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	4413      	add	r3, r2
 8004262:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8004266:	4a92      	ldr	r2, [pc, #584]	; (80044b0 <setconfig_standart1dot6+0xd84>)
 8004268:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[5][0]  = 17.4f;
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004272:	fb01 f303 	mul.w	r3, r1, r3
 8004276:	4413      	add	r3, r2
 8004278:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800427c:	4a8d      	ldr	r2, [pc, #564]	; (80044b4 <setconfig_standart1dot6+0xd88>)
 800427e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][1]  = 19.4f;
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	4413      	add	r3, r2
 800428e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8004292:	4a89      	ldr	r2, [pc, #548]	; (80044b8 <setconfig_standart1dot6+0xd8c>)
 8004294:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][2]  = 20.9f;
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	f640 716c 	movw	r1, #3948	; 0xf6c
 800429e:	fb01 f303 	mul.w	r3, r1, r3
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 7365 	add.w	r3, r3, #916	; 0x394
 80042a8:	4a84      	ldr	r2, [pc, #528]	; (80044bc <setconfig_standart1dot6+0xd90>)
 80042aa:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][3]  = 23.2f;
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	f640 716c 	movw	r1, #3948	; 0xf6c
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 7366 	add.w	r3, r3, #920	; 0x398
 80042be:	4a80      	ldr	r2, [pc, #512]	; (80044c0 <setconfig_standart1dot6+0xd94>)
 80042c0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][4]  = 26.2f;
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	f640 716c 	movw	r1, #3948	; 0xf6c
 80042ca:	fb01 f303 	mul.w	r3, r1, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80042d4:	4a7b      	ldr	r2, [pc, #492]	; (80044c4 <setconfig_standart1dot6+0xd98>)
 80042d6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][5]  = 30.1f;
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	f640 716c 	movw	r1, #3948	; 0xf6c
 80042e0:	fb01 f303 	mul.w	r3, r1, r3
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 80042ea:	4a77      	ldr	r2, [pc, #476]	; (80044c8 <setconfig_standart1dot6+0xd9c>)
 80042ec:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][6]  = 36.3f;
 80042ee:	78fb      	ldrb	r3, [r7, #3]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	f640 716c 	movw	r1, #3948	; 0xf6c
 80042f6:	fb01 f303 	mul.w	r3, r1, r3
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004300:	4a72      	ldr	r2, [pc, #456]	; (80044cc <setconfig_standart1dot6+0xda0>)
 8004302:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][7]  = 39.1f;
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	f640 716c 	movw	r1, #3948	; 0xf6c
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	4413      	add	r3, r2
 8004312:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8004316:	4a6e      	ldr	r2, [pc, #440]	; (80044d0 <setconfig_standart1dot6+0xda4>)
 8004318:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][8]  = 40.6f;
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	4413      	add	r3, r2
 8004328:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 800432c:	4a69      	ldr	r2, [pc, #420]	; (80044d4 <setconfig_standart1dot6+0xda8>)
 800432e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][9]  = 41.3f;
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	4413      	add	r3, r2
 800433e:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8004342:	4a65      	ldr	r2, [pc, #404]	; (80044d8 <setconfig_standart1dot6+0xdac>)
 8004344:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][10] = 41.9f;
 8004346:	78fb      	ldrb	r3, [r7, #3]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	f640 716c 	movw	r1, #3948	; 0xf6c
 800434e:	fb01 f303 	mul.w	r3, r1, r3
 8004352:	4413      	add	r3, r2
 8004354:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8004358:	4a60      	ldr	r2, [pc, #384]	; (80044dc <setconfig_standart1dot6+0xdb0>)
 800435a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][11] = 42.2f;
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004364:	fb01 f303 	mul.w	r3, r1, r3
 8004368:	4413      	add	r3, r2
 800436a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800436e:	4a5c      	ldr	r2, [pc, #368]	; (80044e0 <setconfig_standart1dot6+0xdb4>)
 8004370:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][12] = 42.1f;
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	f640 716c 	movw	r1, #3948	; 0xf6c
 800437a:	fb01 f303 	mul.w	r3, r1, r3
 800437e:	4413      	add	r3, r2
 8004380:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004384:	4a57      	ldr	r2, [pc, #348]	; (80044e4 <setconfig_standart1dot6+0xdb8>)
 8004386:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][13] = 42.3f;
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	4413      	add	r3, r2
 8004396:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800439a:	4a53      	ldr	r2, [pc, #332]	; (80044e8 <setconfig_standart1dot6+0xdbc>)
 800439c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][14] = 42.9f;
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	f640 716c 	movw	r1, #3948	; 0xf6c
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043b0:	4a3a      	ldr	r2, [pc, #232]	; (800449c <setconfig_standart1dot6+0xd70>)
 80043b2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][15] = 43.1f;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	f640 716c 	movw	r1, #3948	; 0xf6c
 80043bc:	fb01 f303 	mul.w	r3, r1, r3
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80043c6:	4a37      	ldr	r2, [pc, #220]	; (80044a4 <setconfig_standart1dot6+0xd78>)
 80043c8:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[6][0]  = 14.9f;
 80043ca:	78fb      	ldrb	r3, [r7, #3]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	f640 716c 	movw	r1, #3948	; 0xf6c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80043dc:	4a43      	ldr	r2, [pc, #268]	; (80044ec <setconfig_standart1dot6+0xdc0>)
 80043de:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][1]  = 17.2f;
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	f640 716c 	movw	r1, #3948	; 0xf6c
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80043f2:	4a3f      	ldr	r2, [pc, #252]	; (80044f0 <setconfig_standart1dot6+0xdc4>)
 80043f4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][2]  = 18.7f;
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	f640 716c 	movw	r1, #3948	; 0xf6c
 80043fe:	fb01 f303 	mul.w	r3, r1, r3
 8004402:	4413      	add	r3, r2
 8004404:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8004408:	4a3a      	ldr	r2, [pc, #232]	; (80044f4 <setconfig_standart1dot6+0xdc8>)
 800440a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][3]  = 21.1f;
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	4413      	add	r3, r2
 800441a:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 800441e:	4a36      	ldr	r2, [pc, #216]	; (80044f8 <setconfig_standart1dot6+0xdcc>)
 8004420:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][4]  = 24.3f;
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	f640 716c 	movw	r1, #3948	; 0xf6c
 800442a:	fb01 f303 	mul.w	r3, r1, r3
 800442e:	4413      	add	r3, r2
 8004430:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8004434:	4a31      	ldr	r2, [pc, #196]	; (80044fc <setconfig_standart1dot6+0xdd0>)
 8004436:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][5]  = 28.4f;
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	4413      	add	r3, r2
 8004446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800444a:	4a2d      	ldr	r2, [pc, #180]	; (8004500 <setconfig_standart1dot6+0xdd4>)
 800444c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][6]  = 34.3f;
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004456:	fb01 f303 	mul.w	r3, r1, r3
 800445a:	4413      	add	r3, r2
 800445c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004460:	4a28      	ldr	r2, [pc, #160]	; (8004504 <setconfig_standart1dot6+0xdd8>)
 8004462:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][7]  = 37.3f;
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	f640 716c 	movw	r1, #3948	; 0xf6c
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	4413      	add	r3, r2
 8004472:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004476:	4a24      	ldr	r2, [pc, #144]	; (8004508 <setconfig_standart1dot6+0xddc>)
 8004478:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][8]  = 38.9f;
 800447a:	78fb      	ldrb	r3, [r7, #3]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	4413      	add	r3, r2
 8004488:	e040      	b.n	800450c <setconfig_standart1dot6+0xde0>
 800448a:	bf00      	nop
 800448c:	42166666 	.word	0x42166666
 8004490:	42213333 	.word	0x42213333
 8004494:	4226cccd 	.word	0x4226cccd
 8004498:	4229999a 	.word	0x4229999a
 800449c:	422b999a 	.word	0x422b999a
 80044a0:	422ccccd 	.word	0x422ccccd
 80044a4:	422c6666 	.word	0x422c6666
 80044a8:	422d3333 	.word	0x422d3333
 80044ac:	422c0000 	.word	0x422c0000
 80044b0:	4230cccd 	.word	0x4230cccd
 80044b4:	418b3333 	.word	0x418b3333
 80044b8:	419b3333 	.word	0x419b3333
 80044bc:	41a73333 	.word	0x41a73333
 80044c0:	41b9999a 	.word	0x41b9999a
 80044c4:	41d1999a 	.word	0x41d1999a
 80044c8:	41f0cccd 	.word	0x41f0cccd
 80044cc:	42113333 	.word	0x42113333
 80044d0:	421c6666 	.word	0x421c6666
 80044d4:	42226666 	.word	0x42226666
 80044d8:	42253333 	.word	0x42253333
 80044dc:	4227999a 	.word	0x4227999a
 80044e0:	4228cccd 	.word	0x4228cccd
 80044e4:	42286666 	.word	0x42286666
 80044e8:	42293333 	.word	0x42293333
 80044ec:	416e6666 	.word	0x416e6666
 80044f0:	4189999a 	.word	0x4189999a
 80044f4:	4195999a 	.word	0x4195999a
 80044f8:	41a8cccd 	.word	0x41a8cccd
 80044fc:	41c26666 	.word	0x41c26666
 8004500:	41e33333 	.word	0x41e33333
 8004504:	42093333 	.word	0x42093333
 8004508:	42153333 	.word	0x42153333
 800450c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004510:	4aba      	ldr	r2, [pc, #744]	; (80047fc <setconfig_standart1dot6+0x10d0>)
 8004512:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][9]  = 39.8f;
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	f640 716c 	movw	r1, #3948	; 0xf6c
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	4413      	add	r3, r2
 8004522:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8004526:	4ab6      	ldr	r2, [pc, #728]	; (8004800 <setconfig_standart1dot6+0x10d4>)
 8004528:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][10] = 40.6f;
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004532:	fb01 f303 	mul.w	r3, r1, r3
 8004536:	4413      	add	r3, r2
 8004538:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800453c:	4ab1      	ldr	r2, [pc, #708]	; (8004804 <setconfig_standart1dot6+0x10d8>)
 800453e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][11] = 41.0f;
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004548:	fb01 f303 	mul.w	r3, r1, r3
 800454c:	4413      	add	r3, r2
 800454e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8004552:	4aad      	ldr	r2, [pc, #692]	; (8004808 <setconfig_standart1dot6+0x10dc>)
 8004554:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][12] = 41.0f;
 8004556:	78fb      	ldrb	r3, [r7, #3]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	f640 716c 	movw	r1, #3948	; 0xf6c
 800455e:	fb01 f303 	mul.w	r3, r1, r3
 8004562:	4413      	add	r3, r2
 8004564:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004568:	4aa7      	ldr	r2, [pc, #668]	; (8004808 <setconfig_standart1dot6+0x10dc>)
 800456a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][13] = 41.3f;
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	4413      	add	r3, r2
 800457a:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800457e:	4aa3      	ldr	r2, [pc, #652]	; (800480c <setconfig_standart1dot6+0x10e0>)
 8004580:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][14] = 41.8f;
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	f640 716c 	movw	r1, #3948	; 0xf6c
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	4413      	add	r3, r2
 8004590:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004594:	4a9e      	ldr	r2, [pc, #632]	; (8004810 <setconfig_standart1dot6+0x10e4>)
 8004596:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][15] = 42.0f;
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	f640 716c 	movw	r1, #3948	; 0xf6c
 80045a0:	fb01 f303 	mul.w	r3, r1, r3
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80045aa:	4a9a      	ldr	r2, [pc, #616]	; (8004814 <setconfig_standart1dot6+0x10e8>)
 80045ac:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[7][0]  = 12.2f;
 80045ae:	78fb      	ldrb	r3, [r7, #3]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	f640 716c 	movw	r1, #3948	; 0xf6c
 80045b6:	fb01 f303 	mul.w	r3, r1, r3
 80045ba:	4413      	add	r3, r2
 80045bc:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 80045c0:	4a95      	ldr	r2, [pc, #596]	; (8004818 <setconfig_standart1dot6+0x10ec>)
 80045c2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][1]  = 14.5f;
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	f640 716c 	movw	r1, #3948	; 0xf6c
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80045d6:	4a91      	ldr	r2, [pc, #580]	; (800481c <setconfig_standart1dot6+0x10f0>)
 80045d8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][2]  = 15.9f;
 80045da:	78fb      	ldrb	r3, [r7, #3]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	f640 716c 	movw	r1, #3948	; 0xf6c
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	4413      	add	r3, r2
 80045e8:	f203 4354 	addw	r3, r3, #1108	; 0x454
 80045ec:	4a8c      	ldr	r2, [pc, #560]	; (8004820 <setconfig_standart1dot6+0x10f4>)
 80045ee:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][3]  = 17.9f;
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	f640 716c 	movw	r1, #3948	; 0xf6c
 80045f8:	fb01 f303 	mul.w	r3, r1, r3
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8004602:	4a88      	ldr	r2, [pc, #544]	; (8004824 <setconfig_standart1dot6+0x10f8>)
 8004604:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][4]  = 21.5f;
 8004606:	78fb      	ldrb	r3, [r7, #3]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	f640 716c 	movw	r1, #3948	; 0xf6c
 800460e:	fb01 f303 	mul.w	r3, r1, r3
 8004612:	4413      	add	r3, r2
 8004614:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8004618:	4a83      	ldr	r2, [pc, #524]	; (8004828 <setconfig_standart1dot6+0x10fc>)
 800461a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][5]  = 26.0f;
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004624:	fb01 f303 	mul.w	r3, r1, r3
 8004628:	4413      	add	r3, r2
 800462a:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800462e:	4a7f      	ldr	r2, [pc, #508]	; (800482c <setconfig_standart1dot6+0x1100>)
 8004630:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][6]  = 31.9f;
 8004632:	78fb      	ldrb	r3, [r7, #3]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	f640 716c 	movw	r1, #3948	; 0xf6c
 800463a:	fb01 f303 	mul.w	r3, r1, r3
 800463e:	4413      	add	r3, r2
 8004640:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8004644:	4a7a      	ldr	r2, [pc, #488]	; (8004830 <setconfig_standart1dot6+0x1104>)
 8004646:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][7]  = 35.0f;
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	4413      	add	r3, r2
 8004656:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800465a:	4a76      	ldr	r2, [pc, #472]	; (8004834 <setconfig_standart1dot6+0x1108>)
 800465c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][8]  = 36.8f;
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	4413      	add	r3, r2
 800466c:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8004670:	4a71      	ldr	r2, [pc, #452]	; (8004838 <setconfig_standart1dot6+0x110c>)
 8004672:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][9]  = 37.9f;
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	f640 716c 	movw	r1, #3948	; 0xf6c
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	4413      	add	r3, r2
 8004682:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8004686:	4a6d      	ldr	r2, [pc, #436]	; (800483c <setconfig_standart1dot6+0x1110>)
 8004688:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][10] = 38.9f;
 800468a:	78fb      	ldrb	r3, [r7, #3]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004692:	fb01 f303 	mul.w	r3, r1, r3
 8004696:	4413      	add	r3, r2
 8004698:	f203 4374 	addw	r3, r3, #1140	; 0x474
 800469c:	4a57      	ldr	r2, [pc, #348]	; (80047fc <setconfig_standart1dot6+0x10d0>)
 800469e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][11] = 39.5f;
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	f640 716c 	movw	r1, #3948	; 0xf6c
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 80046b2:	4a63      	ldr	r2, [pc, #396]	; (8004840 <setconfig_standart1dot6+0x1114>)
 80046b4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][12] = 39.5f;
 80046b6:	78fb      	ldrb	r3, [r7, #3]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	f640 716c 	movw	r1, #3948	; 0xf6c
 80046be:	fb01 f303 	mul.w	r3, r1, r3
 80046c2:	4413      	add	r3, r2
 80046c4:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 80046c8:	4a5d      	ldr	r2, [pc, #372]	; (8004840 <setconfig_standart1dot6+0x1114>)
 80046ca:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][13] = 40.2f;
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	f640 716c 	movw	r1, #3948	; 0xf6c
 80046d4:	fb01 f303 	mul.w	r3, r1, r3
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80046de:	4a59      	ldr	r2, [pc, #356]	; (8004844 <setconfig_standart1dot6+0x1118>)
 80046e0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][14] = 40.8f;
 80046e2:	78fb      	ldrb	r3, [r7, #3]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	f640 716c 	movw	r1, #3948	; 0xf6c
 80046ea:	fb01 f303 	mul.w	r3, r1, r3
 80046ee:	4413      	add	r3, r2
 80046f0:	f203 4384 	addw	r3, r3, #1156	; 0x484
 80046f4:	4a54      	ldr	r2, [pc, #336]	; (8004848 <setconfig_standart1dot6+0x111c>)
 80046f6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][15] = 41.0f;
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004700:	fb01 f303 	mul.w	r3, r1, r3
 8004704:	4413      	add	r3, r2
 8004706:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 800470a:	4a3f      	ldr	r2, [pc, #252]	; (8004808 <setconfig_standart1dot6+0x10dc>)
 800470c:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[8][0]  = 10.2f;
 800470e:	78fb      	ldrb	r3, [r7, #3]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	4413      	add	r3, r2
 800471c:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 8004720:	4a4a      	ldr	r2, [pc, #296]	; (800484c <setconfig_standart1dot6+0x1120>)
 8004722:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][1]  = 11.9f;
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	f640 716c 	movw	r1, #3948	; 0xf6c
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	4413      	add	r3, r2
 8004732:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8004736:	4a46      	ldr	r2, [pc, #280]	; (8004850 <setconfig_standart1dot6+0x1124>)
 8004738:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][2]  = 13.1f;
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	4413      	add	r3, r2
 8004748:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 800474c:	4a41      	ldr	r2, [pc, #260]	; (8004854 <setconfig_standart1dot6+0x1128>)
 800474e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][3]  = 14.9f;
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004758:	fb01 f303 	mul.w	r3, r1, r3
 800475c:	4413      	add	r3, r2
 800475e:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8004762:	4a3d      	ldr	r2, [pc, #244]	; (8004858 <setconfig_standart1dot6+0x112c>)
 8004764:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][4]  = 18.3f;
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	f640 716c 	movw	r1, #3948	; 0xf6c
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	4413      	add	r3, r2
 8004774:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8004778:	4a38      	ldr	r2, [pc, #224]	; (800485c <setconfig_standart1dot6+0x1130>)
 800477a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][5]  = 22.8f;
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	4413      	add	r3, r2
 800478a:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800478e:	4a34      	ldr	r2, [pc, #208]	; (8004860 <setconfig_standart1dot6+0x1134>)
 8004790:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][6]  = 28.4f;
 8004792:	78fb      	ldrb	r3, [r7, #3]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	f640 716c 	movw	r1, #3948	; 0xf6c
 800479a:	fb01 f303 	mul.w	r3, r1, r3
 800479e:	4413      	add	r3, r2
 80047a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047a4:	4a2f      	ldr	r2, [pc, #188]	; (8004864 <setconfig_standart1dot6+0x1138>)
 80047a6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][7]  = 31.9f;
 80047a8:	78fb      	ldrb	r3, [r7, #3]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	f640 716c 	movw	r1, #3948	; 0xf6c
 80047b0:	fb01 f303 	mul.w	r3, r1, r3
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80047ba:	4a1d      	ldr	r2, [pc, #116]	; (8004830 <setconfig_standart1dot6+0x1104>)
 80047bc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][8]  = 34.2f;
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	f640 716c 	movw	r1, #3948	; 0xf6c
 80047c6:	fb01 f303 	mul.w	r3, r1, r3
 80047ca:	4413      	add	r3, r2
 80047cc:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 80047d0:	4a25      	ldr	r2, [pc, #148]	; (8004868 <setconfig_standart1dot6+0x113c>)
 80047d2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][9]  = 35.8f;
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	f640 716c 	movw	r1, #3948	; 0xf6c
 80047dc:	fb01 f303 	mul.w	r3, r1, r3
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 80047e6:	4a21      	ldr	r2, [pc, #132]	; (800486c <setconfig_standart1dot6+0x1140>)
 80047e8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][10] = 37.2f;
 80047ea:	78fb      	ldrb	r3, [r7, #3]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	f640 716c 	movw	r1, #3948	; 0xf6c
 80047f2:	fb01 f303 	mul.w	r3, r1, r3
 80047f6:	4413      	add	r3, r2
 80047f8:	e03a      	b.n	8004870 <setconfig_standart1dot6+0x1144>
 80047fa:	bf00      	nop
 80047fc:	421b999a 	.word	0x421b999a
 8004800:	421f3333 	.word	0x421f3333
 8004804:	42226666 	.word	0x42226666
 8004808:	42240000 	.word	0x42240000
 800480c:	42253333 	.word	0x42253333
 8004810:	42273333 	.word	0x42273333
 8004814:	42280000 	.word	0x42280000
 8004818:	41433333 	.word	0x41433333
 800481c:	41680000 	.word	0x41680000
 8004820:	417e6666 	.word	0x417e6666
 8004824:	418f3333 	.word	0x418f3333
 8004828:	41ac0000 	.word	0x41ac0000
 800482c:	41d00000 	.word	0x41d00000
 8004830:	41ff3333 	.word	0x41ff3333
 8004834:	420c0000 	.word	0x420c0000
 8004838:	42133333 	.word	0x42133333
 800483c:	4217999a 	.word	0x4217999a
 8004840:	421e0000 	.word	0x421e0000
 8004844:	4220cccd 	.word	0x4220cccd
 8004848:	42233333 	.word	0x42233333
 800484c:	41233333 	.word	0x41233333
 8004850:	413e6666 	.word	0x413e6666
 8004854:	4151999a 	.word	0x4151999a
 8004858:	416e6666 	.word	0x416e6666
 800485c:	41926666 	.word	0x41926666
 8004860:	41b66666 	.word	0x41b66666
 8004864:	41e33333 	.word	0x41e33333
 8004868:	4208cccd 	.word	0x4208cccd
 800486c:	420f3333 	.word	0x420f3333
 8004870:	f203 43d4 	addw	r3, r3, #1236	; 0x4d4
 8004874:	4aba      	ldr	r2, [pc, #744]	; (8004b60 <setconfig_standart1dot6+0x1434>)
 8004876:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][11] = 38.1f;
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004880:	fb01 f303 	mul.w	r3, r1, r3
 8004884:	4413      	add	r3, r2
 8004886:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 800488a:	4ab6      	ldr	r2, [pc, #728]	; (8004b64 <setconfig_standart1dot6+0x1438>)
 800488c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][12] = 38.7f;
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004896:	fb01 f303 	mul.w	r3, r1, r3
 800489a:	4413      	add	r3, r2
 800489c:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 80048a0:	4ab1      	ldr	r2, [pc, #708]	; (8004b68 <setconfig_standart1dot6+0x143c>)
 80048a2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][13] = 39.1f;
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	f640 716c 	movw	r1, #3948	; 0xf6c
 80048ac:	fb01 f303 	mul.w	r3, r1, r3
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 80048b6:	4aad      	ldr	r2, [pc, #692]	; (8004b6c <setconfig_standart1dot6+0x1440>)
 80048b8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][14] = 39.7f;
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	f640 716c 	movw	r1, #3948	; 0xf6c
 80048c2:	fb01 f303 	mul.w	r3, r1, r3
 80048c6:	4413      	add	r3, r2
 80048c8:	f203 43e4 	addw	r3, r3, #1252	; 0x4e4
 80048cc:	4aa8      	ldr	r2, [pc, #672]	; (8004b70 <setconfig_standart1dot6+0x1444>)
 80048ce:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][15] = 39.9f;
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	f640 716c 	movw	r1, #3948	; 0xf6c
 80048d8:	fb01 f303 	mul.w	r3, r1, r3
 80048dc:	4413      	add	r3, r2
 80048de:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 80048e2:	4aa4      	ldr	r2, [pc, #656]	; (8004b74 <setconfig_standart1dot6+0x1448>)
 80048e4:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[9][0]  = 8.5f;
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	f640 716c 	movw	r1, #3948	; 0xf6c
 80048ee:	fb01 f303 	mul.w	r3, r1, r3
 80048f2:	4413      	add	r3, r2
 80048f4:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 80048f8:	4a9f      	ldr	r2, [pc, #636]	; (8004b78 <setconfig_standart1dot6+0x144c>)
 80048fa:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][1]  = 9.7f;
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004904:	fb01 f303 	mul.w	r3, r1, r3
 8004908:	4413      	add	r3, r2
 800490a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800490e:	4a9b      	ldr	r2, [pc, #620]	; (8004b7c <setconfig_standart1dot6+0x1450>)
 8004910:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][2]  = 10.8f;
 8004912:	78fb      	ldrb	r3, [r7, #3]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	f640 716c 	movw	r1, #3948	; 0xf6c
 800491a:	fb01 f303 	mul.w	r3, r1, r3
 800491e:	4413      	add	r3, r2
 8004920:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8004924:	4a96      	ldr	r2, [pc, #600]	; (8004b80 <setconfig_standart1dot6+0x1454>)
 8004926:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][3]  = 12.4f;
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004930:	fb01 f303 	mul.w	r3, r1, r3
 8004934:	4413      	add	r3, r2
 8004936:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 800493a:	4a92      	ldr	r2, [pc, #584]	; (8004b84 <setconfig_standart1dot6+0x1458>)
 800493c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][4]  = 15.3f;
 800493e:	78fb      	ldrb	r3, [r7, #3]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	4413      	add	r3, r2
 800494c:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8004950:	4a8d      	ldr	r2, [pc, #564]	; (8004b88 <setconfig_standart1dot6+0x145c>)
 8004952:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][5]  = 19.2f;
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	f640 716c 	movw	r1, #3948	; 0xf6c
 800495c:	fb01 f303 	mul.w	r3, r1, r3
 8004960:	4413      	add	r3, r2
 8004962:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8004966:	4a89      	ldr	r2, [pc, #548]	; (8004b8c <setconfig_standart1dot6+0x1460>)
 8004968:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][6]  = 23.0f;
 800496a:	78fb      	ldrb	r3, [r7, #3]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004972:	fb01 f303 	mul.w	r3, r1, r3
 8004976:	4413      	add	r3, r2
 8004978:	f203 5324 	addw	r3, r3, #1316	; 0x524
 800497c:	4a84      	ldr	r2, [pc, #528]	; (8004b90 <setconfig_standart1dot6+0x1464>)
 800497e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][7]  = 27.9f;
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	4413      	add	r3, r2
 800498e:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8004992:	4a80      	ldr	r2, [pc, #512]	; (8004b94 <setconfig_standart1dot6+0x1468>)
 8004994:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][8]  = 30.0f;
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	f640 716c 	movw	r1, #3948	; 0xf6c
 800499e:	fb01 f303 	mul.w	r3, r1, r3
 80049a2:	4413      	add	r3, r2
 80049a4:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 80049a8:	4a7b      	ldr	r2, [pc, #492]	; (8004b98 <setconfig_standart1dot6+0x146c>)
 80049aa:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][9]  = 33.2f;
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	f640 716c 	movw	r1, #3948	; 0xf6c
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 80049be:	4a77      	ldr	r2, [pc, #476]	; (8004b9c <setconfig_standart1dot6+0x1470>)
 80049c0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][10] = 35.4f;
 80049c2:	78fb      	ldrb	r3, [r7, #3]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	f640 716c 	movw	r1, #3948	; 0xf6c
 80049ca:	fb01 f303 	mul.w	r3, r1, r3
 80049ce:	4413      	add	r3, r2
 80049d0:	f203 5334 	addw	r3, r3, #1332	; 0x534
 80049d4:	4a72      	ldr	r2, [pc, #456]	; (8004ba0 <setconfig_standart1dot6+0x1474>)
 80049d6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][11] = 36.5f;
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	f640 716c 	movw	r1, #3948	; 0xf6c
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 80049ea:	4a6e      	ldr	r2, [pc, #440]	; (8004ba4 <setconfig_standart1dot6+0x1478>)
 80049ec:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][12] = 36.7f;
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	f640 716c 	movw	r1, #3948	; 0xf6c
 80049f6:	fb01 f303 	mul.w	r3, r1, r3
 80049fa:	4413      	add	r3, r2
 80049fc:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8004a00:	4a69      	ldr	r2, [pc, #420]	; (8004ba8 <setconfig_standart1dot6+0x147c>)
 8004a02:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][13] = 37.0f;
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004a0c:	fb01 f303 	mul.w	r3, r1, r3
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8004a16:	4a65      	ldr	r2, [pc, #404]	; (8004bac <setconfig_standart1dot6+0x1480>)
 8004a18:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][14] = 37.5f;
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004a22:	fb01 f303 	mul.w	r3, r1, r3
 8004a26:	4413      	add	r3, r2
 8004a28:	f203 5344 	addw	r3, r3, #1348	; 0x544
 8004a2c:	4a60      	ldr	r2, [pc, #384]	; (8004bb0 <setconfig_standart1dot6+0x1484>)
 8004a2e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][15] = 37.7f;
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 8004a42:	4a5c      	ldr	r2, [pc, #368]	; (8004bb4 <setconfig_standart1dot6+0x1488>)
 8004a44:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[10][0]  = 7.1f;
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004a4e:	fb01 f303 	mul.w	r3, r1, r3
 8004a52:	4413      	add	r3, r2
 8004a54:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8004a58:	4a57      	ldr	r2, [pc, #348]	; (8004bb8 <setconfig_standart1dot6+0x148c>)
 8004a5a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][1]  = 8.2f;
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004a64:	fb01 f303 	mul.w	r3, r1, r3
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8004a6e:	4a53      	ldr	r2, [pc, #332]	; (8004bbc <setconfig_standart1dot6+0x1490>)
 8004a70:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][2]  = 9.2f;
 8004a72:	78fb      	ldrb	r3, [r7, #3]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	f203 5374 	addw	r3, r3, #1396	; 0x574
 8004a84:	4a4e      	ldr	r2, [pc, #312]	; (8004bc0 <setconfig_standart1dot6+0x1494>)
 8004a86:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][3]  = 10.6f;
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004a90:	fb01 f303 	mul.w	r3, r1, r3
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8004a9a:	4a4a      	ldr	r2, [pc, #296]	; (8004bc4 <setconfig_standart1dot6+0x1498>)
 8004a9c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][4]  = 12.9f;
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004aa6:	fb01 f303 	mul.w	r3, r1, r3
 8004aaa:	4413      	add	r3, r2
 8004aac:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8004ab0:	4a45      	ldr	r2, [pc, #276]	; (8004bc8 <setconfig_standart1dot6+0x149c>)
 8004ab2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][5]  = 16.1f;
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004abc:	fb01 f303 	mul.w	r3, r1, r3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8004ac6:	4a41      	ldr	r2, [pc, #260]	; (8004bcc <setconfig_standart1dot6+0x14a0>)
 8004ac8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][6]  = 20.8f;
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004ad2:	fb01 f303 	mul.w	r3, r1, r3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f203 5384 	addw	r3, r3, #1412	; 0x584
 8004adc:	4a3c      	ldr	r2, [pc, #240]	; (8004bd0 <setconfig_standart1dot6+0x14a4>)
 8004ade:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][7]  = 24.0f;
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8004af2:	4a38      	ldr	r2, [pc, #224]	; (8004bd4 <setconfig_standart1dot6+0x14a8>)
 8004af4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][8]  = 28.3f;
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004afe:	fb01 f303 	mul.w	r3, r1, r3
 8004b02:	4413      	add	r3, r2
 8004b04:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8004b08:	4a33      	ldr	r2, [pc, #204]	; (8004bd8 <setconfig_standart1dot6+0x14ac>)
 8004b0a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][9]  = 30.8f;
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8004b1e:	4a2f      	ldr	r2, [pc, #188]	; (8004bdc <setconfig_standart1dot6+0x14b0>)
 8004b20:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][10] = 33.4f;
 8004b22:	78fb      	ldrb	r3, [r7, #3]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004b2a:	fb01 f303 	mul.w	r3, r1, r3
 8004b2e:	4413      	add	r3, r2
 8004b30:	f203 5394 	addw	r3, r3, #1428	; 0x594
 8004b34:	4a2a      	ldr	r2, [pc, #168]	; (8004be0 <setconfig_standart1dot6+0x14b4>)
 8004b36:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][11] = 34.2f;
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004b40:	fb01 f303 	mul.w	r3, r1, r3
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8004b4a:	4a26      	ldr	r2, [pc, #152]	; (8004be4 <setconfig_standart1dot6+0x14b8>)
 8004b4c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][12] = 33.7f;
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004b56:	fb01 f303 	mul.w	r3, r1, r3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	e044      	b.n	8004be8 <setconfig_standart1dot6+0x14bc>
 8004b5e:	bf00      	nop
 8004b60:	4214cccd 	.word	0x4214cccd
 8004b64:	42186666 	.word	0x42186666
 8004b68:	421acccd 	.word	0x421acccd
 8004b6c:	421c6666 	.word	0x421c6666
 8004b70:	421ecccd 	.word	0x421ecccd
 8004b74:	421f999a 	.word	0x421f999a
 8004b78:	41080000 	.word	0x41080000
 8004b7c:	411b3333 	.word	0x411b3333
 8004b80:	412ccccd 	.word	0x412ccccd
 8004b84:	41466666 	.word	0x41466666
 8004b88:	4174cccd 	.word	0x4174cccd
 8004b8c:	4199999a 	.word	0x4199999a
 8004b90:	41b80000 	.word	0x41b80000
 8004b94:	41df3333 	.word	0x41df3333
 8004b98:	41f00000 	.word	0x41f00000
 8004b9c:	4204cccd 	.word	0x4204cccd
 8004ba0:	420d999a 	.word	0x420d999a
 8004ba4:	42120000 	.word	0x42120000
 8004ba8:	4212cccd 	.word	0x4212cccd
 8004bac:	42140000 	.word	0x42140000
 8004bb0:	42160000 	.word	0x42160000
 8004bb4:	4216cccd 	.word	0x4216cccd
 8004bb8:	40e33333 	.word	0x40e33333
 8004bbc:	41033333 	.word	0x41033333
 8004bc0:	41133333 	.word	0x41133333
 8004bc4:	4129999a 	.word	0x4129999a
 8004bc8:	414e6666 	.word	0x414e6666
 8004bcc:	4180cccd 	.word	0x4180cccd
 8004bd0:	41a66666 	.word	0x41a66666
 8004bd4:	41c00000 	.word	0x41c00000
 8004bd8:	41e26666 	.word	0x41e26666
 8004bdc:	41f66666 	.word	0x41f66666
 8004be0:	4205999a 	.word	0x4205999a
 8004be4:	4208cccd 	.word	0x4208cccd
 8004be8:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 8004bec:	4aba      	ldr	r2, [pc, #744]	; (8004ed8 <setconfig_standart1dot6+0x17ac>)
 8004bee:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][13] = 33.9f;
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004bf8:	fb01 f303 	mul.w	r3, r1, r3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8004c02:	4ab6      	ldr	r2, [pc, #728]	; (8004edc <setconfig_standart1dot6+0x17b0>)
 8004c04:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][14] = 34.2f;
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004c0e:	fb01 f303 	mul.w	r3, r1, r3
 8004c12:	4413      	add	r3, r2
 8004c14:	f203 53a4 	addw	r3, r3, #1444	; 0x5a4
 8004c18:	4ab1      	ldr	r2, [pc, #708]	; (8004ee0 <setconfig_standart1dot6+0x17b4>)
 8004c1a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][15] = 34.3f;
 8004c1c:	78fb      	ldrb	r3, [r7, #3]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 8004c2e:	4aad      	ldr	r2, [pc, #692]	; (8004ee4 <setconfig_standart1dot6+0x17b8>)
 8004c30:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[11][0]  = 6.3f;
 8004c32:	78fb      	ldrb	r3, [r7, #3]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004c3a:	fb01 f303 	mul.w	r3, r1, r3
 8004c3e:	4413      	add	r3, r2
 8004c40:	f203 53cc 	addw	r3, r3, #1484	; 0x5cc
 8004c44:	4aa8      	ldr	r2, [pc, #672]	; (8004ee8 <setconfig_standart1dot6+0x17bc>)
 8004c46:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][1]  = 7.2f;
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004c50:	fb01 f303 	mul.w	r3, r1, r3
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8004c5a:	4aa4      	ldr	r2, [pc, #656]	; (8004eec <setconfig_standart1dot6+0x17c0>)
 8004c5c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][2]  = 8.1f;
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004c66:	fb01 f303 	mul.w	r3, r1, r3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 8004c70:	4a9f      	ldr	r2, [pc, #636]	; (8004ef0 <setconfig_standart1dot6+0x17c4>)
 8004c72:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][3]  = 9.3f;
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004c7c:	fb01 f303 	mul.w	r3, r1, r3
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8004c86:	4a9b      	ldr	r2, [pc, #620]	; (8004ef4 <setconfig_standart1dot6+0x17c8>)
 8004c88:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][4]  = 11.1f;
 8004c8a:	78fb      	ldrb	r3, [r7, #3]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004c92:	fb01 f303 	mul.w	r3, r1, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8004c9c:	4a96      	ldr	r2, [pc, #600]	; (8004ef8 <setconfig_standart1dot6+0x17cc>)
 8004c9e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][5]  = 14.0f;
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
 8004cb2:	4a92      	ldr	r2, [pc, #584]	; (8004efc <setconfig_standart1dot6+0x17d0>)
 8004cb4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][6]  = 18.0f;
 8004cb6:	78fb      	ldrb	r3, [r7, #3]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004cbe:	fb01 f303 	mul.w	r3, r1, r3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 8004cc8:	4a8d      	ldr	r2, [pc, #564]	; (8004f00 <setconfig_standart1dot6+0x17d4>)
 8004cca:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][7]  = 23.3f;
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8004cde:	4a89      	ldr	r2, [pc, #548]	; (8004f04 <setconfig_standart1dot6+0x17d8>)
 8004ce0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][8]  = 26.9f;
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	4413      	add	r3, r2
 8004cf0:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8004cf4:	4a84      	ldr	r2, [pc, #528]	; (8004f08 <setconfig_standart1dot6+0x17dc>)
 8004cf6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][9]  = 29.1f;
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004d00:	fb01 f303 	mul.w	r3, r1, r3
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8004d0a:	4a80      	ldr	r2, [pc, #512]	; (8004f0c <setconfig_standart1dot6+0x17e0>)
 8004d0c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][10] = 31.6f;
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004d16:	fb01 f303 	mul.w	r3, r1, r3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004d20:	4a7b      	ldr	r2, [pc, #492]	; (8004f10 <setconfig_standart1dot6+0x17e4>)
 8004d22:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][11] = 32.0f;
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 8004d36:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004d3a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][12] = 31.0f;
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	4413      	add	r3, r2
 8004d4a:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8004d4e:	4a71      	ldr	r2, [pc, #452]	; (8004f14 <setconfig_standart1dot6+0x17e8>)
 8004d50:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][13] = 31.3f;
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004d5a:	fb01 f303 	mul.w	r3, r1, r3
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004d64:	4a6c      	ldr	r2, [pc, #432]	; (8004f18 <setconfig_standart1dot6+0x17ec>)
 8004d66:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][14] = 31.7f;
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004d70:	fb01 f303 	mul.w	r3, r1, r3
 8004d74:	4413      	add	r3, r2
 8004d76:	f203 6304 	addw	r3, r3, #1540	; 0x604
 8004d7a:	4a68      	ldr	r2, [pc, #416]	; (8004f1c <setconfig_standart1dot6+0x17f0>)
 8004d7c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][15] = 31.8f;
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004d86:	fb01 f303 	mul.w	r3, r1, r3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004d90:	4a63      	ldr	r2, [pc, #396]	; (8004f20 <setconfig_standart1dot6+0x17f4>)
 8004d92:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[12][0]  = 6.1f;
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004d9c:	fb01 f303 	mul.w	r3, r1, r3
 8004da0:	4413      	add	r3, r2
 8004da2:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8004da6:	4a5f      	ldr	r2, [pc, #380]	; (8004f24 <setconfig_standart1dot6+0x17f8>)
 8004da8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][1]  = 6.7f;
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004db2:	fb01 f303 	mul.w	r3, r1, r3
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 8004dbc:	4a5a      	ldr	r2, [pc, #360]	; (8004f28 <setconfig_standart1dot6+0x17fc>)
 8004dbe:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][2]  = 7.3f;
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	4413      	add	r3, r2
 8004dce:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8004dd2:	4a56      	ldr	r2, [pc, #344]	; (8004f2c <setconfig_standart1dot6+0x1800>)
 8004dd4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][3]  = 8.4f;
 8004dd6:	78fb      	ldrb	r3, [r7, #3]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004dde:	fb01 f303 	mul.w	r3, r1, r3
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8004de8:	4a51      	ldr	r2, [pc, #324]	; (8004f30 <setconfig_standart1dot6+0x1804>)
 8004dea:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][4]  = 9.9f;
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004df4:	fb01 f303 	mul.w	r3, r1, r3
 8004df8:	4413      	add	r3, r2
 8004dfa:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8004dfe:	4a4d      	ldr	r2, [pc, #308]	; (8004f34 <setconfig_standart1dot6+0x1808>)
 8004e00:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][5]  = 12.5f;
 8004e02:	78fb      	ldrb	r3, [r7, #3]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004e0a:	fb01 f303 	mul.w	r3, r1, r3
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8004e14:	4a48      	ldr	r2, [pc, #288]	; (8004f38 <setconfig_standart1dot6+0x180c>)
 8004e16:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][6]  = 17.7f;
 8004e18:	78fb      	ldrb	r3, [r7, #3]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004e20:	fb01 f303 	mul.w	r3, r1, r3
 8004e24:	4413      	add	r3, r2
 8004e26:	f203 6344 	addw	r3, r3, #1604	; 0x644
 8004e2a:	4a44      	ldr	r2, [pc, #272]	; (8004f3c <setconfig_standart1dot6+0x1810>)
 8004e2c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][7]  = 22.0f;
 8004e2e:	78fb      	ldrb	r3, [r7, #3]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004e36:	fb01 f303 	mul.w	r3, r1, r3
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8004e40:	4a3f      	ldr	r2, [pc, #252]	; (8004f40 <setconfig_standart1dot6+0x1814>)
 8004e42:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][8]  = 25.9f;
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004e4c:	fb01 f303 	mul.w	r3, r1, r3
 8004e50:	4413      	add	r3, r2
 8004e52:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8004e56:	4a3b      	ldr	r2, [pc, #236]	; (8004f44 <setconfig_standart1dot6+0x1818>)
 8004e58:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][9]  = 27.9f;
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004e62:	fb01 f303 	mul.w	r3, r1, r3
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8004e6c:	4a36      	ldr	r2, [pc, #216]	; (8004f48 <setconfig_standart1dot6+0x181c>)
 8004e6e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][10] = 30.1f;
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004e78:	fb01 f303 	mul.w	r3, r1, r3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8004e82:	4a32      	ldr	r2, [pc, #200]	; (8004f4c <setconfig_standart1dot6+0x1820>)
 8004e84:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][11] = 30.3f;
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004e8e:	fb01 f303 	mul.w	r3, r1, r3
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8004e98:	4a2d      	ldr	r2, [pc, #180]	; (8004f50 <setconfig_standart1dot6+0x1824>)
 8004e9a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][12] = 29.2f;
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004ea4:	fb01 f303 	mul.w	r3, r1, r3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 8004eae:	4a29      	ldr	r2, [pc, #164]	; (8004f54 <setconfig_standart1dot6+0x1828>)
 8004eb0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][13] = 29.4f;
 8004eb2:	78fb      	ldrb	r3, [r7, #3]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004eba:	fb01 f303 	mul.w	r3, r1, r3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004ec4:	4a24      	ldr	r2, [pc, #144]	; (8004f58 <setconfig_standart1dot6+0x182c>)
 8004ec6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][14] = 30.0f;
 8004ec8:	78fb      	ldrb	r3, [r7, #3]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004ed0:	fb01 f303 	mul.w	r3, r1, r3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	e041      	b.n	8004f5c <setconfig_standart1dot6+0x1830>
 8004ed8:	4206cccd 	.word	0x4206cccd
 8004edc:	4207999a 	.word	0x4207999a
 8004ee0:	4208cccd 	.word	0x4208cccd
 8004ee4:	42093333 	.word	0x42093333
 8004ee8:	40c9999a 	.word	0x40c9999a
 8004eec:	40e66666 	.word	0x40e66666
 8004ef0:	4101999a 	.word	0x4101999a
 8004ef4:	4114cccd 	.word	0x4114cccd
 8004ef8:	4131999a 	.word	0x4131999a
 8004efc:	41600000 	.word	0x41600000
 8004f00:	41900000 	.word	0x41900000
 8004f04:	41ba6666 	.word	0x41ba6666
 8004f08:	41d73333 	.word	0x41d73333
 8004f0c:	41e8cccd 	.word	0x41e8cccd
 8004f10:	41fccccd 	.word	0x41fccccd
 8004f14:	41f80000 	.word	0x41f80000
 8004f18:	41fa6666 	.word	0x41fa6666
 8004f1c:	41fd999a 	.word	0x41fd999a
 8004f20:	41fe6666 	.word	0x41fe6666
 8004f24:	40c33333 	.word	0x40c33333
 8004f28:	40d66666 	.word	0x40d66666
 8004f2c:	40e9999a 	.word	0x40e9999a
 8004f30:	41066666 	.word	0x41066666
 8004f34:	411e6666 	.word	0x411e6666
 8004f38:	41480000 	.word	0x41480000
 8004f3c:	418d999a 	.word	0x418d999a
 8004f40:	41b00000 	.word	0x41b00000
 8004f44:	41cf3333 	.word	0x41cf3333
 8004f48:	41df3333 	.word	0x41df3333
 8004f4c:	41f0cccd 	.word	0x41f0cccd
 8004f50:	41f26666 	.word	0x41f26666
 8004f54:	41e9999a 	.word	0x41e9999a
 8004f58:	41eb3333 	.word	0x41eb3333
 8004f5c:	f203 6364 	addw	r3, r3, #1636	; 0x664
 8004f60:	4aba      	ldr	r2, [pc, #744]	; (800524c <setconfig_standart1dot6+0x1b20>)
 8004f62:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][15] = 30.2f;
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004f6c:	fb01 f303 	mul.w	r3, r1, r3
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8004f76:	4ab6      	ldr	r2, [pc, #728]	; (8005250 <setconfig_standart1dot6+0x1b24>)
 8004f78:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[13][0]  = 6.0f;
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004f82:	fb01 f303 	mul.w	r3, r1, r3
 8004f86:	4413      	add	r3, r2
 8004f88:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8004f8c:	4ab1      	ldr	r2, [pc, #708]	; (8005254 <setconfig_standart1dot6+0x1b28>)
 8004f8e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][1]  = 6.5f;
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004f98:	fb01 f303 	mul.w	r3, r1, r3
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8004fa2:	4aad      	ldr	r2, [pc, #692]	; (8005258 <setconfig_standart1dot6+0x1b2c>)
 8004fa4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][2]  = 7.1f;
 8004fa6:	78fb      	ldrb	r3, [r7, #3]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004fae:	fb01 f303 	mul.w	r3, r1, r3
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8004fb8:	4aa8      	ldr	r2, [pc, #672]	; (800525c <setconfig_standart1dot6+0x1b30>)
 8004fba:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][3]  = 7.9f;
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004fc4:	fb01 f303 	mul.w	r3, r1, r3
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 8004fce:	4aa4      	ldr	r2, [pc, #656]	; (8005260 <setconfig_standart1dot6+0x1b34>)
 8004fd0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][4]  = 9.1f;
 8004fd2:	78fb      	ldrb	r3, [r7, #3]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004fda:	fb01 f303 	mul.w	r3, r1, r3
 8004fde:	4413      	add	r3, r2
 8004fe0:	f203 639c 	addw	r3, r3, #1692	; 0x69c
 8004fe4:	4a9f      	ldr	r2, [pc, #636]	; (8005264 <setconfig_standart1dot6+0x1b38>)
 8004fe6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][5]  = 11.3f;
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	f640 716c 	movw	r1, #3948	; 0xf6c
 8004ff0:	fb01 f303 	mul.w	r3, r1, r3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8004ffa:	4a9b      	ldr	r2, [pc, #620]	; (8005268 <setconfig_standart1dot6+0x1b3c>)
 8004ffc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][6]  = 15.8f;
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005006:	fb01 f303 	mul.w	r3, r1, r3
 800500a:	4413      	add	r3, r2
 800500c:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8005010:	4a96      	ldr	r2, [pc, #600]	; (800526c <setconfig_standart1dot6+0x1b40>)
 8005012:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][7]  = 20.3f;
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	f640 716c 	movw	r1, #3948	; 0xf6c
 800501c:	fb01 f303 	mul.w	r3, r1, r3
 8005020:	4413      	add	r3, r2
 8005022:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 8005026:	4a92      	ldr	r2, [pc, #584]	; (8005270 <setconfig_standart1dot6+0x1b44>)
 8005028:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][8]  = 24.4f;
 800502a:	78fb      	ldrb	r3, [r7, #3]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005032:	fb01 f303 	mul.w	r3, r1, r3
 8005036:	4413      	add	r3, r2
 8005038:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 800503c:	4a8d      	ldr	r2, [pc, #564]	; (8005274 <setconfig_standart1dot6+0x1b48>)
 800503e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][9]  = 26.6f;
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	4413      	add	r3, r2
 800504e:	f503 63d6 	add.w	r3, r3, #1712	; 0x6b0
 8005052:	4a89      	ldr	r2, [pc, #548]	; (8005278 <setconfig_standart1dot6+0x1b4c>)
 8005054:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][10] = 28.7f;
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	f640 716c 	movw	r1, #3948	; 0xf6c
 800505e:	fb01 f303 	mul.w	r3, r1, r3
 8005062:	4413      	add	r3, r2
 8005064:	f203 63b4 	addw	r3, r3, #1716	; 0x6b4
 8005068:	4a84      	ldr	r2, [pc, #528]	; (800527c <setconfig_standart1dot6+0x1b50>)
 800506a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][11] = 28.8f;
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005074:	fb01 f303 	mul.w	r3, r1, r3
 8005078:	4413      	add	r3, r2
 800507a:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 800507e:	4a80      	ldr	r2, [pc, #512]	; (8005280 <setconfig_standart1dot6+0x1b54>)
 8005080:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][12] = 27.6f;
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	f640 716c 	movw	r1, #3948	; 0xf6c
 800508a:	fb01 f303 	mul.w	r3, r1, r3
 800508e:	4413      	add	r3, r2
 8005090:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 8005094:	4a7b      	ldr	r2, [pc, #492]	; (8005284 <setconfig_standart1dot6+0x1b58>)
 8005096:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][13] = 27.9f;
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	f640 716c 	movw	r1, #3948	; 0xf6c
 80050a0:	fb01 f303 	mul.w	r3, r1, r3
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80050aa:	4a77      	ldr	r2, [pc, #476]	; (8005288 <setconfig_standart1dot6+0x1b5c>)
 80050ac:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][14] = 28.6f;
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	f640 716c 	movw	r1, #3948	; 0xf6c
 80050b6:	fb01 f303 	mul.w	r3, r1, r3
 80050ba:	4413      	add	r3, r2
 80050bc:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
 80050c0:	4a72      	ldr	r2, [pc, #456]	; (800528c <setconfig_standart1dot6+0x1b60>)
 80050c2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][15] = 28.8f;
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	f640 716c 	movw	r1, #3948	; 0xf6c
 80050cc:	fb01 f303 	mul.w	r3, r1, r3
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 80050d6:	4a6a      	ldr	r2, [pc, #424]	; (8005280 <setconfig_standart1dot6+0x1b54>)
 80050d8:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[14][0]  = 6.0f;
 80050da:	78fb      	ldrb	r3, [r7, #3]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	f640 716c 	movw	r1, #3948	; 0xf6c
 80050e2:	fb01 f303 	mul.w	r3, r1, r3
 80050e6:	4413      	add	r3, r2
 80050e8:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 80050ec:	4a59      	ldr	r2, [pc, #356]	; (8005254 <setconfig_standart1dot6+0x1b28>)
 80050ee:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][1]  = 6.5f;
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	f640 716c 	movw	r1, #3948	; 0xf6c
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 8005102:	4a55      	ldr	r2, [pc, #340]	; (8005258 <setconfig_standart1dot6+0x1b2c>)
 8005104:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][2]  = 7.0f;
 8005106:	78fb      	ldrb	r3, [r7, #3]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	f640 716c 	movw	r1, #3948	; 0xf6c
 800510e:	fb01 f303 	mul.w	r3, r1, r3
 8005112:	4413      	add	r3, r2
 8005114:	f203 63f4 	addw	r3, r3, #1780	; 0x6f4
 8005118:	4a5d      	ldr	r2, [pc, #372]	; (8005290 <setconfig_standart1dot6+0x1b64>)
 800511a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][3]  = 7.7f;
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005124:	fb01 f303 	mul.w	r3, r1, r3
 8005128:	4413      	add	r3, r2
 800512a:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 800512e:	4a59      	ldr	r2, [pc, #356]	; (8005294 <setconfig_standart1dot6+0x1b68>)
 8005130:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][4]  = 8.7f;
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	f640 716c 	movw	r1, #3948	; 0xf6c
 800513a:	fb01 f303 	mul.w	r3, r1, r3
 800513e:	4413      	add	r3, r2
 8005140:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8005144:	4a54      	ldr	r2, [pc, #336]	; (8005298 <setconfig_standart1dot6+0x1b6c>)
 8005146:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][5]  = 10.5f;
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	4413      	add	r3, r2
 8005156:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800515a:	4a50      	ldr	r2, [pc, #320]	; (800529c <setconfig_standart1dot6+0x1b70>)
 800515c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][6]  = 14.1f;
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	4413      	add	r3, r2
 800516c:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8005170:	4a4b      	ldr	r2, [pc, #300]	; (80052a0 <setconfig_standart1dot6+0x1b74>)
 8005172:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][7]  = 18.2f;
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	f640 716c 	movw	r1, #3948	; 0xf6c
 800517c:	fb01 f303 	mul.w	r3, r1, r3
 8005180:	4413      	add	r3, r2
 8005182:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
 8005186:	4a47      	ldr	r2, [pc, #284]	; (80052a4 <setconfig_standart1dot6+0x1b78>)
 8005188:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][8]  = 22.1f;
 800518a:	78fb      	ldrb	r3, [r7, #3]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005192:	fb01 f303 	mul.w	r3, r1, r3
 8005196:	4413      	add	r3, r2
 8005198:	f203 730c 	addw	r3, r3, #1804	; 0x70c
 800519c:	4a42      	ldr	r2, [pc, #264]	; (80052a8 <setconfig_standart1dot6+0x1b7c>)
 800519e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][9]  = 24.5f;
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	f640 716c 	movw	r1, #3948	; 0xf6c
 80051a8:	fb01 f303 	mul.w	r3, r1, r3
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 80051b2:	4a3e      	ldr	r2, [pc, #248]	; (80052ac <setconfig_standart1dot6+0x1b80>)
 80051b4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][10] = 26.8f;
 80051b6:	78fb      	ldrb	r3, [r7, #3]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	f640 716c 	movw	r1, #3948	; 0xf6c
 80051be:	fb01 f303 	mul.w	r3, r1, r3
 80051c2:	4413      	add	r3, r2
 80051c4:	f203 7314 	addw	r3, r3, #1812	; 0x714
 80051c8:	4a39      	ldr	r2, [pc, #228]	; (80052b0 <setconfig_standart1dot6+0x1b84>)
 80051ca:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][11] = 27.0f;
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	f640 716c 	movw	r1, #3948	; 0xf6c
 80051d4:	fb01 f303 	mul.w	r3, r1, r3
 80051d8:	4413      	add	r3, r2
 80051da:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 80051de:	4a35      	ldr	r2, [pc, #212]	; (80052b4 <setconfig_standart1dot6+0x1b88>)
 80051e0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][12] = 25.9f;
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	f640 716c 	movw	r1, #3948	; 0xf6c
 80051ea:	fb01 f303 	mul.w	r3, r1, r3
 80051ee:	4413      	add	r3, r2
 80051f0:	f203 731c 	addw	r3, r3, #1820	; 0x71c
 80051f4:	4a30      	ldr	r2, [pc, #192]	; (80052b8 <setconfig_standart1dot6+0x1b8c>)
 80051f6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][13] = 26.2f;
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005200:	fb01 f303 	mul.w	r3, r1, r3
 8005204:	4413      	add	r3, r2
 8005206:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800520a:	4a2c      	ldr	r2, [pc, #176]	; (80052bc <setconfig_standart1dot6+0x1b90>)
 800520c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][14] = 26.8f;
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005216:	fb01 f303 	mul.w	r3, r1, r3
 800521a:	4413      	add	r3, r2
 800521c:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8005220:	4a23      	ldr	r2, [pc, #140]	; (80052b0 <setconfig_standart1dot6+0x1b84>)
 8005222:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][15] = 27.0f;
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	f640 716c 	movw	r1, #3948	; 0xf6c
 800522c:	fb01 f303 	mul.w	r3, r1, r3
 8005230:	4413      	add	r3, r2
 8005232:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8005236:	4a1f      	ldr	r2, [pc, #124]	; (80052b4 <setconfig_standart1dot6+0x1b88>)
 8005238:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[15][0]  = 6.0f;
 800523a:	78fb      	ldrb	r3, [r7, #3]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005242:	fb01 f303 	mul.w	r3, r1, r3
 8005246:	4413      	add	r3, r2
 8005248:	e03a      	b.n	80052c0 <setconfig_standart1dot6+0x1b94>
 800524a:	bf00      	nop
 800524c:	41f00000 	.word	0x41f00000
 8005250:	41f1999a 	.word	0x41f1999a
 8005254:	40c00000 	.word	0x40c00000
 8005258:	40d00000 	.word	0x40d00000
 800525c:	40e33333 	.word	0x40e33333
 8005260:	40fccccd 	.word	0x40fccccd
 8005264:	4111999a 	.word	0x4111999a
 8005268:	4134cccd 	.word	0x4134cccd
 800526c:	417ccccd 	.word	0x417ccccd
 8005270:	41a26666 	.word	0x41a26666
 8005274:	41c33333 	.word	0x41c33333
 8005278:	41d4cccd 	.word	0x41d4cccd
 800527c:	41e5999a 	.word	0x41e5999a
 8005280:	41e66666 	.word	0x41e66666
 8005284:	41dccccd 	.word	0x41dccccd
 8005288:	41df3333 	.word	0x41df3333
 800528c:	41e4cccd 	.word	0x41e4cccd
 8005290:	40e00000 	.word	0x40e00000
 8005294:	40f66666 	.word	0x40f66666
 8005298:	410b3333 	.word	0x410b3333
 800529c:	41280000 	.word	0x41280000
 80052a0:	4161999a 	.word	0x4161999a
 80052a4:	4191999a 	.word	0x4191999a
 80052a8:	41b0cccd 	.word	0x41b0cccd
 80052ac:	41c40000 	.word	0x41c40000
 80052b0:	41d66666 	.word	0x41d66666
 80052b4:	41d80000 	.word	0x41d80000
 80052b8:	41cf3333 	.word	0x41cf3333
 80052bc:	41d1999a 	.word	0x41d1999a
 80052c0:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 80052c4:	4a56      	ldr	r2, [pc, #344]	; (8005420 <setconfig_standart1dot6+0x1cf4>)
 80052c6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][1]  = 6.5f;
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	f640 716c 	movw	r1, #3948	; 0xf6c
 80052d0:	fb01 f303 	mul.w	r3, r1, r3
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 80052da:	4a52      	ldr	r2, [pc, #328]	; (8005424 <setconfig_standart1dot6+0x1cf8>)
 80052dc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][2]  = 7.0f;
 80052de:	78fb      	ldrb	r3, [r7, #3]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	f640 716c 	movw	r1, #3948	; 0xf6c
 80052e6:	fb01 f303 	mul.w	r3, r1, r3
 80052ea:	4413      	add	r3, r2
 80052ec:	f203 7354 	addw	r3, r3, #1876	; 0x754
 80052f0:	4a4d      	ldr	r2, [pc, #308]	; (8005428 <setconfig_standart1dot6+0x1cfc>)
 80052f2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][3]  = 7.6f;
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	f640 716c 	movw	r1, #3948	; 0xf6c
 80052fc:	fb01 f303 	mul.w	r3, r1, r3
 8005300:	4413      	add	r3, r2
 8005302:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8005306:	4a49      	ldr	r2, [pc, #292]	; (800542c <setconfig_standart1dot6+0x1d00>)
 8005308:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][4]  = 8.5f;
 800530a:	78fb      	ldrb	r3, [r7, #3]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005312:	fb01 f303 	mul.w	r3, r1, r3
 8005316:	4413      	add	r3, r2
 8005318:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800531c:	4a44      	ldr	r2, [pc, #272]	; (8005430 <setconfig_standart1dot6+0x1d04>)
 800531e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][5]  = 9.9f;
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005328:	fb01 f303 	mul.w	r3, r1, r3
 800532c:	4413      	add	r3, r2
 800532e:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8005332:	4a40      	ldr	r2, [pc, #256]	; (8005434 <setconfig_standart1dot6+0x1d08>)
 8005334:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][6]  = 12.3f;
 8005336:	78fb      	ldrb	r3, [r7, #3]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	f640 716c 	movw	r1, #3948	; 0xf6c
 800533e:	fb01 f303 	mul.w	r3, r1, r3
 8005342:	4413      	add	r3, r2
 8005344:	f203 7364 	addw	r3, r3, #1892	; 0x764
 8005348:	4a3b      	ldr	r2, [pc, #236]	; (8005438 <setconfig_standart1dot6+0x1d0c>)
 800534a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][7]  = 15.8f;
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005354:	fb01 f303 	mul.w	r3, r1, r3
 8005358:	4413      	add	r3, r2
 800535a:	f503 63ed 	add.w	r3, r3, #1896	; 0x768
 800535e:	4a37      	ldr	r2, [pc, #220]	; (800543c <setconfig_standart1dot6+0x1d10>)
 8005360:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][8]  = 19.5f;
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	f640 716c 	movw	r1, #3948	; 0xf6c
 800536a:	fb01 f303 	mul.w	r3, r1, r3
 800536e:	4413      	add	r3, r2
 8005370:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8005374:	4a32      	ldr	r2, [pc, #200]	; (8005440 <setconfig_standart1dot6+0x1d14>)
 8005376:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][9]  = 22.2f;
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	4413      	add	r3, r2
 8005386:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800538a:	4a2e      	ldr	r2, [pc, #184]	; (8005444 <setconfig_standart1dot6+0x1d18>)
 800538c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][10] = 24.8f;
 800538e:	78fb      	ldrb	r3, [r7, #3]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005396:	fb01 f303 	mul.w	r3, r1, r3
 800539a:	4413      	add	r3, r2
 800539c:	f203 7374 	addw	r3, r3, #1908	; 0x774
 80053a0:	4a29      	ldr	r2, [pc, #164]	; (8005448 <setconfig_standart1dot6+0x1d1c>)
 80053a2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][11] = 25.1f;
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	f640 716c 	movw	r1, #3948	; 0xf6c
 80053ac:	fb01 f303 	mul.w	r3, r1, r3
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 80053b6:	4a25      	ldr	r2, [pc, #148]	; (800544c <setconfig_standart1dot6+0x1d20>)
 80053b8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][12] = 24.0f;
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	f640 716c 	movw	r1, #3948	; 0xf6c
 80053c2:	fb01 f303 	mul.w	r3, r1, r3
 80053c6:	4413      	add	r3, r2
 80053c8:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80053cc:	4a20      	ldr	r2, [pc, #128]	; (8005450 <setconfig_standart1dot6+0x1d24>)
 80053ce:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][13] = 24.3f;
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	f640 716c 	movw	r1, #3948	; 0xf6c
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	4413      	add	r3, r2
 80053de:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 80053e2:	4a1c      	ldr	r2, [pc, #112]	; (8005454 <setconfig_standart1dot6+0x1d28>)
 80053e4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][14] = 24.8f;
 80053e6:	78fb      	ldrb	r3, [r7, #3]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	f640 716c 	movw	r1, #3948	; 0xf6c
 80053ee:	fb01 f303 	mul.w	r3, r1, r3
 80053f2:	4413      	add	r3, r2
 80053f4:	f203 7384 	addw	r3, r3, #1924	; 0x784
 80053f8:	4a13      	ldr	r2, [pc, #76]	; (8005448 <setconfig_standart1dot6+0x1d1c>)
 80053fa:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][15] = 25.0f;
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005404:	fb01 f303 	mul.w	r3, r1, r3
 8005408:	4413      	add	r3, r2
 800540a:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800540e:	4a12      	ldr	r2, [pc, #72]	; (8005458 <setconfig_standart1dot6+0x1d2c>)
 8005410:	601a      	str	r2, [r3, #0]
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40c00000 	.word	0x40c00000
 8005424:	40d00000 	.word	0x40d00000
 8005428:	40e00000 	.word	0x40e00000
 800542c:	40f33333 	.word	0x40f33333
 8005430:	41080000 	.word	0x41080000
 8005434:	411e6666 	.word	0x411e6666
 8005438:	4144cccd 	.word	0x4144cccd
 800543c:	417ccccd 	.word	0x417ccccd
 8005440:	419c0000 	.word	0x419c0000
 8005444:	41b1999a 	.word	0x41b1999a
 8005448:	41c66666 	.word	0x41c66666
 800544c:	41c8cccd 	.word	0x41c8cccd
 8005450:	41c00000 	.word	0x41c00000
 8005454:	41c26666 	.word	0x41c26666
 8005458:	41c80000 	.word	0x41c80000

0800545c <config_default>:

HAL_StatusTypeDef config_default(sAcisConfig * config)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	73fb      	strb	r3, [r7, #15]

  for(int i = 0; i < sizeof(sAcisConfig); i++)
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e007      	b.n	800547e <config_default+0x22>
    ((uint8_t*)config)[i] = 0;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	4413      	add	r3, r2
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < sizeof(sAcisConfig); i++)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	3301      	adds	r3, #1
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f244 22c7 	movw	r2, #17095	; 0x42c7
 8005484:	4293      	cmp	r3, r2
 8005486:	d9f2      	bls.n	800546e <config_default+0x12>

  config->params.isCutoutEnabled = 1;
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	f643 53b4 	movw	r3, #15796	; 0x3db4
 800548e:	4413      	add	r3, r2
 8005490:	2201      	movs	r2, #1
 8005492:	701a      	strb	r2, [r3, #0]
  config->params.isTemperatureEnabled = 1;
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	f643 53b5 	movw	r3, #15797	; 0x3db5
 800549a:	4413      	add	r3, r2
 800549c:	2201      	movs	r2, #1
 800549e:	701a      	strb	r2, [r3, #0]
  config->params.isEconomEnabled = 1;
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	f643 53b6 	movw	r3, #15798	; 0x3db6
 80054a6:	4413      	add	r3, r2
 80054a8:	2201      	movs	r2, #1
 80054aa:	701a      	strb	r2, [r3, #0]
  config->params.isAutostartEnabled = 0;
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	f643 53b7 	movw	r3, #15799	; 0x3db7
 80054b2:	4413      	add	r3, r2
 80054b4:	2200      	movs	r2, #0
 80054b6:	701a      	strb	r2, [r3, #0]
  config->params.isIgnitionByHall = 0;
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	f643 53b8 	movw	r3, #15800	; 0x3db8
 80054be:	4413      	add	r3, r2
 80054c0:	2200      	movs	r2, #0
 80054c2:	701a      	strb	r2, [r3, #0]
  config->params.isForceTable = 0;
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	f643 53b9 	movw	r3, #15801	; 0x3db9
 80054ca:	4413      	add	r3, r2
 80054cc:	2200      	movs	r2, #0
 80054ce:	701a      	strb	r2, [r3, #0]
  config->params.isHallLearningMode = 0;
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	f643 53ba 	movw	r3, #15802	; 0x3dba
 80054d6:	4413      	add	r3, r2
 80054d8:	2200      	movs	r2, #0
 80054da:	701a      	strb	r2, [r3, #0]
  config->params.isSwitchByExternal = 1;
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	f643 53bb 	movw	r3, #15803	; 0x3dbb
 80054e2:	4413      	add	r3, r2
 80054e4:	2201      	movs	r2, #1
 80054e6:	701a      	strb	r2, [r3, #0]
  config->params.isEconOutAsStrobe = 0;
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	f643 53bc 	movw	r3, #15804	; 0x3dbc
 80054ee:	4413      	add	r3, r2
 80054f0:	2200      	movs	r2, #0
 80054f2:	701a      	strb	r2, [r3, #0]

  config->params.switchPos1Table = 0;
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	f643 53bd 	movw	r3, #15805	; 0x3dbd
 80054fa:	4413      	add	r3, r2
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
  config->params.switchPos0Table = 0;
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	f643 53be 	movw	r3, #15806	; 0x3dbe
 8005506:	4413      	add	r3, r2
 8005508:	2200      	movs	r2, #0
 800550a:	701a      	strb	r2, [r3, #0]
  config->params.switchPos2Table = 0;
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	f643 53bf 	movw	r3, #15807	; 0x3dbf
 8005512:	4413      	add	r3, r2
 8005514:	2200      	movs	r2, #0
 8005516:	701a      	strb	r2, [r3, #0]
  config->params.forceTableNumber = 0;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f503 5377 	add.w	r3, r3, #15808	; 0x3dc0
 800551e:	2200      	movs	r2, #0
 8005520:	701a      	strb	r2, [r3, #0]

  config->params.InitialRpmThreshold = 400;
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	f643 63b8 	movw	r3, #16056	; 0x3eb8
 8005528:	4413      	add	r3, r2
 800552a:	4a0a      	ldr	r2, [pc, #40]	; (8005554 <config_default+0xf8>)
 800552c:	601a      	str	r2, [r3, #0]
  config->params.EconRpmThreshold = 2000;
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	f643 63bc 	movw	r3, #16060	; 0x3ebc
 8005534:	4413      	add	r3, r2
 8005536:	4a08      	ldr	r2, [pc, #32]	; (8005558 <config_default+0xfc>)
 8005538:	601a      	str	r2, [r3, #0]
  config->params.CutoutRPM = 5000;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f503 537b 	add.w	r3, r3, #16064	; 0x3ec0
 8005540:	4a06      	ldr	r2, [pc, #24]	; (800555c <config_default+0x100>)
 8005542:	601a      	str	r2, [r3, #0]

  config->tables_count = 1;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < config->tables_count; i++)
 800554a:	2300      	movs	r3, #0
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	f000 bc3f 	b.w	8005dd0 <config_default+0x974>
 8005552:	bf00      	nop
 8005554:	43c80000 	.word	0x43c80000
 8005558:	44fa0000 	.word	0x44fa0000
 800555c:	459c4000 	.word	0x459c4000
  {

    strcpy(config->tables[i].name, "Default 1");
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f640 726c 	movw	r2, #3948	; 0xf6c
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	3304      	adds	r3, #4
 8005570:	49b8      	ldr	r1, [pc, #736]	; (8005854 <config_default+0x3f8>)
 8005572:	461a      	mov	r2, r3
 8005574:	460b      	mov	r3, r1
 8005576:	cb03      	ldmia	r3!, {r0, r1}
 8005578:	6010      	str	r0, [r2, #0]
 800557a:	6051      	str	r1, [r2, #4]
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	8113      	strh	r3, [r2, #8]

    config->tables[i].valve_channel = ValvePetrol;
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005588:	fb01 f303 	mul.w	r3, r1, r3
 800558c:	4413      	add	r3, r2
 800558e:	3310      	adds	r3, #16
 8005590:	2201      	movs	r2, #1
 8005592:	701a      	strb	r2, [r3, #0]
    config->tables[i].valve_timeout = 0;
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f640 716c 	movw	r1, #3948	; 0xf6c
 800559c:	fb01 f303 	mul.w	r3, r1, r3
 80055a0:	4413      	add	r3, r2
 80055a2:	3314      	adds	r3, #20
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

    config->tables[i].initial_ignition = 0.0f;
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f640 716c 	movw	r1, #3948	; 0xf6c
 80055b0:	fb01 f303 	mul.w	r3, r1, r3
 80055b4:	4413      	add	r3, r2
 80055b6:	3318      	adds	r3, #24
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]
    config->tables[i].octane_corrector = 0.0f;
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f640 716c 	movw	r1, #3948	; 0xf6c
 80055c6:	fb01 f303 	mul.w	r3, r1, r3
 80055ca:	4413      	add	r3, r2
 80055cc:	331c      	adds	r3, #28
 80055ce:	f04f 0200 	mov.w	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]

    config->tables[i].idles_count = 20;
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f640 716c 	movw	r1, #3948	; 0xf6c
 80055dc:	fb01 f303 	mul.w	r3, r1, r3
 80055e0:	4413      	add	r3, r2
 80055e2:	3320      	adds	r3, #32
 80055e4:	2214      	movs	r2, #20
 80055e6:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[0] = 417;
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f640 716c 	movw	r1, #3948	; 0xf6c
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	4413      	add	r3, r2
 80055f6:	3384      	adds	r3, #132	; 0x84
 80055f8:	4a97      	ldr	r2, [pc, #604]	; (8005858 <config_default+0x3fc>)
 80055fa:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[1] = 455;
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	4413      	add	r3, r2
 800560a:	3388      	adds	r3, #136	; 0x88
 800560c:	4a93      	ldr	r2, [pc, #588]	; (800585c <config_default+0x400>)
 800560e:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[2] = 476;
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005618:	fb01 f303 	mul.w	r3, r1, r3
 800561c:	4413      	add	r3, r2
 800561e:	338c      	adds	r3, #140	; 0x8c
 8005620:	4a8f      	ldr	r2, [pc, #572]	; (8005860 <config_default+0x404>)
 8005622:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[3] = 500;
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f640 716c 	movw	r1, #3948	; 0xf6c
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	4413      	add	r3, r2
 8005632:	3390      	adds	r3, #144	; 0x90
 8005634:	4a8b      	ldr	r2, [pc, #556]	; (8005864 <config_default+0x408>)
 8005636:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[4] = 525;
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005640:	fb01 f303 	mul.w	r3, r1, r3
 8005644:	4413      	add	r3, r2
 8005646:	3394      	adds	r3, #148	; 0x94
 8005648:	4a87      	ldr	r2, [pc, #540]	; (8005868 <config_default+0x40c>)
 800564a:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[5] = 556;
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005654:	fb01 f303 	mul.w	r3, r1, r3
 8005658:	4413      	add	r3, r2
 800565a:	3398      	adds	r3, #152	; 0x98
 800565c:	4a83      	ldr	r2, [pc, #524]	; (800586c <config_default+0x410>)
 800565e:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[6] = 588;
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005668:	fb01 f303 	mul.w	r3, r1, r3
 800566c:	4413      	add	r3, r2
 800566e:	339c      	adds	r3, #156	; 0x9c
 8005670:	4a7f      	ldr	r2, [pc, #508]	; (8005870 <config_default+0x414>)
 8005672:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[7] = 625;
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f640 716c 	movw	r1, #3948	; 0xf6c
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	4413      	add	r3, r2
 8005682:	33a0      	adds	r3, #160	; 0xa0
 8005684:	4a7b      	ldr	r2, [pc, #492]	; (8005874 <config_default+0x418>)
 8005686:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[8] = 667;
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005690:	fb01 f303 	mul.w	r3, r1, r3
 8005694:	4413      	add	r3, r2
 8005696:	33a4      	adds	r3, #164	; 0xa4
 8005698:	4a77      	ldr	r2, [pc, #476]	; (8005878 <config_default+0x41c>)
 800569a:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[9] = 714;
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f640 716c 	movw	r1, #3948	; 0xf6c
 80056a4:	fb01 f303 	mul.w	r3, r1, r3
 80056a8:	4413      	add	r3, r2
 80056aa:	33a8      	adds	r3, #168	; 0xa8
 80056ac:	4a73      	ldr	r2, [pc, #460]	; (800587c <config_default+0x420>)
 80056ae:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[10] = 769;
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f640 716c 	movw	r1, #3948	; 0xf6c
 80056b8:	fb01 f303 	mul.w	r3, r1, r3
 80056bc:	4413      	add	r3, r2
 80056be:	33ac      	adds	r3, #172	; 0xac
 80056c0:	4a6f      	ldr	r2, [pc, #444]	; (8005880 <config_default+0x424>)
 80056c2:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[11] = 833;
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f640 716c 	movw	r1, #3948	; 0xf6c
 80056cc:	fb01 f303 	mul.w	r3, r1, r3
 80056d0:	4413      	add	r3, r2
 80056d2:	33b0      	adds	r3, #176	; 0xb0
 80056d4:	4a6b      	ldr	r2, [pc, #428]	; (8005884 <config_default+0x428>)
 80056d6:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[12] = 909;
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f640 716c 	movw	r1, #3948	; 0xf6c
 80056e0:	fb01 f303 	mul.w	r3, r1, r3
 80056e4:	4413      	add	r3, r2
 80056e6:	33b4      	adds	r3, #180	; 0xb4
 80056e8:	4a67      	ldr	r2, [pc, #412]	; (8005888 <config_default+0x42c>)
 80056ea:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[13] = 1000;
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f640 716c 	movw	r1, #3948	; 0xf6c
 80056f4:	fb01 f303 	mul.w	r3, r1, r3
 80056f8:	4413      	add	r3, r2
 80056fa:	33b8      	adds	r3, #184	; 0xb8
 80056fc:	4a63      	ldr	r2, [pc, #396]	; (800588c <config_default+0x430>)
 80056fe:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[14] = 1111;
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005708:	fb01 f303 	mul.w	r3, r1, r3
 800570c:	4413      	add	r3, r2
 800570e:	33bc      	adds	r3, #188	; 0xbc
 8005710:	4a5f      	ldr	r2, [pc, #380]	; (8005890 <config_default+0x434>)
 8005712:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[15] = 1250;
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f640 716c 	movw	r1, #3948	; 0xf6c
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	4413      	add	r3, r2
 8005722:	33c0      	adds	r3, #192	; 0xc0
 8005724:	4a5b      	ldr	r2, [pc, #364]	; (8005894 <config_default+0x438>)
 8005726:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[16] = 1429;
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005730:	fb01 f303 	mul.w	r3, r1, r3
 8005734:	4413      	add	r3, r2
 8005736:	33c4      	adds	r3, #196	; 0xc4
 8005738:	4a57      	ldr	r2, [pc, #348]	; (8005898 <config_default+0x43c>)
 800573a:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[17] = 1667;
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005744:	fb01 f303 	mul.w	r3, r1, r3
 8005748:	4413      	add	r3, r2
 800574a:	33c8      	adds	r3, #200	; 0xc8
 800574c:	4a53      	ldr	r2, [pc, #332]	; (800589c <config_default+0x440>)
 800574e:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[18] = 2000;
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005758:	fb01 f303 	mul.w	r3, r1, r3
 800575c:	4413      	add	r3, r2
 800575e:	33cc      	adds	r3, #204	; 0xcc
 8005760:	4a4f      	ldr	r2, [pc, #316]	; (80058a0 <config_default+0x444>)
 8005762:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[19] = 2500;
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f640 716c 	movw	r1, #3948	; 0xf6c
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	4413      	add	r3, r2
 8005772:	33d0      	adds	r3, #208	; 0xd0
 8005774:	4a4b      	ldr	r2, [pc, #300]	; (80058a4 <config_default+0x448>)
 8005776:	601a      	str	r2, [r3, #0]

    config->tables[i].idle_ignitions[0] = 10;
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005780:	fb01 f303 	mul.w	r3, r1, r3
 8005784:	4413      	add	r3, r2
 8005786:	3324      	adds	r3, #36	; 0x24
 8005788:	4a47      	ldr	r2, [pc, #284]	; (80058a8 <config_default+0x44c>)
 800578a:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[1] = 11;
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005794:	fb01 f303 	mul.w	r3, r1, r3
 8005798:	4413      	add	r3, r2
 800579a:	3328      	adds	r3, #40	; 0x28
 800579c:	4a43      	ldr	r2, [pc, #268]	; (80058ac <config_default+0x450>)
 800579e:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[2] = 12;
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f640 716c 	movw	r1, #3948	; 0xf6c
 80057a8:	fb01 f303 	mul.w	r3, r1, r3
 80057ac:	4413      	add	r3, r2
 80057ae:	332c      	adds	r3, #44	; 0x2c
 80057b0:	4a3f      	ldr	r2, [pc, #252]	; (80058b0 <config_default+0x454>)
 80057b2:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[3] = 13;
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f640 716c 	movw	r1, #3948	; 0xf6c
 80057bc:	fb01 f303 	mul.w	r3, r1, r3
 80057c0:	4413      	add	r3, r2
 80057c2:	3330      	adds	r3, #48	; 0x30
 80057c4:	4a3b      	ldr	r2, [pc, #236]	; (80058b4 <config_default+0x458>)
 80057c6:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[4] = 14;
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f640 716c 	movw	r1, #3948	; 0xf6c
 80057d0:	fb01 f303 	mul.w	r3, r1, r3
 80057d4:	4413      	add	r3, r2
 80057d6:	3334      	adds	r3, #52	; 0x34
 80057d8:	4a37      	ldr	r2, [pc, #220]	; (80058b8 <config_default+0x45c>)
 80057da:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[5] = 16;
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f640 716c 	movw	r1, #3948	; 0xf6c
 80057e4:	fb01 f303 	mul.w	r3, r1, r3
 80057e8:	4413      	add	r3, r2
 80057ea:	3338      	adds	r3, #56	; 0x38
 80057ec:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80057f0:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[6] = 18;
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f640 716c 	movw	r1, #3948	; 0xf6c
 80057fa:	fb01 f303 	mul.w	r3, r1, r3
 80057fe:	4413      	add	r3, r2
 8005800:	333c      	adds	r3, #60	; 0x3c
 8005802:	4a2e      	ldr	r2, [pc, #184]	; (80058bc <config_default+0x460>)
 8005804:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[7] = 20;
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f640 716c 	movw	r1, #3948	; 0xf6c
 800580e:	fb01 f303 	mul.w	r3, r1, r3
 8005812:	4413      	add	r3, r2
 8005814:	3340      	adds	r3, #64	; 0x40
 8005816:	4a2a      	ldr	r2, [pc, #168]	; (80058c0 <config_default+0x464>)
 8005818:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[8] = 20;
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005822:	fb01 f303 	mul.w	r3, r1, r3
 8005826:	4413      	add	r3, r2
 8005828:	3344      	adds	r3, #68	; 0x44
 800582a:	4a25      	ldr	r2, [pc, #148]	; (80058c0 <config_default+0x464>)
 800582c:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[9] = 19;
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005836:	fb01 f303 	mul.w	r3, r1, r3
 800583a:	4413      	add	r3, r2
 800583c:	3348      	adds	r3, #72	; 0x48
 800583e:	4a21      	ldr	r2, [pc, #132]	; (80058c4 <config_default+0x468>)
 8005840:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[10] = 15;
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f640 716c 	movw	r1, #3948	; 0xf6c
 800584a:	fb01 f303 	mul.w	r3, r1, r3
 800584e:	4413      	add	r3, r2
 8005850:	334c      	adds	r3, #76	; 0x4c
 8005852:	e039      	b.n	80058c8 <config_default+0x46c>
 8005854:	0800ee9c 	.word	0x0800ee9c
 8005858:	43d08000 	.word	0x43d08000
 800585c:	43e38000 	.word	0x43e38000
 8005860:	43ee0000 	.word	0x43ee0000
 8005864:	43fa0000 	.word	0x43fa0000
 8005868:	44034000 	.word	0x44034000
 800586c:	440b0000 	.word	0x440b0000
 8005870:	44130000 	.word	0x44130000
 8005874:	441c4000 	.word	0x441c4000
 8005878:	4426c000 	.word	0x4426c000
 800587c:	44328000 	.word	0x44328000
 8005880:	44404000 	.word	0x44404000
 8005884:	44504000 	.word	0x44504000
 8005888:	44634000 	.word	0x44634000
 800588c:	447a0000 	.word	0x447a0000
 8005890:	448ae000 	.word	0x448ae000
 8005894:	449c4000 	.word	0x449c4000
 8005898:	44b2a000 	.word	0x44b2a000
 800589c:	44d06000 	.word	0x44d06000
 80058a0:	44fa0000 	.word	0x44fa0000
 80058a4:	451c4000 	.word	0x451c4000
 80058a8:	41200000 	.word	0x41200000
 80058ac:	41300000 	.word	0x41300000
 80058b0:	41400000 	.word	0x41400000
 80058b4:	41500000 	.word	0x41500000
 80058b8:	41600000 	.word	0x41600000
 80058bc:	41900000 	.word	0x41900000
 80058c0:	41a00000 	.word	0x41a00000
 80058c4:	41980000 	.word	0x41980000
 80058c8:	4abf      	ldr	r2, [pc, #764]	; (8005bc8 <config_default+0x76c>)
 80058ca:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[11] = 11;
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f640 716c 	movw	r1, #3948	; 0xf6c
 80058d4:	fb01 f303 	mul.w	r3, r1, r3
 80058d8:	4413      	add	r3, r2
 80058da:	3350      	adds	r3, #80	; 0x50
 80058dc:	4abb      	ldr	r2, [pc, #748]	; (8005bcc <config_default+0x770>)
 80058de:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[12] = 9;
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f640 716c 	movw	r1, #3948	; 0xf6c
 80058e8:	fb01 f303 	mul.w	r3, r1, r3
 80058ec:	4413      	add	r3, r2
 80058ee:	3354      	adds	r3, #84	; 0x54
 80058f0:	4ab7      	ldr	r2, [pc, #732]	; (8005bd0 <config_default+0x774>)
 80058f2:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[13] = 8;
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f640 716c 	movw	r1, #3948	; 0xf6c
 80058fc:	fb01 f303 	mul.w	r3, r1, r3
 8005900:	4413      	add	r3, r2
 8005902:	3358      	adds	r3, #88	; 0x58
 8005904:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8005908:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[14] = 8;
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005912:	fb01 f303 	mul.w	r3, r1, r3
 8005916:	4413      	add	r3, r2
 8005918:	335c      	adds	r3, #92	; 0x5c
 800591a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800591e:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[15] = 9;
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005928:	fb01 f303 	mul.w	r3, r1, r3
 800592c:	4413      	add	r3, r2
 800592e:	3360      	adds	r3, #96	; 0x60
 8005930:	4aa7      	ldr	r2, [pc, #668]	; (8005bd0 <config_default+0x774>)
 8005932:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[16] = 10;
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f640 716c 	movw	r1, #3948	; 0xf6c
 800593c:	fb01 f303 	mul.w	r3, r1, r3
 8005940:	4413      	add	r3, r2
 8005942:	3364      	adds	r3, #100	; 0x64
 8005944:	4aa3      	ldr	r2, [pc, #652]	; (8005bd4 <config_default+0x778>)
 8005946:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[17] = 12;
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005950:	fb01 f303 	mul.w	r3, r1, r3
 8005954:	4413      	add	r3, r2
 8005956:	3368      	adds	r3, #104	; 0x68
 8005958:	4a9f      	ldr	r2, [pc, #636]	; (8005bd8 <config_default+0x77c>)
 800595a:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[18] = 14;
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005964:	fb01 f303 	mul.w	r3, r1, r3
 8005968:	4413      	add	r3, r2
 800596a:	336c      	adds	r3, #108	; 0x6c
 800596c:	4a9b      	ldr	r2, [pc, #620]	; (8005bdc <config_default+0x780>)
 800596e:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[19] = 17;
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005978:	fb01 f303 	mul.w	r3, r1, r3
 800597c:	4413      	add	r3, r2
 800597e:	3370      	adds	r3, #112	; 0x70
 8005980:	4a97      	ldr	r2, [pc, #604]	; (8005be0 <config_default+0x784>)
 8005982:	601a      	str	r2, [r3, #0]

    //setconfig_microplex(config, i);
    setconfig_standart1dot6(config,i);
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fd fece 	bl	800372c <setconfig_standart1dot6>

    config->tables[i].temperatures_count = 11;
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005998:	fb01 f303 	mul.w	r3, r1, r3
 800599c:	4413      	add	r3, r2
 800599e:	f603 23ac 	addw	r3, r3, #2732	; 0xaac
 80059a2:	220b      	movs	r2, #11
 80059a4:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[0] = -20.0f;
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f640 716c 	movw	r1, #3948	; 0xf6c
 80059ae:	fb01 f303 	mul.w	r3, r1, r3
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 80059b8:	4a8a      	ldr	r2, [pc, #552]	; (8005be4 <config_default+0x788>)
 80059ba:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[1] = -10.0f;
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f640 716c 	movw	r1, #3948	; 0xf6c
 80059c4:	fb01 f303 	mul.w	r3, r1, r3
 80059c8:	4413      	add	r3, r2
 80059ca:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 80059ce:	4a86      	ldr	r2, [pc, #536]	; (8005be8 <config_default+0x78c>)
 80059d0:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[2] = 0.0f;
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f640 716c 	movw	r1, #3948	; 0xf6c
 80059da:	fb01 f303 	mul.w	r3, r1, r3
 80059de:	4413      	add	r3, r2
 80059e0:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[3] = 10.0f;
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f640 716c 	movw	r1, #3948	; 0xf6c
 80059f2:	fb01 f303 	mul.w	r3, r1, r3
 80059f6:	4413      	add	r3, r2
 80059f8:	f603 23bc 	addw	r3, r3, #2748	; 0xabc
 80059fc:	4a75      	ldr	r2, [pc, #468]	; (8005bd4 <config_default+0x778>)
 80059fe:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[4] = 20.0f;
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005a08:	fb01 f303 	mul.w	r3, r1, r3
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8005a12:	4a76      	ldr	r2, [pc, #472]	; (8005bec <config_default+0x790>)
 8005a14:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[5] = 30.0f;
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005a1e:	fb01 f303 	mul.w	r3, r1, r3
 8005a22:	4413      	add	r3, r2
 8005a24:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8005a28:	4a71      	ldr	r2, [pc, #452]	; (8005bf0 <config_default+0x794>)
 8005a2a:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[6] = 40.0f;
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005a34:	fb01 f303 	mul.w	r3, r1, r3
 8005a38:	4413      	add	r3, r2
 8005a3a:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 8005a3e:	4a6d      	ldr	r2, [pc, #436]	; (8005bf4 <config_default+0x798>)
 8005a40:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[7] = 50.0f;
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005a4a:	fb01 f303 	mul.w	r3, r1, r3
 8005a4e:	4413      	add	r3, r2
 8005a50:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 8005a54:	4a68      	ldr	r2, [pc, #416]	; (8005bf8 <config_default+0x79c>)
 8005a56:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[8] = 60.0f;
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005a60:	fb01 f303 	mul.w	r3, r1, r3
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 632d 	add.w	r3, r3, #2768	; 0xad0
 8005a6a:	4a64      	ldr	r2, [pc, #400]	; (8005bfc <config_default+0x7a0>)
 8005a6c:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[9] = 70.0f;
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005a76:	fb01 f303 	mul.w	r3, r1, r3
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f603 23d4 	addw	r3, r3, #2772	; 0xad4
 8005a80:	4a5f      	ldr	r2, [pc, #380]	; (8005c00 <config_default+0x7a4>)
 8005a82:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[10] = 80.0f;
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	4413      	add	r3, r2
 8005a92:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 8005a96:	4a5b      	ldr	r2, [pc, #364]	; (8005c04 <config_default+0x7a8>)
 8005a98:	601a      	str	r2, [r3, #0]

    config->tables[i].temperature_ignitions[0] = 5.0f;
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005aa2:	fb01 f303 	mul.w	r3, r1, r3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 632e 	add.w	r3, r3, #2784	; 0xae0
 8005aac:	4a56      	ldr	r2, [pc, #344]	; (8005c08 <config_default+0x7ac>)
 8005aae:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[1] = 4.0f;
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005ab8:	fb01 f303 	mul.w	r3, r1, r3
 8005abc:	4413      	add	r3, r2
 8005abe:	f603 23e4 	addw	r3, r3, #2788	; 0xae4
 8005ac2:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8005ac6:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[2] = 3.0f;
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005ad0:	fb01 f303 	mul.w	r3, r1, r3
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f603 23e8 	addw	r3, r3, #2792	; 0xae8
 8005ada:	4a4c      	ldr	r2, [pc, #304]	; (8005c0c <config_default+0x7b0>)
 8005adc:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[3] = 2.0f;
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005ae6:	fb01 f303 	mul.w	r3, r1, r3
 8005aea:	4413      	add	r3, r2
 8005aec:	f603 23ec 	addw	r3, r3, #2796	; 0xaec
 8005af0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005af4:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[4] = 2.0f;
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005afe:	fb01 f303 	mul.w	r3, r1, r3
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 8005b08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b0c:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[5] = 1.0f;
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005b16:	fb01 f303 	mul.w	r3, r1, r3
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f603 23f4 	addw	r3, r3, #2804	; 0xaf4
 8005b20:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b24:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[6] = 1.0f;
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005b2e:	fb01 f303 	mul.w	r3, r1, r3
 8005b32:	4413      	add	r3, r2
 8005b34:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8005b38:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b3c:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[7] = 0.0f;
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005b46:	fb01 f303 	mul.w	r3, r1, r3
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f603 23fc 	addw	r3, r3, #2812	; 0xafc
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[8] = 0.0f;
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005b5e:	fb01 f303 	mul.w	r3, r1, r3
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[9] = 0.0f;
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005b76:	fb01 f303 	mul.w	r3, r1, r3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[10] = 0.0f;
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005b8e:	fb01 f303 	mul.w	r3, r1, r3
 8005b92:	4413      	add	r3, r2
 8005b94:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]

    config->tables[i].servo_acc[0] = 0.0f;
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005ba6:	fb01 f303 	mul.w	r3, r1, r3
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[1] = 0.0f;
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005bbe:	fb01 f303 	mul.w	r3, r1, r3
 8005bc2:	4413      	add	r3, r2
 8005bc4:	e024      	b.n	8005c10 <config_default+0x7b4>
 8005bc6:	bf00      	nop
 8005bc8:	41700000 	.word	0x41700000
 8005bcc:	41300000 	.word	0x41300000
 8005bd0:	41100000 	.word	0x41100000
 8005bd4:	41200000 	.word	0x41200000
 8005bd8:	41400000 	.word	0x41400000
 8005bdc:	41600000 	.word	0x41600000
 8005be0:	41880000 	.word	0x41880000
 8005be4:	c1a00000 	.word	0xc1a00000
 8005be8:	c1200000 	.word	0xc1200000
 8005bec:	41a00000 	.word	0x41a00000
 8005bf0:	41f00000 	.word	0x41f00000
 8005bf4:	42200000 	.word	0x42200000
 8005bf8:	42480000 	.word	0x42480000
 8005bfc:	42700000 	.word	0x42700000
 8005c00:	428c0000 	.word	0x428c0000
 8005c04:	42a00000 	.word	0x42a00000
 8005c08:	40a00000 	.word	0x40a00000
 8005c0c:	40400000 	.word	0x40400000
 8005c10:	f603 3314 	addw	r3, r3, #2836	; 0xb14
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[2] = 0.0f;
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005c22:	fb01 f303 	mul.w	r3, r1, r3
 8005c26:	4413      	add	r3, r2
 8005c28:	f603 3318 	addw	r3, r3, #2840	; 0xb18
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[3] = 0.0f;
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005c3a:	fb01 f303 	mul.w	r3, r1, r3
 8005c3e:	4413      	add	r3, r2
 8005c40:	f603 331c 	addw	r3, r3, #2844	; 0xb1c
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[4] = 0.0f;
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005c52:	fb01 f303 	mul.w	r3, r1, r3
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[5] = 0.0f;
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005c6a:	fb01 f303 	mul.w	r3, r1, r3
 8005c6e:	4413      	add	r3, r2
 8005c70:	f603 3324 	addw	r3, r3, #2852	; 0xb24
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[6] = 0.0f;
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005c82:	fb01 f303 	mul.w	r3, r1, r3
 8005c86:	4413      	add	r3, r2
 8005c88:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[7] = 0.0f;
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005c9a:	fb01 f303 	mul.w	r3, r1, r3
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f603 332c 	addw	r3, r3, #2860	; 0xb2c
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[8] = 0.0f;
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005cb2:	fb01 f303 	mul.w	r3, r1, r3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[9] = 0.0f;
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005cca:	fb01 f303 	mul.w	r3, r1, r3
 8005cce:	4413      	add	r3, r2
 8005cd0:	f603 3334 	addw	r3, r3, #2868	; 0xb34
 8005cd4:	f04f 0200 	mov.w	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]

    config->tables[i].servo_choke[0] = 0.0f;
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005ce2:	fb01 f303 	mul.w	r3, r1, r3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[1] = 0.0f;
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005cfa:	fb01 f303 	mul.w	r3, r1, r3
 8005cfe:	4413      	add	r3, r2
 8005d00:	f603 3344 	addw	r3, r3, #2884	; 0xb44
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[2] = 0.0f;
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005d12:	fb01 f303 	mul.w	r3, r1, r3
 8005d16:	4413      	add	r3, r2
 8005d18:	f603 3348 	addw	r3, r3, #2888	; 0xb48
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[3] = 0.0f;
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	4413      	add	r3, r2
 8005d30:	f603 334c 	addw	r3, r3, #2892	; 0xb4c
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[4] = 0.0f;
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005d42:	fb01 f303 	mul.w	r3, r1, r3
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[5] = 0.0f;
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005d5a:	fb01 f303 	mul.w	r3, r1, r3
 8005d5e:	4413      	add	r3, r2
 8005d60:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[6] = 0.0f;
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005d72:	fb01 f303 	mul.w	r3, r1, r3
 8005d76:	4413      	add	r3, r2
 8005d78:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[7] = 0.0f;
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005d8a:	fb01 f303 	mul.w	r3, r1, r3
 8005d8e:	4413      	add	r3, r2
 8005d90:	f603 335c 	addw	r3, r3, #2908	; 0xb5c
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[8] = 0.0f;
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005da2:	fb01 f303 	mul.w	r3, r1, r3
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6336 	add.w	r3, r3, #2912	; 0xb60
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[9] = 0.0f;
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f640 716c 	movw	r1, #3948	; 0xf6c
 8005dba:	fb01 f303 	mul.w	r3, r1, r3
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f603 3364 	addw	r3, r3, #2916	; 0xb64
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < config->tables_count; i++)
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	f63f abc2 	bhi.w	8005560 <config_default+0x104>
  }

  return status;
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop

08005de8 <CRC16_RegisterHardware>:
#elif defined(CRC_HW)

static CRC_HandleTypeDef * handle_crc;

void CRC16_RegisterHardware(CRC_HandleTypeDef * hcrc)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  handle_crc = hcrc;
 8005df0:	4a04      	ldr	r2, [pc, #16]	; (8005e04 <CRC16_RegisterHardware+0x1c>)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6013      	str	r3, [r2, #0]
}
 8005df6:	bf00      	nop
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	200114fc 	.word	0x200114fc

08005e08 <CRC16_Generate>:

inline uint16_t CRC16_Generate(uint8_t * input, uint32_t size)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	81fb      	strh	r3, [r7, #14]
  if(handle_crc != NULL)
 8005e16:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <CRC16_Generate+0x34>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d008      	beq.n	8005e30 <CRC16_Generate+0x28>
  {
      result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 8005e1e:	4b07      	ldr	r3, [pc, #28]	; (8005e3c <CRC16_Generate+0x34>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f004 f8e6 	bl	8009ff8 <HAL_CRC_Calculate>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	81fb      	strh	r3, [r7, #14]
  }
  return result;
 8005e30:	89fb      	ldrh	r3, [r7, #14]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	200114fc 	.word	0x200114fc

08005e40 <CRC8_Generate>:

inline uint8_t CRC8_Generate(uint8_t * input, uint32_t size)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	81fb      	strh	r3, [r7, #14]
  if(handle_crc != NULL)
 8005e4e:	4b0d      	ldr	r3, [pc, #52]	; (8005e84 <CRC8_Generate+0x44>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d008      	beq.n	8005e68 <CRC8_Generate+0x28>
  {
    result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 8005e56:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <CRC8_Generate+0x44>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f004 f8ca 	bl	8009ff8 <HAL_CRC_Calculate>
 8005e64:	4603      	mov	r3, r0
 8005e66:	81fb      	strh	r3, [r7, #14]

  }
  return (result & 0xFF) ^ (result >> 8);
 8005e68:	89fb      	ldrh	r3, [r7, #14]
 8005e6a:	b25a      	sxtb	r2, r3
 8005e6c:	89fb      	ldrh	r3, [r7, #14]
 8005e6e:	0a1b      	lsrs	r3, r3, #8
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	b25b      	sxtb	r3, r3
 8005e74:	4053      	eors	r3, r2
 8005e76:	b25b      	sxtb	r3, r3
 8005e78:	b2db      	uxtb	r3, r3
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	200114fc 	.word	0x200114fc

08005e88 <csps_exti>:
}

#define csps_time_calculate(x) (1.0f / (x) * 60.0f / 120.0f * 3.0f)

inline void csps_exti(void)
{
 8005e88:	b5b0      	push	{r4, r5, r7, lr}
 8005e8a:	b094      	sub	sp, #80	; 0x50
 8005e8c:	af00      	add	r7, sp, #0
  static float average_prev = 0;
  static uint8_t dataindex = 0;
  static uint32_t t1 = 0;
  static uint32_t t2 = 0;

  const float uspa_koff = 1.0f / 7.0f;
 8005e8e:	4bb4      	ldr	r3, [pc, #720]	; (8006160 <csps_exti+0x2d8>)
 8005e90:	63bb      	str	r3, [r7, #56]	; 0x38
  float rpm_gui_koff = 1.0f / 50.0f;
 8005e92:	4bb4      	ldr	r3, [pc, #720]	; (8006164 <csps_exti+0x2dc>)
 8005e94:	64fb      	str	r3, [r7, #76]	; 0x4c
  float rpm_koff = 1.0f / 20.0f;
 8005e96:	4bb4      	ldr	r3, [pc, #720]	; (8006168 <csps_exti+0x2e0>)
 8005e98:	64bb      	str	r3, [r7, #72]	; 0x48

  uint32_t i, ticks, cur, prev;
  sCspsData data;
  float cs14, cs23;
  float average = 0;
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  float diff = 0;
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	637b      	str	r3, [r7, #52]	; 0x34

  cur = Delay_Tick;
 8005ea6:	4bb1      	ldr	r3, [pc, #708]	; (800616c <csps_exti+0x2e4>)
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	633b      	str	r3, [r7, #48]	; 0x30

  if(csps_rpm < 1500)
 8005eac:	4bb0      	ldr	r3, [pc, #704]	; (8006170 <csps_exti+0x2e8>)
 8005eae:	edd3 7a00 	vldr	s15, [r3]
 8005eb2:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8006174 <csps_exti+0x2ec>
 8005eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ebe:	d512      	bpl.n	8005ee6 <csps_exti+0x5e>
  {
    if(DelayDiff(cur, csps_pulse_last) < csps_time_calculate(1500))
 8005ec0:	4bad      	ldr	r3, [pc, #692]	; (8006178 <csps_exti+0x2f0>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ec8:	f000 fcfe 	bl	80068c8 <DelayDiff>
 8005ecc:	ee07 0a90 	vmov	s15, r0
 8005ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed4:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800617c <csps_exti+0x2f4>
 8005ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee0:	f100 82a5 	bmi.w	800642e <csps_exti+0x5a6>
 8005ee4:	e022      	b.n	8005f2c <csps_exti+0xa4>
      return;
  }
  else
  {
    if(DelayDiff(cur, csps_pulse_last) < csps_time_calculate(csps_rpm))
 8005ee6:	4ba4      	ldr	r3, [pc, #656]	; (8006178 <csps_exti+0x2f0>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4619      	mov	r1, r3
 8005eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eee:	f000 fceb 	bl	80068c8 <DelayDiff>
 8005ef2:	ee07 0a90 	vmov	s15, r0
 8005ef6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005efa:	4b9d      	ldr	r3, [pc, #628]	; (8006170 <csps_exti+0x2e8>)
 8005efc:	edd3 6a00 	vldr	s13, [r3]
 8005f00:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005f04:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005f08:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8006180 <csps_exti+0x2f8>
 8005f0c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005f10:	ed9f 6a9c 	vldr	s12, [pc, #624]	; 8006184 <csps_exti+0x2fc>
 8005f14:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005f18:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8005f1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005f20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f28:	f100 8283 	bmi.w	8006432 <csps_exti+0x5aa>
      return;
  }

  csps_pulse_last = cur;
 8005f2c:	4a92      	ldr	r2, [pc, #584]	; (8006178 <csps_exti+0x2f0>)
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	6013      	str	r3, [r2, #0]
  for(i = 1; i < IRQ_SIZE; i++)
 8005f32:	2301      	movs	r3, #1
 8005f34:	647b      	str	r3, [r7, #68]	; 0x44
 8005f36:	e00b      	b.n	8005f50 <csps_exti+0xc8>
    cspc_irq_data[i - 1] = cspc_irq_data[i];
 8005f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	4992      	ldr	r1, [pc, #584]	; (8006188 <csps_exti+0x300>)
 8005f3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f40:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005f44:	4990      	ldr	r1, [pc, #576]	; (8006188 <csps_exti+0x300>)
 8005f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(i = 1; i < IRQ_SIZE; i++)
 8005f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f52:	2b07      	cmp	r3, #7
 8005f54:	d9f0      	bls.n	8005f38 <csps_exti+0xb0>
  cspc_irq_data[IRQ_SIZE - 1] = cur;
 8005f56:	4a8c      	ldr	r2, [pc, #560]	; (8006188 <csps_exti+0x300>)
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	61d3      	str	r3, [r2, #28]
  if(cspc_irq_data[0] == 0)
 8005f5c:	4b8a      	ldr	r3, [pc, #552]	; (8006188 <csps_exti+0x300>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8268 	beq.w	8006436 <csps_exti+0x5ae>
    return;
  prev = cspc_irq_data[IRQ_SIZE - 2];
 8005f66:	4b88      	ldr	r3, [pc, #544]	; (8006188 <csps_exti+0x300>)
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	643b      	str	r3, [r7, #64]	; 0x40
  csps_rotates = 1;
 8005f6c:	4b87      	ldr	r3, [pc, #540]	; (800618c <csps_exti+0x304>)
 8005f6e:	2201      	movs	r2, #1
 8005f70:	701a      	strb	r2, [r3, #0]

  t1++;
 8005f72:	4b87      	ldr	r3, [pc, #540]	; (8006190 <csps_exti+0x308>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3301      	adds	r3, #1
 8005f78:	4a85      	ldr	r2, [pc, #532]	; (8006190 <csps_exti+0x308>)
 8005f7a:	6013      	str	r3, [r2, #0]

  for(i = 1; i < IRQ_SIZE; i++)
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f80:	e018      	b.n	8005fb4 <csps_exti+0x12c>
  {
    average += DelayDiff(cspc_irq_data[i], cspc_irq_data[i - 1]);;
 8005f82:	4a81      	ldr	r2, [pc, #516]	; (8006188 <csps_exti+0x300>)
 8005f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	4a7e      	ldr	r2, [pc, #504]	; (8006188 <csps_exti+0x300>)
 8005f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f94:	4619      	mov	r1, r3
 8005f96:	f000 fc97 	bl	80068c8 <DelayDiff>
 8005f9a:	ee07 0a90 	vmov	s15, r0
 8005f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005faa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  for(i = 1; i < IRQ_SIZE; i++)
 8005fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb6:	2b07      	cmp	r3, #7
 8005fb8:	d9e3      	bls.n	8005f82 <csps_exti+0xfa>
  }
  average /= (float)(IRQ_SIZE - 1);
 8005fba:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005fbe:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 8005fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fc6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

  if(average / average_prev > 1.0f + 1.0f / IRQ_SIZE)
 8005fca:	4b72      	ldr	r3, [pc, #456]	; (8006194 <csps_exti+0x30c>)
 8005fcc:	ed93 7a00 	vldr	s14, [r3]
 8005fd0:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8005fd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fd8:	eeb7 7a02 	vmov.f32	s14, #114	; 0x3f900000  1.125
 8005fdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fe4:	dd26      	ble.n	8006034 <csps_exti+0x1ac>
  {
    if(++t2 == 2)
 8005fe6:	4b6c      	ldr	r3, [pc, #432]	; (8006198 <csps_exti+0x310>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3301      	adds	r3, #1
 8005fec:	4a6a      	ldr	r2, [pc, #424]	; (8006198 <csps_exti+0x310>)
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	4b69      	ldr	r3, [pc, #420]	; (8006198 <csps_exti+0x310>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d131      	bne.n	800605c <csps_exti+0x1d4>
    {
      ticks = t1;
 8005ff8:	4b65      	ldr	r3, [pc, #404]	; (8006190 <csps_exti+0x308>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
      t1 = 0;
 8005ffe:	4b64      	ldr	r3, [pc, #400]	; (8006190 <csps_exti+0x308>)
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]
      t2 = 0;
 8006004:	4b64      	ldr	r3, [pc, #400]	; (8006198 <csps_exti+0x310>)
 8006006:	2200      	movs	r2, #0
 8006008:	601a      	str	r2, [r3, #0]
      if(ticks != 116)
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	2b74      	cmp	r3, #116	; 0x74
 800600e:	d00a      	beq.n	8006026 <csps_exti+0x19e>
        csps_errors += 1.0f;
 8006010:	4b62      	ldr	r3, [pc, #392]	; (800619c <csps_exti+0x314>)
 8006012:	edd3 7a00 	vldr	s15, [r3]
 8006016:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800601a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800601e:	4b5f      	ldr	r3, [pc, #380]	; (800619c <csps_exti+0x314>)
 8006020:	edc3 7a00 	vstr	s15, [r3]
 8006024:	e01a      	b.n	800605c <csps_exti+0x1d4>
      else
      {
        csps_last = cur;
 8006026:	4a5e      	ldr	r2, [pc, #376]	; (80061a0 <csps_exti+0x318>)
 8006028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602a:	6013      	str	r3, [r2, #0]
        csps_found = 1;
 800602c:	4b5d      	ldr	r3, [pc, #372]	; (80061a4 <csps_exti+0x31c>)
 800602e:	2201      	movs	r2, #1
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	e013      	b.n	800605c <csps_exti+0x1d4>
      }
    }
  }
  else
  {
    t2 = 0;
 8006034:	4b58      	ldr	r3, [pc, #352]	; (8006198 <csps_exti+0x310>)
 8006036:	2200      	movs	r2, #0
 8006038:	601a      	str	r2, [r3, #0]
    if(t1 >= 116)
 800603a:	4b55      	ldr	r3, [pc, #340]	; (8006190 <csps_exti+0x308>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b73      	cmp	r3, #115	; 0x73
 8006040:	d90c      	bls.n	800605c <csps_exti+0x1d4>
    {
      t1 = 1;
 8006042:	4b53      	ldr	r3, [pc, #332]	; (8006190 <csps_exti+0x308>)
 8006044:	2201      	movs	r2, #1
 8006046:	601a      	str	r2, [r3, #0]
      csps_errors += 1.0f;
 8006048:	4b54      	ldr	r3, [pc, #336]	; (800619c <csps_exti+0x314>)
 800604a:	edd3 7a00 	vldr	s15, [r3]
 800604e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006052:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006056:	4b51      	ldr	r3, [pc, #324]	; (800619c <csps_exti+0x314>)
 8006058:	edc3 7a00 	vstr	s15, [r3]
    }
  }

  average_prev = average;
 800605c:	4a4d      	ldr	r2, [pc, #308]	; (8006194 <csps_exti+0x30c>)
 800605e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006060:	6013      	str	r3, [r2, #0]

  if(csps_found)
 8006062:	4b50      	ldr	r3, [pc, #320]	; (80061a4 <csps_exti+0x31c>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 8190 	beq.w	800638e <csps_exti+0x506>
  {
    switch(t1)
 800606e:	4b48      	ldr	r3, [pc, #288]	; (8006190 <csps_exti+0x308>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <csps_exti+0x1f4>
 8006076:	2b01      	cmp	r3, #1
 8006078:	d029      	beq.n	80060ce <csps_exti+0x246>
 800607a:	e036      	b.n	80060ea <csps_exti+0x262>
    {
      case 0:
        csps_angle14 = ANGLE_INITIAL;
 800607c:	4b4a      	ldr	r3, [pc, #296]	; (80061a8 <csps_exti+0x320>)
 800607e:	4a4b      	ldr	r2, [pc, #300]	; (80061ac <csps_exti+0x324>)
 8006080:	601a      	str	r2, [r3, #0]
        if (ANGLE_INITIAL > 0)
          csps_angle23 = ANGLE_INITIAL - 180.0f;
        else
          csps_angle23 = ANGLE_INITIAL + 180.0f;
 8006082:	4b4b      	ldr	r3, [pc, #300]	; (80061b0 <csps_exti+0x328>)
 8006084:	4a4b      	ldr	r2, [pc, #300]	; (80061b4 <csps_exti+0x32c>)
 8006086:	601a      	str	r2, [r3, #0]
        cs14_p = csps_angle14 - 3.0f;
 8006088:	4b47      	ldr	r3, [pc, #284]	; (80061a8 <csps_exti+0x320>)
 800608a:	edd3 7a00 	vldr	s15, [r3]
 800608e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006092:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006096:	4b48      	ldr	r3, [pc, #288]	; (80061b8 <csps_exti+0x330>)
 8006098:	edc3 7a00 	vstr	s15, [r3]
        cs23_p = csps_angle23 - 3.0f;
 800609c:	4b44      	ldr	r3, [pc, #272]	; (80061b0 <csps_exti+0x328>)
 800609e:	edd3 7a00 	vldr	s15, [r3]
 80060a2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80060a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060aa:	4b44      	ldr	r3, [pc, #272]	; (80061bc <csps_exti+0x334>)
 80060ac:	edc3 7a00 	vstr	s15, [r3]
        prev = (cur - (DelayDiff(cur, prev) / 3)) & DelayMask;
 80060b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060b4:	f000 fc08 	bl	80068c8 <DelayDiff>
 80060b8:	4602      	mov	r2, r0
 80060ba:	4b41      	ldr	r3, [pc, #260]	; (80061c0 <csps_exti+0x338>)
 80060bc:	fba3 2302 	umull	r2, r3, r3, r2
 80060c0:	085b      	lsrs	r3, r3, #1
 80060c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80060ca:	643b      	str	r3, [r7, #64]	; 0x40
        break;
 80060cc:	e0bf      	b.n	800624e <csps_exti+0x3c6>
      case 1:
        prev = (cur - (DelayDiff(cur, prev) / 3)) & DelayMask;
 80060ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060d2:	f000 fbf9 	bl	80068c8 <DelayDiff>
 80060d6:	4602      	mov	r2, r0
 80060d8:	4b39      	ldr	r3, [pc, #228]	; (80061c0 <csps_exti+0x338>)
 80060da:	fba3 2302 	umull	r2, r3, r3, r2
 80060de:	085b      	lsrs	r3, r3, #1
 80060e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80060e8:	643b      	str	r3, [r7, #64]	; 0x40
        /* no break */
      default:
        cs14 = csps_angle14 + 3.0f;
 80060ea:	4b2f      	ldr	r3, [pc, #188]	; (80061a8 <csps_exti+0x320>)
 80060ec:	edd3 7a00 	vldr	s15, [r3]
 80060f0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80060f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060f8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        if(cs14 > 180.0f) csps_angle14 = cs14 - 360.0f;
 80060fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006100:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80061c4 <csps_exti+0x33c>
 8006104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800610c:	dd09      	ble.n	8006122 <csps_exti+0x29a>
 800610e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006112:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80061c8 <csps_exti+0x340>
 8006116:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800611a:	4b23      	ldr	r3, [pc, #140]	; (80061a8 <csps_exti+0x320>)
 800611c:	edc3 7a00 	vstr	s15, [r3]
 8006120:	e002      	b.n	8006128 <csps_exti+0x2a0>
        else csps_angle14 = cs14;
 8006122:	4a21      	ldr	r2, [pc, #132]	; (80061a8 <csps_exti+0x320>)
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	6013      	str	r3, [r2, #0]

        cs23 = csps_angle23 + 3.0f;
 8006128:	4b21      	ldr	r3, [pc, #132]	; (80061b0 <csps_exti+0x328>)
 800612a:	edd3 7a00 	vldr	s15, [r3]
 800612e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006132:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006136:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        if(cs23 > 180.0f) csps_angle23 = cs23 - 360.0f;
 800613a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800613e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80061c4 <csps_exti+0x33c>
 8006142:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800614a:	dd3f      	ble.n	80061cc <csps_exti+0x344>
 800614c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006150:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80061c8 <csps_exti+0x340>
 8006154:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006158:	4b15      	ldr	r3, [pc, #84]	; (80061b0 <csps_exti+0x328>)
 800615a:	edc3 7a00 	vstr	s15, [r3]
 800615e:	e038      	b.n	80061d2 <csps_exti+0x34a>
 8006160:	3e124925 	.word	0x3e124925
 8006164:	3ca3d70a 	.word	0x3ca3d70a
 8006168:	3d4ccccd 	.word	0x3d4ccccd
 800616c:	40000c00 	.word	0x40000c00
 8006170:	20011530 	.word	0x20011530
 8006174:	44bb8000 	.word	0x44bb8000
 8006178:	20011524 	.word	0x20011524
 800617c:	3a83126e 	.word	0x3a83126e
 8006180:	42700000 	.word	0x42700000
 8006184:	42f00000 	.word	0x42f00000
 8006188:	20011500 	.word	0x20011500
 800618c:	20011521 	.word	0x20011521
 8006190:	20011740 	.word	0x20011740
 8006194:	20011744 	.word	0x20011744
 8006198:	20011748 	.word	0x20011748
 800619c:	2001152c 	.word	0x2001152c
 80061a0:	20011528 	.word	0x20011528
 80061a4:	20011520 	.word	0x20011520
 80061a8:	2001174c 	.word	0x2001174c
 80061ac:	c2ea0000 	.word	0xc2ea0000
 80061b0:	20011750 	.word	0x20011750
 80061b4:	427c0000 	.word	0x427c0000
 80061b8:	20011754 	.word	0x20011754
 80061bc:	20011758 	.word	0x20011758
 80061c0:	aaaaaaab 	.word	0xaaaaaaab
 80061c4:	43340000 	.word	0x43340000
 80061c8:	43b40000 	.word	0x43b40000
        else csps_angle23 = cs23;
 80061cc:	4a9c      	ldr	r2, [pc, #624]	; (8006440 <csps_exti+0x5b8>)
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	6013      	str	r3, [r2, #0]

        cs14_p += 3.0f;
 80061d2:	4b9c      	ldr	r3, [pc, #624]	; (8006444 <csps_exti+0x5bc>)
 80061d4:	edd3 7a00 	vldr	s15, [r3]
 80061d8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80061dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061e0:	4b98      	ldr	r3, [pc, #608]	; (8006444 <csps_exti+0x5bc>)
 80061e2:	edc3 7a00 	vstr	s15, [r3]
        if(cs14_p > 180.0f)
 80061e6:	4b97      	ldr	r3, [pc, #604]	; (8006444 <csps_exti+0x5bc>)
 80061e8:	edd3 7a00 	vldr	s15, [r3]
 80061ec:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8006448 <csps_exti+0x5c0>
 80061f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f8:	dd09      	ble.n	800620e <csps_exti+0x386>
          cs14_p -= 360.0f;
 80061fa:	4b92      	ldr	r3, [pc, #584]	; (8006444 <csps_exti+0x5bc>)
 80061fc:	edd3 7a00 	vldr	s15, [r3]
 8006200:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800644c <csps_exti+0x5c4>
 8006204:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006208:	4b8e      	ldr	r3, [pc, #568]	; (8006444 <csps_exti+0x5bc>)
 800620a:	edc3 7a00 	vstr	s15, [r3]

        cs23_p += 3.0f;
 800620e:	4b90      	ldr	r3, [pc, #576]	; (8006450 <csps_exti+0x5c8>)
 8006210:	edd3 7a00 	vldr	s15, [r3]
 8006214:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006218:	ee77 7a87 	vadd.f32	s15, s15, s14
 800621c:	4b8c      	ldr	r3, [pc, #560]	; (8006450 <csps_exti+0x5c8>)
 800621e:	edc3 7a00 	vstr	s15, [r3]
        if(cs23_p > 180.0f)
 8006222:	4b8b      	ldr	r3, [pc, #556]	; (8006450 <csps_exti+0x5c8>)
 8006224:	edd3 7a00 	vldr	s15, [r3]
 8006228:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8006448 <csps_exti+0x5c0>
 800622c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006234:	dc00      	bgt.n	8006238 <csps_exti+0x3b0>
          cs23_p -= 360.0f;
        break;
 8006236:	e009      	b.n	800624c <csps_exti+0x3c4>
          cs23_p -= 360.0f;
 8006238:	4b85      	ldr	r3, [pc, #532]	; (8006450 <csps_exti+0x5c8>)
 800623a:	edd3 7a00 	vldr	s15, [r3]
 800623e:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800644c <csps_exti+0x5c4>
 8006242:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006246:	4b82      	ldr	r3, [pc, #520]	; (8006450 <csps_exti+0x5c8>)
 8006248:	edc3 7a00 	vstr	s15, [r3]
        break;
 800624c:	bf00      	nop
    }

    if(csps_rpm < 200.0f)
 800624e:	4b81      	ldr	r3, [pc, #516]	; (8006454 <csps_exti+0x5cc>)
 8006250:	edd3 7a00 	vldr	s15, [r3]
 8006254:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8006458 <csps_exti+0x5d0>
 8006258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800625c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006260:	d502      	bpl.n	8006268 <csps_exti+0x3e0>
      rpm_koff = 1.0f;
 8006262:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006266:	64bb      	str	r3, [r7, #72]	; 0x48

    diff = (float)DelayDiff(cur, prev);
 8006268:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800626a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800626c:	f000 fb2c 	bl	80068c8 <DelayDiff>
 8006270:	ee07 0a90 	vmov	s15, r0
 8006274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006278:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    if(csps_period > 10000000.0f)
 800627c:	4b77      	ldr	r3, [pc, #476]	; (800645c <csps_exti+0x5d4>)
 800627e:	edd3 7a00 	vldr	s15, [r3]
 8006282:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8006460 <csps_exti+0x5d8>
 8006286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800628a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800628e:	dd02      	ble.n	8006296 <csps_exti+0x40e>
      csps_period = 10000000.0f;
 8006290:	4b72      	ldr	r3, [pc, #456]	; (800645c <csps_exti+0x5d4>)
 8006292:	4a74      	ldr	r2, [pc, #464]	; (8006464 <csps_exti+0x5dc>)
 8006294:	601a      	str	r2, [r3, #0]

    csps_period = csps_period * (1.0f - rpm_koff) + (diff * 120.0f) * rpm_koff;
 8006296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800629a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800629e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062a2:	4b6e      	ldr	r3, [pc, #440]	; (800645c <csps_exti+0x5d4>)
 80062a4:	edd3 7a00 	vldr	s15, [r3]
 80062a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80062b0:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8006468 <csps_exti+0x5e0>
 80062b4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80062b8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80062bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062c4:	4b65      	ldr	r3, [pc, #404]	; (800645c <csps_exti+0x5d4>)
 80062c6:	edc3 7a00 	vstr	s15, [r3]
    csps_rpm = 1000000.0f / csps_period * 60.0f;
 80062ca:	4b64      	ldr	r3, [pc, #400]	; (800645c <csps_exti+0x5d4>)
 80062cc:	ed93 7a00 	vldr	s14, [r3]
 80062d0:	eddf 6a66 	vldr	s13, [pc, #408]	; 800646c <csps_exti+0x5e4>
 80062d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062d8:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8006470 <csps_exti+0x5e8>
 80062dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062e0:	4b5c      	ldr	r3, [pc, #368]	; (8006454 <csps_exti+0x5cc>)
 80062e2:	edc3 7a00 	vstr	s15, [r3]

    if(csps_rpm < 400) rpm_gui_koff = 0.1f;
 80062e6:	4b5b      	ldr	r3, [pc, #364]	; (8006454 <csps_exti+0x5cc>)
 80062e8:	edd3 7a00 	vldr	s15, [r3]
 80062ec:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8006474 <csps_exti+0x5ec>
 80062f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f8:	d501      	bpl.n	80062fe <csps_exti+0x476>
 80062fa:	4b5f      	ldr	r3, [pc, #380]	; (8006478 <csps_exti+0x5f0>)
 80062fc:	64fb      	str	r3, [r7, #76]	; 0x4c

    csps_rpm_gui = (1.0f - rpm_gui_koff) * csps_rpm_gui + csps_rpm * rpm_gui_koff;
 80062fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006302:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006306:	ee37 7a67 	vsub.f32	s14, s14, s15
 800630a:	4b5c      	ldr	r3, [pc, #368]	; (800647c <csps_exti+0x5f4>)
 800630c:	edd3 7a00 	vldr	s15, [r3]
 8006310:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006314:	4b4f      	ldr	r3, [pc, #316]	; (8006454 <csps_exti+0x5cc>)
 8006316:	edd3 6a00 	vldr	s13, [r3]
 800631a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800631e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006326:	4b55      	ldr	r3, [pc, #340]	; (800647c <csps_exti+0x5f4>)
 8006328:	edc3 7a00 	vstr	s15, [r3]
    csps_uspa = csps_uspa * (1.0f - uspa_koff) + (diff / 3.0f) * uspa_koff;
 800632c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006330:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006334:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006338:	4b51      	ldr	r3, [pc, #324]	; (8006480 <csps_exti+0x5f8>)
 800633a:	edd3 7a00 	vldr	s15, [r3]
 800633e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006342:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006346:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800634a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800634e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800635a:	4b49      	ldr	r3, [pc, #292]	; (8006480 <csps_exti+0x5f8>)
 800635c:	edc3 7a00 	vstr	s15, [r3]

    data.AngleCur14 = csps_angle14;
 8006360:	4b48      	ldr	r3, [pc, #288]	; (8006484 <csps_exti+0x5fc>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	60fb      	str	r3, [r7, #12]
    data.AngleCur23 = csps_angle23;
 8006366:	4b36      	ldr	r3, [pc, #216]	; (8006440 <csps_exti+0x5b8>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	617b      	str	r3, [r7, #20]
    data.AnglePrev14 = cs14_p;
 800636c:	4b35      	ldr	r3, [pc, #212]	; (8006444 <csps_exti+0x5bc>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	613b      	str	r3, [r7, #16]
    data.AnglePrev23 = cs23_p;
 8006372:	4b37      	ldr	r3, [pc, #220]	; (8006450 <csps_exti+0x5c8>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	61bb      	str	r3, [r7, #24]
    data.DelayPrev = prev;
 8006378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800637a:	60bb      	str	r3, [r7, #8]
    data.DelayCur = cur;
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	607b      	str	r3, [r7, #4]
    data.RPM = csps_rpm;
 8006380:	4b34      	ldr	r3, [pc, #208]	; (8006454 <csps_exti+0x5cc>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	61fb      	str	r3, [r7, #28]
    data.uSPA = csps_uspa;
 8006386:	4b3e      	ldr	r3, [pc, #248]	; (8006480 <csps_exti+0x5f8>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	623b      	str	r3, [r7, #32]
 800638c:	e02d      	b.n	80063ea <csps_exti+0x562>

  }
  else
  {
    data.AngleCur14 = 0;
 800638e:	f04f 0300 	mov.w	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]
    data.AngleCur23 = 0;
 8006394:	f04f 0300 	mov.w	r3, #0
 8006398:	617b      	str	r3, [r7, #20]
    data.AnglePrev14 = 0;
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	613b      	str	r3, [r7, #16]
    data.AnglePrev23 = 0;
 80063a0:	f04f 0300 	mov.w	r3, #0
 80063a4:	61bb      	str	r3, [r7, #24]
    data.DelayPrev = 0;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60bb      	str	r3, [r7, #8]
    data.DelayCur = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	607b      	str	r3, [r7, #4]
    data.RPM = 0;
 80063ae:	f04f 0300 	mov.w	r3, #0
 80063b2:	61fb      	str	r3, [r7, #28]
    data.uSPA = 1.0f / csps_rpm;
 80063b4:	4b27      	ldr	r3, [pc, #156]	; (8006454 <csps_exti+0x5cc>)
 80063b6:	ed93 7a00 	vldr	s14, [r3]
 80063ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063c2:	edc7 7a08 	vstr	s15, [r7, #32]
    csps_period = 1.0f / csps_rpm;
 80063c6:	4b23      	ldr	r3, [pc, #140]	; (8006454 <csps_exti+0x5cc>)
 80063c8:	ed93 7a00 	vldr	s14, [r3]
 80063cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063d4:	4b21      	ldr	r3, [pc, #132]	; (800645c <csps_exti+0x5d4>)
 80063d6:	edc3 7a00 	vstr	s15, [r3]
    csps_rpm = 0;
 80063da:	4b1e      	ldr	r3, [pc, #120]	; (8006454 <csps_exti+0x5cc>)
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]
    csps_rpm_gui = 0;
 80063e2:	4b26      	ldr	r3, [pc, #152]	; (800647c <csps_exti+0x5f4>)
 80063e4:	f04f 0200 	mov.w	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]
  }
  CspsData[dataindex] = data;
 80063ea:	4b27      	ldr	r3, [pc, #156]	; (8006488 <csps_exti+0x600>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	4a27      	ldr	r2, [pc, #156]	; (800648c <csps_exti+0x604>)
 80063f0:	015b      	lsls	r3, r3, #5
 80063f2:	4413      	add	r3, r2
 80063f4:	461d      	mov	r5, r3
 80063f6:	1d3c      	adds	r4, r7, #4
 80063f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006400:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  CspsDataPtr = &CspsData[dataindex];
 8006404:	4b20      	ldr	r3, [pc, #128]	; (8006488 <csps_exti+0x600>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	015b      	lsls	r3, r3, #5
 800640a:	4a20      	ldr	r2, [pc, #128]	; (800648c <csps_exti+0x604>)
 800640c:	4413      	add	r3, r2
 800640e:	4a20      	ldr	r2, [pc, #128]	; (8006490 <csps_exti+0x608>)
 8006410:	6013      	str	r3, [r2, #0]
  if(++dataindex >= DATA_SIZE)
 8006412:	4b1d      	ldr	r3, [pc, #116]	; (8006488 <csps_exti+0x600>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	3301      	adds	r3, #1
 8006418:	b2da      	uxtb	r2, r3
 800641a:	4b1b      	ldr	r3, [pc, #108]	; (8006488 <csps_exti+0x600>)
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	4b1a      	ldr	r3, [pc, #104]	; (8006488 <csps_exti+0x600>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b0f      	cmp	r3, #15
 8006424:	d908      	bls.n	8006438 <csps_exti+0x5b0>
    dataindex = 0;
 8006426:	4b18      	ldr	r3, [pc, #96]	; (8006488 <csps_exti+0x600>)
 8006428:	2200      	movs	r2, #0
 800642a:	701a      	strb	r2, [r3, #0]
 800642c:	e004      	b.n	8006438 <csps_exti+0x5b0>
      return;
 800642e:	bf00      	nop
 8006430:	e002      	b.n	8006438 <csps_exti+0x5b0>
      return;
 8006432:	bf00      	nop
 8006434:	e000      	b.n	8006438 <csps_exti+0x5b0>
    return;
 8006436:	bf00      	nop

}
 8006438:	3750      	adds	r7, #80	; 0x50
 800643a:	46bd      	mov	sp, r7
 800643c:	bdb0      	pop	{r4, r5, r7, pc}
 800643e:	bf00      	nop
 8006440:	20011750 	.word	0x20011750
 8006444:	20011754 	.word	0x20011754
 8006448:	43340000 	.word	0x43340000
 800644c:	43b40000 	.word	0x43b40000
 8006450:	20011758 	.word	0x20011758
 8006454:	20011530 	.word	0x20011530
 8006458:	43480000 	.word	0x43480000
 800645c:	2001153c 	.word	0x2001153c
 8006460:	4b189680 	.word	0x4b189680
 8006464:	4b189680 	.word	0x4b189680
 8006468:	42f00000 	.word	0x42f00000
 800646c:	49742400 	.word	0x49742400
 8006470:	42700000 	.word	0x42700000
 8006474:	43c80000 	.word	0x43c80000
 8006478:	3dcccccd 	.word	0x3dcccccd
 800647c:	20011534 	.word	0x20011534
 8006480:	20011538 	.word	0x20011538
 8006484:	2001174c 	.word	0x2001174c
 8006488:	2001175c 	.word	0x2001175c
 800648c:	20011540 	.word	0x20011540
 8006490:	20010048 	.word	0x20010048

08006494 <csps_getangle14>:
  else return 360 + a - b;
}
*/

inline float csps_getangle14(void)
{
 8006494:	b5b0      	push	{r4, r5, r7, lr}
 8006496:	b08e      	sub	sp, #56	; 0x38
 8006498:	af00      	add	r7, sp, #0
  static float angle_prev = 0;
  float now = Delay_Tick;
 800649a:	4b57      	ldr	r3, [pc, #348]	; (80065f8 <csps_getangle14+0x164>)
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float angle, acur, aprev, mult, cur;
  sCspsData data = *CspsDataPtr;
 80064aa:	4b54      	ldr	r3, [pc, #336]	; (80065fc <csps_getangle14+0x168>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	463c      	mov	r4, r7
 80064b0:	461d      	mov	r5, r3
 80064b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80064ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  if(!csps_rotates)
 80064be:	4b50      	ldr	r3, [pc, #320]	; (8006600 <csps_getangle14+0x16c>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d102      	bne.n	80064ce <csps_getangle14+0x3a>
    return 0.0f;
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	e08d      	b.n	80065ea <csps_getangle14+0x156>

  cur = DelayDiff(data.DelayCur, data.DelayPrev);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	4611      	mov	r1, r2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 f9f7 	bl	80068c8 <DelayDiff>
 80064da:	ee07 0a90 	vmov	s15, r0
 80064de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  now = DelayDiff(now, data.DelayPrev);
 80064e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80064ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4619      	mov	r1, r3
 80064f2:	ee17 0a90 	vmov	r0, s15
 80064f6:	f000 f9e7 	bl	80068c8 <DelayDiff>
 80064fa:	ee07 0a90 	vmov	s15, r0
 80064fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006502:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

  acur = data.AngleCur14;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	633b      	str	r3, [r7, #48]	; 0x30
  aprev = data.AnglePrev14;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	627b      	str	r3, [r7, #36]	; 0x24

  if(acur < aprev)
 800650e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006512:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800651a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800651e:	d507      	bpl.n	8006530 <csps_getangle14+0x9c>
    acur += 360.0f;
 8006520:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006524:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8006604 <csps_getangle14+0x170>
 8006528:	ee77 7a87 	vadd.f32	s15, s15, s14
 800652c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

  angle = acur - aprev;
 8006530:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006534:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800653c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  mult = angle / cur;
 8006540:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8006544:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800654c:	edc7 7a08 	vstr	s15, [r7, #32]
  angle = mult * now + aprev;
 8006550:	ed97 7a08 	vldr	s14, [r7, #32]
 8006554:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006564:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

  while(angle > 180.0f)
 8006568:	e007      	b.n	800657a <csps_getangle14+0xe6>
    angle -= 360.0f;
 800656a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800656e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8006604 <csps_getangle14+0x170>
 8006572:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006576:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  while(angle > 180.0f)
 800657a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800657e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006608 <csps_getangle14+0x174>
 8006582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800658a:	dcee      	bgt.n	800656a <csps_getangle14+0xd6>

  if((angle - angle_prev < 0.0f && angle - angle_prev > -90.0f) || angle - angle_prev > 90.0f)
 800658c:	4b1f      	ldr	r3, [pc, #124]	; (800660c <csps_getangle14+0x178>)
 800658e:	edd3 7a00 	vldr	s15, [r3]
 8006592:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8006596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800659a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800659e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a2:	d50d      	bpl.n	80065c0 <csps_getangle14+0x12c>
 80065a4:	4b19      	ldr	r3, [pc, #100]	; (800660c <csps_getangle14+0x178>)
 80065a6:	edd3 7a00 	vldr	s15, [r3]
 80065aa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80065ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065b2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006610 <csps_getangle14+0x17c>
 80065b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065be:	dc0d      	bgt.n	80065dc <csps_getangle14+0x148>
 80065c0:	4b12      	ldr	r3, [pc, #72]	; (800660c <csps_getangle14+0x178>)
 80065c2:	edd3 7a00 	vldr	s15, [r3]
 80065c6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80065ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065ce:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006614 <csps_getangle14+0x180>
 80065d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065da:	dd02      	ble.n	80065e2 <csps_getangle14+0x14e>
  {
    angle = angle_prev;
 80065dc:	4b0b      	ldr	r3, [pc, #44]	; (800660c <csps_getangle14+0x178>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  angle_prev = angle;
 80065e2:	4a0a      	ldr	r2, [pc, #40]	; (800660c <csps_getangle14+0x178>)
 80065e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e6:	6013      	str	r3, [r2, #0]

  return angle;
 80065e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ea:	ee07 3a90 	vmov	s15, r3
}
 80065ee:	eeb0 0a67 	vmov.f32	s0, s15
 80065f2:	3738      	adds	r7, #56	; 0x38
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bdb0      	pop	{r4, r5, r7, pc}
 80065f8:	40000c00 	.word	0x40000c00
 80065fc:	20010048 	.word	0x20010048
 8006600:	20011521 	.word	0x20011521
 8006604:	43b40000 	.word	0x43b40000
 8006608:	43340000 	.word	0x43340000
 800660c:	20011760 	.word	0x20011760
 8006610:	c2b40000 	.word	0xc2b40000
 8006614:	42b40000 	.word	0x42b40000

08006618 <csps_getangle23from14>:

  return angle;
}

inline float csps_getangle23from14(float angle)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	ed87 0a01 	vstr	s0, [r7, #4]
  if(!csps_rotates)
 8006622:	4b15      	ldr	r3, [pc, #84]	; (8006678 <csps_getangle23from14+0x60>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	d102      	bne.n	8006632 <csps_getangle23from14+0x1a>
    return 0.0f;
 800662c:	f04f 0300 	mov.w	r3, #0
 8006630:	e018      	b.n	8006664 <csps_getangle23from14+0x4c>

  if(angle > 0.0f) angle -= 180.0f;
 8006632:	edd7 7a01 	vldr	s15, [r7, #4]
 8006636:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800663a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800663e:	dd08      	ble.n	8006652 <csps_getangle23from14+0x3a>
 8006640:	edd7 7a01 	vldr	s15, [r7, #4]
 8006644:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800667c <csps_getangle23from14+0x64>
 8006648:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800664c:	edc7 7a01 	vstr	s15, [r7, #4]
 8006650:	e007      	b.n	8006662 <csps_getangle23from14+0x4a>
  else angle += 180.0f;
 8006652:	edd7 7a01 	vldr	s15, [r7, #4]
 8006656:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800667c <csps_getangle23from14+0x64>
 800665a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800665e:	edc7 7a01 	vstr	s15, [r7, #4]
  return angle;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	ee07 3a90 	vmov	s15, r3
}
 8006668:	eeb0 0a67 	vmov.f32	s0, s15
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	20011521 	.word	0x20011521
 800667c:	43340000 	.word	0x43340000

08006680 <csps_getrpm>:

inline float csps_getrpm(void)
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
  return csps_rpm;
 8006684:	4b04      	ldr	r3, [pc, #16]	; (8006698 <csps_getrpm+0x18>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	ee07 3a90 	vmov	s15, r3
}
 800668c:	eeb0 0a67 	vmov.f32	s0, s15
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	20011530 	.word	0x20011530

0800669c <csps_getrpmgui>:

inline float csps_getrpmgui(void)
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
  return csps_rpm_gui;
 80066a0:	4b04      	ldr	r3, [pc, #16]	; (80066b4 <csps_getrpmgui+0x18>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	ee07 3a90 	vmov	s15, r3
}
 80066a8:	eeb0 0a67 	vmov.f32	s0, s15
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	20011534 	.word	0x20011534

080066b8 <csps_getuspa>:

inline float csps_getuspa(void)
{
 80066b8:	b480      	push	{r7}
 80066ba:	af00      	add	r7, sp, #0
  return csps_uspa;
 80066bc:	4b04      	ldr	r3, [pc, #16]	; (80066d0 <csps_getuspa+0x18>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	ee07 3a90 	vmov	s15, r3
}
 80066c4:	eeb0 0a67 	vmov.f32	s0, s15
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	20011538 	.word	0x20011538

080066d4 <csps_getperiod>:

inline float csps_getperiod(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
  return csps_period;
 80066d8:	4b04      	ldr	r3, [pc, #16]	; (80066ec <csps_getperiod+0x18>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	ee07 3a90 	vmov	s15, r3
}
 80066e0:	eeb0 0a67 	vmov.f32	s0, s15
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	2001153c 	.word	0x2001153c

080066f0 <csps_isrotates>:

inline uint8_t csps_isrotates(void)
{
 80066f0:	b480      	push	{r7}
 80066f2:	af00      	add	r7, sp, #0
  return csps_rotates;
 80066f4:	4b03      	ldr	r3, [pc, #12]	; (8006704 <csps_isrotates+0x14>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	b2db      	uxtb	r3, r3
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	20011521 	.word	0x20011521

08006708 <csps_isfound>:

inline uint8_t csps_isfound(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  return csps_found;
 800670c:	4b03      	ldr	r3, [pc, #12]	; (800671c <csps_isfound+0x14>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	b2db      	uxtb	r3, r3
}
 8006712:	4618      	mov	r0, r3
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	20011520 	.word	0x20011520

08006720 <csps_iserror>:

inline uint8_t csps_iserror(void)
{
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0
  return csps_errors > 3.0f;
 8006724:	4b08      	ldr	r3, [pc, #32]	; (8006748 <csps_iserror+0x28>)
 8006726:	edd3 7a00 	vldr	s15, [r3]
 800672a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800672e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006736:	bfcc      	ite	gt
 8006738:	2301      	movgt	r3, #1
 800673a:	2300      	movle	r3, #0
 800673c:	b2db      	uxtb	r3, r3
}
 800673e:	4618      	mov	r0, r3
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	2001152c 	.word	0x2001152c

0800674c <csps_loop>:

inline void csps_loop(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
  static uint32_t last_error_null = 0;

  uint32_t pulse_last = csps_pulse_last;
 8006752:	4b2b      	ldr	r3, [pc, #172]	; (8006800 <csps_loop+0xb4>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60bb      	str	r3, [r7, #8]
  uint32_t last = csps_last;
 8006758:	4b2a      	ldr	r3, [pc, #168]	; (8006804 <csps_loop+0xb8>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	607b      	str	r3, [r7, #4]
  uint32_t now = Delay_Tick;
 800675e:	4b2a      	ldr	r3, [pc, #168]	; (8006808 <csps_loop+0xbc>)
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	603b      	str	r3, [r7, #0]

  if(DelayDiff(now, pulse_last) > 50000)
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	6838      	ldr	r0, [r7, #0]
 8006768:	f000 f8ae 	bl	80068c8 <DelayDiff>
 800676c:	4602      	mov	r2, r0
 800676e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006772:	429a      	cmp	r2, r3
 8006774:	d927      	bls.n	80067c6 <csps_loop+0x7a>
  {
    pulse_last = now;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	60bb      	str	r3, [r7, #8]
    for(int i = 0; i < IRQ_SIZE; i++)
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	e007      	b.n	8006790 <csps_loop+0x44>
      cspc_irq_data[i] = 0;
 8006780:	4a22      	ldr	r2, [pc, #136]	; (800680c <csps_loop+0xc0>)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2100      	movs	r1, #0
 8006786:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0; i < IRQ_SIZE; i++)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3301      	adds	r3, #1
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b07      	cmp	r3, #7
 8006794:	ddf4      	ble.n	8006780 <csps_loop+0x34>
    csps_found = 0;
 8006796:	4b1e      	ldr	r3, [pc, #120]	; (8006810 <csps_loop+0xc4>)
 8006798:	2200      	movs	r2, #0
 800679a:	701a      	strb	r2, [r3, #0]
    csps_rpm = 0;
 800679c:	4b1d      	ldr	r3, [pc, #116]	; (8006814 <csps_loop+0xc8>)
 800679e:	f04f 0200 	mov.w	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]
    csps_rpm_gui = 0;
 80067a4:	4b1c      	ldr	r3, [pc, #112]	; (8006818 <csps_loop+0xcc>)
 80067a6:	f04f 0200 	mov.w	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]
    csps_rotates = 0;
 80067ac:	4b1b      	ldr	r3, [pc, #108]	; (800681c <csps_loop+0xd0>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	701a      	strb	r2, [r3, #0]
    csps_period = 1.0f / csps_rpm;
 80067b2:	4b18      	ldr	r3, [pc, #96]	; (8006814 <csps_loop+0xc8>)
 80067b4:	ed93 7a00 	vldr	s14, [r3]
 80067b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067c0:	4b17      	ldr	r3, [pc, #92]	; (8006820 <csps_loop+0xd4>)
 80067c2:	edc3 7a00 	vstr	s15, [r3]
  }

  if(DelayDiff(now, last_error_null) > 50000)
 80067c6:	4b17      	ldr	r3, [pc, #92]	; (8006824 <csps_loop+0xd8>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4619      	mov	r1, r3
 80067cc:	6838      	ldr	r0, [r7, #0]
 80067ce:	f000 f87b 	bl	80068c8 <DelayDiff>
 80067d2:	4602      	mov	r2, r0
 80067d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80067d8:	429a      	cmp	r2, r3
 80067da:	d90c      	bls.n	80067f6 <csps_loop+0xaa>
  {
    csps_errors *= 0.95f;
 80067dc:	4b12      	ldr	r3, [pc, #72]	; (8006828 <csps_loop+0xdc>)
 80067de:	edd3 7a00 	vldr	s15, [r3]
 80067e2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800682c <csps_loop+0xe0>
 80067e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067ea:	4b0f      	ldr	r3, [pc, #60]	; (8006828 <csps_loop+0xdc>)
 80067ec:	edc3 7a00 	vstr	s15, [r3]
    last_error_null = now;
 80067f0:	4a0c      	ldr	r2, [pc, #48]	; (8006824 <csps_loop+0xd8>)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	6013      	str	r3, [r2, #0]
  }

}
 80067f6:	bf00      	nop
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20011524 	.word	0x20011524
 8006804:	20011528 	.word	0x20011528
 8006808:	40000c00 	.word	0x40000c00
 800680c:	20011500 	.word	0x20011500
 8006810:	20011520 	.word	0x20011520
 8006814:	20011530 	.word	0x20011530
 8006818:	20011534 	.word	0x20011534
 800681c:	20011521 	.word	0x20011521
 8006820:	2001153c 	.word	0x2001153c
 8006824:	20011764 	.word	0x20011764
 8006828:	2001152c 	.word	0x2001152c
 800682c:	3f733333 	.word	0x3f733333

08006830 <DelayInit>:
static TIM_HandleTypeDef htim_delay;

volatile uint32_t DelStart[COUNTERS];

void DelayInit(void)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af00      	add	r7, sp, #0
  __DELAY_TIM_CLK_ENABLE();
 8006836:	4b20      	ldr	r3, [pc, #128]	; (80068b8 <DelayInit+0x88>)
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	4a1f      	ldr	r2, [pc, #124]	; (80068b8 <DelayInit+0x88>)
 800683c:	f043 0308 	orr.w	r3, r3, #8
 8006840:	6413      	str	r3, [r2, #64]	; 0x40
 8006842:	4b1d      	ldr	r3, [pc, #116]	; (80068b8 <DelayInit+0x88>)
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	603b      	str	r3, [r7, #0]
 800684c:	683b      	ldr	r3, [r7, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig;
    TIM_MasterConfigTypeDef sMasterConfig;

    htim_delay.Instance = DelayTimer;
 800684e:	4b1b      	ldr	r3, [pc, #108]	; (80068bc <DelayInit+0x8c>)
 8006850:	4a1b      	ldr	r2, [pc, #108]	; (80068c0 <DelayInit+0x90>)
 8006852:	601a      	str	r2, [r3, #0]
    htim_delay.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) - 1;
 8006854:	f004 ff92 	bl	800b77c <HAL_RCC_GetPCLK1Freq>
 8006858:	4603      	mov	r3, r0
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	4a19      	ldr	r2, [pc, #100]	; (80068c4 <DelayInit+0x94>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	0c9b      	lsrs	r3, r3, #18
 8006864:	3b01      	subs	r3, #1
 8006866:	4a15      	ldr	r2, [pc, #84]	; (80068bc <DelayInit+0x8c>)
 8006868:	6053      	str	r3, [r2, #4]
    htim_delay.Init.CounterMode = TIM_COUNTERMODE_UP;
 800686a:	4b14      	ldr	r3, [pc, #80]	; (80068bc <DelayInit+0x8c>)
 800686c:	2200      	movs	r2, #0
 800686e:	609a      	str	r2, [r3, #8]
    htim_delay.Init.Period = DelayMask;
 8006870:	4b12      	ldr	r3, [pc, #72]	; (80068bc <DelayInit+0x8c>)
 8006872:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8006876:	60da      	str	r2, [r3, #12]
    htim_delay.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006878:	4b10      	ldr	r3, [pc, #64]	; (80068bc <DelayInit+0x8c>)
 800687a:	2200      	movs	r2, #0
 800687c:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim_delay);
 800687e:	480f      	ldr	r0, [pc, #60]	; (80068bc <DelayInit+0x8c>)
 8006880:	f006 f9f2 	bl	800cc68 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006888:	613b      	str	r3, [r7, #16]
    HAL_TIM_ConfigClockSource(&htim_delay, &sClockSourceConfig);
 800688a:	f107 0310 	add.w	r3, r7, #16
 800688e:	4619      	mov	r1, r3
 8006890:	480a      	ldr	r0, [pc, #40]	; (80068bc <DelayInit+0x8c>)
 8006892:	f006 fd11 	bl	800d2b8 <HAL_TIM_ConfigClockSource>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006896:	2300      	movs	r3, #0
 8006898:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800689a:	2300      	movs	r3, #0
 800689c:	60fb      	str	r3, [r7, #12]
    HAL_TIMEx_MasterConfigSynchronization(&htim_delay, &sMasterConfig);
 800689e:	1d3b      	adds	r3, r7, #4
 80068a0:	4619      	mov	r1, r3
 80068a2:	4806      	ldr	r0, [pc, #24]	; (80068bc <DelayInit+0x8c>)
 80068a4:	f007 f9b2 	bl	800dc0c <HAL_TIMEx_MasterConfigSynchronization>

    HAL_TIM_Base_Start(&htim_delay);
 80068a8:	4804      	ldr	r0, [pc, #16]	; (80068bc <DelayInit+0x8c>)
 80068aa:	f006 fa09 	bl	800ccc0 <HAL_TIM_Base_Start>

}
 80068ae:	bf00      	nop
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	40023800 	.word	0x40023800
 80068bc:	20011768 	.word	0x20011768
 80068c0:	40000c00 	.word	0x40000c00
 80068c4:	431bde83 	.word	0x431bde83

080068c8 <DelayDiff>:
{
  DelayUs(val * 1000);
}

inline uint32_t DelayDiff(uint32_t a, uint32_t b)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  if(a >= b)
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d303      	bcc.n	80068e2 <DelayDiff+0x1a>
    return (a - b);
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	e005      	b.n	80068ee <DelayDiff+0x26>
  return ((DelayMask - b) + a);
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	1ad2      	subs	r2, r2, r3
 80068e8:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 80068ec:	4413      	add	r3, r2
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
	...

080068fc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006900:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006904:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8006908:	4b0b      	ldr	r3, [pc, #44]	; (8006938 <SCB_EnableICache+0x3c>)
 800690a:	2200      	movs	r2, #0
 800690c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8006910:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006914:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8006918:	4b07      	ldr	r3, [pc, #28]	; (8006938 <SCB_EnableICache+0x3c>)
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	4a06      	ldr	r2, [pc, #24]	; (8006938 <SCB_EnableICache+0x3c>)
 800691e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006922:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8006924:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006928:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 800692c:	bf00      	nop
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	e000ed00 	.word	0xe000ed00

0800693c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8006942:	4b1d      	ldr	r3, [pc, #116]	; (80069b8 <SCB_EnableDCache+0x7c>)
 8006944:	2200      	movs	r2, #0
 8006946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800694a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800694e:	4b1a      	ldr	r3, [pc, #104]	; (80069b8 <SCB_EnableDCache+0x7c>)
 8006950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006954:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	0b5b      	lsrs	r3, r3, #13
 800695a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800695e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	08db      	lsrs	r3, r3, #3
 8006964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006968:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8006972:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006978:	490f      	ldr	r1, [pc, #60]	; (80069b8 <SCB_EnableDCache+0x7c>)
 800697a:	4313      	orrs	r3, r2
 800697c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	1e5a      	subs	r2, r3, #1
 8006984:	60ba      	str	r2, [r7, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1ef      	bne.n	800696a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	1e5a      	subs	r2, r3, #1
 800698e:	60fa      	str	r2, [r7, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e5      	bne.n	8006960 <SCB_EnableDCache+0x24>
 8006994:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8006998:	4b07      	ldr	r3, [pc, #28]	; (80069b8 <SCB_EnableDCache+0x7c>)
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	4a06      	ldr	r2, [pc, #24]	; (80069b8 <SCB_EnableDCache+0x7c>)
 800699e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a2:	6153      	str	r3, [r2, #20]
 80069a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80069a8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80069ac:	bf00      	nop
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	e000ed00 	.word	0xe000ed00

080069bc <HAL_GPIO_EXTI_Callback>:
static void MX_RNG_Init(void);
static void UpdateIWDG(void);
static void UpdateDebugger(void);

inline void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 80069c6:	88fb      	ldrh	r3, [r7, #6]
 80069c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069cc:	d006      	beq.n	80069dc <HAL_GPIO_EXTI_Callback+0x20>
 80069ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069d2:	d006      	beq.n	80069e2 <HAL_GPIO_EXTI_Callback+0x26>
 80069d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d8:	d006      	beq.n	80069e8 <HAL_GPIO_EXTI_Callback+0x2c>
      break;
    case ADC_STATUS_Pin :
      HAL_TIM_Base_Start_IT(&htim7);
      break;
    default:
      break;
 80069da:	e009      	b.n	80069f0 <HAL_GPIO_EXTI_Callback+0x34>
      csps_exti();
 80069dc:	f7ff fa54 	bl	8005e88 <csps_exti>
      break;
 80069e0:	e006      	b.n	80069f0 <HAL_GPIO_EXTI_Callback+0x34>
      acis_hall_exti();
 80069e2:	f7fa fc7d 	bl	80012e0 <acis_hall_exti>
      break;
 80069e6:	e003      	b.n	80069f0 <HAL_GPIO_EXTI_Callback+0x34>
      HAL_TIM_Base_Start_IT(&htim7);
 80069e8:	4803      	ldr	r0, [pc, #12]	; (80069f8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80069ea:	f006 f993 	bl	800cd14 <HAL_TIM_Base_Start_IT>
      break;
 80069ee:	bf00      	nop
  }
}
 80069f0:	bf00      	nop
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	2001645c 	.word	0x2001645c

080069fc <HAL_TIM_PeriodElapsedCallback>:

volatile uint32_t TIME4 = 0;
volatile uint32_t TIME44 = 0;
inline void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  static uint16_t ms_tim = 0;
  if(htim == &htim4)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a15      	ldr	r2, [pc, #84]	; (8006a5c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d11d      	bne.n	8006a48 <HAL_TIM_PeriodElapsedCallback+0x4c>
  {
    TIME44 = Delay_Tick;
 8006a0c:	4b14      	ldr	r3, [pc, #80]	; (8006a60 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	4a14      	ldr	r2, [pc, #80]	; (8006a64 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006a12:	6013      	str	r3, [r2, #0]
    acis_loop_irq();
 8006a14:	f7fc f8d4 	bl	8002bc0 <acis_loop_irq>
    if(++ms_tim >= 500)
 8006a18:	4b13      	ldr	r3, [pc, #76]	; (8006a68 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8006a22:	801a      	strh	r2, [r3, #0]
 8006a24:	4b10      	ldr	r3, [pc, #64]	; (8006a68 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006a2c:	d304      	bcc.n	8006a38 <HAL_TIM_PeriodElapsedCallback+0x3c>
    {
      csps_loop();
 8006a2e:	f7ff fe8d 	bl	800674c <csps_loop>
      ms_tim = 0;
 8006a32:	4b0d      	ldr	r3, [pc, #52]	; (8006a68 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	801a      	strh	r2, [r3, #0]
    }
    TIME4 = Delay_Tick - TIME44;
 8006a38:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8006a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a3c:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	4a0a      	ldr	r2, [pc, #40]	; (8006a6c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8006a44:	6013      	str	r3, [r2, #0]
  }
  else if(htim == &htim7)
  {
    map_adc_read();
  }
}
 8006a46:	e005      	b.n	8006a54 <HAL_TIM_PeriodElapsedCallback+0x58>
  else if(htim == &htim7)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a09      	ldr	r2, [pc, #36]	; (8006a70 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d101      	bne.n	8006a54 <HAL_TIM_PeriodElapsedCallback+0x58>
    map_adc_read();
 8006a50:	f000 fe3e 	bl	80076d0 <map_adc_read>
}
 8006a54:	bf00      	nop
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	20016090 	.word	0x20016090
 8006a60:	40000c00 	.word	0x40000c00
 8006a64:	200117ac 	.word	0x200117ac
 8006a68:	200117b0 	.word	0x200117b0
 8006a6c:	200117a8 	.word	0x200117a8
 8006a70:	2001645c 	.word	0x2001645c

08006a74 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  xDmaTxIrqHandler(huart);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f002 fa09 	bl	8008e94 <xDmaTxIrqHandler>
}
 8006a82:	bf00      	nop
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  xDmaErIrqHandler(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f002 fa62 	bl	8008f5c <xDmaErIrqHandler>
}
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef * hspi)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  if(hspi == &hspi2)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a05      	ldr	r2, [pc, #20]	; (8006ac0 <HAL_SPI_ErrorCallback+0x20>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d102      	bne.n	8006ab6 <HAL_SPI_ErrorCallback+0x16>
  {
    SST25_ErrorCallback(hspi);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fecf 	bl	8007854 <SST25_ErrorCallback>
  }
}
 8006ab6:	bf00      	nop
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	20015fec 	.word	0x20015fec

08006ac4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  if(hspi == &hspi2)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a05      	ldr	r2, [pc, #20]	; (8006ae4 <HAL_SPI_TxCpltCallback+0x20>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d102      	bne.n	8006ada <HAL_SPI_TxCpltCallback+0x16>
  {
    SST25_TxCpltCallback(hspi);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fec7 	bl	8007868 <SST25_TxCpltCallback>
  }
}
 8006ada:	bf00      	nop
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20015fec 	.word	0x20015fec

08006ae8 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  if(hspi == &hspi2)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a05      	ldr	r2, [pc, #20]	; (8006b08 <HAL_SPI_RxCpltCallback+0x20>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d102      	bne.n	8006afe <HAL_SPI_RxCpltCallback+0x16>
  {
    SST25_RxCpltCallback(hspi);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fecb 	bl	8007894 <SST25_RxCpltCallback>
  }
}
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20015fec 	.word	0x20015fec

08006b0c <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  if(hspi == &hspi2)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a05      	ldr	r2, [pc, #20]	; (8006b2c <HAL_SPI_TxRxCpltCallback+0x20>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d102      	bne.n	8006b22 <HAL_SPI_TxRxCpltCallback+0x16>
  {
    SST25_TxRxCpltCallback(hspi);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fecf 	bl	80078c0 <SST25_TxRxCpltCallback>
  }
}
 8006b22:	bf00      	nop
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20015fec 	.word	0x20015fec

08006b30 <main>:


int main(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
  SCB_EnableICache();
 8006b34:	f7ff fee2 	bl	80068fc <SCB_EnableICache>

  SCB_EnableDCache();
 8006b38:	f7ff ff00 	bl	800693c <SCB_EnableDCache>

  HAL_Init();
 8006b3c:	f002 fdf8 	bl	8009730 <HAL_Init>

  SystemClock_Config();
 8006b40:	f000 f8b8 	bl	8006cb4 <SystemClock_Config>

  MX_GPIO_Init();
 8006b44:	f000 fc4c 	bl	80073e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8006b48:	f000 fbf8 	bl	800733c <MX_DMA_Init>
  //MX_IWDG_Init();
  MX_USART1_UART_Init();  //Control Communication
 8006b4c:	f000 fbbe 	bl	80072cc <MX_USART1_UART_Init>
  MX_SPI2_Init(); //SPI Flash
 8006b50:	f000 f9ea 	bl	8006f28 <MX_SPI2_Init>
  MX_ADC1_Init(); //Temperature and battery sensor
 8006b54:	f000 f946 	bl	8006de4 <MX_ADC1_Init>
  MX_TIM3_Init(); //Servo PWM
 8006b58:	f000 fa24 	bl	8006fa4 <MX_TIM3_Init>
  MX_TIM4_Init(); //ACIS common workout IT
 8006b5c:	f000 fa92 	bl	8007084 <MX_TIM4_Init>
  MX_TIM7_Init(); //Wait timer for ADC670
 8006b60:	f000 fad2 	bl	8007108 <MX_TIM7_Init>
  MX_TIM8_Init(); //ADCs trigger strobe
 8006b64:	f000 fb18 	bl	8007198 <MX_TIM8_Init>
  MX_CRC_Init();
 8006b68:	f000 f99e 	bl	8006ea8 <MX_CRC_Init>
  MX_RNG_Init();
 8006b6c:	f000 f9c8 	bl	8006f00 <MX_RNG_Init>
  DelayInit();
 8006b70:	f7ff fe5e 	bl	8006830 <DelayInit>

  SST25_Init(&hspi2);
 8006b74:	480d      	ldr	r0, [pc, #52]	; (8006bac <main+0x7c>)
 8006b76:	f000 ff8d 	bl	8007a94 <SST25_Init>

  CRC16_RegisterHardware(&hcrc);
 8006b7a:	480d      	ldr	r0, [pc, #52]	; (8006bb0 <main+0x80>)
 8006b7c:	f7ff f934 	bl	8005de8 <CRC16_RegisterHardware>

  xFifosInit();
 8006b80:	f002 fa26 	bl	8008fd0 <xFifosInit>
  xGetterInit();
 8006b84:	f002 fa74 	bl	8009070 <xGetterInit>


  map_init();
 8006b88:	f000 fd7e 	bl	8007688 <map_init>
  acis_init();
 8006b8c:	f7fa f8e6 	bl	8000d5c <acis_init>

  HAL_TIM_Base_Start(&htim8);
 8006b90:	4808      	ldr	r0, [pc, #32]	; (8006bb4 <main+0x84>)
 8006b92:	f006 f895 	bl	800ccc0 <HAL_TIM_Base_Start>

  while (1)
  {
    UpdateIWDG();
 8006b96:	f000 f80f 	bl	8006bb8 <UpdateIWDG>
    UpdateDebugger();
 8006b9a:	f000 f82f 	bl	8006bfc <UpdateDebugger>
    xGetterLoop();
 8006b9e:	f002 fa9d 	bl	80090dc <xGetterLoop>
    acis_loop();
 8006ba2:	f7fc fad3 	bl	800314c <acis_loop>
    acis_deinitIfNeed();
 8006ba6:	f7fa f903 	bl	8000db0 <acis_deinitIfNeed>
    UpdateIWDG();
 8006baa:	e7f4      	b.n	8006b96 <main+0x66>
 8006bac:	20015fec 	.word	0x20015fec
 8006bb0:	20016140 	.word	0x20016140
 8006bb4:	20016050 	.word	0x20016050

08006bb8 <UpdateIWDG>:
  }
}

static inline void UpdateIWDG(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
  static uint32_t delay_old = 0;
  uint32_t delay = Delay_Tick;
 8006bbe:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <UpdateIWDG+0x34>)
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	607b      	str	r3, [r7, #4]
  if(DelayDiff(delay, delay_old) > 1000000)
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <UpdateIWDG+0x38>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff fe7c 	bl	80068c8 <DelayDiff>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	4b08      	ldr	r3, [pc, #32]	; (8006bf4 <UpdateIWDG+0x3c>)
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d905      	bls.n	8006be4 <UpdateIWDG+0x2c>
  {
    delay_old = delay;
 8006bd8:	4a05      	ldr	r2, [pc, #20]	; (8006bf0 <UpdateIWDG+0x38>)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6013      	str	r3, [r2, #0]
    HAL_IWDG_Refresh(&hiwdg);
 8006bde:	4806      	ldr	r0, [pc, #24]	; (8006bf8 <UpdateIWDG+0x40>)
 8006be0:	f004 f91e 	bl	800ae20 <HAL_IWDG_Refresh>
  }
}
 8006be4:	bf00      	nop
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	40000c00 	.word	0x40000c00
 8006bf0:	200117b4 	.word	0x200117b4
 8006bf4:	000f4240 	.word	0x000f4240
 8006bf8:	20016130 	.word	0x20016130

08006bfc <UpdateDebugger>:

static inline void UpdateDebugger(void)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
  static uint8_t was_attached = 0;
  uint8_t attached = IS_DEBUGGER_ATTACHED();
 8006c02:	4b2a      	ldr	r3, [pc, #168]	; (8006cac <UpdateDebugger+0xb0>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	f003 0307 	and.w	r3, r3, #7
 8006c0c:	71fb      	strb	r3, [r7, #7]
  if(was_attached != attached)
 8006c0e:	4b28      	ldr	r3, [pc, #160]	; (8006cb0 <UpdateDebugger+0xb4>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	79fa      	ldrb	r2, [r7, #7]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d042      	beq.n	8006c9e <UpdateDebugger+0xa2>
  {
    was_attached = attached;
 8006c18:	4a25      	ldr	r2, [pc, #148]	; (8006cb0 <UpdateDebugger+0xb4>)
 8006c1a:	79fb      	ldrb	r3, [r7, #7]
 8006c1c:	7013      	strb	r3, [r2, #0]
    if(attached)
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01e      	beq.n	8006c62 <UpdateDebugger+0x66>
    {
      __HAL_DBGMCU_FREEZE_IWDG();
 8006c24:	4b21      	ldr	r3, [pc, #132]	; (8006cac <UpdateDebugger+0xb0>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	4a20      	ldr	r2, [pc, #128]	; (8006cac <UpdateDebugger+0xb0>)
 8006c2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c2e:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM4();
 8006c30:	4b1e      	ldr	r3, [pc, #120]	; (8006cac <UpdateDebugger+0xb0>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	4a1d      	ldr	r2, [pc, #116]	; (8006cac <UpdateDebugger+0xb0>)
 8006c36:	f043 0304 	orr.w	r3, r3, #4
 8006c3a:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM5();
 8006c3c:	4b1b      	ldr	r3, [pc, #108]	; (8006cac <UpdateDebugger+0xb0>)
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	4a1a      	ldr	r2, [pc, #104]	; (8006cac <UpdateDebugger+0xb0>)
 8006c42:	f043 0308 	orr.w	r3, r3, #8
 8006c46:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM7();
 8006c48:	4b18      	ldr	r3, [pc, #96]	; (8006cac <UpdateDebugger+0xb0>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	4a17      	ldr	r2, [pc, #92]	; (8006cac <UpdateDebugger+0xb0>)
 8006c4e:	f043 0320 	orr.w	r3, r3, #32
 8006c52:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM8();
 8006c54:	4b15      	ldr	r3, [pc, #84]	; (8006cac <UpdateDebugger+0xb0>)
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	4a14      	ldr	r2, [pc, #80]	; (8006cac <UpdateDebugger+0xb0>)
 8006c5a:	f043 0302 	orr.w	r3, r3, #2
 8006c5e:	60d3      	str	r3, [r2, #12]
      __HAL_DBGMCU_UNFREEZE_TIM5();
      __HAL_DBGMCU_UNFREEZE_TIM7();
      __HAL_DBGMCU_UNFREEZE_TIM8();
    }
  }
}
 8006c60:	e01d      	b.n	8006c9e <UpdateDebugger+0xa2>
      __HAL_DBGMCU_UNFREEZE_IWDG();
 8006c62:	4b12      	ldr	r3, [pc, #72]	; (8006cac <UpdateDebugger+0xb0>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	4a11      	ldr	r2, [pc, #68]	; (8006cac <UpdateDebugger+0xb0>)
 8006c68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c6c:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM4();
 8006c6e:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <UpdateDebugger+0xb0>)
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	4a0e      	ldr	r2, [pc, #56]	; (8006cac <UpdateDebugger+0xb0>)
 8006c74:	f023 0304 	bic.w	r3, r3, #4
 8006c78:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM5();
 8006c7a:	4b0c      	ldr	r3, [pc, #48]	; (8006cac <UpdateDebugger+0xb0>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	4a0b      	ldr	r2, [pc, #44]	; (8006cac <UpdateDebugger+0xb0>)
 8006c80:	f023 0308 	bic.w	r3, r3, #8
 8006c84:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM7();
 8006c86:	4b09      	ldr	r3, [pc, #36]	; (8006cac <UpdateDebugger+0xb0>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	4a08      	ldr	r2, [pc, #32]	; (8006cac <UpdateDebugger+0xb0>)
 8006c8c:	f023 0320 	bic.w	r3, r3, #32
 8006c90:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM8();
 8006c92:	4b06      	ldr	r3, [pc, #24]	; (8006cac <UpdateDebugger+0xb0>)
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	4a05      	ldr	r2, [pc, #20]	; (8006cac <UpdateDebugger+0xb0>)
 8006c98:	f023 0302 	bic.w	r3, r3, #2
 8006c9c:	60d3      	str	r3, [r2, #12]
}
 8006c9e:	bf00      	nop
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	e0042000 	.word	0xe0042000
 8006cb0:	200117b8 	.word	0x200117b8

08006cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b0b4      	sub	sp, #208	; 0xd0
 8006cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006cba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006cbe:	2230      	movs	r2, #48	; 0x30
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f008 f8cb 	bl	800ee5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006cc8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	605a      	str	r2, [r3, #4]
 8006cd2:	609a      	str	r2, [r3, #8]
 8006cd4:	60da      	str	r2, [r3, #12]
 8006cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006cd8:	f107 030c 	add.w	r3, r7, #12
 8006cdc:	2280      	movs	r2, #128	; 0x80
 8006cde:	2100      	movs	r1, #0
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f008 f8bc 	bl	800ee5e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ce6:	4b3c      	ldr	r3, [pc, #240]	; (8006dd8 <SystemClock_Config+0x124>)
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	4a3b      	ldr	r2, [pc, #236]	; (8006dd8 <SystemClock_Config+0x124>)
 8006cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8006cf2:	4b39      	ldr	r3, [pc, #228]	; (8006dd8 <SystemClock_Config+0x124>)
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cfa:	60bb      	str	r3, [r7, #8]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cfe:	4b37      	ldr	r3, [pc, #220]	; (8006ddc <SystemClock_Config+0x128>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a36      	ldr	r2, [pc, #216]	; (8006ddc <SystemClock_Config+0x128>)
 8006d04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	4b34      	ldr	r3, [pc, #208]	; (8006ddc <SystemClock_Config+0x128>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d12:	607b      	str	r3, [r7, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8006d16:	230a      	movs	r3, #10
 8006d18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = 7;
 8006d22:	2307      	movs	r3, #7
 8006d24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d2e:	2302      	movs	r3, #2
 8006d30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006d34:	2300      	movs	r3, #0
 8006d36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006d3a:	2308      	movs	r3, #8
 8006d3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8006d40:	23d8      	movs	r3, #216	; 0xd8
 8006d42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006d46:	2302      	movs	r3, #2
 8006d48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8006d4c:	2309      	movs	r3, #9
 8006d4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d52:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f004 f8c2 	bl	800aee0 <HAL_RCC_OscConfig>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8006d62:	f000 fc8d 	bl	8007680 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006d66:	f004 f86b 	bl	800ae40 <HAL_PWREx_EnableOverDrive>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8006d70:	f000 fc86 	bl	8007680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006d74:	230f      	movs	r3, #15
 8006d76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d80:	2300      	movs	r3, #0
 8006d82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006d86:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006d8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8006d96:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006d9a:	2107      	movs	r1, #7
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f004 fb43 	bl	800b428 <HAL_RCC_ClockConfig>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8006da8:	f000 fc6a 	bl	8007680 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_CLK48;
 8006dac:	4b0c      	ldr	r3, [pc, #48]	; (8006de0 <SystemClock_Config+0x12c>)
 8006dae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006db0:	2300      	movs	r3, #0
 8006db2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006dba:	f107 030c 	add.w	r3, r7, #12
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f004 fd04 	bl	800b7cc <HAL_RCCEx_PeriphCLKConfig>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8006dca:	f000 fc59 	bl	8007680 <Error_Handler>
  }
}
 8006dce:	bf00      	nop
 8006dd0:	37d0      	adds	r7, #208	; 0xd0
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	40023800 	.word	0x40023800
 8006ddc:	40007000 	.word	0x40007000
 8006de0:	00200040 	.word	0x00200040

08006de4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006dea:	463b      	mov	r3, r7
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	605a      	str	r2, [r3, #4]
 8006df2:	609a      	str	r2, [r3, #8]
 8006df4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006df6:	4b2a      	ldr	r3, [pc, #168]	; (8006ea0 <MX_ADC1_Init+0xbc>)
 8006df8:	4a2a      	ldr	r2, [pc, #168]	; (8006ea4 <MX_ADC1_Init+0xc0>)
 8006dfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006dfc:	4b28      	ldr	r3, [pc, #160]	; (8006ea0 <MX_ADC1_Init+0xbc>)
 8006dfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006e04:	4b26      	ldr	r3, [pc, #152]	; (8006ea0 <MX_ADC1_Init+0xbc>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8006e0a:	4b25      	ldr	r3, [pc, #148]	; (8006ea0 <MX_ADC1_Init+0xbc>)
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006e10:	4b23      	ldr	r3, [pc, #140]	; (8006ea0 <MX_ADC1_Init+0xbc>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006e16:	4b22      	ldr	r3, [pc, #136]	; (8006ea0 <MX_ADC1_Init+0xbc>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8006e1e:	4b20      	ldr	r3, [pc, #128]	; (8006ea0 <MX_ADC1_Init+0xbc>)
 8006e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8006e26:	4b1e      	ldr	r3, [pc, #120]	; (8006ea0 <MX_ADC1_Init+0xbc>)
 8006e28:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8006e2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8006e2e:	4b1c      	ldr	r3, [pc, #112]	; (8006ea0 <MX_ADC1_Init+0xbc>)
 8006e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e34:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8006e36:	4b1a      	ldr	r3, [pc, #104]	; (8006ea0 <MX_ADC1_Init+0xbc>)
 8006e38:	2202      	movs	r2, #2
 8006e3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006e3c:	4b18      	ldr	r3, [pc, #96]	; (8006ea0 <MX_ADC1_Init+0xbc>)
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006e44:	4b16      	ldr	r3, [pc, #88]	; (8006ea0 <MX_ADC1_Init+0xbc>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006e4a:	4815      	ldr	r0, [pc, #84]	; (8006ea0 <MX_ADC1_Init+0xbc>)
 8006e4c:	f002 fcd6 	bl	80097fc <HAL_ADC_Init>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8006e56:	f000 fc13 	bl	8007680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006e5a:	230c      	movs	r3, #12
 8006e5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006e66:	463b      	mov	r3, r7
 8006e68:	4619      	mov	r1, r3
 8006e6a:	480d      	ldr	r0, [pc, #52]	; (8006ea0 <MX_ADC1_Init+0xbc>)
 8006e6c:	f002 fd0a 	bl	8009884 <HAL_ADC_ConfigChannel>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8006e76:	f000 fc03 	bl	8007680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8006e7a:	230d      	movs	r3, #13
 8006e7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8006e7e:	2302      	movs	r3, #2
 8006e80:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006e82:	463b      	mov	r3, r7
 8006e84:	4619      	mov	r1, r3
 8006e86:	4806      	ldr	r0, [pc, #24]	; (8006ea0 <MX_ADC1_Init+0xbc>)
 8006e88:	f002 fcfc 	bl	8009884 <HAL_ADC_ConfigChannel>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8006e92:	f000 fbf5 	bl	8007680 <Error_Handler>
  */
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006e96:	bf00      	nop
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20016264 	.word	0x20016264
 8006ea4:	40012000 	.word	0x40012000

08006ea8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8006eac:	4b12      	ldr	r3, [pc, #72]	; (8006ef8 <MX_CRC_Init+0x50>)
 8006eae:	4a13      	ldr	r2, [pc, #76]	; (8006efc <MX_CRC_Init+0x54>)
 8006eb0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8006eb2:	4b11      	ldr	r3, [pc, #68]	; (8006ef8 <MX_CRC_Init+0x50>)
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8006eb8:	4b0f      	ldr	r3, [pc, #60]	; (8006ef8 <MX_CRC_Init+0x50>)
 8006eba:	2201      	movs	r2, #1
 8006ebc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = CRC_POLY;
 8006ebe:	4b0e      	ldr	r3, [pc, #56]	; (8006ef8 <MX_CRC_Init+0x50>)
 8006ec0:	f24a 0201 	movw	r2, #40961	; 0xa001
 8006ec4:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8006ec6:	4b0c      	ldr	r3, [pc, #48]	; (8006ef8 <MX_CRC_Init+0x50>)
 8006ec8:	2208      	movs	r2, #8
 8006eca:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8006ecc:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <MX_CRC_Init+0x50>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8006ed2:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <MX_CRC_Init+0x50>)
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8006ed8:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <MX_CRC_Init+0x50>)
 8006eda:	2280      	movs	r2, #128	; 0x80
 8006edc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8006ede:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <MX_CRC_Init+0x50>)
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006ee4:	4804      	ldr	r0, [pc, #16]	; (8006ef8 <MX_CRC_Init+0x50>)
 8006ee6:	f003 f823 	bl	8009f30 <HAL_CRC_Init>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8006ef0:	f000 fbc6 	bl	8007680 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8006ef4:	bf00      	nop
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20016140 	.word	0x20016140
 8006efc:	40023000 	.word	0x40023000

08006f00 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8006f04:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <MX_RNG_Init+0x20>)
 8006f06:	4a07      	ldr	r2, [pc, #28]	; (8006f24 <MX_RNG_Init+0x24>)
 8006f08:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8006f0a:	4805      	ldr	r0, [pc, #20]	; (8006f20 <MX_RNG_Init+0x20>)
 8006f0c:	f004 ffa6 	bl	800be5c <HAL_RNG_Init>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8006f16:	f000 fbb3 	bl	8007680 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8006f1a:	bf00      	nop
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	200163ec 	.word	0x200163ec
 8006f24:	50060800 	.word	0x50060800

08006f28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006f2c:	4b1b      	ldr	r3, [pc, #108]	; (8006f9c <MX_SPI2_Init+0x74>)
 8006f2e:	4a1c      	ldr	r2, [pc, #112]	; (8006fa0 <MX_SPI2_Init+0x78>)
 8006f30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006f32:	4b1a      	ldr	r3, [pc, #104]	; (8006f9c <MX_SPI2_Init+0x74>)
 8006f34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006f38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006f3a:	4b18      	ldr	r3, [pc, #96]	; (8006f9c <MX_SPI2_Init+0x74>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f40:	4b16      	ldr	r3, [pc, #88]	; (8006f9c <MX_SPI2_Init+0x74>)
 8006f42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006f46:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f48:	4b14      	ldr	r3, [pc, #80]	; (8006f9c <MX_SPI2_Init+0x74>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006f4e:	4b13      	ldr	r3, [pc, #76]	; (8006f9c <MX_SPI2_Init+0x74>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006f54:	4b11      	ldr	r3, [pc, #68]	; (8006f9c <MX_SPI2_Init+0x74>)
 8006f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f5a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f5c:	4b0f      	ldr	r3, [pc, #60]	; (8006f9c <MX_SPI2_Init+0x74>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f62:	4b0e      	ldr	r3, [pc, #56]	; (8006f9c <MX_SPI2_Init+0x74>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f68:	4b0c      	ldr	r3, [pc, #48]	; (8006f9c <MX_SPI2_Init+0x74>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f6e:	4b0b      	ldr	r3, [pc, #44]	; (8006f9c <MX_SPI2_Init+0x74>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8006f74:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <MX_SPI2_Init+0x74>)
 8006f76:	2207      	movs	r2, #7
 8006f78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006f7a:	4b08      	ldr	r3, [pc, #32]	; (8006f9c <MX_SPI2_Init+0x74>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006f80:	4b06      	ldr	r3, [pc, #24]	; (8006f9c <MX_SPI2_Init+0x74>)
 8006f82:	2208      	movs	r2, #8
 8006f84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006f86:	4805      	ldr	r0, [pc, #20]	; (8006f9c <MX_SPI2_Init+0x74>)
 8006f88:	f004 ff92 	bl	800beb0 <HAL_SPI_Init>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8006f92:	f000 fb75 	bl	8007680 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006f96:	bf00      	nop
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20015fec 	.word	0x20015fec
 8006fa0:	40003800 	.word	0x40003800

08006fa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	; 0x28
 8006fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006faa:	f107 031c 	add.w	r3, r7, #28
 8006fae:	2200      	movs	r2, #0
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	605a      	str	r2, [r3, #4]
 8006fb4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	605a      	str	r2, [r3, #4]
 8006fbe:	609a      	str	r2, [r3, #8]
 8006fc0:	60da      	str	r2, [r3, #12]
 8006fc2:	611a      	str	r2, [r3, #16]
 8006fc4:	615a      	str	r2, [r3, #20]
 8006fc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006fc8:	4b2b      	ldr	r3, [pc, #172]	; (8007078 <MX_TIM3_Init+0xd4>)
 8006fca:	4a2c      	ldr	r2, [pc, #176]	; (800707c <MX_TIM3_Init+0xd8>)
 8006fcc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 50 / 5120) - 1; //This is to set prescaler to 1 MHz
 8006fce:	f004 fbd5 	bl	800b77c <HAL_RCC_GetPCLK1Freq>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	4a2a      	ldr	r2, [pc, #168]	; (8007080 <MX_TIM3_Init+0xdc>)
 8006fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fdc:	0b9b      	lsrs	r3, r3, #14
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	4a25      	ldr	r2, [pc, #148]	; (8007078 <MX_TIM3_Init+0xd4>)
 8006fe2:	6053      	str	r3, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fe4:	4b24      	ldr	r3, [pc, #144]	; (8007078 <MX_TIM3_Init+0xd4>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5119;
 8006fea:	4b23      	ldr	r3, [pc, #140]	; (8007078 <MX_TIM3_Init+0xd4>)
 8006fec:	f241 32ff 	movw	r2, #5119	; 0x13ff
 8006ff0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ff2:	4b21      	ldr	r3, [pc, #132]	; (8007078 <MX_TIM3_Init+0xd4>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ff8:	4b1f      	ldr	r3, [pc, #124]	; (8007078 <MX_TIM3_Init+0xd4>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006ffe:	481e      	ldr	r0, [pc, #120]	; (8007078 <MX_TIM3_Init+0xd4>)
 8007000:	f005 feb2 	bl	800cd68 <HAL_TIM_PWM_Init>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800700a:	f000 fb39 	bl	8007680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800700e:	2300      	movs	r3, #0
 8007010:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007012:	2300      	movs	r3, #0
 8007014:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007016:	f107 031c 	add.w	r3, r7, #28
 800701a:	4619      	mov	r1, r3
 800701c:	4816      	ldr	r0, [pc, #88]	; (8007078 <MX_TIM3_Init+0xd4>)
 800701e:	f006 fdf5 	bl	800dc0c <HAL_TIMEx_MasterConfigSynchronization>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8007028:	f000 fb2a 	bl	8007680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800702c:	2360      	movs	r3, #96	; 0x60
 800702e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 256;
 8007030:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007034:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007036:	2300      	movs	r3, #0
 8007038:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800703a:	2300      	movs	r3, #0
 800703c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800703e:	463b      	mov	r3, r7
 8007040:	2208      	movs	r2, #8
 8007042:	4619      	mov	r1, r3
 8007044:	480c      	ldr	r0, [pc, #48]	; (8007078 <MX_TIM3_Init+0xd4>)
 8007046:	f006 f81f 	bl	800d088 <HAL_TIM_PWM_ConfigChannel>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8007050:	f000 fb16 	bl	8007680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007054:	463b      	mov	r3, r7
 8007056:	220c      	movs	r2, #12
 8007058:	4619      	mov	r1, r3
 800705a:	4807      	ldr	r0, [pc, #28]	; (8007078 <MX_TIM3_Init+0xd4>)
 800705c:	f006 f814 	bl	800d088 <HAL_TIM_PWM_ConfigChannel>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8007066:	f000 fb0b 	bl	8007680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800706a:	4803      	ldr	r0, [pc, #12]	; (8007078 <MX_TIM3_Init+0xd4>)
 800706c:	f000 ff62 	bl	8007f34 <HAL_TIM_MspPostInit>

}
 8007070:	bf00      	nop
 8007072:	3728      	adds	r7, #40	; 0x28
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	200161c4 	.word	0x200161c4
 800707c:	40000400 	.word	0x40000400
 8007080:	10624dd3 	.word	0x10624dd3

08007084 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800708a:	463b      	mov	r3, r7
 800708c:	2200      	movs	r2, #0
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	605a      	str	r2, [r3, #4]
 8007092:	609a      	str	r2, [r3, #8]
 8007094:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007096:	4b19      	ldr	r3, [pc, #100]	; (80070fc <MX_TIM4_Init+0x78>)
 8007098:	4a19      	ldr	r2, [pc, #100]	; (8007100 <MX_TIM4_Init+0x7c>)
 800709a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) - 1; //This is to set prescaler to 1 MHz
 800709c:	f004 fb6e 	bl	800b77c <HAL_RCC_GetPCLK1Freq>
 80070a0:	4603      	mov	r3, r0
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	4a17      	ldr	r2, [pc, #92]	; (8007104 <MX_TIM4_Init+0x80>)
 80070a6:	fba2 2303 	umull	r2, r3, r2, r3
 80070aa:	0c9b      	lsrs	r3, r3, #18
 80070ac:	3b01      	subs	r3, #1
 80070ae:	4a13      	ldr	r2, [pc, #76]	; (80070fc <MX_TIM4_Init+0x78>)
 80070b0:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070b2:	4b12      	ldr	r3, [pc, #72]	; (80070fc <MX_TIM4_Init+0x78>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 14;
 80070b8:	4b10      	ldr	r3, [pc, #64]	; (80070fc <MX_TIM4_Init+0x78>)
 80070ba:	220e      	movs	r2, #14
 80070bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80070be:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <MX_TIM4_Init+0x78>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80070c4:	4b0d      	ldr	r3, [pc, #52]	; (80070fc <MX_TIM4_Init+0x78>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80070ca:	480c      	ldr	r0, [pc, #48]	; (80070fc <MX_TIM4_Init+0x78>)
 80070cc:	f005 fdcc 	bl	800cc68 <HAL_TIM_Base_Init>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80070d6:	f000 fad3 	bl	8007680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80070da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070de:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80070e0:	463b      	mov	r3, r7
 80070e2:	4619      	mov	r1, r3
 80070e4:	4805      	ldr	r0, [pc, #20]	; (80070fc <MX_TIM4_Init+0x78>)
 80070e6:	f006 f8e7 	bl	800d2b8 <HAL_TIM_ConfigClockSource>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80070f0:	f000 fac6 	bl	8007680 <Error_Handler>
  }

}
 80070f4:	bf00      	nop
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	20016090 	.word	0x20016090
 8007100:	40000800 	.word	0x40000800
 8007104:	431bde83 	.word	0x431bde83

08007108 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800710e:	1d3b      	adds	r3, r7, #4
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	605a      	str	r2, [r3, #4]
 8007116:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8007118:	4b1c      	ldr	r3, [pc, #112]	; (800718c <MX_TIM7_Init+0x84>)
 800711a:	4a1d      	ldr	r2, [pc, #116]	; (8007190 <MX_TIM7_Init+0x88>)
 800711c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800711e:	4b1b      	ldr	r3, [pc, #108]	; (800718c <MX_TIM7_Init+0x84>)
 8007120:	2200      	movs	r2, #0
 8007122:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007124:	4b19      	ldr	r3, [pc, #100]	; (800718c <MX_TIM7_Init+0x84>)
 8007126:	2200      	movs	r2, #0
 8007128:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) / 2 - 1; //This is to set period to 2 MHz;
 800712a:	f004 fb27 	bl	800b77c <HAL_RCC_GetPCLK1Freq>
 800712e:	4603      	mov	r3, r0
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	4a18      	ldr	r2, [pc, #96]	; (8007194 <MX_TIM7_Init+0x8c>)
 8007134:	fba2 2303 	umull	r2, r3, r2, r3
 8007138:	0cdb      	lsrs	r3, r3, #19
 800713a:	3b01      	subs	r3, #1
 800713c:	4a13      	ldr	r2, [pc, #76]	; (800718c <MX_TIM7_Init+0x84>)
 800713e:	60d3      	str	r3, [r2, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007140:	4b12      	ldr	r3, [pc, #72]	; (800718c <MX_TIM7_Init+0x84>)
 8007142:	2200      	movs	r2, #0
 8007144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007146:	4811      	ldr	r0, [pc, #68]	; (800718c <MX_TIM7_Init+0x84>)
 8007148:	f005 fd8e 	bl	800cc68 <HAL_TIM_Base_Init>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <MX_TIM7_Init+0x4e>
  {
    Error_Handler();
 8007152:	f000 fa95 	bl	8007680 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 8007156:	2108      	movs	r1, #8
 8007158:	480c      	ldr	r0, [pc, #48]	; (800718c <MX_TIM7_Init+0x84>)
 800715a:	f005 fe30 	bl	800cdbe <HAL_TIM_OnePulse_Init>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <MX_TIM7_Init+0x60>
  {
    Error_Handler();
 8007164:	f000 fa8c 	bl	8007680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007168:	2320      	movs	r3, #32
 800716a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800716c:	2300      	movs	r3, #0
 800716e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8007170:	1d3b      	adds	r3, r7, #4
 8007172:	4619      	mov	r1, r3
 8007174:	4805      	ldr	r0, [pc, #20]	; (800718c <MX_TIM7_Init+0x84>)
 8007176:	f006 fd49 	bl	800dc0c <HAL_TIMEx_MasterConfigSynchronization>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <MX_TIM7_Init+0x7c>
  {
    Error_Handler();
 8007180:	f000 fa7e 	bl	8007680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	2001645c 	.word	0x2001645c
 8007190:	40001400 	.word	0x40001400
 8007194:	431bde83 	.word	0x431bde83

08007198 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b096      	sub	sp, #88	; 0x58
 800719c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800719e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	605a      	str	r2, [r3, #4]
 80071a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80071aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071ae:	2200      	movs	r2, #0
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	605a      	str	r2, [r3, #4]
 80071b4:	609a      	str	r2, [r3, #8]
 80071b6:	60da      	str	r2, [r3, #12]
 80071b8:	611a      	str	r2, [r3, #16]
 80071ba:	615a      	str	r2, [r3, #20]
 80071bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80071be:	1d3b      	adds	r3, r7, #4
 80071c0:	222c      	movs	r2, #44	; 0x2c
 80071c2:	2100      	movs	r1, #0
 80071c4:	4618      	mov	r0, r3
 80071c6:	f007 fe4a 	bl	800ee5e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80071ca:	4b3d      	ldr	r3, [pc, #244]	; (80072c0 <MX_TIM8_Init+0x128>)
 80071cc:	4a3d      	ldr	r2, [pc, #244]	; (80072c4 <MX_TIM8_Init+0x12c>)
 80071ce:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = (HAL_RCC_GetPCLK2Freq() * 2 / 1000000) - 1; //This is to set prescaler to 1 MHz
 80071d0:	f004 fae8 	bl	800b7a4 <HAL_RCC_GetPCLK2Freq>
 80071d4:	4603      	mov	r3, r0
 80071d6:	005b      	lsls	r3, r3, #1
 80071d8:	4a3b      	ldr	r2, [pc, #236]	; (80072c8 <MX_TIM8_Init+0x130>)
 80071da:	fba2 2303 	umull	r2, r3, r2, r3
 80071de:	0c9b      	lsrs	r3, r3, #18
 80071e0:	3b01      	subs	r3, #1
 80071e2:	4a37      	ldr	r2, [pc, #220]	; (80072c0 <MX_TIM8_Init+0x128>)
 80071e4:	6053      	str	r3, [r2, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071e6:	4b36      	ldr	r3, [pc, #216]	; (80072c0 <MX_TIM8_Init+0x128>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 80071ec:	4b34      	ldr	r3, [pc, #208]	; (80072c0 <MX_TIM8_Init+0x128>)
 80071ee:	2231      	movs	r2, #49	; 0x31
 80071f0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80071f2:	4b33      	ldr	r3, [pc, #204]	; (80072c0 <MX_TIM8_Init+0x128>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80071f8:	4b31      	ldr	r3, [pc, #196]	; (80072c0 <MX_TIM8_Init+0x128>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80071fe:	4b30      	ldr	r3, [pc, #192]	; (80072c0 <MX_TIM8_Init+0x128>)
 8007200:	2200      	movs	r2, #0
 8007202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8007204:	482e      	ldr	r0, [pc, #184]	; (80072c0 <MX_TIM8_Init+0x128>)
 8007206:	f005 fdaf 	bl	800cd68 <HAL_TIM_PWM_Init>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8007210:	f000 fa36 	bl	8007680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007214:	2320      	movs	r3, #32
 8007216:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007218:	2300      	movs	r3, #0
 800721a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800721c:	2300      	movs	r3, #0
 800721e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007220:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007224:	4619      	mov	r1, r3
 8007226:	4826      	ldr	r0, [pc, #152]	; (80072c0 <MX_TIM8_Init+0x128>)
 8007228:	f006 fcf0 	bl	800dc0c <HAL_TIMEx_MasterConfigSynchronization>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8007232:	f000 fa25 	bl	8007680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007236:	2360      	movs	r3, #96	; 0x60
 8007238:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1;
 800723a:	2301      	movs	r3, #1
 800723c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800723e:	2300      	movs	r3, #0
 8007240:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8007242:	2308      	movs	r3, #8
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007246:	2300      	movs	r3, #0
 8007248:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800724a:	2300      	movs	r3, #0
 800724c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800724e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007252:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007254:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007258:	2208      	movs	r2, #8
 800725a:	4619      	mov	r1, r3
 800725c:	4818      	ldr	r0, [pc, #96]	; (80072c0 <MX_TIM8_Init+0x128>)
 800725e:	f005 ff13 	bl	800d088 <HAL_TIM_PWM_ConfigChannel>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 8007268:	f000 fa0a 	bl	8007680 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800726c:	2300      	movs	r3, #0
 800726e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007270:	2300      	movs	r3, #0
 8007272:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007274:	2300      	movs	r3, #0
 8007276:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007278:	2300      	movs	r3, #0
 800727a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800727c:	2300      	movs	r3, #0
 800727e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007284:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800728a:	2300      	movs	r3, #0
 800728c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800728e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007292:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007298:	2300      	movs	r3, #0
 800729a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800729c:	1d3b      	adds	r3, r7, #4
 800729e:	4619      	mov	r1, r3
 80072a0:	4807      	ldr	r0, [pc, #28]	; (80072c0 <MX_TIM8_Init+0x128>)
 80072a2:	f006 fd41 	bl	800dd28 <HAL_TIMEx_ConfigBreakDeadTime>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80072ac:	f000 f9e8 	bl	8007680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80072b0:	4803      	ldr	r0, [pc, #12]	; (80072c0 <MX_TIM8_Init+0x128>)
 80072b2:	f000 fe3f 	bl	8007f34 <HAL_TIM_MspPostInit>

}
 80072b6:	bf00      	nop
 80072b8:	3758      	adds	r7, #88	; 0x58
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	20016050 	.word	0x20016050
 80072c4:	40010400 	.word	0x40010400
 80072c8:	431bde83 	.word	0x431bde83

080072cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80072d0:	4b17      	ldr	r3, [pc, #92]	; (8007330 <MX_USART1_UART_Init+0x64>)
 80072d2:	4a18      	ldr	r2, [pc, #96]	; (8007334 <MX_USART1_UART_Init+0x68>)
 80072d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3375000;
 80072d6:	4b16      	ldr	r3, [pc, #88]	; (8007330 <MX_USART1_UART_Init+0x64>)
 80072d8:	4a17      	ldr	r2, [pc, #92]	; (8007338 <MX_USART1_UART_Init+0x6c>)
 80072da:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80072dc:	4b14      	ldr	r3, [pc, #80]	; (8007330 <MX_USART1_UART_Init+0x64>)
 80072de:	2200      	movs	r2, #0
 80072e0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80072e2:	4b13      	ldr	r3, [pc, #76]	; (8007330 <MX_USART1_UART_Init+0x64>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80072e8:	4b11      	ldr	r3, [pc, #68]	; (8007330 <MX_USART1_UART_Init+0x64>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80072ee:	4b10      	ldr	r3, [pc, #64]	; (8007330 <MX_USART1_UART_Init+0x64>)
 80072f0:	220c      	movs	r2, #12
 80072f2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80072f4:	4b0e      	ldr	r3, [pc, #56]	; (8007330 <MX_USART1_UART_Init+0x64>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80072fa:	4b0d      	ldr	r3, [pc, #52]	; (8007330 <MX_USART1_UART_Init+0x64>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007300:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <MX_USART1_UART_Init+0x64>)
 8007302:	2200      	movs	r2, #0
 8007304:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8007306:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <MX_USART1_UART_Init+0x64>)
 8007308:	2240      	movs	r2, #64	; 0x40
 800730a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 800730c:	4b08      	ldr	r3, [pc, #32]	; (8007330 <MX_USART1_UART_Init+0x64>)
 800730e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007312:	641a      	str	r2, [r3, #64]	; 0x40
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME;
 8007314:	4b06      	ldr	r3, [pc, #24]	; (8007330 <MX_USART1_UART_Init+0x64>)
 8007316:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 800731a:	645a      	str	r2, [r3, #68]	; 0x44
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800731c:	4804      	ldr	r0, [pc, #16]	; (8007330 <MX_USART1_UART_Init+0x64>)
 800731e:	f006 fdc4 	bl	800deaa <HAL_UART_Init>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8007328:	f000 f9aa 	bl	8007680 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800732c:	bf00      	nop
 800732e:	bd80      	pop	{r7, pc}
 8007330:	2001630c 	.word	0x2001630c
 8007334:	40011000 	.word	0x40011000
 8007338:	00337f98 	.word	0x00337f98

0800733c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007342:	4b26      	ldr	r3, [pc, #152]	; (80073dc <MX_DMA_Init+0xa0>)
 8007344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007346:	4a25      	ldr	r2, [pc, #148]	; (80073dc <MX_DMA_Init+0xa0>)
 8007348:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800734c:	6313      	str	r3, [r2, #48]	; 0x30
 800734e:	4b23      	ldr	r3, [pc, #140]	; (80073dc <MX_DMA_Init+0xa0>)
 8007350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007356:	607b      	str	r3, [r7, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800735a:	4b20      	ldr	r3, [pc, #128]	; (80073dc <MX_DMA_Init+0xa0>)
 800735c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735e:	4a1f      	ldr	r2, [pc, #124]	; (80073dc <MX_DMA_Init+0xa0>)
 8007360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007364:	6313      	str	r3, [r2, #48]	; 0x30
 8007366:	4b1d      	ldr	r3, [pc, #116]	; (80073dc <MX_DMA_Init+0xa0>)
 8007368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0); //TIM7_UP
 8007372:	2200      	movs	r2, #0
 8007374:	2105      	movs	r1, #5
 8007376:	200d      	movs	r0, #13
 8007378:	f002 fda3 	bl	8009ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800737c:	200d      	movs	r0, #13
 800737e:	f002 fdbc 	bl	8009efa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 15, 0); //SPI2_RX
 8007382:	2200      	movs	r2, #0
 8007384:	210f      	movs	r1, #15
 8007386:	200e      	movs	r0, #14
 8007388:	f002 fd9b 	bl	8009ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800738c:	200e      	movs	r0, #14
 800738e:	f002 fdb4 	bl	8009efa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 15, 0); //SPI2_TX
 8007392:	2200      	movs	r2, #0
 8007394:	210f      	movs	r1, #15
 8007396:	200f      	movs	r0, #15
 8007398:	f002 fd93 	bl	8009ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800739c:	200f      	movs	r0, #15
 800739e:	f002 fdac 	bl	8009efa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 7, 0); //ADC1
 80073a2:	2200      	movs	r2, #0
 80073a4:	2107      	movs	r1, #7
 80073a6:	2038      	movs	r0, #56	; 0x38
 80073a8:	f002 fd8b 	bl	8009ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80073ac:	2038      	movs	r0, #56	; 0x38
 80073ae:	f002 fda4 	bl	8009efa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 8, 0); //USART1_RX
 80073b2:	2200      	movs	r2, #0
 80073b4:	2108      	movs	r1, #8
 80073b6:	203a      	movs	r0, #58	; 0x3a
 80073b8:	f002 fd83 	bl	8009ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80073bc:	203a      	movs	r0, #58	; 0x3a
 80073be:	f002 fd9c 	bl	8009efa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 8, 0); //USART1_TX
 80073c2:	2200      	movs	r2, #0
 80073c4:	2108      	movs	r1, #8
 80073c6:	2046      	movs	r0, #70	; 0x46
 80073c8:	f002 fd7b 	bl	8009ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80073cc:	2046      	movs	r0, #70	; 0x46
 80073ce:	f002 fd94 	bl	8009efa <HAL_NVIC_EnableIRQ>

}
 80073d2:	bf00      	nop
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	40023800 	.word	0x40023800

080073e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08a      	sub	sp, #40	; 0x28
 80073e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073e6:	f107 0314 	add.w	r3, r7, #20
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	605a      	str	r2, [r3, #4]
 80073f0:	609a      	str	r2, [r3, #8]
 80073f2:	60da      	str	r2, [r3, #12]
 80073f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80073f6:	4b9a      	ldr	r3, [pc, #616]	; (8007660 <MX_GPIO_Init+0x280>)
 80073f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fa:	4a99      	ldr	r2, [pc, #612]	; (8007660 <MX_GPIO_Init+0x280>)
 80073fc:	f043 0304 	orr.w	r3, r3, #4
 8007400:	6313      	str	r3, [r2, #48]	; 0x30
 8007402:	4b97      	ldr	r3, [pc, #604]	; (8007660 <MX_GPIO_Init+0x280>)
 8007404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007406:	f003 0304 	and.w	r3, r3, #4
 800740a:	613b      	str	r3, [r7, #16]
 800740c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800740e:	4b94      	ldr	r3, [pc, #592]	; (8007660 <MX_GPIO_Init+0x280>)
 8007410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007412:	4a93      	ldr	r2, [pc, #588]	; (8007660 <MX_GPIO_Init+0x280>)
 8007414:	f043 0301 	orr.w	r3, r3, #1
 8007418:	6313      	str	r3, [r2, #48]	; 0x30
 800741a:	4b91      	ldr	r3, [pc, #580]	; (8007660 <MX_GPIO_Init+0x280>)
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007426:	4b8e      	ldr	r3, [pc, #568]	; (8007660 <MX_GPIO_Init+0x280>)
 8007428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742a:	4a8d      	ldr	r2, [pc, #564]	; (8007660 <MX_GPIO_Init+0x280>)
 800742c:	f043 0302 	orr.w	r3, r3, #2
 8007430:	6313      	str	r3, [r2, #48]	; 0x30
 8007432:	4b8b      	ldr	r3, [pc, #556]	; (8007660 <MX_GPIO_Init+0x280>)
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	f003 0302 	and.w	r3, r3, #2
 800743a:	60bb      	str	r3, [r7, #8]
 800743c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800743e:	4b88      	ldr	r3, [pc, #544]	; (8007660 <MX_GPIO_Init+0x280>)
 8007440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007442:	4a87      	ldr	r2, [pc, #540]	; (8007660 <MX_GPIO_Init+0x280>)
 8007444:	f043 0308 	orr.w	r3, r3, #8
 8007448:	6313      	str	r3, [r2, #48]	; 0x30
 800744a:	4b85      	ldr	r3, [pc, #532]	; (8007660 <MX_GPIO_Init+0x280>)
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	f003 0308 	and.w	r3, r3, #8
 8007452:	607b      	str	r3, [r7, #4]
 8007454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VDD3V3EN_Pin|SPI2_WP_Pin|RELAY_IGN_Pin, GPIO_PIN_RESET);
 8007456:	2200      	movs	r2, #0
 8007458:	f240 4141 	movw	r1, #1089	; 0x441
 800745c:	4881      	ldr	r0, [pc, #516]	; (8007664 <MX_GPIO_Init+0x284>)
 800745e:	f003 fcad 	bl	800adbc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, IGN_14_Pin|IGN_23_Pin, GPIO_PIN_SET);
 8007462:	2201      	movs	r2, #1
 8007464:	21c0      	movs	r1, #192	; 0xc0
 8007466:	4880      	ldr	r0, [pc, #512]	; (8007668 <MX_GPIO_Init+0x288>)
 8007468:	f003 fca8 	bl	800adbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_nCE_Pin|LED_CHECK_Pin, GPIO_PIN_SET);
 800746c:	2201      	movs	r2, #1
 800746e:	2190      	movs	r1, #144	; 0x90
 8007470:	487c      	ldr	r0, [pc, #496]	; (8007664 <MX_GPIO_Init+0x284>)
 8007472:	f003 fca3 	bl	800adbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8007476:	2201      	movs	r2, #1
 8007478:	2101      	movs	r1, #1
 800747a:	487b      	ldr	r0, [pc, #492]	; (8007668 <MX_GPIO_Init+0x288>)
 800747c:	f003 fc9e 	bl	800adbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_FORMAT_Pin|ADC_BPO_Pin|PROPANE_OUT_Pin
 8007480:	2200      	movs	r2, #0
 8007482:	f240 7104 	movw	r1, #1796	; 0x704
 8007486:	4878      	ldr	r0, [pc, #480]	; (8007668 <MX_GPIO_Init+0x288>)
 8007488:	f003 fc98 	bl	800adbc <HAL_GPIO_WritePin>
                          |PETROL_OUT_Pin, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin, GPIO_PIN_SET);
 800748c:	2201      	movs	r2, #1
 800748e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007492:	4875      	ldr	r0, [pc, #468]	; (8007668 <MX_GPIO_Init+0x288>)
 8007494:	f003 fc92 	bl	800adbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_START_GPIO_Port, RELAY_START_Pin, GPIO_PIN_RESET);
 8007498:	2200      	movs	r2, #0
 800749a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800749e:	4873      	ldr	r0, [pc, #460]	; (800766c <MX_GPIO_Init+0x28c>)
 80074a0:	f003 fc8c 	bl	800adbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_RESET);
 80074a4:	2200      	movs	r2, #0
 80074a6:	2104      	movs	r1, #4
 80074a8:	4871      	ldr	r0, [pc, #452]	; (8007670 <MX_GPIO_Init+0x290>)
 80074aa:	f003 fc87 	bl	800adbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SENS_CSPS_Pin */
  GPIO_InitStruct.Pin = SENS_CSPS_Pin;
 80074ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80074b4:	4b6f      	ldr	r3, [pc, #444]	; (8007674 <MX_GPIO_Init+0x294>)
 80074b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80074b8:	2302      	movs	r3, #2
 80074ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENS_CSPS_GPIO_Port, &GPIO_InitStruct);
 80074bc:	f107 0314 	add.w	r3, r7, #20
 80074c0:	4619      	mov	r1, r3
 80074c2:	4868      	ldr	r0, [pc, #416]	; (8007664 <MX_GPIO_Init+0x284>)
 80074c4:	f003 fac8 	bl	800aa58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_HALL_Pin */
  GPIO_InitStruct.Pin = SENS_HALL_Pin;
 80074c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80074cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80074ce:	4b6a      	ldr	r3, [pc, #424]	; (8007678 <MX_GPIO_Init+0x298>)
 80074d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074d2:	2300      	movs	r3, #0
 80074d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074d6:	f107 0314 	add.w	r3, r7, #20
 80074da:	4619      	mov	r1, r3
 80074dc:	4861      	ldr	r0, [pc, #388]	; (8007664 <MX_GPIO_Init+0x284>)
 80074de:	f003 fabb 	bl	800aa58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_ACC_Pin */
  GPIO_InitStruct.Pin = SENS_ACC_Pin;
 80074e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074e8:	2300      	movs	r3, #0
 80074ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074ec:	2301      	movs	r3, #1
 80074ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074f0:	f107 0314 	add.w	r3, r7, #20
 80074f4:	4619      	mov	r1, r3
 80074f6:	485b      	ldr	r0, [pc, #364]	; (8007664 <MX_GPIO_Init+0x284>)
 80074f8:	f003 faae 	bl	800aa58 <HAL_GPIO_Init>

  /*Configure GPIO pins : VDD3V3EN_Pin ADC_nCE_Pin LED_CHECK_Pin RELAY_IGN_Pin */
  GPIO_InitStruct.Pin = VDD3V3EN_Pin|ADC_nCE_Pin|LED_CHECK_Pin|RELAY_IGN_Pin;
 80074fc:	f240 4391 	movw	r3, #1169	; 0x491
 8007500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007502:	2301      	movs	r3, #1
 8007504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007506:	2300      	movs	r3, #0
 8007508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800750a:	2300      	movs	r3, #0
 800750c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800750e:	f107 0314 	add.w	r3, r7, #20
 8007512:	4619      	mov	r1, r3
 8007514:	4853      	ldr	r0, [pc, #332]	; (8007664 <MX_GPIO_Init+0x284>)
 8007516:	f003 fa9f 	bl	800aa58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC0_Pin ADC1_Pin ADC2_Pin ADC3_Pin
                           ADC4_Pin ADC5_Pin ADC6_Pin ADC7_Pin */
  GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin
 800751a:	23ff      	movs	r3, #255	; 0xff
 800751c:	617b      	str	r3, [r7, #20]
                          |ADC4_Pin|ADC5_Pin|ADC6_Pin|ADC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800751e:	2300      	movs	r3, #0
 8007520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007522:	2302      	movs	r3, #2
 8007524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007526:	f107 0314 	add.w	r3, r7, #20
 800752a:	4619      	mov	r1, r3
 800752c:	484f      	ldr	r0, [pc, #316]	; (800766c <MX_GPIO_Init+0x28c>)
 800752e:	f003 fa93 	bl	800aa58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_nCS_Pin ADC_FORMAT_Pin ADC_BPO_Pin PROPANE_OUT_Pin
                           PETROL_OUT_Pin */
  GPIO_InitStruct.Pin = ADC_nCS_Pin|ADC_FORMAT_Pin|ADC_BPO_Pin|PROPANE_OUT_Pin
 8007532:	f240 7305 	movw	r3, #1797	; 0x705
 8007536:	617b      	str	r3, [r7, #20]
                          |PETROL_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007538:	2301      	movs	r3, #1
 800753a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800753c:	2300      	movs	r3, #0
 800753e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007540:	2303      	movs	r3, #3
 8007542:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007544:	f107 0314 	add.w	r3, r7, #20
 8007548:	4619      	mov	r1, r3
 800754a:	4847      	ldr	r0, [pc, #284]	; (8007668 <MX_GPIO_Init+0x288>)
 800754c:	f003 fa84 	bl	800aa58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_STATUS_Pin */
  GPIO_InitStruct.Pin = ADC_STATUS_Pin;
 8007550:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007556:	4b49      	ldr	r3, [pc, #292]	; (800767c <MX_GPIO_Init+0x29c>)
 8007558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800755a:	2302      	movs	r3, #2
 800755c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADC_STATUS_GPIO_Port, &GPIO_InitStruct);
 800755e:	f107 0314 	add.w	r3, r7, #20
 8007562:	4619      	mov	r1, r3
 8007564:	4840      	ldr	r0, [pc, #256]	; (8007668 <MX_GPIO_Init+0x288>)
 8007566:	f003 fa77 	bl	800aa58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 800756a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800756e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007570:	2301      	movs	r3, #1
 8007572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007574:	2300      	movs	r3, #0
 8007576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007578:	2303      	movs	r3, #3
 800757a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 800757c:	f107 0314 	add.w	r3, r7, #20
 8007580:	4619      	mov	r1, r3
 8007582:	4839      	ldr	r0, [pc, #228]	; (8007668 <MX_GPIO_Init+0x288>)
 8007584:	f003 fa68 	bl	800aa58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 8007588:	2340      	movs	r3, #64	; 0x40
 800758a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800758c:	2301      	movs	r3, #1
 800758e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007590:	2300      	movs	r3, #0
 8007592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007594:	2303      	movs	r3, #3
 8007596:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 8007598:	f107 0314 	add.w	r3, r7, #20
 800759c:	4619      	mov	r1, r3
 800759e:	4831      	ldr	r0, [pc, #196]	; (8007664 <MX_GPIO_Init+0x284>)
 80075a0:	f003 fa5a 	bl	800aa58 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART1_COMM_Pin MCU_IGN_Pin */
  GPIO_InitStruct.Pin = USART1_COMM_Pin|MCU_IGN_Pin;
 80075a4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80075a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075aa:	2300      	movs	r3, #0
 80075ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80075ae:	2301      	movs	r3, #1
 80075b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075b2:	f107 0314 	add.w	r3, r7, #20
 80075b6:	4619      	mov	r1, r3
 80075b8:	482c      	ldr	r0, [pc, #176]	; (800766c <MX_GPIO_Init+0x28c>)
 80075ba:	f003 fa4d 	bl	800aa58 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_START_Pin */
  GPIO_InitStruct.Pin = RELAY_START_Pin;
 80075be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075c4:	2301      	movs	r3, #1
 80075c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075c8:	2300      	movs	r3, #0
 80075ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075cc:	2300      	movs	r3, #0
 80075ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY_START_GPIO_Port, &GPIO_InitStruct);
 80075d0:	f107 0314 	add.w	r3, r7, #20
 80075d4:	4619      	mov	r1, r3
 80075d6:	4825      	ldr	r0, [pc, #148]	; (800766c <MX_GPIO_Init+0x28c>)
 80075d8:	f003 fa3e 	bl	800aa58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_PARK_Pin SENS_GEAR_Pin */
  GPIO_InitStruct.Pin = SENS_PARK_Pin|SENS_GEAR_Pin;
 80075dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80075e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075e2:	2300      	movs	r3, #0
 80075e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075ea:	f107 0314 	add.w	r3, r7, #20
 80075ee:	4619      	mov	r1, r3
 80075f0:	481c      	ldr	r0, [pc, #112]	; (8007664 <MX_GPIO_Init+0x284>)
 80075f2:	f003 fa31 	bl	800aa58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECON_Pin */
  GPIO_InitStruct.Pin = ECON_Pin;
 80075f6:	2304      	movs	r3, #4
 80075f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075fa:	2301      	movs	r3, #1
 80075fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007602:	2300      	movs	r3, #0
 8007604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ECON_GPIO_Port, &GPIO_InitStruct);
 8007606:	f107 0314 	add.w	r3, r7, #20
 800760a:	4619      	mov	r1, r3
 800760c:	4818      	ldr	r0, [pc, #96]	; (8007670 <MX_GPIO_Init+0x290>)
 800760e:	f003 fa23 	bl	800aa58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROPANE_IN_Pin PETROL_IN_Pin */
  GPIO_InitStruct.Pin = PROPANE_IN_Pin|PETROL_IN_Pin;
 8007612:	2330      	movs	r3, #48	; 0x30
 8007614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007616:	2300      	movs	r3, #0
 8007618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800761a:	2301      	movs	r3, #1
 800761c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800761e:	f107 0314 	add.w	r3, r7, #20
 8007622:	4619      	mov	r1, r3
 8007624:	4810      	ldr	r0, [pc, #64]	; (8007668 <MX_GPIO_Init+0x288>)
 8007626:	f003 fa17 	bl	800aa58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = IGN_23_Pin|IGN_14_Pin;
 800762a:	23c0      	movs	r3, #192	; 0xc0
 800762c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800762e:	2301      	movs	r3, #1
 8007630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007632:	2300      	movs	r3, #0
 8007634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007636:	2303      	movs	r3, #3
 8007638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800763a:	f107 0314 	add.w	r3, r7, #20
 800763e:	4619      	mov	r1, r3
 8007640:	4809      	ldr	r0, [pc, #36]	; (8007668 <MX_GPIO_Init+0x288>)
 8007642:	f003 fa09 	bl	800aa58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8007646:	2200      	movs	r2, #0
 8007648:	2102      	movs	r1, #2
 800764a:	2028      	movs	r0, #40	; 0x28
 800764c:	f002 fc39 	bl	8009ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007650:	2028      	movs	r0, #40	; 0x28
 8007652:	f002 fc52 	bl	8009efa <HAL_NVIC_EnableIRQ>

}
 8007656:	bf00      	nop
 8007658:	3728      	adds	r7, #40	; 0x28
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	40023800 	.word	0x40023800
 8007664:	40020800 	.word	0x40020800
 8007668:	40020400 	.word	0x40020400
 800766c:	40020000 	.word	0x40020000
 8007670:	40020c00 	.word	0x40020c00
 8007674:	10310000 	.word	0x10310000
 8007678:	10110000 	.word	0x10110000
 800767c:	10210000 	.word	0x10210000

08007680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007680:	b480      	push	{r7}
 8007682:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007684:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007686:	e7fe      	b.n	8007686 <Error_Handler+0x6>

08007688 <map_init>:
#define REF_VOLTAGE 3.32f
#define RES_DIVIDER 1.467f


void map_init(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ADC_FORMAT_GPIO_Port, ADC_FORMAT_Pin, GPIO_PIN_RESET);
 800768c:	2200      	movs	r2, #0
 800768e:	2104      	movs	r1, #4
 8007690:	480c      	ldr	r0, [pc, #48]	; (80076c4 <map_init+0x3c>)
 8007692:	f003 fb93 	bl	800adbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_BPO_GPIO_Port, ADC_BPO_Pin, GPIO_PIN_RESET);
 8007696:	2200      	movs	r2, #0
 8007698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800769c:	4809      	ldr	r0, [pc, #36]	; (80076c4 <map_init+0x3c>)
 800769e:	f003 fb8d 	bl	800adbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nCE_GPIO_Port, ADC_nCE_Pin, GPIO_PIN_RESET);
 80076a2:	2200      	movs	r2, #0
 80076a4:	2110      	movs	r1, #16
 80076a6:	4808      	ldr	r0, [pc, #32]	; (80076c8 <map_init+0x40>)
 80076a8:	f003 fb88 	bl	800adbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 80076ac:	2200      	movs	r2, #0
 80076ae:	2101      	movs	r1, #1
 80076b0:	4804      	ldr	r0, [pc, #16]	; (80076c4 <map_init+0x3c>)
 80076b2:	f003 fb83 	bl	800adbc <HAL_GPIO_WritePin>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 80076b6:	2108      	movs	r1, #8
 80076b8:	4804      	ldr	r0, [pc, #16]	; (80076cc <map_init+0x44>)
 80076ba:	f006 fa77 	bl	800dbac <HAL_TIMEx_PWMN_Start>
}
 80076be:	bf00      	nop
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	40020400 	.word	0x40020400
 80076c8:	40020800 	.word	0x40020800
 80076cc:	20016050 	.word	0x20016050

080076d0 <map_adc_read>:

inline void map_adc_read(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
  uint8_t portdata = GPIOA->IDR & 0xFF;
 80076d6:	4b26      	ldr	r3, [pc, #152]	; (8007770 <map_adc_read+0xa0>)
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	72fb      	strb	r3, [r7, #11]
  float voltage = portdata / 50.0f;
 80076dc:	7afb      	ldrb	r3, [r7, #11]
 80076de:	ee07 3a90 	vmov	s15, r3
 80076e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076e6:	eddf 6a23 	vldr	s13, [pc, #140]	; 8007774 <map_adc_read+0xa4>
 80076ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076ee:	edc7 7a01 	vstr	s15, [r7, #4]
  if(voltage < 0.3f) map_error = 1;
 80076f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80076f6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8007778 <map_adc_read+0xa8>
 80076fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007702:	d503      	bpl.n	800770c <map_adc_read+0x3c>
 8007704:	4b1d      	ldr	r3, [pc, #116]	; (800777c <map_adc_read+0xac>)
 8007706:	2201      	movs	r2, #1
 8007708:	701a      	strb	r2, [r3, #0]
 800770a:	e002      	b.n	8007712 <map_adc_read+0x42>
  else map_error = 0;
 800770c:	4b1b      	ldr	r3, [pc, #108]	; (800777c <map_adc_read+0xac>)
 800770e:	2200      	movs	r2, #0
 8007710:	701a      	strb	r2, [r3, #0]
  float pressure = (voltage - 0.5f) * 25517.0f;
 8007712:	edd7 7a01 	vldr	s15, [r7, #4]
 8007716:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800771a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800771e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007780 <map_adc_read+0xb0>
 8007722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007726:	edc7 7a03 	vstr	s15, [r7, #12]
  if(pressure < 0.0f)
 800772a:	edd7 7a03 	vldr	s15, [r7, #12]
 800772e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007736:	d502      	bpl.n	800773e <map_adc_read+0x6e>
    pressure = 0.0f;
 8007738:	f04f 0300 	mov.w	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
  map_data = map_data * (1.0f - lowpass_koff) + pressure * lowpass_koff;
 800773e:	4b11      	ldr	r3, [pc, #68]	; (8007784 <map_adc_read+0xb4>)
 8007740:	edd3 7a00 	vldr	s15, [r3]
 8007744:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007788 <map_adc_read+0xb8>
 8007748:	ee27 7a87 	vmul.f32	s14, s15, s14
 800774c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007750:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800778c <map_adc_read+0xbc>
 8007754:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800775c:	4b09      	ldr	r3, [pc, #36]	; (8007784 <map_adc_read+0xb4>)
 800775e:	edc3 7a00 	vstr	s15, [r3]
}
 8007762:	bf00      	nop
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	40020000 	.word	0x40020000
 8007774:	42480000 	.word	0x42480000
 8007778:	3e99999a 	.word	0x3e99999a
 800777c:	200117b9 	.word	0x200117b9
 8007780:	46c75a00 	.word	0x46c75a00
 8007784:	2001004c 	.word	0x2001004c
 8007788:	3f733333 	.word	0x3f733333
 800778c:	3d4ccccd 	.word	0x3d4ccccd

08007790 <map_getpressure>:

inline float map_getpressure(void)
{
 8007790:	b480      	push	{r7}
 8007792:	af00      	add	r7, sp, #0
  return map_data;
 8007794:	4b04      	ldr	r3, [pc, #16]	; (80077a8 <map_getpressure+0x18>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	ee07 3a90 	vmov	s15, r3
}
 800779c:	eeb0 0a67 	vmov.f32	s0, s15
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	2001004c 	.word	0x2001004c

080077ac <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80077be:	2320      	movs	r3, #32
 80077c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80077c2:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 80077c6:	e00b      	b.n	80077e0 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 80077c8:	4a0c      	ldr	r2, [pc, #48]	; (80077fc <SCB_InvalidateDCache_by_Addr+0x50>)
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	4413      	add	r3, r2
 80077d6:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80077d8:	697a      	ldr	r2, [r7, #20]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	dcf0      	bgt.n	80077c8 <SCB_InvalidateDCache_by_Addr+0x1c>
 80077e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80077ea:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 80077ee:	bf00      	nop
 80077f0:	371c      	adds	r7, #28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	e000ed00 	.word	0xe000ed00

08007800 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8007800:	b480      	push	{r7}
 8007802:	b087      	sub	sp, #28
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007812:	2320      	movs	r3, #32
 8007814:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007816:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800781a:	e00b      	b.n	8007834 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 800781c:	4a0c      	ldr	r2, [pc, #48]	; (8007850 <SCB_CleanDCache_by_Addr+0x50>)
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	4413      	add	r3, r2
 800782a:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2b00      	cmp	r3, #0
 8007838:	dcf0      	bgt.n	800781c <SCB_CleanDCache_by_Addr+0x1c>
 800783a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800783e:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8007842:	bf00      	nop
 8007844:	371c      	adds	r7, #28
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	e000ed00 	.word	0xe000ed00

08007854 <SST25_ErrorCallback>:

volatile uint8_t semTx = 0;
volatile uint8_t semRx = 0;

inline void SST25_ErrorCallback(SPI_HandleTypeDef * _hspi)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  if(_hspi == hspi)
  {

  }
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <SST25_TxCpltCallback>:

inline void SST25_TxCpltCallback(SPI_HandleTypeDef * _hspi)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  if(_hspi == hspi)
 8007870:	4b06      	ldr	r3, [pc, #24]	; (800788c <SST25_TxCpltCallback+0x24>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	429a      	cmp	r2, r3
 8007878:	d102      	bne.n	8007880 <SST25_TxCpltCallback+0x18>
  {
    semTx = 1;
 800787a:	4b05      	ldr	r3, [pc, #20]	; (8007890 <SST25_TxCpltCallback+0x28>)
 800787c:	2201      	movs	r2, #1
 800787e:	701a      	strb	r2, [r3, #0]
  }
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	200117bc 	.word	0x200117bc
 8007890:	20011800 	.word	0x20011800

08007894 <SST25_RxCpltCallback>:

inline void SST25_RxCpltCallback(SPI_HandleTypeDef * _hspi)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  if(_hspi == hspi)
 800789c:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <SST25_RxCpltCallback+0x24>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d102      	bne.n	80078ac <SST25_RxCpltCallback+0x18>
  {
    semRx = 1;
 80078a6:	4b05      	ldr	r3, [pc, #20]	; (80078bc <SST25_RxCpltCallback+0x28>)
 80078a8:	2201      	movs	r2, #1
 80078aa:	701a      	strb	r2, [r3, #0]
  }
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	200117bc 	.word	0x200117bc
 80078bc:	20011801 	.word	0x20011801

080078c0 <SST25_TxRxCpltCallback>:

inline void SST25_TxRxCpltCallback(SPI_HandleTypeDef * _hspi)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  if(_hspi == hspi)
 80078c8:	4b08      	ldr	r3, [pc, #32]	; (80078ec <SST25_TxRxCpltCallback+0x2c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d105      	bne.n	80078de <SST25_TxRxCpltCallback+0x1e>
  {
    semTx = 1;
 80078d2:	4b07      	ldr	r3, [pc, #28]	; (80078f0 <SST25_TxRxCpltCallback+0x30>)
 80078d4:	2201      	movs	r2, #1
 80078d6:	701a      	strb	r2, [r3, #0]
    semRx = 1;
 80078d8:	4b06      	ldr	r3, [pc, #24]	; (80078f4 <SST25_TxRxCpltCallback+0x34>)
 80078da:	2201      	movs	r2, #1
 80078dc:	701a      	strb	r2, [r3, #0]
  }
}
 80078de:	bf00      	nop
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	200117bc 	.word	0x200117bc
 80078f0:	20011800 	.word	0x20011800
 80078f4:	20011801 	.word	0x20011801

080078f8 <waitTxCplt>:

static inline uint8_t waitTxCplt()
{
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
  if(semTx)
 80078fc:	4b07      	ldr	r3, [pc, #28]	; (800791c <waitTxCplt+0x24>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d004      	beq.n	8007910 <waitTxCplt+0x18>
  {
    semTx = 0;
 8007906:	4b05      	ldr	r3, [pc, #20]	; (800791c <waitTxCplt+0x24>)
 8007908:	2200      	movs	r2, #0
 800790a:	701a      	strb	r2, [r3, #0]
    return 1;
 800790c:	2301      	movs	r3, #1
 800790e:	e000      	b.n	8007912 <waitTxCplt+0x1a>
  }
  return 0;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	20011800 	.word	0x20011800

08007920 <waitTxRxCplt>:
  }
  return 0;
}

static inline uint8_t waitTxRxCplt()
{
 8007920:	b480      	push	{r7}
 8007922:	af00      	add	r7, sp, #0
  if(semRx && semTx)
 8007924:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <waitTxRxCplt+0x34>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00c      	beq.n	8007948 <waitTxRxCplt+0x28>
 800792e:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <waitTxRxCplt+0x38>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	d007      	beq.n	8007948 <waitTxRxCplt+0x28>
  {
    semRx = 0;
 8007938:	4b06      	ldr	r3, [pc, #24]	; (8007954 <waitTxRxCplt+0x34>)
 800793a:	2200      	movs	r2, #0
 800793c:	701a      	strb	r2, [r3, #0]
    semTx = 0;
 800793e:	4b06      	ldr	r3, [pc, #24]	; (8007958 <waitTxRxCplt+0x38>)
 8007940:	2200      	movs	r2, #0
 8007942:	701a      	strb	r2, [r3, #0]
    return 1;
 8007944:	2301      	movs	r3, #1
 8007946:	e000      	b.n	800794a <waitTxRxCplt+0x2a>
  }
  return 0;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	20011801 	.word	0x20011801
 8007958:	20011800 	.word	0x20011800

0800795c <SPI_CheckChip>:

static inline HAL_StatusTypeDef SPI_CheckChip(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
  tx[0] = 0x90;
 8007960:	4b47      	ldr	r3, [pc, #284]	; (8007a80 <SPI_CheckChip+0x124>)
 8007962:	2290      	movs	r2, #144	; 0x90
 8007964:	701a      	strb	r2, [r3, #0]
  tx[1] = 0;
 8007966:	4b46      	ldr	r3, [pc, #280]	; (8007a80 <SPI_CheckChip+0x124>)
 8007968:	2200      	movs	r2, #0
 800796a:	705a      	strb	r2, [r3, #1]
  tx[2] = 0;
 800796c:	4b44      	ldr	r3, [pc, #272]	; (8007a80 <SPI_CheckChip+0x124>)
 800796e:	2200      	movs	r2, #0
 8007970:	709a      	strb	r2, [r3, #2]
  tx[3] = 0;
 8007972:	4b43      	ldr	r3, [pc, #268]	; (8007a80 <SPI_CheckChip+0x124>)
 8007974:	2200      	movs	r2, #0
 8007976:	70da      	strb	r2, [r3, #3]
  tx[4] = 0;
 8007978:	4b41      	ldr	r3, [pc, #260]	; (8007a80 <SPI_CheckChip+0x124>)
 800797a:	2200      	movs	r2, #0
 800797c:	711a      	strb	r2, [r3, #4]
  tx[5] = 0;
 800797e:	4b40      	ldr	r3, [pc, #256]	; (8007a80 <SPI_CheckChip+0x124>)
 8007980:	2200      	movs	r2, #0
 8007982:	715a      	strb	r2, [r3, #5]

  SCB_CleanDCache_by_Addr((uint32_t*)tx, 6);
 8007984:	2106      	movs	r1, #6
 8007986:	483e      	ldr	r0, [pc, #248]	; (8007a80 <SPI_CheckChip+0x124>)
 8007988:	f7ff ff3a 	bl	8007800 <SCB_CleanDCache_by_Addr>

  SPI_NSS_ON();
 800798c:	2200      	movs	r2, #0
 800798e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007992:	483c      	ldr	r0, [pc, #240]	; (8007a84 <SPI_CheckChip+0x128>)
 8007994:	f003 fa12 	bl	800adbc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive_DMA(hspi, tx, rx, 6);
 8007998:	4b3b      	ldr	r3, [pc, #236]	; (8007a88 <SPI_CheckChip+0x12c>)
 800799a:	6818      	ldr	r0, [r3, #0]
 800799c:	2306      	movs	r3, #6
 800799e:	4a3b      	ldr	r2, [pc, #236]	; (8007a8c <SPI_CheckChip+0x130>)
 80079a0:	4937      	ldr	r1, [pc, #220]	; (8007a80 <SPI_CheckChip+0x124>)
 80079a2:	f004 fc03 	bl	800c1ac <HAL_SPI_TransmitReceive_DMA>
  while(!waitTxRxCplt()) {}
 80079a6:	bf00      	nop
 80079a8:	f7ff ffba 	bl	8007920 <waitTxRxCplt>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d0fa      	beq.n	80079a8 <SPI_CheckChip+0x4c>
  SPI_NSS_OFF();
 80079b2:	2201      	movs	r2, #1
 80079b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80079b8:	4832      	ldr	r0, [pc, #200]	; (8007a84 <SPI_CheckChip+0x128>)
 80079ba:	f003 f9ff 	bl	800adbc <HAL_GPIO_WritePin>

  SCB_InvalidateDCache_by_Addr((uint32_t*)rx, 6);
 80079be:	2106      	movs	r1, #6
 80079c0:	4832      	ldr	r0, [pc, #200]	; (8007a8c <SPI_CheckChip+0x130>)
 80079c2:	f7ff fef3 	bl	80077ac <SCB_InvalidateDCache_by_Addr>

  if(rx[4] != 0xBF)
 80079c6:	4b31      	ldr	r3, [pc, #196]	; (8007a8c <SPI_CheckChip+0x130>)
 80079c8:	791b      	ldrb	r3, [r3, #4]
 80079ca:	2bbf      	cmp	r3, #191	; 0xbf
 80079cc:	d001      	beq.n	80079d2 <SPI_CheckChip+0x76>
    return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e053      	b.n	8007a7a <SPI_CheckChip+0x11e>
  if(rx[5] != 0x4A)
 80079d2:	4b2e      	ldr	r3, [pc, #184]	; (8007a8c <SPI_CheckChip+0x130>)
 80079d4:	795b      	ldrb	r3, [r3, #5]
 80079d6:	2b4a      	cmp	r3, #74	; 0x4a
 80079d8:	d001      	beq.n	80079de <SPI_CheckChip+0x82>
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e04d      	b.n	8007a7a <SPI_CheckChip+0x11e>

  HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_SET);
 80079de:	2201      	movs	r2, #1
 80079e0:	2140      	movs	r1, #64	; 0x40
 80079e2:	482b      	ldr	r0, [pc, #172]	; (8007a90 <SPI_CheckChip+0x134>)
 80079e4:	f003 f9ea 	bl	800adbc <HAL_GPIO_WritePin>
  tx[0] = 0x06;
 80079e8:	4b25      	ldr	r3, [pc, #148]	; (8007a80 <SPI_CheckChip+0x124>)
 80079ea:	2206      	movs	r2, #6
 80079ec:	701a      	strb	r2, [r3, #0]
  SCB_CleanDCache_by_Addr((uint32_t*)tx, 1);
 80079ee:	2101      	movs	r1, #1
 80079f0:	4823      	ldr	r0, [pc, #140]	; (8007a80 <SPI_CheckChip+0x124>)
 80079f2:	f7ff ff05 	bl	8007800 <SCB_CleanDCache_by_Addr>
  SPI_NSS_ON();
 80079f6:	2200      	movs	r2, #0
 80079f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80079fc:	4821      	ldr	r0, [pc, #132]	; (8007a84 <SPI_CheckChip+0x128>)
 80079fe:	f003 f9dd 	bl	800adbc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit_DMA(hspi, tx, 1);
 8007a02:	4b21      	ldr	r3, [pc, #132]	; (8007a88 <SPI_CheckChip+0x12c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2201      	movs	r2, #1
 8007a08:	491d      	ldr	r1, [pc, #116]	; (8007a80 <SPI_CheckChip+0x124>)
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f004 fae2 	bl	800bfd4 <HAL_SPI_Transmit_DMA>
  while(!waitTxCplt()) {}
 8007a10:	bf00      	nop
 8007a12:	f7ff ff71 	bl	80078f8 <waitTxCplt>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0fa      	beq.n	8007a12 <SPI_CheckChip+0xb6>
  SPI_NSS_OFF();
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a22:	4818      	ldr	r0, [pc, #96]	; (8007a84 <SPI_CheckChip+0x128>)
 8007a24:	f003 f9ca 	bl	800adbc <HAL_GPIO_WritePin>

  tx[0] = 0x01;
 8007a28:	4b15      	ldr	r3, [pc, #84]	; (8007a80 <SPI_CheckChip+0x124>)
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	701a      	strb	r2, [r3, #0]
  tx[1] = 0x00;
 8007a2e:	4b14      	ldr	r3, [pc, #80]	; (8007a80 <SPI_CheckChip+0x124>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	705a      	strb	r2, [r3, #1]
  SCB_CleanDCache_by_Addr((uint32_t*)tx, 1);
 8007a34:	2101      	movs	r1, #1
 8007a36:	4812      	ldr	r0, [pc, #72]	; (8007a80 <SPI_CheckChip+0x124>)
 8007a38:	f7ff fee2 	bl	8007800 <SCB_CleanDCache_by_Addr>
  SPI_NSS_ON();
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a42:	4810      	ldr	r0, [pc, #64]	; (8007a84 <SPI_CheckChip+0x128>)
 8007a44:	f003 f9ba 	bl	800adbc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit_DMA(hspi, tx, 2);
 8007a48:	4b0f      	ldr	r3, [pc, #60]	; (8007a88 <SPI_CheckChip+0x12c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	490c      	ldr	r1, [pc, #48]	; (8007a80 <SPI_CheckChip+0x124>)
 8007a50:	4618      	mov	r0, r3
 8007a52:	f004 fabf 	bl	800bfd4 <HAL_SPI_Transmit_DMA>
  while(!waitTxCplt()) {}
 8007a56:	bf00      	nop
 8007a58:	f7ff ff4e 	bl	80078f8 <waitTxCplt>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0fa      	beq.n	8007a58 <SPI_CheckChip+0xfc>
  SPI_NSS_OFF();
 8007a62:	2201      	movs	r2, #1
 8007a64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a68:	4806      	ldr	r0, [pc, #24]	; (8007a84 <SPI_CheckChip+0x128>)
 8007a6a:	f003 f9a7 	bl	800adbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_RESET);
 8007a6e:	2200      	movs	r2, #0
 8007a70:	2140      	movs	r1, #64	; 0x40
 8007a72:	4807      	ldr	r0, [pc, #28]	; (8007a90 <SPI_CheckChip+0x134>)
 8007a74:	f003 f9a2 	bl	800adbc <HAL_GPIO_WritePin>

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	200117c0 	.word	0x200117c0
 8007a84:	40020400 	.word	0x40020400
 8007a88:	200117bc 	.word	0x200117bc
 8007a8c:	200117e0 	.word	0x200117e0
 8007a90:	40020800 	.word	0x40020800

08007a94 <SST25_Init>:
  return 0;
}


HAL_StatusTypeDef SST25_Init(SPI_HandleTypeDef * _hspi)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	73fb      	strb	r3, [r7, #15]
  hspi = _hspi;
 8007aa0:	4a05      	ldr	r2, [pc, #20]	; (8007ab8 <SST25_Init+0x24>)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6013      	str	r3, [r2, #0]

  status = SPI_CheckChip();
 8007aa6:	f7ff ff59 	bl	800795c <SPI_CheckChip>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	73fb      	strb	r3, [r7, #15]
  return status;
 8007aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	200117bc 	.word	0x200117bc

08007abc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <HAL_MspInit+0x44>)
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	4a0e      	ldr	r2, [pc, #56]	; (8007b00 <HAL_MspInit+0x44>)
 8007ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007acc:	6413      	str	r3, [r2, #64]	; 0x40
 8007ace:	4b0c      	ldr	r3, [pc, #48]	; (8007b00 <HAL_MspInit+0x44>)
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ad6:	607b      	str	r3, [r7, #4]
 8007ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ada:	4b09      	ldr	r3, [pc, #36]	; (8007b00 <HAL_MspInit+0x44>)
 8007adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ade:	4a08      	ldr	r2, [pc, #32]	; (8007b00 <HAL_MspInit+0x44>)
 8007ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8007ae6:	4b06      	ldr	r3, [pc, #24]	; (8007b00 <HAL_MspInit+0x44>)
 8007ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aee:	603b      	str	r3, [r7, #0]
 8007af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	40023800 	.word	0x40023800

08007b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b08a      	sub	sp, #40	; 0x28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b0c:	f107 0314 	add.w	r3, r7, #20
 8007b10:	2200      	movs	r2, #0
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	605a      	str	r2, [r3, #4]
 8007b16:	609a      	str	r2, [r3, #8]
 8007b18:	60da      	str	r2, [r3, #12]
 8007b1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a33      	ldr	r2, [pc, #204]	; (8007bf0 <HAL_ADC_MspInit+0xec>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d15f      	bne.n	8007be6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007b26:	4b33      	ldr	r3, [pc, #204]	; (8007bf4 <HAL_ADC_MspInit+0xf0>)
 8007b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2a:	4a32      	ldr	r2, [pc, #200]	; (8007bf4 <HAL_ADC_MspInit+0xf0>)
 8007b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b30:	6453      	str	r3, [r2, #68]	; 0x44
 8007b32:	4b30      	ldr	r3, [pc, #192]	; (8007bf4 <HAL_ADC_MspInit+0xf0>)
 8007b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3a:	613b      	str	r3, [r7, #16]
 8007b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b3e:	4b2d      	ldr	r3, [pc, #180]	; (8007bf4 <HAL_ADC_MspInit+0xf0>)
 8007b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b42:	4a2c      	ldr	r2, [pc, #176]	; (8007bf4 <HAL_ADC_MspInit+0xf0>)
 8007b44:	f043 0301 	orr.w	r3, r3, #1
 8007b48:	6313      	str	r3, [r2, #48]	; 0x30
 8007b4a:	4b2a      	ldr	r3, [pc, #168]	; (8007bf4 <HAL_ADC_MspInit+0xf0>)
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b56:	4b27      	ldr	r3, [pc, #156]	; (8007bf4 <HAL_ADC_MspInit+0xf0>)
 8007b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5a:	4a26      	ldr	r2, [pc, #152]	; (8007bf4 <HAL_ADC_MspInit+0xf0>)
 8007b5c:	f043 0304 	orr.w	r3, r3, #4
 8007b60:	6313      	str	r3, [r2, #48]	; 0x30
 8007b62:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <HAL_ADC_MspInit+0xf0>)
 8007b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b66:	f003 0304 	and.w	r3, r3, #4
 8007b6a:	60bb      	str	r3, [r7, #8]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_12_TEMP_Pin|ADC1_13_BAT_Pin;
 8007b6e:	230c      	movs	r3, #12
 8007b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007b72:	2303      	movs	r3, #3
 8007b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b7a:	f107 0314 	add.w	r3, r7, #20
 8007b7e:	4619      	mov	r1, r3
 8007b80:	481d      	ldr	r0, [pc, #116]	; (8007bf8 <HAL_ADC_MspInit+0xf4>)
 8007b82:	f002 ff69 	bl	800aa58 <HAL_GPIO_Init>
    //GPIO_InitStruct.Pull = GPIO_NOPULL;
    //HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8007b86:	4b1d      	ldr	r3, [pc, #116]	; (8007bfc <HAL_ADC_MspInit+0xf8>)
 8007b88:	4a1d      	ldr	r2, [pc, #116]	; (8007c00 <HAL_ADC_MspInit+0xfc>)
 8007b8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007b8c:	4b1b      	ldr	r3, [pc, #108]	; (8007bfc <HAL_ADC_MspInit+0xf8>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b92:	4b1a      	ldr	r3, [pc, #104]	; (8007bfc <HAL_ADC_MspInit+0xf8>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b98:	4b18      	ldr	r3, [pc, #96]	; (8007bfc <HAL_ADC_MspInit+0xf8>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007b9e:	4b17      	ldr	r3, [pc, #92]	; (8007bfc <HAL_ADC_MspInit+0xf8>)
 8007ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ba4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007ba6:	4b15      	ldr	r3, [pc, #84]	; (8007bfc <HAL_ADC_MspInit+0xf8>)
 8007ba8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007bae:	4b13      	ldr	r3, [pc, #76]	; (8007bfc <HAL_ADC_MspInit+0xf8>)
 8007bb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007bb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007bb6:	4b11      	ldr	r3, [pc, #68]	; (8007bfc <HAL_ADC_MspInit+0xf8>)
 8007bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bbc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007bbe:	4b0f      	ldr	r3, [pc, #60]	; (8007bfc <HAL_ADC_MspInit+0xf8>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007bc4:	4b0d      	ldr	r3, [pc, #52]	; (8007bfc <HAL_ADC_MspInit+0xf8>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007bca:	480c      	ldr	r0, [pc, #48]	; (8007bfc <HAL_ADC_MspInit+0xf8>)
 8007bcc:	f002 fbac 	bl	800a328 <HAL_DMA_Init>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8007bd6:	f7ff fd53 	bl	8007680 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a07      	ldr	r2, [pc, #28]	; (8007bfc <HAL_ADC_MspInit+0xf8>)
 8007bde:	639a      	str	r2, [r3, #56]	; 0x38
 8007be0:	4a06      	ldr	r2, [pc, #24]	; (8007bfc <HAL_ADC_MspInit+0xf8>)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007be6:	bf00      	nop
 8007be8:	3728      	adds	r7, #40	; 0x28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	40012000 	.word	0x40012000
 8007bf4:	40023800 	.word	0x40023800
 8007bf8:	40020800 	.word	0x40020800
 8007bfc:	2001638c 	.word	0x2001638c
 8007c00:	40026410 	.word	0x40026410

08007c04 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a0a      	ldr	r2, [pc, #40]	; (8007c3c <HAL_CRC_MspInit+0x38>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d10b      	bne.n	8007c2e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007c16:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <HAL_CRC_MspInit+0x3c>)
 8007c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1a:	4a09      	ldr	r2, [pc, #36]	; (8007c40 <HAL_CRC_MspInit+0x3c>)
 8007c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c20:	6313      	str	r3, [r2, #48]	; 0x30
 8007c22:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <HAL_CRC_MspInit+0x3c>)
 8007c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8007c2e:	bf00      	nop
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	40023000 	.word	0x40023000
 8007c40:	40023800 	.word	0x40023800

08007c44 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a0a      	ldr	r2, [pc, #40]	; (8007c7c <HAL_RNG_MspInit+0x38>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d10b      	bne.n	8007c6e <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8007c56:	4b0a      	ldr	r3, [pc, #40]	; (8007c80 <HAL_RNG_MspInit+0x3c>)
 8007c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5a:	4a09      	ldr	r2, [pc, #36]	; (8007c80 <HAL_RNG_MspInit+0x3c>)
 8007c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c60:	6353      	str	r3, [r2, #52]	; 0x34
 8007c62:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <HAL_RNG_MspInit+0x3c>)
 8007c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8007c6e:	bf00      	nop
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	50060800 	.word	0x50060800
 8007c80:	40023800 	.word	0x40023800

08007c84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b08a      	sub	sp, #40	; 0x28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c8c:	f107 0314 	add.w	r3, r7, #20
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	605a      	str	r2, [r3, #4]
 8007c96:	609a      	str	r2, [r3, #8]
 8007c98:	60da      	str	r2, [r3, #12]
 8007c9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a49      	ldr	r2, [pc, #292]	; (8007dc8 <HAL_SPI_MspInit+0x144>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	f040 808b 	bne.w	8007dbe <HAL_SPI_MspInit+0x13a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007ca8:	4b48      	ldr	r3, [pc, #288]	; (8007dcc <HAL_SPI_MspInit+0x148>)
 8007caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cac:	4a47      	ldr	r2, [pc, #284]	; (8007dcc <HAL_SPI_MspInit+0x148>)
 8007cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8007cb4:	4b45      	ldr	r3, [pc, #276]	; (8007dcc <HAL_SPI_MspInit+0x148>)
 8007cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cbc:	613b      	str	r3, [r7, #16]
 8007cbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cc0:	4b42      	ldr	r3, [pc, #264]	; (8007dcc <HAL_SPI_MspInit+0x148>)
 8007cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc4:	4a41      	ldr	r2, [pc, #260]	; (8007dcc <HAL_SPI_MspInit+0x148>)
 8007cc6:	f043 0302 	orr.w	r3, r3, #2
 8007cca:	6313      	str	r3, [r2, #48]	; 0x30
 8007ccc:	4b3f      	ldr	r3, [pc, #252]	; (8007dcc <HAL_SPI_MspInit+0x148>)
 8007cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd0:	f003 0302 	and.w	r3, r3, #2
 8007cd4:	60fb      	str	r3, [r7, #12]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007cd8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cde:	2302      	movs	r3, #2
 8007ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007cea:	2305      	movs	r3, #5
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cee:	f107 0314 	add.w	r3, r7, #20
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4836      	ldr	r0, [pc, #216]	; (8007dd0 <HAL_SPI_MspInit+0x14c>)
 8007cf6:	f002 feaf 	bl	800aa58 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8007cfa:	4b36      	ldr	r3, [pc, #216]	; (8007dd4 <HAL_SPI_MspInit+0x150>)
 8007cfc:	4a36      	ldr	r2, [pc, #216]	; (8007dd8 <HAL_SPI_MspInit+0x154>)
 8007cfe:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8007d00:	4b34      	ldr	r3, [pc, #208]	; (8007dd4 <HAL_SPI_MspInit+0x150>)
 8007d02:	2200      	movs	r2, #0
 8007d04:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007d06:	4b33      	ldr	r3, [pc, #204]	; (8007dd4 <HAL_SPI_MspInit+0x150>)
 8007d08:	2240      	movs	r2, #64	; 0x40
 8007d0a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d0c:	4b31      	ldr	r3, [pc, #196]	; (8007dd4 <HAL_SPI_MspInit+0x150>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007d12:	4b30      	ldr	r3, [pc, #192]	; (8007dd4 <HAL_SPI_MspInit+0x150>)
 8007d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d18:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007d1a:	4b2e      	ldr	r3, [pc, #184]	; (8007dd4 <HAL_SPI_MspInit+0x150>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007d20:	4b2c      	ldr	r3, [pc, #176]	; (8007dd4 <HAL_SPI_MspInit+0x150>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8007d26:	4b2b      	ldr	r3, [pc, #172]	; (8007dd4 <HAL_SPI_MspInit+0x150>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007d2c:	4b29      	ldr	r3, [pc, #164]	; (8007dd4 <HAL_SPI_MspInit+0x150>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007d32:	4b28      	ldr	r3, [pc, #160]	; (8007dd4 <HAL_SPI_MspInit+0x150>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8007d38:	4826      	ldr	r0, [pc, #152]	; (8007dd4 <HAL_SPI_MspInit+0x150>)
 8007d3a:	f002 faf5 	bl	800a328 <HAL_DMA_Init>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8007d44:	f7ff fc9c 	bl	8007680 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a22      	ldr	r2, [pc, #136]	; (8007dd4 <HAL_SPI_MspInit+0x150>)
 8007d4c:	655a      	str	r2, [r3, #84]	; 0x54
 8007d4e:	4a21      	ldr	r2, [pc, #132]	; (8007dd4 <HAL_SPI_MspInit+0x150>)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8007d54:	4b21      	ldr	r3, [pc, #132]	; (8007ddc <HAL_SPI_MspInit+0x158>)
 8007d56:	4a22      	ldr	r2, [pc, #136]	; (8007de0 <HAL_SPI_MspInit+0x15c>)
 8007d58:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8007d5a:	4b20      	ldr	r3, [pc, #128]	; (8007ddc <HAL_SPI_MspInit+0x158>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007d60:	4b1e      	ldr	r3, [pc, #120]	; (8007ddc <HAL_SPI_MspInit+0x158>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d66:	4b1d      	ldr	r3, [pc, #116]	; (8007ddc <HAL_SPI_MspInit+0x158>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007d6c:	4b1b      	ldr	r3, [pc, #108]	; (8007ddc <HAL_SPI_MspInit+0x158>)
 8007d6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d72:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007d74:	4b19      	ldr	r3, [pc, #100]	; (8007ddc <HAL_SPI_MspInit+0x158>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007d7a:	4b18      	ldr	r3, [pc, #96]	; (8007ddc <HAL_SPI_MspInit+0x158>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8007d80:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <HAL_SPI_MspInit+0x158>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007d86:	4b15      	ldr	r3, [pc, #84]	; (8007ddc <HAL_SPI_MspInit+0x158>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007d8c:	4b13      	ldr	r3, [pc, #76]	; (8007ddc <HAL_SPI_MspInit+0x158>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007d92:	4812      	ldr	r0, [pc, #72]	; (8007ddc <HAL_SPI_MspInit+0x158>)
 8007d94:	f002 fac8 	bl	800a328 <HAL_DMA_Init>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <HAL_SPI_MspInit+0x11e>
    {
      Error_Handler();
 8007d9e:	f7ff fc6f 	bl	8007680 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a0d      	ldr	r2, [pc, #52]	; (8007ddc <HAL_SPI_MspInit+0x158>)
 8007da6:	659a      	str	r2, [r3, #88]	; 0x58
 8007da8:	4a0c      	ldr	r2, [pc, #48]	; (8007ddc <HAL_SPI_MspInit+0x158>)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 14, 0);
 8007dae:	2200      	movs	r2, #0
 8007db0:	210e      	movs	r1, #14
 8007db2:	2024      	movs	r0, #36	; 0x24
 8007db4:	f002 f885 	bl	8009ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007db8:	2024      	movs	r0, #36	; 0x24
 8007dba:	f002 f89e 	bl	8009efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007dbe:	bf00      	nop
 8007dc0:	3728      	adds	r7, #40	; 0x28
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	40003800 	.word	0x40003800
 8007dcc:	40023800 	.word	0x40023800
 8007dd0:	40020400 	.word	0x40020400
 8007dd4:	200163fc 	.word	0x200163fc
 8007dd8:	40026070 	.word	0x40026070
 8007ddc:	20016164 	.word	0x20016164
 8007de0:	40026058 	.word	0x40026058

08007de4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a13      	ldr	r2, [pc, #76]	; (8007e40 <HAL_TIM_PWM_MspInit+0x5c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d10c      	bne.n	8007e10 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007df6:	4b13      	ldr	r3, [pc, #76]	; (8007e44 <HAL_TIM_PWM_MspInit+0x60>)
 8007df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfa:	4a12      	ldr	r2, [pc, #72]	; (8007e44 <HAL_TIM_PWM_MspInit+0x60>)
 8007dfc:	f043 0302 	orr.w	r3, r3, #2
 8007e00:	6413      	str	r3, [r2, #64]	; 0x40
 8007e02:	4b10      	ldr	r3, [pc, #64]	; (8007e44 <HAL_TIM_PWM_MspInit+0x60>)
 8007e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007e0e:	e010      	b.n	8007e32 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a0c      	ldr	r2, [pc, #48]	; (8007e48 <HAL_TIM_PWM_MspInit+0x64>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d10b      	bne.n	8007e32 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007e1a:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <HAL_TIM_PWM_MspInit+0x60>)
 8007e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e1e:	4a09      	ldr	r2, [pc, #36]	; (8007e44 <HAL_TIM_PWM_MspInit+0x60>)
 8007e20:	f043 0302 	orr.w	r3, r3, #2
 8007e24:	6453      	str	r3, [r2, #68]	; 0x44
 8007e26:	4b07      	ldr	r3, [pc, #28]	; (8007e44 <HAL_TIM_PWM_MspInit+0x60>)
 8007e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	60bb      	str	r3, [r7, #8]
 8007e30:	68bb      	ldr	r3, [r7, #8]
}
 8007e32:	bf00      	nop
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	40000400 	.word	0x40000400
 8007e44:	40023800 	.word	0x40023800
 8007e48:	40010400 	.word	0x40010400

08007e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a31      	ldr	r2, [pc, #196]	; (8007f20 <HAL_TIM_Base_MspInit+0xd4>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d114      	bne.n	8007e88 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007e5e:	4b31      	ldr	r3, [pc, #196]	; (8007f24 <HAL_TIM_Base_MspInit+0xd8>)
 8007e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e62:	4a30      	ldr	r2, [pc, #192]	; (8007f24 <HAL_TIM_Base_MspInit+0xd8>)
 8007e64:	f043 0304 	orr.w	r3, r3, #4
 8007e68:	6413      	str	r3, [r2, #64]	; 0x40
 8007e6a:	4b2e      	ldr	r3, [pc, #184]	; (8007f24 <HAL_TIM_Base_MspInit+0xd8>)
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6e:	f003 0304 	and.w	r3, r3, #4
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8007e76:	2200      	movs	r2, #0
 8007e78:	2103      	movs	r1, #3
 8007e7a:	201e      	movs	r0, #30
 8007e7c:	f002 f821 	bl	8009ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007e80:	201e      	movs	r0, #30
 8007e82:	f002 f83a 	bl	8009efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8007e86:	e047      	b.n	8007f18 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM7)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a26      	ldr	r2, [pc, #152]	; (8007f28 <HAL_TIM_Base_MspInit+0xdc>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d142      	bne.n	8007f18 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007e92:	4b24      	ldr	r3, [pc, #144]	; (8007f24 <HAL_TIM_Base_MspInit+0xd8>)
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	4a23      	ldr	r2, [pc, #140]	; (8007f24 <HAL_TIM_Base_MspInit+0xd8>)
 8007e98:	f043 0320 	orr.w	r3, r3, #32
 8007e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8007e9e:	4b21      	ldr	r3, [pc, #132]	; (8007f24 <HAL_TIM_Base_MspInit+0xd8>)
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	f003 0320 	and.w	r3, r3, #32
 8007ea6:	60bb      	str	r3, [r7, #8]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
    hdma_tim7_up.Instance = DMA1_Stream2;
 8007eaa:	4b20      	ldr	r3, [pc, #128]	; (8007f2c <HAL_TIM_Base_MspInit+0xe0>)
 8007eac:	4a20      	ldr	r2, [pc, #128]	; (8007f30 <HAL_TIM_Base_MspInit+0xe4>)
 8007eae:	601a      	str	r2, [r3, #0]
    hdma_tim7_up.Init.Channel = DMA_CHANNEL_1;
 8007eb0:	4b1e      	ldr	r3, [pc, #120]	; (8007f2c <HAL_TIM_Base_MspInit+0xe0>)
 8007eb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007eb6:	605a      	str	r2, [r3, #4]
    hdma_tim7_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007eb8:	4b1c      	ldr	r3, [pc, #112]	; (8007f2c <HAL_TIM_Base_MspInit+0xe0>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	609a      	str	r2, [r3, #8]
    hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ebe:	4b1b      	ldr	r3, [pc, #108]	; (8007f2c <HAL_TIM_Base_MspInit+0xe0>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	60da      	str	r2, [r3, #12]
    hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 8007ec4:	4b19      	ldr	r3, [pc, #100]	; (8007f2c <HAL_TIM_Base_MspInit+0xe0>)
 8007ec6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007eca:	611a      	str	r2, [r3, #16]
    hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007ecc:	4b17      	ldr	r3, [pc, #92]	; (8007f2c <HAL_TIM_Base_MspInit+0xe0>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	615a      	str	r2, [r3, #20]
    hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ed2:	4b16      	ldr	r3, [pc, #88]	; (8007f2c <HAL_TIM_Base_MspInit+0xe0>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	619a      	str	r2, [r3, #24]
    hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 8007ed8:	4b14      	ldr	r3, [pc, #80]	; (8007f2c <HAL_TIM_Base_MspInit+0xe0>)
 8007eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ede:	61da      	str	r2, [r3, #28]
    hdma_tim7_up.Init.Priority = DMA_PRIORITY_LOW;
 8007ee0:	4b12      	ldr	r3, [pc, #72]	; (8007f2c <HAL_TIM_Base_MspInit+0xe0>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	621a      	str	r2, [r3, #32]
    hdma_tim7_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007ee6:	4b11      	ldr	r3, [pc, #68]	; (8007f2c <HAL_TIM_Base_MspInit+0xe0>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 8007eec:	480f      	ldr	r0, [pc, #60]	; (8007f2c <HAL_TIM_Base_MspInit+0xe0>)
 8007eee:	f002 fa1b 	bl	800a328 <HAL_DMA_Init>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <HAL_TIM_Base_MspInit+0xb0>
      Error_Handler();
 8007ef8:	f7ff fbc2 	bl	8007680 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a0b      	ldr	r2, [pc, #44]	; (8007f2c <HAL_TIM_Base_MspInit+0xe0>)
 8007f00:	621a      	str	r2, [r3, #32]
 8007f02:	4a0a      	ldr	r2, [pc, #40]	; (8007f2c <HAL_TIM_Base_MspInit+0xe0>)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2105      	movs	r1, #5
 8007f0c:	2037      	movs	r0, #55	; 0x37
 8007f0e:	f001 ffd8 	bl	8009ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007f12:	2037      	movs	r0, #55	; 0x37
 8007f14:	f001 fff1 	bl	8009efa <HAL_NVIC_EnableIRQ>
}
 8007f18:	bf00      	nop
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	40000800 	.word	0x40000800
 8007f24:	40023800 	.word	0x40023800
 8007f28:	40001400 	.word	0x40001400
 8007f2c:	200160d0 	.word	0x200160d0
 8007f30:	40026040 	.word	0x40026040

08007f34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b08a      	sub	sp, #40	; 0x28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f3c:	f107 0314 	add.w	r3, r7, #20
 8007f40:	2200      	movs	r2, #0
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	605a      	str	r2, [r3, #4]
 8007f46:	609a      	str	r2, [r3, #8]
 8007f48:	60da      	str	r2, [r3, #12]
 8007f4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a22      	ldr	r2, [pc, #136]	; (8007fdc <HAL_TIM_MspPostInit+0xa8>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d11d      	bne.n	8007f92 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f56:	4b22      	ldr	r3, [pc, #136]	; (8007fe0 <HAL_TIM_MspPostInit+0xac>)
 8007f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5a:	4a21      	ldr	r2, [pc, #132]	; (8007fe0 <HAL_TIM_MspPostInit+0xac>)
 8007f5c:	f043 0304 	orr.w	r3, r3, #4
 8007f60:	6313      	str	r3, [r2, #48]	; 0x30
 8007f62:	4b1f      	ldr	r3, [pc, #124]	; (8007fe0 <HAL_TIM_MspPostInit+0xac>)
 8007f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f66:	f003 0304 	and.w	r3, r3, #4
 8007f6a:	613b      	str	r3, [r7, #16]
 8007f6c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH3_CHOKE_Pin|TIM3_CH4_ACC_Pin;
 8007f6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f74:	2302      	movs	r3, #2
 8007f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007f78:	2302      	movs	r3, #2
 8007f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007f80:	2302      	movs	r3, #2
 8007f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f84:	f107 0314 	add.w	r3, r7, #20
 8007f88:	4619      	mov	r1, r3
 8007f8a:	4816      	ldr	r0, [pc, #88]	; (8007fe4 <HAL_TIM_MspPostInit+0xb0>)
 8007f8c:	f002 fd64 	bl	800aa58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8007f90:	e020      	b.n	8007fd4 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a14      	ldr	r2, [pc, #80]	; (8007fe8 <HAL_TIM_MspPostInit+0xb4>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d11b      	bne.n	8007fd4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f9c:	4b10      	ldr	r3, [pc, #64]	; (8007fe0 <HAL_TIM_MspPostInit+0xac>)
 8007f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa0:	4a0f      	ldr	r2, [pc, #60]	; (8007fe0 <HAL_TIM_MspPostInit+0xac>)
 8007fa2:	f043 0302 	orr.w	r3, r3, #2
 8007fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8007fa8:	4b0d      	ldr	r3, [pc, #52]	; (8007fe0 <HAL_TIM_MspPostInit+0xac>)
 8007faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fac:	f003 0302 	and.w	r3, r3, #2
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH3N_ADC_RW_Pin;
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fb8:	2302      	movs	r3, #2
 8007fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM8_CH3N_ADC_RW_GPIO_Port, &GPIO_InitStruct);
 8007fc8:	f107 0314 	add.w	r3, r7, #20
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4807      	ldr	r0, [pc, #28]	; (8007fec <HAL_TIM_MspPostInit+0xb8>)
 8007fd0:	f002 fd42 	bl	800aa58 <HAL_GPIO_Init>
}
 8007fd4:	bf00      	nop
 8007fd6:	3728      	adds	r7, #40	; 0x28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	40000400 	.word	0x40000400
 8007fe0:	40023800 	.word	0x40023800
 8007fe4:	40020800 	.word	0x40020800
 8007fe8:	40010400 	.word	0x40010400
 8007fec:	40020400 	.word	0x40020400

08007ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08a      	sub	sp, #40	; 0x28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ff8:	f107 0314 	add.w	r3, r7, #20
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	605a      	str	r2, [r3, #4]
 8008002:	609a      	str	r2, [r3, #8]
 8008004:	60da      	str	r2, [r3, #12]
 8008006:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a4a      	ldr	r2, [pc, #296]	; (8008138 <HAL_UART_MspInit+0x148>)
 800800e:	4293      	cmp	r3, r2
 8008010:	f040 808e 	bne.w	8008130 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008014:	4b49      	ldr	r3, [pc, #292]	; (800813c <HAL_UART_MspInit+0x14c>)
 8008016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008018:	4a48      	ldr	r2, [pc, #288]	; (800813c <HAL_UART_MspInit+0x14c>)
 800801a:	f043 0310 	orr.w	r3, r3, #16
 800801e:	6453      	str	r3, [r2, #68]	; 0x44
 8008020:	4b46      	ldr	r3, [pc, #280]	; (800813c <HAL_UART_MspInit+0x14c>)
 8008022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	613b      	str	r3, [r7, #16]
 800802a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800802c:	4b43      	ldr	r3, [pc, #268]	; (800813c <HAL_UART_MspInit+0x14c>)
 800802e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008030:	4a42      	ldr	r2, [pc, #264]	; (800813c <HAL_UART_MspInit+0x14c>)
 8008032:	f043 0301 	orr.w	r3, r3, #1
 8008036:	6313      	str	r3, [r2, #48]	; 0x30
 8008038:	4b40      	ldr	r3, [pc, #256]	; (800813c <HAL_UART_MspInit+0x14c>)
 800803a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	60fb      	str	r3, [r7, #12]
 8008042:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008044:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800804a:	2302      	movs	r3, #2
 800804c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800804e:	2301      	movs	r3, #1
 8008050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008052:	2303      	movs	r3, #3
 8008054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008056:	2307      	movs	r3, #7
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800805a:	f107 0314 	add.w	r3, r7, #20
 800805e:	4619      	mov	r1, r3
 8008060:	4837      	ldr	r0, [pc, #220]	; (8008140 <HAL_UART_MspInit+0x150>)
 8008062:	f002 fcf9 	bl	800aa58 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8008066:	4b37      	ldr	r3, [pc, #220]	; (8008144 <HAL_UART_MspInit+0x154>)
 8008068:	4a37      	ldr	r2, [pc, #220]	; (8008148 <HAL_UART_MspInit+0x158>)
 800806a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800806c:	4b35      	ldr	r3, [pc, #212]	; (8008144 <HAL_UART_MspInit+0x154>)
 800806e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008072:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008074:	4b33      	ldr	r3, [pc, #204]	; (8008144 <HAL_UART_MspInit+0x154>)
 8008076:	2200      	movs	r2, #0
 8008078:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800807a:	4b32      	ldr	r3, [pc, #200]	; (8008144 <HAL_UART_MspInit+0x154>)
 800807c:	2200      	movs	r2, #0
 800807e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008080:	4b30      	ldr	r3, [pc, #192]	; (8008144 <HAL_UART_MspInit+0x154>)
 8008082:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008086:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008088:	4b2e      	ldr	r3, [pc, #184]	; (8008144 <HAL_UART_MspInit+0x154>)
 800808a:	2200      	movs	r2, #0
 800808c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800808e:	4b2d      	ldr	r3, [pc, #180]	; (8008144 <HAL_UART_MspInit+0x154>)
 8008090:	2200      	movs	r2, #0
 8008092:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8008094:	4b2b      	ldr	r3, [pc, #172]	; (8008144 <HAL_UART_MspInit+0x154>)
 8008096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800809a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800809c:	4b29      	ldr	r3, [pc, #164]	; (8008144 <HAL_UART_MspInit+0x154>)
 800809e:	2200      	movs	r2, #0
 80080a0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80080a2:	4b28      	ldr	r3, [pc, #160]	; (8008144 <HAL_UART_MspInit+0x154>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80080a8:	4826      	ldr	r0, [pc, #152]	; (8008144 <HAL_UART_MspInit+0x154>)
 80080aa:	f002 f93d 	bl	800a328 <HAL_DMA_Init>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80080b4:	f7ff fae4 	bl	8007680 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a22      	ldr	r2, [pc, #136]	; (8008144 <HAL_UART_MspInit+0x154>)
 80080bc:	66da      	str	r2, [r3, #108]	; 0x6c
 80080be:	4a21      	ldr	r2, [pc, #132]	; (8008144 <HAL_UART_MspInit+0x154>)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80080c4:	4b21      	ldr	r3, [pc, #132]	; (800814c <HAL_UART_MspInit+0x15c>)
 80080c6:	4a22      	ldr	r2, [pc, #136]	; (8008150 <HAL_UART_MspInit+0x160>)
 80080c8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80080ca:	4b20      	ldr	r3, [pc, #128]	; (800814c <HAL_UART_MspInit+0x15c>)
 80080cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80080d0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80080d2:	4b1e      	ldr	r3, [pc, #120]	; (800814c <HAL_UART_MspInit+0x15c>)
 80080d4:	2240      	movs	r2, #64	; 0x40
 80080d6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80080d8:	4b1c      	ldr	r3, [pc, #112]	; (800814c <HAL_UART_MspInit+0x15c>)
 80080da:	2200      	movs	r2, #0
 80080dc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80080de:	4b1b      	ldr	r3, [pc, #108]	; (800814c <HAL_UART_MspInit+0x15c>)
 80080e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80080e6:	4b19      	ldr	r3, [pc, #100]	; (800814c <HAL_UART_MspInit+0x15c>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80080ec:	4b17      	ldr	r3, [pc, #92]	; (800814c <HAL_UART_MspInit+0x15c>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80080f2:	4b16      	ldr	r3, [pc, #88]	; (800814c <HAL_UART_MspInit+0x15c>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80080f8:	4b14      	ldr	r3, [pc, #80]	; (800814c <HAL_UART_MspInit+0x15c>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80080fe:	4b13      	ldr	r3, [pc, #76]	; (800814c <HAL_UART_MspInit+0x15c>)
 8008100:	2200      	movs	r2, #0
 8008102:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008104:	4811      	ldr	r0, [pc, #68]	; (800814c <HAL_UART_MspInit+0x15c>)
 8008106:	f002 f90f 	bl	800a328 <HAL_DMA_Init>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8008110:	f7ff fab6 	bl	8007680 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a0d      	ldr	r2, [pc, #52]	; (800814c <HAL_UART_MspInit+0x15c>)
 8008118:	669a      	str	r2, [r3, #104]	; 0x68
 800811a:	4a0c      	ldr	r2, [pc, #48]	; (800814c <HAL_UART_MspInit+0x15c>)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 9, 0);
 8008120:	2200      	movs	r2, #0
 8008122:	2109      	movs	r1, #9
 8008124:	2025      	movs	r0, #37	; 0x25
 8008126:	f001 fecc 	bl	8009ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800812a:	2025      	movs	r0, #37	; 0x25
 800812c:	f001 fee5 	bl	8009efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008130:	bf00      	nop
 8008132:	3728      	adds	r7, #40	; 0x28
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	40011000 	.word	0x40011000
 800813c:	40023800 	.word	0x40023800
 8008140:	40020000 	.word	0x40020000
 8008144:	200162ac 	.word	0x200162ac
 8008148:	40026440 	.word	0x40026440
 800814c:	20016204 	.word	0x20016204
 8008150:	400264b8 	.word	0x400264b8

08008154 <__NVIC_SystemReset>:
{
 8008154:	b480      	push	{r7}
 8008156:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008158:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800815c:	4b05      	ldr	r3, [pc, #20]	; (8008174 <__NVIC_SystemReset+0x20>)
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008164:	4903      	ldr	r1, [pc, #12]	; (8008174 <__NVIC_SystemReset+0x20>)
 8008166:	4b04      	ldr	r3, [pc, #16]	; (8008178 <__NVIC_SystemReset+0x24>)
 8008168:	4313      	orrs	r3, r2
 800816a:	60cb      	str	r3, [r1, #12]
 800816c:	f3bf 8f4f 	dsb	sy
    __NOP();
 8008170:	bf00      	nop
 8008172:	e7fd      	b.n	8008170 <__NVIC_SystemReset+0x1c>
 8008174:	e000ed00 	.word	0xe000ed00
 8008178:	05fa0004 	.word	0x05fa0004

0800817c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800817c:	b480      	push	{r7}
 800817e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008180:	e7fe      	b.n	8008180 <NMI_Handler+0x4>

08008182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  NVIC_SystemReset();
 8008186:	f7ff ffe5 	bl	8008154 <__NVIC_SystemReset>

0800818a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800818a:	b480      	push	{r7}
 800818c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800818e:	e7fe      	b.n	800818e <MemManage_Handler+0x4>

08008190 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008190:	b480      	push	{r7}
 8008192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008194:	e7fe      	b.n	8008194 <BusFault_Handler+0x4>

08008196 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008196:	b480      	push	{r7}
 8008198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800819a:	e7fe      	b.n	800819a <UsageFault_Handler+0x4>

0800819c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80081a0:	bf00      	nop
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80081aa:	b480      	push	{r7}
 80081ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80081ae:	bf00      	nop
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80081bc:	bf00      	nop
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80081ca:	f001 faf7 	bl	80097bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80081ce:	bf00      	nop
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim7_up);
 80081d8:	4802      	ldr	r0, [pc, #8]	; (80081e4 <DMA1_Stream2_IRQHandler+0x10>)
 80081da:	f002 f9d5 	bl	800a588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80081de:	bf00      	nop
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	200160d0 	.word	0x200160d0

080081e8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80081ec:	4802      	ldr	r0, [pc, #8]	; (80081f8 <DMA1_Stream3_IRQHandler+0x10>)
 80081ee:	f002 f9cb 	bl	800a588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80081f2:	bf00      	nop
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20016164 	.word	0x20016164

080081fc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008200:	4802      	ldr	r0, [pc, #8]	; (800820c <DMA1_Stream4_IRQHandler+0x10>)
 8008202:	f002 f9c1 	bl	800a588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8008206:	bf00      	nop
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	200163fc 	.word	0x200163fc

08008210 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008214:	4802      	ldr	r0, [pc, #8]	; (8008220 <SPI2_IRQHandler+0x10>)
 8008216:	f004 f955 	bl	800c4c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800821a:	bf00      	nop
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	20015fec 	.word	0x20015fec

08008224 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008228:	4802      	ldr	r0, [pc, #8]	; (8008234 <USART1_IRQHandler+0x10>)
 800822a:	f005 ff8d 	bl	800e148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800822e:	bf00      	nop
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	2001630c 	.word	0x2001630c

08008238 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800823c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008240:	f002 fdd6 	bl	800adf0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8008244:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008248:	f002 fdd2 	bl	800adf0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800824c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008250:	f002 fdce 	bl	800adf0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8008254:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008258:	f002 fdca 	bl	800adf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800825c:	bf00      	nop
 800825e:	bd80      	pop	{r7, pc}

08008260 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008264:	4802      	ldr	r0, [pc, #8]	; (8008270 <TIM4_IRQHandler+0x10>)
 8008266:	f004 fdf0 	bl	800ce4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800826a:	bf00      	nop
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20016090 	.word	0x20016090

08008274 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008278:	4802      	ldr	r0, [pc, #8]	; (8008284 <TIM7_IRQHandler+0x10>)
 800827a:	f004 fde6 	bl	800ce4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800827e:	bf00      	nop
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	2001645c 	.word	0x2001645c

08008288 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800828c:	4802      	ldr	r0, [pc, #8]	; (8008298 <DMA2_Stream0_IRQHandler+0x10>)
 800828e:	f002 f97b 	bl	800a588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008292:	bf00      	nop
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	2001638c 	.word	0x2001638c

0800829c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80082a0:	4802      	ldr	r0, [pc, #8]	; (80082ac <DMA2_Stream2_IRQHandler+0x10>)
 80082a2:	f002 f971 	bl	800a588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80082a6:	bf00      	nop
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	200162ac 	.word	0x200162ac

080082b0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80082b4:	4802      	ldr	r0, [pc, #8]	; (80082c0 <DMA2_Stream7_IRQHandler+0x10>)
 80082b6:	f002 f967 	bl	800a588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80082ba:	bf00      	nop
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20016204 	.word	0x20016204

080082c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80082c4:	b480      	push	{r7}
 80082c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80082c8:	4b08      	ldr	r3, [pc, #32]	; (80082ec <SystemInit+0x28>)
 80082ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ce:	4a07      	ldr	r2, [pc, #28]	; (80082ec <SystemInit+0x28>)
 80082d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80082d8:	4b04      	ldr	r3, [pc, #16]	; (80082ec <SystemInit+0x28>)
 80082da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80082de:	609a      	str	r2, [r3, #8]
#endif
}
 80082e0:	bf00      	nop
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	e000ed00 	.word	0xe000ed00

080082f0 <SCB_InvalidateDCache_by_Addr>:
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8008302:	2320      	movs	r3, #32
 8008304:	60fb      	str	r3, [r7, #12]
 8008306:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 800830a:	e00b      	b.n	8008324 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800830c:	4a0c      	ldr	r2, [pc, #48]	; (8008340 <SCB_InvalidateDCache_by_Addr+0x50>)
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	4413      	add	r3, r2
 800831a:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	2b00      	cmp	r3, #0
 8008328:	dcf0      	bgt.n	800830c <SCB_InvalidateDCache_by_Addr+0x1c>
 800832a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800832e:	f3bf 8f6f 	isb	sy
}
 8008332:	bf00      	nop
 8008334:	371c      	adds	r7, #28
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	e000ed00 	.word	0xe000ed00

08008344 <SCB_CleanDCache_by_Addr>:
{
 8008344:	b480      	push	{r7}
 8008346:	b087      	sub	sp, #28
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8008356:	2320      	movs	r3, #32
 8008358:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800835a:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 800835e:	e00b      	b.n	8008378 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 8008360:	4a0c      	ldr	r2, [pc, #48]	; (8008394 <SCB_CleanDCache_by_Addr+0x50>)
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	4413      	add	r3, r2
 800836e:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dcf0      	bgt.n	8008360 <SCB_CleanDCache_by_Addr+0x1c>
 800837e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008382:	f3bf 8f6f 	isb	sy
}
 8008386:	bf00      	nop
 8008388:	371c      	adds	r7, #28
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	e000ed00 	.word	0xe000ed00

08008398 <entercritical>:

#ifndef taskENTER_CRITICAL
#define configMAX_SYSCALL_INTERRUPT_PRIORITY 5
#define taskENTER_CRITICAL entercritical
static inline void entercritical(void)
{
 8008398:	b480      	push	{r7}
 800839a:	af00      	add	r7, sp, #0
    " dsb                           \n" \
    " cpsie i                         \n" \
    :"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
  );
  */
}
 800839c:	bf00      	nop
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <exitcritical>:
#endif

#ifndef taskEXIT_CRITICAL
#define taskEXIT_CRITICAL exitcritical
static inline void exitcritical(void)
{
 80083a6:	b480      	push	{r7}
 80083a8:	af00      	add	r7, sp, #0
  __asm volatile
  (
    " msr basepri, %0 " :: "r" ( 0 ) : "memory"
  );
  */
}
 80083aa:	bf00      	nop
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <Msg_GetSrc>:

static sGetterHandle xHandles[] = {
    {{0},{0},{0},{0},{0},{0}, &huart1, {etrCTRL,etrPC,etrNone} },
};

static inline int Msg_GetSrc(uint8_t xValue) { return (xValue & 7); }
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	71fb      	strb	r3, [r7, #7]
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	f003 0307 	and.w	r3, r3, #7
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <Msg_GetDest>:
static inline int Msg_GetDest(uint8_t xValue) { return ((xValue >> 3) & 7); }
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	4603      	mov	r3, r0
 80083d8:	71fb      	strb	r3, [r7, #7]
 80083da:	79fb      	ldrb	r3, [r7, #7]
 80083dc:	08db      	lsrs	r3, r3, #3
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	f003 0307 	and.w	r3, r3, #7
 80083e4:	4618      	mov	r0, r3
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <CacheInvalidate>:

static inline void CacheInvalidate(void * buffer, uint32_t size)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f003 031f 	and.w	r3, r3, #31
 8008400:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d105      	bne.n	8008414 <CacheInvalidate+0x24>
    SCB_InvalidateDCache_by_Addr((uint32_t*)buffer, size);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f7ff ff6f 	bl	80082f0 <SCB_InvalidateDCache_by_Addr>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 8008412:	e009      	b.n	8008428 <CacheInvalidate+0x38>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	4618      	mov	r0, r3
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4413      	add	r3, r2
 8008422:	4619      	mov	r1, r3
 8008424:	f7ff ff64 	bl	80082f0 <SCB_InvalidateDCache_by_Addr>
}
 8008428:	bf00      	nop
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <CacheClean>:

static inline void CacheClean(void * buffer, uint32_t size)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f003 031f 	and.w	r3, r3, #31
 8008440:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d105      	bne.n	8008454 <CacheClean+0x24>
    SCB_CleanDCache_by_Addr((uint32_t*)buffer, size);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7ff ff79 	bl	8008344 <SCB_CleanDCache_by_Addr>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 8008452:	e009      	b.n	8008468 <CacheClean+0x38>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	4618      	mov	r0, r3
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	4413      	add	r3, r2
 8008462:	4619      	mov	r1, r3
 8008464:	f7ff ff6e 	bl	8008344 <SCB_CleanDCache_by_Addr>
}
 8008468:	bf00      	nop
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <calculatePacketId>:

static inline uint16_t calculatePacketId(void)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
  static uint16_t counter = 0;
  uint16_t returnvalue;
  do
  {
    counter++;
 8008476:	4b19      	ldr	r3, [pc, #100]	; (80084dc <calculatePacketId+0x6c>)
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	3301      	adds	r3, #1
 800847c:	b29a      	uxth	r2, r3
 800847e:	4b17      	ldr	r3, [pc, #92]	; (80084dc <calculatePacketId+0x6c>)
 8008480:	801a      	strh	r2, [r3, #0]
    uint16_t localcounter = counter;
 8008482:	4b16      	ldr	r3, [pc, #88]	; (80084dc <calculatePacketId+0x6c>)
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	81fb      	strh	r3, [r7, #14]
    uint32_t now = Delay_Tick;
 8008488:	4b15      	ldr	r3, [pc, #84]	; (80084e0 <calculatePacketId+0x70>)
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	60bb      	str	r3, [r7, #8]
    uint8_t crcdata[6] = {(localcounter >> 8) & 0xFF,localcounter & 0xFF, (now >> 24) & 0xFF, (now >> 16) & 0xFF, (now >> 8) & 0xFF, now & 0xFF } ;
 800848e:	89fb      	ldrh	r3, [r7, #14]
 8008490:	0a1b      	lsrs	r3, r3, #8
 8008492:	b29b      	uxth	r3, r3
 8008494:	b2db      	uxtb	r3, r3
 8008496:	703b      	strb	r3, [r7, #0]
 8008498:	89fb      	ldrh	r3, [r7, #14]
 800849a:	b2db      	uxtb	r3, r3
 800849c:	707b      	strb	r3, [r7, #1]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	0e1b      	lsrs	r3, r3, #24
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	70bb      	strb	r3, [r7, #2]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	0c1b      	lsrs	r3, r3, #16
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	70fb      	strb	r3, [r7, #3]
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	0a1b      	lsrs	r3, r3, #8
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	713b      	strb	r3, [r7, #4]
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	717b      	strb	r3, [r7, #5]
    returnvalue = CRC16_Generate(crcdata, sizeof(crcdata));
 80084bc:	463b      	mov	r3, r7
 80084be:	2106      	movs	r1, #6
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fd fca1 	bl	8005e08 <CRC16_Generate>
 80084c6:	4603      	mov	r3, r0
 80084c8:	80fb      	strh	r3, [r7, #6]
  } while(returnvalue == 0);
 80084ca:	88fb      	ldrh	r3, [r7, #6]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d0d2      	beq.n	8008476 <calculatePacketId+0x6>
  return returnvalue;
 80084d0:	88fb      	ldrh	r3, [r7, #6]

}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	2001180c 	.word	0x2001180c
 80084e0:	40000c00 	.word	0x40000c00

080084e4 <packager>:

static inline void packager(sGetterHandle* xHandle, uint8_t* xMsgPtr, uint16_t xMsgLen, eTransChannels xChaDest, uint16_t aPacketId) {
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	4611      	mov	r1, r2
 80084f0:	461a      	mov	r2, r3
 80084f2:	460b      	mov	r3, r1
 80084f4:	80fb      	strh	r3, [r7, #6]
 80084f6:	4613      	mov	r3, r2
 80084f8:	717b      	strb	r3, [r7, #5]

    if (xHandle && xMsgLen<MAX_PACK_LEN)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 80ed 	beq.w	80086dc <packager+0x1f8>
 8008502:	88fb      	ldrh	r3, [r7, #6]
 8008504:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8008508:	f080 80e8 	bcs.w	80086dc <packager+0x1f8>
    {
        uint16_t aCrc15 = 0;
 800850c:	2300      	movs	r3, #0
 800850e:	823b      	strh	r3, [r7, #16]
        uint16_t aTotLen = xMsgLen ? xMsgLen + 10 : 8;
 8008510:	88fb      	ldrh	r3, [r7, #6]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <packager+0x3a>
 8008516:	88fb      	ldrh	r3, [r7, #6]
 8008518:	330a      	adds	r3, #10
 800851a:	b29b      	uxth	r3, r3
 800851c:	e000      	b.n	8008520 <packager+0x3c>
 800851e:	2308      	movs	r3, #8
 8008520:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = etrACIS | ( xChaDest << 3 );
 8008522:	797b      	ldrb	r3, [r7, #5]
 8008524:	00db      	lsls	r3, r3, #3
 8008526:	b25b      	sxtb	r3, r3
 8008528:	f043 0302 	orr.w	r3, r3, #2
 800852c:	b25b      	sxtb	r3, r3
 800852e:	74fb      	strb	r3, [r7, #19]


        xHandle->BufSender[0] = 0x55;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8008536:	2255      	movs	r2, #85	; 0x55
 8008538:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[1] = 0x55;
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	f241 0381 	movw	r3, #4225	; 0x1081
 8008540:	4413      	add	r3, r2
 8008542:	2255      	movs	r2, #85	; 0x55
 8008544:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[2] = aHeadByte;
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	f241 0382 	movw	r3, #4226	; 0x1082
 800854c:	4413      	add	r3, r2
 800854e:	7cfa      	ldrb	r2, [r7, #19]
 8008550:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[3] = aTotLen & 0xFF;
 8008552:	8abb      	ldrh	r3, [r7, #20]
 8008554:	b2d9      	uxtb	r1, r3
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	f241 0383 	movw	r3, #4227	; 0x1083
 800855c:	4413      	add	r3, r2
 800855e:	460a      	mov	r2, r1
 8008560:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[4] = (aTotLen >> 8) & 0xFF;
 8008562:	8abb      	ldrh	r3, [r7, #20]
 8008564:	0a1b      	lsrs	r3, r3, #8
 8008566:	b29b      	uxth	r3, r3
 8008568:	b2d9      	uxtb	r1, r3
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	f241 0384 	movw	r3, #4228	; 0x1084
 8008570:	4413      	add	r3, r2
 8008572:	460a      	mov	r2, r1
 8008574:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[5] = aPacketId & 0xFF;
 8008576:	8c3b      	ldrh	r3, [r7, #32]
 8008578:	b2d9      	uxtb	r1, r3
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	f241 0385 	movw	r3, #4229	; 0x1085
 8008580:	4413      	add	r3, r2
 8008582:	460a      	mov	r2, r1
 8008584:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[6] = (aPacketId >> 8) & 0xFF;
 8008586:	8c3b      	ldrh	r3, [r7, #32]
 8008588:	0a1b      	lsrs	r3, r3, #8
 800858a:	b29b      	uxth	r3, r3
 800858c:	b2d9      	uxtb	r1, r3
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	f241 0386 	movw	r3, #4230	; 0x1086
 8008594:	4413      	add	r3, r2
 8008596:	460a      	mov	r2, r1
 8008598:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[7] = CRC8_Generate(xHandle->BufSender, 7);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80085a0:	2107      	movs	r1, #7
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fd fc4c 	bl	8005e40 <CRC8_Generate>
 80085a8:	4603      	mov	r3, r0
 80085aa:	4619      	mov	r1, r3
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	f241 0387 	movw	r3, #4231	; 0x1087
 80085b2:	4413      	add	r3, r2
 80085b4:	460a      	mov	r2, r1
 80085b6:	701a      	strb	r2, [r3, #0]


        if (xMsgLen)
 80085b8:	88fb      	ldrh	r3, [r7, #6]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d013      	beq.n	80085e6 <packager+0x102>
        {
          memcpy(&xHandle->BufSender[8], xMsgPtr, xMsgLen);
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	f241 0388 	movw	r3, #4232	; 0x1088
 80085c4:	4413      	add	r3, r2
 80085c6:	88fa      	ldrh	r2, [r7, #6]
 80085c8:	68b9      	ldr	r1, [r7, #8]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f006 fc3c 	bl	800ee48 <memcpy>
          aCrc15 = CRC16_Generate(xHandle->BufSender, xMsgLen + 8);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 80085d6:	88fb      	ldrh	r3, [r7, #6]
 80085d8:	3308      	adds	r3, #8
 80085da:	4619      	mov	r1, r3
 80085dc:	4610      	mov	r0, r2
 80085de:	f7fd fc13 	bl	8005e08 <CRC16_Generate>
 80085e2:	4603      	mov	r3, r0
 80085e4:	823b      	strh	r3, [r7, #16]
        }

        uint8_t handled = 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	75fb      	strb	r3, [r7, #23]

        if(!protIsSome(&xHandle->xTxFifo))
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80085f0:	4413      	add	r3, r2
 80085f2:	4618      	mov	r0, r3
 80085f4:	f001 f85f 	bl	80096b6 <protIsSome>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d147      	bne.n	800868e <packager+0x1aa>
        {
          taskENTER_CRITICAL();
 80085fe:	f7ff fecb 	bl	8008398 <entercritical>
          if(!xHandle->TxBusy)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b00      	cmp	r3, #0
 800860e:	d13c      	bne.n	800868a <packager+0x1a6>
          {
            xHandle->TxBusy = 1;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8008616:	2201      	movs	r2, #1
 8008618:	701a      	strb	r2, [r3, #0]
            handled = 1;
 800861a:	2301      	movs	r3, #1
 800861c:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 800861e:	f7ff fec2 	bl	80083a6 <exitcritical>

            memcpy(&xHandle->BufTx[0],xHandle->BufSender,8);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f503 7040 	add.w	r0, r3, #768	; 0x300
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800862e:	2208      	movs	r2, #8
 8008630:	4619      	mov	r1, r3
 8008632:	f006 fc09 	bl	800ee48 <memcpy>
            if (xMsgLen) {
 8008636:	88fb      	ldrh	r3, [r7, #6]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d012      	beq.n	8008662 <packager+0x17e>
              memcpy(&xHandle->BufTx[8], &xHandle->BufSender[8],xMsgLen);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f503 7042 	add.w	r0, r3, #776	; 0x308
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	f241 0388 	movw	r3, #4232	; 0x1088
 8008648:	4413      	add	r3, r2
 800864a:	88fa      	ldrh	r2, [r7, #6]
 800864c:	4619      	mov	r1, r3
 800864e:	f006 fbfb 	bl	800ee48 <memcpy>
              memcpy(&xHandle->BufTx[xMsgLen+8], &aCrc15,2);
 8008652:	88fb      	ldrh	r3, [r7, #6]
 8008654:	3308      	adds	r3, #8
 8008656:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	4413      	add	r3, r2
 800865e:	8a3a      	ldrh	r2, [r7, #16]
 8008660:	801a      	strh	r2, [r3, #0]
            }

            CacheClean(xHandle->BufTx, aTotLen);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008668:	8aba      	ldrh	r2, [r7, #20]
 800866a:	4611      	mov	r1, r2
 800866c:	4618      	mov	r0, r3
 800866e:	f7ff fedf 	bl	8008430 <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, aTotLen);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008678:	6818      	ldr	r0, [r3, #0]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008680:	8aba      	ldrh	r2, [r7, #20]
 8008682:	4619      	mov	r1, r3
 8008684:	f005 fc60 	bl	800df48 <HAL_UART_Transmit_DMA>
 8008688:	e001      	b.n	800868e <packager+0x1aa>
          }
          else taskEXIT_CRITICAL();
 800868a:	f7ff fe8c 	bl	80083a6 <exitcritical>
        }

        if(!handled)
 800868e:	7dfb      	ldrb	r3, [r7, #23]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d123      	bne.n	80086dc <packager+0x1f8>
        {
          protPushSequence(&xHandle->xTxFifo,xHandle->BufSender,8);
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	f241 3388 	movw	r3, #5000	; 0x1388
 800869a:	4413      	add	r3, r2
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	f502 5184 	add.w	r1, r2, #4224	; 0x1080
 80086a2:	2208      	movs	r2, #8
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 ffae 	bl	8009606 <protPushSequence>
          if (xMsgLen) {
 80086aa:	88fb      	ldrh	r3, [r7, #6]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d015      	beq.n	80086dc <packager+0x1f8>
              protPushSequence(&xHandle->xTxFifo,&xHandle->BufSender[8],xMsgLen);
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80086b6:	4413      	add	r3, r2
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	f241 0188 	movw	r1, #4232	; 0x1088
 80086be:	4411      	add	r1, r2
 80086c0:	88fa      	ldrh	r2, [r7, #6]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 ff9f 	bl	8009606 <protPushSequence>
              protPushSequence(&xHandle->xTxFifo,&aCrc15,2);
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80086ce:	4413      	add	r3, r2
 80086d0:	f107 0110 	add.w	r1, r7, #16
 80086d4:	2202      	movs	r2, #2
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 ff95 	bl	8009606 <protPushSequence>
          }
        }
    }
}
 80086dc:	bf00      	nop
 80086de:	3718      	adds	r7, #24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <acker>:

static inline void acker(sGetterHandle* xHandle, uint16_t aPacketId, eTransChannels xChaDest) {
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	807b      	strh	r3, [r7, #2]
 80086f0:	4613      	mov	r3, r2
 80086f2:	707b      	strb	r3, [r7, #1]

    if (xHandle)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d06f      	beq.n	80087da <acker+0xf6>
    {
        uint16_t aTotLen = 8;
 80086fa:	2308      	movs	r3, #8
 80086fc:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = (( etrACIS | ( xChaDest << 3 ) ) | HEADER_ACK_BIT);
 80086fe:	787b      	ldrb	r3, [r7, #1]
 8008700:	00db      	lsls	r3, r3, #3
 8008702:	b25b      	sxtb	r3, r3
 8008704:	f063 037d 	orn	r3, r3, #125	; 0x7d
 8008708:	b25b      	sxtb	r3, r3
 800870a:	74fb      	strb	r3, [r7, #19]
        uint8_t header[8];

        header[0] = 0x55;
 800870c:	2355      	movs	r3, #85	; 0x55
 800870e:	723b      	strb	r3, [r7, #8]
        header[1] = 0x55;
 8008710:	2355      	movs	r3, #85	; 0x55
 8008712:	727b      	strb	r3, [r7, #9]
        header[2] = aHeadByte;
 8008714:	7cfb      	ldrb	r3, [r7, #19]
 8008716:	72bb      	strb	r3, [r7, #10]
        header[3] = aTotLen & 0xFF;
 8008718:	8abb      	ldrh	r3, [r7, #20]
 800871a:	b2db      	uxtb	r3, r3
 800871c:	72fb      	strb	r3, [r7, #11]
        header[4] = (aTotLen >> 8) & 0xFF;
 800871e:	8abb      	ldrh	r3, [r7, #20]
 8008720:	0a1b      	lsrs	r3, r3, #8
 8008722:	b29b      	uxth	r3, r3
 8008724:	b2db      	uxtb	r3, r3
 8008726:	733b      	strb	r3, [r7, #12]
        header[5] = aPacketId & 0xFF;
 8008728:	887b      	ldrh	r3, [r7, #2]
 800872a:	b2db      	uxtb	r3, r3
 800872c:	737b      	strb	r3, [r7, #13]
        header[6] = (aPacketId >> 8) & 0xFF;
 800872e:	887b      	ldrh	r3, [r7, #2]
 8008730:	0a1b      	lsrs	r3, r3, #8
 8008732:	b29b      	uxth	r3, r3
 8008734:	b2db      	uxtb	r3, r3
 8008736:	73bb      	strb	r3, [r7, #14]
        header[7] = CRC8_Generate(header, 7);
 8008738:	f107 0308 	add.w	r3, r7, #8
 800873c:	2107      	movs	r1, #7
 800873e:	4618      	mov	r0, r3
 8008740:	f7fd fb7e 	bl	8005e40 <CRC8_Generate>
 8008744:	4603      	mov	r3, r0
 8008746:	73fb      	strb	r3, [r7, #15]

        uint8_t handled = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	75fb      	strb	r3, [r7, #23]
        if(!protIsSome(&xHandle->xTxFifo))
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008752:	4413      	add	r3, r2
 8008754:	4618      	mov	r0, r3
 8008756:	f000 ffae 	bl	80096b6 <protIsSome>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d12f      	bne.n	80087c0 <acker+0xdc>
        {
          taskENTER_CRITICAL();
 8008760:	f7ff fe1a 	bl	8008398 <entercritical>
          if(!xHandle->TxBusy)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d124      	bne.n	80087bc <acker+0xd8>
          {
            xHandle->TxBusy = 1;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8008778:	2201      	movs	r2, #1
 800877a:	701a      	strb	r2, [r3, #0]
            handled = 1;
 800877c:	2301      	movs	r3, #1
 800877e:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 8008780:	f7ff fe11 	bl	80083a6 <exitcritical>
            memcpy(xHandle->BufTx,header,8);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800878a:	461a      	mov	r2, r3
 800878c:	f107 0308 	add.w	r3, r7, #8
 8008790:	cb03      	ldmia	r3!, {r0, r1}
 8008792:	6010      	str	r0, [r2, #0]
 8008794:	6051      	str	r1, [r2, #4]
            CacheClean(xHandle->BufTx, 8);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800879c:	2108      	movs	r1, #8
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff fe46 	bl	8008430 <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, 8);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80087aa:	6818      	ldr	r0, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80087b2:	2208      	movs	r2, #8
 80087b4:	4619      	mov	r1, r3
 80087b6:	f005 fbc7 	bl	800df48 <HAL_UART_Transmit_DMA>
 80087ba:	e001      	b.n	80087c0 <acker+0xdc>
          }
          else taskEXIT_CRITICAL();
 80087bc:	f7ff fdf3 	bl	80083a6 <exitcritical>
        }

        if(!handled)
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d109      	bne.n	80087da <acker+0xf6>
        {
          protPushSequence(&xHandle->xTxFifo,header,8);
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80087cc:	4413      	add	r3, r2
 80087ce:	f107 0108 	add.w	r1, r7, #8
 80087d2:	2208      	movs	r2, #8
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 ff16 	bl	8009606 <protPushSequence>
        }
    }
}
 80087da:	bf00      	nop
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <xSender>:


int8_t xSender(eTransChannels xChaDest, uint8_t* xMsgPtr, uint32_t xMsgLen)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af02      	add	r7, sp, #8
 80087ea:	4603      	mov	r3, r0
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	73fb      	strb	r3, [r7, #15]
  uint32_t now = Delay_Tick;
 80087f2:	4b3d      	ldr	r3, [pc, #244]	; (80088e8 <xSender+0x104>)
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	617b      	str	r3, [r7, #20]

  sGetterHandle * handle = &xHandles[0];
 80087f8:	4b3c      	ldr	r3, [pc, #240]	; (80088ec <xSender+0x108>)
 80087fa:	613b      	str	r3, [r7, #16]
    if(handle)
      break;
  }
  */

  if(handle)
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d06c      	beq.n	80088dc <xSender+0xf8>
  {
    taskENTER_CRITICAL();
 8008802:	f7ff fdc9 	bl	8008398 <entercritical>
    if(NeedAckPacket)
 8008806:	4b3a      	ldr	r3, [pc, #232]	; (80088f0 <xSender+0x10c>)
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	b29b      	uxth	r3, r3
 800880c:	2b00      	cmp	r3, #0
 800880e:	d045      	beq.n	800889c <xSender+0xb8>
    {
      if(ReceivedAckPacket)
 8008810:	4b38      	ldr	r3, [pc, #224]	; (80088f4 <xSender+0x110>)
 8008812:	881b      	ldrh	r3, [r3, #0]
 8008814:	b29b      	uxth	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d009      	beq.n	800882e <xSender+0x4a>
      {
        NeedAckPacket = 0;
 800881a:	4b35      	ldr	r3, [pc, #212]	; (80088f0 <xSender+0x10c>)
 800881c:	2200      	movs	r2, #0
 800881e:	801a      	strh	r2, [r3, #0]
        NeededAckPacketId = 0;
 8008820:	4b35      	ldr	r3, [pc, #212]	; (80088f8 <xSender+0x114>)
 8008822:	2200      	movs	r2, #0
 8008824:	801a      	strh	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8008826:	f7ff fdbe 	bl	80083a6 <exitcritical>
        return 1;
 800882a:	2301      	movs	r3, #1
 800882c:	e057      	b.n	80088de <xSender+0xfa>
      }
      else
      {
        if(DelayDiff(now, LastNotAckedTime) > RETRIES_TIMEOUT)
 800882e:	4b33      	ldr	r3, [pc, #204]	; (80088fc <xSender+0x118>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4619      	mov	r1, r3
 8008834:	6978      	ldr	r0, [r7, #20]
 8008836:	f7fe f847 	bl	80068c8 <DelayDiff>
 800883a:	4602      	mov	r2, r0
 800883c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008840:	429a      	cmp	r2, r3
 8008842:	d928      	bls.n	8008896 <xSender+0xb2>
        {
          if(RetriesPacket > RETRIES_MAX)
 8008844:	4b2e      	ldr	r3, [pc, #184]	; (8008900 <xSender+0x11c>)
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	b29b      	uxth	r3, r3
 800884a:	2b14      	cmp	r3, #20
 800884c:	d90a      	bls.n	8008864 <xSender+0x80>
          {
            NeedAckPacket = 0;
 800884e:	4b28      	ldr	r3, [pc, #160]	; (80088f0 <xSender+0x10c>)
 8008850:	2200      	movs	r2, #0
 8008852:	801a      	strh	r2, [r3, #0]
            NeededAckPacketId = 0;
 8008854:	4b28      	ldr	r3, [pc, #160]	; (80088f8 <xSender+0x114>)
 8008856:	2200      	movs	r2, #0
 8008858:	801a      	strh	r2, [r3, #0]
            taskEXIT_CRITICAL();
 800885a:	f7ff fda4 	bl	80083a6 <exitcritical>
            return -1;
 800885e:	f04f 33ff 	mov.w	r3, #4294967295
 8008862:	e03c      	b.n	80088de <xSender+0xfa>
          }
          LastNotAckedTime = now;
 8008864:	4a25      	ldr	r2, [pc, #148]	; (80088fc <xSender+0x118>)
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	6013      	str	r3, [r2, #0]
          RetriesPacket++;
 800886a:	4b25      	ldr	r3, [pc, #148]	; (8008900 <xSender+0x11c>)
 800886c:	881b      	ldrh	r3, [r3, #0]
 800886e:	b29b      	uxth	r3, r3
 8008870:	3301      	adds	r3, #1
 8008872:	b29a      	uxth	r2, r3
 8008874:	4b22      	ldr	r3, [pc, #136]	; (8008900 <xSender+0x11c>)
 8008876:	801a      	strh	r2, [r3, #0]
          taskEXIT_CRITICAL();
 8008878:	f7ff fd95 	bl	80083a6 <exitcritical>
          packager(handle, xMsgPtr, xMsgLen, xChaDest, NeededAckPacketId);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	b29a      	uxth	r2, r3
 8008880:	4b1d      	ldr	r3, [pc, #116]	; (80088f8 <xSender+0x114>)
 8008882:	881b      	ldrh	r3, [r3, #0]
 8008884:	b29b      	uxth	r3, r3
 8008886:	7bf9      	ldrb	r1, [r7, #15]
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	460b      	mov	r3, r1
 800888c:	68b9      	ldr	r1, [r7, #8]
 800888e:	6938      	ldr	r0, [r7, #16]
 8008890:	f7ff fe28 	bl	80084e4 <packager>
 8008894:	e022      	b.n	80088dc <xSender+0xf8>
        }
        else taskEXIT_CRITICAL();
 8008896:	f7ff fd86 	bl	80083a6 <exitcritical>
 800889a:	e01f      	b.n	80088dc <xSender+0xf8>
      }
    }
    else
    {
      ReceivedAckPacket = 0;
 800889c:	4b15      	ldr	r3, [pc, #84]	; (80088f4 <xSender+0x110>)
 800889e:	2200      	movs	r2, #0
 80088a0:	801a      	strh	r2, [r3, #0]
      NeedAckPacket = 1;
 80088a2:	4b13      	ldr	r3, [pc, #76]	; (80088f0 <xSender+0x10c>)
 80088a4:	2201      	movs	r2, #1
 80088a6:	801a      	strh	r2, [r3, #0]
      LastNotAckedTime = now;
 80088a8:	4a14      	ldr	r2, [pc, #80]	; (80088fc <xSender+0x118>)
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	6013      	str	r3, [r2, #0]
      RetriesPacket = 0;
 80088ae:	4b14      	ldr	r3, [pc, #80]	; (8008900 <xSender+0x11c>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	801a      	strh	r2, [r3, #0]
      taskEXIT_CRITICAL();
 80088b4:	f7ff fd77 	bl	80083a6 <exitcritical>
      NeededAckPacketId = calculatePacketId();
 80088b8:	f7ff fdda 	bl	8008470 <calculatePacketId>
 80088bc:	4603      	mov	r3, r0
 80088be:	461a      	mov	r2, r3
 80088c0:	4b0d      	ldr	r3, [pc, #52]	; (80088f8 <xSender+0x114>)
 80088c2:	801a      	strh	r2, [r3, #0]
      packager(handle, xMsgPtr, xMsgLen, xChaDest, NeededAckPacketId);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	4b0b      	ldr	r3, [pc, #44]	; (80088f8 <xSender+0x114>)
 80088ca:	881b      	ldrh	r3, [r3, #0]
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	7bf9      	ldrb	r1, [r7, #15]
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	460b      	mov	r3, r1
 80088d4:	68b9      	ldr	r1, [r7, #8]
 80088d6:	6938      	ldr	r0, [r7, #16]
 80088d8:	f7ff fe04 	bl	80084e4 <packager>
    }
  }
  return 0;
 80088dc:	2300      	movs	r3, #0

}
 80088de:	4618      	mov	r0, r3
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	40000c00 	.word	0x40000c00
 80088ec:	20010060 	.word	0x20010060
 80088f0:	20011804 	.word	0x20011804
 80088f4:	20010054 	.word	0x20010054
 80088f8:	20011806 	.word	0x20011806
 80088fc:	20011808 	.word	0x20011808
 8008900:	20011802 	.word	0x20011802

08008904 <parser>:

static inline void parser(sProFIFO* xFifo, uint32_t xPacketId, uint32_t xDataLen, eTransChannels xChaSrc, eTransChannels xChaDest) {
 8008904:	b580      	push	{r7, lr}
 8008906:	b08e      	sub	sp, #56	; 0x38
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
 8008910:	70fb      	strb	r3, [r7, #3]

  uint32_t aCount;
  uint8_t data;
  uint8_t sCount;
  sGetterHandle * hDest = NULL;
 8008912:	2300      	movs	r3, #0
 8008914:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t header[8];
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8008916:	2300      	movs	r3, #0
 8008918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800891a:	e027      	b.n	800896c <parser+0x68>
  {
    for(int j = 0; j < sizeof(xHandles[j].xChannels) / sizeof(xHandles[j].xChannels[0]); j++)
 800891c:	2300      	movs	r3, #0
 800891e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008920:	e01b      	b.n	800895a <parser+0x56>
    {
      if(xHandles[i].xChannels[j] == xChaSrc)
 8008922:	4aa7      	ldr	r2, [pc, #668]	; (8008bc0 <parser+0x2bc>)
 8008924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008926:	f241 31c4 	movw	r1, #5060	; 0x13c4
 800892a:	fb01 f303 	mul.w	r3, r1, r3
 800892e:	441a      	add	r2, r3
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	441a      	add	r2, r3
 8008934:	f241 3384 	movw	r3, #4996	; 0x1384
 8008938:	4413      	add	r3, r2
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	78fa      	ldrb	r2, [r7, #3]
 800893e:	429a      	cmp	r2, r3
 8008940:	d108      	bne.n	8008954 <parser+0x50>
      {
        hDest = &xHandles[i];
 8008942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008944:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8008948:	fb02 f303 	mul.w	r3, r2, r3
 800894c:	4a9c      	ldr	r2, [pc, #624]	; (8008bc0 <parser+0x2bc>)
 800894e:	4413      	add	r3, r2
 8008950:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8008952:	e005      	b.n	8008960 <parser+0x5c>
    for(int j = 0; j < sizeof(xHandles[j].xChannels) / sizeof(xHandles[j].xChannels[0]); j++)
 8008954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008956:	3301      	adds	r3, #1
 8008958:	62bb      	str	r3, [r7, #40]	; 0x28
 800895a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895c:	2b03      	cmp	r3, #3
 800895e:	d9e0      	bls.n	8008922 <parser+0x1e>
      }
    }
    if(hDest)
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	2b00      	cmp	r3, #0
 8008964:	d106      	bne.n	8008974 <parser+0x70>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8008966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008968:	3301      	adds	r3, #1
 800896a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896e:	2b00      	cmp	r3, #0
 8008970:	d0d4      	beq.n	800891c <parser+0x18>
 8008972:	e000      	b.n	8008976 <parser+0x72>
      break;
 8008974:	bf00      	nop
  }


  switch (xChaDest)
 8008976:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800897a:	2b02      	cmp	r3, #2
 800897c:	d006      	beq.n	800898c <parser+0x88>
 800897e:	2b03      	cmp	r3, #3
 8008980:	f000 808f 	beq.w	8008aa2 <parser+0x19e>
 8008984:	2b01      	cmp	r3, #1
 8008986:	f000 808c 	beq.w	8008aa2 <parser+0x19e>
 800898a:	e0fb      	b.n	8008b84 <parser+0x280>
  {

      case etrACIS:
      {
          if (xDataLen)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d04f      	beq.n	8008a32 <parser+0x12e>
          {
              for(int i = 0; i < 8; i++)
 8008992:	2300      	movs	r3, #0
 8008994:	627b      	str	r3, [r7, #36]	; 0x24
 8008996:	e00a      	b.n	80089ae <parser+0xaa>
                protPull(xFifo, &header[i]);
 8008998:	f107 0214 	add.w	r2, r7, #20
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	4413      	add	r3, r2
 80089a0:	4619      	mov	r1, r3
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f000 fe4f 	bl	8009646 <protPull>
              for(int i = 0; i < 8; i++)
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	3301      	adds	r3, #1
 80089ac:	627b      	str	r3, [r7, #36]	; 0x24
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	2b07      	cmp	r3, #7
 80089b2:	ddf1      	ble.n	8008998 <parser+0x94>

              for (aCount = 0; aCount < xDataLen - 10; aCount++)
 80089b4:	2300      	movs	r3, #0
 80089b6:	637b      	str	r3, [r7, #52]	; 0x34
 80089b8:	e010      	b.n	80089dc <parser+0xd8>
              {
                protPull(xFifo, &data);
 80089ba:	f107 031d 	add.w	r3, r7, #29
 80089be:	4619      	mov	r1, r3
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f000 fe40 	bl	8009646 <protPull>
                hDest->BufParser[aCount]=data;
 80089c6:	7f79      	ldrb	r1, [r7, #29]
 80089c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80089d2:	460a      	mov	r2, r1
 80089d4:	701a      	strb	r2, [r3, #0]
              for (aCount = 0; aCount < xDataLen - 10; aCount++)
 80089d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d8:	3301      	adds	r3, #1
 80089da:	637b      	str	r3, [r7, #52]	; 0x34
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3b0a      	subs	r3, #10
 80089e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d3e9      	bcc.n	80089ba <parser+0xb6>
              }
              protPull(xFifo, &data);
 80089e6:	f107 031d 	add.w	r3, r7, #29
 80089ea:	4619      	mov	r1, r3
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f000 fe2a 	bl	8009646 <protPull>
              protPull(xFifo, &data);
 80089f2:	f107 031d 	add.w	r3, r7, #29
 80089f6:	4619      	mov	r1, r3
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 fe24 	bl	8009646 <protPull>

              hDest->BufParser[aCount]=0;
 80089fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8008a08:	2200      	movs	r2, #0
 8008a0a:	701a      	strb	r2, [r3, #0]

              if(hDest) acker(hDest,xPacketId,xChaSrc);
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d006      	beq.n	8008a20 <parser+0x11c>
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	78fa      	ldrb	r2, [r7, #3]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a1c:	f7ff fe62 	bl	80086e4 <acker>

              acis_parse_command(xChaSrc, hDest->BufParser, aCount);
 8008a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a22:	f503 5190 	add.w	r1, r3, #4608	; 0x1200
 8008a26:	78fb      	ldrb	r3, [r7, #3]
 8008a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fa fdd4 	bl	80035d8 <acis_parse_command>
              }
              taskEXIT_CRITICAL();

          }

          break;
 8008a30:	e0c2      	b.n	8008bb8 <parser+0x2b4>
              for (aCount = 0; aCount < 8; aCount++)
 8008a32:	2300      	movs	r3, #0
 8008a34:	637b      	str	r3, [r7, #52]	; 0x34
 8008a36:	e013      	b.n	8008a60 <parser+0x15c>
                for(int i = 0; i < 8; i++)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	623b      	str	r3, [r7, #32]
 8008a3c:	e00a      	b.n	8008a54 <parser+0x150>
                  protPull(xFifo, &header[i]);
 8008a3e:	f107 0214 	add.w	r2, r7, #20
 8008a42:	6a3b      	ldr	r3, [r7, #32]
 8008a44:	4413      	add	r3, r2
 8008a46:	4619      	mov	r1, r3
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f000 fdfc 	bl	8009646 <protPull>
                for(int i = 0; i < 8; i++)
 8008a4e:	6a3b      	ldr	r3, [r7, #32]
 8008a50:	3301      	adds	r3, #1
 8008a52:	623b      	str	r3, [r7, #32]
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	2b07      	cmp	r3, #7
 8008a58:	ddf1      	ble.n	8008a3e <parser+0x13a>
              for (aCount = 0; aCount < 8; aCount++)
 8008a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a62:	2b07      	cmp	r3, #7
 8008a64:	d9e8      	bls.n	8008a38 <parser+0x134>
              taskENTER_CRITICAL();
 8008a66:	f7ff fc97 	bl	8008398 <entercritical>
              if(NeedAckPacket && NeededAckPacketId != 0 && NeededAckPacketId == xPacketId && !ReceivedAckPacket)
 8008a6a:	4b56      	ldr	r3, [pc, #344]	; (8008bc4 <parser+0x2c0>)
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d013      	beq.n	8008a9c <parser+0x198>
 8008a74:	4b54      	ldr	r3, [pc, #336]	; (8008bc8 <parser+0x2c4>)
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00e      	beq.n	8008a9c <parser+0x198>
 8008a7e:	4b52      	ldr	r3, [pc, #328]	; (8008bc8 <parser+0x2c4>)
 8008a80:	881b      	ldrh	r3, [r3, #0]
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	461a      	mov	r2, r3
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d107      	bne.n	8008a9c <parser+0x198>
 8008a8c:	4b4f      	ldr	r3, [pc, #316]	; (8008bcc <parser+0x2c8>)
 8008a8e:	881b      	ldrh	r3, [r3, #0]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d102      	bne.n	8008a9c <parser+0x198>
                ReceivedAckPacket = 1;
 8008a96:	4b4d      	ldr	r3, [pc, #308]	; (8008bcc <parser+0x2c8>)
 8008a98:	2201      	movs	r2, #1
 8008a9a:	801a      	strh	r2, [r3, #0]
              taskEXIT_CRITICAL();
 8008a9c:	f7ff fc83 	bl	80083a6 <exitcritical>
          break;
 8008aa0:	e08a      	b.n	8008bb8 <parser+0x2b4>
      }

      case etrCTRL:
      case etrPC:
      {
        sCount = (xDataLen > 10) ? xDataLen : 8;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b0a      	cmp	r3, #10
 8008aa6:	d902      	bls.n	8008aae <parser+0x1aa>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	e000      	b.n	8008ab0 <parser+0x1ac>
 8008aae:	2308      	movs	r3, #8
 8008ab0:	77bb      	strb	r3, [r7, #30]

        if(hDest)
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d065      	beq.n	8008b84 <parser+0x280>
        {

          uint8_t handled = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	77fb      	strb	r3, [r7, #31]
          if(!protIsSome(&hDest->xTxFifo))
 8008abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008abe:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ac2:	4413      	add	r3, r2
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 fdf6 	bl	80096b6 <protIsSome>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d13b      	bne.n	8008b48 <parser+0x244>
          {
            taskENTER_CRITICAL();
 8008ad0:	f7ff fc62 	bl	8008398 <entercritical>
            if(!hDest->TxBusy)
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d130      	bne.n	8008b44 <parser+0x240>
            {
              hDest->TxBusy = 1;
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8008ae8:	2201      	movs	r2, #1
 8008aea:	701a      	strb	r2, [r3, #0]
              handled = 1;
 8008aec:	2301      	movs	r3, #1
 8008aee:	77fb      	strb	r3, [r7, #31]
              taskEXIT_CRITICAL();
 8008af0:	f7ff fc59 	bl	80083a6 <exitcritical>

              for (aCount = 0; aCount < sCount; aCount++)
 8008af4:	2300      	movs	r3, #0
 8008af6:	637b      	str	r3, [r7, #52]	; 0x34
 8008af8:	e00b      	b.n	8008b12 <parser+0x20e>
              {
                protPull(xFifo, &hDest->BufTx[aCount]);
 8008afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008afc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b02:	4413      	add	r3, r2
 8008b04:	4619      	mov	r1, r3
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 fd9d 	bl	8009646 <protPull>
              for (aCount = 0; aCount < sCount; aCount++)
 8008b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b0e:	3301      	adds	r3, #1
 8008b10:	637b      	str	r3, [r7, #52]	; 0x34
 8008b12:	7fbb      	ldrb	r3, [r7, #30]
 8008b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d3ef      	bcc.n	8008afa <parser+0x1f6>
              }

              CacheClean(hDest->BufTx, sCount);
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008b20:	7fba      	ldrb	r2, [r7, #30]
 8008b22:	4611      	mov	r1, r2
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7ff fc83 	bl	8008430 <CacheClean>
              HAL_UART_Transmit_DMA(hDest->xUart, hDest->BufTx, sCount);
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008b30:	6818      	ldr	r0, [r3, #0]
 8008b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b34:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008b38:	7fba      	ldrb	r2, [r7, #30]
 8008b3a:	b292      	uxth	r2, r2
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	f005 fa03 	bl	800df48 <HAL_UART_Transmit_DMA>
 8008b42:	e001      	b.n	8008b48 <parser+0x244>
            }
            else taskEXIT_CRITICAL();
 8008b44:	f7ff fc2f 	bl	80083a6 <exitcritical>
          }

          if(!handled)
 8008b48:	7ffb      	ldrb	r3, [r7, #31]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d133      	bne.n	8008bb6 <parser+0x2b2>
          {
            for (aCount = 0; aCount < sCount; aCount++)
 8008b4e:	2300      	movs	r3, #0
 8008b50:	637b      	str	r3, [r7, #52]	; 0x34
 8008b52:	e012      	b.n	8008b7a <parser+0x276>
            {
              protPull(xFifo, &data);
 8008b54:	f107 031d 	add.w	r3, r7, #29
 8008b58:	4619      	mov	r1, r3
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f000 fd73 	bl	8009646 <protPull>
              protPush(&hDest->xTxFifo, &data);
 8008b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b62:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b66:	4413      	add	r3, r2
 8008b68:	f107 021d 	add.w	r2, r7, #29
 8008b6c:	4611      	mov	r1, r2
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 fd5a 	bl	8009628 <protPush>
            for (aCount = 0; aCount < sCount; aCount++)
 8008b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b76:	3301      	adds	r3, #1
 8008b78:	637b      	str	r3, [r7, #52]	; 0x34
 8008b7a:	7fbb      	ldrb	r3, [r7, #30]
 8008b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d3e8      	bcc.n	8008b54 <parser+0x250>
            }
          }

          break;
 8008b82:	e018      	b.n	8008bb6 <parser+0x2b2>
      }
      /* no break */

      default:
      {
        sCount = (xDataLen > 10) ? xDataLen : 8;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2b0a      	cmp	r3, #10
 8008b88:	d902      	bls.n	8008b90 <parser+0x28c>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	e000      	b.n	8008b92 <parser+0x28e>
 8008b90:	2308      	movs	r3, #8
 8008b92:	77bb      	strb	r3, [r7, #30]
        for (aCount = 0; aCount < sCount; aCount++)
 8008b94:	2300      	movs	r3, #0
 8008b96:	637b      	str	r3, [r7, #52]	; 0x34
 8008b98:	e008      	b.n	8008bac <parser+0x2a8>
        {
          protPull(xFifo, &data);
 8008b9a:	f107 031d 	add.w	r3, r7, #29
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 fd50 	bl	8009646 <protPull>
        for (aCount = 0; aCount < sCount; aCount++)
 8008ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba8:	3301      	adds	r3, #1
 8008baa:	637b      	str	r3, [r7, #52]	; 0x34
 8008bac:	7fbb      	ldrb	r3, [r7, #30]
 8008bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d3f2      	bcc.n	8008b9a <parser+0x296>
        }
        break;
 8008bb4:	e000      	b.n	8008bb8 <parser+0x2b4>
          break;
 8008bb6:	bf00      	nop
      }
  }
}
 8008bb8:	bf00      	nop
 8008bba:	3738      	adds	r7, #56	; 0x38
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	20010060 	.word	0x20010060
 8008bc4:	20011804 	.word	0x20011804
 8008bc8:	20011806 	.word	0x20011806
 8008bcc:	20010054 	.word	0x20010054

08008bd0 <lookByte>:

static inline uint8_t lookByte(sProFIFO* xFifo, uint32_t xOffset) { uint8_t aByte; protLook(xFifo,xOffset,&aByte); return aByte; }
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
 8008bda:	f107 030f 	add.w	r3, r7, #15
 8008bde:	461a      	mov	r2, r3
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fd3e 	bl	8009664 <protLook>
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <countCRC8>:

static inline uint8_t countCRC8(sGetterHandle * handle) {
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
    uint32_t i; uint8_t aCrc8 = 0;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	72fb      	strb	r3, [r7, #11]
    for (i=0; i<7; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60fb      	str	r3, [r7, #12]
 8008c02:	e013      	b.n	8008c2c <countCRC8+0x3a>
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	f241 339c 	movw	r3, #5020	; 0x139c
 8008c0a:	4413      	add	r3, r2
 8008c0c:	68f9      	ldr	r1, [r7, #12]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7ff ffde 	bl	8008bd0 <lookByte>
 8008c14:	4603      	mov	r3, r0
 8008c16:	4619      	mov	r1, r3
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8008c22:	460a      	mov	r2, r1
 8008c24:	701a      	strb	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2b06      	cmp	r3, #6
 8008c30:	d9e8      	bls.n	8008c04 <countCRC8+0x12>
    aCrc8 = CRC8_Generate(handle->BufParser, 7);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8008c38:	2107      	movs	r1, #7
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fd f900 	bl	8005e40 <CRC8_Generate>
 8008c40:	4603      	mov	r3, r0
 8008c42:	72fb      	strb	r3, [r7, #11]
    return aCrc8;
 8008c44:	7afb      	ldrb	r3, [r7, #11]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <countCRC16>:

static inline int32_t countCRC16(sGetterHandle * handle, uint32_t xLen) {
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	6039      	str	r1, [r7, #0]
    uint32_t i; int32_t aCrc16 = 0;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	60bb      	str	r3, [r7, #8]
    for (i=0; i<xLen-2; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	60fb      	str	r3, [r7, #12]
 8008c60:	e013      	b.n	8008c8a <countCRC16+0x3c>
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	f241 339c 	movw	r3, #5020	; 0x139c
 8008c68:	4413      	add	r3, r2
 8008c6a:	68f9      	ldr	r1, [r7, #12]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7ff ffaf 	bl	8008bd0 <lookByte>
 8008c72:	4603      	mov	r3, r0
 8008c74:	4619      	mov	r1, r3
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8008c80:	460a      	mov	r2, r1
 8008c82:	701a      	strb	r2, [r3, #0]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	3301      	adds	r3, #1
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	3b02      	subs	r3, #2
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d3e6      	bcc.n	8008c62 <countCRC16+0x14>
    aCrc16 = CRC16_Generate(handle->BufParser, xLen-2);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	3b02      	subs	r3, #2
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	f7fd f8b1 	bl	8005e08 <CRC16_Generate>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	60bb      	str	r3, [r7, #8]
    return aCrc16;
 8008caa:	68bb      	ldr	r3, [r7, #8]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <Getter>:

static void Getter(sGetterHandle * handle)
{
 8008cb4:	b5b0      	push	{r4, r5, r7, lr}
 8008cb6:	b08c      	sub	sp, #48	; 0x30
 8008cb8:	af02      	add	r7, sp, #8
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t dataSkip = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	627b      	str	r3, [r7, #36]	; 0x24
  sProFIFO* xFifo = &handle->xRxFifo;
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	f241 339c 	movw	r3, #5020	; 0x139c
 8008cc6:	4413      	add	r3, r2
 8008cc8:	617b      	str	r3, [r7, #20]
  uint32_t * pDataReceiving = &handle->dataReceiving;
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008cd0:	4413      	add	r3, r2
 8008cd2:	613b      	str	r3, [r7, #16]
  uint32_t * pDataLen = &handle->dataLen;
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	f241 33b4 	movw	r3, #5044	; 0x13b4
 8008cda:	4413      	add	r3, r2
 8008cdc:	60fb      	str	r3, [r7, #12]
  uint16_t * pPacketId = &handle->packetId;
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008ce4:	4413      	add	r3, r2
 8008ce6:	60bb      	str	r3, [r7, #8]

  uint16_t packetId = *pPacketId;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t dataLen = *pDataLen;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	61fb      	str	r3, [r7, #28]
  uint32_t dataReceiving = *pDataReceiving;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	61bb      	str	r3, [r7, #24]
  if(dataReceiving)
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d043      	beq.n	8008d88 <Getter+0xd4>
  {
    // Check if we got a data
    if (protGetSize(xFifo) >= dataLen)
 8008d00:	6978      	ldr	r0, [r7, #20]
 8008d02:	f000 fb97 	bl	8009434 <protGetSize>
 8008d06:	4602      	mov	r2, r0
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	f200 80ad 	bhi.w	8008e6a <Getter+0x1b6>
    {
        if (countCRC16(handle,dataLen) == lookByte(xFifo,dataLen-2) + (lookByte(xFifo,dataLen-1) << 8))
 8008d10:	69f9      	ldr	r1, [r7, #28]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7ff ff9b 	bl	8008c4e <countCRC16>
 8008d18:	4604      	mov	r4, r0
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	3b02      	subs	r3, #2
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6978      	ldr	r0, [r7, #20]
 8008d22:	f7ff ff55 	bl	8008bd0 <lookByte>
 8008d26:	4603      	mov	r3, r0
 8008d28:	461d      	mov	r5, r3
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6978      	ldr	r0, [r7, #20]
 8008d32:	f7ff ff4d 	bl	8008bd0 <lookByte>
 8008d36:	4603      	mov	r3, r0
 8008d38:	021b      	lsls	r3, r3, #8
 8008d3a:	442b      	add	r3, r5
 8008d3c:	429c      	cmp	r4, r3
 8008d3e:	d11c      	bne.n	8008d7a <Getter+0xc6>
        {
            // Got True package
            parser(xFifo,packetId,dataLen,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 8008d40:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8008d42:	2102      	movs	r1, #2
 8008d44:	6978      	ldr	r0, [r7, #20]
 8008d46:	f7ff ff43 	bl	8008bd0 <lookByte>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7ff fb31 	bl	80083b4 <Msg_GetSrc>
 8008d52:	4603      	mov	r3, r0
 8008d54:	b2dd      	uxtb	r5, r3
 8008d56:	2102      	movs	r1, #2
 8008d58:	6978      	ldr	r0, [r7, #20]
 8008d5a:	f7ff ff39 	bl	8008bd0 <lookByte>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7ff fb35 	bl	80083d0 <Msg_GetDest>
 8008d66:	4603      	mov	r3, r0
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	462b      	mov	r3, r5
 8008d6e:	69fa      	ldr	r2, [r7, #28]
 8008d70:	4621      	mov	r1, r4
 8008d72:	6978      	ldr	r0, [r7, #20]
 8008d74:	f7ff fdc6 	bl	8008904 <parser>
 8008d78:	e001      	b.n	8008d7e <Getter+0xca>
        }
        else { dataSkip=1; } // Wrong CRC16, so skip 1 byte
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	627b      	str	r3, [r7, #36]	; 0x24
        dataReceiving = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	61bb      	str	r3, [r7, #24]
        dataLen = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	61fb      	str	r3, [r7, #28]
 8008d86:	e070      	b.n	8008e6a <Getter+0x1b6>
    }
  }
  else
  {
    if (protGetSize(xFifo) > 7)
 8008d88:	6978      	ldr	r0, [r7, #20]
 8008d8a:	f000 fb53 	bl	8009434 <protGetSize>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b07      	cmp	r3, #7
 8008d92:	d96a      	bls.n	8008e6a <Getter+0x1b6>
    {
      if(lookByte(xFifo,0) == 0x55 && lookByte(xFifo,1) == 0x55)
 8008d94:	2100      	movs	r1, #0
 8008d96:	6978      	ldr	r0, [r7, #20]
 8008d98:	f7ff ff1a 	bl	8008bd0 <lookByte>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b55      	cmp	r3, #85	; 0x55
 8008da0:	d161      	bne.n	8008e66 <Getter+0x1b2>
 8008da2:	2101      	movs	r1, #1
 8008da4:	6978      	ldr	r0, [r7, #20]
 8008da6:	f7ff ff13 	bl	8008bd0 <lookByte>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b55      	cmp	r3, #85	; 0x55
 8008dae:	d15a      	bne.n	8008e66 <Getter+0x1b2>
      {
        if (countCRC8(handle) == lookByte(xFifo,7))
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7ff ff1e 	bl	8008bf2 <countCRC8>
 8008db6:	4603      	mov	r3, r0
 8008db8:	461c      	mov	r4, r3
 8008dba:	2107      	movs	r1, #7
 8008dbc:	6978      	ldr	r0, [r7, #20]
 8008dbe:	f7ff ff07 	bl	8008bd0 <lookByte>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	429c      	cmp	r4, r3
 8008dc6:	d14a      	bne.n	8008e5e <Getter+0x1aa>
        {
          dataLen = lookByte(xFifo,3) + (lookByte(xFifo,4) << 8);
 8008dc8:	2103      	movs	r1, #3
 8008dca:	6978      	ldr	r0, [r7, #20]
 8008dcc:	f7ff ff00 	bl	8008bd0 <lookByte>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	461c      	mov	r4, r3
 8008dd4:	2104      	movs	r1, #4
 8008dd6:	6978      	ldr	r0, [r7, #20]
 8008dd8:	f7ff fefa 	bl	8008bd0 <lookByte>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	021b      	lsls	r3, r3, #8
 8008de0:	4423      	add	r3, r4
 8008de2:	61fb      	str	r3, [r7, #28]
          packetId = lookByte(xFifo,5) + (lookByte(xFifo,6) << 8);
 8008de4:	2105      	movs	r1, #5
 8008de6:	6978      	ldr	r0, [r7, #20]
 8008de8:	f7ff fef2 	bl	8008bd0 <lookByte>
 8008dec:	4603      	mov	r3, r0
 8008dee:	b29c      	uxth	r4, r3
 8008df0:	2106      	movs	r1, #6
 8008df2:	6978      	ldr	r0, [r7, #20]
 8008df4:	f7ff feec 	bl	8008bd0 <lookByte>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	021b      	lsls	r3, r3, #8
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	4423      	add	r3, r4
 8008e02:	847b      	strh	r3, [r7, #34]	; 0x22
          if (packetId > 0 && dataLen < MAX_PACK_LEN)
 8008e04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d026      	beq.n	8008e58 <Getter+0x1a4>
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8008e10:	d222      	bcs.n	8008e58 <Getter+0x1a4>
          {
              if (dataLen>10)
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	2b0a      	cmp	r3, #10
 8008e16:	d902      	bls.n	8008e1e <Getter+0x16a>
              {
                dataReceiving = 1;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	61bb      	str	r3, [r7, #24]
              if (dataLen>10)
 8008e1c:	e022      	b.n	8008e64 <Getter+0x1b0>
              }
              else
              {
                  // Got ShortPackage (Header Only)
                  parser(xFifo,packetId,0,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 8008e1e:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8008e20:	2102      	movs	r1, #2
 8008e22:	6978      	ldr	r0, [r7, #20]
 8008e24:	f7ff fed4 	bl	8008bd0 <lookByte>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7ff fac2 	bl	80083b4 <Msg_GetSrc>
 8008e30:	4603      	mov	r3, r0
 8008e32:	b2dd      	uxtb	r5, r3
 8008e34:	2102      	movs	r1, #2
 8008e36:	6978      	ldr	r0, [r7, #20]
 8008e38:	f7ff feca 	bl	8008bd0 <lookByte>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff fac6 	bl	80083d0 <Msg_GetDest>
 8008e44:	4603      	mov	r3, r0
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	462b      	mov	r3, r5
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	4621      	mov	r1, r4
 8008e50:	6978      	ldr	r0, [r7, #20]
 8008e52:	f7ff fd57 	bl	8008904 <parser>
              if (dataLen>10)
 8008e56:	e005      	b.n	8008e64 <Getter+0x1b0>
              }
          }
          else { dataSkip=1; } // Wrong data length or packet id, so skip 1 byte
 8008e58:	2301      	movs	r3, #1
 8008e5a:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 8008e5c:	e005      	b.n	8008e6a <Getter+0x1b6>
        }
        else { dataSkip=1; } // Wrong CRC8, so skip 1 byte
 8008e5e:	2301      	movs	r3, #1
 8008e60:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 8008e62:	e002      	b.n	8008e6a <Getter+0x1b6>
 8008e64:	e001      	b.n	8008e6a <Getter+0x1b6>
      }
      else { dataSkip=1; } // Wrong sync bytes
 8008e66:	2301      	movs	r3, #1
 8008e68:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (dataSkip)
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d003      	beq.n	8008e78 <Getter+0x1c4>
  {
    protMoveRead(xFifo,dataSkip);
 8008e70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e72:	6978      	ldr	r0, [r7, #20]
 8008e74:	f000 fc0e 	bl	8009694 <protMoveRead>
  }

  *pDataReceiving = dataReceiving;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	601a      	str	r2, [r3, #0]
  *pDataLen = dataLen;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	69fa      	ldr	r2, [r7, #28]
 8008e82:	601a      	str	r2, [r3, #0]
  *pPacketId = packetId;
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008e88:	801a      	strh	r2, [r3, #0]
}
 8008e8a:	bf00      	nop
 8008e8c:	3728      	adds	r7, #40	; 0x28
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008e94 <xDmaTxIrqHandler>:



inline void xDmaTxIrqHandler(UART_HandleTypeDef *huart)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	617b      	str	r3, [r7, #20]
 8008ea0:	e053      	b.n	8008f4a <xDmaTxIrqHandler+0xb6>
  {
    handle = &xHandles[i];
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8008ea8:	fb02 f303 	mul.w	r3, r2, r3
 8008eac:	4a2a      	ldr	r2, [pc, #168]	; (8008f58 <xDmaTxIrqHandler+0xc4>)
 8008eae:	4413      	add	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]
    uint32_t length = 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	613b      	str	r3, [r7, #16]
    if(huart == handle->xUart)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d13f      	bne.n	8008f44 <xDmaTxIrqHandler+0xb0>
    {
      if(protIsSome(&handle->xTxFifo))
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	f241 3388 	movw	r3, #5000	; 0x1388
 8008eca:	4413      	add	r3, r2
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 fbf2 	bl	80096b6 <protIsSome>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d02f      	beq.n	8008f38 <xDmaTxIrqHandler+0xa4>
      {
        handle->TxBusy = 1;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8008ede:	2201      	movs	r2, #1
 8008ee0:	701a      	strb	r2, [r3, #0]
        while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 8008ee2:	bf00      	nop
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	f241 3388 	movw	r3, #5000	; 0x1388
 8008eea:	4413      	add	r3, r2
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	1c51      	adds	r1, r2, #1
 8008ef0:	6139      	str	r1, [r7, #16]
 8008ef2:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8008ef6:	68f9      	ldr	r1, [r7, #12]
 8008ef8:	440a      	add	r2, r1
 8008efa:	4611      	mov	r1, r2
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 fba2 	bl	8009646 <protPull>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d003      	beq.n	8008f10 <xDmaTxIrqHandler+0x7c>
            && length < MAX_PACK_LEN);
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8008f0e:	d3e9      	bcc.n	8008ee4 <xDmaTxIrqHandler+0x50>
        CacheClean(handle->BufTx, length);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008f16:	6939      	ldr	r1, [r7, #16]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7ff fa89 	bl	8008430 <CacheClean>
        HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008f24:	6818      	ldr	r0, [r3, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	b292      	uxth	r2, r2
 8008f30:	4619      	mov	r1, r3
 8008f32:	f005 f809 	bl	800df48 <HAL_UART_Transmit_DMA>
      }
      else handle->TxBusy = 0;
      break;
 8008f36:	e00b      	b.n	8008f50 <xDmaTxIrqHandler+0xbc>
      else handle->TxBusy = 0;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8008f3e:	2200      	movs	r2, #0
 8008f40:	701a      	strb	r2, [r3, #0]
      break;
 8008f42:	e005      	b.n	8008f50 <xDmaTxIrqHandler+0xbc>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	3301      	adds	r3, #1
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d0a8      	beq.n	8008ea2 <xDmaTxIrqHandler+0xe>
    }
  }
}
 8008f50:	bf00      	nop
 8008f52:	3718      	adds	r7, #24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	20010060 	.word	0x20010060

08008f5c <xDmaErIrqHandler>:

inline void xDmaErIrqHandler(UART_HandleTypeDef *huart)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8008f64:	2300      	movs	r3, #0
 8008f66:	60fb      	str	r3, [r7, #12]
 8008f68:	e028      	b.n	8008fbc <xDmaErIrqHandler+0x60>
  {
    handle = &xHandles[i];
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8008f70:	fb02 f303 	mul.w	r3, r2, r3
 8008f74:	4a15      	ldr	r2, [pc, #84]	; (8008fcc <xDmaErIrqHandler+0x70>)
 8008f76:	4413      	add	r3, r2
 8008f78:	60bb      	str	r3, [r7, #8]
    if(huart == handle->xUart)
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d116      	bne.n	8008fb6 <xDmaErIrqHandler+0x5a>
    {
      HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68b9      	ldr	r1, [r7, #8]
 8008f92:	f44f 7240 	mov.w	r2, #768	; 0x300
 8008f96:	4618      	mov	r0, r3
 8008f98:	f005 f852 	bl	800e040 <HAL_UART_Receive_DMA>
      handle->RxPointer = handle->xUart->RxXferSize;
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008fa8:	4619      	mov	r1, r3
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8008fb0:	4413      	add	r3, r2
 8008fb2:	6019      	str	r1, [r3, #0]
      break;
 8008fb4:	e005      	b.n	8008fc2 <xDmaErIrqHandler+0x66>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	60fb      	str	r3, [r7, #12]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d0d3      	beq.n	8008f6a <xDmaErIrqHandler+0xe>
    }
  }
}
 8008fc2:	bf00      	nop
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	20010060 	.word	0x20010060

08008fd0 <xFifosInit>:


void xFifosInit(void)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	607b      	str	r3, [r7, #4]
 8008fda:	e040      	b.n	800905e <xFifosInit+0x8e>
  {
    protInit(&xHandles[i].xTxFifo,xHandles[i].xTxFifoBuf,1,MAX_PACK_LEN*4);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8008fe2:	fb02 f203 	mul.w	r2, r2, r3
 8008fe6:	f241 3388 	movw	r3, #5000	; 0x1388
 8008fea:	4413      	add	r3, r2
 8008fec:	4a1f      	ldr	r2, [pc, #124]	; (800906c <xFifosInit+0x9c>)
 8008fee:	1898      	adds	r0, r3, r2
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8008ff6:	fb02 f303 	mul.w	r3, r2, r3
 8008ffa:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8008ffe:	4a1b      	ldr	r2, [pc, #108]	; (800906c <xFifosInit+0x9c>)
 8009000:	1899      	adds	r1, r3, r2
 8009002:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009006:	2201      	movs	r2, #1
 8009008:	f000 fa24 	bl	8009454 <protInit>
    protInit(&xHandles[i].xRxFifo,xHandles[i].xRxFifoBuf,1,MAX_PACK_LEN*4);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8009012:	fb02 f203 	mul.w	r2, r2, r3
 8009016:	f241 3398 	movw	r3, #5016	; 0x1398
 800901a:	4413      	add	r3, r2
 800901c:	4a13      	ldr	r2, [pc, #76]	; (800906c <xFifosInit+0x9c>)
 800901e:	4413      	add	r3, r2
 8009020:	1d18      	adds	r0, r3, #4
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8009028:	fb02 f303 	mul.w	r3, r2, r3
 800902c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8009030:	4a0e      	ldr	r2, [pc, #56]	; (800906c <xFifosInit+0x9c>)
 8009032:	1899      	adds	r1, r3, r2
 8009034:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009038:	2201      	movs	r2, #1
 800903a:	f000 fa0b 	bl	8009454 <protInit>
    xHandles[i].RxPointer = 0xFFFFFFFF;
 800903e:	4a0b      	ldr	r2, [pc, #44]	; (800906c <xFifosInit+0x9c>)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f241 31c4 	movw	r1, #5060	; 0x13c4
 8009046:	fb01 f303 	mul.w	r3, r1, r3
 800904a:	441a      	add	r2, r3
 800904c:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8009050:	4413      	add	r3, r2
 8009052:	f04f 32ff 	mov.w	r2, #4294967295
 8009056:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3301      	adds	r3, #1
 800905c:	607b      	str	r3, [r7, #4]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d0bb      	beq.n	8008fdc <xFifosInit+0xc>
  }
}
 8009064:	bf00      	nop
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	20010060 	.word	0x20010060

08009070 <xGetterInit>:

void xGetterInit(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
  sGetterHandle * handle;

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8009076:	2300      	movs	r3, #0
 8009078:	607b      	str	r3, [r7, #4]
 800907a:	e026      	b.n	80090ca <xGetterInit+0x5a>
  {
    handle = &xHandles[i];
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8009082:	fb02 f303 	mul.w	r3, r2, r3
 8009086:	4a14      	ldr	r2, [pc, #80]	; (80090d8 <xGetterInit+0x68>)
 8009088:	4413      	add	r3, r2
 800908a:	603b      	str	r3, [r7, #0]
    CacheClean(handle->BufRx, UART_DMA_BUFFER);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8009092:	4618      	mov	r0, r3
 8009094:	f7ff f9cc 	bl	8008430 <CacheClean>
    HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80090a6:	4618      	mov	r0, r3
 80090a8:	f004 ffca 	bl	800e040 <HAL_UART_Receive_DMA>
    handle->RxPointer = handle->xUart->RxXferSize;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80090b8:	4619      	mov	r1, r3
 80090ba:	683a      	ldr	r2, [r7, #0]
 80090bc:	f241 33bc 	movw	r3, #5052	; 0x13bc
 80090c0:	4413      	add	r3, r2
 80090c2:	6019      	str	r1, [r3, #0]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	3301      	adds	r3, #1
 80090c8:	607b      	str	r3, [r7, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d0d5      	beq.n	800907c <xGetterInit+0xc>
  }
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	20010060 	.word	0x20010060

080090dc <xGetterLoop>:

void xGetterLoop(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b0e6      	sub	sp, #408	; 0x198
 80090e0:	af00      	add	r7, sp, #0
  uint32_t dmacnt;
  uint32_t length;
  uint32_t dmasize;
  uint8_t tempbuffer[MAX_PACK_LEN];

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 80090e2:	2300      	movs	r3, #0
 80090e4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80090e8:	e11f      	b.n	800932a <xGetterLoop+0x24e>
  {
    handle = &xHandles[i];
 80090ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80090ee:	f241 32c4 	movw	r2, #5060	; 0x13c4
 80090f2:	fb02 f303 	mul.w	r3, r2, r3
 80090f6:	4a92      	ldr	r2, [pc, #584]	; (8009340 <xGetterLoop+0x264>)
 80090f8:	4413      	add	r3, r2
 80090fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    do
    {
      dmacnt = handle->xUart->hdmarx->Instance->NDTR;
 80090fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009102:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
      dmasize = handle->xUart->RxXferSize;
 8009112:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009116:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009120:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
      if(handle->RxPointer == 0xFFFFFFFF) handle->RxPointer = dmacnt;
 8009124:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8009128:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800912c:	4413      	add	r3, r2
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009134:	d107      	bne.n	8009146 <xGetterLoop+0x6a>
 8009136:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800913a:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800913e:	4413      	add	r3, r2
 8009140:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8009144:	601a      	str	r2, [r3, #0]
      if(dmacnt > handle->RxPointer)
 8009146:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800914a:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800914e:	4413      	add	r3, r2
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8009156:	429a      	cmp	r2, r3
 8009158:	d90e      	bls.n	8009178 <xGetterLoop+0x9c>
        length = (dmasize-dmacnt)+handle->RxPointer;
 800915a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800915e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8009162:	1ad2      	subs	r2, r2, r3
 8009164:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 8009168:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800916c:	440b      	add	r3, r1
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4413      	add	r3, r2
 8009172:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8009176:	e00a      	b.n	800918e <xGetterLoop+0xb2>
      else length = handle->RxPointer-dmacnt;
 8009178:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800917c:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8009180:	4413      	add	r3, r2
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

      if(length > MAX_PACK_LEN) length = MAX_PACK_LEN;
 800918e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8009192:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8009196:	d903      	bls.n	80091a0 <xGetterLoop+0xc4>
 8009198:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800919c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
      if(length > 0)
 80091a0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d050      	beq.n	800924a <xGetterLoop+0x16e>
      {
        CacheInvalidate(handle->BufRx, UART_DMA_BUFFER);
 80091a8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80091ac:	f44f 7140 	mov.w	r1, #768	; 0x300
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff f91d 	bl	80083f0 <CacheInvalidate>
        for(i=0;i<length;i++)
 80091b6:	2300      	movs	r3, #0
 80091b8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80091bc:	e034      	b.n	8009228 <xGetterLoop+0x14c>
        {
          tempbuffer[i] = handle->BufRx[dmasize-handle->RxPointer];
 80091be:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80091c2:	f241 33bc 	movw	r3, #5052	; 0x13bc
 80091c6:	4413      	add	r3, r2
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80091d4:	5cd1      	ldrb	r1, [r2, r3]
 80091d6:	1d3a      	adds	r2, r7, #4
 80091d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80091dc:	4413      	add	r3, r2
 80091de:	460a      	mov	r2, r1
 80091e0:	701a      	strb	r2, [r3, #0]
          if(handle->RxPointer == 1) handle->RxPointer = dmasize;
 80091e2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80091e6:	f241 33bc 	movw	r3, #5052	; 0x13bc
 80091ea:	4413      	add	r3, r2
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d108      	bne.n	8009204 <xGetterLoop+0x128>
 80091f2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80091f6:	f241 33bc 	movw	r3, #5052	; 0x13bc
 80091fa:	4413      	add	r3, r2
 80091fc:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	e00c      	b.n	800921e <xGetterLoop+0x142>
          else handle->RxPointer--;
 8009204:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8009208:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800920c:	4413      	add	r3, r2
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	1e5a      	subs	r2, r3, #1
 8009212:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 8009216:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800921a:	440b      	add	r3, r1
 800921c:	601a      	str	r2, [r3, #0]
        for(i=0;i<length;i++)
 800921e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8009222:	3301      	adds	r3, #1
 8009224:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8009228:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800922c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8009230:	429a      	cmp	r2, r3
 8009232:	d8c4      	bhi.n	80091be <xGetterLoop+0xe2>
        }

        protPushSequence(&handle->xRxFifo, tempbuffer, length);
 8009234:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8009238:	f241 339c 	movw	r3, #5020	; 0x139c
 800923c:	4413      	add	r3, r2
 800923e:	1d39      	adds	r1, r7, #4
 8009240:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8009244:	4618      	mov	r0, r3
 8009246:	f000 f9de 	bl	8009606 <protPushSequence>
      }
    } while(length > 0);
 800924a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800924e:	2b00      	cmp	r3, #0
 8009250:	f47f af55 	bne.w	80090fe <xGetterLoop+0x22>

    if(protIsSome(&handle->xRxFifo))
 8009254:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8009258:	f241 339c 	movw	r3, #5020	; 0x139c
 800925c:	4413      	add	r3, r2
 800925e:	4618      	mov	r0, r3
 8009260:	f000 fa29 	bl	80096b6 <protIsSome>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <xGetterLoop+0x196>
    {
      Getter(handle);
 800926a:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 800926e:	f7ff fd21 	bl	8008cb4 <Getter>
    }

    taskENTER_CRITICAL();
 8009272:	f7ff f891 	bl	8008398 <entercritical>
    if(!handle->TxBusy && protIsSome(&handle->xTxFifo))
 8009276:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800927a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d14a      	bne.n	800931c <xGetterLoop+0x240>
 8009286:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800928a:	f241 3388 	movw	r3, #5000	; 0x1388
 800928e:	4413      	add	r3, r2
 8009290:	4618      	mov	r0, r3
 8009292:	f000 fa10 	bl	80096b6 <protIsSome>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d03f      	beq.n	800931c <xGetterLoop+0x240>
    {
      length = 0;
 800929c:	2300      	movs	r3, #0
 800929e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
      handle->TxBusy = 1;
 80092a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80092a6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80092aa:	2201      	movs	r2, #1
 80092ac:	701a      	strb	r2, [r3, #0]
      taskEXIT_CRITICAL();
 80092ae:	f7ff f87a 	bl	80083a6 <exitcritical>
      while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 80092b2:	bf00      	nop
 80092b4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80092b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80092bc:	4413      	add	r3, r2
 80092be:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80092c2:	1c51      	adds	r1, r2, #1
 80092c4:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 80092c8:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80092cc:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 80092d0:	440a      	add	r2, r1
 80092d2:	4611      	mov	r1, r2
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 f9b6 	bl	8009646 <protPull>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d004      	beq.n	80092ea <xGetterLoop+0x20e>
          && length < MAX_PACK_LEN);
 80092e0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80092e4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80092e8:	d3e4      	bcc.n	80092b4 <xGetterLoop+0x1d8>
      CacheClean(handle->BufTx, length);
 80092ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80092ee:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80092f2:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff f89a 	bl	8008430 <CacheClean>
      HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 80092fc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009300:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009304:	6818      	ldr	r0, [r3, #0]
 8009306:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800930a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800930e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8009312:	b292      	uxth	r2, r2
 8009314:	4619      	mov	r1, r3
 8009316:	f004 fe17 	bl	800df48 <HAL_UART_Transmit_DMA>
 800931a:	e001      	b.n	8009320 <xGetterLoop+0x244>
    }
    else taskEXIT_CRITICAL();
 800931c:	f7ff f843 	bl	80083a6 <exitcritical>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8009320:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8009324:	3301      	adds	r3, #1
 8009326:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800932a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800932e:	2b00      	cmp	r3, #0
 8009330:	f43f aedb 	beq.w	80090ea <xGetterLoop+0xe>
  }
}
 8009334:	bf00      	nop
 8009336:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20010060 	.word	0x20010060

08009344 <infoGetSize>:

#include "xProFIFO.h"
#include <string.h>


static inline int infoGetSize(sProInfo* info) {
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
    if(info->write >= info->read) return (info->write - info->read);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689a      	ldr	r2, [r3, #8]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	429a      	cmp	r2, r3
 8009356:	d305      	bcc.n	8009364 <infoGetSize+0x20>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	689a      	ldr	r2, [r3, #8]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	e007      	b.n	8009374 <infoGetSize+0x30>
    else return (info->capacity - info->read + info->write);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	1ad2      	subs	r2, r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	4413      	add	r3, r2
}
 8009374:	4618      	mov	r0, r3
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <infoGetAvail>:

static uint32_t infoGetAvail(sProInfo* info) { return info->capacity-infoGetSize(info); }
 8009380:	b590      	push	{r4, r7, lr}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681c      	ldr	r4, [r3, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7ff ffd9 	bl	8009344 <infoGetSize>
 8009392:	4603      	mov	r3, r0
 8009394:	1ae3      	subs	r3, r4, r3
 8009396:	4618      	mov	r0, r3
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	bd90      	pop	{r4, r7, pc}

0800939e <infoCorrect>:
static inline uint32_t infoCorrect(sProInfo* info, uint32_t* param, uint32_t move) { return ((*param + move) % info->capacity); }
 800939e:	b480      	push	{r7}
 80093a0:	b085      	sub	sp, #20
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	60f8      	str	r0, [r7, #12]
 80093a6:	60b9      	str	r1, [r7, #8]
 80093a8:	607a      	str	r2, [r7, #4]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4413      	add	r3, r2
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	6812      	ldr	r2, [r2, #0]
 80093b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80093ba:	fb02 f201 	mul.w	r2, r2, r1
 80093be:	1a9b      	subs	r3, r3, r2
 80093c0:	4618      	mov	r0, r3
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <infoMovePar>:
static inline void infoMovePar(sProInfo* info, uint32_t* param, uint32_t move) { *param = (uint32_t)infoCorrect(info,param,move); }
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	68b9      	ldr	r1, [r7, #8]
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f7ff ffde 	bl	800939e <infoCorrect>
 80093e2:	4602      	mov	r2, r0
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	601a      	str	r2, [r3, #0]
 80093e8:	bf00      	nop
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <infoIsSome>:
static uint8_t infoIsSome(sProInfo* info) { return info->read != info->write; }
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	429a      	cmp	r2, r3
 8009402:	bf14      	ite	ne
 8009404:	2301      	movne	r3, #1
 8009406:	2300      	moveq	r3, #0
 8009408:	b2db      	uxtb	r3, r3
 800940a:	4618      	mov	r0, r3
 800940c:	370c      	adds	r7, #12
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <protMovePar>:

static void protMovePar(sProInfo* info, uint32_t* param, uint32_t move) {
 8009416:	b580      	push	{r7, lr}
 8009418:	b084      	sub	sp, #16
 800941a:	af00      	add	r7, sp, #0
 800941c:	60f8      	str	r0, [r7, #12]
 800941e:	60b9      	str	r1, [r7, #8]
 8009420:	607a      	str	r2, [r7, #4]
        infoMovePar(info,param,move);
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	68b9      	ldr	r1, [r7, #8]
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f7ff ffd0 	bl	80093cc <infoMovePar>
}
 800942c:	bf00      	nop
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <protGetSize>:


uint32_t protGetSize(sProFIFO* fifo) {
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
    uint32_t value;
        value = infoGetSize(&fifo->info);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3304      	adds	r3, #4
 8009440:	4618      	mov	r0, r3
 8009442:	f7ff ff7f 	bl	8009344 <infoGetSize>
 8009446:	4603      	mov	r3, r0
 8009448:	60fb      	str	r3, [r7, #12]
    return value;
 800944a:	68fb      	ldr	r3, [r7, #12]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <protInit>:
    uint32_t value;
        value = infoGetAvail(&fifo->info);
    return value;
}

void protInit(sProFIFO* fifo, void* xBuffer, uint8_t xElemSize, int xCapacity) {
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	603b      	str	r3, [r7, #0]
 8009460:	4613      	mov	r3, r2
 8009462:	71fb      	strb	r3, [r7, #7]
    fifo->buffer = xBuffer;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	601a      	str	r2, [r3, #0]
    fifo->info.capacity = xCapacity;
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	605a      	str	r2, [r3, #4]
    fifo->info.read = 0;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	609a      	str	r2, [r3, #8]
    fifo->info.write = 0;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	60da      	str	r2, [r3, #12]
    fifo->info.overflow = 0;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	745a      	strb	r2, [r3, #17]
    fifo->info.elemsize = xElemSize;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	79fa      	ldrb	r2, [r7, #7]
 8009486:	741a      	strb	r2, [r3, #16]
}
 8009488:	bf00      	nop
 800948a:	3714      	adds	r7, #20
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <interPut>:
        fifo->info.read = 0;
        fifo->info.write = 0;
        fifo->info.overflow = 0;
}

static inline void interPut(sProFIFO* fifo, void* xData) {
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)((uint32_t)fifo->buffer + fifo->info.write * fifo->info.elemsize), (uint8_t*)xData, fifo->info.elemsize);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4619      	mov	r1, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	7c12      	ldrb	r2, [r2, #16]
 80094ac:	fb02 f303 	mul.w	r3, r2, r3
 80094b0:	440b      	add	r3, r1
 80094b2:	4618      	mov	r0, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	7c1b      	ldrb	r3, [r3, #16]
 80094b8:	461a      	mov	r2, r3
 80094ba:	6839      	ldr	r1, [r7, #0]
 80094bc:	f005 fcc4 	bl	800ee48 <memcpy>
}
 80094c0:	bf00      	nop
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <interGet>:

static inline void interGet(sProFIFO* fifo, void* xData) {
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + fifo->info.read * fifo->info.elemsize), fifo->info.elemsize);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4619      	mov	r1, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	7c12      	ldrb	r2, [r2, #16]
 80094e0:	fb02 f303 	mul.w	r3, r2, r3
 80094e4:	440b      	add	r3, r1
 80094e6:	4619      	mov	r1, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	7c1b      	ldrb	r3, [r3, #16]
 80094ec:	461a      	mov	r2, r3
 80094ee:	6838      	ldr	r0, [r7, #0]
 80094f0:	f005 fcaa 	bl	800ee48 <memcpy>
}
 80094f4:	bf00      	nop
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <interLook>:

static inline void interLook(sProFIFO* fifo, uint32_t xIndex, void* xData) {
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + xIndex * fifo->info.elemsize), fifo->info.elemsize);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	461a      	mov	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	7c1b      	ldrb	r3, [r3, #16]
 8009512:	4619      	mov	r1, r3
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	fb03 f301 	mul.w	r3, r3, r1
 800951a:	4413      	add	r3, r2
 800951c:	4619      	mov	r1, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	7c1b      	ldrb	r3, [r3, #16]
 8009522:	461a      	mov	r2, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f005 fc8f 	bl	800ee48 <memcpy>
}
 800952a:	bf00      	nop
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <interPush>:

static inline uint32_t interPush(sProFIFO* fifo, void* xData) {
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    if ((retval = infoGetAvail(&fifo->info))) {
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	3304      	adds	r3, #4
 8009540:	4618      	mov	r0, r3
 8009542:	f7ff ff1d 	bl	8009380 <infoGetAvail>
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00c      	beq.n	8009568 <interPush+0x36>
        interPut(fifo,xData);
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7ff ff9f 	bl	8009494 <interPut>
        infoMovePar(&fifo->info, &fifo->info.write, 1);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	1d18      	adds	r0, r3, #4
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	330c      	adds	r3, #12
 800955e:	2201      	movs	r2, #1
 8009560:	4619      	mov	r1, r3
 8009562:	f7ff ff33 	bl	80093cc <infoMovePar>
 8009566:	e002      	b.n	800956e <interPush+0x3c>
    } else { fifo->info.overflow=1; }
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	745a      	strb	r2, [r3, #17]
    return retval;
 800956e:	68fb      	ldr	r3, [r7, #12]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <interPull>:

static inline uint32_t interPull(sProFIFO* fifo, void* xDest) {
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    if ((retval = infoIsSome(&fifo->info))) {
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	3304      	adds	r3, #4
 8009586:	4618      	mov	r0, r3
 8009588:	f7ff ff32 	bl	80093f0 <infoIsSome>
 800958c:	4603      	mov	r3, r0
 800958e:	60fb      	str	r3, [r7, #12]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00b      	beq.n	80095ae <interPull+0x36>
        interGet(fifo,xDest);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7ff ff95 	bl	80094c8 <interGet>
        infoMovePar(&fifo->info, &fifo->info.read, 1);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	1d18      	adds	r0, r3, #4
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	3308      	adds	r3, #8
 80095a6:	2201      	movs	r2, #1
 80095a8:	4619      	mov	r1, r3
 80095aa:	f7ff ff0f 	bl	80093cc <infoMovePar>
    }
    return retval;
 80095ae:	68fb      	ldr	r3, [r7, #12]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <interPushSequence>:

static inline uint32_t interPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
    uint32_t retval; uint32_t i;
    for (i=0; i<xCount; i++) {
 80095c4:	2300      	movs	r3, #0
 80095c6:	613b      	str	r3, [r7, #16]
 80095c8:	e012      	b.n	80095f0 <interPushSequence+0x38>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	7c1b      	ldrb	r3, [r3, #16]
 80095ce:	461a      	mov	r2, r3
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	fb03 f202 	mul.w	r2, r3, r2
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	4413      	add	r3, r2
 80095da:	4619      	mov	r1, r3
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f7ff ffa8 	bl	8009532 <interPush>
 80095e2:	6178      	str	r0, [r7, #20]
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d007      	beq.n	80095fa <interPushSequence+0x42>
    for (i=0; i<xCount; i++) {
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	3301      	adds	r3, #1
 80095ee:	613b      	str	r3, [r7, #16]
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d3e8      	bcc.n	80095ca <interPushSequence+0x12>
 80095f8:	e000      	b.n	80095fc <interPushSequence+0x44>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 80095fa:	bf00      	nop
    }
    return retval;
 80095fc:	697b      	ldr	r3, [r7, #20]
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3718      	adds	r7, #24
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <protPushSequence>:

uint32_t protPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 8009606:	b580      	push	{r7, lr}
 8009608:	b086      	sub	sp, #24
 800960a:	af00      	add	r7, sp, #0
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	607a      	str	r2, [r7, #4]
    uint32_t retval;
        retval=interPushSequence(fifo,xData,xCount);
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	68b9      	ldr	r1, [r7, #8]
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f7ff ffce 	bl	80095b8 <interPushSequence>
 800961c:	6178      	str	r0, [r7, #20]
    return retval;
 800961e:	697b      	ldr	r3, [r7, #20]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3718      	adds	r7, #24
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <protPush>:

uint32_t protPush(sProFIFO* fifo, void* xData) {
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
    uint32_t retval;
        retval=interPush(fifo,xData);
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7ff ff7c 	bl	8009532 <interPush>
 800963a:	60f8      	str	r0, [r7, #12]
    return retval;
 800963c:	68fb      	ldr	r3, [r7, #12]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <protPull>:

uint32_t protPull(sProFIFO* fifo, void* xDest) {
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	6039      	str	r1, [r7, #0]
    uint32_t retval;
        retval=interPull(fifo,xDest);
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7ff ff90 	bl	8009578 <interPull>
 8009658:	60f8      	str	r0, [r7, #12]
    return retval;
 800965a:	68fb      	ldr	r3, [r7, #12]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <protLook>:

void protLook(sProFIFO* fifo, uint32_t xOffset, void* xDest) {
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
        uint32_t aIndex = infoCorrect(&fifo->info, &fifo->info.read, xOffset);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	1d18      	adds	r0, r3, #4
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	3308      	adds	r3, #8
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	4619      	mov	r1, r3
 800967c:	f7ff fe8f 	bl	800939e <infoCorrect>
 8009680:	6178      	str	r0, [r7, #20]
        interLook(fifo,aIndex,xDest);
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	6979      	ldr	r1, [r7, #20]
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f7ff ff38 	bl	80094fc <interLook>
}
 800968c:	bf00      	nop
 800968e:	3718      	adds	r7, #24
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <protMoveRead>:

void protMoveWrite(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.write, amove); }
void protMoveRead(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.read, amove); }
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	1d18      	adds	r0, r3, #4
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3308      	adds	r3, #8
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	4619      	mov	r1, r3
 80096aa:	f7ff feb4 	bl	8009416 <protMovePar>
 80096ae:	bf00      	nop
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <protIsSome>:

uint8_t protIsSome(sProFIFO* fifo) { return fifo->info.read != fifo->info.write; }
 80096b6:	b480      	push	{r7}
 80096b8:	b083      	sub	sp, #12
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	689a      	ldr	r2, [r3, #8]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	bf14      	ite	ne
 80096ca:	2301      	movne	r3, #1
 80096cc:	2300      	moveq	r3, #0
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	4618      	mov	r0, r3
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80096dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009714 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80096e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80096e2:	e003      	b.n	80096ec <LoopCopyDataInit>

080096e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80096e4:	4b0c      	ldr	r3, [pc, #48]	; (8009718 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80096e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80096e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80096ea:	3104      	adds	r1, #4

080096ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80096ec:	480b      	ldr	r0, [pc, #44]	; (800971c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80096ee:	4b0c      	ldr	r3, [pc, #48]	; (8009720 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80096f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80096f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80096f4:	d3f6      	bcc.n	80096e4 <CopyDataInit>
  ldr  r2, =_sbss
 80096f6:	4a0b      	ldr	r2, [pc, #44]	; (8009724 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80096f8:	e002      	b.n	8009700 <LoopFillZerobss>

080096fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80096fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80096fc:	f842 3b04 	str.w	r3, [r2], #4

08009700 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009700:	4b09      	ldr	r3, [pc, #36]	; (8009728 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009702:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009704:	d3f9      	bcc.n	80096fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009706:	f7fe fddd 	bl	80082c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800970a:	f005 fb79 	bl	800ee00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800970e:	f7fd fa0f 	bl	8006b30 <main>
  bx  lr    
 8009712:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009714:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8009718:	0800eed8 	.word	0x0800eed8
  ldr  r0, =_sdata
 800971c:	20010000 	.word	0x20010000
  ldr  r3, =_edata
 8009720:	20011448 	.word	0x20011448
  ldr  r2, =_sbss
 8009724:	20011460 	.word	0x20011460
  ldr  r3, = _ebss
 8009728:	200164a0 	.word	0x200164a0

0800972c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800972c:	e7fe      	b.n	800972c <ADC_IRQHandler>
	...

08009730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8009734:	4b08      	ldr	r3, [pc, #32]	; (8009758 <HAL_Init+0x28>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a07      	ldr	r2, [pc, #28]	; (8009758 <HAL_Init+0x28>)
 800973a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800973e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009740:	2003      	movs	r0, #3
 8009742:	f000 fbb3 	bl	8009eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009746:	2000      	movs	r0, #0
 8009748:	f000 f808 	bl	800975c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800974c:	f7fe f9b6 	bl	8007abc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	40023c00 	.word	0x40023c00

0800975c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009764:	4b12      	ldr	r3, [pc, #72]	; (80097b0 <HAL_InitTick+0x54>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	4b12      	ldr	r3, [pc, #72]	; (80097b4 <HAL_InitTick+0x58>)
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	4619      	mov	r1, r3
 800976e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009772:	fbb3 f3f1 	udiv	r3, r3, r1
 8009776:	fbb2 f3f3 	udiv	r3, r2, r3
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fbcb 	bl	8009f16 <HAL_SYSTICK_Config>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	e00e      	b.n	80097a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2b0f      	cmp	r3, #15
 800978e:	d80a      	bhi.n	80097a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009790:	2200      	movs	r2, #0
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	f04f 30ff 	mov.w	r0, #4294967295
 8009798:	f000 fb93 	bl	8009ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800979c:	4a06      	ldr	r2, [pc, #24]	; (80097b8 <HAL_InitTick+0x5c>)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	e000      	b.n	80097a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	20010050 	.word	0x20010050
 80097b4:	20011444 	.word	0x20011444
 80097b8:	20011440 	.word	0x20011440

080097bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80097bc:	b480      	push	{r7}
 80097be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80097c0:	4b06      	ldr	r3, [pc, #24]	; (80097dc <HAL_IncTick+0x20>)
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	461a      	mov	r2, r3
 80097c6:	4b06      	ldr	r3, [pc, #24]	; (80097e0 <HAL_IncTick+0x24>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4413      	add	r3, r2
 80097cc:	4a04      	ldr	r2, [pc, #16]	; (80097e0 <HAL_IncTick+0x24>)
 80097ce:	6013      	str	r3, [r2, #0]
}
 80097d0:	bf00      	nop
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	20011444 	.word	0x20011444
 80097e0:	2001649c 	.word	0x2001649c

080097e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80097e4:	b480      	push	{r7}
 80097e6:	af00      	add	r7, sp, #0
  return uwTick;
 80097e8:	4b03      	ldr	r3, [pc, #12]	; (80097f8 <HAL_GetTick+0x14>)
 80097ea:	681b      	ldr	r3, [r3, #0]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	2001649c 	.word	0x2001649c

080097fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d101      	bne.n	8009812 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e031      	b.n	8009876 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009816:	2b00      	cmp	r3, #0
 8009818:	d109      	bne.n	800982e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7fe f972 	bl	8007b04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009832:	f003 0310 	and.w	r3, r3, #16
 8009836:	2b00      	cmp	r3, #0
 8009838:	d116      	bne.n	8009868 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800983e:	4b10      	ldr	r3, [pc, #64]	; (8009880 <HAL_ADC_Init+0x84>)
 8009840:	4013      	ands	r3, r2
 8009842:	f043 0202 	orr.w	r2, r3, #2
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f964 	bl	8009b18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985a:	f023 0303 	bic.w	r3, r3, #3
 800985e:	f043 0201 	orr.w	r2, r3, #1
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	641a      	str	r2, [r3, #64]	; 0x40
 8009866:	e001      	b.n	800986c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009874:	7bfb      	ldrb	r3, [r7, #15]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	ffffeefd 	.word	0xffffeefd

08009884 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800988e:	2300      	movs	r3, #0
 8009890:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009898:	2b01      	cmp	r3, #1
 800989a:	d101      	bne.n	80098a0 <HAL_ADC_ConfigChannel+0x1c>
 800989c:	2302      	movs	r3, #2
 800989e:	e12a      	b.n	8009af6 <HAL_ADC_ConfigChannel+0x272>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b09      	cmp	r3, #9
 80098ae:	d93a      	bls.n	8009926 <HAL_ADC_ConfigChannel+0xa2>
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098b8:	d035      	beq.n	8009926 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68d9      	ldr	r1, [r3, #12]
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	461a      	mov	r2, r3
 80098c8:	4613      	mov	r3, r2
 80098ca:	005b      	lsls	r3, r3, #1
 80098cc:	4413      	add	r3, r2
 80098ce:	3b1e      	subs	r3, #30
 80098d0:	2207      	movs	r2, #7
 80098d2:	fa02 f303 	lsl.w	r3, r2, r3
 80098d6:	43da      	mvns	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	400a      	ands	r2, r1
 80098de:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a87      	ldr	r2, [pc, #540]	; (8009b04 <HAL_ADC_ConfigChannel+0x280>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d10a      	bne.n	8009900 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68d9      	ldr	r1, [r3, #12]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	061a      	lsls	r2, r3, #24
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	430a      	orrs	r2, r1
 80098fc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80098fe:	e035      	b.n	800996c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68d9      	ldr	r1, [r3, #12]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	689a      	ldr	r2, [r3, #8]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	b29b      	uxth	r3, r3
 8009910:	4618      	mov	r0, r3
 8009912:	4603      	mov	r3, r0
 8009914:	005b      	lsls	r3, r3, #1
 8009916:	4403      	add	r3, r0
 8009918:	3b1e      	subs	r3, #30
 800991a:	409a      	lsls	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	430a      	orrs	r2, r1
 8009922:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009924:	e022      	b.n	800996c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	6919      	ldr	r1, [r3, #16]
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	b29b      	uxth	r3, r3
 8009932:	461a      	mov	r2, r3
 8009934:	4613      	mov	r3, r2
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	4413      	add	r3, r2
 800993a:	2207      	movs	r2, #7
 800993c:	fa02 f303 	lsl.w	r3, r2, r3
 8009940:	43da      	mvns	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	400a      	ands	r2, r1
 8009948:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6919      	ldr	r1, [r3, #16]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	689a      	ldr	r2, [r3, #8]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	b29b      	uxth	r3, r3
 800995a:	4618      	mov	r0, r3
 800995c:	4603      	mov	r3, r0
 800995e:	005b      	lsls	r3, r3, #1
 8009960:	4403      	add	r3, r0
 8009962:	409a      	lsls	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	430a      	orrs	r2, r1
 800996a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	2b06      	cmp	r3, #6
 8009972:	d824      	bhi.n	80099be <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	4613      	mov	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	3b05      	subs	r3, #5
 8009986:	221f      	movs	r2, #31
 8009988:	fa02 f303 	lsl.w	r3, r2, r3
 800998c:	43da      	mvns	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	400a      	ands	r2, r1
 8009994:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	4618      	mov	r0, r3
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	4613      	mov	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4413      	add	r3, r2
 80099ae:	3b05      	subs	r3, #5
 80099b0:	fa00 f203 	lsl.w	r2, r0, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	430a      	orrs	r2, r1
 80099ba:	635a      	str	r2, [r3, #52]	; 0x34
 80099bc:	e04c      	b.n	8009a58 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	2b0c      	cmp	r3, #12
 80099c4:	d824      	bhi.n	8009a10 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	685a      	ldr	r2, [r3, #4]
 80099d0:	4613      	mov	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	3b23      	subs	r3, #35	; 0x23
 80099d8:	221f      	movs	r2, #31
 80099da:	fa02 f303 	lsl.w	r3, r2, r3
 80099de:	43da      	mvns	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	400a      	ands	r2, r1
 80099e6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	4618      	mov	r0, r3
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	3b23      	subs	r3, #35	; 0x23
 8009a02:	fa00 f203 	lsl.w	r2, r0, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8009a0e:	e023      	b.n	8009a58 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	685a      	ldr	r2, [r3, #4]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	3b41      	subs	r3, #65	; 0x41
 8009a22:	221f      	movs	r2, #31
 8009a24:	fa02 f303 	lsl.w	r3, r2, r3
 8009a28:	43da      	mvns	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	400a      	ands	r2, r1
 8009a30:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	4618      	mov	r0, r3
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	685a      	ldr	r2, [r3, #4]
 8009a44:	4613      	mov	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	3b41      	subs	r3, #65	; 0x41
 8009a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	430a      	orrs	r2, r1
 8009a56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a2a      	ldr	r2, [pc, #168]	; (8009b08 <HAL_ADC_ConfigChannel+0x284>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d10a      	bne.n	8009a78 <HAL_ADC_ConfigChannel+0x1f4>
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a6a:	d105      	bne.n	8009a78 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8009a6c:	4b27      	ldr	r3, [pc, #156]	; (8009b0c <HAL_ADC_ConfigChannel+0x288>)
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	4a26      	ldr	r2, [pc, #152]	; (8009b0c <HAL_ADC_ConfigChannel+0x288>)
 8009a72:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8009a76:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a22      	ldr	r2, [pc, #136]	; (8009b08 <HAL_ADC_ConfigChannel+0x284>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d109      	bne.n	8009a96 <HAL_ADC_ConfigChannel+0x212>
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b12      	cmp	r3, #18
 8009a88:	d105      	bne.n	8009a96 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8009a8a:	4b20      	ldr	r3, [pc, #128]	; (8009b0c <HAL_ADC_ConfigChannel+0x288>)
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	4a1f      	ldr	r2, [pc, #124]	; (8009b0c <HAL_ADC_ConfigChannel+0x288>)
 8009a90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009a94:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a1b      	ldr	r2, [pc, #108]	; (8009b08 <HAL_ADC_ConfigChannel+0x284>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d125      	bne.n	8009aec <HAL_ADC_ConfigChannel+0x268>
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a17      	ldr	r2, [pc, #92]	; (8009b04 <HAL_ADC_ConfigChannel+0x280>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d003      	beq.n	8009ab2 <HAL_ADC_ConfigChannel+0x22e>
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b11      	cmp	r3, #17
 8009ab0:	d11c      	bne.n	8009aec <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8009ab2:	4b16      	ldr	r3, [pc, #88]	; (8009b0c <HAL_ADC_ConfigChannel+0x288>)
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	4a15      	ldr	r2, [pc, #84]	; (8009b0c <HAL_ADC_ConfigChannel+0x288>)
 8009ab8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009abc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a10      	ldr	r2, [pc, #64]	; (8009b04 <HAL_ADC_ConfigChannel+0x280>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d111      	bne.n	8009aec <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8009ac8:	4b11      	ldr	r3, [pc, #68]	; (8009b10 <HAL_ADC_ConfigChannel+0x28c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a11      	ldr	r2, [pc, #68]	; (8009b14 <HAL_ADC_ConfigChannel+0x290>)
 8009ace:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad2:	0c9a      	lsrs	r2, r3, #18
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4413      	add	r3, r2
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8009ade:	e002      	b.n	8009ae6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1f9      	bne.n	8009ae0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3714      	adds	r7, #20
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	10000012 	.word	0x10000012
 8009b08:	40012000 	.word	0x40012000
 8009b0c:	40012300 	.word	0x40012300
 8009b10:	20010050 	.word	0x20010050
 8009b14:	431bde83 	.word	0x431bde83

08009b18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8009b20:	4b78      	ldr	r3, [pc, #480]	; (8009d04 <ADC_Init+0x1ec>)
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	4a77      	ldr	r2, [pc, #476]	; (8009d04 <ADC_Init+0x1ec>)
 8009b26:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009b2a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8009b2c:	4b75      	ldr	r3, [pc, #468]	; (8009d04 <ADC_Init+0x1ec>)
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	4973      	ldr	r1, [pc, #460]	; (8009d04 <ADC_Init+0x1ec>)
 8009b36:	4313      	orrs	r3, r2
 8009b38:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	6859      	ldr	r1, [r3, #4]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	021a      	lsls	r2, r3, #8
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	685a      	ldr	r2, [r3, #4]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009b6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6859      	ldr	r1, [r3, #4]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689a      	ldr	r2, [r3, #8]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	430a      	orrs	r2, r1
 8009b7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689a      	ldr	r2, [r3, #8]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6899      	ldr	r1, [r3, #8]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	68da      	ldr	r2, [r3, #12]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	430a      	orrs	r2, r1
 8009ba0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba6:	4a58      	ldr	r2, [pc, #352]	; (8009d08 <ADC_Init+0x1f0>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d022      	beq.n	8009bf2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	689a      	ldr	r2, [r3, #8]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009bba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6899      	ldr	r1, [r3, #8]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	430a      	orrs	r2, r1
 8009bcc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009bdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	6899      	ldr	r1, [r3, #8]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	430a      	orrs	r2, r1
 8009bee:	609a      	str	r2, [r3, #8]
 8009bf0:	e00f      	b.n	8009c12 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	689a      	ldr	r2, [r3, #8]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009c00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	689a      	ldr	r2, [r3, #8]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009c10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	689a      	ldr	r2, [r3, #8]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f022 0202 	bic.w	r2, r2, #2
 8009c20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	6899      	ldr	r1, [r3, #8]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	005a      	lsls	r2, r3, #1
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	430a      	orrs	r2, r1
 8009c34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d01b      	beq.n	8009c78 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685a      	ldr	r2, [r3, #4]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009c5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6859      	ldr	r1, [r3, #4]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	035a      	lsls	r2, r3, #13
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	430a      	orrs	r2, r1
 8009c74:	605a      	str	r2, [r3, #4]
 8009c76:	e007      	b.n	8009c88 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	685a      	ldr	r2, [r3, #4]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009c96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	69db      	ldr	r3, [r3, #28]
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	051a      	lsls	r2, r3, #20
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	430a      	orrs	r2, r1
 8009cac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	689a      	ldr	r2, [r3, #8]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	6899      	ldr	r1, [r3, #8]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009cca:	025a      	lsls	r2, r3, #9
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	689a      	ldr	r2, [r3, #8]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ce2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6899      	ldr	r1, [r3, #8]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	695b      	ldr	r3, [r3, #20]
 8009cee:	029a      	lsls	r2, r3, #10
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	430a      	orrs	r2, r1
 8009cf6:	609a      	str	r2, [r3, #8]
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	40012300 	.word	0x40012300
 8009d08:	0f000001 	.word	0x0f000001

08009d0c <__NVIC_SetPriorityGrouping>:
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f003 0307 	and.w	r3, r3, #7
 8009d1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009d1c:	4b0b      	ldr	r3, [pc, #44]	; (8009d4c <__NVIC_SetPriorityGrouping+0x40>)
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009d28:	4013      	ands	r3, r2
 8009d2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009d34:	4b06      	ldr	r3, [pc, #24]	; (8009d50 <__NVIC_SetPriorityGrouping+0x44>)
 8009d36:	4313      	orrs	r3, r2
 8009d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009d3a:	4a04      	ldr	r2, [pc, #16]	; (8009d4c <__NVIC_SetPriorityGrouping+0x40>)
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	60d3      	str	r3, [r2, #12]
}
 8009d40:	bf00      	nop
 8009d42:	3714      	adds	r7, #20
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr
 8009d4c:	e000ed00 	.word	0xe000ed00
 8009d50:	05fa0000 	.word	0x05fa0000

08009d54 <__NVIC_GetPriorityGrouping>:
{
 8009d54:	b480      	push	{r7}
 8009d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009d58:	4b04      	ldr	r3, [pc, #16]	; (8009d6c <__NVIC_GetPriorityGrouping+0x18>)
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	0a1b      	lsrs	r3, r3, #8
 8009d5e:	f003 0307 	and.w	r3, r3, #7
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr
 8009d6c:	e000ed00 	.word	0xe000ed00

08009d70 <__NVIC_EnableIRQ>:
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	4603      	mov	r3, r0
 8009d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	db0b      	blt.n	8009d9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009d82:	79fb      	ldrb	r3, [r7, #7]
 8009d84:	f003 021f 	and.w	r2, r3, #31
 8009d88:	4907      	ldr	r1, [pc, #28]	; (8009da8 <__NVIC_EnableIRQ+0x38>)
 8009d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d8e:	095b      	lsrs	r3, r3, #5
 8009d90:	2001      	movs	r0, #1
 8009d92:	fa00 f202 	lsl.w	r2, r0, r2
 8009d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009d9a:	bf00      	nop
 8009d9c:	370c      	adds	r7, #12
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	e000e100 	.word	0xe000e100

08009dac <__NVIC_SetPriority>:
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	4603      	mov	r3, r0
 8009db4:	6039      	str	r1, [r7, #0]
 8009db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	db0a      	blt.n	8009dd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	490c      	ldr	r1, [pc, #48]	; (8009df8 <__NVIC_SetPriority+0x4c>)
 8009dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dca:	0112      	lsls	r2, r2, #4
 8009dcc:	b2d2      	uxtb	r2, r2
 8009dce:	440b      	add	r3, r1
 8009dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009dd4:	e00a      	b.n	8009dec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	b2da      	uxtb	r2, r3
 8009dda:	4908      	ldr	r1, [pc, #32]	; (8009dfc <__NVIC_SetPriority+0x50>)
 8009ddc:	79fb      	ldrb	r3, [r7, #7]
 8009dde:	f003 030f 	and.w	r3, r3, #15
 8009de2:	3b04      	subs	r3, #4
 8009de4:	0112      	lsls	r2, r2, #4
 8009de6:	b2d2      	uxtb	r2, r2
 8009de8:	440b      	add	r3, r1
 8009dea:	761a      	strb	r2, [r3, #24]
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr
 8009df8:	e000e100 	.word	0xe000e100
 8009dfc:	e000ed00 	.word	0xe000ed00

08009e00 <NVIC_EncodePriority>:
{
 8009e00:	b480      	push	{r7}
 8009e02:	b089      	sub	sp, #36	; 0x24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f003 0307 	and.w	r3, r3, #7
 8009e12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	f1c3 0307 	rsb	r3, r3, #7
 8009e1a:	2b04      	cmp	r3, #4
 8009e1c:	bf28      	it	cs
 8009e1e:	2304      	movcs	r3, #4
 8009e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	3304      	adds	r3, #4
 8009e26:	2b06      	cmp	r3, #6
 8009e28:	d902      	bls.n	8009e30 <NVIC_EncodePriority+0x30>
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	3b03      	subs	r3, #3
 8009e2e:	e000      	b.n	8009e32 <NVIC_EncodePriority+0x32>
 8009e30:	2300      	movs	r3, #0
 8009e32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e34:	f04f 32ff 	mov.w	r2, #4294967295
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e3e:	43da      	mvns	r2, r3
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	401a      	ands	r2, r3
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009e48:	f04f 31ff 	mov.w	r1, #4294967295
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e52:	43d9      	mvns	r1, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e58:	4313      	orrs	r3, r2
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3724      	adds	r7, #36	; 0x24
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
	...

08009e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3b01      	subs	r3, #1
 8009e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e78:	d301      	bcc.n	8009e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e00f      	b.n	8009e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009e7e:	4a0a      	ldr	r2, [pc, #40]	; (8009ea8 <SysTick_Config+0x40>)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	3b01      	subs	r3, #1
 8009e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009e86:	210f      	movs	r1, #15
 8009e88:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8c:	f7ff ff8e 	bl	8009dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009e90:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <SysTick_Config+0x40>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009e96:	4b04      	ldr	r3, [pc, #16]	; (8009ea8 <SysTick_Config+0x40>)
 8009e98:	2207      	movs	r2, #7
 8009e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	e000e010 	.word	0xe000e010

08009eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f7ff ff29 	bl	8009d0c <__NVIC_SetPriorityGrouping>
}
 8009eba:	bf00      	nop
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b086      	sub	sp, #24
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	4603      	mov	r3, r0
 8009eca:	60b9      	str	r1, [r7, #8]
 8009ecc:	607a      	str	r2, [r7, #4]
 8009ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009ed4:	f7ff ff3e 	bl	8009d54 <__NVIC_GetPriorityGrouping>
 8009ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	68b9      	ldr	r1, [r7, #8]
 8009ede:	6978      	ldr	r0, [r7, #20]
 8009ee0:	f7ff ff8e 	bl	8009e00 <NVIC_EncodePriority>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009eea:	4611      	mov	r1, r2
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7ff ff5d 	bl	8009dac <__NVIC_SetPriority>
}
 8009ef2:	bf00      	nop
 8009ef4:	3718      	adds	r7, #24
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b082      	sub	sp, #8
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	4603      	mov	r3, r0
 8009f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7ff ff31 	bl	8009d70 <__NVIC_EnableIRQ>
}
 8009f0e:	bf00      	nop
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b082      	sub	sp, #8
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7ff ffa2 	bl	8009e68 <SysTick_Config>
 8009f24:	4603      	mov	r3, r0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
	...

08009f30 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e054      	b.n	8009fec <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	7f5b      	ldrb	r3, [r3, #29]
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d105      	bne.n	8009f58 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f7fd fe56 	bl	8007c04 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	791b      	ldrb	r3, [r3, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d10c      	bne.n	8009f80 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a22      	ldr	r2, [pc, #136]	; (8009ff4 <HAL_CRC_Init+0xc4>)
 8009f6c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	689a      	ldr	r2, [r3, #8]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 0218 	bic.w	r2, r2, #24
 8009f7c:	609a      	str	r2, [r3, #8]
 8009f7e:	e00c      	b.n	8009f9a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6899      	ldr	r1, [r3, #8]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	461a      	mov	r2, r3
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f946 	bl	800a21c <HAL_CRCEx_Polynomial_Set>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e028      	b.n	8009fec <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	795b      	ldrb	r3, [r3, #5]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d105      	bne.n	8009fae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009faa:	611a      	str	r2, [r3, #16]
 8009fac:	e004      	b.n	8009fb8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	6912      	ldr	r2, [r2, #16]
 8009fb6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	695a      	ldr	r2, [r3, #20]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	430a      	orrs	r2, r1
 8009fcc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	699a      	ldr	r2, [r3, #24]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	04c11db7 	.word	0x04c11db7

08009ff8 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b086      	sub	sp, #24
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800a004:	2300      	movs	r3, #0
 800a006:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2202      	movs	r2, #2
 800a00c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	689a      	ldr	r2, [r3, #8]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f042 0201 	orr.w	r2, r2, #1
 800a01c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6a1b      	ldr	r3, [r3, #32]
 800a022:	2b02      	cmp	r3, #2
 800a024:	d022      	beq.n	800a06c <HAL_CRC_Calculate+0x74>
 800a026:	2b03      	cmp	r3, #3
 800a028:	d002      	beq.n	800a030 <HAL_CRC_Calculate+0x38>
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d017      	beq.n	800a05e <HAL_CRC_Calculate+0x66>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800a02e:	e024      	b.n	800a07a <HAL_CRC_Calculate+0x82>
      for (index = 0U; index < BufferLength; index++)
 800a030:	2300      	movs	r3, #0
 800a032:	617b      	str	r3, [r7, #20]
 800a034:	e00a      	b.n	800a04c <HAL_CRC_Calculate+0x54>
        hcrc->Instance->DR = pBuffer[index];
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	441a      	add	r2, r3
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	6812      	ldr	r2, [r2, #0]
 800a044:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	3301      	adds	r3, #1
 800a04a:	617b      	str	r3, [r7, #20]
 800a04c:	697a      	ldr	r2, [r7, #20]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	429a      	cmp	r2, r3
 800a052:	d3f0      	bcc.n	800a036 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	613b      	str	r3, [r7, #16]
      break;
 800a05c:	e00d      	b.n	800a07a <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	68b9      	ldr	r1, [r7, #8]
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f000 f811 	bl	800a08a <CRC_Handle_8>
 800a068:	6138      	str	r0, [r7, #16]
      break;
 800a06a:	e006      	b.n	800a07a <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	68b9      	ldr	r1, [r7, #8]
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f000 f898 	bl	800a1a6 <CRC_Handle_16>
 800a076:	6138      	str	r0, [r7, #16]
      break;
 800a078:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2201      	movs	r2, #1
 800a07e:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800a080:	693b      	ldr	r3, [r7, #16]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3718      	adds	r7, #24
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b089      	sub	sp, #36	; 0x24
 800a08e:	af00      	add	r7, sp, #0
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	60b9      	str	r1, [r7, #8]
 800a094:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800a096:	2300      	movs	r3, #0
 800a098:	61fb      	str	r3, [r7, #28]
 800a09a:	e023      	b.n	800a0e4 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	68b9      	ldr	r1, [r7, #8]
 800a0b0:	440b      	add	r3, r1
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800a0b6:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	3302      	adds	r3, #2
 800a0be:	68b9      	ldr	r1, [r7, #8]
 800a0c0:	440b      	add	r3, r1
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800a0c6:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	3303      	adds	r3, #3
 800a0ce:	68b9      	ldr	r1, [r7, #8]
 800a0d0:	440b      	add	r3, r1
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800a0da:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800a0dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	61fb      	str	r3, [r7, #28]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	089b      	lsrs	r3, r3, #2
 800a0e8:	69fa      	ldr	r2, [r7, #28]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d3d6      	bcc.n	800a09c <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f003 0303 	and.w	r3, r3, #3
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d04d      	beq.n	800a194 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f003 0303 	and.w	r3, r3, #3
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d107      	bne.n	800a112 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	4413      	add	r3, r2
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	6812      	ldr	r2, [r2, #0]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f003 0303 	and.w	r3, r3, #3
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d116      	bne.n	800a14a <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	4413      	add	r3, r2
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	021b      	lsls	r3, r3, #8
 800a128:	b21a      	sxth	r2, r3
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	3301      	adds	r3, #1
 800a130:	68b9      	ldr	r1, [r7, #8]
 800a132:	440b      	add	r3, r1
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	b21b      	sxth	r3, r3
 800a138:	4313      	orrs	r3, r2
 800a13a:	b21b      	sxth	r3, r3
 800a13c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	8b7a      	ldrh	r2, [r7, #26]
 800a148:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f003 0303 	and.w	r3, r3, #3
 800a150:	2b03      	cmp	r3, #3
 800a152:	d11f      	bne.n	800a194 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	4413      	add	r3, r2
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	021b      	lsls	r3, r3, #8
 800a160:	b21a      	sxth	r2, r3
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	3301      	adds	r3, #1
 800a168:	68b9      	ldr	r1, [r7, #8]
 800a16a:	440b      	add	r3, r1
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	b21b      	sxth	r3, r3
 800a170:	4313      	orrs	r3, r2
 800a172:	b21b      	sxth	r3, r3
 800a174:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	8b7a      	ldrh	r2, [r7, #26]
 800a180:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	3302      	adds	r3, #2
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	4413      	add	r3, r2
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	6812      	ldr	r2, [r2, #0]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	681b      	ldr	r3, [r3, #0]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3724      	adds	r7, #36	; 0x24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr

0800a1a6 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	b087      	sub	sp, #28
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	60f8      	str	r0, [r7, #12]
 800a1ae:	60b9      	str	r1, [r7, #8]
 800a1b0:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	617b      	str	r3, [r7, #20]
 800a1b6:	e013      	b.n	800a1e0 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	68ba      	ldr	r2, [r7, #8]
 800a1be:	4413      	add	r3, r2
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	041a      	lsls	r2, r3, #16
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	3302      	adds	r3, #2
 800a1ca:	68b9      	ldr	r1, [r7, #8]
 800a1cc:	440b      	add	r3, r1
 800a1ce:	881b      	ldrh	r3, [r3, #0]
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	430a      	orrs	r2, r1
 800a1d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	617b      	str	r3, [r7, #20]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	085b      	lsrs	r3, r3, #1
 800a1e4:	697a      	ldr	r2, [r7, #20]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d3e6      	bcc.n	800a1b8 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f003 0301 	and.w	r3, r3, #1
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d009      	beq.n	800a208 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	4413      	add	r3, r2
 800a202:	881a      	ldrh	r2, [r3, #0]
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	371c      	adds	r7, #28
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
	...

0800a21c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b087      	sub	sp, #28
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a22c:	231f      	movs	r3, #31
 800a22e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a230:	bf00      	nop
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	1e5a      	subs	r2, r3, #1
 800a236:	613a      	str	r2, [r7, #16]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d009      	beq.n	800a250 <HAL_CRCEx_Polynomial_Set+0x34>
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	f003 031f 	and.w	r3, r3, #31
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	fa22 f303 	lsr.w	r3, r2, r3
 800a248:	f003 0301 	and.w	r3, r3, #1
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d0f0      	beq.n	800a232 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b18      	cmp	r3, #24
 800a254:	d846      	bhi.n	800a2e4 <HAL_CRCEx_Polynomial_Set+0xc8>
 800a256:	a201      	add	r2, pc, #4	; (adr r2, 800a25c <HAL_CRCEx_Polynomial_Set+0x40>)
 800a258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25c:	0800a2eb 	.word	0x0800a2eb
 800a260:	0800a2e5 	.word	0x0800a2e5
 800a264:	0800a2e5 	.word	0x0800a2e5
 800a268:	0800a2e5 	.word	0x0800a2e5
 800a26c:	0800a2e5 	.word	0x0800a2e5
 800a270:	0800a2e5 	.word	0x0800a2e5
 800a274:	0800a2e5 	.word	0x0800a2e5
 800a278:	0800a2e5 	.word	0x0800a2e5
 800a27c:	0800a2d9 	.word	0x0800a2d9
 800a280:	0800a2e5 	.word	0x0800a2e5
 800a284:	0800a2e5 	.word	0x0800a2e5
 800a288:	0800a2e5 	.word	0x0800a2e5
 800a28c:	0800a2e5 	.word	0x0800a2e5
 800a290:	0800a2e5 	.word	0x0800a2e5
 800a294:	0800a2e5 	.word	0x0800a2e5
 800a298:	0800a2e5 	.word	0x0800a2e5
 800a29c:	0800a2cd 	.word	0x0800a2cd
 800a2a0:	0800a2e5 	.word	0x0800a2e5
 800a2a4:	0800a2e5 	.word	0x0800a2e5
 800a2a8:	0800a2e5 	.word	0x0800a2e5
 800a2ac:	0800a2e5 	.word	0x0800a2e5
 800a2b0:	0800a2e5 	.word	0x0800a2e5
 800a2b4:	0800a2e5 	.word	0x0800a2e5
 800a2b8:	0800a2e5 	.word	0x0800a2e5
 800a2bc:	0800a2c1 	.word	0x0800a2c1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	2b06      	cmp	r3, #6
 800a2c4:	d913      	bls.n	800a2ee <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a2ca:	e010      	b.n	800a2ee <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	2b07      	cmp	r3, #7
 800a2d0:	d90f      	bls.n	800a2f2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a2d6:	e00c      	b.n	800a2f2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	2b0f      	cmp	r3, #15
 800a2dc:	d90b      	bls.n	800a2f6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a2e2:	e008      	b.n	800a2f6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a2e8:	e006      	b.n	800a2f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a2ea:	bf00      	nop
 800a2ec:	e004      	b.n	800a2f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a2ee:	bf00      	nop
 800a2f0:	e002      	b.n	800a2f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a2f2:	bf00      	nop
 800a2f4:	e000      	b.n	800a2f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a2f6:	bf00      	nop
  }
  if (status == HAL_OK)
 800a2f8:	7dfb      	ldrb	r3, [r7, #23]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10d      	bne.n	800a31a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68ba      	ldr	r2, [r7, #8]
 800a304:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	f023 0118 	bic.w	r1, r3, #24
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	430a      	orrs	r2, r1
 800a318:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	371c      	adds	r7, #28
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a330:	2300      	movs	r3, #0
 800a332:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a334:	f7ff fa56 	bl	80097e4 <HAL_GetTick>
 800a338:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d101      	bne.n	800a344 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	e099      	b.n	800a478 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f022 0201 	bic.w	r2, r2, #1
 800a362:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a364:	e00f      	b.n	800a386 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a366:	f7ff fa3d 	bl	80097e4 <HAL_GetTick>
 800a36a:	4602      	mov	r2, r0
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	2b05      	cmp	r3, #5
 800a372:	d908      	bls.n	800a386 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2220      	movs	r2, #32
 800a378:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2203      	movs	r2, #3
 800a37e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a382:	2303      	movs	r3, #3
 800a384:	e078      	b.n	800a478 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 0301 	and.w	r3, r3, #1
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1e8      	bne.n	800a366 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	4b38      	ldr	r3, [pc, #224]	; (800a480 <HAL_DMA_Init+0x158>)
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685a      	ldr	r2, [r3, #4]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a1b      	ldr	r3, [r3, #32]
 800a3d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3d2:	697a      	ldr	r2, [r7, #20]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	d107      	bne.n	800a3f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	697a      	ldr	r2, [r7, #20]
 800a3f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	f023 0307 	bic.w	r3, r3, #7
 800a406:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	4313      	orrs	r3, r2
 800a410:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a416:	2b04      	cmp	r3, #4
 800a418:	d117      	bne.n	800a44a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	4313      	orrs	r3, r2
 800a422:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00e      	beq.n	800a44a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 fa99 	bl	800a964 <DMA_CheckFifoParam>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d008      	beq.n	800a44a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2240      	movs	r2, #64	; 0x40
 800a43c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2201      	movs	r2, #1
 800a442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a446:	2301      	movs	r3, #1
 800a448:	e016      	b.n	800a478 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fa50 	bl	800a8f8 <DMA_CalcBaseAndBitshift>
 800a458:	4603      	mov	r3, r0
 800a45a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a460:	223f      	movs	r2, #63	; 0x3f
 800a462:	409a      	lsls	r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	e010803f 	.word	0xe010803f

0800a484 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a49a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d101      	bne.n	800a4aa <HAL_DMA_Start_IT+0x26>
 800a4a6:	2302      	movs	r3, #2
 800a4a8:	e048      	b.n	800a53c <HAL_DMA_Start_IT+0xb8>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d137      	bne.n	800a52e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2202      	movs	r2, #2
 800a4c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	68b9      	ldr	r1, [r7, #8]
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 f9e2 	bl	800a89c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4dc:	223f      	movs	r2, #63	; 0x3f
 800a4de:	409a      	lsls	r2, r3
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f042 0216 	orr.w	r2, r2, #22
 800a4f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	695a      	ldr	r2, [r3, #20]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a502:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d007      	beq.n	800a51c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f042 0208 	orr.w	r2, r2, #8
 800a51a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f042 0201 	orr.w	r2, r2, #1
 800a52a:	601a      	str	r2, [r3, #0]
 800a52c:	e005      	b.n	800a53a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a536:	2302      	movs	r3, #2
 800a538:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a552:	b2db      	uxtb	r3, r3
 800a554:	2b02      	cmp	r3, #2
 800a556:	d004      	beq.n	800a562 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2280      	movs	r2, #128	; 0x80
 800a55c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	e00c      	b.n	800a57c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2205      	movs	r2, #5
 800a566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f022 0201 	bic.w	r2, r2, #1
 800a578:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
inline void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800a590:	2300      	movs	r3, #0
 800a592:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800a594:	4b92      	ldr	r3, [pc, #584]	; (800a7e0 <HAL_DMA_IRQHandler+0x258>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a92      	ldr	r2, [pc, #584]	; (800a7e4 <HAL_DMA_IRQHandler+0x25c>)
 800a59a:	fba2 2303 	umull	r2, r3, r2, r3
 800a59e:	0a9b      	lsrs	r3, r3, #10
 800a5a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5b2:	2208      	movs	r2, #8
 800a5b4:	409a      	lsls	r2, r3
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d01a      	beq.n	800a5f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 0304 	and.w	r3, r3, #4
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d013      	beq.n	800a5f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f022 0204 	bic.w	r2, r2, #4
 800a5da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5e0:	2208      	movs	r2, #8
 800a5e2:	409a      	lsls	r2, r3
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ec:	f043 0201 	orr.w	r2, r3, #1
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	409a      	lsls	r2, r3
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	4013      	ands	r3, r2
 800a600:	2b00      	cmp	r3, #0
 800a602:	d012      	beq.n	800a62a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	695b      	ldr	r3, [r3, #20]
 800a60a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00b      	beq.n	800a62a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a616:	2201      	movs	r2, #1
 800a618:	409a      	lsls	r2, r3
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a622:	f043 0202 	orr.w	r2, r3, #2
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a62e:	2204      	movs	r2, #4
 800a630:	409a      	lsls	r2, r3
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	4013      	ands	r3, r2
 800a636:	2b00      	cmp	r3, #0
 800a638:	d012      	beq.n	800a660 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 0302 	and.w	r3, r3, #2
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00b      	beq.n	800a660 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a64c:	2204      	movs	r2, #4
 800a64e:	409a      	lsls	r2, r3
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a658:	f043 0204 	orr.w	r2, r3, #4
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a664:	2210      	movs	r2, #16
 800a666:	409a      	lsls	r2, r3
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	4013      	ands	r3, r2
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d043      	beq.n	800a6f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 0308 	and.w	r3, r3, #8
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d03c      	beq.n	800a6f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a682:	2210      	movs	r2, #16
 800a684:	409a      	lsls	r2, r3
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a694:	2b00      	cmp	r3, #0
 800a696:	d018      	beq.n	800a6ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d108      	bne.n	800a6b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d024      	beq.n	800a6f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	4798      	blx	r3
 800a6b6:	e01f      	b.n	800a6f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d01b      	beq.n	800a6f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	4798      	blx	r3
 800a6c8:	e016      	b.n	800a6f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d107      	bne.n	800a6e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f022 0208 	bic.w	r2, r2, #8
 800a6e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d003      	beq.n	800a6f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6fc:	2220      	movs	r2, #32
 800a6fe:	409a      	lsls	r2, r3
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	4013      	ands	r3, r2
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 808e 	beq.w	800a826 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 0310 	and.w	r3, r3, #16
 800a714:	2b00      	cmp	r3, #0
 800a716:	f000 8086 	beq.w	800a826 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a71e:	2220      	movs	r2, #32
 800a720:	409a      	lsls	r2, r3
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b05      	cmp	r3, #5
 800a730:	d136      	bne.n	800a7a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f022 0216 	bic.w	r2, r2, #22
 800a740:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	695a      	ldr	r2, [r3, #20]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a750:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a756:	2b00      	cmp	r3, #0
 800a758:	d103      	bne.n	800a762 <HAL_DMA_IRQHandler+0x1da>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d007      	beq.n	800a772 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f022 0208 	bic.w	r2, r2, #8
 800a770:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a776:	223f      	movs	r2, #63	; 0x3f
 800a778:	409a      	lsls	r2, r3
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a792:	2b00      	cmp	r3, #0
 800a794:	d07d      	beq.n	800a892 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	4798      	blx	r3
        }
        return;
 800a79e:	e078      	b.n	800a892 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d01c      	beq.n	800a7e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d108      	bne.n	800a7ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d030      	beq.n	800a826 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	4798      	blx	r3
 800a7cc:	e02b      	b.n	800a826 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d027      	beq.n	800a826 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	4798      	blx	r3
 800a7de:	e022      	b.n	800a826 <HAL_DMA_IRQHandler+0x29e>
 800a7e0:	20010050 	.word	0x20010050
 800a7e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d10f      	bne.n	800a816 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f022 0210 	bic.w	r2, r2, #16
 800a804:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2201      	movs	r2, #1
 800a812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d003      	beq.n	800a826 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d032      	beq.n	800a894 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a832:	f003 0301 	and.w	r3, r3, #1
 800a836:	2b00      	cmp	r3, #0
 800a838:	d022      	beq.n	800a880 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2205      	movs	r2, #5
 800a83e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f022 0201 	bic.w	r2, r2, #1
 800a850:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	3301      	adds	r3, #1
 800a856:	60bb      	str	r3, [r7, #8]
 800a858:	697a      	ldr	r2, [r7, #20]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d307      	bcc.n	800a86e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 0301 	and.w	r3, r3, #1
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1f2      	bne.n	800a852 <HAL_DMA_IRQHandler+0x2ca>
 800a86c:	e000      	b.n	800a870 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a86e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a884:	2b00      	cmp	r3, #0
 800a886:	d005      	beq.n	800a894 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	4798      	blx	r3
 800a890:	e000      	b.n	800a894 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a892:	bf00      	nop
    }
  }
}
 800a894:	3718      	adds	r7, #24
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop

0800a89c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
 800a8a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a8b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	683a      	ldr	r2, [r7, #0]
 800a8c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	2b40      	cmp	r3, #64	; 0x40
 800a8c8:	d108      	bne.n	800a8dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a8da:	e007      	b.n	800a8ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	60da      	str	r2, [r3, #12]
}
 800a8ec:	bf00      	nop
 800a8ee:	3714      	adds	r7, #20
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	b2db      	uxtb	r3, r3
 800a906:	3b10      	subs	r3, #16
 800a908:	4a13      	ldr	r2, [pc, #76]	; (800a958 <DMA_CalcBaseAndBitshift+0x60>)
 800a90a:	fba2 2303 	umull	r2, r3, r2, r3
 800a90e:	091b      	lsrs	r3, r3, #4
 800a910:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a912:	4a12      	ldr	r2, [pc, #72]	; (800a95c <DMA_CalcBaseAndBitshift+0x64>)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	4413      	add	r3, r2
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	461a      	mov	r2, r3
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2b03      	cmp	r3, #3
 800a924:	d908      	bls.n	800a938 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	461a      	mov	r2, r3
 800a92c:	4b0c      	ldr	r3, [pc, #48]	; (800a960 <DMA_CalcBaseAndBitshift+0x68>)
 800a92e:	4013      	ands	r3, r2
 800a930:	1d1a      	adds	r2, r3, #4
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	659a      	str	r2, [r3, #88]	; 0x58
 800a936:	e006      	b.n	800a946 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	461a      	mov	r2, r3
 800a93e:	4b08      	ldr	r3, [pc, #32]	; (800a960 <DMA_CalcBaseAndBitshift+0x68>)
 800a940:	4013      	ands	r3, r2
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	aaaaaaab 	.word	0xaaaaaaab
 800a95c:	0800eec0 	.word	0x0800eec0
 800a960:	fffffc00 	.word	0xfffffc00

0800a964 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a96c:	2300      	movs	r3, #0
 800a96e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a974:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d11f      	bne.n	800a9be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	2b03      	cmp	r3, #3
 800a982:	d855      	bhi.n	800aa30 <DMA_CheckFifoParam+0xcc>
 800a984:	a201      	add	r2, pc, #4	; (adr r2, 800a98c <DMA_CheckFifoParam+0x28>)
 800a986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98a:	bf00      	nop
 800a98c:	0800a99d 	.word	0x0800a99d
 800a990:	0800a9af 	.word	0x0800a9af
 800a994:	0800a99d 	.word	0x0800a99d
 800a998:	0800aa31 	.word	0x0800aa31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d045      	beq.n	800aa34 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9ac:	e042      	b.n	800aa34 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a9b6:	d13f      	bne.n	800aa38 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9bc:	e03c      	b.n	800aa38 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9c6:	d121      	bne.n	800aa0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	2b03      	cmp	r3, #3
 800a9cc:	d836      	bhi.n	800aa3c <DMA_CheckFifoParam+0xd8>
 800a9ce:	a201      	add	r2, pc, #4	; (adr r2, 800a9d4 <DMA_CheckFifoParam+0x70>)
 800a9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d4:	0800a9e5 	.word	0x0800a9e5
 800a9d8:	0800a9eb 	.word	0x0800a9eb
 800a9dc:	0800a9e5 	.word	0x0800a9e5
 800a9e0:	0800a9fd 	.word	0x0800a9fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a9e8:	e02f      	b.n	800aa4a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d024      	beq.n	800aa40 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9fa:	e021      	b.n	800aa40 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa04:	d11e      	bne.n	800aa44 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aa0a:	e01b      	b.n	800aa44 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d902      	bls.n	800aa18 <DMA_CheckFifoParam+0xb4>
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	d003      	beq.n	800aa1e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aa16:	e018      	b.n	800aa4a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa1c:	e015      	b.n	800aa4a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00e      	beq.n	800aa48 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa2e:	e00b      	b.n	800aa48 <DMA_CheckFifoParam+0xe4>
      break;
 800aa30:	bf00      	nop
 800aa32:	e00a      	b.n	800aa4a <DMA_CheckFifoParam+0xe6>
      break;
 800aa34:	bf00      	nop
 800aa36:	e008      	b.n	800aa4a <DMA_CheckFifoParam+0xe6>
      break;
 800aa38:	bf00      	nop
 800aa3a:	e006      	b.n	800aa4a <DMA_CheckFifoParam+0xe6>
      break;
 800aa3c:	bf00      	nop
 800aa3e:	e004      	b.n	800aa4a <DMA_CheckFifoParam+0xe6>
      break;
 800aa40:	bf00      	nop
 800aa42:	e002      	b.n	800aa4a <DMA_CheckFifoParam+0xe6>
      break;   
 800aa44:	bf00      	nop
 800aa46:	e000      	b.n	800aa4a <DMA_CheckFifoParam+0xe6>
      break;
 800aa48:	bf00      	nop
    }
  } 
  
  return status; 
 800aa4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b089      	sub	sp, #36	; 0x24
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800aa62:	2300      	movs	r3, #0
 800aa64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800aa66:	2300      	movs	r3, #0
 800aa68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800aa72:	2300      	movs	r3, #0
 800aa74:	61fb      	str	r3, [r7, #28]
 800aa76:	e169      	b.n	800ad4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800aa78:	2201      	movs	r2, #1
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	697a      	ldr	r2, [r7, #20]
 800aa88:	4013      	ands	r3, r2
 800aa8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800aa8c:	693a      	ldr	r2, [r7, #16]
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	f040 8158 	bne.w	800ad46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d00b      	beq.n	800aab6 <HAL_GPIO_Init+0x5e>
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d007      	beq.n	800aab6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aaaa:	2b11      	cmp	r3, #17
 800aaac:	d003      	beq.n	800aab6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	2b12      	cmp	r3, #18
 800aab4:	d130      	bne.n	800ab18 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	005b      	lsls	r3, r3, #1
 800aac0:	2203      	movs	r2, #3
 800aac2:	fa02 f303 	lsl.w	r3, r2, r3
 800aac6:	43db      	mvns	r3, r3
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	4013      	ands	r3, r2
 800aacc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	68da      	ldr	r2, [r3, #12]
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	005b      	lsls	r3, r3, #1
 800aad6:	fa02 f303 	lsl.w	r3, r2, r3
 800aada:	69ba      	ldr	r2, [r7, #24]
 800aadc:	4313      	orrs	r3, r2
 800aade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	69ba      	ldr	r2, [r7, #24]
 800aae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800aaec:	2201      	movs	r2, #1
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf4:	43db      	mvns	r3, r3
 800aaf6:	69ba      	ldr	r2, [r7, #24]
 800aaf8:	4013      	ands	r3, r2
 800aafa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	091b      	lsrs	r3, r3, #4
 800ab02:	f003 0201 	and.w	r2, r3, #1
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	fa02 f303 	lsl.w	r3, r2, r3
 800ab0c:	69ba      	ldr	r2, [r7, #24]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	69ba      	ldr	r2, [r7, #24]
 800ab16:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	005b      	lsls	r3, r3, #1
 800ab22:	2203      	movs	r2, #3
 800ab24:	fa02 f303 	lsl.w	r3, r2, r3
 800ab28:	43db      	mvns	r3, r3
 800ab2a:	69ba      	ldr	r2, [r7, #24]
 800ab2c:	4013      	ands	r3, r2
 800ab2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	689a      	ldr	r2, [r3, #8]
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	fa02 f303 	lsl.w	r3, r2, r3
 800ab3c:	69ba      	ldr	r2, [r7, #24]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	69ba      	ldr	r2, [r7, #24]
 800ab46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d003      	beq.n	800ab58 <HAL_GPIO_Init+0x100>
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	2b12      	cmp	r3, #18
 800ab56:	d123      	bne.n	800aba0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	08da      	lsrs	r2, r3, #3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3208      	adds	r2, #8
 800ab60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	f003 0307 	and.w	r3, r3, #7
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	220f      	movs	r2, #15
 800ab70:	fa02 f303 	lsl.w	r3, r2, r3
 800ab74:	43db      	mvns	r3, r3
 800ab76:	69ba      	ldr	r2, [r7, #24]
 800ab78:	4013      	ands	r3, r2
 800ab7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	691a      	ldr	r2, [r3, #16]
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	f003 0307 	and.w	r3, r3, #7
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	fa02 f303 	lsl.w	r3, r2, r3
 800ab8c:	69ba      	ldr	r2, [r7, #24]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	08da      	lsrs	r2, r3, #3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	3208      	adds	r2, #8
 800ab9a:	69b9      	ldr	r1, [r7, #24]
 800ab9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	005b      	lsls	r3, r3, #1
 800abaa:	2203      	movs	r2, #3
 800abac:	fa02 f303 	lsl.w	r3, r2, r3
 800abb0:	43db      	mvns	r3, r3
 800abb2:	69ba      	ldr	r2, [r7, #24]
 800abb4:	4013      	ands	r3, r2
 800abb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	f003 0203 	and.w	r2, r3, #3
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	005b      	lsls	r3, r3, #1
 800abc4:	fa02 f303 	lsl.w	r3, r2, r3
 800abc8:	69ba      	ldr	r2, [r7, #24]
 800abca:	4313      	orrs	r3, r2
 800abcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	69ba      	ldr	r2, [r7, #24]
 800abd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f000 80b2 	beq.w	800ad46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800abe2:	4b5f      	ldr	r3, [pc, #380]	; (800ad60 <HAL_GPIO_Init+0x308>)
 800abe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe6:	4a5e      	ldr	r2, [pc, #376]	; (800ad60 <HAL_GPIO_Init+0x308>)
 800abe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800abec:	6453      	str	r3, [r2, #68]	; 0x44
 800abee:	4b5c      	ldr	r3, [pc, #368]	; (800ad60 <HAL_GPIO_Init+0x308>)
 800abf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abf6:	60fb      	str	r3, [r7, #12]
 800abf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800abfa:	4a5a      	ldr	r2, [pc, #360]	; (800ad64 <HAL_GPIO_Init+0x30c>)
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	089b      	lsrs	r3, r3, #2
 800ac00:	3302      	adds	r3, #2
 800ac02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	f003 0303 	and.w	r3, r3, #3
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	220f      	movs	r2, #15
 800ac12:	fa02 f303 	lsl.w	r3, r2, r3
 800ac16:	43db      	mvns	r3, r3
 800ac18:	69ba      	ldr	r2, [r7, #24]
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a51      	ldr	r2, [pc, #324]	; (800ad68 <HAL_GPIO_Init+0x310>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d02b      	beq.n	800ac7e <HAL_GPIO_Init+0x226>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a50      	ldr	r2, [pc, #320]	; (800ad6c <HAL_GPIO_Init+0x314>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d025      	beq.n	800ac7a <HAL_GPIO_Init+0x222>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a4f      	ldr	r2, [pc, #316]	; (800ad70 <HAL_GPIO_Init+0x318>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d01f      	beq.n	800ac76 <HAL_GPIO_Init+0x21e>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a4e      	ldr	r2, [pc, #312]	; (800ad74 <HAL_GPIO_Init+0x31c>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d019      	beq.n	800ac72 <HAL_GPIO_Init+0x21a>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a4d      	ldr	r2, [pc, #308]	; (800ad78 <HAL_GPIO_Init+0x320>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d013      	beq.n	800ac6e <HAL_GPIO_Init+0x216>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4a4c      	ldr	r2, [pc, #304]	; (800ad7c <HAL_GPIO_Init+0x324>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d00d      	beq.n	800ac6a <HAL_GPIO_Init+0x212>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4a4b      	ldr	r2, [pc, #300]	; (800ad80 <HAL_GPIO_Init+0x328>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d007      	beq.n	800ac66 <HAL_GPIO_Init+0x20e>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	4a4a      	ldr	r2, [pc, #296]	; (800ad84 <HAL_GPIO_Init+0x32c>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d101      	bne.n	800ac62 <HAL_GPIO_Init+0x20a>
 800ac5e:	2307      	movs	r3, #7
 800ac60:	e00e      	b.n	800ac80 <HAL_GPIO_Init+0x228>
 800ac62:	2308      	movs	r3, #8
 800ac64:	e00c      	b.n	800ac80 <HAL_GPIO_Init+0x228>
 800ac66:	2306      	movs	r3, #6
 800ac68:	e00a      	b.n	800ac80 <HAL_GPIO_Init+0x228>
 800ac6a:	2305      	movs	r3, #5
 800ac6c:	e008      	b.n	800ac80 <HAL_GPIO_Init+0x228>
 800ac6e:	2304      	movs	r3, #4
 800ac70:	e006      	b.n	800ac80 <HAL_GPIO_Init+0x228>
 800ac72:	2303      	movs	r3, #3
 800ac74:	e004      	b.n	800ac80 <HAL_GPIO_Init+0x228>
 800ac76:	2302      	movs	r3, #2
 800ac78:	e002      	b.n	800ac80 <HAL_GPIO_Init+0x228>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e000      	b.n	800ac80 <HAL_GPIO_Init+0x228>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	69fa      	ldr	r2, [r7, #28]
 800ac82:	f002 0203 	and.w	r2, r2, #3
 800ac86:	0092      	lsls	r2, r2, #2
 800ac88:	4093      	lsls	r3, r2
 800ac8a:	69ba      	ldr	r2, [r7, #24]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800ac90:	4934      	ldr	r1, [pc, #208]	; (800ad64 <HAL_GPIO_Init+0x30c>)
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	089b      	lsrs	r3, r3, #2
 800ac96:	3302      	adds	r3, #2
 800ac98:	69ba      	ldr	r2, [r7, #24]
 800ac9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ac9e:	4b3a      	ldr	r3, [pc, #232]	; (800ad88 <HAL_GPIO_Init+0x330>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	43db      	mvns	r3, r3
 800aca8:	69ba      	ldr	r2, [r7, #24]
 800acaa:	4013      	ands	r3, r2
 800acac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d003      	beq.n	800acc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800acba:	69ba      	ldr	r2, [r7, #24]
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800acc2:	4a31      	ldr	r2, [pc, #196]	; (800ad88 <HAL_GPIO_Init+0x330>)
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800acc8:	4b2f      	ldr	r3, [pc, #188]	; (800ad88 <HAL_GPIO_Init+0x330>)
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	43db      	mvns	r3, r3
 800acd2:	69ba      	ldr	r2, [r7, #24]
 800acd4:	4013      	ands	r3, r2
 800acd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d003      	beq.n	800acec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ace4:	69ba      	ldr	r2, [r7, #24]
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	4313      	orrs	r3, r2
 800acea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800acec:	4a26      	ldr	r2, [pc, #152]	; (800ad88 <HAL_GPIO_Init+0x330>)
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800acf2:	4b25      	ldr	r3, [pc, #148]	; (800ad88 <HAL_GPIO_Init+0x330>)
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	43db      	mvns	r3, r3
 800acfc:	69ba      	ldr	r2, [r7, #24]
 800acfe:	4013      	ands	r3, r2
 800ad00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d003      	beq.n	800ad16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800ad0e:	69ba      	ldr	r2, [r7, #24]
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ad16:	4a1c      	ldr	r2, [pc, #112]	; (800ad88 <HAL_GPIO_Init+0x330>)
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ad1c:	4b1a      	ldr	r3, [pc, #104]	; (800ad88 <HAL_GPIO_Init+0x330>)
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	43db      	mvns	r3, r3
 800ad26:	69ba      	ldr	r2, [r7, #24]
 800ad28:	4013      	ands	r3, r2
 800ad2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d003      	beq.n	800ad40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800ad38:	69ba      	ldr	r2, [r7, #24]
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ad40:	4a11      	ldr	r2, [pc, #68]	; (800ad88 <HAL_GPIO_Init+0x330>)
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	61fb      	str	r3, [r7, #28]
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	2b0f      	cmp	r3, #15
 800ad50:	f67f ae92 	bls.w	800aa78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800ad54:	bf00      	nop
 800ad56:	3724      	adds	r7, #36	; 0x24
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr
 800ad60:	40023800 	.word	0x40023800
 800ad64:	40013800 	.word	0x40013800
 800ad68:	40020000 	.word	0x40020000
 800ad6c:	40020400 	.word	0x40020400
 800ad70:	40020800 	.word	0x40020800
 800ad74:	40020c00 	.word	0x40020c00
 800ad78:	40021000 	.word	0x40021000
 800ad7c:	40021400 	.word	0x40021400
 800ad80:	40021800 	.word	0x40021800
 800ad84:	40021c00 	.word	0x40021c00
 800ad88:	40013c00 	.word	0x40013c00

0800ad8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
inline GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b085      	sub	sp, #20
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	460b      	mov	r3, r1
 800ad96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	691a      	ldr	r2, [r3, #16]
 800ad9c:	887b      	ldrh	r3, [r7, #2]
 800ad9e:	4013      	ands	r3, r2
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ada4:	2301      	movs	r3, #1
 800ada6:	73fb      	strb	r3, [r7, #15]
 800ada8:	e001      	b.n	800adae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800adaa:	2300      	movs	r3, #0
 800adac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800adae:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
inline void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	460b      	mov	r3, r1
 800adc6:	807b      	strh	r3, [r7, #2]
 800adc8:	4613      	mov	r3, r2
 800adca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800adcc:	787b      	ldrb	r3, [r7, #1]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d003      	beq.n	800adda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800add2:	887a      	ldrh	r2, [r7, #2]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800add8:	e003      	b.n	800ade2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800adda:	887b      	ldrh	r3, [r7, #2]
 800addc:	041a      	lsls	r2, r3, #16
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	619a      	str	r2, [r3, #24]
}
 800ade2:	bf00      	nop
 800ade4:	370c      	adds	r7, #12
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
	...

0800adf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
inline void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	4603      	mov	r3, r0
 800adf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800adfa:	4b08      	ldr	r3, [pc, #32]	; (800ae1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800adfc:	695a      	ldr	r2, [r3, #20]
 800adfe:	88fb      	ldrh	r3, [r7, #6]
 800ae00:	4013      	ands	r3, r2
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d006      	beq.n	800ae14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ae06:	4a05      	ldr	r2, [pc, #20]	; (800ae1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ae08:	88fb      	ldrh	r3, [r7, #6]
 800ae0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ae0c:	88fb      	ldrh	r3, [r7, #6]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fb fdd4 	bl	80069bc <HAL_GPIO_EXTI_Callback>
  }
}
 800ae14:	bf00      	nop
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	40013c00 	.word	0x40013c00

0800ae20 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ae30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800ae46:	2300      	movs	r3, #0
 800ae48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ae4a:	4b23      	ldr	r3, [pc, #140]	; (800aed8 <HAL_PWREx_EnableOverDrive+0x98>)
 800ae4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4e:	4a22      	ldr	r2, [pc, #136]	; (800aed8 <HAL_PWREx_EnableOverDrive+0x98>)
 800ae50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae54:	6413      	str	r3, [r2, #64]	; 0x40
 800ae56:	4b20      	ldr	r3, [pc, #128]	; (800aed8 <HAL_PWREx_EnableOverDrive+0x98>)
 800ae58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae5e:	603b      	str	r3, [r7, #0]
 800ae60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ae62:	4b1e      	ldr	r3, [pc, #120]	; (800aedc <HAL_PWREx_EnableOverDrive+0x9c>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a1d      	ldr	r2, [pc, #116]	; (800aedc <HAL_PWREx_EnableOverDrive+0x9c>)
 800ae68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae6c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ae6e:	f7fe fcb9 	bl	80097e4 <HAL_GetTick>
 800ae72:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ae74:	e009      	b.n	800ae8a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ae76:	f7fe fcb5 	bl	80097e4 <HAL_GetTick>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	1ad3      	subs	r3, r2, r3
 800ae80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae84:	d901      	bls.n	800ae8a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800ae86:	2303      	movs	r3, #3
 800ae88:	e022      	b.n	800aed0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ae8a:	4b14      	ldr	r3, [pc, #80]	; (800aedc <HAL_PWREx_EnableOverDrive+0x9c>)
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae96:	d1ee      	bne.n	800ae76 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ae98:	4b10      	ldr	r3, [pc, #64]	; (800aedc <HAL_PWREx_EnableOverDrive+0x9c>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a0f      	ldr	r2, [pc, #60]	; (800aedc <HAL_PWREx_EnableOverDrive+0x9c>)
 800ae9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aea2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aea4:	f7fe fc9e 	bl	80097e4 <HAL_GetTick>
 800aea8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800aeaa:	e009      	b.n	800aec0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aeac:	f7fe fc9a 	bl	80097e4 <HAL_GetTick>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	1ad3      	subs	r3, r2, r3
 800aeb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aeba:	d901      	bls.n	800aec0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800aebc:	2303      	movs	r3, #3
 800aebe:	e007      	b.n	800aed0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800aec0:	4b06      	ldr	r3, [pc, #24]	; (800aedc <HAL_PWREx_EnableOverDrive+0x9c>)
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aec8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aecc:	d1ee      	bne.n	800aeac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	40023800 	.word	0x40023800
 800aedc:	40007000 	.word	0x40007000

0800aee0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800aee8:	2300      	movs	r3, #0
 800aeea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d101      	bne.n	800aef6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e291      	b.n	800b41a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 0301 	and.w	r3, r3, #1
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f000 8087 	beq.w	800b012 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800af04:	4b96      	ldr	r3, [pc, #600]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	f003 030c 	and.w	r3, r3, #12
 800af0c:	2b04      	cmp	r3, #4
 800af0e:	d00c      	beq.n	800af2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af10:	4b93      	ldr	r3, [pc, #588]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	f003 030c 	and.w	r3, r3, #12
 800af18:	2b08      	cmp	r3, #8
 800af1a:	d112      	bne.n	800af42 <HAL_RCC_OscConfig+0x62>
 800af1c:	4b90      	ldr	r3, [pc, #576]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af28:	d10b      	bne.n	800af42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af2a:	4b8d      	ldr	r3, [pc, #564]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af32:	2b00      	cmp	r3, #0
 800af34:	d06c      	beq.n	800b010 <HAL_RCC_OscConfig+0x130>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d168      	bne.n	800b010 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	e26b      	b.n	800b41a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af4a:	d106      	bne.n	800af5a <HAL_RCC_OscConfig+0x7a>
 800af4c:	4b84      	ldr	r3, [pc, #528]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a83      	ldr	r2, [pc, #524]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800af52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af56:	6013      	str	r3, [r2, #0]
 800af58:	e02e      	b.n	800afb8 <HAL_RCC_OscConfig+0xd8>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10c      	bne.n	800af7c <HAL_RCC_OscConfig+0x9c>
 800af62:	4b7f      	ldr	r3, [pc, #508]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a7e      	ldr	r2, [pc, #504]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800af68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af6c:	6013      	str	r3, [r2, #0]
 800af6e:	4b7c      	ldr	r3, [pc, #496]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a7b      	ldr	r2, [pc, #492]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800af74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af78:	6013      	str	r3, [r2, #0]
 800af7a:	e01d      	b.n	800afb8 <HAL_RCC_OscConfig+0xd8>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af84:	d10c      	bne.n	800afa0 <HAL_RCC_OscConfig+0xc0>
 800af86:	4b76      	ldr	r3, [pc, #472]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a75      	ldr	r2, [pc, #468]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800af8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af90:	6013      	str	r3, [r2, #0]
 800af92:	4b73      	ldr	r3, [pc, #460]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a72      	ldr	r2, [pc, #456]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800af98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af9c:	6013      	str	r3, [r2, #0]
 800af9e:	e00b      	b.n	800afb8 <HAL_RCC_OscConfig+0xd8>
 800afa0:	4b6f      	ldr	r3, [pc, #444]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a6e      	ldr	r2, [pc, #440]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800afa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afaa:	6013      	str	r3, [r2, #0]
 800afac:	4b6c      	ldr	r3, [pc, #432]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a6b      	ldr	r2, [pc, #428]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800afb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800afb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d013      	beq.n	800afe8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afc0:	f7fe fc10 	bl	80097e4 <HAL_GetTick>
 800afc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afc6:	e008      	b.n	800afda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afc8:	f7fe fc0c 	bl	80097e4 <HAL_GetTick>
 800afcc:	4602      	mov	r2, r0
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	2b64      	cmp	r3, #100	; 0x64
 800afd4:	d901      	bls.n	800afda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800afd6:	2303      	movs	r3, #3
 800afd8:	e21f      	b.n	800b41a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afda:	4b61      	ldr	r3, [pc, #388]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d0f0      	beq.n	800afc8 <HAL_RCC_OscConfig+0xe8>
 800afe6:	e014      	b.n	800b012 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afe8:	f7fe fbfc 	bl	80097e4 <HAL_GetTick>
 800afec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800afee:	e008      	b.n	800b002 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aff0:	f7fe fbf8 	bl	80097e4 <HAL_GetTick>
 800aff4:	4602      	mov	r2, r0
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	2b64      	cmp	r3, #100	; 0x64
 800affc:	d901      	bls.n	800b002 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800affe:	2303      	movs	r3, #3
 800b000:	e20b      	b.n	800b41a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b002:	4b57      	ldr	r3, [pc, #348]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1f0      	bne.n	800aff0 <HAL_RCC_OscConfig+0x110>
 800b00e:	e000      	b.n	800b012 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f003 0302 	and.w	r3, r3, #2
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d069      	beq.n	800b0f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b01e:	4b50      	ldr	r3, [pc, #320]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	f003 030c 	and.w	r3, r3, #12
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00b      	beq.n	800b042 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b02a:	4b4d      	ldr	r3, [pc, #308]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	f003 030c 	and.w	r3, r3, #12
 800b032:	2b08      	cmp	r3, #8
 800b034:	d11c      	bne.n	800b070 <HAL_RCC_OscConfig+0x190>
 800b036:	4b4a      	ldr	r3, [pc, #296]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d116      	bne.n	800b070 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b042:	4b47      	ldr	r3, [pc, #284]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 0302 	and.w	r3, r3, #2
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d005      	beq.n	800b05a <HAL_RCC_OscConfig+0x17a>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d001      	beq.n	800b05a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b056:	2301      	movs	r3, #1
 800b058:	e1df      	b.n	800b41a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b05a:	4b41      	ldr	r3, [pc, #260]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	00db      	lsls	r3, r3, #3
 800b068:	493d      	ldr	r1, [pc, #244]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b06a:	4313      	orrs	r3, r2
 800b06c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b06e:	e040      	b.n	800b0f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d023      	beq.n	800b0c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b078:	4b39      	ldr	r3, [pc, #228]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a38      	ldr	r2, [pc, #224]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b07e:	f043 0301 	orr.w	r3, r3, #1
 800b082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b084:	f7fe fbae 	bl	80097e4 <HAL_GetTick>
 800b088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b08a:	e008      	b.n	800b09e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b08c:	f7fe fbaa 	bl	80097e4 <HAL_GetTick>
 800b090:	4602      	mov	r2, r0
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	2b02      	cmp	r3, #2
 800b098:	d901      	bls.n	800b09e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b09a:	2303      	movs	r3, #3
 800b09c:	e1bd      	b.n	800b41a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b09e:	4b30      	ldr	r3, [pc, #192]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d0f0      	beq.n	800b08c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0aa:	4b2d      	ldr	r3, [pc, #180]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	00db      	lsls	r3, r3, #3
 800b0b8:	4929      	ldr	r1, [pc, #164]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	600b      	str	r3, [r1, #0]
 800b0be:	e018      	b.n	800b0f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b0c0:	4b27      	ldr	r3, [pc, #156]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a26      	ldr	r2, [pc, #152]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b0c6:	f023 0301 	bic.w	r3, r3, #1
 800b0ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0cc:	f7fe fb8a 	bl	80097e4 <HAL_GetTick>
 800b0d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b0d2:	e008      	b.n	800b0e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0d4:	f7fe fb86 	bl	80097e4 <HAL_GetTick>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	1ad3      	subs	r3, r2, r3
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d901      	bls.n	800b0e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b0e2:	2303      	movs	r3, #3
 800b0e4:	e199      	b.n	800b41a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b0e6:	4b1e      	ldr	r3, [pc, #120]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 0302 	and.w	r3, r3, #2
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1f0      	bne.n	800b0d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 0308 	and.w	r3, r3, #8
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d038      	beq.n	800b170 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	695b      	ldr	r3, [r3, #20]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d019      	beq.n	800b13a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b106:	4b16      	ldr	r3, [pc, #88]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b10a:	4a15      	ldr	r2, [pc, #84]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b10c:	f043 0301 	orr.w	r3, r3, #1
 800b110:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b112:	f7fe fb67 	bl	80097e4 <HAL_GetTick>
 800b116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b118:	e008      	b.n	800b12c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b11a:	f7fe fb63 	bl	80097e4 <HAL_GetTick>
 800b11e:	4602      	mov	r2, r0
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	2b02      	cmp	r3, #2
 800b126:	d901      	bls.n	800b12c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b128:	2303      	movs	r3, #3
 800b12a:	e176      	b.n	800b41a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b12c:	4b0c      	ldr	r3, [pc, #48]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b12e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b130:	f003 0302 	and.w	r3, r3, #2
 800b134:	2b00      	cmp	r3, #0
 800b136:	d0f0      	beq.n	800b11a <HAL_RCC_OscConfig+0x23a>
 800b138:	e01a      	b.n	800b170 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b13a:	4b09      	ldr	r3, [pc, #36]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b13c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b13e:	4a08      	ldr	r2, [pc, #32]	; (800b160 <HAL_RCC_OscConfig+0x280>)
 800b140:	f023 0301 	bic.w	r3, r3, #1
 800b144:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b146:	f7fe fb4d 	bl	80097e4 <HAL_GetTick>
 800b14a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b14c:	e00a      	b.n	800b164 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b14e:	f7fe fb49 	bl	80097e4 <HAL_GetTick>
 800b152:	4602      	mov	r2, r0
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	1ad3      	subs	r3, r2, r3
 800b158:	2b02      	cmp	r3, #2
 800b15a:	d903      	bls.n	800b164 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b15c:	2303      	movs	r3, #3
 800b15e:	e15c      	b.n	800b41a <HAL_RCC_OscConfig+0x53a>
 800b160:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b164:	4b91      	ldr	r3, [pc, #580]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b168:	f003 0302 	and.w	r3, r3, #2
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d1ee      	bne.n	800b14e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f003 0304 	and.w	r3, r3, #4
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f000 80a4 	beq.w	800b2c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b17e:	4b8b      	ldr	r3, [pc, #556]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10d      	bne.n	800b1a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b18a:	4b88      	ldr	r3, [pc, #544]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18e:	4a87      	ldr	r2, [pc, #540]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b194:	6413      	str	r3, [r2, #64]	; 0x40
 800b196:	4b85      	ldr	r3, [pc, #532]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b19e:	60bb      	str	r3, [r7, #8]
 800b1a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1a6:	4b82      	ldr	r3, [pc, #520]	; (800b3b0 <HAL_RCC_OscConfig+0x4d0>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d118      	bne.n	800b1e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b1b2:	4b7f      	ldr	r3, [pc, #508]	; (800b3b0 <HAL_RCC_OscConfig+0x4d0>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a7e      	ldr	r2, [pc, #504]	; (800b3b0 <HAL_RCC_OscConfig+0x4d0>)
 800b1b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b1be:	f7fe fb11 	bl	80097e4 <HAL_GetTick>
 800b1c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1c4:	e008      	b.n	800b1d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1c6:	f7fe fb0d 	bl	80097e4 <HAL_GetTick>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	2b64      	cmp	r3, #100	; 0x64
 800b1d2:	d901      	bls.n	800b1d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b1d4:	2303      	movs	r3, #3
 800b1d6:	e120      	b.n	800b41a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1d8:	4b75      	ldr	r3, [pc, #468]	; (800b3b0 <HAL_RCC_OscConfig+0x4d0>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d0f0      	beq.n	800b1c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d106      	bne.n	800b1fa <HAL_RCC_OscConfig+0x31a>
 800b1ec:	4b6f      	ldr	r3, [pc, #444]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b1ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1f0:	4a6e      	ldr	r2, [pc, #440]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b1f2:	f043 0301 	orr.w	r3, r3, #1
 800b1f6:	6713      	str	r3, [r2, #112]	; 0x70
 800b1f8:	e02d      	b.n	800b256 <HAL_RCC_OscConfig+0x376>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10c      	bne.n	800b21c <HAL_RCC_OscConfig+0x33c>
 800b202:	4b6a      	ldr	r3, [pc, #424]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b206:	4a69      	ldr	r2, [pc, #420]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b208:	f023 0301 	bic.w	r3, r3, #1
 800b20c:	6713      	str	r3, [r2, #112]	; 0x70
 800b20e:	4b67      	ldr	r3, [pc, #412]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b212:	4a66      	ldr	r2, [pc, #408]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b214:	f023 0304 	bic.w	r3, r3, #4
 800b218:	6713      	str	r3, [r2, #112]	; 0x70
 800b21a:	e01c      	b.n	800b256 <HAL_RCC_OscConfig+0x376>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	2b05      	cmp	r3, #5
 800b222:	d10c      	bne.n	800b23e <HAL_RCC_OscConfig+0x35e>
 800b224:	4b61      	ldr	r3, [pc, #388]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b228:	4a60      	ldr	r2, [pc, #384]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b22a:	f043 0304 	orr.w	r3, r3, #4
 800b22e:	6713      	str	r3, [r2, #112]	; 0x70
 800b230:	4b5e      	ldr	r3, [pc, #376]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b234:	4a5d      	ldr	r2, [pc, #372]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b236:	f043 0301 	orr.w	r3, r3, #1
 800b23a:	6713      	str	r3, [r2, #112]	; 0x70
 800b23c:	e00b      	b.n	800b256 <HAL_RCC_OscConfig+0x376>
 800b23e:	4b5b      	ldr	r3, [pc, #364]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b242:	4a5a      	ldr	r2, [pc, #360]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b244:	f023 0301 	bic.w	r3, r3, #1
 800b248:	6713      	str	r3, [r2, #112]	; 0x70
 800b24a:	4b58      	ldr	r3, [pc, #352]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b24c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b24e:	4a57      	ldr	r2, [pc, #348]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b250:	f023 0304 	bic.w	r3, r3, #4
 800b254:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d015      	beq.n	800b28a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b25e:	f7fe fac1 	bl	80097e4 <HAL_GetTick>
 800b262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b264:	e00a      	b.n	800b27c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b266:	f7fe fabd 	bl	80097e4 <HAL_GetTick>
 800b26a:	4602      	mov	r2, r0
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	1ad3      	subs	r3, r2, r3
 800b270:	f241 3288 	movw	r2, #5000	; 0x1388
 800b274:	4293      	cmp	r3, r2
 800b276:	d901      	bls.n	800b27c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b278:	2303      	movs	r3, #3
 800b27a:	e0ce      	b.n	800b41a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b27c:	4b4b      	ldr	r3, [pc, #300]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b27e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b280:	f003 0302 	and.w	r3, r3, #2
 800b284:	2b00      	cmp	r3, #0
 800b286:	d0ee      	beq.n	800b266 <HAL_RCC_OscConfig+0x386>
 800b288:	e014      	b.n	800b2b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b28a:	f7fe faab 	bl	80097e4 <HAL_GetTick>
 800b28e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b290:	e00a      	b.n	800b2a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b292:	f7fe faa7 	bl	80097e4 <HAL_GetTick>
 800b296:	4602      	mov	r2, r0
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d901      	bls.n	800b2a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	e0b8      	b.n	800b41a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b2a8:	4b40      	ldr	r3, [pc, #256]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b2aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ac:	f003 0302 	and.w	r3, r3, #2
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1ee      	bne.n	800b292 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b2b4:	7dfb      	ldrb	r3, [r7, #23]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d105      	bne.n	800b2c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2ba:	4b3c      	ldr	r3, [pc, #240]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2be:	4a3b      	ldr	r2, [pc, #236]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b2c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	699b      	ldr	r3, [r3, #24]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	f000 80a4 	beq.w	800b418 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b2d0:	4b36      	ldr	r3, [pc, #216]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	f003 030c 	and.w	r3, r3, #12
 800b2d8:	2b08      	cmp	r3, #8
 800b2da:	d06b      	beq.n	800b3b4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	699b      	ldr	r3, [r3, #24]
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d149      	bne.n	800b378 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b2e4:	4b31      	ldr	r3, [pc, #196]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a30      	ldr	r2, [pc, #192]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b2ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b2ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2f0:	f7fe fa78 	bl	80097e4 <HAL_GetTick>
 800b2f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2f6:	e008      	b.n	800b30a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2f8:	f7fe fa74 	bl	80097e4 <HAL_GetTick>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	2b02      	cmp	r3, #2
 800b304:	d901      	bls.n	800b30a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b306:	2303      	movs	r3, #3
 800b308:	e087      	b.n	800b41a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b30a:	4b28      	ldr	r3, [pc, #160]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1f0      	bne.n	800b2f8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	69da      	ldr	r2, [r3, #28]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	431a      	orrs	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b324:	019b      	lsls	r3, r3, #6
 800b326:	431a      	orrs	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b32c:	085b      	lsrs	r3, r3, #1
 800b32e:	3b01      	subs	r3, #1
 800b330:	041b      	lsls	r3, r3, #16
 800b332:	431a      	orrs	r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b338:	061b      	lsls	r3, r3, #24
 800b33a:	4313      	orrs	r3, r2
 800b33c:	4a1b      	ldr	r2, [pc, #108]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b33e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b342:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b344:	4b19      	ldr	r3, [pc, #100]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a18      	ldr	r2, [pc, #96]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b34a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b34e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b350:	f7fe fa48 	bl	80097e4 <HAL_GetTick>
 800b354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b356:	e008      	b.n	800b36a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b358:	f7fe fa44 	bl	80097e4 <HAL_GetTick>
 800b35c:	4602      	mov	r2, r0
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	2b02      	cmp	r3, #2
 800b364:	d901      	bls.n	800b36a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b366:	2303      	movs	r3, #3
 800b368:	e057      	b.n	800b41a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b36a:	4b10      	ldr	r3, [pc, #64]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b372:	2b00      	cmp	r3, #0
 800b374:	d0f0      	beq.n	800b358 <HAL_RCC_OscConfig+0x478>
 800b376:	e04f      	b.n	800b418 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b378:	4b0c      	ldr	r3, [pc, #48]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a0b      	ldr	r2, [pc, #44]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b37e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b384:	f7fe fa2e 	bl	80097e4 <HAL_GetTick>
 800b388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b38a:	e008      	b.n	800b39e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b38c:	f7fe fa2a 	bl	80097e4 <HAL_GetTick>
 800b390:	4602      	mov	r2, r0
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	2b02      	cmp	r3, #2
 800b398:	d901      	bls.n	800b39e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b39a:	2303      	movs	r3, #3
 800b39c:	e03d      	b.n	800b41a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b39e:	4b03      	ldr	r3, [pc, #12]	; (800b3ac <HAL_RCC_OscConfig+0x4cc>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1f0      	bne.n	800b38c <HAL_RCC_OscConfig+0x4ac>
 800b3aa:	e035      	b.n	800b418 <HAL_RCC_OscConfig+0x538>
 800b3ac:	40023800 	.word	0x40023800
 800b3b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b3b4:	4b1b      	ldr	r3, [pc, #108]	; (800b424 <HAL_RCC_OscConfig+0x544>)
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	699b      	ldr	r3, [r3, #24]
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d028      	beq.n	800b414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d121      	bne.n	800b414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d11a      	bne.n	800b414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b3e4:	4013      	ands	r3, r2
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b3ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d111      	bne.n	800b414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3fa:	085b      	lsrs	r3, r3, #1
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b400:	429a      	cmp	r2, r3
 800b402:	d107      	bne.n	800b414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b410:	429a      	cmp	r2, r3
 800b412:	d001      	beq.n	800b418 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	e000      	b.n	800b41a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3718      	adds	r7, #24
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	40023800 	.word	0x40023800

0800b428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b432:	2300      	movs	r3, #0
 800b434:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d101      	bne.n	800b440 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	e0d0      	b.n	800b5e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b440:	4b6a      	ldr	r3, [pc, #424]	; (800b5ec <HAL_RCC_ClockConfig+0x1c4>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f003 030f 	and.w	r3, r3, #15
 800b448:	683a      	ldr	r2, [r7, #0]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d910      	bls.n	800b470 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b44e:	4b67      	ldr	r3, [pc, #412]	; (800b5ec <HAL_RCC_ClockConfig+0x1c4>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f023 020f 	bic.w	r2, r3, #15
 800b456:	4965      	ldr	r1, [pc, #404]	; (800b5ec <HAL_RCC_ClockConfig+0x1c4>)
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b45e:	4b63      	ldr	r3, [pc, #396]	; (800b5ec <HAL_RCC_ClockConfig+0x1c4>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f003 030f 	and.w	r3, r3, #15
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d001      	beq.n	800b470 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	e0b8      	b.n	800b5e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f003 0302 	and.w	r3, r3, #2
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d020      	beq.n	800b4be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 0304 	and.w	r3, r3, #4
 800b484:	2b00      	cmp	r3, #0
 800b486:	d005      	beq.n	800b494 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b488:	4b59      	ldr	r3, [pc, #356]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	4a58      	ldr	r2, [pc, #352]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b48e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b492:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f003 0308 	and.w	r3, r3, #8
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d005      	beq.n	800b4ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b4a0:	4b53      	ldr	r3, [pc, #332]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	4a52      	ldr	r2, [pc, #328]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b4a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b4aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4ac:	4b50      	ldr	r3, [pc, #320]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	494d      	ldr	r1, [pc, #308]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f003 0301 	and.w	r3, r3, #1
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d040      	beq.n	800b54c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d107      	bne.n	800b4e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4d2:	4b47      	ldr	r3, [pc, #284]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d115      	bne.n	800b50a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e07f      	b.n	800b5e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	d107      	bne.n	800b4fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b4ea:	4b41      	ldr	r3, [pc, #260]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d109      	bne.n	800b50a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e073      	b.n	800b5e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b4fa:	4b3d      	ldr	r3, [pc, #244]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f003 0302 	and.w	r3, r3, #2
 800b502:	2b00      	cmp	r3, #0
 800b504:	d101      	bne.n	800b50a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	e06b      	b.n	800b5e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b50a:	4b39      	ldr	r3, [pc, #228]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	f023 0203 	bic.w	r2, r3, #3
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	4936      	ldr	r1, [pc, #216]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b518:	4313      	orrs	r3, r2
 800b51a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b51c:	f7fe f962 	bl	80097e4 <HAL_GetTick>
 800b520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b522:	e00a      	b.n	800b53a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b524:	f7fe f95e 	bl	80097e4 <HAL_GetTick>
 800b528:	4602      	mov	r2, r0
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b532:	4293      	cmp	r3, r2
 800b534:	d901      	bls.n	800b53a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b536:	2303      	movs	r3, #3
 800b538:	e053      	b.n	800b5e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b53a:	4b2d      	ldr	r3, [pc, #180]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	f003 020c 	and.w	r2, r3, #12
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	429a      	cmp	r2, r3
 800b54a:	d1eb      	bne.n	800b524 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b54c:	4b27      	ldr	r3, [pc, #156]	; (800b5ec <HAL_RCC_ClockConfig+0x1c4>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f003 030f 	and.w	r3, r3, #15
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	429a      	cmp	r2, r3
 800b558:	d210      	bcs.n	800b57c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b55a:	4b24      	ldr	r3, [pc, #144]	; (800b5ec <HAL_RCC_ClockConfig+0x1c4>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f023 020f 	bic.w	r2, r3, #15
 800b562:	4922      	ldr	r1, [pc, #136]	; (800b5ec <HAL_RCC_ClockConfig+0x1c4>)
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	4313      	orrs	r3, r2
 800b568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b56a:	4b20      	ldr	r3, [pc, #128]	; (800b5ec <HAL_RCC_ClockConfig+0x1c4>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f003 030f 	and.w	r3, r3, #15
 800b572:	683a      	ldr	r2, [r7, #0]
 800b574:	429a      	cmp	r2, r3
 800b576:	d001      	beq.n	800b57c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b578:	2301      	movs	r3, #1
 800b57a:	e032      	b.n	800b5e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f003 0304 	and.w	r3, r3, #4
 800b584:	2b00      	cmp	r3, #0
 800b586:	d008      	beq.n	800b59a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b588:	4b19      	ldr	r3, [pc, #100]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	4916      	ldr	r1, [pc, #88]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b596:	4313      	orrs	r3, r2
 800b598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f003 0308 	and.w	r3, r3, #8
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d009      	beq.n	800b5ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b5a6:	4b12      	ldr	r3, [pc, #72]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	691b      	ldr	r3, [r3, #16]
 800b5b2:	00db      	lsls	r3, r3, #3
 800b5b4:	490e      	ldr	r1, [pc, #56]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b5ba:	f000 f821 	bl	800b600 <HAL_RCC_GetSysClockFreq>
 800b5be:	4601      	mov	r1, r0
 800b5c0:	4b0b      	ldr	r3, [pc, #44]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	091b      	lsrs	r3, r3, #4
 800b5c6:	f003 030f 	and.w	r3, r3, #15
 800b5ca:	4a0a      	ldr	r2, [pc, #40]	; (800b5f4 <HAL_RCC_ClockConfig+0x1cc>)
 800b5cc:	5cd3      	ldrb	r3, [r2, r3]
 800b5ce:	fa21 f303 	lsr.w	r3, r1, r3
 800b5d2:	4a09      	ldr	r2, [pc, #36]	; (800b5f8 <HAL_RCC_ClockConfig+0x1d0>)
 800b5d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b5d6:	4b09      	ldr	r3, [pc, #36]	; (800b5fc <HAL_RCC_ClockConfig+0x1d4>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fe f8be 	bl	800975c <HAL_InitTick>

  return HAL_OK;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	40023c00 	.word	0x40023c00
 800b5f0:	40023800 	.word	0x40023800
 800b5f4:	0800eea8 	.word	0x0800eea8
 800b5f8:	20010050 	.word	0x20010050
 800b5fc:	20011440 	.word	0x20011440

0800b600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b606:	2300      	movs	r3, #0
 800b608:	607b      	str	r3, [r7, #4]
 800b60a:	2300      	movs	r3, #0
 800b60c:	60fb      	str	r3, [r7, #12]
 800b60e:	2300      	movs	r3, #0
 800b610:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800b612:	2300      	movs	r3, #0
 800b614:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b616:	4b50      	ldr	r3, [pc, #320]	; (800b758 <HAL_RCC_GetSysClockFreq+0x158>)
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	f003 030c 	and.w	r3, r3, #12
 800b61e:	2b04      	cmp	r3, #4
 800b620:	d007      	beq.n	800b632 <HAL_RCC_GetSysClockFreq+0x32>
 800b622:	2b08      	cmp	r3, #8
 800b624:	d008      	beq.n	800b638 <HAL_RCC_GetSysClockFreq+0x38>
 800b626:	2b00      	cmp	r3, #0
 800b628:	f040 808d 	bne.w	800b746 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b62c:	4b4b      	ldr	r3, [pc, #300]	; (800b75c <HAL_RCC_GetSysClockFreq+0x15c>)
 800b62e:	60bb      	str	r3, [r7, #8]
      break;
 800b630:	e08c      	b.n	800b74c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b632:	4b4b      	ldr	r3, [pc, #300]	; (800b760 <HAL_RCC_GetSysClockFreq+0x160>)
 800b634:	60bb      	str	r3, [r7, #8]
      break;
 800b636:	e089      	b.n	800b74c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b638:	4b47      	ldr	r3, [pc, #284]	; (800b758 <HAL_RCC_GetSysClockFreq+0x158>)
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b640:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b642:	4b45      	ldr	r3, [pc, #276]	; (800b758 <HAL_RCC_GetSysClockFreq+0x158>)
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d023      	beq.n	800b696 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b64e:	4b42      	ldr	r3, [pc, #264]	; (800b758 <HAL_RCC_GetSysClockFreq+0x158>)
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	099b      	lsrs	r3, r3, #6
 800b654:	f04f 0400 	mov.w	r4, #0
 800b658:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b65c:	f04f 0200 	mov.w	r2, #0
 800b660:	ea03 0501 	and.w	r5, r3, r1
 800b664:	ea04 0602 	and.w	r6, r4, r2
 800b668:	4a3d      	ldr	r2, [pc, #244]	; (800b760 <HAL_RCC_GetSysClockFreq+0x160>)
 800b66a:	fb02 f106 	mul.w	r1, r2, r6
 800b66e:	2200      	movs	r2, #0
 800b670:	fb02 f205 	mul.w	r2, r2, r5
 800b674:	440a      	add	r2, r1
 800b676:	493a      	ldr	r1, [pc, #232]	; (800b760 <HAL_RCC_GetSysClockFreq+0x160>)
 800b678:	fba5 0101 	umull	r0, r1, r5, r1
 800b67c:	1853      	adds	r3, r2, r1
 800b67e:	4619      	mov	r1, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f04f 0400 	mov.w	r4, #0
 800b686:	461a      	mov	r2, r3
 800b688:	4623      	mov	r3, r4
 800b68a:	f7f5 f9e7 	bl	8000a5c <__aeabi_uldivmod>
 800b68e:	4603      	mov	r3, r0
 800b690:	460c      	mov	r4, r1
 800b692:	60fb      	str	r3, [r7, #12]
 800b694:	e049      	b.n	800b72a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b696:	4b30      	ldr	r3, [pc, #192]	; (800b758 <HAL_RCC_GetSysClockFreq+0x158>)
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	099b      	lsrs	r3, r3, #6
 800b69c:	f04f 0400 	mov.w	r4, #0
 800b6a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b6a4:	f04f 0200 	mov.w	r2, #0
 800b6a8:	ea03 0501 	and.w	r5, r3, r1
 800b6ac:	ea04 0602 	and.w	r6, r4, r2
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	4632      	mov	r2, r6
 800b6b4:	f04f 0300 	mov.w	r3, #0
 800b6b8:	f04f 0400 	mov.w	r4, #0
 800b6bc:	0154      	lsls	r4, r2, #5
 800b6be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b6c2:	014b      	lsls	r3, r1, #5
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	4622      	mov	r2, r4
 800b6c8:	1b49      	subs	r1, r1, r5
 800b6ca:	eb62 0206 	sbc.w	r2, r2, r6
 800b6ce:	f04f 0300 	mov.w	r3, #0
 800b6d2:	f04f 0400 	mov.w	r4, #0
 800b6d6:	0194      	lsls	r4, r2, #6
 800b6d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b6dc:	018b      	lsls	r3, r1, #6
 800b6de:	1a5b      	subs	r3, r3, r1
 800b6e0:	eb64 0402 	sbc.w	r4, r4, r2
 800b6e4:	f04f 0100 	mov.w	r1, #0
 800b6e8:	f04f 0200 	mov.w	r2, #0
 800b6ec:	00e2      	lsls	r2, r4, #3
 800b6ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b6f2:	00d9      	lsls	r1, r3, #3
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	4614      	mov	r4, r2
 800b6f8:	195b      	adds	r3, r3, r5
 800b6fa:	eb44 0406 	adc.w	r4, r4, r6
 800b6fe:	f04f 0100 	mov.w	r1, #0
 800b702:	f04f 0200 	mov.w	r2, #0
 800b706:	02a2      	lsls	r2, r4, #10
 800b708:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b70c:	0299      	lsls	r1, r3, #10
 800b70e:	460b      	mov	r3, r1
 800b710:	4614      	mov	r4, r2
 800b712:	4618      	mov	r0, r3
 800b714:	4621      	mov	r1, r4
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f04f 0400 	mov.w	r4, #0
 800b71c:	461a      	mov	r2, r3
 800b71e:	4623      	mov	r3, r4
 800b720:	f7f5 f99c 	bl	8000a5c <__aeabi_uldivmod>
 800b724:	4603      	mov	r3, r0
 800b726:	460c      	mov	r4, r1
 800b728:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b72a:	4b0b      	ldr	r3, [pc, #44]	; (800b758 <HAL_RCC_GetSysClockFreq+0x158>)
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	0c1b      	lsrs	r3, r3, #16
 800b730:	f003 0303 	and.w	r3, r3, #3
 800b734:	3301      	adds	r3, #1
 800b736:	005b      	lsls	r3, r3, #1
 800b738:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b742:	60bb      	str	r3, [r7, #8]
      break;
 800b744:	e002      	b.n	800b74c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b746:	4b05      	ldr	r3, [pc, #20]	; (800b75c <HAL_RCC_GetSysClockFreq+0x15c>)
 800b748:	60bb      	str	r3, [r7, #8]
      break;
 800b74a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b74c:	68bb      	ldr	r3, [r7, #8]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3714      	adds	r7, #20
 800b752:	46bd      	mov	sp, r7
 800b754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b756:	bf00      	nop
 800b758:	40023800 	.word	0x40023800
 800b75c:	00f42400 	.word	0x00f42400
 800b760:	017d7840 	.word	0x017d7840

0800b764 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b764:	b480      	push	{r7}
 800b766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b768:	4b03      	ldr	r3, [pc, #12]	; (800b778 <HAL_RCC_GetHCLKFreq+0x14>)
 800b76a:	681b      	ldr	r3, [r3, #0]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	20010050 	.word	0x20010050

0800b77c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b780:	f7ff fff0 	bl	800b764 <HAL_RCC_GetHCLKFreq>
 800b784:	4601      	mov	r1, r0
 800b786:	4b05      	ldr	r3, [pc, #20]	; (800b79c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	0a9b      	lsrs	r3, r3, #10
 800b78c:	f003 0307 	and.w	r3, r3, #7
 800b790:	4a03      	ldr	r2, [pc, #12]	; (800b7a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b792:	5cd3      	ldrb	r3, [r2, r3]
 800b794:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b798:	4618      	mov	r0, r3
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	40023800 	.word	0x40023800
 800b7a0:	0800eeb8 	.word	0x0800eeb8

0800b7a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b7a8:	f7ff ffdc 	bl	800b764 <HAL_RCC_GetHCLKFreq>
 800b7ac:	4601      	mov	r1, r0
 800b7ae:	4b05      	ldr	r3, [pc, #20]	; (800b7c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	0b5b      	lsrs	r3, r3, #13
 800b7b4:	f003 0307 	and.w	r3, r3, #7
 800b7b8:	4a03      	ldr	r2, [pc, #12]	; (800b7c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b7ba:	5cd3      	ldrb	r3, [r2, r3]
 800b7bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	40023800 	.word	0x40023800
 800b7c8:	0800eeb8 	.word	0x0800eeb8

0800b7cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b088      	sub	sp, #32
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f003 0301 	and.w	r3, r3, #1
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d012      	beq.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b7f0:	4b65      	ldr	r3, [pc, #404]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	4a64      	ldr	r2, [pc, #400]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b7f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b7fa:	6093      	str	r3, [r2, #8]
 800b7fc:	4b62      	ldr	r3, [pc, #392]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b7fe:	689a      	ldr	r2, [r3, #8]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b804:	4960      	ldr	r1, [pc, #384]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b806:	4313      	orrs	r3, r2
 800b808:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d101      	bne.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800b812:	2301      	movs	r3, #1
 800b814:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d017      	beq.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b822:	4b59      	ldr	r3, [pc, #356]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b828:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b830:	4955      	ldr	r1, [pc, #340]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b832:	4313      	orrs	r3, r2
 800b834:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b83c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b840:	d101      	bne.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800b842:	2301      	movs	r3, #1
 800b844:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d101      	bne.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800b84e:	2301      	movs	r3, #1
 800b850:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d017      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b85e:	4b4a      	ldr	r3, [pc, #296]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b864:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b86c:	4946      	ldr	r1, [pc, #280]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b86e:	4313      	orrs	r3, r2
 800b870:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b878:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b87c:	d101      	bne.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800b87e:	2301      	movs	r3, #1
 800b880:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800b88a:	2301      	movs	r3, #1
 800b88c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f003 0320 	and.w	r3, r3, #32
 800b896:	2b00      	cmp	r3, #0
 800b898:	f000 808b 	beq.w	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b89c:	4b3a      	ldr	r3, [pc, #232]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b89e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a0:	4a39      	ldr	r2, [pc, #228]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b8a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8a6:	6413      	str	r3, [r2, #64]	; 0x40
 800b8a8:	4b37      	ldr	r3, [pc, #220]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8b0:	60fb      	str	r3, [r7, #12]
 800b8b2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b8b4:	4b35      	ldr	r3, [pc, #212]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a34      	ldr	r2, [pc, #208]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b8ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8c0:	f7fd ff90 	bl	80097e4 <HAL_GetTick>
 800b8c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b8c6:	e008      	b.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8c8:	f7fd ff8c 	bl	80097e4 <HAL_GetTick>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	2b64      	cmp	r3, #100	; 0x64
 800b8d4:	d901      	bls.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b8d6:	2303      	movs	r3, #3
 800b8d8:	e2ba      	b.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b8da:	4b2c      	ldr	r3, [pc, #176]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d0f0      	beq.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b8e6:	4b28      	ldr	r3, [pc, #160]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b8e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d035      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8fe:	693a      	ldr	r2, [r7, #16]
 800b900:	429a      	cmp	r2, r3
 800b902:	d02e      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b904:	4b20      	ldr	r3, [pc, #128]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b90c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b90e:	4b1e      	ldr	r3, [pc, #120]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b912:	4a1d      	ldr	r2, [pc, #116]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b918:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b91a:	4b1b      	ldr	r3, [pc, #108]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b91c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b91e:	4a1a      	ldr	r2, [pc, #104]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b924:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b926:	4a18      	ldr	r2, [pc, #96]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b92c:	4b16      	ldr	r3, [pc, #88]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b92e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b930:	f003 0301 	and.w	r3, r3, #1
 800b934:	2b01      	cmp	r3, #1
 800b936:	d114      	bne.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b938:	f7fd ff54 	bl	80097e4 <HAL_GetTick>
 800b93c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b93e:	e00a      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b940:	f7fd ff50 	bl	80097e4 <HAL_GetTick>
 800b944:	4602      	mov	r2, r0
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b94e:	4293      	cmp	r3, r2
 800b950:	d901      	bls.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800b952:	2303      	movs	r3, #3
 800b954:	e27c      	b.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b956:	4b0c      	ldr	r3, [pc, #48]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b95a:	f003 0302 	and.w	r3, r3, #2
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d0ee      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b96a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b96e:	d111      	bne.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800b970:	4b05      	ldr	r3, [pc, #20]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800b97c:	4b04      	ldr	r3, [pc, #16]	; (800b990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b97e:	400b      	ands	r3, r1
 800b980:	4901      	ldr	r1, [pc, #4]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b982:	4313      	orrs	r3, r2
 800b984:	608b      	str	r3, [r1, #8]
 800b986:	e00b      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800b988:	40023800 	.word	0x40023800
 800b98c:	40007000 	.word	0x40007000
 800b990:	0ffffcff 	.word	0x0ffffcff
 800b994:	4ba3      	ldr	r3, [pc, #652]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	4aa2      	ldr	r2, [pc, #648]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800b99a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b99e:	6093      	str	r3, [r2, #8]
 800b9a0:	4ba0      	ldr	r3, [pc, #640]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800b9a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9ac:	499d      	ldr	r1, [pc, #628]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f003 0310 	and.w	r3, r3, #16
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d010      	beq.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b9be:	4b99      	ldr	r3, [pc, #612]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800b9c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9c4:	4a97      	ldr	r2, [pc, #604]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800b9c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800b9ce:	4b95      	ldr	r3, [pc, #596]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800b9d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d8:	4992      	ldr	r1, [pc, #584]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00a      	beq.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b9ec:	4b8d      	ldr	r3, [pc, #564]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800b9ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9fa:	498a      	ldr	r1, [pc, #552]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00a      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ba0e:	4b85      	ldr	r3, [pc, #532]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800ba10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba1c:	4981      	ldr	r1, [pc, #516]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00a      	beq.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ba30:	4b7c      	ldr	r3, [pc, #496]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800ba32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba3e:	4979      	ldr	r1, [pc, #484]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800ba40:	4313      	orrs	r3, r2
 800ba42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00a      	beq.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ba52:	4b74      	ldr	r3, [pc, #464]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800ba54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba58:	f023 0203 	bic.w	r2, r3, #3
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba60:	4970      	ldr	r1, [pc, #448]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800ba62:	4313      	orrs	r3, r2
 800ba64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00a      	beq.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ba74:	4b6b      	ldr	r3, [pc, #428]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800ba76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba7a:	f023 020c 	bic.w	r2, r3, #12
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba82:	4968      	ldr	r1, [pc, #416]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800ba84:	4313      	orrs	r3, r2
 800ba86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00a      	beq.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ba96:	4b63      	ldr	r3, [pc, #396]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800ba98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baa4:	495f      	ldr	r1, [pc, #380]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800baa6:	4313      	orrs	r3, r2
 800baa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00a      	beq.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bab8:	4b5a      	ldr	r3, [pc, #360]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800baba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800babe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bac6:	4957      	ldr	r1, [pc, #348]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800bac8:	4313      	orrs	r3, r2
 800baca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00a      	beq.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bada:	4b52      	ldr	r3, [pc, #328]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800badc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bae0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bae8:	494e      	ldr	r1, [pc, #312]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800baea:	4313      	orrs	r3, r2
 800baec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00a      	beq.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800bafc:	4b49      	ldr	r3, [pc, #292]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800bafe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb0a:	4946      	ldr	r1, [pc, #280]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00a      	beq.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800bb1e:	4b41      	ldr	r3, [pc, #260]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800bb20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb2c:	493d      	ldr	r1, [pc, #244]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00a      	beq.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800bb40:	4b38      	ldr	r3, [pc, #224]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800bb42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb4e:	4935      	ldr	r1, [pc, #212]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800bb50:	4313      	orrs	r3, r2
 800bb52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d011      	beq.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bb62:	4b30      	ldr	r3, [pc, #192]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800bb64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb70:	492c      	ldr	r1, [pc, #176]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800bb72:	4313      	orrs	r3, r2
 800bb74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb80:	d101      	bne.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800bb82:	2301      	movs	r3, #1
 800bb84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00a      	beq.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb92:	4b24      	ldr	r3, [pc, #144]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800bb94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb98:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bba0:	4920      	ldr	r1, [pc, #128]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800bba2:	4313      	orrs	r3, r2
 800bba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00a      	beq.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bbb4:	4b1b      	ldr	r3, [pc, #108]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800bbb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbc2:	4918      	ldr	r1, [pc, #96]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00a      	beq.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800bbd6:	4b13      	ldr	r3, [pc, #76]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800bbd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbdc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbe4:	490f      	ldr	r1, [pc, #60]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d005      	beq.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x432>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbfa:	f040 809c 	bne.w	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bbfe:	4b09      	ldr	r3, [pc, #36]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a08      	ldr	r2, [pc, #32]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800bc04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bc08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc0a:	f7fd fdeb 	bl	80097e4 <HAL_GetTick>
 800bc0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bc10:	e00a      	b.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bc12:	f7fd fde7 	bl	80097e4 <HAL_GetTick>
 800bc16:	4602      	mov	r2, r0
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	2b64      	cmp	r3, #100	; 0x64
 800bc1e:	d903      	bls.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bc20:	2303      	movs	r3, #3
 800bc22:	e115      	b.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800bc24:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bc28:	4b8b      	ldr	r3, [pc, #556]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d1ee      	bne.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f003 0301 	and.w	r3, r3, #1
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d017      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d113      	bne.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bc48:	4b83      	ldr	r3, [pc, #524]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bc4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc4e:	0e1b      	lsrs	r3, r3, #24
 800bc50:	f003 030f 	and.w	r3, r3, #15
 800bc54:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	019a      	lsls	r2, r3, #6
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	061b      	lsls	r3, r3, #24
 800bc60:	431a      	orrs	r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	071b      	lsls	r3, r3, #28
 800bc68:	497b      	ldr	r1, [pc, #492]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d004      	beq.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc84:	d00a      	beq.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d024      	beq.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc9a:	d11f      	bne.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bc9c:	4b6e      	ldr	r3, [pc, #440]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bc9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bca2:	0f1b      	lsrs	r3, r3, #28
 800bca4:	f003 0307 	and.w	r3, r3, #7
 800bca8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	019a      	lsls	r2, r3, #6
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	061b      	lsls	r3, r3, #24
 800bcb6:	431a      	orrs	r2, r3
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	071b      	lsls	r3, r3, #28
 800bcbc:	4966      	ldr	r1, [pc, #408]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bcc4:	4b64      	ldr	r3, [pc, #400]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bcc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcca:	f023 021f 	bic.w	r2, r3, #31
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	69db      	ldr	r3, [r3, #28]
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	4960      	ldr	r1, [pc, #384]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d00d      	beq.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	019a      	lsls	r2, r3, #6
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	061b      	lsls	r3, r3, #24
 800bcf4:	431a      	orrs	r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	071b      	lsls	r3, r3, #28
 800bcfc:	4956      	ldr	r1, [pc, #344]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bd04:	4b54      	ldr	r3, [pc, #336]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a53      	ldr	r2, [pc, #332]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bd0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd10:	f7fd fd68 	bl	80097e4 <HAL_GetTick>
 800bd14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bd16:	e008      	b.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bd18:	f7fd fd64 	bl	80097e4 <HAL_GetTick>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	1ad3      	subs	r3, r2, r3
 800bd22:	2b64      	cmp	r3, #100	; 0x64
 800bd24:	d901      	bls.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bd26:	2303      	movs	r3, #3
 800bd28:	e092      	b.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bd2a:	4b4b      	ldr	r3, [pc, #300]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0f0      	beq.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	f040 8088 	bne.w	800be4e <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bd3e:	4b46      	ldr	r3, [pc, #280]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a45      	ldr	r2, [pc, #276]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bd44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd4a:	f7fd fd4b 	bl	80097e4 <HAL_GetTick>
 800bd4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bd50:	e008      	b.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bd52:	f7fd fd47 	bl	80097e4 <HAL_GetTick>
 800bd56:	4602      	mov	r2, r0
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	1ad3      	subs	r3, r2, r3
 800bd5c:	2b64      	cmp	r3, #100	; 0x64
 800bd5e:	d901      	bls.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bd60:	2303      	movs	r3, #3
 800bd62:	e075      	b.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bd64:	4b3c      	ldr	r3, [pc, #240]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd70:	d0ef      	beq.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d003      	beq.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d009      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d024      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d120      	bne.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bd9a:	4b2f      	ldr	r3, [pc, #188]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bd9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bda0:	0c1b      	lsrs	r3, r3, #16
 800bda2:	f003 0303 	and.w	r3, r3, #3
 800bda6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	019a      	lsls	r2, r3, #6
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	041b      	lsls	r3, r3, #16
 800bdb2:	431a      	orrs	r2, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	695b      	ldr	r3, [r3, #20]
 800bdb8:	061b      	lsls	r3, r3, #24
 800bdba:	4927      	ldr	r1, [pc, #156]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bdc2:	4b25      	ldr	r3, [pc, #148]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bdc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6a1b      	ldr	r3, [r3, #32]
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	021b      	lsls	r3, r3, #8
 800bdd4:	4920      	ldr	r1, [pc, #128]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d018      	beq.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdf0:	d113      	bne.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bdf2:	4b19      	ldr	r3, [pc, #100]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800bdf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdf8:	0e1b      	lsrs	r3, r3, #24
 800bdfa:	f003 030f 	and.w	r3, r3, #15
 800bdfe:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	691b      	ldr	r3, [r3, #16]
 800be04:	019a      	lsls	r2, r3, #6
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	699b      	ldr	r3, [r3, #24]
 800be0a:	041b      	lsls	r3, r3, #16
 800be0c:	431a      	orrs	r2, r3
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	061b      	lsls	r3, r3, #24
 800be12:	4911      	ldr	r1, [pc, #68]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800be14:	4313      	orrs	r3, r2
 800be16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800be1a:	4b0f      	ldr	r3, [pc, #60]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a0e      	ldr	r2, [pc, #56]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800be20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be26:	f7fd fcdd 	bl	80097e4 <HAL_GetTick>
 800be2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800be2c:	e008      	b.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800be2e:	f7fd fcd9 	bl	80097e4 <HAL_GetTick>
 800be32:	4602      	mov	r2, r0
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	1ad3      	subs	r3, r2, r3
 800be38:	2b64      	cmp	r3, #100	; 0x64
 800be3a:	d901      	bls.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800be3c:	2303      	movs	r3, #3
 800be3e:	e007      	b.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800be40:	4b05      	ldr	r3, [pc, #20]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be4c:	d1ef      	bne.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 800be4e:	2300      	movs	r3, #0
}
 800be50:	4618      	mov	r0, r3
 800be52:	3720      	adds	r7, #32
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	40023800 	.word	0x40023800

0800be5c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d101      	bne.n	800be6e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800be6a:	2301      	movs	r3, #1
 800be6c:	e01c      	b.n	800bea8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	795b      	ldrb	r3, [r3, #5]
 800be72:	b2db      	uxtb	r3, r3
 800be74:	2b00      	cmp	r3, #0
 800be76:	d105      	bne.n	800be84 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f7fb fee0 	bl	8007c44 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2202      	movs	r2, #2
 800be88:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f042 0204 	orr.w	r2, r2, #4
 800be98:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2201      	movs	r2, #1
 800be9e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800bea6:	2300      	movs	r3, #0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d101      	bne.n	800bec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bebe:	2301      	movs	r3, #1
 800bec0:	e084      	b.n	800bfcc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d106      	bne.n	800bee2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f7fb fed1 	bl	8007c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2202      	movs	r2, #2
 800bee6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bef8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf02:	d902      	bls.n	800bf0a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bf04:	2300      	movs	r3, #0
 800bf06:	60fb      	str	r3, [r7, #12]
 800bf08:	e002      	b.n	800bf10 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bf0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf0e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bf18:	d007      	beq.n	800bf2a <HAL_SPI_Init+0x7a>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf22:	d002      	beq.n	800bf2a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d10b      	bne.n	800bf4a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf3a:	d903      	bls.n	800bf44 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2202      	movs	r2, #2
 800bf40:	631a      	str	r2, [r3, #48]	; 0x30
 800bf42:	e002      	b.n	800bf4a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2201      	movs	r2, #1
 800bf48:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	685a      	ldr	r2, [r3, #4]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	431a      	orrs	r2, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	691b      	ldr	r3, [r3, #16]
 800bf58:	431a      	orrs	r2, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	431a      	orrs	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf68:	431a      	orrs	r2, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	69db      	ldr	r3, [r3, #28]
 800bf6e:	431a      	orrs	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a1b      	ldr	r3, [r3, #32]
 800bf74:	ea42 0103 	orr.w	r1, r2, r3
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	430a      	orrs	r2, r1
 800bf82:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	699b      	ldr	r3, [r3, #24]
 800bf88:	0c1b      	lsrs	r3, r3, #16
 800bf8a:	f003 0204 	and.w	r2, r3, #4
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf92:	431a      	orrs	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf98:	431a      	orrs	r2, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	ea42 0103 	orr.w	r1, r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	430a      	orrs	r2, r1
 800bfaa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	69da      	ldr	r2, [r3, #28]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bfba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b086      	sub	sp, #24
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d101      	bne.n	800bff4 <HAL_SPI_Transmit_DMA+0x20>
 800bff0:	2302      	movs	r3, #2
 800bff2:	e0d0      	b.n	800c196 <HAL_SPI_Transmit_DMA+0x1c2>
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2201      	movs	r2, #1
 800bff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c002:	b2db      	uxtb	r3, r3
 800c004:	2b01      	cmp	r3, #1
 800c006:	d002      	beq.n	800c00e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800c008:	2302      	movs	r3, #2
 800c00a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c00c:	e0be      	b.n	800c18c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d002      	beq.n	800c01a <HAL_SPI_Transmit_DMA+0x46>
 800c014:	88fb      	ldrh	r3, [r7, #6]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d102      	bne.n	800c020 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c01e:	e0b5      	b.n	800c18c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2203      	movs	r2, #3
 800c024:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2200      	movs	r2, #0
 800c02c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	68ba      	ldr	r2, [r7, #8]
 800c032:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	88fa      	ldrh	r2, [r7, #6]
 800c038:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	88fa      	ldrh	r2, [r7, #6]
 800c03e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2200      	movs	r2, #0
 800c044:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2200      	movs	r2, #0
 800c04a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2200      	movs	r2, #0
 800c050:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2200      	movs	r2, #0
 800c056:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2200      	movs	r2, #0
 800c05e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c06a:	d107      	bne.n	800c07c <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c07a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c080:	4a47      	ldr	r2, [pc, #284]	; (800c1a0 <HAL_SPI_Transmit_DMA+0x1cc>)
 800c082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c088:	4a46      	ldr	r2, [pc, #280]	; (800c1a4 <HAL_SPI_Transmit_DMA+0x1d0>)
 800c08a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c090:	4a45      	ldr	r2, [pc, #276]	; (800c1a8 <HAL_SPI_Transmit_DMA+0x1d4>)
 800c092:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c098:	2200      	movs	r2, #0
 800c09a:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	685a      	ldr	r2, [r3, #4]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c0aa:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c0b4:	d82d      	bhi.n	800c112 <HAL_SPI_Transmit_DMA+0x13e>
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ba:	699b      	ldr	r3, [r3, #24]
 800c0bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0c0:	d127      	bne.n	800c112 <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	f003 0301 	and.w	r3, r3, #1
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10f      	bne.n	800c0f0 <HAL_SPI_Transmit_DMA+0x11c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	685a      	ldr	r2, [r3, #4]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c0de:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	085b      	lsrs	r3, r3, #1
 800c0e8:	b29a      	uxth	r2, r3
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c0ee:	e010      	b.n	800c112 <HAL_SPI_Transmit_DMA+0x13e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	685a      	ldr	r2, [r3, #4]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c0fe:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c104:	b29b      	uxth	r3, r3
 800c106:	085b      	lsrs	r3, r3, #1
 800c108:	b29b      	uxth	r3, r3
 800c10a:	3301      	adds	r3, #1
 800c10c:	b29a      	uxth	r2, r3
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c11a:	4619      	mov	r1, r3
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	330c      	adds	r3, #12
 800c122:	461a      	mov	r2, r3
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c128:	b29b      	uxth	r3, r3
 800c12a:	f7fe f9ab 	bl	800a484 <HAL_DMA_Start_IT>
 800c12e:	4603      	mov	r3, r0
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00c      	beq.n	800c14e <HAL_SPI_Transmit_DMA+0x17a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c138:	f043 0210 	orr.w	r2, r3, #16
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c140:	2301      	movs	r3, #1
 800c142:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2201      	movs	r2, #1
 800c148:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c14c:	e01e      	b.n	800c18c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c158:	2b40      	cmp	r3, #64	; 0x40
 800c15a:	d007      	beq.n	800c16c <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c16a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	685a      	ldr	r2, [r3, #4]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f042 0220 	orr.w	r2, r2, #32
 800c17a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	685a      	ldr	r2, [r3, #4]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f042 0202 	orr.w	r2, r2, #2
 800c18a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2200      	movs	r2, #0
 800c190:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c194:	7dfb      	ldrb	r3, [r7, #23]
}
 800c196:	4618      	mov	r0, r3
 800c198:	3718      	adds	r7, #24
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	0800c8c1 	.word	0x0800c8c1
 800c1a4:	0800c701 	.word	0x0800c701
 800c1a8:	0800c915 	.word	0x0800c915

0800c1ac <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b086      	sub	sp, #24
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	607a      	str	r2, [r7, #4]
 800c1b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d101      	bne.n	800c1cc <HAL_SPI_TransmitReceive_DMA+0x20>
 800c1c8:	2302      	movs	r3, #2
 800c1ca:	e16c      	b.n	800c4a6 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c1da:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800c1e2:	7dbb      	ldrb	r3, [r7, #22]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d00d      	beq.n	800c204 <HAL_SPI_TransmitReceive_DMA+0x58>
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1ee:	d106      	bne.n	800c1fe <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d102      	bne.n	800c1fe <HAL_SPI_TransmitReceive_DMA+0x52>
 800c1f8:	7dbb      	ldrb	r3, [r7, #22]
 800c1fa:	2b04      	cmp	r3, #4
 800c1fc:	d002      	beq.n	800c204 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800c1fe:	2302      	movs	r3, #2
 800c200:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c202:	e14b      	b.n	800c49c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d005      	beq.n	800c216 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d002      	beq.n	800c216 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c210:	887b      	ldrh	r3, [r7, #2]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d102      	bne.n	800c21c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800c216:	2301      	movs	r3, #1
 800c218:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c21a:	e13f      	b.n	800c49c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c222:	b2db      	uxtb	r3, r3
 800c224:	2b04      	cmp	r3, #4
 800c226:	d003      	beq.n	800c230 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2205      	movs	r2, #5
 800c22c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2200      	movs	r2, #0
 800c234:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	68ba      	ldr	r2, [r7, #8]
 800c23a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	887a      	ldrh	r2, [r7, #2]
 800c240:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	887a      	ldrh	r2, [r7, #2]
 800c246:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	887a      	ldrh	r2, [r7, #2]
 800c252:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	887a      	ldrh	r2, [r7, #2]
 800c25a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2200      	movs	r2, #0
 800c262:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2200      	movs	r2, #0
 800c268:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	685a      	ldr	r2, [r3, #4]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800c278:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c282:	d908      	bls.n	800c296 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	685a      	ldr	r2, [r3, #4]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c292:	605a      	str	r2, [r3, #4]
 800c294:	e06f      	b.n	800c376 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c2a4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2aa:	699b      	ldr	r3, [r3, #24]
 800c2ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2b0:	d126      	bne.n	800c300 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c2b6:	f003 0301 	and.w	r3, r3, #1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d10f      	bne.n	800c2de <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	685a      	ldr	r2, [r3, #4]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c2cc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	085b      	lsrs	r3, r3, #1
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c2dc:	e010      	b.n	800c300 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	685a      	ldr	r2, [r3, #4]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2ec:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	085b      	lsrs	r3, r3, #1
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	b29a      	uxth	r2, r3
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c304:	699b      	ldr	r3, [r3, #24]
 800c306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c30a:	d134      	bne.n	800c376 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	685a      	ldr	r2, [r3, #4]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c31a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c322:	b29b      	uxth	r3, r3
 800c324:	f003 0301 	and.w	r3, r3, #1
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d111      	bne.n	800c350 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	685a      	ldr	r2, [r3, #4]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c33a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c342:	b29b      	uxth	r3, r3
 800c344:	085b      	lsrs	r3, r3, #1
 800c346:	b29a      	uxth	r2, r3
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c34e:	e012      	b.n	800c376 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	685a      	ldr	r2, [r3, #4]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c35e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c366:	b29b      	uxth	r3, r3
 800c368:	085b      	lsrs	r3, r3, #1
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	3301      	adds	r3, #1
 800c36e:	b29a      	uxth	r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	2b04      	cmp	r3, #4
 800c380:	d108      	bne.n	800c394 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c386:	4a4a      	ldr	r2, [pc, #296]	; (800c4b0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800c388:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c38e:	4a49      	ldr	r2, [pc, #292]	; (800c4b4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800c390:	63da      	str	r2, [r3, #60]	; 0x3c
 800c392:	e007      	b.n	800c3a4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c398:	4a47      	ldr	r2, [pc, #284]	; (800c4b8 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800c39a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3a0:	4a46      	ldr	r2, [pc, #280]	; (800c4bc <HAL_SPI_TransmitReceive_DMA+0x310>)
 800c3a2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3a8:	4a45      	ldr	r2, [pc, #276]	; (800c4c0 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800c3aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	330c      	adds	r3, #12
 800c3be:	4619      	mov	r1, r3
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	f7fe f859 	bl	800a484 <HAL_DMA_Start_IT>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00c      	beq.n	800c3f2 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3dc:	f043 0210 	orr.w	r2, r3, #16
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c3f0:	e054      	b.n	800c49c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	685a      	ldr	r2, [r3, #4]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f042 0201 	orr.w	r2, r2, #1
 800c400:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c406:	2200      	movs	r2, #0
 800c408:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c40e:	2200      	movs	r2, #0
 800c410:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c416:	2200      	movs	r2, #0
 800c418:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c41e:	2200      	movs	r2, #0
 800c420:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42a:	4619      	mov	r1, r3
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	330c      	adds	r3, #12
 800c432:	461a      	mov	r2, r3
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c438:	b29b      	uxth	r3, r3
 800c43a:	f7fe f823 	bl	800a484 <HAL_DMA_Start_IT>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d00c      	beq.n	800c45e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c448:	f043 0210 	orr.w	r2, r3, #16
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c450:	2301      	movs	r3, #1
 800c452:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2201      	movs	r2, #1
 800c458:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c45c:	e01e      	b.n	800c49c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c468:	2b40      	cmp	r3, #64	; 0x40
 800c46a:	d007      	beq.n	800c47c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c47a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	685a      	ldr	r2, [r3, #4]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f042 0220 	orr.w	r2, r2, #32
 800c48a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	685a      	ldr	r2, [r3, #4]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f042 0202 	orr.w	r2, r2, #2
 800c49a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c4a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3718      	adds	r7, #24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	0800c8dd 	.word	0x0800c8dd
 800c4b4:	0800c7a9 	.word	0x0800c7a9
 800c4b8:	0800c8f9 	.word	0x0800c8f9
 800c4bc:	0800c82f 	.word	0x0800c82f
 800c4c0:	0800c915 	.word	0x0800c915

0800c4c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
inline void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b088      	sub	sp, #32
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	099b      	lsrs	r3, r3, #6
 800c4e0:	f003 0301 	and.w	r3, r3, #1
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d10f      	bne.n	800c508 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00a      	beq.n	800c508 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c4f2:	69fb      	ldr	r3, [r7, #28]
 800c4f4:	099b      	lsrs	r3, r3, #6
 800c4f6:	f003 0301 	and.w	r3, r3, #1
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d004      	beq.n	800c508 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	4798      	blx	r3
    return;
 800c506:	e0d8      	b.n	800c6ba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c508:	69bb      	ldr	r3, [r7, #24]
 800c50a:	085b      	lsrs	r3, r3, #1
 800c50c:	f003 0301 	and.w	r3, r3, #1
 800c510:	2b00      	cmp	r3, #0
 800c512:	d00a      	beq.n	800c52a <HAL_SPI_IRQHandler+0x66>
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	09db      	lsrs	r3, r3, #7
 800c518:	f003 0301 	and.w	r3, r3, #1
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d004      	beq.n	800c52a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	4798      	blx	r3
    return;
 800c528:	e0c7      	b.n	800c6ba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	095b      	lsrs	r3, r3, #5
 800c52e:	f003 0301 	and.w	r3, r3, #1
 800c532:	2b00      	cmp	r3, #0
 800c534:	d10c      	bne.n	800c550 <HAL_SPI_IRQHandler+0x8c>
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	099b      	lsrs	r3, r3, #6
 800c53a:	f003 0301 	and.w	r3, r3, #1
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d106      	bne.n	800c550 <HAL_SPI_IRQHandler+0x8c>
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	0a1b      	lsrs	r3, r3, #8
 800c546:	f003 0301 	and.w	r3, r3, #1
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	f000 80b5 	beq.w	800c6ba <HAL_SPI_IRQHandler+0x1f6>
 800c550:	69fb      	ldr	r3, [r7, #28]
 800c552:	095b      	lsrs	r3, r3, #5
 800c554:	f003 0301 	and.w	r3, r3, #1
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f000 80ae 	beq.w	800c6ba <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c55e:	69bb      	ldr	r3, [r7, #24]
 800c560:	099b      	lsrs	r3, r3, #6
 800c562:	f003 0301 	and.w	r3, r3, #1
 800c566:	2b00      	cmp	r3, #0
 800c568:	d023      	beq.n	800c5b2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c570:	b2db      	uxtb	r3, r3
 800c572:	2b03      	cmp	r3, #3
 800c574:	d011      	beq.n	800c59a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c57a:	f043 0204 	orr.w	r2, r3, #4
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c582:	2300      	movs	r3, #0
 800c584:	617b      	str	r3, [r7, #20]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	617b      	str	r3, [r7, #20]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	617b      	str	r3, [r7, #20]
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	e00b      	b.n	800c5b2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c59a:	2300      	movs	r3, #0
 800c59c:	613b      	str	r3, [r7, #16]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	68db      	ldr	r3, [r3, #12]
 800c5a4:	613b      	str	r3, [r7, #16]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	613b      	str	r3, [r7, #16]
 800c5ae:	693b      	ldr	r3, [r7, #16]
        return;
 800c5b0:	e083      	b.n	800c6ba <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	095b      	lsrs	r3, r3, #5
 800c5b6:	f003 0301 	and.w	r3, r3, #1
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d014      	beq.n	800c5e8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5c2:	f043 0201 	orr.w	r2, r3, #1
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	60fb      	str	r3, [r7, #12]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	60fb      	str	r3, [r7, #12]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5e4:	601a      	str	r2, [r3, #0]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	0a1b      	lsrs	r3, r3, #8
 800c5ec:	f003 0301 	and.w	r3, r3, #1
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00c      	beq.n	800c60e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5f8:	f043 0208 	orr.w	r2, r3, #8
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c600:	2300      	movs	r3, #0
 800c602:	60bb      	str	r3, [r7, #8]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	60bb      	str	r3, [r7, #8]
 800c60c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c612:	2b00      	cmp	r3, #0
 800c614:	d050      	beq.n	800c6b8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	685a      	ldr	r2, [r3, #4]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c624:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2201      	movs	r2, #1
 800c62a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	f003 0302 	and.w	r3, r3, #2
 800c634:	2b00      	cmp	r3, #0
 800c636:	d104      	bne.n	800c642 <HAL_SPI_IRQHandler+0x17e>
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	f003 0301 	and.w	r3, r3, #1
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d034      	beq.n	800c6ac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	685a      	ldr	r2, [r3, #4]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f022 0203 	bic.w	r2, r2, #3
 800c650:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c656:	2b00      	cmp	r3, #0
 800c658:	d011      	beq.n	800c67e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c65e:	4a18      	ldr	r2, [pc, #96]	; (800c6c0 <HAL_SPI_IRQHandler+0x1fc>)
 800c660:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c666:	4618      	mov	r0, r3
 800c668:	f7fd ff6c 	bl	800a544 <HAL_DMA_Abort_IT>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d005      	beq.n	800c67e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c676:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c682:	2b00      	cmp	r3, #0
 800c684:	d016      	beq.n	800c6b4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c68a:	4a0d      	ldr	r2, [pc, #52]	; (800c6c0 <HAL_SPI_IRQHandler+0x1fc>)
 800c68c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c692:	4618      	mov	r0, r3
 800c694:	f7fd ff56 	bl	800a544 <HAL_DMA_Abort_IT>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d00a      	beq.n	800c6b4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800c6aa:	e003      	b.n	800c6b4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7fa f9f7 	bl	8006aa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c6b2:	e000      	b.n	800c6b6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c6b4:	bf00      	nop
    return;
 800c6b6:	bf00      	nop
 800c6b8:	bf00      	nop
  }
}
 800c6ba:	3720      	adds	r7, #32
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}
 800c6c0:	0800c955 	.word	0x0800c955

0800c6c4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800c6cc:	bf00      	nop
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800c6e0:	bf00      	nop
 800c6e2:	370c      	adds	r7, #12
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800c6f4:	bf00      	nop
 800c6f6:	370c      	adds	r7, #12
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b086      	sub	sp, #24
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c70e:	f7fd f869 	bl	80097e4 <HAL_GetTick>
 800c712:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c71e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c722:	d03b      	beq.n	800c79c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	685a      	ldr	r2, [r3, #4]
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f022 0220 	bic.w	r2, r2, #32
 800c732:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	685a      	ldr	r2, [r3, #4]
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f022 0202 	bic.w	r2, r2, #2
 800c742:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c744:	693a      	ldr	r2, [r7, #16]
 800c746:	2164      	movs	r1, #100	; 0x64
 800c748:	6978      	ldr	r0, [r7, #20]
 800c74a:	f000 fa47 	bl	800cbdc <SPI_EndRxTxTransaction>
 800c74e:	4603      	mov	r3, r0
 800c750:	2b00      	cmp	r3, #0
 800c752:	d005      	beq.n	800c760 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c758:	f043 0220 	orr.w	r2, r3, #32
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	689b      	ldr	r3, [r3, #8]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d10a      	bne.n	800c77e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c768:	2300      	movs	r3, #0
 800c76a:	60fb      	str	r3, [r7, #12]
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68db      	ldr	r3, [r3, #12]
 800c772:	60fb      	str	r3, [r7, #12]
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	60fb      	str	r3, [r7, #12]
 800c77c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	2200      	movs	r2, #0
 800c782:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	2201      	movs	r2, #1
 800c788:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c790:	2b00      	cmp	r3, #0
 800c792:	d003      	beq.n	800c79c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c794:	6978      	ldr	r0, [r7, #20]
 800c796:	f7fa f983 	bl	8006aa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c79a:	e002      	b.n	800c7a2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800c79c:	6978      	ldr	r0, [r7, #20]
 800c79e:	f7fa f991 	bl	8006ac4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c7a2:	3718      	adds	r7, #24
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b4:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c7b6:	f7fd f815 	bl	80097e4 <HAL_GetTick>
 800c7ba:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7ca:	d02a      	beq.n	800c822 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	685a      	ldr	r2, [r3, #4]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f022 0220 	bic.w	r2, r2, #32
 800c7da:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	685a      	ldr	r2, [r3, #4]
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f022 0203 	bic.w	r2, r2, #3
 800c7ea:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c7ec:	68ba      	ldr	r2, [r7, #8]
 800c7ee:	2164      	movs	r1, #100	; 0x64
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f000 f99b 	bl	800cb2c <SPI_EndRxTransaction>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d002      	beq.n	800c802 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2220      	movs	r2, #32
 800c800:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2200      	movs	r2, #0
 800c806:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2201      	movs	r2, #1
 800c80e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c816:	2b00      	cmp	r3, #0
 800c818:	d003      	beq.n	800c822 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f7fa f940 	bl	8006aa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c820:	e002      	b.n	800c828 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800c822:	68f8      	ldr	r0, [r7, #12]
 800c824:	f7fa f960 	bl	8006ae8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c828:	3710      	adds	r7, #16
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	b084      	sub	sp, #16
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83a:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c83c:	f7fc ffd2 	bl	80097e4 <HAL_GetTick>
 800c840:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c84c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c850:	d030      	beq.n	800c8b4 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	685a      	ldr	r2, [r3, #4]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f022 0220 	bic.w	r2, r2, #32
 800c860:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c862:	68ba      	ldr	r2, [r7, #8]
 800c864:	2164      	movs	r1, #100	; 0x64
 800c866:	68f8      	ldr	r0, [r7, #12]
 800c868:	f000 f9b8 	bl	800cbdc <SPI_EndRxTxTransaction>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d005      	beq.n	800c87e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c876:	f043 0220 	orr.w	r2, r3, #32
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	685a      	ldr	r2, [r3, #4]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f022 0203 	bic.w	r2, r2, #3
 800c88c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2200      	movs	r2, #0
 800c892:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2200      	movs	r2, #0
 800c898:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d003      	beq.n	800c8b4 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f7fa f8f7 	bl	8006aa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c8b2:	e002      	b.n	800c8ba <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	f7fa f929 	bl	8006b0c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c8ba:	3710      	adds	r7, #16
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8cc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	f7ff fef8 	bl	800c6c4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c8d4:	bf00      	nop
 800c8d6:	3710      	adds	r7, #16
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	f7ff fef4 	bl	800c6d8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c8f0:	bf00      	nop
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c904:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	f7ff fef0 	bl	800c6ec <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c90c:	bf00      	nop
 800c90e:	3710      	adds	r7, #16
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c920:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	685a      	ldr	r2, [r3, #4]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f022 0203 	bic.w	r2, r2, #3
 800c930:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c936:	f043 0210 	orr.w	r2, r3, #16
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2201      	movs	r2, #1
 800c942:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	f7fa f8aa 	bl	8006aa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c94c:	bf00      	nop
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c960:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2200      	movs	r2, #0
 800c966:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2200      	movs	r2, #0
 800c96e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f7fa f895 	bl	8006aa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c976:	bf00      	nop
 800c978:	3710      	adds	r7, #16
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b084      	sub	sp, #16
 800c982:	af00      	add	r7, sp, #0
 800c984:	60f8      	str	r0, [r7, #12]
 800c986:	60b9      	str	r1, [r7, #8]
 800c988:	603b      	str	r3, [r7, #0]
 800c98a:	4613      	mov	r3, r2
 800c98c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c98e:	e04c      	b.n	800ca2a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c996:	d048      	beq.n	800ca2a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c998:	f7fc ff24 	bl	80097e4 <HAL_GetTick>
 800c99c:	4602      	mov	r2, r0
 800c99e:	69bb      	ldr	r3, [r7, #24]
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	683a      	ldr	r2, [r7, #0]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d902      	bls.n	800c9ae <SPI_WaitFlagStateUntilTimeout+0x30>
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d13d      	bne.n	800ca2a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	685a      	ldr	r2, [r3, #4]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c9bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c9c6:	d111      	bne.n	800c9ec <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9d0:	d004      	beq.n	800c9dc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	689b      	ldr	r3, [r3, #8]
 800c9d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9da:	d107      	bne.n	800c9ec <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9f4:	d10f      	bne.n	800ca16 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ca04:	601a      	str	r2, [r3, #0]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ca14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2201      	movs	r2, #1
 800ca1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ca26:	2303      	movs	r3, #3
 800ca28:	e00f      	b.n	800ca4a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	689a      	ldr	r2, [r3, #8]
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	4013      	ands	r3, r2
 800ca34:	68ba      	ldr	r2, [r7, #8]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	bf0c      	ite	eq
 800ca3a:	2301      	moveq	r3, #1
 800ca3c:	2300      	movne	r3, #0
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	461a      	mov	r2, r3
 800ca42:	79fb      	ldrb	r3, [r7, #7]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d1a3      	bne.n	800c990 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ca48:	2300      	movs	r3, #0
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3710      	adds	r7, #16
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ca52:	b580      	push	{r7, lr}
 800ca54:	b084      	sub	sp, #16
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	60f8      	str	r0, [r7, #12]
 800ca5a:	60b9      	str	r1, [r7, #8]
 800ca5c:	607a      	str	r2, [r7, #4]
 800ca5e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800ca60:	e057      	b.n	800cb12 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ca68:	d106      	bne.n	800ca78 <SPI_WaitFifoStateUntilTimeout+0x26>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d103      	bne.n	800ca78 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	330c      	adds	r3, #12
 800ca76:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca7e:	d048      	beq.n	800cb12 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ca80:	f7fc feb0 	bl	80097e4 <HAL_GetTick>
 800ca84:	4602      	mov	r2, r0
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	1ad3      	subs	r3, r2, r3
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d902      	bls.n	800ca96 <SPI_WaitFifoStateUntilTimeout+0x44>
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d13d      	bne.n	800cb12 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	685a      	ldr	r2, [r3, #4]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800caa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800caae:	d111      	bne.n	800cad4 <SPI_WaitFifoStateUntilTimeout+0x82>
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cab8:	d004      	beq.n	800cac4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cac2:	d107      	bne.n	800cad4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cad2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cadc:	d10f      	bne.n	800cafe <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800caec:	601a      	str	r2, [r3, #0]
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cafc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2201      	movs	r2, #1
 800cb02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cb0e:	2303      	movs	r3, #3
 800cb10:	e008      	b.n	800cb24 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	689a      	ldr	r2, [r3, #8]
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	4013      	ands	r3, r2
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d19f      	bne.n	800ca62 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800cb22:	2300      	movs	r3, #0
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b086      	sub	sp, #24
 800cb30:	af02      	add	r7, sp, #8
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb40:	d111      	bne.n	800cb66 <SPI_EndRxTransaction+0x3a>
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	689b      	ldr	r3, [r3, #8]
 800cb46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb4a:	d004      	beq.n	800cb56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	689b      	ldr	r3, [r3, #8]
 800cb50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb54:	d107      	bne.n	800cb66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb64:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	2180      	movs	r1, #128	; 0x80
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f7ff ff04 	bl	800c97e <SPI_WaitFlagStateUntilTimeout>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d007      	beq.n	800cb8c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb80:	f043 0220 	orr.w	r2, r3, #32
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cb88:	2303      	movs	r3, #3
 800cb8a:	e023      	b.n	800cbd4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb94:	d11d      	bne.n	800cbd2 <SPI_EndRxTransaction+0xa6>
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	689b      	ldr	r3, [r3, #8]
 800cb9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb9e:	d004      	beq.n	800cbaa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cba8:	d113      	bne.n	800cbd2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800cbb6:	68f8      	ldr	r0, [r7, #12]
 800cbb8:	f7ff ff4b 	bl	800ca52 <SPI_WaitFifoStateUntilTimeout>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d007      	beq.n	800cbd2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbc6:	f043 0220 	orr.w	r2, r3, #32
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800cbce:	2303      	movs	r3, #3
 800cbd0:	e000      	b.n	800cbd4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800cbd2:	2300      	movs	r3, #0
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3710      	adds	r7, #16
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b086      	sub	sp, #24
 800cbe0:	af02      	add	r7, sp, #8
 800cbe2:	60f8      	str	r0, [r7, #12]
 800cbe4:	60b9      	str	r1, [r7, #8]
 800cbe6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800cbf4:	68f8      	ldr	r0, [r7, #12]
 800cbf6:	f7ff ff2c 	bl	800ca52 <SPI_WaitFifoStateUntilTimeout>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d007      	beq.n	800cc10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc04:	f043 0220 	orr.w	r2, r3, #32
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cc0c:	2303      	movs	r3, #3
 800cc0e:	e027      	b.n	800cc60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	9300      	str	r3, [sp, #0]
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	2200      	movs	r2, #0
 800cc18:	2180      	movs	r1, #128	; 0x80
 800cc1a:	68f8      	ldr	r0, [r7, #12]
 800cc1c:	f7ff feaf 	bl	800c97e <SPI_WaitFlagStateUntilTimeout>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d007      	beq.n	800cc36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc2a:	f043 0220 	orr.w	r2, r3, #32
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cc32:	2303      	movs	r3, #3
 800cc34:	e014      	b.n	800cc60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	9300      	str	r3, [sp, #0]
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800cc42:	68f8      	ldr	r0, [r7, #12]
 800cc44:	f7ff ff05 	bl	800ca52 <SPI_WaitFifoStateUntilTimeout>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d007      	beq.n	800cc5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc52:	f043 0220 	orr.w	r2, r3, #32
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cc5a:	2303      	movs	r3, #3
 800cc5c:	e000      	b.n	800cc60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800cc5e:	2300      	movs	r3, #0
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d101      	bne.n	800cc7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cc76:	2301      	movs	r3, #1
 800cc78:	e01d      	b.n	800ccb6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d106      	bne.n	800cc94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7fb f8dc 	bl	8007e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2202      	movs	r2, #2
 800cc98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681a      	ldr	r2, [r3, #0]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	3304      	adds	r3, #4
 800cca4:	4619      	mov	r1, r3
 800cca6:	4610      	mov	r0, r2
 800cca8:	f000 fbe8 	bl	800d47c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2201      	movs	r2, #1
 800ccb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ccb4:	2300      	movs	r3, #0
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
	...

0800ccc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2202      	movs	r2, #2
 800cccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	689a      	ldr	r2, [r3, #8]
 800ccd6:	4b0e      	ldr	r3, [pc, #56]	; (800cd10 <HAL_TIM_Base_Start+0x50>)
 800ccd8:	4013      	ands	r3, r2
 800ccda:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2b06      	cmp	r3, #6
 800cce0:	d00b      	beq.n	800ccfa <HAL_TIM_Base_Start+0x3a>
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cce8:	d007      	beq.n	800ccfa <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f042 0201 	orr.w	r2, r2, #1
 800ccf8:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3714      	adds	r7, #20
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr
 800cd10:	00010007 	.word	0x00010007

0800cd14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b085      	sub	sp, #20
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	68da      	ldr	r2, [r3, #12]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f042 0201 	orr.w	r2, r2, #1
 800cd2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	689a      	ldr	r2, [r3, #8]
 800cd32:	4b0c      	ldr	r3, [pc, #48]	; (800cd64 <HAL_TIM_Base_Start_IT+0x50>)
 800cd34:	4013      	ands	r3, r2
 800cd36:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2b06      	cmp	r3, #6
 800cd3c:	d00b      	beq.n	800cd56 <HAL_TIM_Base_Start_IT+0x42>
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd44:	d007      	beq.n	800cd56 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f042 0201 	orr.w	r2, r2, #1
 800cd54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cd56:	2300      	movs	r3, #0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3714      	adds	r7, #20
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr
 800cd64:	00010007 	.word	0x00010007

0800cd68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d101      	bne.n	800cd7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cd76:	2301      	movs	r3, #1
 800cd78:	e01d      	b.n	800cdb6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d106      	bne.n	800cd94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f7fb f828 	bl	8007de4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2202      	movs	r2, #2
 800cd98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	3304      	adds	r3, #4
 800cda4:	4619      	mov	r1, r3
 800cda6:	4610      	mov	r0, r2
 800cda8:	f000 fb68 	bl	800d47c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3708      	adds	r7, #8
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}

0800cdbe <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b082      	sub	sp, #8
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
 800cdc6:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d101      	bne.n	800cdd2 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e02d      	b.n	800ce2e <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d106      	bne.n	800cdec <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2200      	movs	r2, #0
 800cde2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 f825 	bl	800ce36 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2202      	movs	r2, #2
 800cdf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	3304      	adds	r3, #4
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	4610      	mov	r0, r2
 800ce00:	f000 fb3c 	bl	800d47c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f022 0208 	bic.w	r2, r2, #8
 800ce12:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	6819      	ldr	r1, [r3, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	683a      	ldr	r2, [r7, #0]
 800ce20:	430a      	orrs	r2, r1
 800ce22:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2201      	movs	r2, #1
 800ce28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce2c:	2300      	movs	r3, #0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3708      	adds	r7, #8
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800ce36:	b480      	push	{r7}
 800ce38:	b083      	sub	sp, #12
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800ce3e:	bf00      	nop
 800ce40:	370c      	adds	r7, #12
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr

0800ce4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
inline void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b082      	sub	sp, #8
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	691b      	ldr	r3, [r3, #16]
 800ce58:	f003 0302 	and.w	r3, r3, #2
 800ce5c:	2b02      	cmp	r3, #2
 800ce5e:	d122      	bne.n	800cea6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	f003 0302 	and.w	r3, r3, #2
 800ce6a:	2b02      	cmp	r3, #2
 800ce6c:	d11b      	bne.n	800cea6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f06f 0202 	mvn.w	r2, #2
 800ce76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	699b      	ldr	r3, [r3, #24]
 800ce84:	f003 0303 	and.w	r3, r3, #3
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d003      	beq.n	800ce94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 fad7 	bl	800d440 <HAL_TIM_IC_CaptureCallback>
 800ce92:	e005      	b.n	800cea0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 fac9 	bl	800d42c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f000 fada 	bl	800d454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2200      	movs	r2, #0
 800cea4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	691b      	ldr	r3, [r3, #16]
 800ceac:	f003 0304 	and.w	r3, r3, #4
 800ceb0:	2b04      	cmp	r3, #4
 800ceb2:	d122      	bne.n	800cefa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	f003 0304 	and.w	r3, r3, #4
 800cebe:	2b04      	cmp	r3, #4
 800cec0:	d11b      	bne.n	800cefa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f06f 0204 	mvn.w	r2, #4
 800ceca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2202      	movs	r2, #2
 800ced0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	699b      	ldr	r3, [r3, #24]
 800ced8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d003      	beq.n	800cee8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f000 faad 	bl	800d440 <HAL_TIM_IC_CaptureCallback>
 800cee6:	e005      	b.n	800cef4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f000 fa9f 	bl	800d42c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 fab0 	bl	800d454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2200      	movs	r2, #0
 800cef8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	691b      	ldr	r3, [r3, #16]
 800cf00:	f003 0308 	and.w	r3, r3, #8
 800cf04:	2b08      	cmp	r3, #8
 800cf06:	d122      	bne.n	800cf4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	68db      	ldr	r3, [r3, #12]
 800cf0e:	f003 0308 	and.w	r3, r3, #8
 800cf12:	2b08      	cmp	r3, #8
 800cf14:	d11b      	bne.n	800cf4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f06f 0208 	mvn.w	r2, #8
 800cf1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2204      	movs	r2, #4
 800cf24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	69db      	ldr	r3, [r3, #28]
 800cf2c:	f003 0303 	and.w	r3, r3, #3
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d003      	beq.n	800cf3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 fa83 	bl	800d440 <HAL_TIM_IC_CaptureCallback>
 800cf3a:	e005      	b.n	800cf48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 fa75 	bl	800d42c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 fa86 	bl	800d454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	691b      	ldr	r3, [r3, #16]
 800cf54:	f003 0310 	and.w	r3, r3, #16
 800cf58:	2b10      	cmp	r3, #16
 800cf5a:	d122      	bne.n	800cfa2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	68db      	ldr	r3, [r3, #12]
 800cf62:	f003 0310 	and.w	r3, r3, #16
 800cf66:	2b10      	cmp	r3, #16
 800cf68:	d11b      	bne.n	800cfa2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f06f 0210 	mvn.w	r2, #16
 800cf72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2208      	movs	r2, #8
 800cf78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	69db      	ldr	r3, [r3, #28]
 800cf80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d003      	beq.n	800cf90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 fa59 	bl	800d440 <HAL_TIM_IC_CaptureCallback>
 800cf8e:	e005      	b.n	800cf9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 fa4b 	bl	800d42c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 fa5c 	bl	800d454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	f003 0301 	and.w	r3, r3, #1
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d10e      	bne.n	800cfce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	f003 0301 	and.w	r3, r3, #1
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d107      	bne.n	800cfce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f06f 0201 	mvn.w	r2, #1
 800cfc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f7f9 fd17 	bl	80069fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfd8:	2b80      	cmp	r3, #128	; 0x80
 800cfda:	d10e      	bne.n	800cffa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfe6:	2b80      	cmp	r3, #128	; 0x80
 800cfe8:	d107      	bne.n	800cffa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 ff1f 	bl	800de38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	691b      	ldr	r3, [r3, #16]
 800d000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d008:	d10e      	bne.n	800d028 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d014:	2b80      	cmp	r3, #128	; 0x80
 800d016:	d107      	bne.n	800d028 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 ff12 	bl	800de4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	691b      	ldr	r3, [r3, #16]
 800d02e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d032:	2b40      	cmp	r3, #64	; 0x40
 800d034:	d10e      	bne.n	800d054 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	68db      	ldr	r3, [r3, #12]
 800d03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d040:	2b40      	cmp	r3, #64	; 0x40
 800d042:	d107      	bne.n	800d054 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d04c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 fa0a 	bl	800d468 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	691b      	ldr	r3, [r3, #16]
 800d05a:	f003 0320 	and.w	r3, r3, #32
 800d05e:	2b20      	cmp	r3, #32
 800d060:	d10e      	bne.n	800d080 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	68db      	ldr	r3, [r3, #12]
 800d068:	f003 0320 	and.w	r3, r3, #32
 800d06c:	2b20      	cmp	r3, #32
 800d06e:	d107      	bne.n	800d080 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f06f 0220 	mvn.w	r2, #32
 800d078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 fed2 	bl	800de24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d080:	bf00      	nop
 800d082:	3708      	adds	r7, #8
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d101      	bne.n	800d0a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d09e:	2302      	movs	r3, #2
 800d0a0:	e105      	b.n	800d2ae <HAL_TIM_PWM_ConfigChannel+0x226>
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2202      	movs	r2, #2
 800d0ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b14      	cmp	r3, #20
 800d0b6:	f200 80f0 	bhi.w	800d29a <HAL_TIM_PWM_ConfigChannel+0x212>
 800d0ba:	a201      	add	r2, pc, #4	; (adr r2, 800d0c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c0:	0800d115 	.word	0x0800d115
 800d0c4:	0800d29b 	.word	0x0800d29b
 800d0c8:	0800d29b 	.word	0x0800d29b
 800d0cc:	0800d29b 	.word	0x0800d29b
 800d0d0:	0800d155 	.word	0x0800d155
 800d0d4:	0800d29b 	.word	0x0800d29b
 800d0d8:	0800d29b 	.word	0x0800d29b
 800d0dc:	0800d29b 	.word	0x0800d29b
 800d0e0:	0800d197 	.word	0x0800d197
 800d0e4:	0800d29b 	.word	0x0800d29b
 800d0e8:	0800d29b 	.word	0x0800d29b
 800d0ec:	0800d29b 	.word	0x0800d29b
 800d0f0:	0800d1d7 	.word	0x0800d1d7
 800d0f4:	0800d29b 	.word	0x0800d29b
 800d0f8:	0800d29b 	.word	0x0800d29b
 800d0fc:	0800d29b 	.word	0x0800d29b
 800d100:	0800d219 	.word	0x0800d219
 800d104:	0800d29b 	.word	0x0800d29b
 800d108:	0800d29b 	.word	0x0800d29b
 800d10c:	0800d29b 	.word	0x0800d29b
 800d110:	0800d259 	.word	0x0800d259
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	68b9      	ldr	r1, [r7, #8]
 800d11a:	4618      	mov	r0, r3
 800d11c:	f000 fa4e 	bl	800d5bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	699a      	ldr	r2, [r3, #24]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f042 0208 	orr.w	r2, r2, #8
 800d12e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	699a      	ldr	r2, [r3, #24]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f022 0204 	bic.w	r2, r2, #4
 800d13e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	6999      	ldr	r1, [r3, #24]
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	691a      	ldr	r2, [r3, #16]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	430a      	orrs	r2, r1
 800d150:	619a      	str	r2, [r3, #24]
      break;
 800d152:	e0a3      	b.n	800d29c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	68b9      	ldr	r1, [r7, #8]
 800d15a:	4618      	mov	r0, r3
 800d15c:	f000 faa0 	bl	800d6a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	699a      	ldr	r2, [r3, #24]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d16e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	699a      	ldr	r2, [r3, #24]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d17e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	6999      	ldr	r1, [r3, #24]
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	691b      	ldr	r3, [r3, #16]
 800d18a:	021a      	lsls	r2, r3, #8
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	430a      	orrs	r2, r1
 800d192:	619a      	str	r2, [r3, #24]
      break;
 800d194:	e082      	b.n	800d29c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	68b9      	ldr	r1, [r7, #8]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f000 faf7 	bl	800d790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	69da      	ldr	r2, [r3, #28]
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f042 0208 	orr.w	r2, r2, #8
 800d1b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	69da      	ldr	r2, [r3, #28]
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f022 0204 	bic.w	r2, r2, #4
 800d1c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	69d9      	ldr	r1, [r3, #28]
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	691a      	ldr	r2, [r3, #16]
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	430a      	orrs	r2, r1
 800d1d2:	61da      	str	r2, [r3, #28]
      break;
 800d1d4:	e062      	b.n	800d29c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	68b9      	ldr	r1, [r7, #8]
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f000 fb4d 	bl	800d87c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	69da      	ldr	r2, [r3, #28]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	69da      	ldr	r2, [r3, #28]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	69d9      	ldr	r1, [r3, #28]
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	691b      	ldr	r3, [r3, #16]
 800d20c:	021a      	lsls	r2, r3, #8
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	430a      	orrs	r2, r1
 800d214:	61da      	str	r2, [r3, #28]
      break;
 800d216:	e041      	b.n	800d29c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	68b9      	ldr	r1, [r7, #8]
 800d21e:	4618      	mov	r0, r3
 800d220:	f000 fb84 	bl	800d92c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f042 0208 	orr.w	r2, r2, #8
 800d232:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f022 0204 	bic.w	r2, r2, #4
 800d242:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	691a      	ldr	r2, [r3, #16]
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	430a      	orrs	r2, r1
 800d254:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d256:	e021      	b.n	800d29c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	68b9      	ldr	r1, [r7, #8]
 800d25e:	4618      	mov	r0, r3
 800d260:	f000 fbb6 	bl	800d9d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d272:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d282:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	021a      	lsls	r2, r3, #8
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	430a      	orrs	r2, r1
 800d296:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d298:	e000      	b.n	800d29c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800d29a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop

0800d2b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b084      	sub	sp, #16
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d101      	bne.n	800d2d0 <HAL_TIM_ConfigClockSource+0x18>
 800d2cc:	2302      	movs	r3, #2
 800d2ce:	e0a6      	b.n	800d41e <HAL_TIM_ConfigClockSource+0x166>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2202      	movs	r2, #2
 800d2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	4b4f      	ldr	r3, [pc, #316]	; (800d428 <HAL_TIM_ConfigClockSource+0x170>)
 800d2ec:	4013      	ands	r3, r2
 800d2ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d2f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	2b40      	cmp	r3, #64	; 0x40
 800d306:	d067      	beq.n	800d3d8 <HAL_TIM_ConfigClockSource+0x120>
 800d308:	2b40      	cmp	r3, #64	; 0x40
 800d30a:	d80b      	bhi.n	800d324 <HAL_TIM_ConfigClockSource+0x6c>
 800d30c:	2b10      	cmp	r3, #16
 800d30e:	d073      	beq.n	800d3f8 <HAL_TIM_ConfigClockSource+0x140>
 800d310:	2b10      	cmp	r3, #16
 800d312:	d802      	bhi.n	800d31a <HAL_TIM_ConfigClockSource+0x62>
 800d314:	2b00      	cmp	r3, #0
 800d316:	d06f      	beq.n	800d3f8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d318:	e078      	b.n	800d40c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d31a:	2b20      	cmp	r3, #32
 800d31c:	d06c      	beq.n	800d3f8 <HAL_TIM_ConfigClockSource+0x140>
 800d31e:	2b30      	cmp	r3, #48	; 0x30
 800d320:	d06a      	beq.n	800d3f8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800d322:	e073      	b.n	800d40c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d324:	2b70      	cmp	r3, #112	; 0x70
 800d326:	d00d      	beq.n	800d344 <HAL_TIM_ConfigClockSource+0x8c>
 800d328:	2b70      	cmp	r3, #112	; 0x70
 800d32a:	d804      	bhi.n	800d336 <HAL_TIM_ConfigClockSource+0x7e>
 800d32c:	2b50      	cmp	r3, #80	; 0x50
 800d32e:	d033      	beq.n	800d398 <HAL_TIM_ConfigClockSource+0xe0>
 800d330:	2b60      	cmp	r3, #96	; 0x60
 800d332:	d041      	beq.n	800d3b8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800d334:	e06a      	b.n	800d40c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d33a:	d066      	beq.n	800d40a <HAL_TIM_ConfigClockSource+0x152>
 800d33c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d340:	d017      	beq.n	800d372 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800d342:	e063      	b.n	800d40c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6818      	ldr	r0, [r3, #0]
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	6899      	ldr	r1, [r3, #8]
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	685a      	ldr	r2, [r3, #4]
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	68db      	ldr	r3, [r3, #12]
 800d354:	f000 fc0a 	bl	800db6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d366:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	68fa      	ldr	r2, [r7, #12]
 800d36e:	609a      	str	r2, [r3, #8]
      break;
 800d370:	e04c      	b.n	800d40c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6818      	ldr	r0, [r3, #0]
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	6899      	ldr	r1, [r3, #8]
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	685a      	ldr	r2, [r3, #4]
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	f000 fbf3 	bl	800db6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	689a      	ldr	r2, [r3, #8]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d394:	609a      	str	r2, [r3, #8]
      break;
 800d396:	e039      	b.n	800d40c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6818      	ldr	r0, [r3, #0]
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	6859      	ldr	r1, [r3, #4]
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	f000 fb67 	bl	800da78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	2150      	movs	r1, #80	; 0x50
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f000 fbc0 	bl	800db36 <TIM_ITRx_SetConfig>
      break;
 800d3b6:	e029      	b.n	800d40c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6818      	ldr	r0, [r3, #0]
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	6859      	ldr	r1, [r3, #4]
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	f000 fb86 	bl	800dad6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2160      	movs	r1, #96	; 0x60
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f000 fbb0 	bl	800db36 <TIM_ITRx_SetConfig>
      break;
 800d3d6:	e019      	b.n	800d40c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6818      	ldr	r0, [r3, #0]
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	6859      	ldr	r1, [r3, #4]
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	f000 fb47 	bl	800da78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	2140      	movs	r1, #64	; 0x40
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f000 fba0 	bl	800db36 <TIM_ITRx_SetConfig>
      break;
 800d3f6:	e009      	b.n	800d40c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4619      	mov	r1, r3
 800d402:	4610      	mov	r0, r2
 800d404:	f000 fb97 	bl	800db36 <TIM_ITRx_SetConfig>
      break;
 800d408:	e000      	b.n	800d40c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800d40a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2201      	movs	r2, #1
 800d410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d41c:	2300      	movs	r3, #0
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3710      	adds	r7, #16
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	fffeff88 	.word	0xfffeff88

0800d42c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d434:	bf00      	nop
 800d436:	370c      	adds	r7, #12
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d448:	bf00      	nop
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d454:	b480      	push	{r7}
 800d456:	b083      	sub	sp, #12
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d45c:	bf00      	nop
 800d45e:	370c      	adds	r7, #12
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr

0800d468 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d470:	bf00      	nop
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b085      	sub	sp, #20
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	4a40      	ldr	r2, [pc, #256]	; (800d590 <TIM_Base_SetConfig+0x114>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d013      	beq.n	800d4bc <TIM_Base_SetConfig+0x40>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d49a:	d00f      	beq.n	800d4bc <TIM_Base_SetConfig+0x40>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	4a3d      	ldr	r2, [pc, #244]	; (800d594 <TIM_Base_SetConfig+0x118>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d00b      	beq.n	800d4bc <TIM_Base_SetConfig+0x40>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	4a3c      	ldr	r2, [pc, #240]	; (800d598 <TIM_Base_SetConfig+0x11c>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d007      	beq.n	800d4bc <TIM_Base_SetConfig+0x40>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	4a3b      	ldr	r2, [pc, #236]	; (800d59c <TIM_Base_SetConfig+0x120>)
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d003      	beq.n	800d4bc <TIM_Base_SetConfig+0x40>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	4a3a      	ldr	r2, [pc, #232]	; (800d5a0 <TIM_Base_SetConfig+0x124>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d108      	bne.n	800d4ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	4a2f      	ldr	r2, [pc, #188]	; (800d590 <TIM_Base_SetConfig+0x114>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d02b      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4dc:	d027      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	4a2c      	ldr	r2, [pc, #176]	; (800d594 <TIM_Base_SetConfig+0x118>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d023      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	4a2b      	ldr	r2, [pc, #172]	; (800d598 <TIM_Base_SetConfig+0x11c>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d01f      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	4a2a      	ldr	r2, [pc, #168]	; (800d59c <TIM_Base_SetConfig+0x120>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d01b      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	4a29      	ldr	r2, [pc, #164]	; (800d5a0 <TIM_Base_SetConfig+0x124>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d017      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	4a28      	ldr	r2, [pc, #160]	; (800d5a4 <TIM_Base_SetConfig+0x128>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d013      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	4a27      	ldr	r2, [pc, #156]	; (800d5a8 <TIM_Base_SetConfig+0x12c>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d00f      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	4a26      	ldr	r2, [pc, #152]	; (800d5ac <TIM_Base_SetConfig+0x130>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d00b      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	4a25      	ldr	r2, [pc, #148]	; (800d5b0 <TIM_Base_SetConfig+0x134>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d007      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4a24      	ldr	r2, [pc, #144]	; (800d5b4 <TIM_Base_SetConfig+0x138>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d003      	beq.n	800d52e <TIM_Base_SetConfig+0xb2>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	4a23      	ldr	r2, [pc, #140]	; (800d5b8 <TIM_Base_SetConfig+0x13c>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d108      	bne.n	800d540 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	4313      	orrs	r3, r2
 800d53e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	695b      	ldr	r3, [r3, #20]
 800d54a:	4313      	orrs	r3, r2
 800d54c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	68fa      	ldr	r2, [r7, #12]
 800d552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	689a      	ldr	r2, [r3, #8]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	4a0a      	ldr	r2, [pc, #40]	; (800d590 <TIM_Base_SetConfig+0x114>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	d003      	beq.n	800d574 <TIM_Base_SetConfig+0xf8>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	4a0c      	ldr	r2, [pc, #48]	; (800d5a0 <TIM_Base_SetConfig+0x124>)
 800d570:	4293      	cmp	r3, r2
 800d572:	d103      	bne.n	800d57c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	691a      	ldr	r2, [r3, #16]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2201      	movs	r2, #1
 800d580:	615a      	str	r2, [r3, #20]
}
 800d582:	bf00      	nop
 800d584:	3714      	adds	r7, #20
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	40010000 	.word	0x40010000
 800d594:	40000400 	.word	0x40000400
 800d598:	40000800 	.word	0x40000800
 800d59c:	40000c00 	.word	0x40000c00
 800d5a0:	40010400 	.word	0x40010400
 800d5a4:	40014000 	.word	0x40014000
 800d5a8:	40014400 	.word	0x40014400
 800d5ac:	40014800 	.word	0x40014800
 800d5b0:	40001800 	.word	0x40001800
 800d5b4:	40001c00 	.word	0x40001c00
 800d5b8:	40002000 	.word	0x40002000

0800d5bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b087      	sub	sp, #28
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6a1b      	ldr	r3, [r3, #32]
 800d5ca:	f023 0201 	bic.w	r2, r3, #1
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6a1b      	ldr	r3, [r3, #32]
 800d5d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	699b      	ldr	r3, [r3, #24]
 800d5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	4b2b      	ldr	r3, [pc, #172]	; (800d694 <TIM_OC1_SetConfig+0xd8>)
 800d5e8:	4013      	ands	r3, r2
 800d5ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f023 0303 	bic.w	r3, r3, #3
 800d5f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	f023 0302 	bic.w	r3, r3, #2
 800d604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	689b      	ldr	r3, [r3, #8]
 800d60a:	697a      	ldr	r2, [r7, #20]
 800d60c:	4313      	orrs	r3, r2
 800d60e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	4a21      	ldr	r2, [pc, #132]	; (800d698 <TIM_OC1_SetConfig+0xdc>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d003      	beq.n	800d620 <TIM_OC1_SetConfig+0x64>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	4a20      	ldr	r2, [pc, #128]	; (800d69c <TIM_OC1_SetConfig+0xe0>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d10c      	bne.n	800d63a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	f023 0308 	bic.w	r3, r3, #8
 800d626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	68db      	ldr	r3, [r3, #12]
 800d62c:	697a      	ldr	r2, [r7, #20]
 800d62e:	4313      	orrs	r3, r2
 800d630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	f023 0304 	bic.w	r3, r3, #4
 800d638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4a16      	ldr	r2, [pc, #88]	; (800d698 <TIM_OC1_SetConfig+0xdc>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d003      	beq.n	800d64a <TIM_OC1_SetConfig+0x8e>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	4a15      	ldr	r2, [pc, #84]	; (800d69c <TIM_OC1_SetConfig+0xe0>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d111      	bne.n	800d66e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	695b      	ldr	r3, [r3, #20]
 800d65e:	693a      	ldr	r2, [r7, #16]
 800d660:	4313      	orrs	r3, r2
 800d662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	699b      	ldr	r3, [r3, #24]
 800d668:	693a      	ldr	r2, [r7, #16]
 800d66a:	4313      	orrs	r3, r2
 800d66c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	693a      	ldr	r2, [r7, #16]
 800d672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	68fa      	ldr	r2, [r7, #12]
 800d678:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	685a      	ldr	r2, [r3, #4]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	697a      	ldr	r2, [r7, #20]
 800d686:	621a      	str	r2, [r3, #32]
}
 800d688:	bf00      	nop
 800d68a:	371c      	adds	r7, #28
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr
 800d694:	fffeff8f 	.word	0xfffeff8f
 800d698:	40010000 	.word	0x40010000
 800d69c:	40010400 	.word	0x40010400

0800d6a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b087      	sub	sp, #28
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6a1b      	ldr	r3, [r3, #32]
 800d6ae:	f023 0210 	bic.w	r2, r3, #16
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6a1b      	ldr	r3, [r3, #32]
 800d6ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	699b      	ldr	r3, [r3, #24]
 800d6c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d6c8:	68fa      	ldr	r2, [r7, #12]
 800d6ca:	4b2e      	ldr	r3, [pc, #184]	; (800d784 <TIM_OC2_SetConfig+0xe4>)
 800d6cc:	4013      	ands	r3, r2
 800d6ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	021b      	lsls	r3, r3, #8
 800d6de:	68fa      	ldr	r2, [r7, #12]
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	f023 0320 	bic.w	r3, r3, #32
 800d6ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	689b      	ldr	r3, [r3, #8]
 800d6f0:	011b      	lsls	r3, r3, #4
 800d6f2:	697a      	ldr	r2, [r7, #20]
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	4a23      	ldr	r2, [pc, #140]	; (800d788 <TIM_OC2_SetConfig+0xe8>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d003      	beq.n	800d708 <TIM_OC2_SetConfig+0x68>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4a22      	ldr	r2, [pc, #136]	; (800d78c <TIM_OC2_SetConfig+0xec>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d10d      	bne.n	800d724 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d70e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	011b      	lsls	r3, r3, #4
 800d716:	697a      	ldr	r2, [r7, #20]
 800d718:	4313      	orrs	r3, r2
 800d71a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d722:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	4a18      	ldr	r2, [pc, #96]	; (800d788 <TIM_OC2_SetConfig+0xe8>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d003      	beq.n	800d734 <TIM_OC2_SetConfig+0x94>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	4a17      	ldr	r2, [pc, #92]	; (800d78c <TIM_OC2_SetConfig+0xec>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d113      	bne.n	800d75c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d73a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d742:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	695b      	ldr	r3, [r3, #20]
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	693a      	ldr	r2, [r7, #16]
 800d74c:	4313      	orrs	r3, r2
 800d74e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	699b      	ldr	r3, [r3, #24]
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	693a      	ldr	r2, [r7, #16]
 800d758:	4313      	orrs	r3, r2
 800d75a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	693a      	ldr	r2, [r7, #16]
 800d760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	68fa      	ldr	r2, [r7, #12]
 800d766:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	685a      	ldr	r2, [r3, #4]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	697a      	ldr	r2, [r7, #20]
 800d774:	621a      	str	r2, [r3, #32]
}
 800d776:	bf00      	nop
 800d778:	371c      	adds	r7, #28
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop
 800d784:	feff8fff 	.word	0xfeff8fff
 800d788:	40010000 	.word	0x40010000
 800d78c:	40010400 	.word	0x40010400

0800d790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d790:	b480      	push	{r7}
 800d792:	b087      	sub	sp, #28
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6a1b      	ldr	r3, [r3, #32]
 800d79e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6a1b      	ldr	r3, [r3, #32]
 800d7aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	69db      	ldr	r3, [r3, #28]
 800d7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d7b8:	68fa      	ldr	r2, [r7, #12]
 800d7ba:	4b2d      	ldr	r3, [pc, #180]	; (800d870 <TIM_OC3_SetConfig+0xe0>)
 800d7bc:	4013      	ands	r3, r2
 800d7be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f023 0303 	bic.w	r3, r3, #3
 800d7c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d7d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	021b      	lsls	r3, r3, #8
 800d7e0:	697a      	ldr	r2, [r7, #20]
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	4a22      	ldr	r2, [pc, #136]	; (800d874 <TIM_OC3_SetConfig+0xe4>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d003      	beq.n	800d7f6 <TIM_OC3_SetConfig+0x66>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4a21      	ldr	r2, [pc, #132]	; (800d878 <TIM_OC3_SetConfig+0xe8>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d10d      	bne.n	800d812 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d7fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	68db      	ldr	r3, [r3, #12]
 800d802:	021b      	lsls	r3, r3, #8
 800d804:	697a      	ldr	r2, [r7, #20]
 800d806:	4313      	orrs	r3, r2
 800d808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	4a17      	ldr	r2, [pc, #92]	; (800d874 <TIM_OC3_SetConfig+0xe4>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d003      	beq.n	800d822 <TIM_OC3_SetConfig+0x92>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	4a16      	ldr	r2, [pc, #88]	; (800d878 <TIM_OC3_SetConfig+0xe8>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d113      	bne.n	800d84a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	695b      	ldr	r3, [r3, #20]
 800d836:	011b      	lsls	r3, r3, #4
 800d838:	693a      	ldr	r2, [r7, #16]
 800d83a:	4313      	orrs	r3, r2
 800d83c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	699b      	ldr	r3, [r3, #24]
 800d842:	011b      	lsls	r3, r3, #4
 800d844:	693a      	ldr	r2, [r7, #16]
 800d846:	4313      	orrs	r3, r2
 800d848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	693a      	ldr	r2, [r7, #16]
 800d84e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	68fa      	ldr	r2, [r7, #12]
 800d854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	685a      	ldr	r2, [r3, #4]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	697a      	ldr	r2, [r7, #20]
 800d862:	621a      	str	r2, [r3, #32]
}
 800d864:	bf00      	nop
 800d866:	371c      	adds	r7, #28
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr
 800d870:	fffeff8f 	.word	0xfffeff8f
 800d874:	40010000 	.word	0x40010000
 800d878:	40010400 	.word	0x40010400

0800d87c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b087      	sub	sp, #28
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6a1b      	ldr	r3, [r3, #32]
 800d88a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6a1b      	ldr	r3, [r3, #32]
 800d896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	685b      	ldr	r3, [r3, #4]
 800d89c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	69db      	ldr	r3, [r3, #28]
 800d8a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	4b1e      	ldr	r3, [pc, #120]	; (800d920 <TIM_OC4_SetConfig+0xa4>)
 800d8a8:	4013      	ands	r3, r2
 800d8aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	021b      	lsls	r3, r3, #8
 800d8ba:	68fa      	ldr	r2, [r7, #12]
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d8c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	689b      	ldr	r3, [r3, #8]
 800d8cc:	031b      	lsls	r3, r3, #12
 800d8ce:	693a      	ldr	r2, [r7, #16]
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	4a13      	ldr	r2, [pc, #76]	; (800d924 <TIM_OC4_SetConfig+0xa8>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d003      	beq.n	800d8e4 <TIM_OC4_SetConfig+0x68>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	4a12      	ldr	r2, [pc, #72]	; (800d928 <TIM_OC4_SetConfig+0xac>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d109      	bne.n	800d8f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d8ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	695b      	ldr	r3, [r3, #20]
 800d8f0:	019b      	lsls	r3, r3, #6
 800d8f2:	697a      	ldr	r2, [r7, #20]
 800d8f4:	4313      	orrs	r3, r2
 800d8f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	697a      	ldr	r2, [r7, #20]
 800d8fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	68fa      	ldr	r2, [r7, #12]
 800d902:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	685a      	ldr	r2, [r3, #4]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	693a      	ldr	r2, [r7, #16]
 800d910:	621a      	str	r2, [r3, #32]
}
 800d912:	bf00      	nop
 800d914:	371c      	adds	r7, #28
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	feff8fff 	.word	0xfeff8fff
 800d924:	40010000 	.word	0x40010000
 800d928:	40010400 	.word	0x40010400

0800d92c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b087      	sub	sp, #28
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6a1b      	ldr	r3, [r3, #32]
 800d93a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6a1b      	ldr	r3, [r3, #32]
 800d946:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d954:	68fa      	ldr	r2, [r7, #12]
 800d956:	4b1b      	ldr	r3, [pc, #108]	; (800d9c4 <TIM_OC5_SetConfig+0x98>)
 800d958:	4013      	ands	r3, r2
 800d95a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	68fa      	ldr	r2, [r7, #12]
 800d962:	4313      	orrs	r3, r2
 800d964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d96c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	041b      	lsls	r3, r3, #16
 800d974:	693a      	ldr	r2, [r7, #16]
 800d976:	4313      	orrs	r3, r2
 800d978:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	4a12      	ldr	r2, [pc, #72]	; (800d9c8 <TIM_OC5_SetConfig+0x9c>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d003      	beq.n	800d98a <TIM_OC5_SetConfig+0x5e>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	4a11      	ldr	r2, [pc, #68]	; (800d9cc <TIM_OC5_SetConfig+0xa0>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d109      	bne.n	800d99e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d990:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	695b      	ldr	r3, [r3, #20]
 800d996:	021b      	lsls	r3, r3, #8
 800d998:	697a      	ldr	r2, [r7, #20]
 800d99a:	4313      	orrs	r3, r2
 800d99c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	697a      	ldr	r2, [r7, #20]
 800d9a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	68fa      	ldr	r2, [r7, #12]
 800d9a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	685a      	ldr	r2, [r3, #4]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	693a      	ldr	r2, [r7, #16]
 800d9b6:	621a      	str	r2, [r3, #32]
}
 800d9b8:	bf00      	nop
 800d9ba:	371c      	adds	r7, #28
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr
 800d9c4:	fffeff8f 	.word	0xfffeff8f
 800d9c8:	40010000 	.word	0x40010000
 800d9cc:	40010400 	.word	0x40010400

0800d9d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b087      	sub	sp, #28
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6a1b      	ldr	r3, [r3, #32]
 800d9de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6a1b      	ldr	r3, [r3, #32]
 800d9ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d9f8:	68fa      	ldr	r2, [r7, #12]
 800d9fa:	4b1c      	ldr	r3, [pc, #112]	; (800da6c <TIM_OC6_SetConfig+0x9c>)
 800d9fc:	4013      	ands	r3, r2
 800d9fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	021b      	lsls	r3, r3, #8
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	4313      	orrs	r3, r2
 800da0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800da12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	051b      	lsls	r3, r3, #20
 800da1a:	693a      	ldr	r2, [r7, #16]
 800da1c:	4313      	orrs	r3, r2
 800da1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	4a13      	ldr	r2, [pc, #76]	; (800da70 <TIM_OC6_SetConfig+0xa0>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d003      	beq.n	800da30 <TIM_OC6_SetConfig+0x60>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	4a12      	ldr	r2, [pc, #72]	; (800da74 <TIM_OC6_SetConfig+0xa4>)
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d109      	bne.n	800da44 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800da36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	695b      	ldr	r3, [r3, #20]
 800da3c:	029b      	lsls	r3, r3, #10
 800da3e:	697a      	ldr	r2, [r7, #20]
 800da40:	4313      	orrs	r3, r2
 800da42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	697a      	ldr	r2, [r7, #20]
 800da48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	68fa      	ldr	r2, [r7, #12]
 800da4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	685a      	ldr	r2, [r3, #4]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	693a      	ldr	r2, [r7, #16]
 800da5c:	621a      	str	r2, [r3, #32]
}
 800da5e:	bf00      	nop
 800da60:	371c      	adds	r7, #28
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr
 800da6a:	bf00      	nop
 800da6c:	feff8fff 	.word	0xfeff8fff
 800da70:	40010000 	.word	0x40010000
 800da74:	40010400 	.word	0x40010400

0800da78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da78:	b480      	push	{r7}
 800da7a:	b087      	sub	sp, #28
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	6a1b      	ldr	r3, [r3, #32]
 800da88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	6a1b      	ldr	r3, [r3, #32]
 800da8e:	f023 0201 	bic.w	r2, r3, #1
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	699b      	ldr	r3, [r3, #24]
 800da9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800daa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	011b      	lsls	r3, r3, #4
 800daa8:	693a      	ldr	r2, [r7, #16]
 800daaa:	4313      	orrs	r3, r2
 800daac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	f023 030a 	bic.w	r3, r3, #10
 800dab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dab6:	697a      	ldr	r2, [r7, #20]
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	4313      	orrs	r3, r2
 800dabc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	693a      	ldr	r2, [r7, #16]
 800dac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	697a      	ldr	r2, [r7, #20]
 800dac8:	621a      	str	r2, [r3, #32]
}
 800daca:	bf00      	nop
 800dacc:	371c      	adds	r7, #28
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr

0800dad6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dad6:	b480      	push	{r7}
 800dad8:	b087      	sub	sp, #28
 800dada:	af00      	add	r7, sp, #0
 800dadc:	60f8      	str	r0, [r7, #12]
 800dade:	60b9      	str	r1, [r7, #8]
 800dae0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	6a1b      	ldr	r3, [r3, #32]
 800dae6:	f023 0210 	bic.w	r2, r3, #16
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	699b      	ldr	r3, [r3, #24]
 800daf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6a1b      	ldr	r3, [r3, #32]
 800daf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800db00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	031b      	lsls	r3, r3, #12
 800db06:	697a      	ldr	r2, [r7, #20]
 800db08:	4313      	orrs	r3, r2
 800db0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800db12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	011b      	lsls	r3, r3, #4
 800db18:	693a      	ldr	r2, [r7, #16]
 800db1a:	4313      	orrs	r3, r2
 800db1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	697a      	ldr	r2, [r7, #20]
 800db22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	693a      	ldr	r2, [r7, #16]
 800db28:	621a      	str	r2, [r3, #32]
}
 800db2a:	bf00      	nop
 800db2c:	371c      	adds	r7, #28
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr

0800db36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800db36:	b480      	push	{r7}
 800db38:	b085      	sub	sp, #20
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
 800db3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800db4e:	683a      	ldr	r2, [r7, #0]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	4313      	orrs	r3, r2
 800db54:	f043 0307 	orr.w	r3, r3, #7
 800db58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	68fa      	ldr	r2, [r7, #12]
 800db5e:	609a      	str	r2, [r3, #8]
}
 800db60:	bf00      	nop
 800db62:	3714      	adds	r7, #20
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr

0800db6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b087      	sub	sp, #28
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	607a      	str	r2, [r7, #4]
 800db78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	689b      	ldr	r3, [r3, #8]
 800db7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800db86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	021a      	lsls	r2, r3, #8
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	431a      	orrs	r2, r3
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	4313      	orrs	r3, r2
 800db94:	697a      	ldr	r2, [r7, #20]
 800db96:	4313      	orrs	r3, r2
 800db98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	697a      	ldr	r2, [r7, #20]
 800db9e:	609a      	str	r2, [r3, #8]
}
 800dba0:	bf00      	nop
 800dba2:	371c      	adds	r7, #28
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr

0800dbac <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2204      	movs	r2, #4
 800dbbc:	6839      	ldr	r1, [r7, #0]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f000 f94e 	bl	800de60 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dbd2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	689a      	ldr	r2, [r3, #8]
 800dbda:	4b0b      	ldr	r3, [pc, #44]	; (800dc08 <HAL_TIMEx_PWMN_Start+0x5c>)
 800dbdc:	4013      	ands	r3, r2
 800dbde:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b06      	cmp	r3, #6
 800dbe4:	d00b      	beq.n	800dbfe <HAL_TIMEx_PWMN_Start+0x52>
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbec:	d007      	beq.n	800dbfe <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f042 0201 	orr.w	r2, r2, #1
 800dbfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dbfe:	2300      	movs	r3, #0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3710      	adds	r7, #16
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	00010007 	.word	0x00010007

0800dc0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b085      	sub	sp, #20
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d101      	bne.n	800dc24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc20:	2302      	movs	r3, #2
 800dc22:	e06d      	b.n	800dd00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2201      	movs	r2, #1
 800dc28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2202      	movs	r2, #2
 800dc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	689b      	ldr	r3, [r3, #8]
 800dc42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4a30      	ldr	r2, [pc, #192]	; (800dd0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d004      	beq.n	800dc58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4a2f      	ldr	r2, [pc, #188]	; (800dd10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d108      	bne.n	800dc6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dc5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	68fa      	ldr	r2, [r7, #12]
 800dc66:	4313      	orrs	r3, r2
 800dc68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	68fa      	ldr	r2, [r7, #12]
 800dc78:	4313      	orrs	r3, r2
 800dc7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	68fa      	ldr	r2, [r7, #12]
 800dc82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4a20      	ldr	r2, [pc, #128]	; (800dd0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d022      	beq.n	800dcd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc96:	d01d      	beq.n	800dcd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a1d      	ldr	r2, [pc, #116]	; (800dd14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d018      	beq.n	800dcd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	4a1c      	ldr	r2, [pc, #112]	; (800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d013      	beq.n	800dcd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4a1a      	ldr	r2, [pc, #104]	; (800dd1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d00e      	beq.n	800dcd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4a15      	ldr	r2, [pc, #84]	; (800dd10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d009      	beq.n	800dcd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4a16      	ldr	r2, [pc, #88]	; (800dd20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d004      	beq.n	800dcd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4a15      	ldr	r2, [pc, #84]	; (800dd24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d10c      	bne.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	68ba      	ldr	r2, [r7, #8]
 800dce2:	4313      	orrs	r3, r2
 800dce4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	68ba      	ldr	r2, [r7, #8]
 800dcec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dcfe:	2300      	movs	r3, #0
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3714      	adds	r7, #20
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr
 800dd0c:	40010000 	.word	0x40010000
 800dd10:	40010400 	.word	0x40010400
 800dd14:	40000400 	.word	0x40000400
 800dd18:	40000800 	.word	0x40000800
 800dd1c:	40000c00 	.word	0x40000c00
 800dd20:	40014000 	.word	0x40014000
 800dd24:	40001800 	.word	0x40001800

0800dd28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dd32:	2300      	movs	r3, #0
 800dd34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd3c:	2b01      	cmp	r3, #1
 800dd3e:	d101      	bne.n	800dd44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dd40:	2302      	movs	r3, #2
 800dd42:	e065      	b.n	800de10 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2201      	movs	r2, #1
 800dd48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	4313      	orrs	r3, r2
 800dd58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	4313      	orrs	r3, r2
 800dd66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	4313      	orrs	r3, r2
 800dd74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4313      	orrs	r3, r2
 800dd82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	691b      	ldr	r3, [r3, #16]
 800dd8e:	4313      	orrs	r3, r2
 800dd90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	695b      	ldr	r3, [r3, #20]
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	699b      	ldr	r3, [r3, #24]
 800ddb8:	041b      	lsls	r3, r3, #16
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4a16      	ldr	r2, [pc, #88]	; (800de1c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d004      	beq.n	800ddd2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a14      	ldr	r2, [pc, #80]	; (800de20 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d115      	bne.n	800ddfe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dddc:	051b      	lsls	r3, r3, #20
 800ddde:	4313      	orrs	r3, r2
 800dde0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	69db      	ldr	r3, [r3, #28]
 800ddec:	4313      	orrs	r3, r2
 800ddee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	6a1b      	ldr	r3, [r3, #32]
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	68fa      	ldr	r2, [r7, #12]
 800de04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2200      	movs	r2, #0
 800de0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800de0e:	2300      	movs	r3, #0
}
 800de10:	4618      	mov	r0, r3
 800de12:	3714      	adds	r7, #20
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr
 800de1c:	40010000 	.word	0x40010000
 800de20:	40010400 	.word	0x40010400

0800de24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800de24:	b480      	push	{r7}
 800de26:	b083      	sub	sp, #12
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800de2c:	bf00      	nop
 800de2e:	370c      	adds	r7, #12
 800de30:	46bd      	mov	sp, r7
 800de32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de36:	4770      	bx	lr

0800de38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800de38:	b480      	push	{r7}
 800de3a:	b083      	sub	sp, #12
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800de40:	bf00      	nop
 800de42:	370c      	adds	r7, #12
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800de54:	bf00      	nop
 800de56:	370c      	adds	r7, #12
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr

0800de60 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800de60:	b480      	push	{r7}
 800de62:	b087      	sub	sp, #28
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	f003 031f 	and.w	r3, r3, #31
 800de72:	2204      	movs	r2, #4
 800de74:	fa02 f303 	lsl.w	r3, r2, r3
 800de78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	6a1a      	ldr	r2, [r3, #32]
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	43db      	mvns	r3, r3
 800de82:	401a      	ands	r2, r3
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	6a1a      	ldr	r2, [r3, #32]
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	f003 031f 	and.w	r3, r3, #31
 800de92:	6879      	ldr	r1, [r7, #4]
 800de94:	fa01 f303 	lsl.w	r3, r1, r3
 800de98:	431a      	orrs	r2, r3
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	621a      	str	r2, [r3, #32]
}
 800de9e:	bf00      	nop
 800dea0:	371c      	adds	r7, #28
 800dea2:	46bd      	mov	sp, r7
 800dea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea8:	4770      	bx	lr

0800deaa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800deaa:	b580      	push	{r7, lr}
 800deac:	b082      	sub	sp, #8
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d101      	bne.n	800debc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800deb8:	2301      	movs	r3, #1
 800deba:	e040      	b.n	800df3e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d106      	bne.n	800ded2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2200      	movs	r2, #0
 800dec8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7fa f88f 	bl	8007ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2224      	movs	r2, #36	; 0x24
 800ded6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f022 0201 	bic.w	r2, r2, #1
 800dee6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 fa7d 	bl	800e3e8 <UART_SetConfig>
 800deee:	4603      	mov	r3, r0
 800def0:	2b01      	cmp	r3, #1
 800def2:	d101      	bne.n	800def8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800def4:	2301      	movs	r3, #1
 800def6:	e022      	b.n	800df3e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800defc:	2b00      	cmp	r3, #0
 800defe:	d002      	beq.n	800df06 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f000 fd1b 	bl	800e93c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	685a      	ldr	r2, [r3, #4]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800df14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	689a      	ldr	r2, [r3, #8]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800df24:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f042 0201 	orr.w	r2, r2, #1
 800df34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 fda2 	bl	800ea80 <UART_CheckIdleState>
 800df3c:	4603      	mov	r3, r0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3708      	adds	r7, #8
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
	...

0800df48 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	60b9      	str	r1, [r7, #8]
 800df52:	4613      	mov	r3, r2
 800df54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df5a:	2b20      	cmp	r3, #32
 800df5c:	d164      	bne.n	800e028 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d002      	beq.n	800df6a <HAL_UART_Transmit_DMA+0x22>
 800df64:	88fb      	ldrh	r3, [r7, #6]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d101      	bne.n	800df6e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800df6a:	2301      	movs	r3, #1
 800df6c:	e05d      	b.n	800e02a <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800df74:	2b01      	cmp	r3, #1
 800df76:	d101      	bne.n	800df7c <HAL_UART_Transmit_DMA+0x34>
 800df78:	2302      	movs	r3, #2
 800df7a:	e056      	b.n	800e02a <HAL_UART_Transmit_DMA+0xe2>
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2201      	movs	r2, #1
 800df80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	68ba      	ldr	r2, [r7, #8]
 800df88:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	88fa      	ldrh	r2, [r7, #6]
 800df8e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	88fa      	ldrh	r2, [r7, #6]
 800df96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2200      	movs	r2, #0
 800df9e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2221      	movs	r2, #33	; 0x21
 800dfa4:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d02a      	beq.n	800e004 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfb2:	4a20      	ldr	r2, [pc, #128]	; (800e034 <HAL_UART_Transmit_DMA+0xec>)
 800dfb4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfba:	4a1f      	ldr	r2, [pc, #124]	; (800e038 <HAL_UART_Transmit_DMA+0xf0>)
 800dfbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfc2:	4a1e      	ldr	r2, [pc, #120]	; (800e03c <HAL_UART_Transmit_DMA+0xf4>)
 800dfc4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfca:	2200      	movs	r2, #0
 800dfcc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	3328      	adds	r3, #40	; 0x28
 800dfde:	461a      	mov	r2, r3
 800dfe0:	88fb      	ldrh	r3, [r7, #6]
 800dfe2:	f7fc fa4f 	bl	800a484 <HAL_DMA_Start_IT>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00b      	beq.n	800e004 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	2210      	movs	r2, #16
 800dff0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2220      	movs	r2, #32
 800dffe:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800e000:	2301      	movs	r3, #1
 800e002:	e012      	b.n	800e02a <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	2240      	movs	r2, #64	; 0x40
 800e00a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2200      	movs	r2, #0
 800e010:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	689a      	ldr	r2, [r3, #8]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e022:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800e024:	2300      	movs	r3, #0
 800e026:	e000      	b.n	800e02a <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800e028:	2302      	movs	r3, #2
  }
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3710      	adds	r7, #16
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
 800e032:	bf00      	nop
 800e034:	0800ec3f 	.word	0x0800ec3f
 800e038:	0800ec8f 	.word	0x0800ec8f
 800e03c:	0800ed2b 	.word	0x0800ed2b

0800e040 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	4613      	mov	r3, r2
 800e04c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e052:	2b20      	cmp	r3, #32
 800e054:	d16c      	bne.n	800e130 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d002      	beq.n	800e062 <HAL_UART_Receive_DMA+0x22>
 800e05c:	88fb      	ldrh	r3, [r7, #6]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d101      	bne.n	800e066 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800e062:	2301      	movs	r3, #1
 800e064:	e065      	b.n	800e132 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d101      	bne.n	800e074 <HAL_UART_Receive_DMA+0x34>
 800e070:	2302      	movs	r3, #2
 800e072:	e05e      	b.n	800e132 <HAL_UART_Receive_DMA+0xf2>
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2201      	movs	r2, #1
 800e078:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	68ba      	ldr	r2, [r7, #8]
 800e080:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	88fa      	ldrh	r2, [r7, #6]
 800e086:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	2200      	movs	r2, #0
 800e08e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	2222      	movs	r2, #34	; 0x22
 800e094:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d02a      	beq.n	800e0f4 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0a2:	4a26      	ldr	r2, [pc, #152]	; (800e13c <HAL_UART_Receive_DMA+0xfc>)
 800e0a4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0aa:	4a25      	ldr	r2, [pc, #148]	; (800e140 <HAL_UART_Receive_DMA+0x100>)
 800e0ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0b2:	4a24      	ldr	r2, [pc, #144]	; (800e144 <HAL_UART_Receive_DMA+0x104>)
 800e0b4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	3324      	adds	r3, #36	; 0x24
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	88fb      	ldrh	r3, [r7, #6]
 800e0d2:	f7fc f9d7 	bl	800a484 <HAL_DMA_Start_IT>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d00b      	beq.n	800e0f4 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2210      	movs	r2, #16
 800e0e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2220      	movs	r2, #32
 800e0ee:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	e01e      	b.n	800e132 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e10a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	689a      	ldr	r2, [r3, #8]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f042 0201 	orr.w	r2, r2, #1
 800e11a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	689a      	ldr	r2, [r3, #8]
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e12a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800e12c:	2300      	movs	r3, #0
 800e12e:	e000      	b.n	800e132 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800e130:	2302      	movs	r3, #2
  }
}
 800e132:	4618      	mov	r0, r3
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop
 800e13c:	0800ecab 	.word	0x0800ecab
 800e140:	0800ed0f 	.word	0x0800ed0f
 800e144:	0800ed2b 	.word	0x0800ed2b

0800e148 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
inline void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b088      	sub	sp, #32
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	69db      	ldr	r3, [r3, #28]
 800e156:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	689b      	ldr	r3, [r3, #8]
 800e166:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e168:	69fa      	ldr	r2, [r7, #28]
 800e16a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e16e:	4013      	ands	r3, r2
 800e170:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d113      	bne.n	800e1a0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	f003 0320 	and.w	r3, r3, #32
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d00e      	beq.n	800e1a0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e182:	69bb      	ldr	r3, [r7, #24]
 800e184:	f003 0320 	and.w	r3, r3, #32
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d009      	beq.n	800e1a0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e190:	2b00      	cmp	r3, #0
 800e192:	f000 8100 	beq.w	800e396 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	4798      	blx	r3
      }
      return;
 800e19e:	e0fa      	b.n	800e396 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	f000 80d5 	beq.w	800e352 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	f003 0301 	and.w	r3, r3, #1
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d105      	bne.n	800e1be <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	f000 80ca 	beq.w	800e352 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e1be:	69fb      	ldr	r3, [r7, #28]
 800e1c0:	f003 0301 	and.w	r3, r3, #1
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d00e      	beq.n	800e1e6 <HAL_UART_IRQHandler+0x9e>
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d009      	beq.n	800e1e6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1de:	f043 0201 	orr.w	r2, r3, #1
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	f003 0302 	and.w	r3, r3, #2
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00e      	beq.n	800e20e <HAL_UART_IRQHandler+0xc6>
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	f003 0301 	and.w	r3, r3, #1
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d009      	beq.n	800e20e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2202      	movs	r2, #2
 800e200:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e206:	f043 0204 	orr.w	r2, r3, #4
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	f003 0304 	and.w	r3, r3, #4
 800e214:	2b00      	cmp	r3, #0
 800e216:	d00e      	beq.n	800e236 <HAL_UART_IRQHandler+0xee>
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	f003 0301 	and.w	r3, r3, #1
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d009      	beq.n	800e236 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	2204      	movs	r2, #4
 800e228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e22e:	f043 0202 	orr.w	r2, r3, #2
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	f003 0308 	and.w	r3, r3, #8
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d013      	beq.n	800e268 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e240:	69bb      	ldr	r3, [r7, #24]
 800e242:	f003 0320 	and.w	r3, r3, #32
 800e246:	2b00      	cmp	r3, #0
 800e248:	d104      	bne.n	800e254 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e250:	2b00      	cmp	r3, #0
 800e252:	d009      	beq.n	800e268 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2208      	movs	r2, #8
 800e25a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e260:	f043 0208 	orr.w	r2, r3, #8
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d00f      	beq.n	800e292 <HAL_UART_IRQHandler+0x14a>
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00a      	beq.n	800e292 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e284:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e28a:	f043 0220 	orr.w	r2, r3, #32
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e296:	2b00      	cmp	r3, #0
 800e298:	d07f      	beq.n	800e39a <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	f003 0320 	and.w	r3, r3, #32
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d00c      	beq.n	800e2be <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e2a4:	69bb      	ldr	r3, [r7, #24]
 800e2a6:	f003 0320 	and.w	r3, r3, #32
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d007      	beq.n	800e2be <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d003      	beq.n	800e2be <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2c2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	689b      	ldr	r3, [r3, #8]
 800e2ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2ce:	2b40      	cmp	r3, #64	; 0x40
 800e2d0:	d004      	beq.n	800e2dc <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d031      	beq.n	800e340 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f000 fc8e 	bl	800ebfe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	689b      	ldr	r3, [r3, #8]
 800e2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2ec:	2b40      	cmp	r3, #64	; 0x40
 800e2ee:	d123      	bne.n	800e338 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	689a      	ldr	r2, [r3, #8]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e2fe:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e304:	2b00      	cmp	r3, #0
 800e306:	d013      	beq.n	800e330 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e30c:	4a26      	ldr	r2, [pc, #152]	; (800e3a8 <HAL_UART_IRQHandler+0x260>)
 800e30e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e314:	4618      	mov	r0, r3
 800e316:	f7fc f915 	bl	800a544 <HAL_DMA_Abort_IT>
 800e31a:	4603      	mov	r3, r0
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d016      	beq.n	800e34e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e32a:	4610      	mov	r0, r2
 800e32c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e32e:	e00e      	b.n	800e34e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f7f8 fbaa 	bl	8006a8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e336:	e00a      	b.n	800e34e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f7f8 fba6 	bl	8006a8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e33e:	e006      	b.n	800e34e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f7f8 fba2 	bl	8006a8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2200      	movs	r2, #0
 800e34a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800e34c:	e025      	b.n	800e39a <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e34e:	bf00      	nop
    return;
 800e350:	e023      	b.n	800e39a <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e352:	69fb      	ldr	r3, [r7, #28]
 800e354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d00d      	beq.n	800e378 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e35c:	69bb      	ldr	r3, [r7, #24]
 800e35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e362:	2b00      	cmp	r3, #0
 800e364:	d008      	beq.n	800e378 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d017      	beq.n	800e39e <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	4798      	blx	r3
    }
    return;
 800e376:	e012      	b.n	800e39e <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e378:	69fb      	ldr	r3, [r7, #28]
 800e37a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d00e      	beq.n	800e3a0 <HAL_UART_IRQHandler+0x258>
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d009      	beq.n	800e3a0 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f000 fd1e 	bl	800edce <UART_EndTransmit_IT>
    return;
 800e392:	bf00      	nop
 800e394:	e004      	b.n	800e3a0 <HAL_UART_IRQHandler+0x258>
      return;
 800e396:	bf00      	nop
 800e398:	e002      	b.n	800e3a0 <HAL_UART_IRQHandler+0x258>
    return;
 800e39a:	bf00      	nop
 800e39c:	e000      	b.n	800e3a0 <HAL_UART_IRQHandler+0x258>
    return;
 800e39e:	bf00      	nop
  }

}
 800e3a0:	3720      	adds	r7, #32
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}
 800e3a6:	bf00      	nop
 800e3a8:	0800eda3 	.word	0x0800eda3

0800e3ac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e3b4:	bf00      	nop
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e3c8:	bf00      	nop
 800e3ca:	370c      	adds	r7, #12
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e3dc:	bf00      	nop
 800e3de:	370c      	adds	r7, #12
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr

0800e3e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b088      	sub	sp, #32
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	689a      	ldr	r2, [r3, #8]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	431a      	orrs	r2, r3
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	695b      	ldr	r3, [r3, #20]
 800e406:	431a      	orrs	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	69db      	ldr	r3, [r3, #28]
 800e40c:	4313      	orrs	r3, r2
 800e40e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	4bb1      	ldr	r3, [pc, #708]	; (800e6dc <UART_SetConfig+0x2f4>)
 800e418:	4013      	ands	r3, r2
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	6812      	ldr	r2, [r2, #0]
 800e41e:	6939      	ldr	r1, [r7, #16]
 800e420:	430b      	orrs	r3, r1
 800e422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	68da      	ldr	r2, [r3, #12]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	430a      	orrs	r2, r1
 800e438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	699b      	ldr	r3, [r3, #24]
 800e43e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6a1b      	ldr	r3, [r3, #32]
 800e444:	693a      	ldr	r2, [r7, #16]
 800e446:	4313      	orrs	r3, r2
 800e448:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	689b      	ldr	r3, [r3, #8]
 800e450:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	693a      	ldr	r2, [r7, #16]
 800e45a:	430a      	orrs	r2, r1
 800e45c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	4a9f      	ldr	r2, [pc, #636]	; (800e6e0 <UART_SetConfig+0x2f8>)
 800e464:	4293      	cmp	r3, r2
 800e466:	d121      	bne.n	800e4ac <UART_SetConfig+0xc4>
 800e468:	4b9e      	ldr	r3, [pc, #632]	; (800e6e4 <UART_SetConfig+0x2fc>)
 800e46a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e46e:	f003 0303 	and.w	r3, r3, #3
 800e472:	2b03      	cmp	r3, #3
 800e474:	d816      	bhi.n	800e4a4 <UART_SetConfig+0xbc>
 800e476:	a201      	add	r2, pc, #4	; (adr r2, 800e47c <UART_SetConfig+0x94>)
 800e478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e47c:	0800e48d 	.word	0x0800e48d
 800e480:	0800e499 	.word	0x0800e499
 800e484:	0800e493 	.word	0x0800e493
 800e488:	0800e49f 	.word	0x0800e49f
 800e48c:	2301      	movs	r3, #1
 800e48e:	77fb      	strb	r3, [r7, #31]
 800e490:	e151      	b.n	800e736 <UART_SetConfig+0x34e>
 800e492:	2302      	movs	r3, #2
 800e494:	77fb      	strb	r3, [r7, #31]
 800e496:	e14e      	b.n	800e736 <UART_SetConfig+0x34e>
 800e498:	2304      	movs	r3, #4
 800e49a:	77fb      	strb	r3, [r7, #31]
 800e49c:	e14b      	b.n	800e736 <UART_SetConfig+0x34e>
 800e49e:	2308      	movs	r3, #8
 800e4a0:	77fb      	strb	r3, [r7, #31]
 800e4a2:	e148      	b.n	800e736 <UART_SetConfig+0x34e>
 800e4a4:	2310      	movs	r3, #16
 800e4a6:	77fb      	strb	r3, [r7, #31]
 800e4a8:	bf00      	nop
 800e4aa:	e144      	b.n	800e736 <UART_SetConfig+0x34e>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a8d      	ldr	r2, [pc, #564]	; (800e6e8 <UART_SetConfig+0x300>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d134      	bne.n	800e520 <UART_SetConfig+0x138>
 800e4b6:	4b8b      	ldr	r3, [pc, #556]	; (800e6e4 <UART_SetConfig+0x2fc>)
 800e4b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4bc:	f003 030c 	and.w	r3, r3, #12
 800e4c0:	2b0c      	cmp	r3, #12
 800e4c2:	d829      	bhi.n	800e518 <UART_SetConfig+0x130>
 800e4c4:	a201      	add	r2, pc, #4	; (adr r2, 800e4cc <UART_SetConfig+0xe4>)
 800e4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4ca:	bf00      	nop
 800e4cc:	0800e501 	.word	0x0800e501
 800e4d0:	0800e519 	.word	0x0800e519
 800e4d4:	0800e519 	.word	0x0800e519
 800e4d8:	0800e519 	.word	0x0800e519
 800e4dc:	0800e50d 	.word	0x0800e50d
 800e4e0:	0800e519 	.word	0x0800e519
 800e4e4:	0800e519 	.word	0x0800e519
 800e4e8:	0800e519 	.word	0x0800e519
 800e4ec:	0800e507 	.word	0x0800e507
 800e4f0:	0800e519 	.word	0x0800e519
 800e4f4:	0800e519 	.word	0x0800e519
 800e4f8:	0800e519 	.word	0x0800e519
 800e4fc:	0800e513 	.word	0x0800e513
 800e500:	2300      	movs	r3, #0
 800e502:	77fb      	strb	r3, [r7, #31]
 800e504:	e117      	b.n	800e736 <UART_SetConfig+0x34e>
 800e506:	2302      	movs	r3, #2
 800e508:	77fb      	strb	r3, [r7, #31]
 800e50a:	e114      	b.n	800e736 <UART_SetConfig+0x34e>
 800e50c:	2304      	movs	r3, #4
 800e50e:	77fb      	strb	r3, [r7, #31]
 800e510:	e111      	b.n	800e736 <UART_SetConfig+0x34e>
 800e512:	2308      	movs	r3, #8
 800e514:	77fb      	strb	r3, [r7, #31]
 800e516:	e10e      	b.n	800e736 <UART_SetConfig+0x34e>
 800e518:	2310      	movs	r3, #16
 800e51a:	77fb      	strb	r3, [r7, #31]
 800e51c:	bf00      	nop
 800e51e:	e10a      	b.n	800e736 <UART_SetConfig+0x34e>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	4a71      	ldr	r2, [pc, #452]	; (800e6ec <UART_SetConfig+0x304>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d120      	bne.n	800e56c <UART_SetConfig+0x184>
 800e52a:	4b6e      	ldr	r3, [pc, #440]	; (800e6e4 <UART_SetConfig+0x2fc>)
 800e52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e530:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e534:	2b10      	cmp	r3, #16
 800e536:	d00f      	beq.n	800e558 <UART_SetConfig+0x170>
 800e538:	2b10      	cmp	r3, #16
 800e53a:	d802      	bhi.n	800e542 <UART_SetConfig+0x15a>
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d005      	beq.n	800e54c <UART_SetConfig+0x164>
 800e540:	e010      	b.n	800e564 <UART_SetConfig+0x17c>
 800e542:	2b20      	cmp	r3, #32
 800e544:	d005      	beq.n	800e552 <UART_SetConfig+0x16a>
 800e546:	2b30      	cmp	r3, #48	; 0x30
 800e548:	d009      	beq.n	800e55e <UART_SetConfig+0x176>
 800e54a:	e00b      	b.n	800e564 <UART_SetConfig+0x17c>
 800e54c:	2300      	movs	r3, #0
 800e54e:	77fb      	strb	r3, [r7, #31]
 800e550:	e0f1      	b.n	800e736 <UART_SetConfig+0x34e>
 800e552:	2302      	movs	r3, #2
 800e554:	77fb      	strb	r3, [r7, #31]
 800e556:	e0ee      	b.n	800e736 <UART_SetConfig+0x34e>
 800e558:	2304      	movs	r3, #4
 800e55a:	77fb      	strb	r3, [r7, #31]
 800e55c:	e0eb      	b.n	800e736 <UART_SetConfig+0x34e>
 800e55e:	2308      	movs	r3, #8
 800e560:	77fb      	strb	r3, [r7, #31]
 800e562:	e0e8      	b.n	800e736 <UART_SetConfig+0x34e>
 800e564:	2310      	movs	r3, #16
 800e566:	77fb      	strb	r3, [r7, #31]
 800e568:	bf00      	nop
 800e56a:	e0e4      	b.n	800e736 <UART_SetConfig+0x34e>
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4a5f      	ldr	r2, [pc, #380]	; (800e6f0 <UART_SetConfig+0x308>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d120      	bne.n	800e5b8 <UART_SetConfig+0x1d0>
 800e576:	4b5b      	ldr	r3, [pc, #364]	; (800e6e4 <UART_SetConfig+0x2fc>)
 800e578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e57c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e580:	2b40      	cmp	r3, #64	; 0x40
 800e582:	d00f      	beq.n	800e5a4 <UART_SetConfig+0x1bc>
 800e584:	2b40      	cmp	r3, #64	; 0x40
 800e586:	d802      	bhi.n	800e58e <UART_SetConfig+0x1a6>
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d005      	beq.n	800e598 <UART_SetConfig+0x1b0>
 800e58c:	e010      	b.n	800e5b0 <UART_SetConfig+0x1c8>
 800e58e:	2b80      	cmp	r3, #128	; 0x80
 800e590:	d005      	beq.n	800e59e <UART_SetConfig+0x1b6>
 800e592:	2bc0      	cmp	r3, #192	; 0xc0
 800e594:	d009      	beq.n	800e5aa <UART_SetConfig+0x1c2>
 800e596:	e00b      	b.n	800e5b0 <UART_SetConfig+0x1c8>
 800e598:	2300      	movs	r3, #0
 800e59a:	77fb      	strb	r3, [r7, #31]
 800e59c:	e0cb      	b.n	800e736 <UART_SetConfig+0x34e>
 800e59e:	2302      	movs	r3, #2
 800e5a0:	77fb      	strb	r3, [r7, #31]
 800e5a2:	e0c8      	b.n	800e736 <UART_SetConfig+0x34e>
 800e5a4:	2304      	movs	r3, #4
 800e5a6:	77fb      	strb	r3, [r7, #31]
 800e5a8:	e0c5      	b.n	800e736 <UART_SetConfig+0x34e>
 800e5aa:	2308      	movs	r3, #8
 800e5ac:	77fb      	strb	r3, [r7, #31]
 800e5ae:	e0c2      	b.n	800e736 <UART_SetConfig+0x34e>
 800e5b0:	2310      	movs	r3, #16
 800e5b2:	77fb      	strb	r3, [r7, #31]
 800e5b4:	bf00      	nop
 800e5b6:	e0be      	b.n	800e736 <UART_SetConfig+0x34e>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a4d      	ldr	r2, [pc, #308]	; (800e6f4 <UART_SetConfig+0x30c>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d124      	bne.n	800e60c <UART_SetConfig+0x224>
 800e5c2:	4b48      	ldr	r3, [pc, #288]	; (800e6e4 <UART_SetConfig+0x2fc>)
 800e5c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e5cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5d0:	d012      	beq.n	800e5f8 <UART_SetConfig+0x210>
 800e5d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5d6:	d802      	bhi.n	800e5de <UART_SetConfig+0x1f6>
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d007      	beq.n	800e5ec <UART_SetConfig+0x204>
 800e5dc:	e012      	b.n	800e604 <UART_SetConfig+0x21c>
 800e5de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5e2:	d006      	beq.n	800e5f2 <UART_SetConfig+0x20a>
 800e5e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e5e8:	d009      	beq.n	800e5fe <UART_SetConfig+0x216>
 800e5ea:	e00b      	b.n	800e604 <UART_SetConfig+0x21c>
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	77fb      	strb	r3, [r7, #31]
 800e5f0:	e0a1      	b.n	800e736 <UART_SetConfig+0x34e>
 800e5f2:	2302      	movs	r3, #2
 800e5f4:	77fb      	strb	r3, [r7, #31]
 800e5f6:	e09e      	b.n	800e736 <UART_SetConfig+0x34e>
 800e5f8:	2304      	movs	r3, #4
 800e5fa:	77fb      	strb	r3, [r7, #31]
 800e5fc:	e09b      	b.n	800e736 <UART_SetConfig+0x34e>
 800e5fe:	2308      	movs	r3, #8
 800e600:	77fb      	strb	r3, [r7, #31]
 800e602:	e098      	b.n	800e736 <UART_SetConfig+0x34e>
 800e604:	2310      	movs	r3, #16
 800e606:	77fb      	strb	r3, [r7, #31]
 800e608:	bf00      	nop
 800e60a:	e094      	b.n	800e736 <UART_SetConfig+0x34e>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4a39      	ldr	r2, [pc, #228]	; (800e6f8 <UART_SetConfig+0x310>)
 800e612:	4293      	cmp	r3, r2
 800e614:	d124      	bne.n	800e660 <UART_SetConfig+0x278>
 800e616:	4b33      	ldr	r3, [pc, #204]	; (800e6e4 <UART_SetConfig+0x2fc>)
 800e618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e61c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e624:	d012      	beq.n	800e64c <UART_SetConfig+0x264>
 800e626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e62a:	d802      	bhi.n	800e632 <UART_SetConfig+0x24a>
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d007      	beq.n	800e640 <UART_SetConfig+0x258>
 800e630:	e012      	b.n	800e658 <UART_SetConfig+0x270>
 800e632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e636:	d006      	beq.n	800e646 <UART_SetConfig+0x25e>
 800e638:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e63c:	d009      	beq.n	800e652 <UART_SetConfig+0x26a>
 800e63e:	e00b      	b.n	800e658 <UART_SetConfig+0x270>
 800e640:	2301      	movs	r3, #1
 800e642:	77fb      	strb	r3, [r7, #31]
 800e644:	e077      	b.n	800e736 <UART_SetConfig+0x34e>
 800e646:	2302      	movs	r3, #2
 800e648:	77fb      	strb	r3, [r7, #31]
 800e64a:	e074      	b.n	800e736 <UART_SetConfig+0x34e>
 800e64c:	2304      	movs	r3, #4
 800e64e:	77fb      	strb	r3, [r7, #31]
 800e650:	e071      	b.n	800e736 <UART_SetConfig+0x34e>
 800e652:	2308      	movs	r3, #8
 800e654:	77fb      	strb	r3, [r7, #31]
 800e656:	e06e      	b.n	800e736 <UART_SetConfig+0x34e>
 800e658:	2310      	movs	r3, #16
 800e65a:	77fb      	strb	r3, [r7, #31]
 800e65c:	bf00      	nop
 800e65e:	e06a      	b.n	800e736 <UART_SetConfig+0x34e>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	4a25      	ldr	r2, [pc, #148]	; (800e6fc <UART_SetConfig+0x314>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d124      	bne.n	800e6b4 <UART_SetConfig+0x2cc>
 800e66a:	4b1e      	ldr	r3, [pc, #120]	; (800e6e4 <UART_SetConfig+0x2fc>)
 800e66c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e670:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e678:	d012      	beq.n	800e6a0 <UART_SetConfig+0x2b8>
 800e67a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e67e:	d802      	bhi.n	800e686 <UART_SetConfig+0x29e>
 800e680:	2b00      	cmp	r3, #0
 800e682:	d007      	beq.n	800e694 <UART_SetConfig+0x2ac>
 800e684:	e012      	b.n	800e6ac <UART_SetConfig+0x2c4>
 800e686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e68a:	d006      	beq.n	800e69a <UART_SetConfig+0x2b2>
 800e68c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e690:	d009      	beq.n	800e6a6 <UART_SetConfig+0x2be>
 800e692:	e00b      	b.n	800e6ac <UART_SetConfig+0x2c4>
 800e694:	2300      	movs	r3, #0
 800e696:	77fb      	strb	r3, [r7, #31]
 800e698:	e04d      	b.n	800e736 <UART_SetConfig+0x34e>
 800e69a:	2302      	movs	r3, #2
 800e69c:	77fb      	strb	r3, [r7, #31]
 800e69e:	e04a      	b.n	800e736 <UART_SetConfig+0x34e>
 800e6a0:	2304      	movs	r3, #4
 800e6a2:	77fb      	strb	r3, [r7, #31]
 800e6a4:	e047      	b.n	800e736 <UART_SetConfig+0x34e>
 800e6a6:	2308      	movs	r3, #8
 800e6a8:	77fb      	strb	r3, [r7, #31]
 800e6aa:	e044      	b.n	800e736 <UART_SetConfig+0x34e>
 800e6ac:	2310      	movs	r3, #16
 800e6ae:	77fb      	strb	r3, [r7, #31]
 800e6b0:	bf00      	nop
 800e6b2:	e040      	b.n	800e736 <UART_SetConfig+0x34e>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4a11      	ldr	r2, [pc, #68]	; (800e700 <UART_SetConfig+0x318>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d139      	bne.n	800e732 <UART_SetConfig+0x34a>
 800e6be:	4b09      	ldr	r3, [pc, #36]	; (800e6e4 <UART_SetConfig+0x2fc>)
 800e6c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e6c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e6cc:	d027      	beq.n	800e71e <UART_SetConfig+0x336>
 800e6ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e6d2:	d817      	bhi.n	800e704 <UART_SetConfig+0x31c>
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d01c      	beq.n	800e712 <UART_SetConfig+0x32a>
 800e6d8:	e027      	b.n	800e72a <UART_SetConfig+0x342>
 800e6da:	bf00      	nop
 800e6dc:	efff69f3 	.word	0xefff69f3
 800e6e0:	40011000 	.word	0x40011000
 800e6e4:	40023800 	.word	0x40023800
 800e6e8:	40004400 	.word	0x40004400
 800e6ec:	40004800 	.word	0x40004800
 800e6f0:	40004c00 	.word	0x40004c00
 800e6f4:	40005000 	.word	0x40005000
 800e6f8:	40011400 	.word	0x40011400
 800e6fc:	40007800 	.word	0x40007800
 800e700:	40007c00 	.word	0x40007c00
 800e704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e708:	d006      	beq.n	800e718 <UART_SetConfig+0x330>
 800e70a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e70e:	d009      	beq.n	800e724 <UART_SetConfig+0x33c>
 800e710:	e00b      	b.n	800e72a <UART_SetConfig+0x342>
 800e712:	2300      	movs	r3, #0
 800e714:	77fb      	strb	r3, [r7, #31]
 800e716:	e00e      	b.n	800e736 <UART_SetConfig+0x34e>
 800e718:	2302      	movs	r3, #2
 800e71a:	77fb      	strb	r3, [r7, #31]
 800e71c:	e00b      	b.n	800e736 <UART_SetConfig+0x34e>
 800e71e:	2304      	movs	r3, #4
 800e720:	77fb      	strb	r3, [r7, #31]
 800e722:	e008      	b.n	800e736 <UART_SetConfig+0x34e>
 800e724:	2308      	movs	r3, #8
 800e726:	77fb      	strb	r3, [r7, #31]
 800e728:	e005      	b.n	800e736 <UART_SetConfig+0x34e>
 800e72a:	2310      	movs	r3, #16
 800e72c:	77fb      	strb	r3, [r7, #31]
 800e72e:	bf00      	nop
 800e730:	e001      	b.n	800e736 <UART_SetConfig+0x34e>
 800e732:	2310      	movs	r3, #16
 800e734:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	69db      	ldr	r3, [r3, #28]
 800e73a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e73e:	d17f      	bne.n	800e840 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800e740:	7ffb      	ldrb	r3, [r7, #31]
 800e742:	2b08      	cmp	r3, #8
 800e744:	d85c      	bhi.n	800e800 <UART_SetConfig+0x418>
 800e746:	a201      	add	r2, pc, #4	; (adr r2, 800e74c <UART_SetConfig+0x364>)
 800e748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e74c:	0800e771 	.word	0x0800e771
 800e750:	0800e791 	.word	0x0800e791
 800e754:	0800e7b1 	.word	0x0800e7b1
 800e758:	0800e801 	.word	0x0800e801
 800e75c:	0800e7c9 	.word	0x0800e7c9
 800e760:	0800e801 	.word	0x0800e801
 800e764:	0800e801 	.word	0x0800e801
 800e768:	0800e801 	.word	0x0800e801
 800e76c:	0800e7e9 	.word	0x0800e7e9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e770:	f7fd f804 	bl	800b77c <HAL_RCC_GetPCLK1Freq>
 800e774:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	005a      	lsls	r2, r3, #1
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	085b      	lsrs	r3, r3, #1
 800e780:	441a      	add	r2, r3
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	685b      	ldr	r3, [r3, #4]
 800e786:	fbb2 f3f3 	udiv	r3, r2, r3
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	61bb      	str	r3, [r7, #24]
        break;
 800e78e:	e03a      	b.n	800e806 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e790:	f7fd f808 	bl	800b7a4 <HAL_RCC_GetPCLK2Freq>
 800e794:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	005a      	lsls	r2, r3, #1
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	085b      	lsrs	r3, r3, #1
 800e7a0:	441a      	add	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7aa:	b29b      	uxth	r3, r3
 800e7ac:	61bb      	str	r3, [r7, #24]
        break;
 800e7ae:	e02a      	b.n	800e806 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	085a      	lsrs	r2, r3, #1
 800e7b6:	4b5f      	ldr	r3, [pc, #380]	; (800e934 <UART_SetConfig+0x54c>)
 800e7b8:	4413      	add	r3, r2
 800e7ba:	687a      	ldr	r2, [r7, #4]
 800e7bc:	6852      	ldr	r2, [r2, #4]
 800e7be:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7c2:	b29b      	uxth	r3, r3
 800e7c4:	61bb      	str	r3, [r7, #24]
        break;
 800e7c6:	e01e      	b.n	800e806 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e7c8:	f7fc ff1a 	bl	800b600 <HAL_RCC_GetSysClockFreq>
 800e7cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	005a      	lsls	r2, r3, #1
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	085b      	lsrs	r3, r3, #1
 800e7d8:	441a      	add	r2, r3
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	61bb      	str	r3, [r7, #24]
        break;
 800e7e6:	e00e      	b.n	800e806 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	085b      	lsrs	r3, r3, #1
 800e7ee:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	685b      	ldr	r3, [r3, #4]
 800e7f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	61bb      	str	r3, [r7, #24]
        break;
 800e7fe:	e002      	b.n	800e806 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800e800:	2301      	movs	r3, #1
 800e802:	75fb      	strb	r3, [r7, #23]
        break;
 800e804:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e806:	69bb      	ldr	r3, [r7, #24]
 800e808:	2b0f      	cmp	r3, #15
 800e80a:	d916      	bls.n	800e83a <UART_SetConfig+0x452>
 800e80c:	69bb      	ldr	r3, [r7, #24]
 800e80e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e812:	d212      	bcs.n	800e83a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e814:	69bb      	ldr	r3, [r7, #24]
 800e816:	b29b      	uxth	r3, r3
 800e818:	f023 030f 	bic.w	r3, r3, #15
 800e81c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e81e:	69bb      	ldr	r3, [r7, #24]
 800e820:	085b      	lsrs	r3, r3, #1
 800e822:	b29b      	uxth	r3, r3
 800e824:	f003 0307 	and.w	r3, r3, #7
 800e828:	b29a      	uxth	r2, r3
 800e82a:	897b      	ldrh	r3, [r7, #10]
 800e82c:	4313      	orrs	r3, r2
 800e82e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	897a      	ldrh	r2, [r7, #10]
 800e836:	60da      	str	r2, [r3, #12]
 800e838:	e070      	b.n	800e91c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800e83a:	2301      	movs	r3, #1
 800e83c:	75fb      	strb	r3, [r7, #23]
 800e83e:	e06d      	b.n	800e91c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800e840:	7ffb      	ldrb	r3, [r7, #31]
 800e842:	2b08      	cmp	r3, #8
 800e844:	d859      	bhi.n	800e8fa <UART_SetConfig+0x512>
 800e846:	a201      	add	r2, pc, #4	; (adr r2, 800e84c <UART_SetConfig+0x464>)
 800e848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e84c:	0800e871 	.word	0x0800e871
 800e850:	0800e88f 	.word	0x0800e88f
 800e854:	0800e8ad 	.word	0x0800e8ad
 800e858:	0800e8fb 	.word	0x0800e8fb
 800e85c:	0800e8c5 	.word	0x0800e8c5
 800e860:	0800e8fb 	.word	0x0800e8fb
 800e864:	0800e8fb 	.word	0x0800e8fb
 800e868:	0800e8fb 	.word	0x0800e8fb
 800e86c:	0800e8e3 	.word	0x0800e8e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e870:	f7fc ff84 	bl	800b77c <HAL_RCC_GetPCLK1Freq>
 800e874:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	085a      	lsrs	r2, r3, #1
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	441a      	add	r2, r3
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	685b      	ldr	r3, [r3, #4]
 800e884:	fbb2 f3f3 	udiv	r3, r2, r3
 800e888:	b29b      	uxth	r3, r3
 800e88a:	61bb      	str	r3, [r7, #24]
        break;
 800e88c:	e038      	b.n	800e900 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e88e:	f7fc ff89 	bl	800b7a4 <HAL_RCC_GetPCLK2Freq>
 800e892:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	085a      	lsrs	r2, r3, #1
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	441a      	add	r2, r3
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	61bb      	str	r3, [r7, #24]
        break;
 800e8aa:	e029      	b.n	800e900 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	085a      	lsrs	r2, r3, #1
 800e8b2:	4b21      	ldr	r3, [pc, #132]	; (800e938 <UART_SetConfig+0x550>)
 800e8b4:	4413      	add	r3, r2
 800e8b6:	687a      	ldr	r2, [r7, #4]
 800e8b8:	6852      	ldr	r2, [r2, #4]
 800e8ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8be:	b29b      	uxth	r3, r3
 800e8c0:	61bb      	str	r3, [r7, #24]
        break;
 800e8c2:	e01d      	b.n	800e900 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e8c4:	f7fc fe9c 	bl	800b600 <HAL_RCC_GetSysClockFreq>
 800e8c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	085a      	lsrs	r2, r3, #1
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	441a      	add	r2, r3
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	61bb      	str	r3, [r7, #24]
        break;
 800e8e0:	e00e      	b.n	800e900 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	085b      	lsrs	r3, r3, #1
 800e8e8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	61bb      	str	r3, [r7, #24]
        break;
 800e8f8:	e002      	b.n	800e900 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	75fb      	strb	r3, [r7, #23]
        break;
 800e8fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e900:	69bb      	ldr	r3, [r7, #24]
 800e902:	2b0f      	cmp	r3, #15
 800e904:	d908      	bls.n	800e918 <UART_SetConfig+0x530>
 800e906:	69bb      	ldr	r3, [r7, #24]
 800e908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e90c:	d204      	bcs.n	800e918 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	69ba      	ldr	r2, [r7, #24]
 800e914:	60da      	str	r2, [r3, #12]
 800e916:	e001      	b.n	800e91c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800e918:	2301      	movs	r3, #1
 800e91a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2200      	movs	r2, #0
 800e920:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2200      	movs	r2, #0
 800e926:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800e928:	7dfb      	ldrb	r3, [r7, #23]
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3720      	adds	r7, #32
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	01e84800 	.word	0x01e84800
 800e938:	00f42400 	.word	0x00f42400

0800e93c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e93c:	b480      	push	{r7}
 800e93e:	b083      	sub	sp, #12
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e948:	f003 0301 	and.w	r3, r3, #1
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d00a      	beq.n	800e966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	430a      	orrs	r2, r1
 800e964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e96a:	f003 0302 	and.w	r3, r3, #2
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d00a      	beq.n	800e988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	430a      	orrs	r2, r1
 800e986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e98c:	f003 0304 	and.w	r3, r3, #4
 800e990:	2b00      	cmp	r3, #0
 800e992:	d00a      	beq.n	800e9aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	430a      	orrs	r2, r1
 800e9a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ae:	f003 0308 	and.w	r3, r3, #8
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d00a      	beq.n	800e9cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	430a      	orrs	r2, r1
 800e9ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9d0:	f003 0310 	and.w	r3, r3, #16
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d00a      	beq.n	800e9ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	689b      	ldr	r3, [r3, #8]
 800e9de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	430a      	orrs	r2, r1
 800e9ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f2:	f003 0320 	and.w	r3, r3, #32
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d00a      	beq.n	800ea10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	689b      	ldr	r3, [r3, #8]
 800ea00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	430a      	orrs	r2, r1
 800ea0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d01a      	beq.n	800ea52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	685b      	ldr	r3, [r3, #4]
 800ea22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	430a      	orrs	r2, r1
 800ea30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea3a:	d10a      	bne.n	800ea52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	685b      	ldr	r3, [r3, #4]
 800ea42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	430a      	orrs	r2, r1
 800ea50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d00a      	beq.n	800ea74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	430a      	orrs	r2, r1
 800ea72:	605a      	str	r2, [r3, #4]
  }
}
 800ea74:	bf00      	nop
 800ea76:	370c      	adds	r7, #12
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b086      	sub	sp, #24
 800ea84:	af02      	add	r7, sp, #8
 800ea86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ea8e:	f7fa fea9 	bl	80097e4 <HAL_GetTick>
 800ea92:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f003 0308 	and.w	r3, r3, #8
 800ea9e:	2b08      	cmp	r3, #8
 800eaa0:	d10e      	bne.n	800eac0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eaa2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eaa6:	9300      	str	r3, [sp, #0]
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 f814 	bl	800eade <UART_WaitOnFlagUntilTimeout>
 800eab6:	4603      	mov	r3, r0
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d001      	beq.n	800eac0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eabc:	2303      	movs	r3, #3
 800eabe:	e00a      	b.n	800ead6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2220      	movs	r2, #32
 800eac4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2220      	movs	r2, #32
 800eaca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2200      	movs	r2, #0
 800ead0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ead4:	2300      	movs	r3, #0
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3710      	adds	r7, #16
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}

0800eade <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eade:	b580      	push	{r7, lr}
 800eae0:	b084      	sub	sp, #16
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	60f8      	str	r0, [r7, #12]
 800eae6:	60b9      	str	r1, [r7, #8]
 800eae8:	603b      	str	r3, [r7, #0]
 800eaea:	4613      	mov	r3, r2
 800eaec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eaee:	e05d      	b.n	800ebac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eaf0:	69bb      	ldr	r3, [r7, #24]
 800eaf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaf6:	d059      	beq.n	800ebac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eaf8:	f7fa fe74 	bl	80097e4 <HAL_GetTick>
 800eafc:	4602      	mov	r2, r0
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	1ad3      	subs	r3, r2, r3
 800eb02:	69ba      	ldr	r2, [r7, #24]
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d302      	bcc.n	800eb0e <UART_WaitOnFlagUntilTimeout+0x30>
 800eb08:	69bb      	ldr	r3, [r7, #24]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d11b      	bne.n	800eb46 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	681a      	ldr	r2, [r3, #0]
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800eb1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	689a      	ldr	r2, [r3, #8]
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f022 0201 	bic.w	r2, r2, #1
 800eb2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2220      	movs	r2, #32
 800eb32:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2220      	movs	r2, #32
 800eb38:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800eb42:	2303      	movs	r3, #3
 800eb44:	e042      	b.n	800ebcc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f003 0304 	and.w	r3, r3, #4
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d02b      	beq.n	800ebac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	69db      	ldr	r3, [r3, #28]
 800eb5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb62:	d123      	bne.n	800ebac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eb6c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800eb7c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	689a      	ldr	r2, [r3, #8]
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f022 0201 	bic.w	r2, r2, #1
 800eb8c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2220      	movs	r2, #32
 800eb92:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2220      	movs	r2, #32
 800eb98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	2220      	movs	r2, #32
 800eb9e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2200      	movs	r2, #0
 800eba4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800eba8:	2303      	movs	r3, #3
 800ebaa:	e00f      	b.n	800ebcc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	69da      	ldr	r2, [r3, #28]
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	4013      	ands	r3, r2
 800ebb6:	68ba      	ldr	r2, [r7, #8]
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	bf0c      	ite	eq
 800ebbc:	2301      	moveq	r3, #1
 800ebbe:	2300      	movne	r3, #0
 800ebc0:	b2db      	uxtb	r3, r3
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	79fb      	ldrb	r3, [r7, #7]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d092      	beq.n	800eaf0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ebca:	2300      	movs	r3, #0
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ebea:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2220      	movs	r2, #32
 800ebf0:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ebf2:	bf00      	nop
 800ebf4:	370c      	adds	r7, #12
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr

0800ebfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ebfe:	b480      	push	{r7}
 800ec00:	b083      	sub	sp, #12
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ec14:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	689a      	ldr	r2, [r3, #8]
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	f022 0201 	bic.w	r2, r2, #1
 800ec24:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2220      	movs	r2, #32
 800ec2a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	661a      	str	r2, [r3, #96]	; 0x60
}
 800ec32:	bf00      	nop
 800ec34:	370c      	adds	r7, #12
 800ec36:	46bd      	mov	sp, r7
 800ec38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3c:	4770      	bx	lr

0800ec3e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b084      	sub	sp, #16
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec4a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	69db      	ldr	r3, [r3, #28]
 800ec50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec54:	d014      	beq.n	800ec80 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	689a      	ldr	r2, [r3, #8]
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ec6c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec7c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ec7e:	e002      	b.n	800ec86 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800ec80:	68f8      	ldr	r0, [r7, #12]
 800ec82:	f7f7 fef7 	bl	8006a74 <HAL_UART_TxCpltCallback>
}
 800ec86:	bf00      	nop
 800ec88:	3710      	adds	r7, #16
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ec8e:	b580      	push	{r7, lr}
 800ec90:	b084      	sub	sp, #16
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec9a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f7ff fb85 	bl	800e3ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eca2:	bf00      	nop
 800eca4:	3710      	adds	r7, #16
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}

0800ecaa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ecaa:	b580      	push	{r7, lr}
 800ecac:	b084      	sub	sp, #16
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecb6:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	69db      	ldr	r3, [r3, #28]
 800ecbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecc0:	d01e      	beq.n	800ed00 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	681a      	ldr	r2, [r3, #0]
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ecd8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	689a      	ldr	r2, [r3, #8]
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f022 0201 	bic.w	r2, r2, #1
 800ece8:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	689a      	ldr	r2, [r3, #8]
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ecf8:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2220      	movs	r2, #32
 800ecfe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f7ff fb5d 	bl	800e3c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed06:	bf00      	nop
 800ed08:	3710      	adds	r7, #16
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ed0e:	b580      	push	{r7, lr}
 800ed10:	b084      	sub	sp, #16
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed1a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800ed1c:	68f8      	ldr	r0, [r7, #12]
 800ed1e:	f7ff fb59 	bl	800e3d4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed22:	bf00      	nop
 800ed24:	3710      	adds	r7, #16
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}

0800ed2a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ed2a:	b580      	push	{r7, lr}
 800ed2c:	b086      	sub	sp, #24
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed36:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed3c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed42:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	689b      	ldr	r3, [r3, #8]
 800ed4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed4e:	2b80      	cmp	r3, #128	; 0x80
 800ed50:	d109      	bne.n	800ed66 <UART_DMAError+0x3c>
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	2b21      	cmp	r3, #33	; 0x21
 800ed56:	d106      	bne.n	800ed66 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ed60:	6978      	ldr	r0, [r7, #20]
 800ed62:	f7ff ff37 	bl	800ebd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	689b      	ldr	r3, [r3, #8]
 800ed6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed70:	2b40      	cmp	r3, #64	; 0x40
 800ed72:	d109      	bne.n	800ed88 <UART_DMAError+0x5e>
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2b22      	cmp	r3, #34	; 0x22
 800ed78:	d106      	bne.n	800ed88 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ed82:	6978      	ldr	r0, [r7, #20]
 800ed84:	f7ff ff3b 	bl	800ebfe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed8c:	f043 0210 	orr.w	r2, r3, #16
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ed94:	6978      	ldr	r0, [r7, #20]
 800ed96:	f7f7 fe78 	bl	8006a8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed9a:	bf00      	nop
 800ed9c:	3718      	adds	r7, #24
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}

0800eda2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eda2:	b580      	push	{r7, lr}
 800eda4:	b084      	sub	sp, #16
 800eda6:	af00      	add	r7, sp, #0
 800eda8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2200      	movs	r2, #0
 800edb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2200      	movs	r2, #0
 800edbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800edc0:	68f8      	ldr	r0, [r7, #12]
 800edc2:	f7f7 fe62 	bl	8006a8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800edc6:	bf00      	nop
 800edc8:	3710      	adds	r7, #16
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}

0800edce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800edce:	b580      	push	{r7, lr}
 800edd0:	b082      	sub	sp, #8
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	681a      	ldr	r2, [r3, #0]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ede4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2220      	movs	r2, #32
 800edea:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2200      	movs	r2, #0
 800edf0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f7f7 fe3e 	bl	8006a74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800edf8:	bf00      	nop
 800edfa:	3708      	adds	r7, #8
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <__libc_init_array>:
 800ee00:	b570      	push	{r4, r5, r6, lr}
 800ee02:	4e0d      	ldr	r6, [pc, #52]	; (800ee38 <__libc_init_array+0x38>)
 800ee04:	4c0d      	ldr	r4, [pc, #52]	; (800ee3c <__libc_init_array+0x3c>)
 800ee06:	1ba4      	subs	r4, r4, r6
 800ee08:	10a4      	asrs	r4, r4, #2
 800ee0a:	2500      	movs	r5, #0
 800ee0c:	42a5      	cmp	r5, r4
 800ee0e:	d109      	bne.n	800ee24 <__libc_init_array+0x24>
 800ee10:	4e0b      	ldr	r6, [pc, #44]	; (800ee40 <__libc_init_array+0x40>)
 800ee12:	4c0c      	ldr	r4, [pc, #48]	; (800ee44 <__libc_init_array+0x44>)
 800ee14:	f000 f834 	bl	800ee80 <_init>
 800ee18:	1ba4      	subs	r4, r4, r6
 800ee1a:	10a4      	asrs	r4, r4, #2
 800ee1c:	2500      	movs	r5, #0
 800ee1e:	42a5      	cmp	r5, r4
 800ee20:	d105      	bne.n	800ee2e <__libc_init_array+0x2e>
 800ee22:	bd70      	pop	{r4, r5, r6, pc}
 800ee24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ee28:	4798      	blx	r3
 800ee2a:	3501      	adds	r5, #1
 800ee2c:	e7ee      	b.n	800ee0c <__libc_init_array+0xc>
 800ee2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ee32:	4798      	blx	r3
 800ee34:	3501      	adds	r5, #1
 800ee36:	e7f2      	b.n	800ee1e <__libc_init_array+0x1e>
 800ee38:	0800eed0 	.word	0x0800eed0
 800ee3c:	0800eed0 	.word	0x0800eed0
 800ee40:	0800eed0 	.word	0x0800eed0
 800ee44:	0800eed4 	.word	0x0800eed4

0800ee48 <memcpy>:
 800ee48:	b510      	push	{r4, lr}
 800ee4a:	1e43      	subs	r3, r0, #1
 800ee4c:	440a      	add	r2, r1
 800ee4e:	4291      	cmp	r1, r2
 800ee50:	d100      	bne.n	800ee54 <memcpy+0xc>
 800ee52:	bd10      	pop	{r4, pc}
 800ee54:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee58:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee5c:	e7f7      	b.n	800ee4e <memcpy+0x6>

0800ee5e <memset>:
 800ee5e:	4402      	add	r2, r0
 800ee60:	4603      	mov	r3, r0
 800ee62:	4293      	cmp	r3, r2
 800ee64:	d100      	bne.n	800ee68 <memset+0xa>
 800ee66:	4770      	bx	lr
 800ee68:	f803 1b01 	strb.w	r1, [r3], #1
 800ee6c:	e7f9      	b.n	800ee62 <memset+0x4>

0800ee6e <strcpy>:
 800ee6e:	4603      	mov	r3, r0
 800ee70:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee74:	f803 2b01 	strb.w	r2, [r3], #1
 800ee78:	2a00      	cmp	r2, #0
 800ee7a:	d1f9      	bne.n	800ee70 <strcpy+0x2>
 800ee7c:	4770      	bx	lr
	...

0800ee80 <_init>:
 800ee80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee82:	bf00      	nop
 800ee84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee86:	bc08      	pop	{r3}
 800ee88:	469e      	mov	lr, r3
 800ee8a:	4770      	bx	lr

0800ee8c <_fini>:
 800ee8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee8e:	bf00      	nop
 800ee90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee92:	bc08      	pop	{r3}
 800ee94:	469e      	mov	lr, r3
 800ee96:	4770      	bx	lr
