
ACIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c4c  080001e0  080001e0  000101e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08011e2c  08011e2c  00021e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f18  08011f18  000318c8  2**0
                  CONTENTS
  4 .ARM          00000008  08011f18  08011f18  00021f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f20  08011f20  000318c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f20  08011f20  00021f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f24  08011f24  00021f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000018c8  20010000  08011f28  00030000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013b24  200118e0  080137f0  000318e0  2**5
                  ALLOC
 10 ._user_heap_stack 00000c04  20025404  080137f0  00035404  2**0
                  ALLOC
 11 .itcmram      00000000  20000000  20000000  000318c8  2**0
                  CONTENTS
 12 .ARM.attributes 00000030  00000000  00000000  000318c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e568  00000000  00000000  000318f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003e65  00000000  00000000  0004fe60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000016e8  00000000  00000000  00053cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001548  00000000  00000000  000553b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002648f  00000000  00000000  000568f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00015955  00000000  00000000  0007cd87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000e548e  00000000  00000000  000926dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00177b6a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f70  00000000  00000000  00177be8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200118e0 	.word	0x200118e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011e14 	.word	0x08011e14

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200118e4 	.word	0x200118e4
 800021c:	08011e14 	.word	0x08011e14

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <PK_Copy>:
PACKET_C(PK_PcConnected);
PACKET_C(PK_FuelSwitch);


int16_t PK_Copy(void * dest, void * source)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  if(dest == 0 || source == 0) return -1;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d002      	beq.n	8000d72 <PK_Copy+0x16>
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d102      	bne.n	8000d78 <PK_Copy+0x1c>
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e037      	b.n	8000de8 <PK_Copy+0x8c>
  uint8_t * dest_data = (uint8_t*)dest;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	617b      	str	r3, [r7, #20]
  uint8_t * source_data = (uint8_t*)source;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	613b      	str	r3, [r7, #16]
  int16_t length = dest_data[1];
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3301      	adds	r3, #1
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	81bb      	strh	r3, [r7, #12]
  if(dest_data[1] != source_data[1] || dest_data[0] != source_data[0] || length == 0 || length > 384) return -2;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	781a      	ldrb	r2, [r3, #0]
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	3301      	adds	r3, #1
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d10e      	bne.n	8000db6 <PK_Copy+0x5a>
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	781a      	ldrb	r2, [r3, #0]
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d108      	bne.n	8000db6 <PK_Copy+0x5a>
 8000da4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d004      	beq.n	8000db6 <PK_Copy+0x5a>
 8000dac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000db0:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000db4:	dd02      	ble.n	8000dbc <PK_Copy+0x60>
 8000db6:	f06f 0301 	mvn.w	r3, #1
 8000dba:	e015      	b.n	8000de8 <PK_Copy+0x8c>
  for(uint8_t i=2;i<length+2;i++)
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e00a      	b.n	8000dd8 <PK_Copy+0x7c>
    *dest_data++ = *source_data++;
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	1c53      	adds	r3, r2, #1
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	1c59      	adds	r1, r3, #1
 8000dcc:	6179      	str	r1, [r7, #20]
 8000dce:	7812      	ldrb	r2, [r2, #0]
 8000dd0:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=2;i<length+2;i++)
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
 8000dd8:	7bfa      	ldrb	r2, [r7, #15]
 8000dda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dde:	3302      	adds	r3, #2
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbee      	blt.n	8000dc2 <PK_Copy+0x66>
  return length;
 8000de4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	371c      	adds	r7, #28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <acis_init>:
extern TIM_HandleTypeDef htim4;

static int8_t acis_send_command(eTransChannels xChaDst, void * msgBuf, uint32_t length);

void acis_init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_BUSY;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	71fb      	strb	r3, [r7, #7]
  protInit(&fifoSendingQueue, buffSendingQueue, 1, SENDING_QUEUE_SIZE);
 8000dfe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e02:	2201      	movs	r2, #1
 8000e04:	4918      	ldr	r1, [pc, #96]	; (8000e68 <acis_init+0x74>)
 8000e06:	4819      	ldr	r0, [pc, #100]	; (8000e6c <acis_init+0x78>)
 8000e08:	f00a fc2a 	bl	800b660 <protInit>
  HAL_GPIO_WritePin(VDD3V3EN_GPIO_Port, VDD3V3EN_Pin, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2101      	movs	r1, #1
 8000e10:	4817      	ldr	r0, [pc, #92]	; (8000e70 <acis_init+0x7c>)
 8000e12:	f00c fa55 	bl	800d2c0 <HAL_GPIO_WritePin>

  do
  {
    status = config_load(&acis_config);
 8000e16:	4817      	ldr	r0, [pc, #92]	; (8000e74 <acis_init+0x80>)
 8000e18:	f004 f82a 	bl	8004e70 <config_load>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	71fb      	strb	r3, [r7, #7]
  } while(status == HAL_BUSY);
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d0f7      	beq.n	8000e16 <acis_init+0x22>

  StatusInit = status;
 8000e26:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <acis_init+0x84>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	7013      	strb	r3, [r2, #0]

  if(status != HAL_OK)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00a      	beq.n	8000e48 <acis_init+0x54>
  {
    config_default(&acis_config);
 8000e32:	4810      	ldr	r0, [pc, #64]	; (8000e74 <acis_init+0x80>)
 8000e34:	f005 fee4 	bl	8006c00 <config_default>
    do
    {
      status = config_save(&acis_config);
 8000e38:	480e      	ldr	r0, [pc, #56]	; (8000e74 <acis_init+0x80>)
 8000e3a:	f006 fbab 	bl	8007594 <config_save>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
    } while(status == HAL_BUSY);
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d0f7      	beq.n	8000e38 <acis_init+0x44>
  }

  if(status != HAL_OK)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d002      	beq.n	8000e54 <acis_init+0x60>
  {
    config_default(&acis_config);
 8000e4e:	4809      	ldr	r0, [pc, #36]	; (8000e74 <acis_init+0x80>)
 8000e50:	f005 fed6 	bl	8006c00 <config_default>
  }

  CanDeinit = 1;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <acis_init+0x88>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim4);
 8000e5a:	4809      	ldr	r0, [pc, #36]	; (8000e80 <acis_init+0x8c>)
 8000e5c:	f00e ff24 	bl	800fca8 <HAL_TIM_Base_Start_IT>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20020af0 	.word	0x20020af0
 8000e6c:	200210f0 	.word	0x200210f0
 8000e70:	40020800 	.word	0x40020800
 8000e74:	200214a0 	.word	0x200214a0
 8000e78:	200104a6 	.word	0x200104a6
 8000e7c:	20011914 	.word	0x20011914
 8000e80:	200247e4 	.word	0x200247e4

08000e84 <gettempbyres>:

static inline float gettempbyres(float resistance)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0b8      	sub	sp, #224	; 0xe0
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	ed87 0a01 	vstr	s0, [r7, #4]
  const float koff = 0.1;
 8000e8e:	4b9a      	ldr	r3, [pc, #616]	; (80010f8 <gettempbyres+0x274>)
 8000e90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  const float koff_inv = 1.0f-koff;
 8000e94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e98:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8000e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ea0:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
  static float result_p = 0;
  const float resistances[22] = {100700,52700,28680,21450,16180,12300,9420,7280,5670,4450,3520,2796,2238,1802,1459,1188,973,667,467,332,241,177};
 8000ea4:	4a95      	ldr	r2, [pc, #596]	; (80010fc <gettempbyres+0x278>)
 8000ea6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000eaa:	4611      	mov	r1, r2
 8000eac:	2258      	movs	r2, #88	; 0x58
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f010 ff94 	bl	8011ddc <memcpy>
  const float temperatures[22] = {-40,-30,-20,-15,-10,-4,0,5,10,15,20,25,30,35,40,45,50,60,70,80,90,100};
 8000eb4:	4a92      	ldr	r2, [pc, #584]	; (8001100 <gettempbyres+0x27c>)
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	4611      	mov	r1, r2
 8000ebc:	2258      	movs	r2, #88	; 0x58
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f010 ff8c 	bl	8011ddc <memcpy>
  float result = 0.0f;
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint8_t index1, index2;
  float temp1 = 0.0f, temp2 = 0.0f, mult, tempt1, tempt2;
 8000ecc:	f04f 0300 	mov.w	r3, #0
 8000ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000ed4:	f04f 0300 	mov.w	r3, #0
 8000ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

  if(resistance >= resistances[0])
 8000edc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000ee0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ee4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eec:	db1a      	blt.n	8000f24 <gettempbyres+0xa0>
  {
    index1 = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    index2 = 1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    temp1 = resistances[index1];
 8000efa:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000f04:	4413      	add	r3, r2
 8000f06:	3b80      	subs	r3, #128	; 0x80
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    temp2 = resistances[index2];
 8000f0e:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000f18:	4413      	add	r3, r2
 8000f1a:	3b80      	subs	r3, #128	; 0x80
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000f22:	e06a      	b.n	8000ffa <gettempbyres+0x176>
  }
  else if(resistance <= resistances[(sizeof(resistances) / sizeof(float)) - 1])
 8000f24:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8000f28:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f34:	d81a      	bhi.n	8000f6c <gettempbyres+0xe8>
  {
    index1 = (sizeof(resistances) / sizeof(float)) - 2;
 8000f36:	2314      	movs	r3, #20
 8000f38:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    index2 = (sizeof(resistances) / sizeof(float)) - 1;
 8000f3c:	2315      	movs	r3, #21
 8000f3e:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    temp1 = resistances[index1];
 8000f42:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3b80      	subs	r3, #128	; 0x80
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    temp2 = resistances[index2];
 8000f56:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000f60:	4413      	add	r3, r2
 8000f62:	3b80      	subs	r3, #128	; 0x80
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000f6a:	e046      	b.n	8000ffa <gettempbyres+0x176>
  }
  else
  {
    for(int i = 1; i < (sizeof(resistances) / sizeof(float)); i++)
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000f72:	e03e      	b.n	8000ff2 <gettempbyres+0x16e>
    {
      temp1 = resistances[i-1];
 8000f74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000f80:	4413      	add	r3, r2
 8000f82:	3b80      	subs	r3, #128	; 0x80
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      temp2 = resistances[i];
 8000f8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000f94:	4413      	add	r3, r2
 8000f96:	3b80      	subs	r3, #128	; 0x80
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      if(temp1 > resistance && temp2 < resistance)
 8000f9e:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8000fa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	dd13      	ble.n	8000fd8 <gettempbyres+0x154>
 8000fb0:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 8000fb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc0:	d50a      	bpl.n	8000fd8 <gettempbyres+0x154>
      {
        index1 = i-1;
 8000fc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        index2 = i;
 8000fce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000fd2:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
        break;
 8000fd6:	e010      	b.n	8000ffa <gettempbyres+0x176>
      }
      temp1 = 0.0f;
 8000fd8:	f04f 0300 	mov.w	r3, #0
 8000fdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      temp2 = 0.0f;
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    for(int i = 1; i < (sizeof(resistances) / sizeof(float)); i++)
 8000fe8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000fec:	3301      	adds	r3, #1
 8000fee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000ff2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000ff6:	2b15      	cmp	r3, #21
 8000ff8:	d9bc      	bls.n	8000f74 <gettempbyres+0xf0>
    }
  }

  if(temp1 != 0.0f || temp2 != 0.0f)
 8000ffa:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8000ffe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001006:	d106      	bne.n	8001016 <gettempbyres+0x192>
 8001008:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800100c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001014:	d049      	beq.n	80010aa <gettempbyres+0x226>
  {
    tempt1 = temperatures[index1];
 8001016:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001020:	4413      	add	r3, r2
 8001022:	3bd8      	subs	r3, #216	; 0xd8
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    tempt2 = temperatures[index2];
 800102a:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001034:	4413      	add	r3, r2
 8001036:	3bd8      	subs	r3, #216	; 0xd8
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if(temp2 != temp1)
 800103e:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 8001042:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001046:	eeb4 7a67 	vcmp.f32	s14, s15
 800104a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104e:	d020      	beq.n	8001092 <gettempbyres+0x20e>
    {
      mult = (resistance - temp1) / (temp2 - temp1);
 8001050:	ed97 7a01 	vldr	s14, [r7, #4]
 8001054:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001058:	ee77 6a67 	vsub.f32	s13, s14, s15
 800105c:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 8001060:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001064:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800106c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
      result = (tempt2 - tempt1) * mult + tempt1;
 8001070:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8001074:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001078:	ee37 7a67 	vsub.f32	s14, s14, s15
 800107c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001084:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8001088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108c:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
 8001090:	e00b      	b.n	80010aa <gettempbyres+0x226>
    }
    else result = (tempt1 + tempt2) / 2.0f;
 8001092:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8001096:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800109a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800109e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80010a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a6:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
  }
  if(result > 150.0f) result = 150.0f;
 80010aa:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80010ae:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001104 <gettempbyres+0x280>
 80010b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	dd02      	ble.n	80010c2 <gettempbyres+0x23e>
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <gettempbyres+0x284>)
 80010be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  result_p = result * koff + result_p * koff_inv;
 80010c2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80010c6:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80010ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <gettempbyres+0x288>)
 80010d0:	edd3 6a00 	vldr	s13, [r3]
 80010d4:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80010d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <gettempbyres+0x288>)
 80010e2:	edc3 7a00 	vstr	s15, [r3]
  return result_p;
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <gettempbyres+0x288>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	ee07 3a90 	vmov	s15, r3
}
 80010ee:	eeb0 0a67 	vmov.f32	s0, s15
 80010f2:	37e0      	adds	r7, #224	; 0xe0
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	3dcccccd 	.word	0x3dcccccd
 80010fc:	08011e2c 	.word	0x08011e2c
 8001100:	08011e84 	.word	0x08011e84
 8001104:	43160000 	.word	0x43160000
 8001108:	43160000 	.word	0x43160000
 800110c:	2002113c 	.word	0x2002113c

08001110 <acis_deinitIfNeed>:

void acis_deinitIfNeed(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  if(CanDeinit && HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_SET)
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <acis_deinitIfNeed+0x38>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00d      	beq.n	800113a <acis_deinitIfNeed+0x2a>
 800111e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001122:	480a      	ldr	r0, [pc, #40]	; (800114c <acis_deinitIfNeed+0x3c>)
 8001124:	f00c f8b4 	bl	800d290 <HAL_GPIO_ReadPin>
 8001128:	4603      	mov	r3, r0
 800112a:	2b01      	cmp	r3, #1
 800112c:	d105      	bne.n	800113a <acis_deinitIfNeed+0x2a>
    HAL_GPIO_WritePin(VDD3V3EN_GPIO_Port, VDD3V3EN_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2101      	movs	r1, #1
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <acis_deinitIfNeed+0x40>)
 8001134:	f00c f8c4 	bl	800d2c0 <HAL_GPIO_WritePin>
 8001138:	e004      	b.n	8001144 <acis_deinitIfNeed+0x34>
  else HAL_GPIO_WritePin(VDD3V3EN_GPIO_Port, VDD3V3EN_Pin, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	2101      	movs	r1, #1
 800113e:	4804      	ldr	r0, [pc, #16]	; (8001150 <acis_deinitIfNeed+0x40>)
 8001140:	f00c f8be 	bl	800d2c0 <HAL_GPIO_WritePin>
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20011914 	.word	0x20011914
 800114c:	40020000 	.word	0x40020000
 8001150:	40020800 	.word	0x40020800

08001154 <acis_adc_irq>:

void acis_adc_irq(uint16_t * data, uint32_t size)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  adc_buf_ptr = data;
 800115e:	4a07      	ldr	r2, [pc, #28]	; (800117c <acis_adc_irq+0x28>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6013      	str	r3, [r2, #0]
  adc_buf_size = size;
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <acis_adc_irq+0x2c>)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	6013      	str	r3, [r2, #0]
  adc_buf_ready = 1;
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <acis_adc_irq+0x30>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	20020964 	.word	0x20020964
 8001180:	20020968 	.word	0x20020968
 8001184:	2002096c 	.word	0x2002096c

08001188 <acis_ignite_14>:

static inline void acis_ignite_14(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  ign14_prev = ign14_time;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <acis_ignite_14+0x30>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <acis_ignite_14+0x34>)
 8001192:	6013      	str	r3, [r2, #0]
  ign14_time = Delay_Tick;
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <acis_ignite_14+0x38>)
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <acis_ignite_14+0x30>)
 800119a:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <acis_ignite_14+0x3c>)
 80011a2:	f00c f88d 	bl	800d2c0 <HAL_GPIO_WritePin>
  ign_ftime = 0;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <acis_ignite_14+0x40>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
  saturated_14 = 0;
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <acis_ignite_14+0x44>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20011904 	.word	0x20011904
 80011bc:	2001190c 	.word	0x2001190c
 80011c0:	40000c00 	.word	0x40000c00
 80011c4:	40020400 	.word	0x40020400
 80011c8:	200104a5 	.word	0x200104a5
 80011cc:	2002095e 	.word	0x2002095e

080011d0 <acis_ignite_23>:

static inline void acis_ignite_23(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  ign23_prev = ign23_time;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <acis_ignite_23+0x30>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <acis_ignite_23+0x34>)
 80011da:	6013      	str	r3, [r2, #0]
  ign23_time = Delay_Tick;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <acis_ignite_23+0x38>)
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <acis_ignite_23+0x30>)
 80011e2:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2140      	movs	r1, #64	; 0x40
 80011e8:	4808      	ldr	r0, [pc, #32]	; (800120c <acis_ignite_23+0x3c>)
 80011ea:	f00c f869 	bl	800d2c0 <HAL_GPIO_WritePin>
  ign_ftime = 0;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <acis_ignite_23+0x40>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
  saturated_23 = 0;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <acis_ignite_23+0x44>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20011908 	.word	0x20011908
 8001204:	20011910 	.word	0x20011910
 8001208:	40000c00 	.word	0x40000c00
 800120c:	40020400 	.word	0x40020400
 8001210:	200104a5 	.word	0x200104a5
 8001214:	2002095f 	.word	0x2002095f

08001218 <acis_saturate_14>:

static inline void acis_saturate_14(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
  ign14_sat = Delay_Tick;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <acis_saturate_14+0x4c>)
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001222:	4a11      	ldr	r2, [pc, #68]	; (8001268 <acis_saturate_14+0x50>)
 8001224:	6013      	str	r3, [r2, #0]
  uint8_t isIgn = HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_RESET;
 8001226:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800122a:	4810      	ldr	r0, [pc, #64]	; (800126c <acis_saturate_14+0x54>)
 800122c:	f00c f830 	bl	800d290 <HAL_GPIO_ReadPin>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf0c      	ite	eq
 8001236:	2301      	moveq	r3, #1
 8001238:	2300      	movne	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	71fb      	strb	r3, [r7, #7]
  if(isIgn)
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d004      	beq.n	800124e <acis_saturate_14+0x36>
    HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	2180      	movs	r1, #128	; 0x80
 8001248:	4809      	ldr	r0, [pc, #36]	; (8001270 <acis_saturate_14+0x58>)
 800124a:	f00c f839 	bl	800d2c0 <HAL_GPIO_WritePin>
  ign_ftime = 0;
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <acis_saturate_14+0x5c>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
  saturated_14 = 1;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <acis_saturate_14+0x60>)
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40000c00 	.word	0x40000c00
 8001268:	200118fc 	.word	0x200118fc
 800126c:	40020000 	.word	0x40020000
 8001270:	40020400 	.word	0x40020400
 8001274:	200104a5 	.word	0x200104a5
 8001278:	2002095e 	.word	0x2002095e

0800127c <acis_saturate_23>:

static inline void acis_saturate_23(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
  ign23_sat = Delay_Tick;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <acis_saturate_23+0x4c>)
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	4a11      	ldr	r2, [pc, #68]	; (80012cc <acis_saturate_23+0x50>)
 8001288:	6013      	str	r3, [r2, #0]
  uint8_t isIgn = HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_RESET;
 800128a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800128e:	4810      	ldr	r0, [pc, #64]	; (80012d0 <acis_saturate_23+0x54>)
 8001290:	f00b fffe 	bl	800d290 <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	bf0c      	ite	eq
 800129a:	2301      	moveq	r3, #1
 800129c:	2300      	movne	r3, #0
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	71fb      	strb	r3, [r7, #7]
  if(isIgn)
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d004      	beq.n	80012b2 <acis_saturate_23+0x36>
    HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2140      	movs	r1, #64	; 0x40
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <acis_saturate_23+0x58>)
 80012ae:	f00c f807 	bl	800d2c0 <HAL_GPIO_WritePin>
  ign_ftime = 0;
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <acis_saturate_23+0x5c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
  saturated_23 = 1;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <acis_saturate_23+0x60>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40000c00 	.word	0x40000c00
 80012cc:	20011900 	.word	0x20011900
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020400 	.word	0x40020400
 80012d8:	200104a5 	.word	0x200104a5
 80012dc:	2002095f 	.word	0x2002095f

080012e0 <acis_ignite>:

static inline void acis_ignite(uint8_t index)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  if(index == 0)
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <acis_ignite+0x16>
    acis_ignite_14();
 80012f0:	f7ff ff4a 	bl	8001188 <acis_ignite_14>
  else if(index == 1)
    acis_ignite_23();
}
 80012f4:	e004      	b.n	8001300 <acis_ignite+0x20>
  else if(index == 1)
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <acis_ignite+0x20>
    acis_ignite_23();
 80012fc:	f7ff ff68 	bl	80011d0 <acis_ignite_23>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <acis_saturate>:

static inline void acis_saturate(int8_t index)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  static int8_t cutoffcnt4 = 0;
  static int8_t cutoffcnt5 = 0;
  static int8_t cutoffcnt6 = 0;
  static int8_t index_prev = -1;

  if(acis_config.params.isCutoffEnabled)
 8001312:	4bac      	ldr	r3, [pc, #688]	; (80015c4 <acis_saturate+0x2bc>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d070      	beq.n	80013fc <acis_saturate+0xf4>
  {
    float rpm = csps_getrpmgui();
 800131a:	f006 fef3 	bl	8008104 <csps_getrpmgui>
 800131e:	ed87 0a05 	vstr	s0, [r7, #20]
    int32_t mode = acis_config.params.CutoffMode;
 8001322:	4ba8      	ldr	r3, [pc, #672]	; (80015c4 <acis_saturate+0x2bc>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	613b      	str	r3, [r7, #16]
    float cutoffrpm = acis_config.params.CutoffRPM;
 8001328:	4ba6      	ldr	r3, [pc, #664]	; (80015c4 <acis_saturate+0x2bc>)
 800132a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800132c:	60fb      	str	r3, [r7, #12]
    if(rpm >= cutoffrpm)
 800132e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001332:	edd7 7a03 	vldr	s15, [r7, #12]
 8001336:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	db5d      	blt.n	80013fc <acis_saturate+0xf4>
    {
      if(mode == 0)
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 817f 	beq.w	8001646 <acis_saturate+0x33e>
        return;
      else if(mode == 1)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d109      	bne.n	8001362 <acis_saturate+0x5a>
      {
        if(cutoffcnt0 == -1)
 800134e:	4b9e      	ldr	r3, [pc, #632]	; (80015c8 <acis_saturate+0x2c0>)
 8001350:	f993 3000 	ldrsb.w	r3, [r3]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001358:	d150      	bne.n	80013fc <acis_saturate+0xf4>
          cutoffcnt0 = 0;
 800135a:	4b9b      	ldr	r3, [pc, #620]	; (80015c8 <acis_saturate+0x2c0>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
 8001360:	e04c      	b.n	80013fc <acis_saturate+0xf4>
      }
      else if(mode == 2)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d109      	bne.n	800137c <acis_saturate+0x74>
      {
        if(cutoffcnt1 == -1)
 8001368:	4b98      	ldr	r3, [pc, #608]	; (80015cc <acis_saturate+0x2c4>)
 800136a:	f993 3000 	ldrsb.w	r3, [r3]
 800136e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001372:	d143      	bne.n	80013fc <acis_saturate+0xf4>
          cutoffcnt1 = 0;
 8001374:	4b95      	ldr	r3, [pc, #596]	; (80015cc <acis_saturate+0x2c4>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	e03f      	b.n	80013fc <acis_saturate+0xf4>
      }
      else if(mode == 3)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	2b03      	cmp	r3, #3
 8001380:	d109      	bne.n	8001396 <acis_saturate+0x8e>
      {
        if(cutoffcnt2 == -1)
 8001382:	4b93      	ldr	r3, [pc, #588]	; (80015d0 <acis_saturate+0x2c8>)
 8001384:	f993 3000 	ldrsb.w	r3, [r3]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138c:	d136      	bne.n	80013fc <acis_saturate+0xf4>
          cutoffcnt2 = 0;
 800138e:	4b90      	ldr	r3, [pc, #576]	; (80015d0 <acis_saturate+0x2c8>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	e032      	b.n	80013fc <acis_saturate+0xf4>
      }
      else if(mode == 4)
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	2b04      	cmp	r3, #4
 800139a:	d109      	bne.n	80013b0 <acis_saturate+0xa8>
      {
        if(cutoffcnt3 == -1)
 800139c:	4b8d      	ldr	r3, [pc, #564]	; (80015d4 <acis_saturate+0x2cc>)
 800139e:	f993 3000 	ldrsb.w	r3, [r3]
 80013a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a6:	d129      	bne.n	80013fc <acis_saturate+0xf4>
          cutoffcnt3 = 0;
 80013a8:	4b8a      	ldr	r3, [pc, #552]	; (80015d4 <acis_saturate+0x2cc>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
 80013ae:	e025      	b.n	80013fc <acis_saturate+0xf4>
      }
      else if(mode == 5)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d109      	bne.n	80013ca <acis_saturate+0xc2>
      {
        if(cutoffcnt4 == -1)
 80013b6:	4b88      	ldr	r3, [pc, #544]	; (80015d8 <acis_saturate+0x2d0>)
 80013b8:	f993 3000 	ldrsb.w	r3, [r3]
 80013bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c0:	d11c      	bne.n	80013fc <acis_saturate+0xf4>
          cutoffcnt4 = 0;
 80013c2:	4b85      	ldr	r3, [pc, #532]	; (80015d8 <acis_saturate+0x2d0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
 80013c8:	e018      	b.n	80013fc <acis_saturate+0xf4>
      }
      else if(mode == 6)
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	2b06      	cmp	r3, #6
 80013ce:	d109      	bne.n	80013e4 <acis_saturate+0xdc>
      {
        if(cutoffcnt5 == -1)
 80013d0:	4b82      	ldr	r3, [pc, #520]	; (80015dc <acis_saturate+0x2d4>)
 80013d2:	f993 3000 	ldrsb.w	r3, [r3]
 80013d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013da:	d10f      	bne.n	80013fc <acis_saturate+0xf4>
          cutoffcnt5 = 0;
 80013dc:	4b7f      	ldr	r3, [pc, #508]	; (80015dc <acis_saturate+0x2d4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
 80013e2:	e00b      	b.n	80013fc <acis_saturate+0xf4>
      }
      else if(mode == 7)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2b07      	cmp	r3, #7
 80013e8:	d108      	bne.n	80013fc <acis_saturate+0xf4>
      {
        if(cutoffcnt6 == -1)
 80013ea:	4b7d      	ldr	r3, [pc, #500]	; (80015e0 <acis_saturate+0x2d8>)
 80013ec:	f993 3000 	ldrsb.w	r3, [r3]
 80013f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f4:	d102      	bne.n	80013fc <acis_saturate+0xf4>
          cutoffcnt6 = 0;
 80013f6:	4b7a      	ldr	r3, [pc, #488]	; (80015e0 <acis_saturate+0x2d8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if(index_prev != index)
 80013fc:	4b79      	ldr	r3, [pc, #484]	; (80015e4 <acis_saturate+0x2dc>)
 80013fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001402:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001406:	429a      	cmp	r2, r3
 8001408:	f000 8101 	beq.w	800160e <acis_saturate+0x306>
  {
    index_prev = index;
 800140c:	4a75      	ldr	r2, [pc, #468]	; (80015e4 <acis_saturate+0x2dc>)
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	7013      	strb	r3, [r2, #0]

    if(cutoffcnt0 >= 0)
 8001412:	4b6d      	ldr	r3, [pc, #436]	; (80015c8 <acis_saturate+0x2c0>)
 8001414:	f993 3000 	ldrsb.w	r3, [r3]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db17      	blt.n	800144c <acis_saturate+0x144>
    {
      if(++cutoffcnt0 > 36)
 800141c:	4b6a      	ldr	r3, [pc, #424]	; (80015c8 <acis_saturate+0x2c0>)
 800141e:	f993 3000 	ldrsb.w	r3, [r3]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	3301      	adds	r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	b25a      	sxtb	r2, r3
 800142a:	4b67      	ldr	r3, [pc, #412]	; (80015c8 <acis_saturate+0x2c0>)
 800142c:	701a      	strb	r2, [r3, #0]
 800142e:	4b66      	ldr	r3, [pc, #408]	; (80015c8 <acis_saturate+0x2c0>)
 8001430:	f993 3000 	ldrsb.w	r3, [r3]
 8001434:	2b24      	cmp	r3, #36	; 0x24
 8001436:	dd03      	ble.n	8001440 <acis_saturate+0x138>
        cutoffcnt0 = -1;
 8001438:	4b63      	ldr	r3, [pc, #396]	; (80015c8 <acis_saturate+0x2c0>)
 800143a:	22ff      	movs	r2, #255	; 0xff
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	e005      	b.n	800144c <acis_saturate+0x144>
      else if(cutoffcnt0 <= 36-4)
 8001440:	4b61      	ldr	r3, [pc, #388]	; (80015c8 <acis_saturate+0x2c0>)
 8001442:	f993 3000 	ldrsb.w	r3, [r3]
 8001446:	2b20      	cmp	r3, #32
 8001448:	f340 80ff 	ble.w	800164a <acis_saturate+0x342>
        return;
    }

    if(cutoffcnt1 >= 0)
 800144c:	4b5f      	ldr	r3, [pc, #380]	; (80015cc <acis_saturate+0x2c4>)
 800144e:	f993 3000 	ldrsb.w	r3, [r3]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db17      	blt.n	8001486 <acis_saturate+0x17e>
    {
      if(++cutoffcnt1 > 24)
 8001456:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <acis_saturate+0x2c4>)
 8001458:	f993 3000 	ldrsb.w	r3, [r3]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	3301      	adds	r3, #1
 8001460:	b2db      	uxtb	r3, r3
 8001462:	b25a      	sxtb	r2, r3
 8001464:	4b59      	ldr	r3, [pc, #356]	; (80015cc <acis_saturate+0x2c4>)
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	4b58      	ldr	r3, [pc, #352]	; (80015cc <acis_saturate+0x2c4>)
 800146a:	f993 3000 	ldrsb.w	r3, [r3]
 800146e:	2b18      	cmp	r3, #24
 8001470:	dd03      	ble.n	800147a <acis_saturate+0x172>
        cutoffcnt1 = -1;
 8001472:	4b56      	ldr	r3, [pc, #344]	; (80015cc <acis_saturate+0x2c4>)
 8001474:	22ff      	movs	r2, #255	; 0xff
 8001476:	701a      	strb	r2, [r3, #0]
 8001478:	e005      	b.n	8001486 <acis_saturate+0x17e>
      else if(cutoffcnt1 <= 24-4)
 800147a:	4b54      	ldr	r3, [pc, #336]	; (80015cc <acis_saturate+0x2c4>)
 800147c:	f993 3000 	ldrsb.w	r3, [r3]
 8001480:	2b14      	cmp	r3, #20
 8001482:	f340 80e4 	ble.w	800164e <acis_saturate+0x346>
        return;
    }

    if(cutoffcnt2 >= 0)
 8001486:	4b52      	ldr	r3, [pc, #328]	; (80015d0 <acis_saturate+0x2c8>)
 8001488:	f993 3000 	ldrsb.w	r3, [r3]
 800148c:	2b00      	cmp	r3, #0
 800148e:	db17      	blt.n	80014c0 <acis_saturate+0x1b8>
    {
      if(++cutoffcnt2 > 16)
 8001490:	4b4f      	ldr	r3, [pc, #316]	; (80015d0 <acis_saturate+0x2c8>)
 8001492:	f993 3000 	ldrsb.w	r3, [r3]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	3301      	adds	r3, #1
 800149a:	b2db      	uxtb	r3, r3
 800149c:	b25a      	sxtb	r2, r3
 800149e:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <acis_saturate+0x2c8>)
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	4b4b      	ldr	r3, [pc, #300]	; (80015d0 <acis_saturate+0x2c8>)
 80014a4:	f993 3000 	ldrsb.w	r3, [r3]
 80014a8:	2b10      	cmp	r3, #16
 80014aa:	dd03      	ble.n	80014b4 <acis_saturate+0x1ac>
        cutoffcnt2 = -1;
 80014ac:	4b48      	ldr	r3, [pc, #288]	; (80015d0 <acis_saturate+0x2c8>)
 80014ae:	22ff      	movs	r2, #255	; 0xff
 80014b0:	701a      	strb	r2, [r3, #0]
 80014b2:	e005      	b.n	80014c0 <acis_saturate+0x1b8>
      else if(cutoffcnt2 <= 16-4)
 80014b4:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <acis_saturate+0x2c8>)
 80014b6:	f993 3000 	ldrsb.w	r3, [r3]
 80014ba:	2b0c      	cmp	r3, #12
 80014bc:	f340 80c9 	ble.w	8001652 <acis_saturate+0x34a>
        return;
    }

    if(cutoffcnt3 >= 0)
 80014c0:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <acis_saturate+0x2cc>)
 80014c2:	f993 3000 	ldrsb.w	r3, [r3]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db17      	blt.n	80014fa <acis_saturate+0x1f2>
    {
      if(++cutoffcnt3 > 8)
 80014ca:	4b42      	ldr	r3, [pc, #264]	; (80015d4 <acis_saturate+0x2cc>)
 80014cc:	f993 3000 	ldrsb.w	r3, [r3]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	3301      	adds	r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	b25a      	sxtb	r2, r3
 80014d8:	4b3e      	ldr	r3, [pc, #248]	; (80015d4 <acis_saturate+0x2cc>)
 80014da:	701a      	strb	r2, [r3, #0]
 80014dc:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <acis_saturate+0x2cc>)
 80014de:	f993 3000 	ldrsb.w	r3, [r3]
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	dd03      	ble.n	80014ee <acis_saturate+0x1e6>
        cutoffcnt3 = -1;
 80014e6:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <acis_saturate+0x2cc>)
 80014e8:	22ff      	movs	r2, #255	; 0xff
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	e005      	b.n	80014fa <acis_saturate+0x1f2>
      else if(cutoffcnt3 <= 8-4)
 80014ee:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <acis_saturate+0x2cc>)
 80014f0:	f993 3000 	ldrsb.w	r3, [r3]
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	f340 80ae 	ble.w	8001656 <acis_saturate+0x34e>
        return;
    }

    if(cutoffcnt4 >= 0)
 80014fa:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <acis_saturate+0x2d0>)
 80014fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001500:	2b00      	cmp	r3, #0
 8001502:	db22      	blt.n	800154a <acis_saturate+0x242>
    {
      if(++cutoffcnt4 > 20)
 8001504:	4b34      	ldr	r3, [pc, #208]	; (80015d8 <acis_saturate+0x2d0>)
 8001506:	f993 3000 	ldrsb.w	r3, [r3]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	3301      	adds	r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	b25a      	sxtb	r2, r3
 8001512:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <acis_saturate+0x2d0>)
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <acis_saturate+0x2d0>)
 8001518:	f993 3000 	ldrsb.w	r3, [r3]
 800151c:	2b14      	cmp	r3, #20
 800151e:	dd03      	ble.n	8001528 <acis_saturate+0x220>
        cutoffcnt4 = -1;
 8001520:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <acis_saturate+0x2d0>)
 8001522:	22ff      	movs	r2, #255	; 0xff
 8001524:	701a      	strb	r2, [r3, #0]
 8001526:	e010      	b.n	800154a <acis_saturate+0x242>
      else if((cutoffcnt4 % 5) != 0)
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <acis_saturate+0x2d0>)
 800152a:	f993 2000 	ldrsb.w	r2, [r3]
 800152e:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <acis_saturate+0x2e0>)
 8001530:	fb83 1302 	smull	r1, r3, r3, r2
 8001534:	1059      	asrs	r1, r3, #1
 8001536:	17d3      	asrs	r3, r2, #31
 8001538:	1ac9      	subs	r1, r1, r3
 800153a:	460b      	mov	r3, r1
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	b25b      	sxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	f040 8088 	bne.w	800165a <acis_saturate+0x352>
        return;
    }

    if(cutoffcnt5 >= 0)
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <acis_saturate+0x2d4>)
 800154c:	f993 3000 	ldrsb.w	r3, [r3]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db20      	blt.n	8001596 <acis_saturate+0x28e>
    {
      if(++cutoffcnt5 > 12)
 8001554:	4b21      	ldr	r3, [pc, #132]	; (80015dc <acis_saturate+0x2d4>)
 8001556:	f993 3000 	ldrsb.w	r3, [r3]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	3301      	adds	r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	b25a      	sxtb	r2, r3
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <acis_saturate+0x2d4>)
 8001564:	701a      	strb	r2, [r3, #0]
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <acis_saturate+0x2d4>)
 8001568:	f993 3000 	ldrsb.w	r3, [r3]
 800156c:	2b0c      	cmp	r3, #12
 800156e:	dd03      	ble.n	8001578 <acis_saturate+0x270>
        cutoffcnt5 = -1;
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <acis_saturate+0x2d4>)
 8001572:	22ff      	movs	r2, #255	; 0xff
 8001574:	701a      	strb	r2, [r3, #0]
 8001576:	e00e      	b.n	8001596 <acis_saturate+0x28e>
      else if((cutoffcnt5 % 3) != 0)
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <acis_saturate+0x2d4>)
 800157a:	f993 2000 	ldrsb.w	r2, [r3]
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <acis_saturate+0x2e4>)
 8001580:	fb83 3102 	smull	r3, r1, r3, r2
 8001584:	17d3      	asrs	r3, r2, #31
 8001586:	1ac9      	subs	r1, r1, r3
 8001588:	460b      	mov	r3, r1
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	440b      	add	r3, r1
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	b25b      	sxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d163      	bne.n	800165e <acis_saturate+0x356>
        return;
    }

    if(cutoffcnt6 >= 0)
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <acis_saturate+0x2d8>)
 8001598:	f993 3000 	ldrsb.w	r3, [r3]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db36      	blt.n	800160e <acis_saturate+0x306>
    {
      if(++cutoffcnt6 > 12)
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <acis_saturate+0x2d8>)
 80015a2:	f993 3000 	ldrsb.w	r3, [r3]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	3301      	adds	r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	b25a      	sxtb	r2, r3
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <acis_saturate+0x2d8>)
 80015b0:	701a      	strb	r2, [r3, #0]
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <acis_saturate+0x2d8>)
 80015b4:	f993 3000 	ldrsb.w	r3, [r3]
 80015b8:	2b0c      	cmp	r3, #12
 80015ba:	dd19      	ble.n	80015f0 <acis_saturate+0x2e8>
        cutoffcnt6 = -1;
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <acis_saturate+0x2d8>)
 80015be:	22ff      	movs	r2, #255	; 0xff
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	e024      	b.n	800160e <acis_saturate+0x306>
 80015c4:	200214a0 	.word	0x200214a0
 80015c8:	20021124 	.word	0x20021124
 80015cc:	20021125 	.word	0x20021125
 80015d0:	20021126 	.word	0x20021126
 80015d4:	20021127 	.word	0x20021127
 80015d8:	20021128 	.word	0x20021128
 80015dc:	20021129 	.word	0x20021129
 80015e0:	2002112a 	.word	0x2002112a
 80015e4:	200104ba 	.word	0x200104ba
 80015e8:	66666667 	.word	0x66666667
 80015ec:	55555556 	.word	0x55555556
      else if((cutoffcnt6 % 3) == 0)
 80015f0:	4b1e      	ldr	r3, [pc, #120]	; (800166c <acis_saturate+0x364>)
 80015f2:	f993 2000 	ldrsb.w	r2, [r3]
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <acis_saturate+0x368>)
 80015f8:	fb83 3102 	smull	r3, r1, r3, r2
 80015fc:	17d3      	asrs	r3, r2, #31
 80015fe:	1ac9      	subs	r1, r1, r3
 8001600:	460b      	mov	r3, r1
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	440b      	add	r3, r1
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	b25b      	sxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d029      	beq.n	8001662 <acis_saturate+0x35a>
        return;
    }
  }

  if(index == 0)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <acis_saturate+0x322>
  {
    acis_saturate_14();
 8001616:	f7ff fdff 	bl	8001218 <acis_saturate_14>
    cylinder14 ^= 1;
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <acis_saturate+0x36c>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	f083 0301 	eor.w	r3, r3, #1
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <acis_saturate+0x36c>)
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	e01c      	b.n	8001664 <acis_saturate+0x35c>
  }
  else if(index == 1)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d118      	bne.n	8001664 <acis_saturate+0x35c>
  {
    acis_saturate_23();
 8001632:	f7ff fe23 	bl	800127c <acis_saturate_23>
    cylinder23 ^= 1;
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <acis_saturate+0x370>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	f083 0301 	eor.w	r3, r3, #1
 800163e:	b2da      	uxtb	r2, r3
 8001640:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <acis_saturate+0x370>)
 8001642:	701a      	strb	r2, [r3, #0]
 8001644:	e00e      	b.n	8001664 <acis_saturate+0x35c>
        return;
 8001646:	bf00      	nop
 8001648:	e00c      	b.n	8001664 <acis_saturate+0x35c>
        return;
 800164a:	bf00      	nop
 800164c:	e00a      	b.n	8001664 <acis_saturate+0x35c>
        return;
 800164e:	bf00      	nop
 8001650:	e008      	b.n	8001664 <acis_saturate+0x35c>
        return;
 8001652:	bf00      	nop
 8001654:	e006      	b.n	8001664 <acis_saturate+0x35c>
        return;
 8001656:	bf00      	nop
 8001658:	e004      	b.n	8001664 <acis_saturate+0x35c>
        return;
 800165a:	bf00      	nop
 800165c:	e002      	b.n	8001664 <acis_saturate+0x35c>
        return;
 800165e:	bf00      	nop
 8001660:	e000      	b.n	8001664 <acis_saturate+0x35c>
        return;
 8001662:	bf00      	nop
  }

}
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	2002112a 	.word	0x2002112a
 8001670:	55555556 	.word	0x55555556
 8001674:	2002112b 	.word	0x2002112b
 8001678:	2002112c 	.word	0x2002112c

0800167c <acis_ignition_loop>:

static inline void acis_ignition_loop(void)
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b08b      	sub	sp, #44	; 0x2c
 8001680:	af00      	add	r7, sp, #0
  float rpm = csps_getrpm();
 8001682:	f006 fd31 	bl	80080e8 <csps_getrpm>
 8001686:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  uint8_t rotates = csps_isrotates() || hall_rotates;
 800168a:	f006 fd65 	bl	8008158 <csps_isrotates>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d104      	bne.n	800169e <acis_ignition_loop+0x22>
 8001694:	4bae      	ldr	r3, [pc, #696]	; (8001950 <acis_ignition_loop+0x2d4>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <acis_ignition_loop+0x26>
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <acis_ignition_loop+0x28>
 80016a2:	2300      	movs	r3, #0
 80016a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t isIgn = HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_RESET;
 80016a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ac:	48a9      	ldr	r0, [pc, #676]	; (8001954 <acis_ignition_loop+0x2d8>)
 80016ae:	f00b fdef 	bl	800d290 <HAL_GPIO_ReadPin>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf0c      	ite	eq
 80016b8:	2301      	moveq	r3, #1
 80016ba:	2300      	movne	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  if(isIgn && !ign_ftime && rotates)
 80016c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 812b 	beq.w	8001922 <acis_ignition_loop+0x2a6>
 80016cc:	4ba2      	ldr	r3, [pc, #648]	; (8001958 <acis_ignition_loop+0x2dc>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f040 8126 	bne.w	8001922 <acis_ignition_loop+0x2a6>
 80016d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 8121 	beq.w	8001922 <acis_ignition_loop+0x2a6>
  {
    uint8_t t_saturated_14 = saturated_14;
 80016e0:	4b9e      	ldr	r3, [pc, #632]	; (800195c <acis_ignition_loop+0x2e0>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    uint32_t t_ign14_sat = ign14_sat;
 80016e8:	4b9d      	ldr	r3, [pc, #628]	; (8001960 <acis_ignition_loop+0x2e4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	61fb      	str	r3, [r7, #28]
    uint32_t t_ign14_time = ign14_time;
 80016ee:	4b9d      	ldr	r3, [pc, #628]	; (8001964 <acis_ignition_loop+0x2e8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	61bb      	str	r3, [r7, #24]
    uint32_t t_ign14_prev = ign14_prev;
 80016f4:	4b9c      	ldr	r3, [pc, #624]	; (8001968 <acis_ignition_loop+0x2ec>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	617b      	str	r3, [r7, #20]
    uint32_t now = Delay_Tick;
 80016fa:	4b9c      	ldr	r3, [pc, #624]	; (800196c <acis_ignition_loop+0x2f0>)
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	613b      	str	r3, [r7, #16]
    if(DelayDiff(now, t_ign14_time) >= IGN_OVER_TIME && DelayDiff(now, t_ign14_sat) >= IGN_OVER_TIME)
 8001700:	69b9      	ldr	r1, [r7, #24]
 8001702:	6938      	ldr	r0, [r7, #16]
 8001704:	f006 fe0e 	bl	8008324 <DelayDiff>
 8001708:	4602      	mov	r2, r0
 800170a:	4b99      	ldr	r3, [pc, #612]	; (8001970 <acis_ignition_loop+0x2f4>)
 800170c:	429a      	cmp	r2, r3
 800170e:	d910      	bls.n	8001732 <acis_ignition_loop+0xb6>
 8001710:	69f9      	ldr	r1, [r7, #28]
 8001712:	6938      	ldr	r0, [r7, #16]
 8001714:	f006 fe06 	bl	8008324 <DelayDiff>
 8001718:	4602      	mov	r2, r0
 800171a:	4b95      	ldr	r3, [pc, #596]	; (8001970 <acis_ignition_loop+0x2f4>)
 800171c:	429a      	cmp	r2, r3
 800171e:	d908      	bls.n	8001732 <acis_ignition_loop+0xb6>
    {
      HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	2180      	movs	r1, #128	; 0x80
 8001724:	4893      	ldr	r0, [pc, #588]	; (8001974 <acis_ignition_loop+0x2f8>)
 8001726:	f00b fdcb 	bl	800d2c0 <HAL_GPIO_WritePin>
      saturated_14 = 0;
 800172a:	4b8c      	ldr	r3, [pc, #560]	; (800195c <acis_ignition_loop+0x2e0>)
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
 8001730:	e062      	b.n	80017f8 <acis_ignition_loop+0x17c>
    }
    else if(!t_saturated_14 && acis_config.params.isIgnitionByHall)
 8001732:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001736:	2b00      	cmp	r3, #0
 8001738:	d15e      	bne.n	80017f8 <acis_ignition_loop+0x17c>
 800173a:	4b8f      	ldr	r3, [pc, #572]	; (8001978 <acis_ignition_loop+0x2fc>)
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d05a      	beq.n	80017f8 <acis_ignition_loop+0x17c>
    {
      if(rpm < 300.0f)
 8001742:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001746:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800197c <acis_ignition_loop+0x300>
 800174a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001752:	d519      	bpl.n	8001788 <acis_ignition_loop+0x10c>
      {
        if(DelayDiff(now, t_ign14_time) >= DelayDiff(t_ign14_time, t_ign14_prev) * 96 / 128)
 8001754:	69b9      	ldr	r1, [r7, #24]
 8001756:	6938      	ldr	r0, [r7, #16]
 8001758:	f006 fde4 	bl	8008324 <DelayDiff>
 800175c:	4604      	mov	r4, r0
 800175e:	6979      	ldr	r1, [r7, #20]
 8001760:	69b8      	ldr	r0, [r7, #24]
 8001762:	f006 fddf 	bl	8008324 <DelayDiff>
 8001766:	4602      	mov	r2, r0
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	015b      	lsls	r3, r3, #5
 8001770:	09db      	lsrs	r3, r3, #7
 8001772:	429c      	cmp	r4, r3
 8001774:	d340      	bcc.n	80017f8 <acis_ignition_loop+0x17c>
        {
          HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	487e      	ldr	r0, [pc, #504]	; (8001974 <acis_ignition_loop+0x2f8>)
 800177c:	f00b fda0 	bl	800d2c0 <HAL_GPIO_WritePin>
          saturated_14 = 1;
 8001780:	4b76      	ldr	r3, [pc, #472]	; (800195c <acis_ignition_loop+0x2e0>)
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	e037      	b.n	80017f8 <acis_ignition_loop+0x17c>
        }
      }
      else if(DelayDiff(t_ign14_time, t_ign14_prev) > 15000)
 8001788:	6979      	ldr	r1, [r7, #20]
 800178a:	69b8      	ldr	r0, [r7, #24]
 800178c:	f006 fdca 	bl	8008324 <DelayDiff>
 8001790:	4602      	mov	r2, r0
 8001792:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001796:	429a      	cmp	r2, r3
 8001798:	d918      	bls.n	80017cc <acis_ignition_loop+0x150>
      {
        if((int32_t)DelayDiff(t_ign14_time, t_ign14_prev) - (int32_t)DelayDiff(now, t_ign14_time) < 11719)
 800179a:	6979      	ldr	r1, [r7, #20]
 800179c:	69b8      	ldr	r0, [r7, #24]
 800179e:	f006 fdc1 	bl	8008324 <DelayDiff>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461c      	mov	r4, r3
 80017a6:	69b9      	ldr	r1, [r7, #24]
 80017a8:	6938      	ldr	r0, [r7, #16]
 80017aa:	f006 fdbb 	bl	8008324 <DelayDiff>
 80017ae:	4603      	mov	r3, r0
 80017b0:	1ae3      	subs	r3, r4, r3
 80017b2:	f642 52c6 	movw	r2, #11718	; 0x2dc6
 80017b6:	4293      	cmp	r3, r2
 80017b8:	dc1e      	bgt.n	80017f8 <acis_ignition_loop+0x17c>
        {
          HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2180      	movs	r1, #128	; 0x80
 80017be:	486d      	ldr	r0, [pc, #436]	; (8001974 <acis_ignition_loop+0x2f8>)
 80017c0:	f00b fd7e 	bl	800d2c0 <HAL_GPIO_WritePin>
          saturated_14 = 1;
 80017c4:	4b65      	ldr	r3, [pc, #404]	; (800195c <acis_ignition_loop+0x2e0>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	e015      	b.n	80017f8 <acis_ignition_loop+0x17c>
        }
      }
      else if(DelayDiff(now, t_ign14_time) >= DelayDiff(t_ign14_time, t_ign14_prev) * 64 / 128)
 80017cc:	69b9      	ldr	r1, [r7, #24]
 80017ce:	6938      	ldr	r0, [r7, #16]
 80017d0:	f006 fda8 	bl	8008324 <DelayDiff>
 80017d4:	4604      	mov	r4, r0
 80017d6:	6979      	ldr	r1, [r7, #20]
 80017d8:	69b8      	ldr	r0, [r7, #24]
 80017da:	f006 fda3 	bl	8008324 <DelayDiff>
 80017de:	4603      	mov	r3, r0
 80017e0:	019b      	lsls	r3, r3, #6
 80017e2:	09db      	lsrs	r3, r3, #7
 80017e4:	429c      	cmp	r4, r3
 80017e6:	d307      	bcc.n	80017f8 <acis_ignition_loop+0x17c>
      {
        HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	4861      	ldr	r0, [pc, #388]	; (8001974 <acis_ignition_loop+0x2f8>)
 80017ee:	f00b fd67 	bl	800d2c0 <HAL_GPIO_WritePin>
        saturated_14 = 1;
 80017f2:	4b5a      	ldr	r3, [pc, #360]	; (800195c <acis_ignition_loop+0x2e0>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
      }
    }

    uint8_t t_saturated_23 = saturated_23;
 80017f8:	4b61      	ldr	r3, [pc, #388]	; (8001980 <acis_ignition_loop+0x304>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	73fb      	strb	r3, [r7, #15]
    uint32_t t_ign23_sat = ign23_sat;
 80017fe:	4b61      	ldr	r3, [pc, #388]	; (8001984 <acis_ignition_loop+0x308>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60bb      	str	r3, [r7, #8]
    uint32_t t_ign23_time = ign23_time;
 8001804:	4b60      	ldr	r3, [pc, #384]	; (8001988 <acis_ignition_loop+0x30c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	607b      	str	r3, [r7, #4]
    uint32_t t_ign23_prev = ign23_prev;
 800180a:	4b60      	ldr	r3, [pc, #384]	; (800198c <acis_ignition_loop+0x310>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	603b      	str	r3, [r7, #0]
    now = Delay_Tick;
 8001810:	4b56      	ldr	r3, [pc, #344]	; (800196c <acis_ignition_loop+0x2f0>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	613b      	str	r3, [r7, #16]
    if(DelayDiff(now, t_ign23_time) >= IGN_OVER_TIME && DelayDiff(now, t_ign23_sat) >= IGN_OVER_TIME)
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	6938      	ldr	r0, [r7, #16]
 800181a:	f006 fd83 	bl	8008324 <DelayDiff>
 800181e:	4602      	mov	r2, r0
 8001820:	4b53      	ldr	r3, [pc, #332]	; (8001970 <acis_ignition_loop+0x2f4>)
 8001822:	429a      	cmp	r2, r3
 8001824:	d910      	bls.n	8001848 <acis_ignition_loop+0x1cc>
 8001826:	68b9      	ldr	r1, [r7, #8]
 8001828:	6938      	ldr	r0, [r7, #16]
 800182a:	f006 fd7b 	bl	8008324 <DelayDiff>
 800182e:	4602      	mov	r2, r0
 8001830:	4b4f      	ldr	r3, [pc, #316]	; (8001970 <acis_ignition_loop+0x2f4>)
 8001832:	429a      	cmp	r2, r3
 8001834:	d908      	bls.n	8001848 <acis_ignition_loop+0x1cc>
    {
      HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 8001836:	2201      	movs	r2, #1
 8001838:	2140      	movs	r1, #64	; 0x40
 800183a:	484e      	ldr	r0, [pc, #312]	; (8001974 <acis_ignition_loop+0x2f8>)
 800183c:	f00b fd40 	bl	800d2c0 <HAL_GPIO_WritePin>
      saturated_23 = 0;
 8001840:	4b4f      	ldr	r3, [pc, #316]	; (8001980 <acis_ignition_loop+0x304>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	e06b      	b.n	8001920 <acis_ignition_loop+0x2a4>
    }
    else if(!t_saturated_23 && acis_config.params.isIgnitionByHall)
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d17a      	bne.n	8001944 <acis_ignition_loop+0x2c8>
 800184e:	4b4a      	ldr	r3, [pc, #296]	; (8001978 <acis_ignition_loop+0x2fc>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d076      	beq.n	8001944 <acis_ignition_loop+0x2c8>
    {
      if(rpm < 300.0f)
 8001856:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800185a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800197c <acis_ignition_loop+0x300>
 800185e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001866:	d519      	bpl.n	800189c <acis_ignition_loop+0x220>
      {
        if(DelayDiff(now, t_ign23_time) >= DelayDiff(t_ign23_time, t_ign23_prev) * 96 / 128)
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	6938      	ldr	r0, [r7, #16]
 800186c:	f006 fd5a 	bl	8008324 <DelayDiff>
 8001870:	4604      	mov	r4, r0
 8001872:	6839      	ldr	r1, [r7, #0]
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f006 fd55 	bl	8008324 <DelayDiff>
 800187a:	4602      	mov	r2, r0
 800187c:	4613      	mov	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4413      	add	r3, r2
 8001882:	015b      	lsls	r3, r3, #5
 8001884:	09db      	lsrs	r3, r3, #7
 8001886:	429c      	cmp	r4, r3
 8001888:	d35c      	bcc.n	8001944 <acis_ignition_loop+0x2c8>
        {
          HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	2140      	movs	r1, #64	; 0x40
 800188e:	4839      	ldr	r0, [pc, #228]	; (8001974 <acis_ignition_loop+0x2f8>)
 8001890:	f00b fd16 	bl	800d2c0 <HAL_GPIO_WritePin>
          saturated_23 = 1;
 8001894:	4b3a      	ldr	r3, [pc, #232]	; (8001980 <acis_ignition_loop+0x304>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
  {
 800189a:	e053      	b.n	8001944 <acis_ignition_loop+0x2c8>
        }
      }
      else if(rpm > 500.0f && DelayDiff(t_ign23_time, t_ign23_prev) > 15000)
 800189c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018a0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001990 <acis_ignition_loop+0x314>
 80018a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ac:	dd21      	ble.n	80018f2 <acis_ignition_loop+0x276>
 80018ae:	6839      	ldr	r1, [r7, #0]
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f006 fd37 	bl	8008324 <DelayDiff>
 80018b6:	4602      	mov	r2, r0
 80018b8:	f643 2398 	movw	r3, #15000	; 0x3a98
 80018bc:	429a      	cmp	r2, r3
 80018be:	d918      	bls.n	80018f2 <acis_ignition_loop+0x276>
      {
        if((int32_t)DelayDiff(t_ign23_time, t_ign23_prev) - (int32_t)DelayDiff(now, t_ign23_time) < 11719)
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f006 fd2e 	bl	8008324 <DelayDiff>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461c      	mov	r4, r3
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	6938      	ldr	r0, [r7, #16]
 80018d0:	f006 fd28 	bl	8008324 <DelayDiff>
 80018d4:	4603      	mov	r3, r0
 80018d6:	1ae3      	subs	r3, r4, r3
 80018d8:	f642 52c6 	movw	r2, #11718	; 0x2dc6
 80018dc:	4293      	cmp	r3, r2
 80018de:	dc1f      	bgt.n	8001920 <acis_ignition_loop+0x2a4>
        {
          HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2140      	movs	r1, #64	; 0x40
 80018e4:	4823      	ldr	r0, [pc, #140]	; (8001974 <acis_ignition_loop+0x2f8>)
 80018e6:	f00b fceb 	bl	800d2c0 <HAL_GPIO_WritePin>
          saturated_23 = 1;
 80018ea:	4b25      	ldr	r3, [pc, #148]	; (8001980 <acis_ignition_loop+0x304>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	701a      	strb	r2, [r3, #0]
        if((int32_t)DelayDiff(t_ign23_time, t_ign23_prev) - (int32_t)DelayDiff(now, t_ign23_time) < 11719)
 80018f0:	e016      	b.n	8001920 <acis_ignition_loop+0x2a4>
        }
      }
      else if(DelayDiff(now, t_ign23_time) >= DelayDiff(t_ign23_time, t_ign23_prev) * 64 / 128)
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	6938      	ldr	r0, [r7, #16]
 80018f6:	f006 fd15 	bl	8008324 <DelayDiff>
 80018fa:	4604      	mov	r4, r0
 80018fc:	6839      	ldr	r1, [r7, #0]
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f006 fd10 	bl	8008324 <DelayDiff>
 8001904:	4603      	mov	r3, r0
 8001906:	019b      	lsls	r3, r3, #6
 8001908:	09db      	lsrs	r3, r3, #7
 800190a:	429c      	cmp	r4, r3
 800190c:	d31a      	bcc.n	8001944 <acis_ignition_loop+0x2c8>
      {
        HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	2140      	movs	r1, #64	; 0x40
 8001912:	4818      	ldr	r0, [pc, #96]	; (8001974 <acis_ignition_loop+0x2f8>)
 8001914:	f00b fcd4 	bl	800d2c0 <HAL_GPIO_WritePin>
        saturated_23 = 1;
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <acis_ignition_loop+0x304>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
  {
 800191e:	e011      	b.n	8001944 <acis_ignition_loop+0x2c8>
 8001920:	e010      	b.n	8001944 <acis_ignition_loop+0x2c8>
      }
    }
  }
  else
  {
    HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 8001922:	2201      	movs	r2, #1
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	4813      	ldr	r0, [pc, #76]	; (8001974 <acis_ignition_loop+0x2f8>)
 8001928:	f00b fcca 	bl	800d2c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 800192c:	2201      	movs	r2, #1
 800192e:	2140      	movs	r1, #64	; 0x40
 8001930:	4810      	ldr	r0, [pc, #64]	; (8001974 <acis_ignition_loop+0x2f8>)
 8001932:	f00b fcc5 	bl	800d2c0 <HAL_GPIO_WritePin>
    saturated_14 = 0;
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <acis_ignition_loop+0x2e0>)
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
    saturated_23 = 0;
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <acis_ignition_loop+0x304>)
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
  }
}
 8001942:	e000      	b.n	8001946 <acis_ignition_loop+0x2ca>
  {
 8001944:	bf00      	nop
}
 8001946:	bf00      	nop
 8001948:	372c      	adds	r7, #44	; 0x2c
 800194a:	46bd      	mov	sp, r7
 800194c:	bd90      	pop	{r4, r7, pc}
 800194e:	bf00      	nop
 8001950:	20011924 	.word	0x20011924
 8001954:	40020000 	.word	0x40020000
 8001958:	200104a5 	.word	0x200104a5
 800195c:	2002095e 	.word	0x2002095e
 8001960:	200118fc 	.word	0x200118fc
 8001964:	20011904 	.word	0x20011904
 8001968:	2001190c 	.word	0x2001190c
 800196c:	40000c00 	.word	0x40000c00
 8001970:	000927bf 	.word	0x000927bf
 8001974:	40020400 	.word	0x40020400
 8001978:	200214a0 	.word	0x200214a0
 800197c:	43960000 	.word	0x43960000
 8001980:	2002095f 	.word	0x2002095f
 8001984:	20011900 	.word	0x20011900
 8001988:	20011908 	.word	0x20011908
 800198c:	20011910 	.word	0x20011910
 8001990:	43fa0000 	.word	0x43fa0000

08001994 <acis_hall_exti>:

inline void acis_hall_exti(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
  uint32_t now = Delay_Tick;
 800199a:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <acis_hall_exti+0xb0>)
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	60fb      	str	r3, [r7, #12]
  uint8_t hall_cylinders = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	75fb      	strb	r3, [r7, #23]
  hall_prev = now;
 80019a4:	4a28      	ldr	r2, [pc, #160]	; (8001a48 <acis_hall_exti+0xb4>)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6013      	str	r3, [r2, #0]
  float angle = 0.0f;
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
  float angle14 = csps_getangle14();
 80019b0:	f006 faa4 	bl	8007efc <csps_getangle14>
 80019b4:	ed87 0a02 	vstr	s0, [r7, #8]
  float angle23 = csps_getangle23from14(angle14);
 80019b8:	ed97 0a02 	vldr	s0, [r7, #8]
 80019bc:	f006 fb60 	bl	8008080 <csps_getangle23from14>
 80019c0:	ed87 0a01 	vstr	s0, [r7, #4]
  float cspsfound = csps_isfound();
 80019c4:	f006 fbd4 	bl	8008170 <csps_isfound>
 80019c8:	4603      	mov	r3, r0
 80019ca:	ee07 3a90 	vmov	s15, r3
 80019ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d2:	edc7 7a00 	vstr	s15, [r7]

  if(angle14 < 90.0f && angle14 >= -90.0f)
 80019d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019da:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001a4c <acis_hall_exti+0xb8>
 80019de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e6:	d50d      	bpl.n	8001a04 <acis_hall_exti+0x70>
 80019e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ec:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001a50 <acis_hall_exti+0xbc>
 80019f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	db04      	blt.n	8001a04 <acis_hall_exti+0x70>
  {
      hall_cylinders = 1;
 80019fa:	2301      	movs	r3, #1
 80019fc:	75fb      	strb	r3, [r7, #23]
      angle = angle14;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	e003      	b.n	8001a0c <acis_hall_exti+0x78>
  }
  else
  {
    hall_cylinders = 2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	75fb      	strb	r3, [r7, #23]
    angle = angle23;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	613b      	str	r3, [r7, #16]
  }
  hall_angle = angle;
 8001a0c:	4a11      	ldr	r2, [pc, #68]	; (8001a54 <acis_hall_exti+0xc0>)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	6013      	str	r3, [r2, #0]

  if(cspsfound && acis_config.params.isIgnitionByHall)
 8001a12:	edd7 7a00 	vldr	s15, [r7]
 8001a16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1e:	d009      	beq.n	8001a34 <acis_hall_exti+0xa0>
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <acis_hall_exti+0xc4>)
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <acis_hall_exti+0xa0>
  {
    acis_ignite(hall_cylinders - 1);
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fc56 	bl	80012e0 <acis_ignite>

  }
  hall_rotates = 1;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <acis_hall_exti+0xc8>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40000c00 	.word	0x40000c00
 8001a48:	20011918 	.word	0x20011918
 8001a4c:	42b40000 	.word	0x42b40000
 8001a50:	c2b40000 	.word	0xc2b40000
 8001a54:	2001191c 	.word	0x2001191c
 8001a58:	200214a0 	.word	0x200214a0
 8001a5c:	20011924 	.word	0x20011924

08001a60 <acis_hall_loop>:

static inline void acis_hall_loop(void)
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
  static uint32_t last_error_null = 0;
  uint32_t prev = hall_prev;
 8001a66:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <acis_hall_loop+0xa0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	607b      	str	r3, [r7, #4]
  uint32_t now = Delay_Tick;
 8001a6c:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <acis_hall_loop+0xa4>)
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	603b      	str	r3, [r7, #0]
  if(DelayDiff(now, last_error_null) > 10000)
 8001a72:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <acis_hall_loop+0xa8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4619      	mov	r1, r3
 8001a78:	6838      	ldr	r0, [r7, #0]
 8001a7a:	f006 fc53 	bl	8008324 <DelayDiff>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	f242 7310 	movw	r3, #10000	; 0x2710
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d915      	bls.n	8001ab4 <acis_hall_loop+0x54>
  {
    hall_error *= 0.95;
 8001a88:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <acis_hall_loop+0xac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fd2b 	bl	80004e8 <__aeabi_f2d>
 8001a92:	a319      	add	r3, pc, #100	; (adr r3, 8001af8 <acis_hall_loop+0x98>)
 8001a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a98:	f7fe fd7e 	bl	8000598 <__aeabi_dmul>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	f7fe ff8a 	bl	80009bc <__aeabi_d2f>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <acis_hall_loop+0xac>)
 8001aac:	601a      	str	r2, [r3, #0]
    last_error_null = now;
 8001aae:	4a16      	ldr	r2, [pc, #88]	; (8001b08 <acis_hall_loop+0xa8>)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6013      	str	r3, [r2, #0]
  }
  if(DelayDiff(now, prev) > 600000)
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	6838      	ldr	r0, [r7, #0]
 8001ab8:	f006 fc34 	bl	8008324 <DelayDiff>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <acis_hall_loop+0xb0>)
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d912      	bls.n	8001aea <acis_hall_loop+0x8a>
  {
    if((acis_config.params.isHallLearningMode || acis_config.params.isIgnitionByHall) && csps_isfound())
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <acis_hall_loop+0xb4>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d103      	bne.n	8001ad4 <acis_hall_loop+0x74>
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <acis_hall_loop+0xb4>)
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d007      	beq.n	8001ae4 <acis_hall_loop+0x84>
 8001ad4:	f006 fb4c 	bl	8008170 <csps_isfound>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <acis_hall_loop+0x84>
      hall_error = 3.0f;
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <acis_hall_loop+0xac>)
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <acis_hall_loop+0xb8>)
 8001ae2:	601a      	str	r2, [r3, #0]
    hall_rotates = 0;
 8001ae4:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <acis_hall_loop+0xbc>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
  }
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd90      	pop	{r4, r7, pc}
 8001af2:	bf00      	nop
 8001af4:	f3af 8000 	nop.w
 8001af8:	66666666 	.word	0x66666666
 8001afc:	3fee6666 	.word	0x3fee6666
 8001b00:	20011918 	.word	0x20011918
 8001b04:	40000c00 	.word	0x40000c00
 8001b08:	20021140 	.word	0x20021140
 8001b0c:	20011920 	.word	0x20011920
 8001b10:	000927c0 	.word	0x000927c0
 8001b14:	200214a0 	.word	0x200214a0
 8001b18:	40400000 	.word	0x40400000
 8001b1c:	20011924 	.word	0x20011924

08001b20 <CalculateIgnition>:

static float CalculateIgnition(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b0a4      	sub	sp, #144	; 0x90
 8001b24:	af00      	add	r7, sp, #0
  float rpm = csps_getrpmgui();
 8001b26:	f006 faed 	bl	8008104 <csps_getrpmgui>
 8001b2a:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
  float pressure = map_getpressure();
 8001b2e:	f007 fc11 	bl	8009354 <map_getpressure>
 8001b32:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
  float temperature = engine_temperature;
 8001b36:	4bc0      	ldr	r3, [pc, #768]	; (8001e38 <CalculateIgnition+0x318>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if(map_iserror())
 8001b3c:	f007 fc18 	bl	8009370 <map_iserror>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <CalculateIgnition+0x2c>
    pressure = 100000.0f;
 8001b46:	4bbd      	ldr	r3, [pc, #756]	; (8001e3c <CalculateIgnition+0x31c>)
 8001b48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  uint8_t isIdle = HAL_GPIO_ReadPin(SENS_ACC_GPIO_Port, SENS_ACC_Pin) == GPIO_PIN_SET;
 8001b4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b50:	48bb      	ldr	r0, [pc, #748]	; (8001e40 <CalculateIgnition+0x320>)
 8001b52:	f00b fb9d 	bl	800d290 <HAL_GPIO_ReadPin>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	bf0c      	ite	eq
 8001b5c:	2301      	moveq	r3, #1
 8001b5e:	2300      	movne	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b


  static uint32_t lastRotated = 0x80000000;
  static uint8_t isInitial = 1;
  uint32_t now = Delay_Tick;
 8001b66:	4bb7      	ldr	r3, [pc, #732]	; (8001e44 <CalculateIgnition+0x324>)
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	637b      	str	r3, [r7, #52]	; 0x34
  float angle = 0.0f;
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  float angle_1, angle_2;
  float mult, mult_rpm, mult_press,
      temprpm1 = 0.0f,temprpm2 = 0.0f,
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      temppress1 = 0.0f,temppress2 = 0.0f,
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	67bb      	str	r3, [r7, #120]	; 0x78
      temptemp1 = 0.0f,temptemp2 = 0.0f,
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	677b      	str	r3, [r7, #116]	; 0x74
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	673b      	str	r3, [r7, #112]	; 0x70
      tempign1 = 0.0f, tempign2 = 0.0f,
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tempign11 = 0.0f, tempign12 = 0.0f,
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
      tempign21 = 0.0f, tempign22 = 0.0f;
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
  uint32_t rpmindex1 = 0, rpmindex2 = 0,
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	66bb      	str	r3, [r7, #104]	; 0x68
      pressindex1 = 0, pressindex2 = 0,
 8001bc8:	2300      	movs	r3, #0
 8001bca:	667b      	str	r3, [r7, #100]	; 0x64
 8001bcc:	2300      	movs	r3, #0
 8001bce:	663b      	str	r3, [r7, #96]	; 0x60
      tempindex1 = 0, tempindex2 = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	65bb      	str	r3, [r7, #88]	; 0x58

  sAcisIgnTable * table = NULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	657b      	str	r3, [r7, #84]	; 0x54
  int table_num = table_current;
 8001bdc:	4b9a      	ldr	r3, [pc, #616]	; (8001e48 <CalculateIgnition+0x328>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	61bb      	str	r3, [r7, #24]

  if(table_num < acis_config.tables_count || table_num < TABLE_SETUPS_MAX)
 8001be2:	4b9a      	ldr	r3, [pc, #616]	; (8001e4c <CalculateIgnition+0x32c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	db02      	blt.n	8001bf2 <CalculateIgnition+0xd2>
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	dc08      	bgt.n	8001c04 <CalculateIgnition+0xe4>
    table = &acis_config.tables[table_num];
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	f640 426c 	movw	r2, #3180	; 0xc6c
 8001bf8:	fb02 f303 	mul.w	r3, r2, r3
 8001bfc:	33c0      	adds	r3, #192	; 0xc0
 8001bfe:	4a93      	ldr	r2, [pc, #588]	; (8001e4c <CalculateIgnition+0x32c>)
 8001c00:	4413      	add	r3, r2
 8001c02:	657b      	str	r3, [r7, #84]	; 0x54

  if(rpm > 400.0f)
 8001c04:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001c08:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8001e50 <CalculateIgnition+0x330>
 8001c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	dd06      	ble.n	8001c24 <CalculateIgnition+0x104>
  {
    isInitial = 0;
 8001c16:	4b8f      	ldr	r3, [pc, #572]	; (8001e54 <CalculateIgnition+0x334>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
    lastRotated = now;
 8001c1c:	4a8e      	ldr	r2, [pc, #568]	; (8001e58 <CalculateIgnition+0x338>)
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	e015      	b.n	8001c50 <CalculateIgnition+0x130>
  }
  else if(rpm < 10.0f)
 8001c24:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001c28:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c34:	d50c      	bpl.n	8001c50 <CalculateIgnition+0x130>
  {
    if(DelayDiff(now, lastRotated) < INITIAL_TIMEOUT)
 8001c36:	4b88      	ldr	r3, [pc, #544]	; (8001e58 <CalculateIgnition+0x338>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c3e:	f006 fb71 	bl	8008324 <DelayDiff>
 8001c42:	4602      	mov	r2, r0
 8001c44:	4b85      	ldr	r3, [pc, #532]	; (8001e5c <CalculateIgnition+0x33c>)
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d802      	bhi.n	8001c50 <CalculateIgnition+0x130>
    {
      isInitial = 1;
 8001c4a:	4b82      	ldr	r3, [pc, #520]	; (8001e54 <CalculateIgnition+0x334>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
    }
  }

  if(table)
 8001c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 84a2 	beq.w	800259c <CalculateIgnition+0xa7c>
  {
    angle = table->initial_ignition;
 8001c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if(!isInitial && rpm > 10.0f)
 8001c60:	4b7c      	ldr	r3, [pc, #496]	; (8001e54 <CalculateIgnition+0x334>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f040 8478 	bne.w	800255a <CalculateIgnition+0xa3a>
 8001c6a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001c6e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7a:	f340 846e 	ble.w	800255a <CalculateIgnition+0xa3a>
    {
      if(isIdle && table->idles_count > 0)
 8001c7e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80ec 	beq.w	8001e60 <CalculateIgnition+0x340>
 8001c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f340 80e7 	ble.w	8001e60 <CalculateIgnition+0x340>
      {
        if(table->idles_count == 1)
 8001c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d104      	bne.n	8001ca4 <CalculateIgnition+0x184>
          angle = table->idle_ignitions[0];
 8001c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        if(table->idles_count == 1)
 8001ca2:	e354      	b.n	800234e <CalculateIgnition+0x82e>
        else
        {
          if(rpm <= table->idle_rotates[0])
 8001ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001caa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001cae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	d804      	bhi.n	8001cc2 <CalculateIgnition+0x1a2>
          {
            angle = table->idle_ignitions[0];
 8001cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001cc0:	e065      	b.n	8001d8e <CalculateIgnition+0x26e>
          }
          else if(rpm >= table->idle_rotates[table->rotates_count-1])
 8001cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ccc:	3320      	adds	r3, #32
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce2:	db18      	blt.n	8001d16 <CalculateIgnition+0x1f6>
          {
            rpmindex1 = table->idles_count-2;
 8001ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	3b02      	subs	r3, #2
 8001cea:	66fb      	str	r3, [r7, #108]	; 0x6c
            rpmindex2 = table->idles_count-1;
 8001cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	66bb      	str	r3, [r7, #104]	; 0x68
            temprpm1 = table->idle_rotates[rpmindex1];
 8001cf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf8:	3320      	adds	r3, #32
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            temprpm2 = table->idle_rotates[rpmindex2];
 8001d04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d08:	3320      	adds	r3, #32
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d14:	e03b      	b.n	8001d8e <CalculateIgnition+0x26e>
          }
          else
          {
            for(int i = 1; i < table->idles_count; i++)
 8001d16:	2301      	movs	r3, #1
 8001d18:	653b      	str	r3, [r7, #80]	; 0x50
 8001d1a:	e033      	b.n	8001d84 <CalculateIgnition+0x264>
            {
              temprpm1 = table->idle_rotates[i-1];
 8001d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d22:	3320      	adds	r3, #32
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              temprpm2 = table->idle_rotates[i];
 8001d2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d32:	3320      	adds	r3, #32
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
              if(temprpm1 < rpm && temprpm2 > rpm)
 8001d3e:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001d42:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001d46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	d50e      	bpl.n	8001d6e <CalculateIgnition+0x24e>
 8001d50:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001d54:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001d58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d60:	dd05      	ble.n	8001d6e <CalculateIgnition+0x24e>
              {
                rpmindex1 = i-1;
 8001d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d64:	3b01      	subs	r3, #1
 8001d66:	66fb      	str	r3, [r7, #108]	; 0x6c
                rpmindex2 = i;
 8001d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d6a:	66bb      	str	r3, [r7, #104]	; 0x68
                break;
 8001d6c:	e00f      	b.n	8001d8e <CalculateIgnition+0x26e>
              }
              temprpm1 = 0.0f;
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              temprpm2 = 0.0f;
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for(int i = 1; i < table->idles_count; i++)
 8001d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d80:	3301      	adds	r3, #1
 8001d82:	653b      	str	r3, [r7, #80]	; 0x50
 8001d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	dbc6      	blt.n	8001d1c <CalculateIgnition+0x1fc>
            }
          }
          if(temprpm1 != 0.0f || temprpm2 != 0.0f)
 8001d8e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001d92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9a:	d107      	bne.n	8001dac <CalculateIgnition+0x28c>
 8001d9c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001da0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da8:	f000 82d1 	beq.w	800234e <CalculateIgnition+0x82e>
          {
            tempign1 = table->idle_ignitions[rpmindex1];
 8001dac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001db0:	3308      	adds	r3, #8
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
            tempign2 = table->idle_ignitions[rpmindex2];
 8001dba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dbe:	3308      	adds	r3, #8
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
            if(temprpm1 != temprpm2)
 8001dc8:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001dcc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001dd0:	eeb4 7a67 	vcmp.f32	s14, s15
 8001dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd8:	d020      	beq.n	8001e1c <CalculateIgnition+0x2fc>
            {
              mult = (rpm - temprpm1) / (temprpm2 - temprpm1);
 8001dda:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001dde:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001de2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001de6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001dea:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001dee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df6:	edc7 7a05 	vstr	s15, [r7, #20]
              angle = (tempign2 - tempign1) * mult + tempign1;
 8001dfa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001dfe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e16:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
        if(table->idles_count == 1)
 8001e1a:	e298      	b.n	800234e <CalculateIgnition+0x82e>
            }
            else angle = (tempign1 + tempign2) / 2.0f;
 8001e1c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001e20:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e28:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e30:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
        if(table->idles_count == 1)
 8001e34:	e28b      	b.n	800234e <CalculateIgnition+0x82e>
 8001e36:	bf00      	nop
 8001e38:	20011938 	.word	0x20011938
 8001e3c:	47c35000 	.word	0x47c35000
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40000c00 	.word	0x40000c00
 8001e48:	20011934 	.word	0x20011934
 8001e4c:	200214a0 	.word	0x200214a0
 8001e50:	43c80000 	.word	0x43c80000
 8001e54:	200104a7 	.word	0x200104a7
 8001e58:	200104a8 	.word	0x200104a8
 8001e5c:	0001869f 	.word	0x0001869f

        }
      }
      else
      {
        if(table->pressures_count != 0 && table->rotates_count != 0)
 8001e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8272 	beq.w	8002350 <CalculateIgnition+0x830>
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 826c 	beq.w	8002350 <CalculateIgnition+0x830>
        {
          if(table->pressures_count == 1)
 8001e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d10c      	bne.n	8001e9c <CalculateIgnition+0x37c>
          {
            pressindex1 = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	667b      	str	r3, [r7, #100]	; 0x64
            pressindex2 = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	663b      	str	r3, [r7, #96]	; 0x60
            temppress1 = table->pressures[0];
 8001e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001e90:	67fb      	str	r3, [r7, #124]	; 0x7c
            temppress2 = table->pressures[0];
 8001e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001e98:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e9a:	e086      	b.n	8001faa <CalculateIgnition+0x48a>
          }
          else if(pressure <= table->pressures[0])
 8001e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9e:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8001ea2:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001ea6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eae:	d814      	bhi.n	8001eda <CalculateIgnition+0x3ba>
          {
            pressindex1 = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	667b      	str	r3, [r7, #100]	; 0x64
            pressindex2 = 1;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	663b      	str	r3, [r7, #96]	; 0x60
            temppress1 = table->pressures[pressindex1];
 8001eb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001eba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ebc:	3338      	adds	r3, #56	; 0x38
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
            temppress2 = table->pressures[pressindex2];
 8001ec8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ecc:	3338      	adds	r3, #56	; 0x38
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ed8:	e067      	b.n	8001faa <CalculateIgnition+0x48a>
          }
          else if(pressure >= table->pressures[table->pressures_count - 1])
 8001eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ee4:	3338      	adds	r3, #56	; 0x38
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	3304      	adds	r3, #4
 8001eec:	edd3 7a00 	vldr	s15, [r3]
 8001ef0:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001ef4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efc:	db1a      	blt.n	8001f34 <CalculateIgnition+0x414>
          {
            pressindex1 = table->pressures_count - 2;
 8001efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f04:	3b02      	subs	r3, #2
 8001f06:	667b      	str	r3, [r7, #100]	; 0x64
            pressindex2 = table->pressures_count - 1;
 8001f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	663b      	str	r3, [r7, #96]	; 0x60
            temppress1 = table->pressures[pressindex1];
 8001f12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f16:	3338      	adds	r3, #56	; 0x38
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	67fb      	str	r3, [r7, #124]	; 0x7c
            temppress2 = table->pressures[pressindex2];
 8001f22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f26:	3338      	adds	r3, #56	; 0x38
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f32:	e03a      	b.n	8001faa <CalculateIgnition+0x48a>
          }
          else
          {
            for(int i = 1; i < table->pressures_count; i++)
 8001f34:	2301      	movs	r3, #1
 8001f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f38:	e031      	b.n	8001f9e <CalculateIgnition+0x47e>
            {
              temppress1 = table->pressures[i-1];
 8001f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f40:	3338      	adds	r3, #56	; 0x38
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	3304      	adds	r3, #4
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
              temppress2 = table->pressures[i];
 8001f4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f50:	3338      	adds	r3, #56	; 0x38
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	3304      	adds	r3, #4
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	67bb      	str	r3, [r7, #120]	; 0x78
              if(temppress1 < pressure && temppress2 > pressure)
 8001f5c:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001f60:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001f64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6c:	d50e      	bpl.n	8001f8c <CalculateIgnition+0x46c>
 8001f6e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001f72:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001f76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	dd05      	ble.n	8001f8c <CalculateIgnition+0x46c>
              {
                pressindex1 = i-1;
 8001f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f82:	3b01      	subs	r3, #1
 8001f84:	667b      	str	r3, [r7, #100]	; 0x64
                pressindex2 = i;
 8001f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f88:	663b      	str	r3, [r7, #96]	; 0x60
                break;
 8001f8a:	e00e      	b.n	8001faa <CalculateIgnition+0x48a>
              }
              temppress1 = 0.0f;
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	67fb      	str	r3, [r7, #124]	; 0x7c
              temppress2 = 0.0f;
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	67bb      	str	r3, [r7, #120]	; 0x78
            for(int i = 1; i < table->pressures_count; i++)
 8001f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	dbc7      	blt.n	8001f3a <CalculateIgnition+0x41a>
            }
          }

          if(table->rotates_count == 1)
 8001faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fac:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d10e      	bne.n	8001fd2 <CalculateIgnition+0x4b2>
          {
            rpmindex1 = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
            rpmindex2 = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	66bb      	str	r3, [r7, #104]	; 0x68
            temprpm1 = table->rotates[0];
 8001fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fbe:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001fc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            temprpm2 = table->rotates[0];
 8001fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001fd0:	e087      	b.n	80020e2 <CalculateIgnition+0x5c2>
          }
          else if(rpm <= table->rotates[0])
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd4:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8001fd8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001fdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe4:	d814      	bhi.n	8002010 <CalculateIgnition+0x4f0>
          {
            rpmindex1 = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
            rpmindex2 = 1;
 8001fea:	2301      	movs	r3, #1
 8001fec:	66bb      	str	r3, [r7, #104]	; 0x68
            temprpm1 = table->rotates[rpmindex1];
 8001fee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff2:	3352      	adds	r3, #82	; 0x52
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            temprpm2 = table->rotates[rpmindex2];
 8001ffe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002000:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002002:	3352      	adds	r3, #82	; 0x52
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800200e:	e068      	b.n	80020e2 <CalculateIgnition+0x5c2>
          }
          else if(rpm >= table->rotates[table->rotates_count - 1])
 8002010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002012:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002016:	3b01      	subs	r3, #1
 8002018:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800201a:	3352      	adds	r3, #82	; 0x52
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002028:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800202c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002030:	db1a      	blt.n	8002068 <CalculateIgnition+0x548>
          {
            rpmindex1 = table->rotates_count - 2;
 8002032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002034:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002038:	3b02      	subs	r3, #2
 800203a:	66fb      	str	r3, [r7, #108]	; 0x6c
            rpmindex2 = table->rotates_count - 1;
 800203c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002042:	3b01      	subs	r3, #1
 8002044:	66bb      	str	r3, [r7, #104]	; 0x68
            temprpm1 = table->rotates[rpmindex1];
 8002046:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800204a:	3352      	adds	r3, #82	; 0x52
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            temprpm2 = table->rotates[rpmindex2];
 8002056:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002058:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800205a:	3352      	adds	r3, #82	; 0x52
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002066:	e03c      	b.n	80020e2 <CalculateIgnition+0x5c2>
          }
          else
          {
            for(int i = 1; i < table->rotates_count; i++)
 8002068:	2301      	movs	r3, #1
 800206a:	64bb      	str	r3, [r7, #72]	; 0x48
 800206c:	e033      	b.n	80020d6 <CalculateIgnition+0x5b6>
            {
              temprpm1 = table->rotates[i-1];
 800206e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002070:	3b01      	subs	r3, #1
 8002072:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002074:	3352      	adds	r3, #82	; 0x52
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              temprpm2 = table->rotates[i];
 8002080:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002084:	3352      	adds	r3, #82	; 0x52
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
              if(temprpm1 < rpm && temprpm2 > rpm)
 8002090:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002094:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a0:	d50e      	bpl.n	80020c0 <CalculateIgnition+0x5a0>
 80020a2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80020a6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80020aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	dd05      	ble.n	80020c0 <CalculateIgnition+0x5a0>
              {
                rpmindex1 = i-1;
 80020b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b6:	3b01      	subs	r3, #1
 80020b8:	66fb      	str	r3, [r7, #108]	; 0x6c
                rpmindex2 = i;
 80020ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020bc:	66bb      	str	r3, [r7, #104]	; 0x68
                break;
 80020be:	e010      	b.n	80020e2 <CalculateIgnition+0x5c2>
              }
              temprpm1 = 0.0f;
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              temprpm2 = 0.0f;
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for(int i = 1; i < table->rotates_count; i++)
 80020d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020d2:	3301      	adds	r3, #1
 80020d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80020d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80020dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020de:	429a      	cmp	r2, r3
 80020e0:	dbc5      	blt.n	800206e <CalculateIgnition+0x54e>
            }
          }

          tempign11 = table->ignitions[pressindex1][rpmindex1];
 80020e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80020e6:	4613      	mov	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020f0:	4413      	add	r3, r2
 80020f2:	336a      	adds	r3, #106	; 0x6a
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
          tempign12 = table->ignitions[pressindex1][rpmindex2];
 80020fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800210a:	4413      	add	r3, r2
 800210c:	336a      	adds	r3, #106	; 0x6a
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
          tempign21 = table->ignitions[pressindex2][rpmindex1];
 8002116:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002118:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800211a:	4613      	mov	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002124:	4413      	add	r3, r2
 8002126:	336a      	adds	r3, #106	; 0x6a
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	623b      	str	r3, [r7, #32]
          tempign22 = table->ignitions[pressindex2][rpmindex2];
 8002130:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002132:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002134:	4613      	mov	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800213e:	4413      	add	r3, r2
 8002140:	336a      	adds	r3, #106	; 0x6a
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61fb      	str	r3, [r7, #28]
          if((temprpm1 != 0.0f || temprpm2 != 0.0f) && (temppress1 != 0.0f || temppress2 != 0.0f))
 800214a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800214e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002156:	d107      	bne.n	8002168 <CalculateIgnition+0x648>
 8002158:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800215c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002164:	f000 80f4 	beq.w	8002350 <CalculateIgnition+0x830>
 8002168:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800216c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002174:	d107      	bne.n	8002186 <CalculateIgnition+0x666>
 8002176:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800217a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002182:	f000 80e5 	beq.w	8002350 <CalculateIgnition+0x830>
          {

            if(temprpm2 != temprpm1 && temppress1 != temppress2)
 8002186:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800218a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800218e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002196:	d059      	beq.n	800224c <CalculateIgnition+0x72c>
 8002198:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800219c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80021a0:	eeb4 7a67 	vcmp.f32	s14, s15
 80021a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a8:	d050      	beq.n	800224c <CalculateIgnition+0x72c>
            {
              mult_rpm = (rpm - temprpm1) / (temprpm2 - temprpm1);
 80021aa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80021ae:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80021b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021b6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80021ba:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80021be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021c6:	edc7 7a04 	vstr	s15, [r7, #16]
              mult_press = (pressure - temppress1) / (temppress2 - temppress1);
 80021ca:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80021ce:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80021d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021d6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80021da:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80021de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021e6:	edc7 7a03 	vstr	s15, [r7, #12]

              angle_1 = (tempign12 - tempign11) * mult_rpm + tempign11;
 80021ea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80021ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80021f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80021fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002206:	edc7 7a02 	vstr	s15, [r7, #8]
              angle_2 = (tempign22 - tempign21) * mult_rpm + tempign21;
 800220a:	ed97 7a07 	vldr	s14, [r7, #28]
 800220e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002212:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002216:	edd7 7a04 	vldr	s15, [r7, #16]
 800221a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002226:	edc7 7a01 	vstr	s15, [r7, #4]

              angle = (angle_2 - angle_1) * mult_press + angle_1;
 800222a:	ed97 7a01 	vldr	s14, [r7, #4]
 800222e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002232:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002236:	edd7 7a03 	vldr	s15, [r7, #12]
 800223a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002246:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 800224a:	e081      	b.n	8002350 <CalculateIgnition+0x830>
            }
            else if(temprpm2 == temprpm1 && temppress1 != temppress2)
 800224c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002250:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002254:	eeb4 7a67 	vcmp.f32	s14, s15
 8002258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225c:	d12c      	bne.n	80022b8 <CalculateIgnition+0x798>
 800225e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002262:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002266:	eeb4 7a67 	vcmp.f32	s14, s15
 800226a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226e:	d023      	beq.n	80022b8 <CalculateIgnition+0x798>
            {
              mult_press = (pressure - temppress1) / (temppress2 - temppress1);
 8002270:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002274:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002278:	ee77 6a67 	vsub.f32	s13, s14, s15
 800227c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002280:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002284:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800228c:	edc7 7a03 	vstr	s15, [r7, #12]
              mult_rpm = 1.0f;
 8002290:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002294:	613b      	str	r3, [r7, #16]
              angle = (tempign21 - tempign11) * mult_press + tempign11;
 8002296:	ed97 7a08 	vldr	s14, [r7, #32]
 800229a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800229e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80022a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80022ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 80022b6:	e04b      	b.n	8002350 <CalculateIgnition+0x830>
            }
            else if(temprpm2 != temprpm1 && temppress1 == temppress2)
 80022b8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80022bc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80022c0:	eeb4 7a67 	vcmp.f32	s14, s15
 80022c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c8:	d02c      	beq.n	8002324 <CalculateIgnition+0x804>
 80022ca:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80022ce:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80022d2:	eeb4 7a67 	vcmp.f32	s14, s15
 80022d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022da:	d123      	bne.n	8002324 <CalculateIgnition+0x804>
            {
              mult_rpm = (rpm - temprpm1) / (temprpm2 - temprpm1);
 80022dc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80022e0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80022e4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022e8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80022ec:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80022f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f8:	edc7 7a04 	vstr	s15, [r7, #16]
              mult_press = 1.0f;
 80022fc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002300:	60fb      	str	r3, [r7, #12]
              angle = (tempign12 - tempign11) * mult_rpm + tempign11;
 8002302:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002306:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800230a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800230e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002316:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800231a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 8002322:	e015      	b.n	8002350 <CalculateIgnition+0x830>
            }
            else angle = (tempign11 + tempign12 + tempign21 + tempign22) / 4.0f;
 8002324:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002328:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800232c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002330:	edd7 7a08 	vldr	s15, [r7, #32]
 8002334:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002338:	edd7 7a07 	vldr	s15, [r7, #28]
 800233c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002340:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002344:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002348:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 800234c:	e000      	b.n	8002350 <CalculateIgnition+0x830>
        if(table->idles_count == 1)
 800234e:	bf00      	nop

          }
        }
      }

      if(acis_config.params.isTemperatureEnabled && table->temperatures_count > 0)
 8002350:	4b97      	ldr	r3, [pc, #604]	; (80025b0 <CalculateIgnition+0xa90>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 8100 	beq.w	800255a <CalculateIgnition+0xa3a>
 800235a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800235c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8002360:	2b00      	cmp	r3, #0
 8002362:	f340 80fa 	ble.w	800255a <CalculateIgnition+0xa3a>
      {
        if(table->temperatures_count == 1)
 8002366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002368:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800236c:	2b01      	cmp	r3, #1
 800236e:	d10b      	bne.n	8002388 <CalculateIgnition+0x868>
        {
          angle += table->temperature_ignitions[0];
 8002370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002372:	f603 23dc 	addw	r3, r3, #2780	; 0xadc
 8002376:	edd3 7a00 	vldr	s15, [r3]
 800237a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800237e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002382:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 8002386:	e0e8      	b.n	800255a <CalculateIgnition+0xa3a>
        }
        else if(table->temperatures_count >= 2)
 8002388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800238a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800238e:	2b01      	cmp	r3, #1
 8002390:	f340 80e3 	ble.w	800255a <CalculateIgnition+0xa3a>
        {
          if(temperature <= table->temperatures[0])
 8002394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002396:	f603 23ac 	addw	r3, r3, #2732	; 0xaac
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80023a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023aa:	d80b      	bhi.n	80023c4 <CalculateIgnition+0x8a4>
            angle += table->temperature_ignitions[0];
 80023ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ae:	f603 23dc 	addw	r3, r3, #2780	; 0xadc
 80023b2:	edd3 7a00 	vldr	s15, [r3]
 80023b6:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80023ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023be:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 80023c2:	e06c      	b.n	800249e <CalculateIgnition+0x97e>
          else if(temperature >= table->temperatures[table->temperatures_count - 1])
 80023c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80023ca:	3b01      	subs	r3, #1
 80023cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	3304      	adds	r3, #4
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80023e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e8:	db1c      	blt.n	8002424 <CalculateIgnition+0x904>
          {
            tempindex1 = table->temperatures_count-2;
 80023ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ec:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80023f0:	3b02      	subs	r3, #2
 80023f2:	65fb      	str	r3, [r7, #92]	; 0x5c
            tempindex2 = table->temperatures_count-1;
 80023f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80023fa:	3b01      	subs	r3, #1
 80023fc:	65bb      	str	r3, [r7, #88]	; 0x58
            temptemp1 = table->temperatures[tempindex1];
 80023fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002402:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	3304      	adds	r3, #4
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	677b      	str	r3, [r7, #116]	; 0x74
            temptemp2 = table->temperatures[tempindex2];
 8002410:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002412:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002414:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	3304      	adds	r3, #4
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	673b      	str	r3, [r7, #112]	; 0x70
 8002422:	e03c      	b.n	800249e <CalculateIgnition+0x97e>
          }
          else
          {
            for(int i = 1; i < table->temperatures_count; i++)
 8002424:	2301      	movs	r3, #1
 8002426:	647b      	str	r3, [r7, #68]	; 0x44
 8002428:	e033      	b.n	8002492 <CalculateIgnition+0x972>
            {
              temptemp1 = table->temperatures[i-1];
 800242a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800242c:	3b01      	subs	r3, #1
 800242e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002430:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	3304      	adds	r3, #4
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	677b      	str	r3, [r7, #116]	; 0x74
              temptemp2 = table->temperatures[i];
 800243e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002442:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	3304      	adds	r3, #4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	673b      	str	r3, [r7, #112]	; 0x70
              if(temptemp1 < temperature && temptemp2 > temperature)
 8002450:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002454:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002458:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800245c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002460:	d50e      	bpl.n	8002480 <CalculateIgnition+0x960>
 8002462:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002466:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800246a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800246e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002472:	dd05      	ble.n	8002480 <CalculateIgnition+0x960>
              {
                tempindex1 = i-1;
 8002474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002476:	3b01      	subs	r3, #1
 8002478:	65fb      	str	r3, [r7, #92]	; 0x5c
                tempindex2 = i;
 800247a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800247c:	65bb      	str	r3, [r7, #88]	; 0x58
                break;
 800247e:	e00e      	b.n	800249e <CalculateIgnition+0x97e>
              }
              temptemp1 = 0.0f;
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	677b      	str	r3, [r7, #116]	; 0x74
              temptemp2 = 0.0f;
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	673b      	str	r3, [r7, #112]	; 0x70
            for(int i = 1; i < table->temperatures_count; i++)
 800248c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800248e:	3301      	adds	r3, #1
 8002490:	647b      	str	r3, [r7, #68]	; 0x44
 8002492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002494:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8002498:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800249a:	429a      	cmp	r2, r3
 800249c:	dbc5      	blt.n	800242a <CalculateIgnition+0x90a>
            }
          }
          if(temptemp1 != 0.0f || temptemp2 != 0.0f)
 800249e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80024a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024aa:	d106      	bne.n	80024ba <CalculateIgnition+0x99a>
 80024ac:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80024b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b8:	d04f      	beq.n	800255a <CalculateIgnition+0xa3a>
          {
            tempign1 = table->temperature_ignitions[tempindex1];
 80024ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024be:	f203 23b6 	addw	r3, r3, #694	; 0x2b6
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	3304      	adds	r3, #4
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30
            tempign2 = table->temperature_ignitions[tempindex2];
 80024cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024d0:	f203 23b6 	addw	r3, r3, #694	; 0x2b6
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	3304      	adds	r3, #4
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
            if(temptemp1 != temptemp2)
 80024de:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80024e2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80024e6:	eeb4 7a67 	vcmp.f32	s14, s15
 80024ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ee:	d024      	beq.n	800253a <CalculateIgnition+0xa1a>
            {
              mult = (temperature - temptemp1) / (temptemp2 - temptemp1);
 80024f0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80024f4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80024f8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024fc:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002500:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002504:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800250c:	edc7 7a05 	vstr	s15, [r7, #20]
              angle += (tempign2 - tempign1) * mult + tempign1;
 8002510:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002514:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002518:	ee37 7a67 	vsub.f32	s14, s14, s15
 800251c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002520:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002524:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800252c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002534:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 8002538:	e00f      	b.n	800255a <CalculateIgnition+0xa3a>
            }
            else angle += (tempign1 + tempign2) / 2.0f;
 800253a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800253e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002542:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002546:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800254a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800254e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002556:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
          }
        }
      }
    }
    angle += table->octane_corrector;
 800255a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800255c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002560:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002568:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
    if(angle > 90.0f) angle = 90.0f;
 800256c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002570:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80025b4 <CalculateIgnition+0xa94>
 8002574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257c:	dd02      	ble.n	8002584 <CalculateIgnition+0xa64>
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <CalculateIgnition+0xa98>)
 8002580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if(angle < -60.0f) angle = -60.0f;
 8002584:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002588:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80025bc <CalculateIgnition+0xa9c>
 800258c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002594:	d502      	bpl.n	800259c <CalculateIgnition+0xa7c>
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <CalculateIgnition+0xaa0>)
 8002598:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  }
  return angle;
 800259c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025a0:	ee07 3a90 	vmov	s15, r3
}
 80025a4:	eeb0 0a67 	vmov.f32	s0, s15
 80025a8:	3790      	adds	r7, #144	; 0x90
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200214a0 	.word	0x200214a0
 80025b4:	42b40000 	.word	0x42b40000
 80025b8:	42b40000 	.word	0x42b40000
 80025bc:	c2700000 	.word	0xc2700000
 80025c0:	c2700000 	.word	0xc2700000

080025c4 <LearnIgnition>:

static void LearnIgnition(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b0a2      	sub	sp, #136	; 0x88
 80025c8:	af00      	add	r7, sp, #0
  if(!hall_rotates || csps_iserror() || map_iserror())
 80025ca:	4ba0      	ldr	r3, [pc, #640]	; (800284c <LearnIgnition+0x288>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8648 	beq.w	8003266 <LearnIgnition+0xca2>
 80025d6:	f005 fdd7 	bl	8008188 <csps_iserror>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f040 8642 	bne.w	8003266 <LearnIgnition+0xca2>
 80025e2:	f006 fec5 	bl	8009370 <map_iserror>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f040 863c 	bne.w	8003266 <LearnIgnition+0xca2>
    return;

  float rpm = csps_getrpm();
 80025ee:	f005 fd7b 	bl	80080e8 <csps_getrpm>
 80025f2:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
  float angle_needed = hall_angle;
 80025f6:	4b96      	ldr	r3, [pc, #600]	; (8002850 <LearnIgnition+0x28c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	653b      	str	r3, [r7, #80]	; 0x50
  float pressure = map_getpressure();
 80025fc:	f006 feaa 	bl	8009354 <map_getpressure>
 8002600:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
  uint8_t isIdle = HAL_GPIO_ReadPin(SENS_ACC_GPIO_Port, SENS_ACC_Pin) == GPIO_PIN_SET;
 8002604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002608:	4892      	ldr	r0, [pc, #584]	; (8002854 <LearnIgnition+0x290>)
 800260a:	f00a fe41 	bl	800d290 <HAL_GPIO_ReadPin>
 800260e:	4603      	mov	r3, r0
 8002610:	2b01      	cmp	r3, #1
 8002612:	bf0c      	ite	eq
 8002614:	2301      	moveq	r3, #1
 8002616:	2300      	movne	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

  static uint32_t lastRotated = 0x80000000;
  static uint32_t lastAccepted = 0;
  static uint8_t isInitial = 1;
  uint32_t now = Delay_Tick;
 800261e:	4b8e      	ldr	r3, [pc, #568]	; (8002858 <LearnIgnition+0x294>)
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	647b      	str	r3, [r7, #68]	; 0x44
  float angle = 0.0f;
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	643b      	str	r3, [r7, #64]	; 0x40
  float angle_1, angle_2;
  float mult, diff, mult_rpm, mult_press,
      temprpm1 = 0.0f,temprpm2 = 0.0f,
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      temppress1 = 0.0f,temppress2 = 0.0f,
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	67bb      	str	r3, [r7, #120]	; 0x78
      tempign1 = 0.0f, tempign2 = 0.0f,
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	63bb      	str	r3, [r7, #56]	; 0x38
      tempign11 = 0.0f, tempign12 = 0.0f,
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	637b      	str	r3, [r7, #52]	; 0x34
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	633b      	str	r3, [r7, #48]	; 0x30
      tempign21 = 0.0f, tempign22 = 0.0f;
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t rpmindex1 = 0, rpmindex2 = 0,
 800266a:	2300      	movs	r3, #0
 800266c:	677b      	str	r3, [r7, #116]	; 0x74
 800266e:	2300      	movs	r3, #0
 8002670:	673b      	str	r3, [r7, #112]	; 0x70
      pressindex1 = 0, pressindex2 = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002676:	2300      	movs	r3, #0
 8002678:	66bb      	str	r3, [r7, #104]	; 0x68

  sAcisIgnTable * table = NULL;
 800267a:	2300      	movs	r3, #0
 800267c:	667b      	str	r3, [r7, #100]	; 0x64
  int table_num = table_current;
 800267e:	4b77      	ldr	r3, [pc, #476]	; (800285c <LearnIgnition+0x298>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	627b      	str	r3, [r7, #36]	; 0x24

  if(table_num < acis_config.tables_count || table_num < TABLE_SETUPS_MAX)
 8002684:	4b76      	ldr	r3, [pc, #472]	; (8002860 <LearnIgnition+0x29c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268a:	429a      	cmp	r2, r3
 800268c:	db02      	blt.n	8002694 <LearnIgnition+0xd0>
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	2b03      	cmp	r3, #3
 8002692:	dc08      	bgt.n	80026a6 <LearnIgnition+0xe2>
    table = &acis_config.tables[table_num];
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	f640 426c 	movw	r2, #3180	; 0xc6c
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	33c0      	adds	r3, #192	; 0xc0
 80026a0:	4a6f      	ldr	r2, [pc, #444]	; (8002860 <LearnIgnition+0x29c>)
 80026a2:	4413      	add	r3, r2
 80026a4:	667b      	str	r3, [r7, #100]	; 0x64

  if(rpm > 100.0f)
 80026a6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80026aa:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002864 <LearnIgnition+0x2a0>
 80026ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b6:	dd06      	ble.n	80026c6 <LearnIgnition+0x102>
  {
    isInitial = 0;
 80026b8:	4b6b      	ldr	r3, [pc, #428]	; (8002868 <LearnIgnition+0x2a4>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
    lastRotated = now;
 80026be:	4a6b      	ldr	r2, [pc, #428]	; (800286c <LearnIgnition+0x2a8>)
 80026c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	e018      	b.n	80026f8 <LearnIgnition+0x134>
  }
  else if(rpm < 10.0f)
 80026c6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80026ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80026ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d6:	d50f      	bpl.n	80026f8 <LearnIgnition+0x134>
  {
    lastAccepted = now;
 80026d8:	4a65      	ldr	r2, [pc, #404]	; (8002870 <LearnIgnition+0x2ac>)
 80026da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026dc:	6013      	str	r3, [r2, #0]
    if(DelayDiff(now, lastRotated) < INITIAL_TIMEOUT)
 80026de:	4b63      	ldr	r3, [pc, #396]	; (800286c <LearnIgnition+0x2a8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4619      	mov	r1, r3
 80026e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80026e6:	f005 fe1d 	bl	8008324 <DelayDiff>
 80026ea:	4602      	mov	r2, r0
 80026ec:	4b61      	ldr	r3, [pc, #388]	; (8002874 <LearnIgnition+0x2b0>)
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d802      	bhi.n	80026f8 <LearnIgnition+0x134>
    {
      isInitial = 1;
 80026f2:	4b5d      	ldr	r3, [pc, #372]	; (8002868 <LearnIgnition+0x2a4>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
    }
  }

  float timediff = DelayDiff(now, lastAccepted);
 80026f8:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <LearnIgnition+0x2ac>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4619      	mov	r1, r3
 80026fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002700:	f005 fe10 	bl	8008324 <DelayDiff>
 8002704:	ee07 0a90 	vmov	s15, r0
 8002708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800270c:	edc7 7a08 	vstr	s15, [r7, #32]
  if(timediff < 10000)
 8002710:	edd7 7a08 	vldr	s15, [r7, #32]
 8002714:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002878 <LearnIgnition+0x2b4>
 8002718:	eef4 7ac7 	vcmpe.f32	s15, s14
 800271c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002720:	f100 85a3 	bmi.w	800326a <LearnIgnition+0xca6>
    return;

  float accept_coff = timediff / 10000000.0f;
 8002724:	ed97 7a08 	vldr	s14, [r7, #32]
 8002728:	eddf 6a54 	vldr	s13, [pc, #336]	; 800287c <LearnIgnition+0x2b8>
 800272c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002730:	edc7 7a07 	vstr	s15, [r7, #28]
  float accept_coff_inv = 1.0f - accept_coff;
 8002734:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002738:	edd7 7a07 	vldr	s15, [r7, #28]
 800273c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002740:	edc7 7a06 	vstr	s15, [r7, #24]
  lastAccepted = now;
 8002744:	4a4a      	ldr	r2, [pc, #296]	; (8002870 <LearnIgnition+0x2ac>)
 8002746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002748:	6013      	str	r3, [r2, #0]

  if(table)
 800274a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 858f 	beq.w	8003270 <LearnIgnition+0xcac>
  {
    if(!isInitial)
 8002752:	4b45      	ldr	r3, [pc, #276]	; (8002868 <LearnIgnition+0x2a4>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 858a 	bne.w	8003270 <LearnIgnition+0xcac>
    {
      if(isIdle && table->idles_count > 0)
 800275c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8145 	beq.w	80029f0 <LearnIgnition+0x42c>
 8002766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	2b00      	cmp	r3, #0
 800276c:	f340 8140 	ble.w	80029f0 <LearnIgnition+0x42c>
      {
        if(table->idles_count == 1)
 8002770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d104      	bne.n	8002782 <LearnIgnition+0x1be>
          angle = table->idle_ignitions[0];
 8002778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	643b      	str	r3, [r7, #64]	; 0x40
        if(table->idles_count == 1)
 800277e:	f000 bd76 	b.w	800326e <LearnIgnition+0xcaa>
        else
        {
          if(rpm <= table->idle_rotates[0])
 8002782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002784:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002788:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800278c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002794:	d803      	bhi.n	800279e <LearnIgnition+0x1da>
          {
            angle = table->idle_ignitions[0];
 8002796:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	643b      	str	r3, [r7, #64]	; 0x40
 800279c:	e080      	b.n	80028a0 <LearnIgnition+0x2dc>
          }
          else if(rpm >= table->idle_rotates[table->rotates_count-1])
 800279e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027a0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80027a4:	3b01      	subs	r3, #1
 80027a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027a8:	3320      	adds	r3, #32
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	edd3 7a00 	vldr	s15, [r3]
 80027b2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80027b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027be:	db18      	blt.n	80027f2 <LearnIgnition+0x22e>
          {
            rpmindex1 = table->idles_count-2;
 80027c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	3b02      	subs	r3, #2
 80027c6:	677b      	str	r3, [r7, #116]	; 0x74
            rpmindex2 = table->idles_count-1;
 80027c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	673b      	str	r3, [r7, #112]	; 0x70
            temprpm1 = table->idle_rotates[rpmindex1];
 80027d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d4:	3320      	adds	r3, #32
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            temprpm2 = table->idle_rotates[rpmindex2];
 80027e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027e4:	3320      	adds	r3, #32
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027f0:	e056      	b.n	80028a0 <LearnIgnition+0x2dc>
          }
          else
          {
            for(int i = 1; i < table->idles_count; i++)
 80027f2:	2301      	movs	r3, #1
 80027f4:	663b      	str	r3, [r7, #96]	; 0x60
 80027f6:	e04e      	b.n	8002896 <LearnIgnition+0x2d2>
            {
              temprpm1 = table->idle_rotates[i-1];
 80027f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027fa:	3b01      	subs	r3, #1
 80027fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027fe:	3320      	adds	r3, #32
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              temprpm2 = table->idle_rotates[i];
 800280a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800280c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800280e:	3320      	adds	r3, #32
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
              if(temprpm1 < rpm && temprpm2 > rpm)
 800281a:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800281e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002822:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282a:	d529      	bpl.n	8002880 <LearnIgnition+0x2bc>
 800282c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002830:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002834:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283c:	dd20      	ble.n	8002880 <LearnIgnition+0x2bc>
              {
                rpmindex1 = i-1;
 800283e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002840:	3b01      	subs	r3, #1
 8002842:	677b      	str	r3, [r7, #116]	; 0x74
                rpmindex2 = i;
 8002844:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002846:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 8002848:	e02a      	b.n	80028a0 <LearnIgnition+0x2dc>
 800284a:	bf00      	nop
 800284c:	20011924 	.word	0x20011924
 8002850:	2001191c 	.word	0x2001191c
 8002854:	40020800 	.word	0x40020800
 8002858:	40000c00 	.word	0x40000c00
 800285c:	20011934 	.word	0x20011934
 8002860:	200214a0 	.word	0x200214a0
 8002864:	42c80000 	.word	0x42c80000
 8002868:	200104ac 	.word	0x200104ac
 800286c:	200104b0 	.word	0x200104b0
 8002870:	20021104 	.word	0x20021104
 8002874:	0001869f 	.word	0x0001869f
 8002878:	461c4000 	.word	0x461c4000
 800287c:	4b189680 	.word	0x4b189680
              }
              temprpm1 = 0.0f;
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              temprpm2 = 0.0f;
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for(int i = 1; i < table->idles_count; i++)
 8002890:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002892:	3301      	adds	r3, #1
 8002894:	663b      	str	r3, [r7, #96]	; 0x60
 8002896:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800289c:	429a      	cmp	r2, r3
 800289e:	dbab      	blt.n	80027f8 <LearnIgnition+0x234>
            }
          }
          if(temprpm1 != 0.0f || temprpm2 != 0.0f)
 80028a0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80028a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ac:	d107      	bne.n	80028be <LearnIgnition+0x2fa>
 80028ae:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80028b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ba:	f000 84d8 	beq.w	800326e <LearnIgnition+0xcaa>
          {
            tempign1 = table->idle_ignitions[rpmindex1];
 80028be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80028c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c2:	3308      	adds	r3, #8
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c
            tempign2 = table->idle_ignitions[rpmindex2];
 80028cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80028ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028d0:	3308      	adds	r3, #8
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	63bb      	str	r3, [r7, #56]	; 0x38
            if(tempign1 != tempign2)
 80028da:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80028de:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80028e2:	eeb4 7a67 	vcmp.f32	s14, s15
 80028e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ea:	d05f      	beq.n	80029ac <LearnIgnition+0x3e8>
            {
              mult = (rpm - temprpm1) / (temprpm2 - temprpm1);
 80028ec:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80028f0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80028f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028f8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80028fc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002900:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002908:	edc7 7a05 	vstr	s15, [r7, #20]
              angle = (tempign2 - tempign1) * mult + tempign1;
 800290c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002910:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002914:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002918:	edd7 7a05 	vldr	s15, [r7, #20]
 800291c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002920:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 800292c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002930:	edd7 7a06 	vldr	s15, [r7, #24]
 8002934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002938:	edd7 6a07 	vldr	s13, [r7, #28]
 800293c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002948:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
              diff = angle_needed - angle;
 800294c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002950:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002958:	edc7 7a04 	vstr	s15, [r7, #16]

              table->idle_ignitions[rpmindex1] = tempign1 + diff * (1.0f - mult);
 800295c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002960:	edd7 7a05 	vldr	s15, [r7, #20]
 8002964:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002968:	edd7 7a04 	vldr	s15, [r7, #16]
 800296c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002970:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002978:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800297a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800297c:	3308      	adds	r3, #8
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	edc3 7a00 	vstr	s15, [r3]
              table->idle_ignitions[rpmindex2] = tempign2 + diff * mult;
 8002986:	ed97 7a04 	vldr	s14, [r7, #16]
 800298a:	edd7 7a05 	vldr	s15, [r7, #20]
 800298e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002992:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800299a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800299c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800299e:	3308      	adds	r3, #8
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	edc3 7a00 	vstr	s15, [r3]
        if(table->idles_count == 1)
 80029a8:	f000 bc61 	b.w	800326e <LearnIgnition+0xcaa>
            }
            else
            {
              angle = tempign1;
 80029ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ae:	643b      	str	r3, [r7, #64]	; 0x40
              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 80029b0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80029b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80029b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80029c0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80029c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029cc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

              table->idle_ignitions[rpmindex1] = angle_needed;
 80029d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80029d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029d4:	3308      	adds	r3, #8
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80029dc:	601a      	str	r2, [r3, #0]
              table->idle_ignitions[rpmindex2] = angle_needed;
 80029de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80029e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029e2:	3308      	adds	r3, #8
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80029ea:	601a      	str	r2, [r3, #0]
        if(table->idles_count == 1)
 80029ec:	f000 bc3f 	b.w	800326e <LearnIgnition+0xcaa>

        }
      }
      else
      {
        if(table->pressures_count != 0 && table->rotates_count != 0)
 80029f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 843a 	beq.w	8003270 <LearnIgnition+0xcac>
 80029fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029fe:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 8434 	beq.w	8003270 <LearnIgnition+0xcac>
        {
          if(table->pressures_count == 1)
 8002a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d10c      	bne.n	8002a2c <LearnIgnition+0x468>
          {
            pressindex1 = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	66fb      	str	r3, [r7, #108]	; 0x6c
            pressindex2 = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	66bb      	str	r3, [r7, #104]	; 0x68
            temppress1 = table->pressures[0];
 8002a1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002a20:	67fb      	str	r3, [r7, #124]	; 0x7c
            temppress2 = table->pressures[0];
 8002a22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002a28:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a2a:	e086      	b.n	8002b3a <LearnIgnition+0x576>
          }
          else if(pressure <= table->pressures[0])
 8002a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a2e:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8002a32:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3e:	d814      	bhi.n	8002a6a <LearnIgnition+0x4a6>
          {
            pressindex1 = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	66fb      	str	r3, [r7, #108]	; 0x6c
            pressindex2 = 1;
 8002a44:	2301      	movs	r3, #1
 8002a46:	66bb      	str	r3, [r7, #104]	; 0x68
            temppress1 = table->pressures[pressindex1];
 8002a48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4c:	3338      	adds	r3, #56	; 0x38
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	3304      	adds	r3, #4
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	67fb      	str	r3, [r7, #124]	; 0x7c
            temppress2 = table->pressures[pressindex2];
 8002a58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a5c:	3338      	adds	r3, #56	; 0x38
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	3304      	adds	r3, #4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a68:	e067      	b.n	8002b3a <LearnIgnition+0x576>
          }
          else if(pressure >= table->pressures[table->pressures_count - 1])
 8002a6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a70:	3b01      	subs	r3, #1
 8002a72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a74:	3338      	adds	r3, #56	; 0x38
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	edd3 7a00 	vldr	s15, [r3]
 8002a80:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002a84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8c:	db1a      	blt.n	8002ac4 <LearnIgnition+0x500>
          {
            pressindex1 = table->pressures_count - 2;
 8002a8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a94:	3b02      	subs	r3, #2
 8002a96:	66fb      	str	r3, [r7, #108]	; 0x6c
            pressindex2 = table->pressures_count - 1;
 8002a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	66bb      	str	r3, [r7, #104]	; 0x68
            temppress1 = table->pressures[pressindex1];
 8002aa2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa6:	3338      	adds	r3, #56	; 0x38
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	3304      	adds	r3, #4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	67fb      	str	r3, [r7, #124]	; 0x7c
            temppress2 = table->pressures[pressindex2];
 8002ab2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ab6:	3338      	adds	r3, #56	; 0x38
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	3304      	adds	r3, #4
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ac2:	e03a      	b.n	8002b3a <LearnIgnition+0x576>
          }
          else
          {
            for(int i = 1; i < table->pressures_count; i++)
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ac8:	e031      	b.n	8002b2e <LearnIgnition+0x56a>
            {
              temppress1 = table->pressures[i-1];
 8002aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002acc:	3b01      	subs	r3, #1
 8002ace:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ad0:	3338      	adds	r3, #56	; 0x38
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	67fb      	str	r3, [r7, #124]	; 0x7c
              temppress2 = table->pressures[i];
 8002adc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae0:	3338      	adds	r3, #56	; 0x38
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	67bb      	str	r3, [r7, #120]	; 0x78
              if(temppress1 < pressure && temppress2 > pressure)
 8002aec:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002af0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002af4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afc:	d50e      	bpl.n	8002b1c <LearnIgnition+0x558>
 8002afe:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002b02:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002b06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0e:	dd05      	ble.n	8002b1c <LearnIgnition+0x558>
              {
                pressindex1 = i-1;
 8002b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b12:	3b01      	subs	r3, #1
 8002b14:	66fb      	str	r3, [r7, #108]	; 0x6c
                pressindex2 = i;
 8002b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b18:	66bb      	str	r3, [r7, #104]	; 0x68
                break;
 8002b1a:	e00e      	b.n	8002b3a <LearnIgnition+0x576>
              }
              temppress1 = 0.0f;
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	67fb      	str	r3, [r7, #124]	; 0x7c
              temppress2 = 0.0f;
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	67bb      	str	r3, [r7, #120]	; 0x78
            for(int i = 1; i < table->pressures_count; i++)
 8002b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b36:	429a      	cmp	r2, r3
 8002b38:	dbc7      	blt.n	8002aca <LearnIgnition+0x506>
            }
          }

          if(table->rotates_count == 1)
 8002b3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b3c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d10e      	bne.n	8002b62 <LearnIgnition+0x59e>
          {
            rpmindex1 = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	677b      	str	r3, [r7, #116]	; 0x74
            rpmindex2 = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	673b      	str	r3, [r7, #112]	; 0x70
            temprpm1 = table->rotates[0];
 8002b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b4e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002b52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            temprpm2 = table->rotates[0];
 8002b56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b58:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002b5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b60:	e087      	b.n	8002c72 <LearnIgnition+0x6ae>
          }
          else if(rpm <= table->rotates[0])
 8002b62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b64:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8002b68:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002b6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b74:	d814      	bhi.n	8002ba0 <LearnIgnition+0x5dc>
          {
            rpmindex1 = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	677b      	str	r3, [r7, #116]	; 0x74
            rpmindex2 = 1;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	673b      	str	r3, [r7, #112]	; 0x70
            temprpm1 = table->rotates[rpmindex1];
 8002b7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b82:	3352      	adds	r3, #82	; 0x52
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            temprpm2 = table->rotates[rpmindex2];
 8002b8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b92:	3352      	adds	r3, #82	; 0x52
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b9e:	e068      	b.n	8002c72 <LearnIgnition+0x6ae>
          }
          else if(rpm >= table->rotates[table->rotates_count - 1])
 8002ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ba2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002baa:	3352      	adds	r3, #82	; 0x52
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	edd3 7a00 	vldr	s15, [r3]
 8002bb4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002bb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc0:	db1a      	blt.n	8002bf8 <LearnIgnition+0x634>
          {
            rpmindex1 = table->rotates_count - 2;
 8002bc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bc4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002bc8:	3b02      	subs	r3, #2
 8002bca:	677b      	str	r3, [r7, #116]	; 0x74
            rpmindex2 = table->rotates_count - 1;
 8002bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bce:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	673b      	str	r3, [r7, #112]	; 0x70
            temprpm1 = table->rotates[rpmindex1];
 8002bd6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bda:	3352      	adds	r3, #82	; 0x52
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            temprpm2 = table->rotates[rpmindex2];
 8002be6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bea:	3352      	adds	r3, #82	; 0x52
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bf6:	e03c      	b.n	8002c72 <LearnIgnition+0x6ae>
          }
          else
          {
            for(int i = 1; i < table->rotates_count; i++)
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bfc:	e033      	b.n	8002c66 <LearnIgnition+0x6a2>
            {
              temprpm1 = table->rotates[i-1];
 8002bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c00:	3b01      	subs	r3, #1
 8002c02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c04:	3352      	adds	r3, #82	; 0x52
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              temprpm2 = table->rotates[i];
 8002c10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c14:	3352      	adds	r3, #82	; 0x52
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
              if(temprpm1 < rpm && temprpm2 > rpm)
 8002c20:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002c24:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002c28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c30:	d50e      	bpl.n	8002c50 <LearnIgnition+0x68c>
 8002c32:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002c36:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002c3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c42:	dd05      	ble.n	8002c50 <LearnIgnition+0x68c>
              {
                rpmindex1 = i-1;
 8002c44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c46:	3b01      	subs	r3, #1
 8002c48:	677b      	str	r3, [r7, #116]	; 0x74
                rpmindex2 = i;
 8002c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c4c:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 8002c4e:	e010      	b.n	8002c72 <LearnIgnition+0x6ae>
              }
              temprpm1 = 0.0f;
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              temprpm2 = 0.0f;
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for(int i = 1; i < table->rotates_count; i++)
 8002c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c62:	3301      	adds	r3, #1
 8002c64:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c68:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002c6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	dbc5      	blt.n	8002bfe <LearnIgnition+0x63a>
            }
          }

          if((temprpm1 != 0.0f || temprpm2 != 0.0f) && (temppress1 != 0.0f || temppress2 != 0.0f))
 8002c72:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002c76:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7e:	d107      	bne.n	8002c90 <LearnIgnition+0x6cc>
 8002c80:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002c84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8c:	f000 82f0 	beq.w	8003270 <LearnIgnition+0xcac>
 8002c90:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002c94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9c:	d107      	bne.n	8002cae <LearnIgnition+0x6ea>
 8002c9e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002ca2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002caa:	f000 82e1 	beq.w	8003270 <LearnIgnition+0xcac>
          {
            tempign11 = table->ignitions[pressindex1][rpmindex1];
 8002cae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002cb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002cbc:	4413      	add	r3, r2
 8002cbe:	336a      	adds	r3, #106	; 0x6a
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	637b      	str	r3, [r7, #52]	; 0x34
            tempign12 = table->ignitions[pressindex1][rpmindex2];
 8002cc8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002cca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ccc:	4613      	mov	r3, r2
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002cd6:	4413      	add	r3, r2
 8002cd8:	336a      	adds	r3, #106	; 0x6a
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	633b      	str	r3, [r7, #48]	; 0x30
            tempign21 = table->ignitions[pressindex2][rpmindex1];
 8002ce2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002ce4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002cf0:	4413      	add	r3, r2
 8002cf2:	336a      	adds	r3, #106	; 0x6a
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
            tempign22 = table->ignitions[pressindex2][rpmindex2];
 8002cfc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002cfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d00:	4613      	mov	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002d0a:	4413      	add	r3, r2
 8002d0c:	336a      	adds	r3, #106	; 0x6a
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	62bb      	str	r3, [r7, #40]	; 0x28

            if(temprpm2 != temprpm1 && temppress1 != temppress2)
 8002d16:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002d1a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002d1e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d26:	f000 80ef 	beq.w	8002f08 <LearnIgnition+0x944>
 8002d2a:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002d2e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002d32:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3a:	f000 80e5 	beq.w	8002f08 <LearnIgnition+0x944>
            {
              mult_rpm = (rpm - temprpm1) / (temprpm2 - temprpm1);
 8002d3e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002d42:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002d46:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002d4a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002d4e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002d52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d5a:	edc7 7a03 	vstr	s15, [r7, #12]
              mult_press = (pressure - temppress1) / (temppress2 - temppress1);
 8002d5e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002d62:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002d66:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002d6a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002d6e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d7a:	edc7 7a02 	vstr	s15, [r7, #8]

              angle_1 = (tempign12 - tempign11) * mult_rpm + tempign11;
 8002d7e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002d82:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002d86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d92:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9a:	edc7 7a01 	vstr	s15, [r7, #4]
              angle_2 = (tempign22 - tempign21) * mult_rpm + tempign21;
 8002d9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002da2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002da6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002daa:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dba:	edc7 7a00 	vstr	s15, [r7]

              angle = (angle_2 - angle_1) * mult_press + angle_1;
 8002dbe:	ed97 7a00 	vldr	s14, [r7]
 8002dc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dca:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd2:	ed97 7a01 	vldr	s14, [r7, #4]
 8002dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dda:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 8002dde:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002de2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002de6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8002dee:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dfa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
              diff = angle_needed - angle;
 8002dfe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002e02:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e0a:	edc7 7a04 	vstr	s15, [r7, #16]

              table->ignitions[pressindex1][rpmindex1] = tempign11 + diff * (1.0f - mult_rpm) * (1.0f - mult_press);
 8002e0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e12:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e26:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e2a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e32:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002e3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e3e:	4613      	mov	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002e48:	4413      	add	r3, r2
 8002e4a:	336a      	adds	r3, #106	; 0x6a
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex1][rpmindex2] = tempign12 + diff * mult_rpm * (1.0f - mult_press);
 8002e54:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e58:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e64:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e68:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e70:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e78:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002e7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002e86:	4413      	add	r3, r2
 8002e88:	336a      	adds	r3, #106	; 0x6a
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex1] = tempign21 + diff * (1.0f - mult_rpm) * mult_press;
 8002e92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e96:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ea2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ea6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002eb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002eba:	4613      	mov	r3, r2
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	4413      	add	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ec4:	4413      	add	r3, r2
 8002ec6:	336a      	adds	r3, #106	; 0x6a
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex2] = tempign22 + diff * mult_rpm * mult_press;
 8002ed0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ed4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002edc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ee0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ee4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002eee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4413      	add	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002efa:	4413      	add	r3, r2
 8002efc:	336a      	adds	r3, #106	; 0x6a
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	edc3 7a00 	vstr	s15, [r3]
 8002f06:	e1b3      	b.n	8003270 <LearnIgnition+0xcac>

            }
            else if(temprpm2 == temprpm1 && temppress1 != temppress2)
 8002f08:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002f0c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002f10:	eeb4 7a67 	vcmp.f32	s14, s15
 8002f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f18:	f040 80aa 	bne.w	8003070 <LearnIgnition+0xaac>
 8002f1c:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002f20:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002f24:	eeb4 7a67 	vcmp.f32	s14, s15
 8002f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2c:	f000 80a0 	beq.w	8003070 <LearnIgnition+0xaac>
            {
              mult_press = (pressure - temppress1) / (temppress2 - temppress1);
 8002f30:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002f34:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002f38:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002f3c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002f40:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002f44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f4c:	edc7 7a02 	vstr	s15, [r7, #8]
              mult_rpm = 1.0f;
 8002f50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002f54:	60fb      	str	r3, [r7, #12]
              angle = (tempign21 - tempign11) * mult_press + tempign11;
 8002f56:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002f5a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f62:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f6a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f72:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 8002f76:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002f7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f82:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f86:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f92:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
              diff = angle_needed - angle;
 8002f96:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002f9a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fa2:	edc7 7a04 	vstr	s15, [r7, #16]

              table->ignitions[pressindex1][rpmindex1] = tempign11 + diff * (1.0f - mult_press);
 8002fa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002faa:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002fc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002fd0:	4413      	add	r3, r2
 8002fd2:	336a      	adds	r3, #106	; 0x6a
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex1][rpmindex2] = tempign12 + diff * (1.0f - mult_press);
 8002fdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fe0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fe4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fe8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ff0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002ffa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003006:	4413      	add	r3, r2
 8003008:	336a      	adds	r3, #106	; 0x6a
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex1] = tempign21 + diff * mult_press;
 8003012:	ed97 7a04 	vldr	s14, [r7, #16]
 8003016:	edd7 7a02 	vldr	s15, [r7, #8]
 800301a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800301e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003026:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003028:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800302a:	4613      	mov	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003034:	4413      	add	r3, r2
 8003036:	336a      	adds	r3, #106	; 0x6a
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex2] = tempign22 + diff * mult_press;
 8003040:	ed97 7a04 	vldr	s14, [r7, #16]
 8003044:	edd7 7a02 	vldr	s15, [r7, #8]
 8003048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800304c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003054:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003056:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003058:	4613      	mov	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003062:	4413      	add	r3, r2
 8003064:	336a      	adds	r3, #106	; 0x6a
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	edc3 7a00 	vstr	s15, [r3]
 800306e:	e0ff      	b.n	8003270 <LearnIgnition+0xcac>
            }
            else if(temprpm2 != temprpm1 && temppress1 == temppress2)
 8003070:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003074:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003078:	eeb4 7a67 	vcmp.f32	s14, s15
 800307c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003080:	f000 80aa 	beq.w	80031d8 <LearnIgnition+0xc14>
 8003084:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8003088:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800308c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003094:	f040 80a0 	bne.w	80031d8 <LearnIgnition+0xc14>
            {
              mult_rpm = (rpm - temprpm1) / (temprpm2 - temprpm1);
 8003098:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800309c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80030a0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80030a4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80030a8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80030ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030b4:	edc7 7a03 	vstr	s15, [r7, #12]
              mult_press = 1.0f;
 80030b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80030bc:	60bb      	str	r3, [r7, #8]
              angle = (tempign12 - tempign11) * mult_rpm + tempign11;
 80030be:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80030c2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80030c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80030ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80030d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030da:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 80030de:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80030e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80030e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80030ee:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80030f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
              diff = angle_needed - angle;
 80030fe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003102:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310a:	edc7 7a04 	vstr	s15, [r7, #16]

              table->ignitions[pressindex1][rpmindex1] = tempign11 + diff * (1.0f - mult_rpm);
 800310e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003112:	edd7 7a03 	vldr	s15, [r7, #12]
 8003116:	ee37 7a67 	vsub.f32	s14, s14, s15
 800311a:	edd7 7a04 	vldr	s15, [r7, #16]
 800311e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003122:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800312c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003138:	4413      	add	r3, r2
 800313a:	336a      	adds	r3, #106	; 0x6a
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex1][rpmindex2] = tempign12 + diff * mult_rpm;
 8003144:	ed97 7a04 	vldr	s14, [r7, #16]
 8003148:	edd7 7a03 	vldr	s15, [r7, #12]
 800314c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003150:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003158:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800315a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800315c:	4613      	mov	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4413      	add	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003166:	4413      	add	r3, r2
 8003168:	336a      	adds	r3, #106	; 0x6a
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex1] = tempign21 + diff * (1.0f - mult_rpm);
 8003172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003176:	edd7 7a03 	vldr	s15, [r7, #12]
 800317a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800317e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003186:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800318a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003190:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800319c:	4413      	add	r3, r2
 800319e:	336a      	adds	r3, #106	; 0x6a
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex2] = tempign22 + diff * mult_rpm;
 80031a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80031ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80031b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80031b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031bc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80031be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80031c0:	4613      	mov	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80031ca:	4413      	add	r3, r2
 80031cc:	336a      	adds	r3, #106	; 0x6a
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	edc3 7a00 	vstr	s15, [r3]
 80031d6:	e04b      	b.n	8003270 <LearnIgnition+0xcac>
            }
            else
            {
              angle = tempign11;
 80031d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031da:	643b      	str	r3, [r7, #64]	; 0x40
              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 80031dc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80031e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80031e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80031ec:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80031f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

              table->ignitions[pressindex1][rpmindex1] = angle_needed;
 80031fc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80031fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003200:	4613      	mov	r3, r2
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4413      	add	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800320a:	4413      	add	r3, r2
 800320c:	336a      	adds	r3, #106	; 0x6a
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003214:	601a      	str	r2, [r3, #0]
              table->ignitions[pressindex1][rpmindex2] = angle_needed;
 8003216:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003218:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003224:	4413      	add	r3, r2
 8003226:	336a      	adds	r3, #106	; 0x6a
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800322e:	601a      	str	r2, [r3, #0]
              table->ignitions[pressindex2][rpmindex1] = angle_needed;
 8003230:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003232:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800323e:	4413      	add	r3, r2
 8003240:	336a      	adds	r3, #106	; 0x6a
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003248:	601a      	str	r2, [r3, #0]
              table->ignitions[pressindex2][rpmindex2] = angle_needed;
 800324a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800324c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800324e:	4613      	mov	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003258:	4413      	add	r3, r2
 800325a:	336a      	adds	r3, #106	; 0x6a
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	e004      	b.n	8003270 <LearnIgnition+0xcac>
    return;
 8003266:	bf00      	nop
 8003268:	e002      	b.n	8003270 <LearnIgnition+0xcac>
    return;
 800326a:	bf00      	nop
 800326c:	e000      	b.n	8003270 <LearnIgnition+0xcac>
        if(table->idles_count == 1)
 800326e:	bf00      	nop
          }
        }
      }
    }
  }
}
 8003270:	3788      	adds	r7, #136	; 0x88
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop

08003278 <acis_loop_irq>:

inline void acis_loop_irq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b090      	sub	sp, #64	; 0x40
 800327c:	af00      	add	r7, sp, #0
  static uint8_t saturated[2] = { 1,1 };
  static uint8_t ignited[2] = { 1,1 };
  static uint8_t start_ign_state[2] = {0,0};
  static uint8_t start_ign_allow[2] = {0,0};
  static uint32_t start_ign_last[2] = {0,0};
  uint32_t now = Delay_Tick;
 800327e:	4b90      	ldr	r3, [pc, #576]	; (80034c0 <acis_loop_irq+0x248>)
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	637b      	str	r3, [r7, #52]	; 0x34
  float angle[2] = { 0.0f, 0.0f };
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
  float anglesbeforeignite[2];
  uint8_t isIgn = HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_RESET;
 8003290:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003294:	488b      	ldr	r0, [pc, #556]	; (80034c4 <acis_loop_irq+0x24c>)
 8003296:	f009 fffb 	bl	800d290 <HAL_GPIO_ReadPin>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	bf0c      	ite	eq
 80032a0:	2301      	moveq	r3, #1
 80032a2:	2300      	movne	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  angle[0] = csps_getangle14();
 80032aa:	f004 fe27 	bl	8007efc <csps_getangle14>
 80032ae:	eef0 7a40 	vmov.f32	s15, s0
 80032b2:	edc7 7a03 	vstr	s15, [r7, #12]
  angle[1] = csps_getangle23from14(angle[0]);
 80032b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80032ba:	eeb0 0a67 	vmov.f32	s0, s15
 80032be:	f004 fedf 	bl	8008080 <csps_getangle23from14>
 80032c2:	eef0 7a40 	vmov.f32	s15, s0
 80032c6:	edc7 7a04 	vstr	s15, [r7, #16]

  const float angle_koff = 0.001f;
 80032ca:	4b7f      	ldr	r3, [pc, #508]	; (80034c8 <acis_loop_irq+0x250>)
 80032cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  const float angle_koff_inv = 1.0f - angle_koff;
 80032ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032d2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80032d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032da:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  if(!isIgn)
 80032de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 827c 	beq.w	80037e0 <acis_loop_irq+0x568>
    return;

  if(acis_config.params.isEconOutAsStrobe)
 80032e8:	4b78      	ldr	r3, [pc, #480]	; (80034cc <acis_loop_irq+0x254>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d021      	beq.n	8003334 <acis_loop_irq+0xbc>
  {
    if(csps_isrotates() && angle[0] > -0.2f && angle[0] < 1.5f)
 80032f0:	f004 ff32 	bl	8008158 <csps_isrotates>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d017      	beq.n	800332a <acis_loop_irq+0xb2>
 80032fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80032fe:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80034d0 <acis_loop_irq+0x258>
 8003302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330a:	dd0e      	ble.n	800332a <acis_loop_irq+0xb2>
 800330c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003310:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331c:	d505      	bpl.n	800332a <acis_loop_irq+0xb2>
    {
      HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_SET);
 800331e:	2201      	movs	r2, #1
 8003320:	2104      	movs	r1, #4
 8003322:	486c      	ldr	r0, [pc, #432]	; (80034d4 <acis_loop_irq+0x25c>)
 8003324:	f009 ffcc 	bl	800d2c0 <HAL_GPIO_WritePin>
 8003328:	e004      	b.n	8003334 <acis_loop_irq+0xbc>
    }
    else
    {
      HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_RESET);
 800332a:	2200      	movs	r2, #0
 800332c:	2104      	movs	r1, #4
 800332e:	4869      	ldr	r0, [pc, #420]	; (80034d4 <acis_loop_irq+0x25c>)
 8003330:	f009 ffc6 	bl	800d2c0 <HAL_GPIO_WritePin>
    }
  }

  if(acis_config.params.isIgnitionByHall)
 8003334:	4b65      	ldr	r3, [pc, #404]	; (80034cc <acis_loop_irq+0x254>)
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	f040 8253 	bne.w	80037e4 <acis_loop_irq+0x56c>
    return;

  float rpm = csps_getrpm();
 800333e:	f004 fed3 	bl	80080e8 <csps_getrpm>
 8003342:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  float uspa = csps_getuspa();
 8003346:	f004 feeb 	bl	8008120 <csps_getuspa>
 800334a:	ed87 0a08 	vstr	s0, [r7, #32]
  float period = csps_getperiod();
 800334e:	f004 fef5 	bl	800813c <csps_getperiod>
 8003352:	ed87 0a07 	vstr	s0, [r7, #28]
  float time_sat = IGN_SATURATION;
 8003356:	4b60      	ldr	r3, [pc, #384]	; (80034d8 <acis_loop_irq+0x260>)
 8003358:	63fb      	str	r3, [r7, #60]	; 0x3c

  if(rpm < 400) time_sat = 7000;
 800335a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800335e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80034dc <acis_loop_irq+0x264>
 8003362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336a:	d502      	bpl.n	8003372 <acis_loop_irq+0xfa>
 800336c:	4b5c      	ldr	r3, [pc, #368]	; (80034e0 <acis_loop_irq+0x268>)
 800336e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003370:	e02e      	b.n	80033d0 <acis_loop_irq+0x158>
  else if(rpm < 700) time_sat = 6000;
 8003372:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003376:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80034e4 <acis_loop_irq+0x26c>
 800337a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800337e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003382:	d502      	bpl.n	800338a <acis_loop_irq+0x112>
 8003384:	4b58      	ldr	r3, [pc, #352]	; (80034e8 <acis_loop_irq+0x270>)
 8003386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003388:	e022      	b.n	80033d0 <acis_loop_irq+0x158>
  else if(rpm < 1000) time_sat = 5000;
 800338a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800338e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80034ec <acis_loop_irq+0x274>
 8003392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339a:	d502      	bpl.n	80033a2 <acis_loop_irq+0x12a>
 800339c:	4b54      	ldr	r3, [pc, #336]	; (80034f0 <acis_loop_irq+0x278>)
 800339e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a0:	e016      	b.n	80033d0 <acis_loop_irq+0x158>
  else if(rpm < 1300) time_sat = 4000;
 80033a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80033a6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80034f4 <acis_loop_irq+0x27c>
 80033aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b2:	d502      	bpl.n	80033ba <acis_loop_irq+0x142>
 80033b4:	4b50      	ldr	r3, [pc, #320]	; (80034f8 <acis_loop_irq+0x280>)
 80033b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033b8:	e00a      	b.n	80033d0 <acis_loop_irq+0x158>
  else if(rpm < 1500) time_sat = 3000;
 80033ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80033be:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80034fc <acis_loop_irq+0x284>
 80033c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ca:	d501      	bpl.n	80033d0 <acis_loop_irq+0x158>
 80033cc:	4b4c      	ldr	r3, [pc, #304]	; (8003500 <acis_loop_irq+0x288>)
 80033ce:	63fb      	str	r3, [r7, #60]	; 0x3c

  float found = csps_isfound();
 80033d0:	f004 fece 	bl	8008170 <csps_isfound>
 80033d4:	4603      	mov	r3, r0
 80033d6:	ee07 3a90 	vmov	s15, r3
 80033da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033de:	edc7 7a06 	vstr	s15, [r7, #24]


  if(found)
 80033e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80033e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	f000 81f2 	beq.w	80037d6 <acis_loop_irq+0x55e>
  {
    if(period < IGN_SATURATION + IGN_PULSE)
 80033f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80033f6:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003504 <acis_loop_irq+0x28c>
 80033fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003402:	d507      	bpl.n	8003414 <acis_loop_irq+0x19c>
    {
      time_sat = period * ((float)IGN_SATURATION / (float)(IGN_SATURATION + IGN_PULSE));
 8003404:	edd7 7a07 	vldr	s15, [r7, #28]
 8003408:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003508 <acis_loop_irq+0x290>
 800340c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003410:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }

    float saturate = time_sat / uspa;
 8003414:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003418:	ed97 7a08 	vldr	s14, [r7, #32]
 800341c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003420:	edc7 7a05 	vstr	s15, [r7, #20]

    ignite = angle_ignite * angle_koff + angle_ignite * angle_koff_inv;
 8003424:	4b39      	ldr	r3, [pc, #228]	; (800350c <acis_loop_irq+0x294>)
 8003426:	ed93 7a00 	vldr	s14, [r3]
 800342a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800342e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003432:	4b36      	ldr	r3, [pc, #216]	; (800350c <acis_loop_irq+0x294>)
 8003434:	edd3 6a00 	vldr	s13, [r3]
 8003438:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800343c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003444:	4b32      	ldr	r3, [pc, #200]	; (8003510 <acis_loop_irq+0x298>)
 8003446:	edc3 7a00 	vstr	s15, [r3]
    angle_saturate = saturate;
 800344a:	4a32      	ldr	r2, [pc, #200]	; (8003514 <acis_loop_irq+0x29c>)
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	6013      	str	r3, [r2, #0]

    angle_time = ignite * uspa;
 8003450:	4b2f      	ldr	r3, [pc, #188]	; (8003510 <acis_loop_irq+0x298>)
 8003452:	ed93 7a00 	vldr	s14, [r3]
 8003456:	edd7 7a08 	vldr	s15, [r7, #32]
 800345a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345e:	4b2e      	ldr	r3, [pc, #184]	; (8003518 <acis_loop_irq+0x2a0>)
 8003460:	edc3 7a00 	vstr	s15, [r3]

    for(int i = 0; i < 2; i++)
 8003464:	2300      	movs	r3, #0
 8003466:	63bb      	str	r3, [r7, #56]	; 0x38
 8003468:	e1b0      	b.n	80037cc <acis_loop_irq+0x554>
    {

      if(angle[i] < -ignite)
 800346a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003472:	4413      	add	r3, r2
 8003474:	3b34      	subs	r3, #52	; 0x34
 8003476:	ed93 7a00 	vldr	s14, [r3]
 800347a:	4b25      	ldr	r3, [pc, #148]	; (8003510 <acis_loop_irq+0x298>)
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	eef1 7a67 	vneg.f32	s15, s15
 8003484:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348c:	d548      	bpl.n	8003520 <acis_loop_irq+0x2a8>
        anglesbeforeignite[i] = -angle[i] - ignite;
 800348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003496:	4413      	add	r3, r2
 8003498:	3b34      	subs	r3, #52	; 0x34
 800349a:	edd3 7a00 	vldr	s15, [r3]
 800349e:	eeb1 7a67 	vneg.f32	s14, s15
 80034a2:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <acis_loop_irq+0x298>)
 80034a4:	edd3 7a00 	vldr	s15, [r3]
 80034a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80034b4:	4413      	add	r3, r2
 80034b6:	3b3c      	subs	r3, #60	; 0x3c
 80034b8:	edc3 7a00 	vstr	s15, [r3]
 80034bc:	e049      	b.n	8003552 <acis_loop_irq+0x2da>
 80034be:	bf00      	nop
 80034c0:	40000c00 	.word	0x40000c00
 80034c4:	40020000 	.word	0x40020000
 80034c8:	3a83126f 	.word	0x3a83126f
 80034cc:	200214a0 	.word	0x200214a0
 80034d0:	be4ccccd 	.word	0xbe4ccccd
 80034d4:	40020c00 	.word	0x40020c00
 80034d8:	44ce4000 	.word	0x44ce4000
 80034dc:	43c80000 	.word	0x43c80000
 80034e0:	45dac000 	.word	0x45dac000
 80034e4:	442f0000 	.word	0x442f0000
 80034e8:	45bb8000 	.word	0x45bb8000
 80034ec:	447a0000 	.word	0x447a0000
 80034f0:	459c4000 	.word	0x459c4000
 80034f4:	44a28000 	.word	0x44a28000
 80034f8:	457a0000 	.word	0x457a0000
 80034fc:	44bb8000 	.word	0x44bb8000
 8003500:	453b8000 	.word	0x453b8000
 8003504:	457d2000 	.word	0x457d2000
 8003508:	3ed097b4 	.word	0x3ed097b4
 800350c:	2001192c 	.word	0x2001192c
 8003510:	20021108 	.word	0x20021108
 8003514:	20011930 	.word	0x20011930
 8003518:	20011928 	.word	0x20011928
 800351c:	43b40000 	.word	0x43b40000
      else
        anglesbeforeignite[i] = 360.0f - angle[i] - ignite;
 8003520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003528:	4413      	add	r3, r2
 800352a:	3b34      	subs	r3, #52	; 0x34
 800352c:	edd3 7a00 	vldr	s15, [r3]
 8003530:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800351c <acis_loop_irq+0x2a4>
 8003534:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003538:	4bac      	ldr	r3, [pc, #688]	; (80037ec <acis_loop_irq+0x574>)
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800354a:	4413      	add	r3, r2
 800354c:	3b3c      	subs	r3, #60	; 0x3c
 800354e:	edc3 7a00 	vstr	s15, [r3]

      if(anglesbeforeignite[i] - oldanglesbeforeignite[i] > 0.0f && anglesbeforeignite[i] - oldanglesbeforeignite[i] < 180.0f)
 8003552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800355a:	4413      	add	r3, r2
 800355c:	3b3c      	subs	r3, #60	; 0x3c
 800355e:	ed93 7a00 	vldr	s14, [r3]
 8003562:	4aa3      	ldr	r2, [pc, #652]	; (80037f0 <acis_loop_irq+0x578>)
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	edd3 7a00 	vldr	s15, [r3]
 800356e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003572:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357a:	dd22      	ble.n	80035c2 <acis_loop_irq+0x34a>
 800357c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003584:	4413      	add	r3, r2
 8003586:	3b3c      	subs	r3, #60	; 0x3c
 8003588:	ed93 7a00 	vldr	s14, [r3]
 800358c:	4a98      	ldr	r2, [pc, #608]	; (80037f0 <acis_loop_irq+0x578>)
 800358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	edd3 7a00 	vldr	s15, [r3]
 8003598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800359c:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80037f4 <acis_loop_irq+0x57c>
 80035a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a8:	d50b      	bpl.n	80035c2 <acis_loop_irq+0x34a>
        anglesbeforeignite[i] = oldanglesbeforeignite[i];
 80035aa:	4a91      	ldr	r2, [pc, #580]	; (80037f0 <acis_loop_irq+0x578>)
 80035ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80035bc:	440b      	add	r3, r1
 80035be:	3b3c      	subs	r3, #60	; 0x3c
 80035c0:	601a      	str	r2, [r3, #0]

      if(rpm < 350.0f && start_ign_allow[i] && angle[i] < 80.0f)
 80035c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80035c6:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80037f8 <acis_loop_irq+0x580>
 80035ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d2:	d559      	bpl.n	8003688 <acis_loop_irq+0x410>
 80035d4:	4a89      	ldr	r2, [pc, #548]	; (80037fc <acis_loop_irq+0x584>)
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	4413      	add	r3, r2
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d053      	beq.n	8003688 <acis_loop_irq+0x410>
 80035e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80035e8:	4413      	add	r3, r2
 80035ea:	3b34      	subs	r3, #52	; 0x34
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003800 <acis_loop_irq+0x588>
 80035f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fc:	d544      	bpl.n	8003688 <acis_loop_irq+0x410>
      {
        if(start_ign_state[i] && DelayDiff(now, start_ign_last[i]) > IGN_SATURATION)
 80035fe:	4a81      	ldr	r2, [pc, #516]	; (8003804 <acis_loop_irq+0x58c>)
 8003600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003602:	4413      	add	r3, r2
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d01c      	beq.n	8003644 <acis_loop_irq+0x3cc>
 800360a:	4a7f      	ldr	r2, [pc, #508]	; (8003808 <acis_loop_irq+0x590>)
 800360c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003612:	4619      	mov	r1, r3
 8003614:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003616:	f004 fe85 	bl	8008324 <DelayDiff>
 800361a:	4602      	mov	r2, r0
 800361c:	f240 6372 	movw	r3, #1650	; 0x672
 8003620:	429a      	cmp	r2, r3
 8003622:	d90f      	bls.n	8003644 <acis_loop_irq+0x3cc>
        {
          acis_ignite(i);
 8003624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003626:	b2db      	uxtb	r3, r3
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd fe59 	bl	80012e0 <acis_ignite>
          start_ign_state[i] = 0;
 800362e:	4a75      	ldr	r2, [pc, #468]	; (8003804 <acis_loop_irq+0x58c>)
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	4413      	add	r3, r2
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
          start_ign_last[i] = now;
 8003638:	4973      	ldr	r1, [pc, #460]	; (8003808 <acis_loop_irq+0x590>)
 800363a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800363e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if(start_ign_state[i] && DelayDiff(now, start_ign_last[i]) > IGN_SATURATION)
 8003642:	e037      	b.n	80036b4 <acis_loop_irq+0x43c>
        }
        else if(!start_ign_state[i] && DelayDiff(now, start_ign_last[i]) > IGN_PULSE/2)
 8003644:	4a6f      	ldr	r2, [pc, #444]	; (8003804 <acis_loop_irq+0x58c>)
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	4413      	add	r3, r2
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d131      	bne.n	80036b4 <acis_loop_irq+0x43c>
 8003650:	4a6d      	ldr	r2, [pc, #436]	; (8003808 <acis_loop_irq+0x590>)
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003658:	4619      	mov	r1, r3
 800365a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800365c:	f004 fe62 	bl	8008324 <DelayDiff>
 8003660:	4603      	mov	r3, r0
 8003662:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8003666:	d925      	bls.n	80036b4 <acis_loop_irq+0x43c>
        {
          acis_saturate(i);
 8003668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366a:	b25b      	sxtb	r3, r3
 800366c:	4618      	mov	r0, r3
 800366e:	f7fd fe4b 	bl	8001308 <acis_saturate>
          start_ign_state[i] = 1;
 8003672:	4a64      	ldr	r2, [pc, #400]	; (8003804 <acis_loop_irq+0x58c>)
 8003674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003676:	4413      	add	r3, r2
 8003678:	2201      	movs	r2, #1
 800367a:	701a      	strb	r2, [r3, #0]
          start_ign_last[i] = now;
 800367c:	4962      	ldr	r1, [pc, #392]	; (8003808 <acis_loop_irq+0x590>)
 800367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if(start_ign_state[i] && DelayDiff(now, start_ign_last[i]) > IGN_SATURATION)
 8003686:	e015      	b.n	80036b4 <acis_loop_irq+0x43c>
        }
      }
      else
      {
        if(start_ign_state[i])
 8003688:	4a5e      	ldr	r2, [pc, #376]	; (8003804 <acis_loop_irq+0x58c>)
 800368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368c:	4413      	add	r3, r2
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d009      	beq.n	80036a8 <acis_loop_irq+0x430>
        {
          start_ign_state[i] = 0;
 8003694:	4a5b      	ldr	r2, [pc, #364]	; (8003804 <acis_loop_irq+0x58c>)
 8003696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003698:	4413      	add	r3, r2
 800369a:	2200      	movs	r2, #0
 800369c:	701a      	strb	r2, [r3, #0]
          acis_ignite(i);
 800369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fd fe1c 	bl	80012e0 <acis_ignite>
        }
        start_ign_allow[i] = 0;
 80036a8:	4a54      	ldr	r2, [pc, #336]	; (80037fc <acis_loop_irq+0x584>)
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ac:	4413      	add	r3, r2
 80036ae:	2200      	movs	r2, #0
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	e000      	b.n	80036b6 <acis_loop_irq+0x43e>
        if(start_ign_state[i] && DelayDiff(now, start_ign_last[i]) > IGN_SATURATION)
 80036b4:	bf00      	nop
      }

      if(anglesbeforeignite[i] - saturate < 0.0f)
 80036b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80036be:	4413      	add	r3, r2
 80036c0:	3b3c      	subs	r3, #60	; 0x3c
 80036c2:	ed93 7a00 	vldr	s14, [r3]
 80036c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80036ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d6:	d51a      	bpl.n	800370e <acis_loop_irq+0x496>
      {
        if(!saturated[i] && !ignited[i])
 80036d8:	4a4c      	ldr	r2, [pc, #304]	; (800380c <acis_loop_irq+0x594>)
 80036da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036dc:	4413      	add	r3, r2
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d114      	bne.n	800370e <acis_loop_irq+0x496>
 80036e4:	4a4a      	ldr	r2, [pc, #296]	; (8003810 <acis_loop_irq+0x598>)
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	4413      	add	r3, r2
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10e      	bne.n	800370e <acis_loop_irq+0x496>
        {
          saturated[i] = 1;
 80036f0:	4a46      	ldr	r2, [pc, #280]	; (800380c <acis_loop_irq+0x594>)
 80036f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f4:	4413      	add	r3, r2
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
          start_ign_allow[i] = 0;
 80036fa:	4a40      	ldr	r2, [pc, #256]	; (80037fc <acis_loop_irq+0x584>)
 80036fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fe:	4413      	add	r3, r2
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
          acis_saturate(i);
 8003704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003706:	b25b      	sxtb	r3, r3
 8003708:	4618      	mov	r0, r3
 800370a:	f7fd fdfd 	bl	8001308 <acis_saturate>
        }
      }

      if(oldanglesbeforeignite[i] - anglesbeforeignite[i] < -1.0f)
 800370e:	4a38      	ldr	r2, [pc, #224]	; (80037f0 <acis_loop_irq+0x578>)
 8003710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	ed93 7a00 	vldr	s14, [r3]
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003722:	4413      	add	r3, r2
 8003724:	3b3c      	subs	r3, #60	; 0x3c
 8003726:	edd3 7a00 	vldr	s15, [r3]
 800372a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800372e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373a:	d533      	bpl.n	80037a4 <acis_loop_irq+0x52c>
      {
        if(!ignited[i] && saturated[i])
 800373c:	4a34      	ldr	r2, [pc, #208]	; (8003810 <acis_loop_irq+0x598>)
 800373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003740:	4413      	add	r3, r2
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d132      	bne.n	80037ae <acis_loop_irq+0x536>
 8003748:	4a30      	ldr	r2, [pc, #192]	; (800380c <acis_loop_irq+0x594>)
 800374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374c:	4413      	add	r3, r2
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d02c      	beq.n	80037ae <acis_loop_irq+0x536>
        {
          ignited[i] = 1;
 8003754:	4a2e      	ldr	r2, [pc, #184]	; (8003810 <acis_loop_irq+0x598>)
 8003756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003758:	4413      	add	r3, r2
 800375a:	2201      	movs	r2, #1
 800375c:	701a      	strb	r2, [r3, #0]
          saturated[i] = 0;
 800375e:	4a2b      	ldr	r2, [pc, #172]	; (800380c <acis_loop_irq+0x594>)
 8003760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003762:	4413      	add	r3, r2
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
          acis_ignite(i);
 8003768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376a:	b2db      	uxtb	r3, r3
 800376c:	4618      	mov	r0, r3
 800376e:	f7fd fdb7 	bl	80012e0 <acis_ignite>
          if(rpm < 350.0f)
 8003772:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003776:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80037f8 <acis_loop_irq+0x580>
 800377a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003782:	d514      	bpl.n	80037ae <acis_loop_irq+0x536>
          {
            start_ign_last[i] = now;
 8003784:	4920      	ldr	r1, [pc, #128]	; (8003808 <acis_loop_irq+0x590>)
 8003786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800378a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            start_ign_state[i] = 0;
 800378e:	4a1d      	ldr	r2, [pc, #116]	; (8003804 <acis_loop_irq+0x58c>)
 8003790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003792:	4413      	add	r3, r2
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]
            start_ign_allow[i] = 1;
 8003798:	4a18      	ldr	r2, [pc, #96]	; (80037fc <acis_loop_irq+0x584>)
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	4413      	add	r3, r2
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]
 80037a2:	e004      	b.n	80037ae <acis_loop_irq+0x536>
          }
        }
      }
      else ignited[i] = 0;
 80037a4:	4a1a      	ldr	r2, [pc, #104]	; (8003810 <acis_loop_irq+0x598>)
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	4413      	add	r3, r2
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]

      oldanglesbeforeignite[i] = anglesbeforeignite[i];
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80037b6:	4413      	add	r3, r2
 80037b8:	3b3c      	subs	r3, #60	; 0x3c
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	490c      	ldr	r1, [pc, #48]	; (80037f0 <acis_loop_irq+0x578>)
 80037be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 2; i++)
 80037c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c8:	3301      	adds	r3, #1
 80037ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80037cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	f77f ae4b 	ble.w	800346a <acis_loop_irq+0x1f2>
 80037d4:	e007      	b.n	80037e6 <acis_loop_irq+0x56e>
    }
  }
  else
  {
    angle_ignite = 0;
 80037d6:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <acis_loop_irq+0x59c>)
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e002      	b.n	80037e6 <acis_loop_irq+0x56e>
    return;
 80037e0:	bf00      	nop
 80037e2:	e000      	b.n	80037e6 <acis_loop_irq+0x56e>
    return;
 80037e4:	bf00      	nop
  }
}
 80037e6:	3740      	adds	r7, #64	; 0x40
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20021108 	.word	0x20021108
 80037f0:	2002110c 	.word	0x2002110c
 80037f4:	43340000 	.word	0x43340000
 80037f8:	43af0000 	.word	0x43af0000
 80037fc:	20021114 	.word	0x20021114
 8003800:	42a00000 	.word	0x42a00000
 8003804:	20021118 	.word	0x20021118
 8003808:	2002111c 	.word	0x2002111c
 800380c:	200104b4 	.word	0x200104b4
 8003810:	200104b8 	.word	0x200104b8
 8003814:	2001192c 	.word	0x2001192c

08003818 <acis_loop>:

inline void acis_loop(void)
{
 8003818:	b590      	push	{r4, r7, lr}
 800381a:	b091      	sub	sp, #68	; 0x44
 800381c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef flashstatus = HAL_BUSY;
 800381e:	2302      	movs	r3, #2
 8003820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  static uint8_t sending = 0;
  static uint8_t destination = 0;
  static uint8_t size = 0;
  static uint32_t rpm_last = 0;
  static eValveChannel valve_old = ValveAllClosed;
  uint32_t now = Delay_Tick;
 8003824:	4bb6      	ldr	r3, [pc, #728]	; (8003b00 <acis_loop+0x2e8>)
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	61fb      	str	r3, [r7, #28]
  float rpm = csps_getrpm();
 800382a:	f004 fc5d 	bl	80080e8 <csps_getrpm>
 800382e:	ed87 0a06 	vstr	s0, [r7, #24]
  float pressure = map_getpressure();
 8003832:	f005 fd8f 	bl	8009354 <map_getpressure>
 8003836:	ed87 0a05 	vstr	s0, [r7, #20]
  float load = map_getpressure() / 110000.0f * 100.0f;
 800383a:	f005 fd8b 	bl	8009354 <map_getpressure>
 800383e:	eef0 6a40 	vmov.f32	s13, s0
 8003842:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8003b04 <acis_loop+0x2ec>
 8003846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800384a:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8003b08 <acis_loop+0x2f0>
 800384e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003852:	edc7 7a04 	vstr	s15, [r7, #16]
  float temp;
  float meter_resistance;
  uint32_t voltage_raw = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t temperature_raw = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t isIdle = HAL_GPIO_ReadPin(SENS_ACC_GPIO_Port,SENS_ACC_Pin) == GPIO_PIN_SET;
 800385e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003862:	48aa      	ldr	r0, [pc, #680]	; (8003b0c <acis_loop+0x2f4>)
 8003864:	f009 fd14 	bl	800d290 <HAL_GPIO_ReadPin>
 8003868:	4603      	mov	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	bf0c      	ite	eq
 800386e:	2301      	moveq	r3, #1
 8003870:	2300      	movne	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	73fb      	strb	r3, [r7, #15]
  uint8_t isIgn = HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_RESET;
 8003876:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800387a:	48a5      	ldr	r0, [pc, #660]	; (8003b10 <acis_loop+0x2f8>)
 800387c:	f009 fd08 	bl	800d290 <HAL_GPIO_ReadPin>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	bf0c      	ite	eq
 8003886:	2301      	moveq	r3, #1
 8003888:	2300      	movne	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	73bb      	strb	r3, [r7, #14]
  uint8_t * pnt;
  int8_t status;
  uint8_t table = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t fuelsw = switch_fuel_pos;
 8003894:	4b9f      	ldr	r3, [pc, #636]	; (8003b14 <acis_loop+0x2fc>)
 8003896:	f993 3000 	ldrsb.w	r3, [r3]
 800389a:	737b      	strb	r3, [r7, #13]
  uint16_t * adc_buf;
  uint32_t adc_size;

  if(rpm_last == 0 || rpm > 10.0f || csps_isrotates()) rpm_last = now;
 800389c:	4b9e      	ldr	r3, [pc, #632]	; (8003b18 <acis_loop+0x300>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00d      	beq.n	80038c0 <acis_loop+0xa8>
 80038a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80038a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80038ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b4:	dc04      	bgt.n	80038c0 <acis_loop+0xa8>
 80038b6:	f004 fc4f 	bl	8008158 <csps_isrotates>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <acis_loop+0xae>
 80038c0:	4a95      	ldr	r2, [pc, #596]	; (8003b18 <acis_loop+0x300>)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	6013      	str	r3, [r2, #0]

  /* =========================== Packets Sending =========================== */
  do
  {
    if(!sending && protGetSize(&fifoSendingQueue) > 4)
 80038c6:	4b95      	ldr	r3, [pc, #596]	; (8003b1c <acis_loop+0x304>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d133      	bne.n	8003936 <acis_loop+0x11e>
 80038ce:	4894      	ldr	r0, [pc, #592]	; (8003b20 <acis_loop+0x308>)
 80038d0:	f007 feb6 	bl	800b640 <protGetSize>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d92d      	bls.n	8003936 <acis_loop+0x11e>
    {
      protLook(&fifoSendingQueue,1,&size);
 80038da:	4a92      	ldr	r2, [pc, #584]	; (8003b24 <acis_loop+0x30c>)
 80038dc:	2101      	movs	r1, #1
 80038de:	4890      	ldr	r0, [pc, #576]	; (8003b20 <acis_loop+0x308>)
 80038e0:	f007 ffc8 	bl	800b874 <protLook>
      protLook(&fifoSendingQueue,2,&destination);
 80038e4:	4a90      	ldr	r2, [pc, #576]	; (8003b28 <acis_loop+0x310>)
 80038e6:	2102      	movs	r1, #2
 80038e8:	488d      	ldr	r0, [pc, #564]	; (8003b20 <acis_loop+0x308>)
 80038ea:	f007 ffc3 	bl	800b874 <protLook>
      if(protGetSize(&fifoSendingQueue) >= size)
 80038ee:	488c      	ldr	r0, [pc, #560]	; (8003b20 <acis_loop+0x308>)
 80038f0:	f007 fea6 	bl	800b640 <protGetSize>
 80038f4:	4602      	mov	r2, r0
 80038f6:	4b8b      	ldr	r3, [pc, #556]	; (8003b24 <acis_loop+0x30c>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d31b      	bcc.n	8003936 <acis_loop+0x11e>
      {
        pnt = buffSendingBuffer;
 80038fe:	4b8b      	ldr	r3, [pc, #556]	; (8003b2c <acis_loop+0x314>)
 8003900:	633b      	str	r3, [r7, #48]	; 0x30
        for(int i = 0; i < size; i++)
 8003902:	2300      	movs	r3, #0
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
 8003906:	e009      	b.n	800391c <acis_loop+0x104>
          protPull(&fifoSendingQueue, pnt++);
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	633a      	str	r2, [r7, #48]	; 0x30
 800390e:	4619      	mov	r1, r3
 8003910:	4883      	ldr	r0, [pc, #524]	; (8003b20 <acis_loop+0x308>)
 8003912:	f007 ffa0 	bl	800b856 <protPull>
        for(int i = 0; i < size; i++)
 8003916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003918:	3301      	adds	r3, #1
 800391a:	62bb      	str	r3, [r7, #40]	; 0x28
 800391c:	4b81      	ldr	r3, [pc, #516]	; (8003b24 <acis_loop+0x30c>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	4293      	cmp	r3, r2
 8003926:	dbef      	blt.n	8003908 <acis_loop+0xf0>
        if(destination)
 8003928:	4b7f      	ldr	r3, [pc, #508]	; (8003b28 <acis_loop+0x310>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <acis_loop+0x11e>
          sending = 1;
 8003930:	4b7a      	ldr	r3, [pc, #488]	; (8003b1c <acis_loop+0x304>)
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
      }
    }
    if(sending)
 8003936:	4b79      	ldr	r3, [pc, #484]	; (8003b1c <acis_loop+0x304>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d011      	beq.n	8003962 <acis_loop+0x14a>
    {
      status = acis_send_command(destination, buffSendingBuffer, size);
 800393e:	4b7a      	ldr	r3, [pc, #488]	; (8003b28 <acis_loop+0x310>)
 8003940:	7818      	ldrb	r0, [r3, #0]
 8003942:	4b78      	ldr	r3, [pc, #480]	; (8003b24 <acis_loop+0x30c>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	4978      	ldr	r1, [pc, #480]	; (8003b2c <acis_loop+0x314>)
 800394a:	f001 fa7f 	bl	8004e4c <acis_send_command>
 800394e:	4603      	mov	r3, r0
 8003950:	733b      	strb	r3, [r7, #12]
      if(status != 0)
 8003952:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <acis_loop+0x14a>
      {
        sending = 0;
 800395a:	4b70      	ldr	r3, [pc, #448]	; (8003b1c <acis_loop+0x304>)
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
        continue;
 8003960:	bf00      	nop
      }
    }
  } while(0);

  /* =========================== Voltage & Temperature ADC =========================== */
  if(adc_buf_ready)
 8003962:	4b73      	ldr	r3, [pc, #460]	; (8003b30 <acis_loop+0x318>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80b1 	beq.w	8003ad0 <acis_loop+0x2b8>
  {
    adc_buf = adc_buf_ptr;
 800396e:	4b71      	ldr	r3, [pc, #452]	; (8003b34 <acis_loop+0x31c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60bb      	str	r3, [r7, #8]
    adc_size = adc_buf_size;
 8003974:	4b70      	ldr	r3, [pc, #448]	; (8003b38 <acis_loop+0x320>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	607b      	str	r3, [r7, #4]
    adc_buf_ready = 0;
 800397a:	4b6d      	ldr	r3, [pc, #436]	; (8003b30 <acis_loop+0x318>)
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]
    if(adc_buf)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80a4 	beq.w	8003ad0 <acis_loop+0x2b8>
    {
      for(int i = 0; i < adc_size;)
 8003988:	2300      	movs	r3, #0
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
 800398c:	e015      	b.n	80039ba <acis_loop+0x1a2>
      {
        temperature_raw += adc_buf[i++];
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	627a      	str	r2, [r7, #36]	; 0x24
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	4413      	add	r3, r2
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a0:	4413      	add	r3, r2
 80039a2:	637b      	str	r3, [r7, #52]	; 0x34
        voltage_raw += adc_buf[i++];
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	627a      	str	r2, [r7, #36]	; 0x24
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	4413      	add	r3, r2
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	4413      	add	r3, r2
 80039b8:	63bb      	str	r3, [r7, #56]	; 0x38
      for(int i = 0; i < adc_size;)
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d8e5      	bhi.n	800398e <acis_loop+0x176>
      }
      temperature_raw /= adc_size >> 1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	085b      	lsrs	r3, r3, #1
 80039c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	637b      	str	r3, [r7, #52]	; 0x34
      voltage_raw /= adc_size >> 1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d8:	63bb      	str	r3, [r7, #56]	; 0x38

      power_voltage = voltage_raw / 65535.0f * 3.34f * 5.5f;
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	ee07 3a90 	vmov	s15, r3
 80039e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039e4:	eddf 6a55 	vldr	s13, [pc, #340]	; 8003b3c <acis_loop+0x324>
 80039e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039ec:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003b40 <acis_loop+0x328>
 80039f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039f4:	eeb1 7a06 	vmov.f32	s14, #22	; 0x40b00000  5.5
 80039f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039fc:	4b51      	ldr	r3, [pc, #324]	; (8003b44 <acis_loop+0x32c>)
 80039fe:	edc3 7a00 	vstr	s15, [r3]
      temp = temperature_raw / 65535.0f * 3.34f * 11.0f;
 8003a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a04:	ee07 3a90 	vmov	s15, r3
 8003a08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a0c:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8003b3c <acis_loop+0x324>
 8003a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a14:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8003b40 <acis_loop+0x328>
 8003a18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a1c:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8003a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a24:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      if(temp < 1.0f)
 8003a28:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a38:	d503      	bpl.n	8003a42 <acis_loop+0x22a>
        engine_temperature = 150.0f;
 8003a3a:	4b43      	ldr	r3, [pc, #268]	; (8003b48 <acis_loop+0x330>)
 8003a3c:	4a43      	ldr	r2, [pc, #268]	; (8003b4c <acis_loop+0x334>)
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e046      	b.n	8003ad0 <acis_loop+0x2b8>
      else
      {
        if(temp >= power_voltage)
 8003a42:	4b40      	ldr	r3, [pc, #256]	; (8003b44 <acis_loop+0x32c>)
 8003a44:	edd3 7a00 	vldr	s15, [r3]
 8003a48:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a54:	db02      	blt.n	8003a5c <acis_loop+0x244>
          temp = power_voltage;
 8003a56:	4b3b      	ldr	r3, [pc, #236]	; (8003b44 <acis_loop+0x32c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        meter_resistance = 200.0f;
 8003a5c:	4b3c      	ldr	r3, [pc, #240]	; (8003b50 <acis_loop+0x338>)
 8003a5e:	603b      	str	r3, [r7, #0]
        meter_resistance = (meter_resistance / (1.0f - (temp/power_voltage))) - meter_resistance;
 8003a60:	4b38      	ldr	r3, [pc, #224]	; (8003b44 <acis_loop+0x32c>)
 8003a62:	ed93 7a00 	vldr	s14, [r3]
 8003a66:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a76:	edd7 6a00 	vldr	s13, [r7]
 8003a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7e:	edd7 7a00 	vldr	s15, [r7]
 8003a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a86:	edc7 7a00 	vstr	s15, [r7]
        temp = gettempbyres(meter_resistance);
 8003a8a:	ed97 0a00 	vldr	s0, [r7]
 8003a8e:	f7fd f9f9 	bl	8000e84 <gettempbyres>
 8003a92:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        if(temp < -40.0f)
 8003a96:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003a9a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003b54 <acis_loop+0x33c>
 8003a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa6:	d503      	bpl.n	8003ab0 <acis_loop+0x298>
          engine_temperature = -40.0f;
 8003aa8:	4b27      	ldr	r3, [pc, #156]	; (8003b48 <acis_loop+0x330>)
 8003aaa:	4a2b      	ldr	r2, [pc, #172]	; (8003b58 <acis_loop+0x340>)
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e00f      	b.n	8003ad0 <acis_loop+0x2b8>
        else if(temp > 150.0f)
 8003ab0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003ab4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003b5c <acis_loop+0x344>
 8003ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac0:	dd03      	ble.n	8003aca <acis_loop+0x2b2>
          engine_temperature = 150.0f;
 8003ac2:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <acis_loop+0x330>)
 8003ac4:	4a21      	ldr	r2, [pc, #132]	; (8003b4c <acis_loop+0x334>)
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	e002      	b.n	8003ad0 <acis_loop+0x2b8>
        else
          engine_temperature = temp;
 8003aca:	4a1f      	ldr	r2, [pc, #124]	; (8003b48 <acis_loop+0x330>)
 8003acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ace:	6013      	str	r3, [r2, #0]
      }
    }
  }

  /* =========================== Save & Load Procedures =========================== */
  if(!issaving && !isloading)
 8003ad0:	4b23      	ldr	r3, [pc, #140]	; (8003b60 <acis_loop+0x348>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d157      	bne.n	8003b88 <acis_loop+0x370>
 8003ad8:	4b22      	ldr	r3, [pc, #136]	; (8003b64 <acis_loop+0x34c>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d153      	bne.n	8003b88 <acis_loop+0x370>
  {
    if(savereq && !isloading)
 8003ae0:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <acis_loop+0x350>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d042      	beq.n	8003b70 <acis_loop+0x358>
 8003aea:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <acis_loop+0x34c>)
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d13e      	bne.n	8003b70 <acis_loop+0x358>
      issaving = 1, CanDeinit = 0;
 8003af2:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <acis_loop+0x348>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <acis_loop+0x354>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	e043      	b.n	8003b88 <acis_loop+0x370>
 8003b00:	40000c00 	.word	0x40000c00
 8003b04:	47d6d800 	.word	0x47d6d800
 8003b08:	42c80000 	.word	0x42c80000
 8003b0c:	40020800 	.word	0x40020800
 8003b10:	40020000 	.word	0x40020000
 8003b14:	20011940 	.word	0x20011940
 8003b18:	20021130 	.word	0x20021130
 8003b1c:	20021134 	.word	0x20021134
 8003b20:	200210f0 	.word	0x200210f0
 8003b24:	20021135 	.word	0x20021135
 8003b28:	20021136 	.word	0x20021136
 8003b2c:	20020970 	.word	0x20020970
 8003b30:	2002096c 	.word	0x2002096c
 8003b34:	20020964 	.word	0x20020964
 8003b38:	20020968 	.word	0x20020968
 8003b3c:	477fff00 	.word	0x477fff00
 8003b40:	4055c28f 	.word	0x4055c28f
 8003b44:	2001193c 	.word	0x2001193c
 8003b48:	20011938 	.word	0x20011938
 8003b4c:	43160000 	.word	0x43160000
 8003b50:	43480000 	.word	0x43480000
 8003b54:	c2200000 	.word	0xc2200000
 8003b58:	c2200000 	.word	0xc2200000
 8003b5c:	43160000 	.word	0x43160000
 8003b60:	20021137 	.word	0x20021137
 8003b64:	20021138 	.word	0x20021138
 8003b68:	2002095c 	.word	0x2002095c
 8003b6c:	20011914 	.word	0x20011914
    else if(loadreq && !issaving)
 8003b70:	4bb0      	ldr	r3, [pc, #704]	; (8003e34 <acis_loop+0x61c>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d006      	beq.n	8003b88 <acis_loop+0x370>
 8003b7a:	4baf      	ldr	r3, [pc, #700]	; (8003e38 <acis_loop+0x620>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d102      	bne.n	8003b88 <acis_loop+0x370>
      isloading = 1;
 8003b82:	4bae      	ldr	r3, [pc, #696]	; (8003e3c <acis_loop+0x624>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
  }

  if(issaving)
 8003b88:	4bab      	ldr	r3, [pc, #684]	; (8003e38 <acis_loop+0x620>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d02e      	beq.n	8003bee <acis_loop+0x3d6>
  {
    CanDeinit = 0;
 8003b90:	4bab      	ldr	r3, [pc, #684]	; (8003e40 <acis_loop+0x628>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]
    flashstatus = config_save(&acis_config);
 8003b96:	48ab      	ldr	r0, [pc, #684]	; (8003e44 <acis_loop+0x62c>)
 8003b98:	f003 fcfc 	bl	8007594 <config_save>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(flashstatus != HAL_BUSY)
 8003ba2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d04d      	beq.n	8003c46 <acis_loop+0x42e>
    {
      PK_SaveConfigAcknowledge.Destination = savereqsrc;
 8003baa:	4ba7      	ldr	r3, [pc, #668]	; (8003e48 <acis_loop+0x630>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	4ba6      	ldr	r3, [pc, #664]	; (8003e4c <acis_loop+0x634>)
 8003bb2:	709a      	strb	r2, [r3, #2]
      PK_SaveConfigAcknowledge.ErrorCode = flashstatus == HAL_OK ? 0 : 1;
 8003bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	bf14      	ite	ne
 8003bbc:	2301      	movne	r3, #1
 8003bbe:	2300      	moveq	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4ba1      	ldr	r3, [pc, #644]	; (8003e4c <acis_loop+0x634>)
 8003bc6:	605a      	str	r2, [r3, #4]
      protPushSequence(&fifoSendingQueue, &PK_SaveConfigAcknowledge, sizeof(PK_SaveConfigAcknowledge));
 8003bc8:	2208      	movs	r2, #8
 8003bca:	49a0      	ldr	r1, [pc, #640]	; (8003e4c <acis_loop+0x634>)
 8003bcc:	48a0      	ldr	r0, [pc, #640]	; (8003e50 <acis_loop+0x638>)
 8003bce:	f007 fe22 	bl	800b816 <protPushSequence>
      StatusInit = flashstatus;
 8003bd2:	4aa0      	ldr	r2, [pc, #640]	; (8003e54 <acis_loop+0x63c>)
 8003bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bd8:	7013      	strb	r3, [r2, #0]
      issaving = 0;
 8003bda:	4b97      	ldr	r3, [pc, #604]	; (8003e38 <acis_loop+0x620>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
      CanDeinit = 1;
 8003be0:	4b97      	ldr	r3, [pc, #604]	; (8003e40 <acis_loop+0x628>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	701a      	strb	r2, [r3, #0]
      savereq = 0;
 8003be6:	4b9c      	ldr	r3, [pc, #624]	; (8003e58 <acis_loop+0x640>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	e02b      	b.n	8003c46 <acis_loop+0x42e>
    }
  }
  else if(isloading)
 8003bee:	4b93      	ldr	r3, [pc, #588]	; (8003e3c <acis_loop+0x624>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d027      	beq.n	8003c46 <acis_loop+0x42e>
  {
    flashstatus = config_load(&acis_config);
 8003bf6:	4893      	ldr	r0, [pc, #588]	; (8003e44 <acis_loop+0x62c>)
 8003bf8:	f001 f93a 	bl	8004e70 <config_load>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(flashstatus != HAL_BUSY)
 8003c02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d01d      	beq.n	8003c46 <acis_loop+0x42e>
    {
      PK_RestoreConfigAcknowledge.Destination = loadreqsrc;
 8003c0a:	4b94      	ldr	r3, [pc, #592]	; (8003e5c <acis_loop+0x644>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	4b93      	ldr	r3, [pc, #588]	; (8003e60 <acis_loop+0x648>)
 8003c12:	709a      	strb	r2, [r3, #2]
      PK_RestoreConfigAcknowledge.ErrorCode = flashstatus == HAL_OK ? 0 : 1;
 8003c14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf14      	ite	ne
 8003c1c:	2301      	movne	r3, #1
 8003c1e:	2300      	moveq	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	4b8e      	ldr	r3, [pc, #568]	; (8003e60 <acis_loop+0x648>)
 8003c26:	605a      	str	r2, [r3, #4]
      protPushSequence(&fifoSendingQueue, &PK_RestoreConfigAcknowledge, sizeof(PK_RestoreConfigAcknowledge));
 8003c28:	2208      	movs	r2, #8
 8003c2a:	498d      	ldr	r1, [pc, #564]	; (8003e60 <acis_loop+0x648>)
 8003c2c:	4888      	ldr	r0, [pc, #544]	; (8003e50 <acis_loop+0x638>)
 8003c2e:	f007 fdf2 	bl	800b816 <protPushSequence>
      StatusInit = flashstatus;
 8003c32:	4a88      	ldr	r2, [pc, #544]	; (8003e54 <acis_loop+0x63c>)
 8003c34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c38:	7013      	strb	r3, [r2, #0]
      isloading = 0;
 8003c3a:	4b80      	ldr	r3, [pc, #512]	; (8003e3c <acis_loop+0x624>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	701a      	strb	r2, [r3, #0]
      loadreq = 0;
 8003c40:	4b7c      	ldr	r3, [pc, #496]	; (8003e34 <acis_loop+0x61c>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	701a      	strb	r2, [r3, #0]
    }
  }

  /* =========================== Ignition Handling =========================== */
  if(isIgn && !acis_config.params.isIgnitionByHall)
 8003c46:	7bbb      	ldrb	r3, [r7, #14]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00b      	beq.n	8003c64 <acis_loop+0x44c>
 8003c4c:	4b7d      	ldr	r3, [pc, #500]	; (8003e44 <acis_loop+0x62c>)
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d107      	bne.n	8003c64 <acis_loop+0x44c>
    angle_ignite = CalculateIgnition();
 8003c54:	f7fd ff64 	bl	8001b20 <CalculateIgnition>
 8003c58:	eef0 7a40 	vmov.f32	s15, s0
 8003c5c:	4b81      	ldr	r3, [pc, #516]	; (8003e64 <acis_loop+0x64c>)
 8003c5e:	edc3 7a00 	vstr	s15, [r3]
 8003c62:	e003      	b.n	8003c6c <acis_loop+0x454>
  else angle_ignite = 0.0f;
 8003c64:	4b7f      	ldr	r3, [pc, #508]	; (8003e64 <acis_loop+0x64c>)
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

  if(isIgn && acis_config.params.isHallLearningMode)
 8003c6c:	7bbb      	ldrb	r3, [r7, #14]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <acis_loop+0x466>
 8003c72:	4b74      	ldr	r3, [pc, #464]	; (8003e44 <acis_loop+0x62c>)
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <acis_loop+0x466>
    LearnIgnition();
 8003c7a:	f7fe fca3 	bl	80025c4 <LearnIgnition>

  acis_hall_loop();
 8003c7e:	f7fd feef 	bl	8001a60 <acis_hall_loop>

  acis_ignition_loop();
 8003c82:	f7fd fcfb 	bl	800167c <acis_ignition_loop>


  /* =========================== Table and Valves handling =========================== */
  if(isIgn)
 8003c86:	7bbb      	ldrb	r3, [r7, #14]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8110 	beq.w	8003eae <acis_loop+0x696>
  {
    if(acis_config.params.isForceTable)
 8003c8e:	4b6d      	ldr	r3, [pc, #436]	; (8003e44 <acis_loop+0x62c>)
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d004      	beq.n	8003ca0 <acis_loop+0x488>
    {
      table = acis_config.params.forceTableNumber;
 8003c96:	4b6b      	ldr	r3, [pc, #428]	; (8003e44 <acis_loop+0x62c>)
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003c9e:	e051      	b.n	8003d44 <acis_loop+0x52c>
    }
    else if(acis_config.params.isSwitchByExternal)
 8003ca0:	4b68      	ldr	r3, [pc, #416]	; (8003e44 <acis_loop+0x62c>)
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d036      	beq.n	8003d16 <acis_loop+0x4fe>
    {
      HAL_GPIO_WritePin(PROPANE_OUT_GPIO_Port, PROPANE_OUT_Pin, GPIO_PIN_RESET);
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cae:	486e      	ldr	r0, [pc, #440]	; (8003e68 <acis_loop+0x650>)
 8003cb0:	f009 fb06 	bl	800d2c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PETROL_OUT_GPIO_Port, PETROL_OUT_Pin, GPIO_PIN_RESET);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cba:	486b      	ldr	r0, [pc, #428]	; (8003e68 <acis_loop+0x650>)
 8003cbc:	f009 fb00 	bl	800d2c0 <HAL_GPIO_WritePin>

      if(HAL_GPIO_ReadPin(PETROL_IN_GPIO_Port, PETROL_IN_Pin) == GPIO_PIN_RESET &&
 8003cc0:	2120      	movs	r1, #32
 8003cc2:	4869      	ldr	r0, [pc, #420]	; (8003e68 <acis_loop+0x650>)
 8003cc4:	f009 fae4 	bl	800d290 <HAL_GPIO_ReadPin>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10b      	bne.n	8003ce6 <acis_loop+0x4ce>
          HAL_GPIO_ReadPin(PROPANE_IN_GPIO_Port, PROPANE_IN_Pin) == GPIO_PIN_SET)
 8003cce:	2110      	movs	r1, #16
 8003cd0:	4865      	ldr	r0, [pc, #404]	; (8003e68 <acis_loop+0x650>)
 8003cd2:	f009 fadd 	bl	800d290 <HAL_GPIO_ReadPin>
 8003cd6:	4603      	mov	r3, r0
      if(HAL_GPIO_ReadPin(PETROL_IN_GPIO_Port, PETROL_IN_Pin) == GPIO_PIN_RESET &&
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d104      	bne.n	8003ce6 <acis_loop+0x4ce>
        table = acis_config.params.switchPos1Table;
 8003cdc:	4b59      	ldr	r3, [pc, #356]	; (8003e44 <acis_loop+0x62c>)
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003ce4:	e02e      	b.n	8003d44 <acis_loop+0x52c>
      else if(HAL_GPIO_ReadPin(PETROL_IN_GPIO_Port, PETROL_IN_Pin) == GPIO_PIN_SET &&
 8003ce6:	2120      	movs	r1, #32
 8003ce8:	485f      	ldr	r0, [pc, #380]	; (8003e68 <acis_loop+0x650>)
 8003cea:	f009 fad1 	bl	800d290 <HAL_GPIO_ReadPin>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d10b      	bne.n	8003d0c <acis_loop+0x4f4>
          HAL_GPIO_ReadPin(PROPANE_IN_GPIO_Port, PROPANE_IN_Pin) == GPIO_PIN_RESET)
 8003cf4:	2110      	movs	r1, #16
 8003cf6:	485c      	ldr	r0, [pc, #368]	; (8003e68 <acis_loop+0x650>)
 8003cf8:	f009 faca 	bl	800d290 <HAL_GPIO_ReadPin>
 8003cfc:	4603      	mov	r3, r0
      else if(HAL_GPIO_ReadPin(PETROL_IN_GPIO_Port, PETROL_IN_Pin) == GPIO_PIN_SET &&
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d104      	bne.n	8003d0c <acis_loop+0x4f4>
        table = acis_config.params.switchPos2Table;
 8003d02:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <acis_loop+0x62c>)
 8003d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003d0a:	e01b      	b.n	8003d44 <acis_loop+0x52c>
      else table = acis_config.params.switchPos0Table;
 8003d0c:	4b4d      	ldr	r3, [pc, #308]	; (8003e44 <acis_loop+0x62c>)
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003d14:	e016      	b.n	8003d44 <acis_loop+0x52c>
    }
    else
    {
      if(fuelsw == 0)
 8003d16:	7b7b      	ldrb	r3, [r7, #13]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <acis_loop+0x50e>
        table = acis_config.params.switchPos0Table;
 8003d1c:	4b49      	ldr	r3, [pc, #292]	; (8003e44 <acis_loop+0x62c>)
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003d24:	e00e      	b.n	8003d44 <acis_loop+0x52c>
      else if(fuelsw == 1)
 8003d26:	7b7b      	ldrb	r3, [r7, #13]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d104      	bne.n	8003d36 <acis_loop+0x51e>
        table = acis_config.params.switchPos1Table;
 8003d2c:	4b45      	ldr	r3, [pc, #276]	; (8003e44 <acis_loop+0x62c>)
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003d34:	e006      	b.n	8003d44 <acis_loop+0x52c>
      else if(fuelsw == 2)
 8003d36:	7b7b      	ldrb	r3, [r7, #13]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d103      	bne.n	8003d44 <acis_loop+0x52c>
        table = acis_config.params.switchPos2Table;
 8003d3c:	4b41      	ldr	r3, [pc, #260]	; (8003e44 <acis_loop+0x62c>)
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if(table < TABLE_SETUPS_MAX)
 8003d44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	f200 80bc 	bhi.w	8003ec6 <acis_loop+0x6ae>
    {
      table_current = table;
 8003d4e:	4a47      	ldr	r2, [pc, #284]	; (8003e6c <acis_loop+0x654>)
 8003d50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d54:	7013      	strb	r3, [r2, #0]
      valve_current = acis_config.tables[table].valve_channel;
 8003d56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d5a:	4a3a      	ldr	r2, [pc, #232]	; (8003e44 <acis_loop+0x62c>)
 8003d5c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	4413      	add	r3, r2
 8003d66:	33cc      	adds	r3, #204	; 0xcc
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	4b41      	ldr	r3, [pc, #260]	; (8003e70 <acis_loop+0x658>)
 8003d6c:	701a      	strb	r2, [r3, #0]
      if(valve_current != valve_old)
 8003d6e:	4b40      	ldr	r3, [pc, #256]	; (8003e70 <acis_loop+0x658>)
 8003d70:	781a      	ldrb	r2, [r3, #0]
 8003d72:	4b40      	ldr	r3, [pc, #256]	; (8003e74 <acis_loop+0x65c>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d006      	beq.n	8003d88 <acis_loop+0x570>
      {
        valve_old = valve_current;
 8003d7a:	4b3d      	ldr	r3, [pc, #244]	; (8003e70 <acis_loop+0x658>)
 8003d7c:	781a      	ldrb	r2, [r3, #0]
 8003d7e:	4b3d      	ldr	r3, [pc, #244]	; (8003e74 <acis_loop+0x65c>)
 8003d80:	701a      	strb	r2, [r3, #0]
        rpm_last = now;
 8003d82:	4a3d      	ldr	r2, [pc, #244]	; (8003e78 <acis_loop+0x660>)
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	6013      	str	r3, [r2, #0]
      }
      if(!acis_config.params.isSwitchByExternal)
 8003d88:	4b2e      	ldr	r3, [pc, #184]	; (8003e44 <acis_loop+0x62c>)
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f040 809a 	bne.w	8003ec6 <acis_loop+0x6ae>
      {
        if(acis_config.tables[table].valve_channel == ValveAllClosed ||
 8003d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d96:	4a2b      	ldr	r2, [pc, #172]	; (8003e44 <acis_loop+0x62c>)
 8003d98:	f640 416c 	movw	r1, #3180	; 0xc6c
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	4413      	add	r3, r2
 8003da2:	33cc      	adds	r3, #204	; 0xcc
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d01d      	beq.n	8003de6 <acis_loop+0x5ce>
            (acis_config.tables[table].valve_timeout != 0 && DelayDiff(now, rpm_last) > acis_config.tables[table].valve_timeout))
 8003daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003dae:	4a25      	ldr	r2, [pc, #148]	; (8003e44 <acis_loop+0x62c>)
 8003db0:	f640 416c 	movw	r1, #3180	; 0xc6c
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	4413      	add	r3, r2
 8003dba:	33d0      	adds	r3, #208	; 0xd0
 8003dbc:	681b      	ldr	r3, [r3, #0]
        if(acis_config.tables[table].valve_channel == ValveAllClosed ||
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d01e      	beq.n	8003e00 <acis_loop+0x5e8>
            (acis_config.tables[table].valve_timeout != 0 && DelayDiff(now, rpm_last) > acis_config.tables[table].valve_timeout))
 8003dc2:	4b2d      	ldr	r3, [pc, #180]	; (8003e78 <acis_loop+0x660>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	69f8      	ldr	r0, [r7, #28]
 8003dca:	f004 faab 	bl	8008324 <DelayDiff>
 8003dce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003dd2:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <acis_loop+0x62c>)
 8003dd4:	f640 416c 	movw	r1, #3180	; 0xc6c
 8003dd8:	fb01 f303 	mul.w	r3, r1, r3
 8003ddc:	4413      	add	r3, r2
 8003dde:	33d0      	adds	r3, #208	; 0xd0
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4298      	cmp	r0, r3
 8003de4:	d90c      	bls.n	8003e00 <acis_loop+0x5e8>
        {
          HAL_GPIO_WritePin(PROPANE_OUT_GPIO_Port, PROPANE_OUT_Pin, GPIO_PIN_RESET);
 8003de6:	2200      	movs	r2, #0
 8003de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dec:	481e      	ldr	r0, [pc, #120]	; (8003e68 <acis_loop+0x650>)
 8003dee:	f009 fa67 	bl	800d2c0 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(PETROL_OUT_GPIO_Port, PETROL_OUT_Pin, GPIO_PIN_RESET);
 8003df2:	2200      	movs	r2, #0
 8003df4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003df8:	481b      	ldr	r0, [pc, #108]	; (8003e68 <acis_loop+0x650>)
 8003dfa:	f009 fa61 	bl	800d2c0 <HAL_GPIO_WritePin>
 8003dfe:	e062      	b.n	8003ec6 <acis_loop+0x6ae>
        }
        else if(acis_config.tables[table].valve_channel == ValvePetrol)
 8003e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e04:	4a0f      	ldr	r2, [pc, #60]	; (8003e44 <acis_loop+0x62c>)
 8003e06:	f640 416c 	movw	r1, #3180	; 0xc6c
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	33cc      	adds	r3, #204	; 0xcc
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d131      	bne.n	8003e7c <acis_loop+0x664>
        {
          HAL_GPIO_WritePin(PROPANE_OUT_GPIO_Port, PROPANE_OUT_Pin, GPIO_PIN_RESET);
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e1e:	4812      	ldr	r0, [pc, #72]	; (8003e68 <acis_loop+0x650>)
 8003e20:	f009 fa4e 	bl	800d2c0 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(PETROL_OUT_GPIO_Port, PETROL_OUT_Pin, GPIO_PIN_SET);
 8003e24:	2201      	movs	r2, #1
 8003e26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e2a:	480f      	ldr	r0, [pc, #60]	; (8003e68 <acis_loop+0x650>)
 8003e2c:	f009 fa48 	bl	800d2c0 <HAL_GPIO_WritePin>
 8003e30:	e049      	b.n	8003ec6 <acis_loop+0x6ae>
 8003e32:	bf00      	nop
 8003e34:	2002095d 	.word	0x2002095d
 8003e38:	20021137 	.word	0x20021137
 8003e3c:	20021138 	.word	0x20021138
 8003e40:	20011914 	.word	0x20011914
 8003e44:	200214a0 	.word	0x200214a0
 8003e48:	20020960 	.word	0x20020960
 8003e4c:	20010300 	.word	0x20010300
 8003e50:	200210f0 	.word	0x200210f0
 8003e54:	200104a6 	.word	0x200104a6
 8003e58:	2002095c 	.word	0x2002095c
 8003e5c:	20020961 	.word	0x20020961
 8003e60:	20010320 	.word	0x20010320
 8003e64:	2001192c 	.word	0x2001192c
 8003e68:	40020400 	.word	0x40020400
 8003e6c:	20011934 	.word	0x20011934
 8003e70:	20011935 	.word	0x20011935
 8003e74:	20021139 	.word	0x20021139
 8003e78:	20021130 	.word	0x20021130
        }
        else if(acis_config.tables[table].valve_channel == ValvePropane)
 8003e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e80:	4ab7      	ldr	r2, [pc, #732]	; (8004160 <acis_loop+0x948>)
 8003e82:	f640 416c 	movw	r1, #3180	; 0xc6c
 8003e86:	fb01 f303 	mul.w	r3, r1, r3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	33cc      	adds	r3, #204	; 0xcc
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d118      	bne.n	8003ec6 <acis_loop+0x6ae>
        {
          HAL_GPIO_WritePin(PROPANE_OUT_GPIO_Port, PROPANE_OUT_Pin, GPIO_PIN_SET);
 8003e94:	2201      	movs	r2, #1
 8003e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e9a:	48b2      	ldr	r0, [pc, #712]	; (8004164 <acis_loop+0x94c>)
 8003e9c:	f009 fa10 	bl	800d2c0 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(PETROL_OUT_GPIO_Port, PETROL_OUT_Pin, GPIO_PIN_RESET);
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ea6:	48af      	ldr	r0, [pc, #700]	; (8004164 <acis_loop+0x94c>)
 8003ea8:	f009 fa0a 	bl	800d2c0 <HAL_GPIO_WritePin>
 8003eac:	e00b      	b.n	8003ec6 <acis_loop+0x6ae>
      }
    }
  }
  else
  {
    HAL_GPIO_WritePin(PROPANE_OUT_GPIO_Port, PROPANE_OUT_Pin, GPIO_PIN_RESET);
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003eb4:	48ab      	ldr	r0, [pc, #684]	; (8004164 <acis_loop+0x94c>)
 8003eb6:	f009 fa03 	bl	800d2c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PETROL_OUT_GPIO_Port, PETROL_OUT_Pin, GPIO_PIN_RESET);
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ec0:	48a8      	ldr	r0, [pc, #672]	; (8004164 <acis_loop+0x94c>)
 8003ec2:	f009 f9fd 	bl	800d2c0 <HAL_GPIO_WritePin>
  }


  /* =========================== Economizer Handling =========================== */
  if(!isIgn)
 8003ec6:	7bbb      	ldrb	r3, [r7, #14]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <acis_loop+0x6c0>
  {
    HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_RESET);
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2104      	movs	r1, #4
 8003ed0:	48a5      	ldr	r0, [pc, #660]	; (8004168 <acis_loop+0x950>)
 8003ed2:	f009 f9f5 	bl	800d2c0 <HAL_GPIO_WritePin>
 8003ed6:	e03a      	b.n	8003f4e <acis_loop+0x736>
  }
  else if(!acis_config.params.isEconOutAsStrobe)
 8003ed8:	4ba1      	ldr	r3, [pc, #644]	; (8004160 <acis_loop+0x948>)
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d136      	bne.n	8003f4e <acis_loop+0x736>
  {
    if(acis_config.params.isEconomEnabled)
 8003ee0:	4b9f      	ldr	r3, [pc, #636]	; (8004160 <acis_loop+0x948>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d02d      	beq.n	8003f44 <acis_loop+0x72c>
    {
      if(isIdle && rpm > acis_config.params.EconRpmThreshold + 75)
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d013      	beq.n	8003f16 <acis_loop+0x6fe>
 8003eee:	4b9c      	ldr	r3, [pc, #624]	; (8004160 <acis_loop+0x948>)
 8003ef0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003ef4:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 800416c <acis_loop+0x954>
 8003ef8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003efc:	ed97 7a06 	vldr	s14, [r7, #24]
 8003f00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f08:	dd05      	ble.n	8003f16 <acis_loop+0x6fe>
        HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_RESET);
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2104      	movs	r1, #4
 8003f0e:	4896      	ldr	r0, [pc, #600]	; (8004168 <acis_loop+0x950>)
 8003f10:	f009 f9d6 	bl	800d2c0 <HAL_GPIO_WritePin>
 8003f14:	e01b      	b.n	8003f4e <acis_loop+0x736>
      else if(!isIdle || rpm < acis_config.params.EconRpmThreshold - 75)
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <acis_loop+0x720>
 8003f1c:	4b90      	ldr	r3, [pc, #576]	; (8004160 <acis_loop+0x948>)
 8003f1e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003f22:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800416c <acis_loop+0x954>
 8003f26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f2a:	ed97 7a06 	vldr	s14, [r7, #24]
 8003f2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f36:	d50a      	bpl.n	8003f4e <acis_loop+0x736>
        HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_SET);
 8003f38:	2201      	movs	r2, #1
 8003f3a:	2104      	movs	r1, #4
 8003f3c:	488a      	ldr	r0, [pc, #552]	; (8004168 <acis_loop+0x950>)
 8003f3e:	f009 f9bf 	bl	800d2c0 <HAL_GPIO_WritePin>
 8003f42:	e004      	b.n	8003f4e <acis_loop+0x736>
    }
    else
      HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_SET);
 8003f44:	2201      	movs	r2, #1
 8003f46:	2104      	movs	r1, #4
 8003f48:	4887      	ldr	r0, [pc, #540]	; (8004168 <acis_loop+0x950>)
 8003f4a:	f009 f9b9 	bl	800d2c0 <HAL_GPIO_WritePin>
  }

  /* =========================== DRAG =========================== */
  if(DragReady)
 8003f4e:	4b88      	ldr	r3, [pc, #544]	; (8004170 <acis_loop+0x958>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 8200 	beq.w	8004358 <acis_loop+0xb40>
  {
    if(DragCompleted)
 8003f58:	4b86      	ldr	r3, [pc, #536]	; (8004174 <acis_loop+0x95c>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d006      	beq.n	8003f6e <acis_loop+0x756>
    {
      DragReady = 0;
 8003f60:	4b83      	ldr	r3, [pc, #524]	; (8004170 <acis_loop+0x958>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	701a      	strb	r2, [r3, #0]
      DragStarted = 0;
 8003f66:	4b84      	ldr	r3, [pc, #528]	; (8004178 <acis_loop+0x960>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
      }
    }
  }


}
 8003f6c:	e1f4      	b.n	8004358 <acis_loop+0xb40>
      if(DragStarted)
 8003f6e:	4b82      	ldr	r3, [pc, #520]	; (8004178 <acis_loop+0x960>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 8114 	beq.w	80041a0 <acis_loop+0x988>
        if(DelayDiff(now, DragTimeLast) >= DRAG_POINTS_DISTANCE)
 8003f78:	4b80      	ldr	r3, [pc, #512]	; (800417c <acis_loop+0x964>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	69f8      	ldr	r0, [r7, #28]
 8003f80:	f004 f9d0 	bl	8008324 <DelayDiff>
 8003f84:	4602      	mov	r2, r0
 8003f86:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	f240 81e4 	bls.w	8004358 <acis_loop+0xb40>
          DragTimeLast = now;
 8003f90:	4a7a      	ldr	r2, [pc, #488]	; (800417c <acis_loop+0x964>)
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	6013      	str	r3, [r2, #0]
          if(DragPointsCount < DRAG_MAX_POINTS)
 8003f96:	4b7a      	ldr	r3, [pc, #488]	; (8004180 <acis_loop+0x968>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f9e:	f080 80cf 	bcs.w	8004140 <acis_loop+0x928>
            DragPoints[DragPointsCount].Ignition = angle_ignite;
 8003fa2:	4b77      	ldr	r3, [pc, #476]	; (8004180 <acis_loop+0x968>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4b77      	ldr	r3, [pc, #476]	; (8004184 <acis_loop+0x96c>)
 8003fa8:	6819      	ldr	r1, [r3, #0]
 8003faa:	4877      	ldr	r0, [pc, #476]	; (8004188 <acis_loop+0x970>)
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4403      	add	r3, r0
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	6019      	str	r1, [r3, #0]
            DragPoints[DragPointsCount].RPM = csps_getrpmgui();
 8003fba:	4b71      	ldr	r3, [pc, #452]	; (8004180 <acis_loop+0x968>)
 8003fbc:	681c      	ldr	r4, [r3, #0]
 8003fbe:	f004 f8a1 	bl	8008104 <csps_getrpmgui>
 8003fc2:	eef0 7a40 	vmov.f32	s15, s0
 8003fc6:	4a70      	ldr	r2, [pc, #448]	; (8004188 <acis_loop+0x970>)
 8003fc8:	4623      	mov	r3, r4
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4423      	add	r3, r4
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	edc3 7a00 	vstr	s15, [r3]
            DragPoints[DragPointsCount].Pressure = pressure;
 8003fd6:	4b6a      	ldr	r3, [pc, #424]	; (8004180 <acis_loop+0x968>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	496b      	ldr	r1, [pc, #428]	; (8004188 <acis_loop+0x970>)
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	601a      	str	r2, [r3, #0]
            DragPoints[DragPointsCount].Load = load;
 8003fec:	4b64      	ldr	r3, [pc, #400]	; (8004180 <acis_loop+0x968>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4965      	ldr	r1, [pc, #404]	; (8004188 <acis_loop+0x970>)
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	601a      	str	r2, [r3, #0]
            DragPoints[DragPointsCount].Time = DelayDiff(now, DragStartTime);
 8004002:	4b62      	ldr	r3, [pc, #392]	; (800418c <acis_loop+0x974>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4b5e      	ldr	r3, [pc, #376]	; (8004180 <acis_loop+0x968>)
 8004008:	681c      	ldr	r4, [r3, #0]
 800400a:	4611      	mov	r1, r2
 800400c:	69f8      	ldr	r0, [r7, #28]
 800400e:	f004 f989 	bl	8008324 <DelayDiff>
 8004012:	4601      	mov	r1, r0
 8004014:	4a5c      	ldr	r2, [pc, #368]	; (8004188 <acis_loop+0x970>)
 8004016:	4623      	mov	r3, r4
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4423      	add	r3, r4
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	3310      	adds	r3, #16
 8004022:	6019      	str	r1, [r3, #0]
            DragPointsCount++;
 8004024:	4b56      	ldr	r3, [pc, #344]	; (8004180 <acis_loop+0x968>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3301      	adds	r3, #1
 800402a:	4a55      	ldr	r2, [pc, #340]	; (8004180 <acis_loop+0x968>)
 800402c:	6013      	str	r3, [r2, #0]
            if(DragFromRPM < DragToRPM)
 800402e:	4b58      	ldr	r3, [pc, #352]	; (8004190 <acis_loop+0x978>)
 8004030:	ed93 7a00 	vldr	s14, [r3]
 8004034:	4b57      	ldr	r3, [pc, #348]	; (8004194 <acis_loop+0x97c>)
 8004036:	edd3 7a00 	vldr	s15, [r3]
 800403a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800403e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004042:	d538      	bpl.n	80040b6 <acis_loop+0x89e>
              if(rpm >= DragToRPM)
 8004044:	4b53      	ldr	r3, [pc, #332]	; (8004194 <acis_loop+0x97c>)
 8004046:	edd3 7a00 	vldr	s15, [r3]
 800404a:	ed97 7a06 	vldr	s14, [r7, #24]
 800404e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004056:	db0f      	blt.n	8004078 <acis_loop+0x860>
                DragStarted = 0;
 8004058:	4b47      	ldr	r3, [pc, #284]	; (8004178 <acis_loop+0x960>)
 800405a:	2200      	movs	r2, #0
 800405c:	701a      	strb	r2, [r3, #0]
                DragStatus = 0;
 800405e:	4b4e      	ldr	r3, [pc, #312]	; (8004198 <acis_loop+0x980>)
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
                DragReady = 0;
 8004064:	4b42      	ldr	r3, [pc, #264]	; (8004170 <acis_loop+0x958>)
 8004066:	2200      	movs	r2, #0
 8004068:	701a      	strb	r2, [r3, #0]
                DragCompleted = 1;
 800406a:	4b42      	ldr	r3, [pc, #264]	; (8004174 <acis_loop+0x95c>)
 800406c:	2201      	movs	r2, #1
 800406e:	701a      	strb	r2, [r3, #0]
                DragTimeLast = 0;
 8004070:	4b42      	ldr	r3, [pc, #264]	; (800417c <acis_loop+0x964>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
}
 8004076:	e16f      	b.n	8004358 <acis_loop+0xb40>
              else if(rpm < DragFromRPM - 100.0f)
 8004078:	4b45      	ldr	r3, [pc, #276]	; (8004190 <acis_loop+0x978>)
 800407a:	edd3 7a00 	vldr	s15, [r3]
 800407e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800419c <acis_loop+0x984>
 8004082:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004086:	ed97 7a06 	vldr	s14, [r7, #24]
 800408a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800408e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004092:	d400      	bmi.n	8004096 <acis_loop+0x87e>
}
 8004094:	e160      	b.n	8004358 <acis_loop+0xb40>
                DragStarted = 0;
 8004096:	4b38      	ldr	r3, [pc, #224]	; (8004178 <acis_loop+0x960>)
 8004098:	2200      	movs	r2, #0
 800409a:	701a      	strb	r2, [r3, #0]
                DragStatus = 4;
 800409c:	4b3e      	ldr	r3, [pc, #248]	; (8004198 <acis_loop+0x980>)
 800409e:	2204      	movs	r2, #4
 80040a0:	701a      	strb	r2, [r3, #0]
                DragReady = 0;
 80040a2:	4b33      	ldr	r3, [pc, #204]	; (8004170 <acis_loop+0x958>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	701a      	strb	r2, [r3, #0]
                DragCompleted = 1;
 80040a8:	4b32      	ldr	r3, [pc, #200]	; (8004174 <acis_loop+0x95c>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
                DragTimeLast = 0;
 80040ae:	4b33      	ldr	r3, [pc, #204]	; (800417c <acis_loop+0x964>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
}
 80040b4:	e150      	b.n	8004358 <acis_loop+0xb40>
            else if(DragFromRPM > DragToRPM)
 80040b6:	4b36      	ldr	r3, [pc, #216]	; (8004190 <acis_loop+0x978>)
 80040b8:	ed93 7a00 	vldr	s14, [r3]
 80040bc:	4b35      	ldr	r3, [pc, #212]	; (8004194 <acis_loop+0x97c>)
 80040be:	edd3 7a00 	vldr	s15, [r3]
 80040c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ca:	dc00      	bgt.n	80040ce <acis_loop+0x8b6>
}
 80040cc:	e144      	b.n	8004358 <acis_loop+0xb40>
              if(rpm <= DragToRPM)
 80040ce:	4b31      	ldr	r3, [pc, #196]	; (8004194 <acis_loop+0x97c>)
 80040d0:	edd3 7a00 	vldr	s15, [r3]
 80040d4:	ed97 7a06 	vldr	s14, [r7, #24]
 80040d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e0:	d80f      	bhi.n	8004102 <acis_loop+0x8ea>
                DragStarted = 0;
 80040e2:	4b25      	ldr	r3, [pc, #148]	; (8004178 <acis_loop+0x960>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]
                DragStatus = 0;
 80040e8:	4b2b      	ldr	r3, [pc, #172]	; (8004198 <acis_loop+0x980>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	701a      	strb	r2, [r3, #0]
                DragReady = 0;
 80040ee:	4b20      	ldr	r3, [pc, #128]	; (8004170 <acis_loop+0x958>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
                DragCompleted = 1;
 80040f4:	4b1f      	ldr	r3, [pc, #124]	; (8004174 <acis_loop+0x95c>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	701a      	strb	r2, [r3, #0]
                DragTimeLast = 0;
 80040fa:	4b20      	ldr	r3, [pc, #128]	; (800417c <acis_loop+0x964>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
}
 8004100:	e12a      	b.n	8004358 <acis_loop+0xb40>
              else if(rpm > DragFromRPM + 100.0f)
 8004102:	4b23      	ldr	r3, [pc, #140]	; (8004190 <acis_loop+0x978>)
 8004104:	edd3 7a00 	vldr	s15, [r3]
 8004108:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800419c <acis_loop+0x984>
 800410c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004110:	ed97 7a06 	vldr	s14, [r7, #24]
 8004114:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411c:	dc00      	bgt.n	8004120 <acis_loop+0x908>
}
 800411e:	e11b      	b.n	8004358 <acis_loop+0xb40>
                DragStarted = 0;
 8004120:	4b15      	ldr	r3, [pc, #84]	; (8004178 <acis_loop+0x960>)
 8004122:	2200      	movs	r2, #0
 8004124:	701a      	strb	r2, [r3, #0]
                DragStatus = 4;
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <acis_loop+0x980>)
 8004128:	2204      	movs	r2, #4
 800412a:	701a      	strb	r2, [r3, #0]
                DragReady = 0;
 800412c:	4b10      	ldr	r3, [pc, #64]	; (8004170 <acis_loop+0x958>)
 800412e:	2200      	movs	r2, #0
 8004130:	701a      	strb	r2, [r3, #0]
                DragCompleted = 1;
 8004132:	4b10      	ldr	r3, [pc, #64]	; (8004174 <acis_loop+0x95c>)
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]
                DragTimeLast = 0;
 8004138:	4b10      	ldr	r3, [pc, #64]	; (800417c <acis_loop+0x964>)
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
}
 800413e:	e10b      	b.n	8004358 <acis_loop+0xb40>
            DragStarted = 0;
 8004140:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <acis_loop+0x960>)
 8004142:	2200      	movs	r2, #0
 8004144:	701a      	strb	r2, [r3, #0]
            DragStatus = 5;
 8004146:	4b14      	ldr	r3, [pc, #80]	; (8004198 <acis_loop+0x980>)
 8004148:	2205      	movs	r2, #5
 800414a:	701a      	strb	r2, [r3, #0]
            DragReady = 0;
 800414c:	4b08      	ldr	r3, [pc, #32]	; (8004170 <acis_loop+0x958>)
 800414e:	2200      	movs	r2, #0
 8004150:	701a      	strb	r2, [r3, #0]
            DragCompleted = 1;
 8004152:	4b08      	ldr	r3, [pc, #32]	; (8004174 <acis_loop+0x95c>)
 8004154:	2201      	movs	r2, #1
 8004156:	701a      	strb	r2, [r3, #0]
            DragTimeLast = 0;
 8004158:	4b08      	ldr	r3, [pc, #32]	; (800417c <acis_loop+0x964>)
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
}
 800415e:	e0fb      	b.n	8004358 <acis_loop+0xb40>
 8004160:	200214a0 	.word	0x200214a0
 8004164:	40020400 	.word	0x40020400
 8004168:	40020c00 	.word	0x40020c00
 800416c:	42960000 	.word	0x42960000
 8004170:	20020950 	.word	0x20020950
 8004174:	20020952 	.word	0x20020952
 8004178:	20020951 	.word	0x20020951
 800417c:	20020954 	.word	0x20020954
 8004180:	20020944 	.word	0x20020944
 8004184:	2001192c 	.word	0x2001192c
 8004188:	20011944 	.word	0x20011944
 800418c:	20020958 	.word	0x20020958
 8004190:	20020948 	.word	0x20020948
 8004194:	2002094c 	.word	0x2002094c
 8004198:	20020953 	.word	0x20020953
 800419c:	42c80000 	.word	0x42c80000
        if(DragFromRPM < DragToRPM)
 80041a0:	4b6f      	ldr	r3, [pc, #444]	; (8004360 <acis_loop+0xb48>)
 80041a2:	ed93 7a00 	vldr	s14, [r3]
 80041a6:	4b6f      	ldr	r3, [pc, #444]	; (8004364 <acis_loop+0xb4c>)
 80041a8:	edd3 7a00 	vldr	s15, [r3]
 80041ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b4:	d564      	bpl.n	8004280 <acis_loop+0xa68>
          if(rpm > DragFromRPM)
 80041b6:	4b6a      	ldr	r3, [pc, #424]	; (8004360 <acis_loop+0xb48>)
 80041b8:	edd3 7a00 	vldr	s15, [r3]
 80041bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80041c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c8:	dd56      	ble.n	8004278 <acis_loop+0xa60>
            if(DragTimeLast != 0)
 80041ca:	4b67      	ldr	r3, [pc, #412]	; (8004368 <acis_loop+0xb50>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 80c2 	beq.w	8004358 <acis_loop+0xb40>
              DragTimeLast = now;
 80041d4:	4a64      	ldr	r2, [pc, #400]	; (8004368 <acis_loop+0xb50>)
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	6013      	str	r3, [r2, #0]
              DragStarted = 1;
 80041da:	4b64      	ldr	r3, [pc, #400]	; (800436c <acis_loop+0xb54>)
 80041dc:	2201      	movs	r2, #1
 80041de:	701a      	strb	r2, [r3, #0]
              DragStatus = 0;
 80041e0:	4b63      	ldr	r3, [pc, #396]	; (8004370 <acis_loop+0xb58>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	701a      	strb	r2, [r3, #0]
              DragPointsCount = 0;
 80041e6:	4b63      	ldr	r3, [pc, #396]	; (8004374 <acis_loop+0xb5c>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
              DragStartTime = now;
 80041ec:	4a62      	ldr	r2, [pc, #392]	; (8004378 <acis_loop+0xb60>)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	6013      	str	r3, [r2, #0]
              DragPoints[DragPointsCount].Ignition = angle_ignite;
 80041f2:	4b60      	ldr	r3, [pc, #384]	; (8004374 <acis_loop+0xb5c>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b61      	ldr	r3, [pc, #388]	; (800437c <acis_loop+0xb64>)
 80041f8:	6819      	ldr	r1, [r3, #0]
 80041fa:	4861      	ldr	r0, [pc, #388]	; (8004380 <acis_loop+0xb68>)
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4403      	add	r3, r0
 8004206:	330c      	adds	r3, #12
 8004208:	6019      	str	r1, [r3, #0]
              DragPoints[DragPointsCount].RPM = rpm;
 800420a:	4b5a      	ldr	r3, [pc, #360]	; (8004374 <acis_loop+0xb5c>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	495c      	ldr	r1, [pc, #368]	; (8004380 <acis_loop+0xb68>)
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	601a      	str	r2, [r3, #0]
              DragPoints[DragPointsCount].Pressure = pressure;
 800421e:	4b55      	ldr	r3, [pc, #340]	; (8004374 <acis_loop+0xb5c>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4957      	ldr	r1, [pc, #348]	; (8004380 <acis_loop+0xb68>)
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	3304      	adds	r3, #4
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	601a      	str	r2, [r3, #0]
              DragPoints[DragPointsCount].Load = load;
 8004234:	4b4f      	ldr	r3, [pc, #316]	; (8004374 <acis_loop+0xb5c>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4951      	ldr	r1, [pc, #324]	; (8004380 <acis_loop+0xb68>)
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	3308      	adds	r3, #8
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	601a      	str	r2, [r3, #0]
              DragPoints[DragPointsCount].Time = DelayDiff(now, DragStartTime);
 800424a:	4b4b      	ldr	r3, [pc, #300]	; (8004378 <acis_loop+0xb60>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	4b49      	ldr	r3, [pc, #292]	; (8004374 <acis_loop+0xb5c>)
 8004250:	681c      	ldr	r4, [r3, #0]
 8004252:	4611      	mov	r1, r2
 8004254:	69f8      	ldr	r0, [r7, #28]
 8004256:	f004 f865 	bl	8008324 <DelayDiff>
 800425a:	4601      	mov	r1, r0
 800425c:	4a48      	ldr	r2, [pc, #288]	; (8004380 <acis_loop+0xb68>)
 800425e:	4623      	mov	r3, r4
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4423      	add	r3, r4
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	3310      	adds	r3, #16
 800426a:	6019      	str	r1, [r3, #0]
              DragPointsCount++;
 800426c:	4b41      	ldr	r3, [pc, #260]	; (8004374 <acis_loop+0xb5c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3301      	adds	r3, #1
 8004272:	4a40      	ldr	r2, [pc, #256]	; (8004374 <acis_loop+0xb5c>)
 8004274:	6013      	str	r3, [r2, #0]
}
 8004276:	e06f      	b.n	8004358 <acis_loop+0xb40>
            DragTimeLast = now;
 8004278:	4a3b      	ldr	r2, [pc, #236]	; (8004368 <acis_loop+0xb50>)
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	6013      	str	r3, [r2, #0]
}
 800427e:	e06b      	b.n	8004358 <acis_loop+0xb40>
        else if(DragFromRPM > DragToRPM)
 8004280:	4b37      	ldr	r3, [pc, #220]	; (8004360 <acis_loop+0xb48>)
 8004282:	ed93 7a00 	vldr	s14, [r3]
 8004286:	4b37      	ldr	r3, [pc, #220]	; (8004364 <acis_loop+0xb4c>)
 8004288:	edd3 7a00 	vldr	s15, [r3]
 800428c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004294:	dc00      	bgt.n	8004298 <acis_loop+0xa80>
}
 8004296:	e05f      	b.n	8004358 <acis_loop+0xb40>
          if(rpm < DragFromRPM)
 8004298:	4b31      	ldr	r3, [pc, #196]	; (8004360 <acis_loop+0xb48>)
 800429a:	edd3 7a00 	vldr	s15, [r3]
 800429e:	ed97 7a06 	vldr	s14, [r7, #24]
 80042a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042aa:	d552      	bpl.n	8004352 <acis_loop+0xb3a>
            if(DragTimeLast != 0)
 80042ac:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <acis_loop+0xb50>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d051      	beq.n	8004358 <acis_loop+0xb40>
              DragTimeLast = now;
 80042b4:	4a2c      	ldr	r2, [pc, #176]	; (8004368 <acis_loop+0xb50>)
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	6013      	str	r3, [r2, #0]
              DragStarted = 1;
 80042ba:	4b2c      	ldr	r3, [pc, #176]	; (800436c <acis_loop+0xb54>)
 80042bc:	2201      	movs	r2, #1
 80042be:	701a      	strb	r2, [r3, #0]
              DragPointsCount = 0;
 80042c0:	4b2c      	ldr	r3, [pc, #176]	; (8004374 <acis_loop+0xb5c>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
              DragStartTime = now;
 80042c6:	4a2c      	ldr	r2, [pc, #176]	; (8004378 <acis_loop+0xb60>)
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	6013      	str	r3, [r2, #0]
              DragPoints[DragPointsCount].Ignition = angle_ignite;
 80042cc:	4b29      	ldr	r3, [pc, #164]	; (8004374 <acis_loop+0xb5c>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	4b2a      	ldr	r3, [pc, #168]	; (800437c <acis_loop+0xb64>)
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	482a      	ldr	r0, [pc, #168]	; (8004380 <acis_loop+0xb68>)
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4403      	add	r3, r0
 80042e0:	330c      	adds	r3, #12
 80042e2:	6019      	str	r1, [r3, #0]
              DragPoints[DragPointsCount].RPM = rpm;
 80042e4:	4b23      	ldr	r3, [pc, #140]	; (8004374 <acis_loop+0xb5c>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4925      	ldr	r1, [pc, #148]	; (8004380 <acis_loop+0xb68>)
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	601a      	str	r2, [r3, #0]
              DragPoints[DragPointsCount].Pressure = pressure;
 80042f8:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <acis_loop+0xb5c>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	4920      	ldr	r1, [pc, #128]	; (8004380 <acis_loop+0xb68>)
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	3304      	adds	r3, #4
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	601a      	str	r2, [r3, #0]
              DragPoints[DragPointsCount].Load = load;
 800430e:	4b19      	ldr	r3, [pc, #100]	; (8004374 <acis_loop+0xb5c>)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	491b      	ldr	r1, [pc, #108]	; (8004380 <acis_loop+0xb68>)
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	3308      	adds	r3, #8
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	601a      	str	r2, [r3, #0]
              DragPoints[DragPointsCount].Time = DelayDiff(now, DragStartTime);
 8004324:	4b14      	ldr	r3, [pc, #80]	; (8004378 <acis_loop+0xb60>)
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	4b12      	ldr	r3, [pc, #72]	; (8004374 <acis_loop+0xb5c>)
 800432a:	681c      	ldr	r4, [r3, #0]
 800432c:	4611      	mov	r1, r2
 800432e:	69f8      	ldr	r0, [r7, #28]
 8004330:	f003 fff8 	bl	8008324 <DelayDiff>
 8004334:	4601      	mov	r1, r0
 8004336:	4a12      	ldr	r2, [pc, #72]	; (8004380 <acis_loop+0xb68>)
 8004338:	4623      	mov	r3, r4
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4423      	add	r3, r4
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	3310      	adds	r3, #16
 8004344:	6019      	str	r1, [r3, #0]
              DragPointsCount++;
 8004346:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <acis_loop+0xb5c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3301      	adds	r3, #1
 800434c:	4a09      	ldr	r2, [pc, #36]	; (8004374 <acis_loop+0xb5c>)
 800434e:	6013      	str	r3, [r2, #0]
}
 8004350:	e002      	b.n	8004358 <acis_loop+0xb40>
            DragTimeLast = now;
 8004352:	4a05      	ldr	r2, [pc, #20]	; (8004368 <acis_loop+0xb50>)
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	6013      	str	r3, [r2, #0]
}
 8004358:	bf00      	nop
 800435a:	3744      	adds	r7, #68	; 0x44
 800435c:	46bd      	mov	sp, r7
 800435e:	bd90      	pop	{r4, r7, pc}
 8004360:	20020948 	.word	0x20020948
 8004364:	2002094c 	.word	0x2002094c
 8004368:	20020954 	.word	0x20020954
 800436c:	20020951 	.word	0x20020951
 8004370:	20020953 	.word	0x20020953
 8004374:	20020944 	.word	0x20020944
 8004378:	20020958 	.word	0x20020958
 800437c:	2001192c 	.word	0x2001192c
 8004380:	20011944 	.word	0x20011944

08004384 <acis_parse_command>:

void acis_parse_command(eTransChannels xChaSrc, uint8_t * msgBuf, uint32_t length)
{
 8004384:	b5b0      	push	{r4, r5, r7, lr}
 8004386:	b08e      	sub	sp, #56	; 0x38
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	73fb      	strb	r3, [r7, #15]
  static uint32_t pclastsent = 0;
  uint32_t now = Delay_Tick;
 8004392:	4b83      	ldr	r3, [pc, #524]	; (80045a0 <acis_parse_command+0x21c>)
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t size;
  uint32_t table;
  uint32_t tablesize;
  uint32_t configsize;
  uint32_t dragpoint;
  uint32_t realconfigsize = (uint32_t)&acis_config.tables[0] - (uint32_t)&acis_config;
 8004398:	23c0      	movs	r3, #192	; 0xc0
 800439a:	633b      	str	r3, [r7, #48]	; 0x30
  if(xChaSrc == etrPC)
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d114      	bne.n	80043cc <acis_parse_command+0x48>
  {
    if(DelayDiff(now, pclastsent) > 500000)
 80043a2:	4b80      	ldr	r3, [pc, #512]	; (80045a4 <acis_parse_command+0x220>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4619      	mov	r1, r3
 80043a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80043aa:	f003 ffbb 	bl	8008324 <DelayDiff>
 80043ae:	4602      	mov	r2, r0
 80043b0:	4b7d      	ldr	r3, [pc, #500]	; (80045a8 <acis_parse_command+0x224>)
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d90a      	bls.n	80043cc <acis_parse_command+0x48>
    {
      pclastsent = now;
 80043b6:	4a7b      	ldr	r2, [pc, #492]	; (80045a4 <acis_parse_command+0x220>)
 80043b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ba:	6013      	str	r3, [r2, #0]
      PK_PcConnected.Destination = etrCTRL;
 80043bc:	4b7b      	ldr	r3, [pc, #492]	; (80045ac <acis_parse_command+0x228>)
 80043be:	2203      	movs	r2, #3
 80043c0:	709a      	strb	r2, [r3, #2]
      protPushSequence(&fifoSendingQueue, &PK_PcConnected, sizeof(PK_PcConnected));
 80043c2:	2204      	movs	r2, #4
 80043c4:	4979      	ldr	r1, [pc, #484]	; (80045ac <acis_parse_command+0x228>)
 80043c6:	487a      	ldr	r0, [pc, #488]	; (80045b0 <acis_parse_command+0x22c>)
 80043c8:	f007 fa25 	bl	800b816 <protPushSequence>
    }
  }
  switch(msgBuf[0])
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	2b17      	cmp	r3, #23
 80043d4:	f200 851b 	bhi.w	8004e0e <acis_parse_command+0xa8a>
 80043d8:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <acis_parse_command+0x5c>)
 80043da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043de:	bf00      	nop
 80043e0:	08004441 	.word	0x08004441
 80043e4:	08004465 	.word	0x08004465
 80043e8:	08004471 	.word	0x08004471
 80043ec:	08004e0f 	.word	0x08004e0f
 80043f0:	080045f9 	.word	0x080045f9
 80043f4:	080046f7 	.word	0x080046f7
 80043f8:	08004de9 	.word	0x08004de9
 80043fc:	080047f1 	.word	0x080047f1
 8004400:	080048c1 	.word	0x080048c1
 8004404:	08004ddf 	.word	0x08004ddf
 8004408:	08004975 	.word	0x08004975
 800440c:	080049cd 	.word	0x080049cd
 8004410:	08004e0f 	.word	0x08004e0f
 8004414:	08004e0f 	.word	0x08004e0f
 8004418:	08004a55 	.word	0x08004a55
 800441c:	08004bd1 	.word	0x08004bd1
 8004420:	08004e0f 	.word	0x08004e0f
 8004424:	08004b49 	.word	0x08004b49
 8004428:	08004d19 	.word	0x08004d19
 800442c:	08004e0f 	.word	0x08004e0f
 8004430:	08004e0f 	.word	0x08004e0f
 8004434:	08004e0f 	.word	0x08004e0f
 8004438:	08004e0f 	.word	0x08004e0f
 800443c:	08004df3 	.word	0x08004df3
  {
    case PK_PingID :
      PK_Copy(&PK_Ping, msgBuf);
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	485c      	ldr	r0, [pc, #368]	; (80045b4 <acis_parse_command+0x230>)
 8004444:	f7fc fc8a 	bl	8000d5c <PK_Copy>
      PK_Pong.RandomPong = PK_Ping.RandomPing;
 8004448:	4b5a      	ldr	r3, [pc, #360]	; (80045b4 <acis_parse_command+0x230>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	4a5a      	ldr	r2, [pc, #360]	; (80045b8 <acis_parse_command+0x234>)
 800444e:	6053      	str	r3, [r2, #4]
      PK_Pong.Destination = xChaSrc;
 8004450:	4a59      	ldr	r2, [pc, #356]	; (80045b8 <acis_parse_command+0x234>)
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	7093      	strb	r3, [r2, #2]
      protPushSequence(&fifoSendingQueue, &PK_Pong, sizeof(PK_Pong));
 8004456:	2208      	movs	r2, #8
 8004458:	4957      	ldr	r1, [pc, #348]	; (80045b8 <acis_parse_command+0x234>)
 800445a:	4855      	ldr	r0, [pc, #340]	; (80045b0 <acis_parse_command+0x22c>)
 800445c:	f007 f9db 	bl	800b816 <protPushSequence>
      break;
 8004460:	f000 bcd8 	b.w	8004e14 <acis_parse_command+0xa90>

    case PK_PongID :
      PK_Copy(&PK_Pong, msgBuf);
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	4854      	ldr	r0, [pc, #336]	; (80045b8 <acis_parse_command+0x234>)
 8004468:	f7fc fc78 	bl	8000d5c <PK_Copy>
      (void)PK_Pong.RandomPong;
      break;
 800446c:	f000 bcd2 	b.w	8004e14 <acis_parse_command+0xa90>

    case PK_GeneralStatusRequestID :
      //PK_Copy(&PK_GeneralStatusRequest, msgBuf);
      PK_GeneralStatusResponse.Destination = xChaSrc;
 8004470:	4a52      	ldr	r2, [pc, #328]	; (80045bc <acis_parse_command+0x238>)
 8004472:	7bfb      	ldrb	r3, [r7, #15]
 8004474:	7093      	strb	r3, [r2, #2]
      PK_GeneralStatusResponse.RealRPM = csps_getrpm();
 8004476:	f003 fe37 	bl	80080e8 <csps_getrpm>
 800447a:	eef0 7a40 	vmov.f32	s15, s0
 800447e:	4b4f      	ldr	r3, [pc, #316]	; (80045bc <acis_parse_command+0x238>)
 8004480:	edc3 7a05 	vstr	s15, [r3, #20]
      PK_GeneralStatusResponse.RPM = csps_getrpmgui();
 8004484:	f003 fe3e 	bl	8008104 <csps_getrpmgui>
 8004488:	eef0 7a40 	vmov.f32	s15, s0
 800448c:	4b4b      	ldr	r3, [pc, #300]	; (80045bc <acis_parse_command+0x238>)
 800448e:	edc3 7a06 	vstr	s15, [r3, #24]
      PK_GeneralStatusResponse.Pressure = map_getpressure();
 8004492:	f004 ff5f 	bl	8009354 <map_getpressure>
 8004496:	eef0 7a40 	vmov.f32	s15, s0
 800449a:	4b48      	ldr	r3, [pc, #288]	; (80045bc <acis_parse_command+0x238>)
 800449c:	edc3 7a07 	vstr	s15, [r3, #28]
      PK_GeneralStatusResponse.Load = map_getpressure() / 110000.0f * 100.0f;
 80044a0:	f004 ff58 	bl	8009354 <map_getpressure>
 80044a4:	eef0 6a40 	vmov.f32	s13, s0
 80044a8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80045c0 <acis_parse_command+0x23c>
 80044ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044b0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80045c4 <acis_parse_command+0x240>
 80044b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044b8:	4b40      	ldr	r3, [pc, #256]	; (80045bc <acis_parse_command+0x238>)
 80044ba:	edc3 7a08 	vstr	s15, [r3, #32]
      PK_GeneralStatusResponse.IgnitionAngle = angle_ignite;
 80044be:	4b42      	ldr	r3, [pc, #264]	; (80045c8 <acis_parse_command+0x244>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a3e      	ldr	r2, [pc, #248]	; (80045bc <acis_parse_command+0x238>)
 80044c4:	6253      	str	r3, [r2, #36]	; 0x24
      PK_GeneralStatusResponse.Voltage = power_voltage;
 80044c6:	4b41      	ldr	r3, [pc, #260]	; (80045cc <acis_parse_command+0x248>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a3c      	ldr	r2, [pc, #240]	; (80045bc <acis_parse_command+0x238>)
 80044cc:	62d3      	str	r3, [r2, #44]	; 0x2c
      PK_GeneralStatusResponse.Temperature = engine_temperature;
 80044ce:	4b40      	ldr	r3, [pc, #256]	; (80045d0 <acis_parse_command+0x24c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a3a      	ldr	r2, [pc, #232]	; (80045bc <acis_parse_command+0x238>)
 80044d4:	6313      	str	r3, [r2, #48]	; 0x30
      PK_GeneralStatusResponse.valvenum = valve_current;
 80044d6:	4b3f      	ldr	r3, [pc, #252]	; (80045d4 <acis_parse_command+0x250>)
 80044d8:	781a      	ldrb	r2, [r3, #0]
 80044da:	4b38      	ldr	r3, [pc, #224]	; (80045bc <acis_parse_command+0x238>)
 80044dc:	715a      	strb	r2, [r3, #5]
      PK_GeneralStatusResponse.check = (PK_GeneralStatusResponse.RPM < 10.0f && PK_GeneralStatusResponse.Pressure < 85000) ||
 80044de:	4b37      	ldr	r3, [pc, #220]	; (80045bc <acis_parse_command+0x238>)
 80044e0:	edd3 7a06 	vldr	s15, [r3, #24]
          csps_iserror() || (hall_error > 1.0f) || PK_GeneralStatusResponse.Load == 0.0f || StatusInit != HAL_OK;
 80044e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80044e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f0:	d509      	bpl.n	8004506 <acis_parse_command+0x182>
      PK_GeneralStatusResponse.check = (PK_GeneralStatusResponse.RPM < 10.0f && PK_GeneralStatusResponse.Pressure < 85000) ||
 80044f2:	4b32      	ldr	r3, [pc, #200]	; (80045bc <acis_parse_command+0x238>)
 80044f4:	edd3 7a07 	vldr	s15, [r3, #28]
 80044f8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80045d8 <acis_parse_command+0x254>
 80044fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004504:	d41a      	bmi.n	800453c <acis_parse_command+0x1b8>
          csps_iserror() || (hall_error > 1.0f) || PK_GeneralStatusResponse.Load == 0.0f || StatusInit != HAL_OK;
 8004506:	f003 fe3f 	bl	8008188 <csps_iserror>
 800450a:	4603      	mov	r3, r0
      PK_GeneralStatusResponse.check = (PK_GeneralStatusResponse.RPM < 10.0f && PK_GeneralStatusResponse.Pressure < 85000) ||
 800450c:	2b00      	cmp	r3, #0
 800450e:	d115      	bne.n	800453c <acis_parse_command+0x1b8>
          csps_iserror() || (hall_error > 1.0f) || PK_GeneralStatusResponse.Load == 0.0f || StatusInit != HAL_OK;
 8004510:	4b32      	ldr	r3, [pc, #200]	; (80045dc <acis_parse_command+0x258>)
 8004512:	edd3 7a00 	vldr	s15, [r3]
 8004516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800451a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800451e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004522:	dc0b      	bgt.n	800453c <acis_parse_command+0x1b8>
 8004524:	4b25      	ldr	r3, [pc, #148]	; (80045bc <acis_parse_command+0x238>)
 8004526:	edd3 7a08 	vldr	s15, [r3, #32]
 800452a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800452e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004532:	d003      	beq.n	800453c <acis_parse_command+0x1b8>
 8004534:	4b2a      	ldr	r3, [pc, #168]	; (80045e0 <acis_parse_command+0x25c>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <acis_parse_command+0x1bc>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <acis_parse_command+0x1be>
 8004540:	2300      	movs	r3, #0
      PK_GeneralStatusResponse.check = (PK_GeneralStatusResponse.RPM < 10.0f && PK_GeneralStatusResponse.Pressure < 85000) ||
 8004542:	b2da      	uxtb	r2, r3
 8004544:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <acis_parse_command+0x238>)
 8004546:	719a      	strb	r2, [r3, #6]
      PK_GeneralStatusResponse.tablenum = table_current;
 8004548:	4b26      	ldr	r3, [pc, #152]	; (80045e4 <acis_parse_command+0x260>)
 800454a:	781a      	ldrb	r2, [r3, #0]
 800454c:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <acis_parse_command+0x238>)
 800454e:	711a      	strb	r2, [r3, #4]
      if(StatusInit == HAL_OK) strcpy(PK_GeneralStatusResponse.tablename, PK_GeneralStatusResponse.tablenum < TABLE_SETUPS_MAX ? (char*)acis_config.tables[PK_GeneralStatusResponse.tablenum].name : (char*)"");
 8004550:	4b23      	ldr	r3, [pc, #140]	; (80045e0 <acis_parse_command+0x25c>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d114      	bne.n	8004582 <acis_parse_command+0x1fe>
 8004558:	4b18      	ldr	r3, [pc, #96]	; (80045bc <acis_parse_command+0x238>)
 800455a:	791b      	ldrb	r3, [r3, #4]
 800455c:	2b03      	cmp	r3, #3
 800455e:	d80a      	bhi.n	8004576 <acis_parse_command+0x1f2>
 8004560:	4b16      	ldr	r3, [pc, #88]	; (80045bc <acis_parse_command+0x238>)
 8004562:	791b      	ldrb	r3, [r3, #4]
 8004564:	461a      	mov	r2, r3
 8004566:	f640 436c 	movw	r3, #3180	; 0xc6c
 800456a:	fb03 f302 	mul.w	r3, r3, r2
 800456e:	33c0      	adds	r3, #192	; 0xc0
 8004570:	4a1d      	ldr	r2, [pc, #116]	; (80045e8 <acis_parse_command+0x264>)
 8004572:	4413      	add	r3, r2
 8004574:	e000      	b.n	8004578 <acis_parse_command+0x1f4>
 8004576:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <acis_parse_command+0x268>)
 8004578:	4619      	mov	r1, r3
 800457a:	481d      	ldr	r0, [pc, #116]	; (80045f0 <acis_parse_command+0x26c>)
 800457c:	f00d fc41 	bl	8011e02 <strcpy>
 8004580:	e007      	b.n	8004592 <acis_parse_command+0x20e>
      else strcpy(PK_GeneralStatusResponse.tablename, "Flash Error");
 8004582:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <acis_parse_command+0x238>)
 8004584:	4a1b      	ldr	r2, [pc, #108]	; (80045f4 <acis_parse_command+0x270>)
 8004586:	1ddc      	adds	r4, r3, #7
 8004588:	4613      	mov	r3, r2
 800458a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800458c:	6020      	str	r0, [r4, #0]
 800458e:	6061      	str	r1, [r4, #4]
 8004590:	60a2      	str	r2, [r4, #8]
      protPushSequence(&fifoSendingQueue, &PK_GeneralStatusResponse, sizeof(PK_GeneralStatusResponse));
 8004592:	2234      	movs	r2, #52	; 0x34
 8004594:	4909      	ldr	r1, [pc, #36]	; (80045bc <acis_parse_command+0x238>)
 8004596:	4806      	ldr	r0, [pc, #24]	; (80045b0 <acis_parse_command+0x22c>)
 8004598:	f007 f93d 	bl	800b816 <protPushSequence>
      break;
 800459c:	f000 bc3a 	b.w	8004e14 <acis_parse_command+0xa90>
 80045a0:	40000c00 	.word	0x40000c00
 80045a4:	20021144 	.word	0x20021144
 80045a8:	0007a120 	.word	0x0007a120
 80045ac:	20010480 	.word	0x20010480
 80045b0:	200210f0 	.word	0x200210f0
 80045b4:	20010000 	.word	0x20010000
 80045b8:	20010020 	.word	0x20010020
 80045bc:	20010040 	.word	0x20010040
 80045c0:	47d6d800 	.word	0x47d6d800
 80045c4:	42c80000 	.word	0x42c80000
 80045c8:	2001192c 	.word	0x2001192c
 80045cc:	2001193c 	.word	0x2001193c
 80045d0:	20011938 	.word	0x20011938
 80045d4:	20011935 	.word	0x20011935
 80045d8:	47a60400 	.word	0x47a60400
 80045dc:	20011920 	.word	0x20011920
 80045e0:	200104a6 	.word	0x200104a6
 80045e4:	20011934 	.word	0x20011934
 80045e8:	200214a0 	.word	0x200214a0
 80045ec:	08011edc 	.word	0x08011edc
 80045f0:	20010047 	.word	0x20010047
 80045f4:	08011ee0 	.word	0x08011ee0

    case PK_TableMemoryRequestID :
      PK_Copy(&PK_TableMemoryRequest, msgBuf);
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	4877      	ldr	r0, [pc, #476]	; (80047d8 <acis_parse_command+0x454>)
 80045fc:	f7fc fbae 	bl	8000d5c <PK_Copy>
      PK_TableMemoryData.Destination = xChaSrc;
 8004600:	4a76      	ldr	r2, [pc, #472]	; (80047dc <acis_parse_command+0x458>)
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	7093      	strb	r3, [r2, #2]
      offset = PK_TableMemoryData.offset = PK_TableMemoryRequest.offset;
 8004606:	4b74      	ldr	r3, [pc, #464]	; (80047d8 <acis_parse_command+0x454>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	4a74      	ldr	r2, [pc, #464]	; (80047dc <acis_parse_command+0x458>)
 800460c:	6113      	str	r3, [r2, #16]
 800460e:	4b73      	ldr	r3, [pc, #460]	; (80047dc <acis_parse_command+0x458>)
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	62bb      	str	r3, [r7, #40]	; 0x28
      size = PK_TableMemoryData.size = PK_TableMemoryRequest.size;
 8004614:	4b70      	ldr	r3, [pc, #448]	; (80047d8 <acis_parse_command+0x454>)
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	4a70      	ldr	r2, [pc, #448]	; (80047dc <acis_parse_command+0x458>)
 800461a:	6153      	str	r3, [r2, #20]
 800461c:	4b6f      	ldr	r3, [pc, #444]	; (80047dc <acis_parse_command+0x458>)
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
      table = PK_TableMemoryData.table = PK_TableMemoryRequest.table;
 8004622:	4b6d      	ldr	r3, [pc, #436]	; (80047d8 <acis_parse_command+0x454>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	4a6d      	ldr	r2, [pc, #436]	; (80047dc <acis_parse_command+0x458>)
 8004628:	6093      	str	r3, [r2, #8]
 800462a:	4b6c      	ldr	r3, [pc, #432]	; (80047dc <acis_parse_command+0x458>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	61bb      	str	r3, [r7, #24]
      tablesize = PK_TableMemoryData.tablesize = PK_TableMemoryRequest.tablesize;
 8004630:	4b69      	ldr	r3, [pc, #420]	; (80047d8 <acis_parse_command+0x454>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	4a69      	ldr	r2, [pc, #420]	; (80047dc <acis_parse_command+0x458>)
 8004636:	60d3      	str	r3, [r2, #12]
 8004638:	4b68      	ldr	r3, [pc, #416]	; (80047dc <acis_parse_command+0x458>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	617b      	str	r3, [r7, #20]
      PK_TableMemoryData.ErrorCode = 0;
 800463e:	4b67      	ldr	r3, [pc, #412]	; (80047dc <acis_parse_command+0x458>)
 8004640:	2200      	movs	r2, #0
 8004642:	605a      	str	r2, [r3, #4]

      if(tablesize != sizeof(sAcisIgnTable))
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f640 426c 	movw	r2, #3180	; 0xc6c
 800464a:	4293      	cmp	r3, r2
 800464c:	d002      	beq.n	8004654 <acis_parse_command+0x2d0>
        PK_TableMemoryData.ErrorCode = 1;
 800464e:	4b63      	ldr	r3, [pc, #396]	; (80047dc <acis_parse_command+0x458>)
 8004650:	2201      	movs	r2, #1
 8004652:	605a      	str	r2, [r3, #4]

      if(size + offset > sizeof(sAcisIgnTable))
 8004654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	4413      	add	r3, r2
 800465a:	f640 426c 	movw	r2, #3180	; 0xc6c
 800465e:	4293      	cmp	r3, r2
 8004660:	d902      	bls.n	8004668 <acis_parse_command+0x2e4>
        PK_TableMemoryData.ErrorCode = 2;
 8004662:	4b5e      	ldr	r3, [pc, #376]	; (80047dc <acis_parse_command+0x458>)
 8004664:	2202      	movs	r2, #2
 8004666:	605a      	str	r2, [r3, #4]

      if(size > PACKET_TABLE_MAX_SIZE || size > sizeof(sAcisIgnTable))
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	2be0      	cmp	r3, #224	; 0xe0
 800466c:	d804      	bhi.n	8004678 <acis_parse_command+0x2f4>
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	f640 426c 	movw	r2, #3180	; 0xc6c
 8004674:	4293      	cmp	r3, r2
 8004676:	d902      	bls.n	800467e <acis_parse_command+0x2fa>
        PK_TableMemoryData.ErrorCode = 3;
 8004678:	4b58      	ldr	r3, [pc, #352]	; (80047dc <acis_parse_command+0x458>)
 800467a:	2203      	movs	r2, #3
 800467c:	605a      	str	r2, [r3, #4]

      if(table >= TABLE_SETUPS_MAX)
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b03      	cmp	r3, #3
 8004682:	d902      	bls.n	800468a <acis_parse_command+0x306>
        PK_TableMemoryData.ErrorCode = 4;
 8004684:	4b55      	ldr	r3, [pc, #340]	; (80047dc <acis_parse_command+0x458>)
 8004686:	2204      	movs	r2, #4
 8004688:	605a      	str	r2, [r3, #4]

      if(PK_TableMemoryData.ErrorCode == 0)
 800468a:	4b54      	ldr	r3, [pc, #336]	; (80047dc <acis_parse_command+0x458>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d123      	bne.n	80046da <acis_parse_command+0x356>
      {
        memcpy(&PK_TableMemoryData.data[0], &((uint8_t*)&acis_config.tables[table])[offset], size);
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	f640 426c 	movw	r2, #3180	; 0xc6c
 8004698:	fb02 f303 	mul.w	r3, r2, r3
 800469c:	33c0      	adds	r3, #192	; 0xc0
 800469e:	4a50      	ldr	r2, [pc, #320]	; (80047e0 <acis_parse_command+0x45c>)
 80046a0:	441a      	add	r2, r3
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	4413      	add	r3, r2
 80046a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a8:	4619      	mov	r1, r3
 80046aa:	484e      	ldr	r0, [pc, #312]	; (80047e4 <acis_parse_command+0x460>)
 80046ac:	f00d fb96 	bl	8011ddc <memcpy>
        memset(&PK_TableMemoryData.data[size], 0, sizeof(PK_TableMemoryData.data) - size);
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	3318      	adds	r3, #24
 80046b4:	4a49      	ldr	r2, [pc, #292]	; (80047dc <acis_parse_command+0x458>)
 80046b6:	4413      	add	r3, r2
 80046b8:	1c98      	adds	r0, r3, #2
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	f1c3 03e0 	rsb	r3, r3, #224	; 0xe0
 80046c0:	461a      	mov	r2, r3
 80046c2:	2100      	movs	r1, #0
 80046c4:	f00d fb95 	bl	8011df2 <memset>
        PK_TableMemoryData.crc = CRC16_Generate(PK_TableMemoryData.data, sizeof(PK_TableMemoryData.data));
 80046c8:	21e0      	movs	r1, #224	; 0xe0
 80046ca:	4846      	ldr	r0, [pc, #280]	; (80047e4 <acis_parse_command+0x460>)
 80046cc:	f003 f820 	bl	8007710 <CRC16_Generate>
 80046d0:	4603      	mov	r3, r0
 80046d2:	461a      	mov	r2, r3
 80046d4:	4b41      	ldr	r3, [pc, #260]	; (80047dc <acis_parse_command+0x458>)
 80046d6:	831a      	strh	r2, [r3, #24]
 80046d8:	e007      	b.n	80046ea <acis_parse_command+0x366>
      }
      else
      {
        memset(&PK_TableMemoryData.data[0], 0, sizeof(PK_TableMemoryData.data));
 80046da:	22e0      	movs	r2, #224	; 0xe0
 80046dc:	2100      	movs	r1, #0
 80046de:	4841      	ldr	r0, [pc, #260]	; (80047e4 <acis_parse_command+0x460>)
 80046e0:	f00d fb87 	bl	8011df2 <memset>
        PK_TableMemoryData.crc = 0;
 80046e4:	4b3d      	ldr	r3, [pc, #244]	; (80047dc <acis_parse_command+0x458>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	831a      	strh	r2, [r3, #24]
      }
      protPushSequence(&fifoSendingQueue, &PK_TableMemoryData, sizeof(PK_TableMemoryData));
 80046ea:	22fc      	movs	r2, #252	; 0xfc
 80046ec:	493b      	ldr	r1, [pc, #236]	; (80047dc <acis_parse_command+0x458>)
 80046ee:	483e      	ldr	r0, [pc, #248]	; (80047e8 <acis_parse_command+0x464>)
 80046f0:	f007 f891 	bl	800b816 <protPushSequence>
      break;
 80046f4:	e38e      	b.n	8004e14 <acis_parse_command+0xa90>

    case PK_TableMemoryDataID :
      PK_Copy(&PK_TableMemoryData, msgBuf);
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	4838      	ldr	r0, [pc, #224]	; (80047dc <acis_parse_command+0x458>)
 80046fa:	f7fc fb2f 	bl	8000d5c <PK_Copy>
      PK_TableMemoryAcknowledge.Destination = xChaSrc;
 80046fe:	4a3b      	ldr	r2, [pc, #236]	; (80047ec <acis_parse_command+0x468>)
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	7093      	strb	r3, [r2, #2]
      offset = PK_TableMemoryAcknowledge.offset = PK_TableMemoryData.offset;
 8004704:	4b35      	ldr	r3, [pc, #212]	; (80047dc <acis_parse_command+0x458>)
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	4a38      	ldr	r2, [pc, #224]	; (80047ec <acis_parse_command+0x468>)
 800470a:	6113      	str	r3, [r2, #16]
 800470c:	4b37      	ldr	r3, [pc, #220]	; (80047ec <acis_parse_command+0x468>)
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
      size = PK_TableMemoryAcknowledge.size = PK_TableMemoryData.size;
 8004712:	4b32      	ldr	r3, [pc, #200]	; (80047dc <acis_parse_command+0x458>)
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	4a35      	ldr	r2, [pc, #212]	; (80047ec <acis_parse_command+0x468>)
 8004718:	6153      	str	r3, [r2, #20]
 800471a:	4b34      	ldr	r3, [pc, #208]	; (80047ec <acis_parse_command+0x468>)
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
      table = PK_TableMemoryAcknowledge.table = PK_TableMemoryData.table;
 8004720:	4b2e      	ldr	r3, [pc, #184]	; (80047dc <acis_parse_command+0x458>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	4a31      	ldr	r2, [pc, #196]	; (80047ec <acis_parse_command+0x468>)
 8004726:	6093      	str	r3, [r2, #8]
 8004728:	4b30      	ldr	r3, [pc, #192]	; (80047ec <acis_parse_command+0x468>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	61bb      	str	r3, [r7, #24]
      tablesize = PK_TableMemoryAcknowledge.tablesize = PK_TableMemoryData.tablesize;
 800472e:	4b2b      	ldr	r3, [pc, #172]	; (80047dc <acis_parse_command+0x458>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	4a2e      	ldr	r2, [pc, #184]	; (80047ec <acis_parse_command+0x468>)
 8004734:	60d3      	str	r3, [r2, #12]
 8004736:	4b2d      	ldr	r3, [pc, #180]	; (80047ec <acis_parse_command+0x468>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	617b      	str	r3, [r7, #20]
      PK_TableMemoryAcknowledge.ErrorCode = 0;
 800473c:	4b2b      	ldr	r3, [pc, #172]	; (80047ec <acis_parse_command+0x468>)
 800473e:	2200      	movs	r2, #0
 8004740:	605a      	str	r2, [r3, #4]

      if(tablesize != sizeof(sAcisIgnTable))
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f640 426c 	movw	r2, #3180	; 0xc6c
 8004748:	4293      	cmp	r3, r2
 800474a:	d002      	beq.n	8004752 <acis_parse_command+0x3ce>
        PK_TableMemoryAcknowledge.ErrorCode = 1;
 800474c:	4b27      	ldr	r3, [pc, #156]	; (80047ec <acis_parse_command+0x468>)
 800474e:	2201      	movs	r2, #1
 8004750:	605a      	str	r2, [r3, #4]

      if(size + offset > sizeof(sAcisIgnTable))
 8004752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	4413      	add	r3, r2
 8004758:	f640 426c 	movw	r2, #3180	; 0xc6c
 800475c:	4293      	cmp	r3, r2
 800475e:	d902      	bls.n	8004766 <acis_parse_command+0x3e2>
        PK_TableMemoryAcknowledge.ErrorCode = 2;
 8004760:	4b22      	ldr	r3, [pc, #136]	; (80047ec <acis_parse_command+0x468>)
 8004762:	2202      	movs	r2, #2
 8004764:	605a      	str	r2, [r3, #4]

      if(size > PACKET_TABLE_MAX_SIZE || size > sizeof(sAcisIgnTable))
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	2be0      	cmp	r3, #224	; 0xe0
 800476a:	d804      	bhi.n	8004776 <acis_parse_command+0x3f2>
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	f640 426c 	movw	r2, #3180	; 0xc6c
 8004772:	4293      	cmp	r3, r2
 8004774:	d902      	bls.n	800477c <acis_parse_command+0x3f8>
        PK_TableMemoryAcknowledge.ErrorCode = 3;
 8004776:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <acis_parse_command+0x468>)
 8004778:	2203      	movs	r2, #3
 800477a:	605a      	str	r2, [r3, #4]

      if(table >= TABLE_SETUPS_MAX)
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	2b03      	cmp	r3, #3
 8004780:	d902      	bls.n	8004788 <acis_parse_command+0x404>
        PK_TableMemoryAcknowledge.ErrorCode = 4;
 8004782:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <acis_parse_command+0x468>)
 8004784:	2204      	movs	r2, #4
 8004786:	605a      	str	r2, [r3, #4]

      if(PK_TableMemoryAcknowledge.ErrorCode == 0)
 8004788:	4b18      	ldr	r3, [pc, #96]	; (80047ec <acis_parse_command+0x468>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d11d      	bne.n	80047cc <acis_parse_command+0x448>
      {
        uint16_t crc = CRC16_Generate(PK_TableMemoryData.data, sizeof(PK_TableMemoryData.data));
 8004790:	21e0      	movs	r1, #224	; 0xe0
 8004792:	4814      	ldr	r0, [pc, #80]	; (80047e4 <acis_parse_command+0x460>)
 8004794:	f002 ffbc 	bl	8007710 <CRC16_Generate>
 8004798:	4603      	mov	r3, r0
 800479a:	827b      	strh	r3, [r7, #18]
        if(crc == PK_TableMemoryData.crc)
 800479c:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <acis_parse_command+0x458>)
 800479e:	8b1b      	ldrh	r3, [r3, #24]
 80047a0:	8a7a      	ldrh	r2, [r7, #18]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d10f      	bne.n	80047c6 <acis_parse_command+0x442>
        {
          memcpy(&((uint8_t*)&acis_config.tables[table])[offset], &PK_TableMemoryData.data[0], size);
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	f640 426c 	movw	r2, #3180	; 0xc6c
 80047ac:	fb02 f303 	mul.w	r3, r2, r3
 80047b0:	33c0      	adds	r3, #192	; 0xc0
 80047b2:	4a0b      	ldr	r2, [pc, #44]	; (80047e0 <acis_parse_command+0x45c>)
 80047b4:	441a      	add	r2, r3
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	4413      	add	r3, r2
 80047ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047bc:	4909      	ldr	r1, [pc, #36]	; (80047e4 <acis_parse_command+0x460>)
 80047be:	4618      	mov	r0, r3
 80047c0:	f00d fb0c 	bl	8011ddc <memcpy>
 80047c4:	e002      	b.n	80047cc <acis_parse_command+0x448>
        }
        else
          PK_TableMemoryAcknowledge.ErrorCode = 5;
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <acis_parse_command+0x468>)
 80047c8:	2205      	movs	r2, #5
 80047ca:	605a      	str	r2, [r3, #4]
      }

      protPushSequence(&fifoSendingQueue, &PK_TableMemoryAcknowledge, sizeof(PK_TableMemoryAcknowledge));
 80047cc:	2218      	movs	r2, #24
 80047ce:	4907      	ldr	r1, [pc, #28]	; (80047ec <acis_parse_command+0x468>)
 80047d0:	4805      	ldr	r0, [pc, #20]	; (80047e8 <acis_parse_command+0x464>)
 80047d2:	f007 f820 	bl	800b816 <protPushSequence>
      break;
 80047d6:	e31d      	b.n	8004e14 <acis_parse_command+0xa90>
 80047d8:	20010080 	.word	0x20010080
 80047dc:	200100a0 	.word	0x200100a0
 80047e0:	200214a0 	.word	0x200214a0
 80047e4:	200100ba 	.word	0x200100ba
 80047e8:	200210f0 	.word	0x200210f0
 80047ec:	200101a0 	.word	0x200101a0

    case PK_ConfigMemoryRequestID :
      PK_Copy(&PK_ConfigMemoryRequest, msgBuf);
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	488b      	ldr	r0, [pc, #556]	; (8004a20 <acis_parse_command+0x69c>)
 80047f4:	f7fc fab2 	bl	8000d5c <PK_Copy>
      PK_ConfigMemoryData.Destination = xChaSrc;
 80047f8:	4a8a      	ldr	r2, [pc, #552]	; (8004a24 <acis_parse_command+0x6a0>)
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	7093      	strb	r3, [r2, #2]
      offset = PK_ConfigMemoryData.offset = PK_ConfigMemoryRequest.offset;
 80047fe:	4b88      	ldr	r3, [pc, #544]	; (8004a20 <acis_parse_command+0x69c>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	4a88      	ldr	r2, [pc, #544]	; (8004a24 <acis_parse_command+0x6a0>)
 8004804:	60d3      	str	r3, [r2, #12]
 8004806:	4b87      	ldr	r3, [pc, #540]	; (8004a24 <acis_parse_command+0x6a0>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	62bb      	str	r3, [r7, #40]	; 0x28
      size = PK_ConfigMemoryData.size = PK_ConfigMemoryRequest.size;
 800480c:	4b84      	ldr	r3, [pc, #528]	; (8004a20 <acis_parse_command+0x69c>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4a84      	ldr	r2, [pc, #528]	; (8004a24 <acis_parse_command+0x6a0>)
 8004812:	6113      	str	r3, [r2, #16]
 8004814:	4b83      	ldr	r3, [pc, #524]	; (8004a24 <acis_parse_command+0x6a0>)
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
      configsize = PK_ConfigMemoryData.configsize = PK_ConfigMemoryRequest.configsize;
 800481a:	4b81      	ldr	r3, [pc, #516]	; (8004a20 <acis_parse_command+0x69c>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	4a81      	ldr	r2, [pc, #516]	; (8004a24 <acis_parse_command+0x6a0>)
 8004820:	6093      	str	r3, [r2, #8]
 8004822:	4b80      	ldr	r3, [pc, #512]	; (8004a24 <acis_parse_command+0x6a0>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	623b      	str	r3, [r7, #32]
      PK_ConfigMemoryData.ErrorCode = 0;
 8004828:	4b7e      	ldr	r3, [pc, #504]	; (8004a24 <acis_parse_command+0x6a0>)
 800482a:	2200      	movs	r2, #0
 800482c:	605a      	str	r2, [r3, #4]

      if(configsize != realconfigsize)
 800482e:	6a3a      	ldr	r2, [r7, #32]
 8004830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004832:	429a      	cmp	r2, r3
 8004834:	d002      	beq.n	800483c <acis_parse_command+0x4b8>
        PK_ConfigMemoryData.ErrorCode = 1;
 8004836:	4b7b      	ldr	r3, [pc, #492]	; (8004a24 <acis_parse_command+0x6a0>)
 8004838:	2201      	movs	r2, #1
 800483a:	605a      	str	r2, [r3, #4]

      if(size + offset > realconfigsize)
 800483c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	4413      	add	r3, r2
 8004842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004844:	429a      	cmp	r2, r3
 8004846:	d202      	bcs.n	800484e <acis_parse_command+0x4ca>
        PK_ConfigMemoryData.ErrorCode = 2;
 8004848:	4b76      	ldr	r3, [pc, #472]	; (8004a24 <acis_parse_command+0x6a0>)
 800484a:	2202      	movs	r2, #2
 800484c:	605a      	str	r2, [r3, #4]

      if(size > realconfigsize || size > PACKET_CONFIG_MAX_SIZE)
 800484e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	429a      	cmp	r2, r3
 8004854:	d802      	bhi.n	800485c <acis_parse_command+0x4d8>
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	2be0      	cmp	r3, #224	; 0xe0
 800485a:	d902      	bls.n	8004862 <acis_parse_command+0x4de>
        PK_ConfigMemoryData.ErrorCode = 3;
 800485c:	4b71      	ldr	r3, [pc, #452]	; (8004a24 <acis_parse_command+0x6a0>)
 800485e:	2203      	movs	r2, #3
 8004860:	605a      	str	r2, [r3, #4]

      if(PK_ConfigMemoryData.ErrorCode == 0)
 8004862:	4b70      	ldr	r3, [pc, #448]	; (8004a24 <acis_parse_command+0x6a0>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d11c      	bne.n	80048a4 <acis_parse_command+0x520>
      {
        memcpy(&PK_ConfigMemoryData.data[0], &((uint8_t*)&acis_config)[offset], size);
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	4a6e      	ldr	r2, [pc, #440]	; (8004a28 <acis_parse_command+0x6a4>)
 800486e:	4413      	add	r3, r2
 8004870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004872:	4619      	mov	r1, r3
 8004874:	486d      	ldr	r0, [pc, #436]	; (8004a2c <acis_parse_command+0x6a8>)
 8004876:	f00d fab1 	bl	8011ddc <memcpy>
        memset(&PK_ConfigMemoryData.data[size], 0, sizeof(PK_ConfigMemoryData.data) - size);
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	3310      	adds	r3, #16
 800487e:	4a69      	ldr	r2, [pc, #420]	; (8004a24 <acis_parse_command+0x6a0>)
 8004880:	4413      	add	r3, r2
 8004882:	1d98      	adds	r0, r3, #6
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	f1c3 03e0 	rsb	r3, r3, #224	; 0xe0
 800488a:	461a      	mov	r2, r3
 800488c:	2100      	movs	r1, #0
 800488e:	f00d fab0 	bl	8011df2 <memset>
        PK_ConfigMemoryData.crc = CRC16_Generate(PK_ConfigMemoryData.data, sizeof(PK_ConfigMemoryData.data));
 8004892:	21e0      	movs	r1, #224	; 0xe0
 8004894:	4865      	ldr	r0, [pc, #404]	; (8004a2c <acis_parse_command+0x6a8>)
 8004896:	f002 ff3b 	bl	8007710 <CRC16_Generate>
 800489a:	4603      	mov	r3, r0
 800489c:	461a      	mov	r2, r3
 800489e:	4b61      	ldr	r3, [pc, #388]	; (8004a24 <acis_parse_command+0x6a0>)
 80048a0:	829a      	strh	r2, [r3, #20]
 80048a2:	e007      	b.n	80048b4 <acis_parse_command+0x530>
      }
      else
      {
        memset(&PK_ConfigMemoryData.data[0], 0, sizeof(PK_ConfigMemoryData.data));
 80048a4:	22e0      	movs	r2, #224	; 0xe0
 80048a6:	2100      	movs	r1, #0
 80048a8:	4860      	ldr	r0, [pc, #384]	; (8004a2c <acis_parse_command+0x6a8>)
 80048aa:	f00d faa2 	bl	8011df2 <memset>
        PK_ConfigMemoryData.crc = 0;
 80048ae:	4b5d      	ldr	r3, [pc, #372]	; (8004a24 <acis_parse_command+0x6a0>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	829a      	strh	r2, [r3, #20]
      }
      protPushSequence(&fifoSendingQueue, &PK_ConfigMemoryData, sizeof(PK_ConfigMemoryData));
 80048b4:	22f8      	movs	r2, #248	; 0xf8
 80048b6:	495b      	ldr	r1, [pc, #364]	; (8004a24 <acis_parse_command+0x6a0>)
 80048b8:	485d      	ldr	r0, [pc, #372]	; (8004a30 <acis_parse_command+0x6ac>)
 80048ba:	f006 ffac 	bl	800b816 <protPushSequence>
      break;
 80048be:	e2a9      	b.n	8004e14 <acis_parse_command+0xa90>

    case PK_ConfigMemoryDataID :
      PK_Copy(&PK_ConfigMemoryData, msgBuf);
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	4858      	ldr	r0, [pc, #352]	; (8004a24 <acis_parse_command+0x6a0>)
 80048c4:	f7fc fa4a 	bl	8000d5c <PK_Copy>
      PK_ConfigMemoryAcknowledge.Destination = xChaSrc;
 80048c8:	4a5a      	ldr	r2, [pc, #360]	; (8004a34 <acis_parse_command+0x6b0>)
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	7093      	strb	r3, [r2, #2]
      offset = PK_ConfigMemoryAcknowledge.offset = PK_ConfigMemoryData.offset;
 80048ce:	4b55      	ldr	r3, [pc, #340]	; (8004a24 <acis_parse_command+0x6a0>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	4a58      	ldr	r2, [pc, #352]	; (8004a34 <acis_parse_command+0x6b0>)
 80048d4:	60d3      	str	r3, [r2, #12]
 80048d6:	4b57      	ldr	r3, [pc, #348]	; (8004a34 <acis_parse_command+0x6b0>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	62bb      	str	r3, [r7, #40]	; 0x28
      size = PK_ConfigMemoryAcknowledge.size = PK_ConfigMemoryData.size;
 80048dc:	4b51      	ldr	r3, [pc, #324]	; (8004a24 <acis_parse_command+0x6a0>)
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	4a54      	ldr	r2, [pc, #336]	; (8004a34 <acis_parse_command+0x6b0>)
 80048e2:	6113      	str	r3, [r2, #16]
 80048e4:	4b53      	ldr	r3, [pc, #332]	; (8004a34 <acis_parse_command+0x6b0>)
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
      configsize = PK_ConfigMemoryAcknowledge.configsize = PK_ConfigMemoryData.configsize;
 80048ea:	4b4e      	ldr	r3, [pc, #312]	; (8004a24 <acis_parse_command+0x6a0>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	4a51      	ldr	r2, [pc, #324]	; (8004a34 <acis_parse_command+0x6b0>)
 80048f0:	6093      	str	r3, [r2, #8]
 80048f2:	4b50      	ldr	r3, [pc, #320]	; (8004a34 <acis_parse_command+0x6b0>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	623b      	str	r3, [r7, #32]
      PK_ConfigMemoryAcknowledge.ErrorCode = 0;
 80048f8:	4b4e      	ldr	r3, [pc, #312]	; (8004a34 <acis_parse_command+0x6b0>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	605a      	str	r2, [r3, #4]

      if(configsize != realconfigsize)
 80048fe:	6a3a      	ldr	r2, [r7, #32]
 8004900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004902:	429a      	cmp	r2, r3
 8004904:	d002      	beq.n	800490c <acis_parse_command+0x588>
        PK_ConfigMemoryData.ErrorCode = 1;
 8004906:	4b47      	ldr	r3, [pc, #284]	; (8004a24 <acis_parse_command+0x6a0>)
 8004908:	2201      	movs	r2, #1
 800490a:	605a      	str	r2, [r3, #4]

      if(size + offset > realconfigsize)
 800490c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	4413      	add	r3, r2
 8004912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004914:	429a      	cmp	r2, r3
 8004916:	d202      	bcs.n	800491e <acis_parse_command+0x59a>
        PK_ConfigMemoryData.ErrorCode = 2;
 8004918:	4b42      	ldr	r3, [pc, #264]	; (8004a24 <acis_parse_command+0x6a0>)
 800491a:	2202      	movs	r2, #2
 800491c:	605a      	str	r2, [r3, #4]

      if(size > realconfigsize || size > PACKET_CONFIG_MAX_SIZE)
 800491e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	429a      	cmp	r2, r3
 8004924:	d802      	bhi.n	800492c <acis_parse_command+0x5a8>
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	2be0      	cmp	r3, #224	; 0xe0
 800492a:	d902      	bls.n	8004932 <acis_parse_command+0x5ae>
        PK_ConfigMemoryData.ErrorCode = 3;
 800492c:	4b3d      	ldr	r3, [pc, #244]	; (8004a24 <acis_parse_command+0x6a0>)
 800492e:	2203      	movs	r2, #3
 8004930:	605a      	str	r2, [r3, #4]

      if(PK_ConfigMemoryAcknowledge.ErrorCode == 0)
 8004932:	4b40      	ldr	r3, [pc, #256]	; (8004a34 <acis_parse_command+0x6b0>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d116      	bne.n	8004968 <acis_parse_command+0x5e4>
      {
        uint16_t crc = CRC16_Generate(PK_ConfigMemoryData.data, sizeof(PK_ConfigMemoryData.data));
 800493a:	21e0      	movs	r1, #224	; 0xe0
 800493c:	483b      	ldr	r0, [pc, #236]	; (8004a2c <acis_parse_command+0x6a8>)
 800493e:	f002 fee7 	bl	8007710 <CRC16_Generate>
 8004942:	4603      	mov	r3, r0
 8004944:	83fb      	strh	r3, [r7, #30]
        if(crc == PK_ConfigMemoryData.crc)
 8004946:	4b37      	ldr	r3, [pc, #220]	; (8004a24 <acis_parse_command+0x6a0>)
 8004948:	8a9b      	ldrh	r3, [r3, #20]
 800494a:	8bfa      	ldrh	r2, [r7, #30]
 800494c:	429a      	cmp	r2, r3
 800494e:	d108      	bne.n	8004962 <acis_parse_command+0x5de>
        {
          memcpy(&((uint8_t*)&acis_config)[offset], &PK_ConfigMemoryData.data[0], size);
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	4a35      	ldr	r2, [pc, #212]	; (8004a28 <acis_parse_command+0x6a4>)
 8004954:	4413      	add	r3, r2
 8004956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004958:	4934      	ldr	r1, [pc, #208]	; (8004a2c <acis_parse_command+0x6a8>)
 800495a:	4618      	mov	r0, r3
 800495c:	f00d fa3e 	bl	8011ddc <memcpy>
 8004960:	e002      	b.n	8004968 <acis_parse_command+0x5e4>
        }
        else
          PK_ConfigMemoryAcknowledge.ErrorCode = 5;
 8004962:	4b34      	ldr	r3, [pc, #208]	; (8004a34 <acis_parse_command+0x6b0>)
 8004964:	2205      	movs	r2, #5
 8004966:	605a      	str	r2, [r3, #4]
      }

      protPushSequence(&fifoSendingQueue, &PK_ConfigMemoryAcknowledge, sizeof(PK_ConfigMemoryAcknowledge));
 8004968:	2214      	movs	r2, #20
 800496a:	4932      	ldr	r1, [pc, #200]	; (8004a34 <acis_parse_command+0x6b0>)
 800496c:	4830      	ldr	r0, [pc, #192]	; (8004a30 <acis_parse_command+0x6ac>)
 800496e:	f006 ff52 	bl	800b816 <protPushSequence>
      break;
 8004972:	e24f      	b.n	8004e14 <acis_parse_command+0xa90>

    case PK_SaveConfigID :
      if(!savereq)
 8004974:	4b30      	ldr	r3, [pc, #192]	; (8004a38 <acis_parse_command+0x6b4>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <acis_parse_command+0x60e>
      {
        savereqsrc = xChaSrc;
 800497e:	4a2f      	ldr	r2, [pc, #188]	; (8004a3c <acis_parse_command+0x6b8>)
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	7013      	strb	r3, [r2, #0]
        savereq = 1;
 8004984:	4b2c      	ldr	r3, [pc, #176]	; (8004a38 <acis_parse_command+0x6b4>)
 8004986:	2201      	movs	r2, #1
 8004988:	701a      	strb	r2, [r3, #0]
        CanDeinit = 0;
 800498a:	4b2d      	ldr	r3, [pc, #180]	; (8004a40 <acis_parse_command+0x6bc>)
 800498c:	2200      	movs	r2, #0
 800498e:	701a      	strb	r2, [r3, #0]
      {
        PK_SaveConfigAcknowledge.Destination = xChaSrc;
        PK_SaveConfigAcknowledge.ErrorCode = 2;
        protPushSequence(&fifoSendingQueue, &PK_SaveConfigAcknowledge, sizeof(PK_SaveConfigAcknowledge));
      }
      break;
 8004990:	e240      	b.n	8004e14 <acis_parse_command+0xa90>
      else if(loadreq)
 8004992:	4b2c      	ldr	r3, [pc, #176]	; (8004a44 <acis_parse_command+0x6c0>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00b      	beq.n	80049b4 <acis_parse_command+0x630>
        PK_SaveConfigAcknowledge.Destination = xChaSrc;
 800499c:	4a2a      	ldr	r2, [pc, #168]	; (8004a48 <acis_parse_command+0x6c4>)
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	7093      	strb	r3, [r2, #2]
        PK_SaveConfigAcknowledge.ErrorCode = 3;
 80049a2:	4b29      	ldr	r3, [pc, #164]	; (8004a48 <acis_parse_command+0x6c4>)
 80049a4:	2203      	movs	r2, #3
 80049a6:	605a      	str	r2, [r3, #4]
        protPushSequence(&fifoSendingQueue, &PK_SaveConfigAcknowledge, sizeof(PK_SaveConfigAcknowledge));
 80049a8:	2208      	movs	r2, #8
 80049aa:	4927      	ldr	r1, [pc, #156]	; (8004a48 <acis_parse_command+0x6c4>)
 80049ac:	4820      	ldr	r0, [pc, #128]	; (8004a30 <acis_parse_command+0x6ac>)
 80049ae:	f006 ff32 	bl	800b816 <protPushSequence>
      break;
 80049b2:	e22f      	b.n	8004e14 <acis_parse_command+0xa90>
        PK_SaveConfigAcknowledge.Destination = xChaSrc;
 80049b4:	4a24      	ldr	r2, [pc, #144]	; (8004a48 <acis_parse_command+0x6c4>)
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	7093      	strb	r3, [r2, #2]
        PK_SaveConfigAcknowledge.ErrorCode = 2;
 80049ba:	4b23      	ldr	r3, [pc, #140]	; (8004a48 <acis_parse_command+0x6c4>)
 80049bc:	2202      	movs	r2, #2
 80049be:	605a      	str	r2, [r3, #4]
        protPushSequence(&fifoSendingQueue, &PK_SaveConfigAcknowledge, sizeof(PK_SaveConfigAcknowledge));
 80049c0:	2208      	movs	r2, #8
 80049c2:	4921      	ldr	r1, [pc, #132]	; (8004a48 <acis_parse_command+0x6c4>)
 80049c4:	481a      	ldr	r0, [pc, #104]	; (8004a30 <acis_parse_command+0x6ac>)
 80049c6:	f006 ff26 	bl	800b816 <protPushSequence>
      break;
 80049ca:	e223      	b.n	8004e14 <acis_parse_command+0xa90>


    case PK_RestoreConfigID :
      if(!loadreq)
 80049cc:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <acis_parse_command+0x6c0>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <acis_parse_command+0x660>
      {
        loadreqsrc = xChaSrc;
 80049d6:	4a1d      	ldr	r2, [pc, #116]	; (8004a4c <acis_parse_command+0x6c8>)
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	7013      	strb	r3, [r2, #0]
        loadreq = 1;
 80049dc:	4b19      	ldr	r3, [pc, #100]	; (8004a44 <acis_parse_command+0x6c0>)
 80049de:	2201      	movs	r2, #1
 80049e0:	701a      	strb	r2, [r3, #0]
      {
        PK_RestoreConfigAcknowledge.Destination = xChaSrc;
        PK_RestoreConfigAcknowledge.ErrorCode = 2;
        protPushSequence(&fifoSendingQueue, &PK_RestoreConfigAcknowledge, sizeof(PK_RestoreConfigAcknowledge));
      }
      break;
 80049e2:	e217      	b.n	8004e14 <acis_parse_command+0xa90>
      else if(savereq)
 80049e4:	4b14      	ldr	r3, [pc, #80]	; (8004a38 <acis_parse_command+0x6b4>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <acis_parse_command+0x682>
        PK_RestoreConfigAcknowledge.Destination = xChaSrc;
 80049ee:	4a18      	ldr	r2, [pc, #96]	; (8004a50 <acis_parse_command+0x6cc>)
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	7093      	strb	r3, [r2, #2]
        PK_RestoreConfigAcknowledge.ErrorCode = 3;
 80049f4:	4b16      	ldr	r3, [pc, #88]	; (8004a50 <acis_parse_command+0x6cc>)
 80049f6:	2203      	movs	r2, #3
 80049f8:	605a      	str	r2, [r3, #4]
        protPushSequence(&fifoSendingQueue, &PK_RestoreConfigAcknowledge, sizeof(PK_RestoreConfigAcknowledge));
 80049fa:	2208      	movs	r2, #8
 80049fc:	4914      	ldr	r1, [pc, #80]	; (8004a50 <acis_parse_command+0x6cc>)
 80049fe:	480c      	ldr	r0, [pc, #48]	; (8004a30 <acis_parse_command+0x6ac>)
 8004a00:	f006 ff09 	bl	800b816 <protPushSequence>
      break;
 8004a04:	e206      	b.n	8004e14 <acis_parse_command+0xa90>
        PK_RestoreConfigAcknowledge.Destination = xChaSrc;
 8004a06:	4a12      	ldr	r2, [pc, #72]	; (8004a50 <acis_parse_command+0x6cc>)
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	7093      	strb	r3, [r2, #2]
        PK_RestoreConfigAcknowledge.ErrorCode = 2;
 8004a0c:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <acis_parse_command+0x6cc>)
 8004a0e:	2202      	movs	r2, #2
 8004a10:	605a      	str	r2, [r3, #4]
        protPushSequence(&fifoSendingQueue, &PK_RestoreConfigAcknowledge, sizeof(PK_RestoreConfigAcknowledge));
 8004a12:	2208      	movs	r2, #8
 8004a14:	490e      	ldr	r1, [pc, #56]	; (8004a50 <acis_parse_command+0x6cc>)
 8004a16:	4806      	ldr	r0, [pc, #24]	; (8004a30 <acis_parse_command+0x6ac>)
 8004a18:	f006 fefd 	bl	800b816 <protPushSequence>
      break;
 8004a1c:	e1fa      	b.n	8004e14 <acis_parse_command+0xa90>
 8004a1e:	bf00      	nop
 8004a20:	200101c0 	.word	0x200101c0
 8004a24:	200101e0 	.word	0x200101e0
 8004a28:	200214a0 	.word	0x200214a0
 8004a2c:	200101f6 	.word	0x200101f6
 8004a30:	200210f0 	.word	0x200210f0
 8004a34:	200102e0 	.word	0x200102e0
 8004a38:	2002095c 	.word	0x2002095c
 8004a3c:	20020960 	.word	0x20020960
 8004a40:	20011914 	.word	0x20011914
 8004a44:	2002095d 	.word	0x2002095d
 8004a48:	20010300 	.word	0x20010300
 8004a4c:	20020961 	.word	0x20020961
 8004a50:	20010320 	.word	0x20010320

    case PK_DragStartID :
      PK_Copy(&PK_DragStart, msgBuf);
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	489b      	ldr	r0, [pc, #620]	; (8004cc4 <acis_parse_command+0x940>)
 8004a58:	f7fc f980 	bl	8000d5c <PK_Copy>
      PK_DragStartAcknowledge.Destination = xChaSrc;
 8004a5c:	4a9a      	ldr	r2, [pc, #616]	; (8004cc8 <acis_parse_command+0x944>)
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	7093      	strb	r3, [r2, #2]
      DragFromRPM = PK_DragStartAcknowledge.FromRPM = PK_DragStart.FromRPM;
 8004a62:	4b98      	ldr	r3, [pc, #608]	; (8004cc4 <acis_parse_command+0x940>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	4a98      	ldr	r2, [pc, #608]	; (8004cc8 <acis_parse_command+0x944>)
 8004a68:	6093      	str	r3, [r2, #8]
 8004a6a:	4b97      	ldr	r3, [pc, #604]	; (8004cc8 <acis_parse_command+0x944>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	4a97      	ldr	r2, [pc, #604]	; (8004ccc <acis_parse_command+0x948>)
 8004a70:	6013      	str	r3, [r2, #0]
      DragToRPM = PK_DragStartAcknowledge.ToRPM = PK_DragStart.ToRPM;
 8004a72:	4b94      	ldr	r3, [pc, #592]	; (8004cc4 <acis_parse_command+0x940>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	4a94      	ldr	r2, [pc, #592]	; (8004cc8 <acis_parse_command+0x944>)
 8004a78:	60d3      	str	r3, [r2, #12]
 8004a7a:	4b93      	ldr	r3, [pc, #588]	; (8004cc8 <acis_parse_command+0x944>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	4a94      	ldr	r2, [pc, #592]	; (8004cd0 <acis_parse_command+0x94c>)
 8004a80:	6013      	str	r3, [r2, #0]
      DragStarted = 0;
 8004a82:	4b94      	ldr	r3, [pc, #592]	; (8004cd4 <acis_parse_command+0x950>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
      DragReady = 0;
 8004a88:	4b93      	ldr	r3, [pc, #588]	; (8004cd8 <acis_parse_command+0x954>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	701a      	strb	r2, [r3, #0]
      DragCompleted = 0;
 8004a8e:	4b93      	ldr	r3, [pc, #588]	; (8004cdc <acis_parse_command+0x958>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	701a      	strb	r2, [r3, #0]
      DragPointsCount = 0;
 8004a94:	4b92      	ldr	r3, [pc, #584]	; (8004ce0 <acis_parse_command+0x95c>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
      DragStartTime = 0;
 8004a9a:	4b92      	ldr	r3, [pc, #584]	; (8004ce4 <acis_parse_command+0x960>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
      DragTimeLast = 0;
 8004aa0:	4b91      	ldr	r3, [pc, #580]	; (8004ce8 <acis_parse_command+0x964>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
      if(DragFromRPM > 100.0f && DragFromRPM < 20000.0f && DragToRPM > 100.0f && DragToRPM < 20000.0f && fabsf(DragFromRPM - DragToRPM) > 70.0f)
 8004aa6:	4b89      	ldr	r3, [pc, #548]	; (8004ccc <acis_parse_command+0x948>)
 8004aa8:	edd3 7a00 	vldr	s15, [r3]
 8004aac:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8004cec <acis_parse_command+0x968>
 8004ab0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab8:	dd39      	ble.n	8004b2e <acis_parse_command+0x7aa>
 8004aba:	4b84      	ldr	r3, [pc, #528]	; (8004ccc <acis_parse_command+0x948>)
 8004abc:	edd3 7a00 	vldr	s15, [r3]
 8004ac0:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8004cf0 <acis_parse_command+0x96c>
 8004ac4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004acc:	d52f      	bpl.n	8004b2e <acis_parse_command+0x7aa>
 8004ace:	4b80      	ldr	r3, [pc, #512]	; (8004cd0 <acis_parse_command+0x94c>)
 8004ad0:	edd3 7a00 	vldr	s15, [r3]
 8004ad4:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8004cec <acis_parse_command+0x968>
 8004ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae0:	dd25      	ble.n	8004b2e <acis_parse_command+0x7aa>
 8004ae2:	4b7b      	ldr	r3, [pc, #492]	; (8004cd0 <acis_parse_command+0x94c>)
 8004ae4:	edd3 7a00 	vldr	s15, [r3]
 8004ae8:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8004cf0 <acis_parse_command+0x96c>
 8004aec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af4:	d51b      	bpl.n	8004b2e <acis_parse_command+0x7aa>
 8004af6:	4b75      	ldr	r3, [pc, #468]	; (8004ccc <acis_parse_command+0x948>)
 8004af8:	ed93 7a00 	vldr	s14, [r3]
 8004afc:	4b74      	ldr	r3, [pc, #464]	; (8004cd0 <acis_parse_command+0x94c>)
 8004afe:	edd3 7a00 	vldr	s15, [r3]
 8004b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b06:	eef0 7ae7 	vabs.f32	s15, s15
 8004b0a:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8004cf4 <acis_parse_command+0x970>
 8004b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b16:	dd0a      	ble.n	8004b2e <acis_parse_command+0x7aa>
      {
        DragStatus = PK_DragStartAcknowledge.ErrorCode = 0;
 8004b18:	4b6b      	ldr	r3, [pc, #428]	; (8004cc8 <acis_parse_command+0x944>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	711a      	strb	r2, [r3, #4]
 8004b1e:	4b6a      	ldr	r3, [pc, #424]	; (8004cc8 <acis_parse_command+0x944>)
 8004b20:	791a      	ldrb	r2, [r3, #4]
 8004b22:	4b75      	ldr	r3, [pc, #468]	; (8004cf8 <acis_parse_command+0x974>)
 8004b24:	701a      	strb	r2, [r3, #0]
        DragReady = 1;
 8004b26:	4b6c      	ldr	r3, [pc, #432]	; (8004cd8 <acis_parse_command+0x954>)
 8004b28:	2201      	movs	r2, #1
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	e006      	b.n	8004b3c <acis_parse_command+0x7b8>
      }
      else DragStatus = PK_DragStartAcknowledge.ErrorCode = 1;
 8004b2e:	4b66      	ldr	r3, [pc, #408]	; (8004cc8 <acis_parse_command+0x944>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	711a      	strb	r2, [r3, #4]
 8004b34:	4b64      	ldr	r3, [pc, #400]	; (8004cc8 <acis_parse_command+0x944>)
 8004b36:	791a      	ldrb	r2, [r3, #4]
 8004b38:	4b6f      	ldr	r3, [pc, #444]	; (8004cf8 <acis_parse_command+0x974>)
 8004b3a:	701a      	strb	r2, [r3, #0]
      protPushSequence(&fifoSendingQueue, &PK_DragStartAcknowledge, sizeof(PK_DragStartAcknowledge));
 8004b3c:	2210      	movs	r2, #16
 8004b3e:	4962      	ldr	r1, [pc, #392]	; (8004cc8 <acis_parse_command+0x944>)
 8004b40:	486e      	ldr	r0, [pc, #440]	; (8004cfc <acis_parse_command+0x978>)
 8004b42:	f006 fe68 	bl	800b816 <protPushSequence>
      break;
 8004b46:	e165      	b.n	8004e14 <acis_parse_command+0xa90>

    case PK_DragStopID :
      PK_Copy(&PK_DragStop, msgBuf);
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	486d      	ldr	r0, [pc, #436]	; (8004d00 <acis_parse_command+0x97c>)
 8004b4c:	f7fc f906 	bl	8000d5c <PK_Copy>
      PK_DragStopAcknowledge.Destination = xChaSrc;
 8004b50:	4a6c      	ldr	r2, [pc, #432]	; (8004d04 <acis_parse_command+0x980>)
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	7093      	strb	r3, [r2, #2]
      PK_DragStopAcknowledge.FromRPM = PK_DragStop.FromRPM;
 8004b56:	4b6a      	ldr	r3, [pc, #424]	; (8004d00 <acis_parse_command+0x97c>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	4a6a      	ldr	r2, [pc, #424]	; (8004d04 <acis_parse_command+0x980>)
 8004b5c:	6093      	str	r3, [r2, #8]
      PK_DragStopAcknowledge.ToRPM = PK_DragStop.ToRPM;
 8004b5e:	4b68      	ldr	r3, [pc, #416]	; (8004d00 <acis_parse_command+0x97c>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	4a68      	ldr	r2, [pc, #416]	; (8004d04 <acis_parse_command+0x980>)
 8004b64:	60d3      	str	r3, [r2, #12]
      DragStatus = PK_DragStopAcknowledge.ErrorCode = 0;
 8004b66:	4b67      	ldr	r3, [pc, #412]	; (8004d04 <acis_parse_command+0x980>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	711a      	strb	r2, [r3, #4]
 8004b6c:	4b65      	ldr	r3, [pc, #404]	; (8004d04 <acis_parse_command+0x980>)
 8004b6e:	791a      	ldrb	r2, [r3, #4]
 8004b70:	4b61      	ldr	r3, [pc, #388]	; (8004cf8 <acis_parse_command+0x974>)
 8004b72:	701a      	strb	r2, [r3, #0]
      DragStarted = 0;
 8004b74:	4b57      	ldr	r3, [pc, #348]	; (8004cd4 <acis_parse_command+0x950>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	701a      	strb	r2, [r3, #0]
      DragReady = 0;
 8004b7a:	4b57      	ldr	r3, [pc, #348]	; (8004cd8 <acis_parse_command+0x954>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
      DragCompleted = 0;
 8004b80:	4b56      	ldr	r3, [pc, #344]	; (8004cdc <acis_parse_command+0x958>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
      DragPointsCount = 0;
 8004b86:	4b56      	ldr	r3, [pc, #344]	; (8004ce0 <acis_parse_command+0x95c>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
      DragStartTime = 0;
 8004b8c:	4b55      	ldr	r3, [pc, #340]	; (8004ce4 <acis_parse_command+0x960>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]
      if(DragFromRPM != PK_DragStop.FromRPM || DragToRPM != PK_DragStop.ToRPM)
 8004b92:	4b5b      	ldr	r3, [pc, #364]	; (8004d00 <acis_parse_command+0x97c>)
 8004b94:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b98:	4b4c      	ldr	r3, [pc, #304]	; (8004ccc <acis_parse_command+0x948>)
 8004b9a:	edd3 7a00 	vldr	s15, [r3]
 8004b9e:	eeb4 7a67 	vcmp.f32	s14, s15
 8004ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba6:	d10a      	bne.n	8004bbe <acis_parse_command+0x83a>
 8004ba8:	4b55      	ldr	r3, [pc, #340]	; (8004d00 <acis_parse_command+0x97c>)
 8004baa:	ed93 7a02 	vldr	s14, [r3, #8]
 8004bae:	4b48      	ldr	r3, [pc, #288]	; (8004cd0 <acis_parse_command+0x94c>)
 8004bb0:	edd3 7a00 	vldr	s15, [r3]
 8004bb4:	eeb4 7a67 	vcmp.f32	s14, s15
 8004bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bbc:	d002      	beq.n	8004bc4 <acis_parse_command+0x840>
      {
        PK_DragStopAcknowledge.ErrorCode = 2;
 8004bbe:	4b51      	ldr	r3, [pc, #324]	; (8004d04 <acis_parse_command+0x980>)
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	711a      	strb	r2, [r3, #4]
      }
      protPushSequence(&fifoSendingQueue, &PK_DragStopAcknowledge, sizeof(PK_DragStopAcknowledge));
 8004bc4:	2210      	movs	r2, #16
 8004bc6:	494f      	ldr	r1, [pc, #316]	; (8004d04 <acis_parse_command+0x980>)
 8004bc8:	484c      	ldr	r0, [pc, #304]	; (8004cfc <acis_parse_command+0x978>)
 8004bca:	f006 fe24 	bl	800b816 <protPushSequence>
      break;
 8004bce:	e121      	b.n	8004e14 <acis_parse_command+0xa90>

    case PK_DragUpdateRequestID :
      PK_Copy(&PK_DragUpdateRequest, msgBuf);
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	484d      	ldr	r0, [pc, #308]	; (8004d08 <acis_parse_command+0x984>)
 8004bd4:	f7fc f8c2 	bl	8000d5c <PK_Copy>
      PK_DragUpdateResponse.Destination = xChaSrc;
 8004bd8:	4a4c      	ldr	r2, [pc, #304]	; (8004d0c <acis_parse_command+0x988>)
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	7093      	strb	r3, [r2, #2]
      PK_DragUpdateResponse.ErrorCode = 0;
 8004bde:	4b4b      	ldr	r3, [pc, #300]	; (8004d0c <acis_parse_command+0x988>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	711a      	strb	r2, [r3, #4]
      PK_DragUpdateResponse.FromRPM = PK_DragUpdateRequest.FromRPM;
 8004be4:	4b48      	ldr	r3, [pc, #288]	; (8004d08 <acis_parse_command+0x984>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4a48      	ldr	r2, [pc, #288]	; (8004d0c <acis_parse_command+0x988>)
 8004bea:	6093      	str	r3, [r2, #8]
      PK_DragUpdateResponse.ToRPM = PK_DragUpdateRequest.ToRPM;
 8004bec:	4b46      	ldr	r3, [pc, #280]	; (8004d08 <acis_parse_command+0x984>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	4a46      	ldr	r2, [pc, #280]	; (8004d0c <acis_parse_command+0x988>)
 8004bf2:	60d3      	str	r3, [r2, #12]
      PK_DragUpdateResponse.CurrentRPM = csps_getrpm();
 8004bf4:	f003 fa78 	bl	80080e8 <csps_getrpm>
 8004bf8:	eef0 7a40 	vmov.f32	s15, s0
 8004bfc:	4b43      	ldr	r3, [pc, #268]	; (8004d0c <acis_parse_command+0x988>)
 8004bfe:	edc3 7a04 	vstr	s15, [r3, #16]
      PK_DragUpdateResponse.CurrentIgnition = angle_ignite;
 8004c02:	4b43      	ldr	r3, [pc, #268]	; (8004d10 <acis_parse_command+0x98c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a41      	ldr	r2, [pc, #260]	; (8004d0c <acis_parse_command+0x988>)
 8004c08:	61d3      	str	r3, [r2, #28]
      PK_DragUpdateResponse.CurrentPressure = map_getpressure();
 8004c0a:	f004 fba3 	bl	8009354 <map_getpressure>
 8004c0e:	eef0 7a40 	vmov.f32	s15, s0
 8004c12:	4b3e      	ldr	r3, [pc, #248]	; (8004d0c <acis_parse_command+0x988>)
 8004c14:	edc3 7a05 	vstr	s15, [r3, #20]
      PK_DragUpdateResponse.CurrentLoad = map_getpressure() / 110000.0f * 100.0f;
 8004c18:	f004 fb9c 	bl	8009354 <map_getpressure>
 8004c1c:	eef0 6a40 	vmov.f32	s13, s0
 8004c20:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004d14 <acis_parse_command+0x990>
 8004c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c28:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004cec <acis_parse_command+0x968>
 8004c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c30:	4b36      	ldr	r3, [pc, #216]	; (8004d0c <acis_parse_command+0x988>)
 8004c32:	edc3 7a06 	vstr	s15, [r3, #24]
      PK_DragUpdateResponse.TotalPoints = DragPointsCount;
 8004c36:	4b2a      	ldr	r3, [pc, #168]	; (8004ce0 <acis_parse_command+0x95c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a34      	ldr	r2, [pc, #208]	; (8004d0c <acis_parse_command+0x988>)
 8004c3c:	6253      	str	r3, [r2, #36]	; 0x24
      PK_DragUpdateResponse.Started = DragStarted;
 8004c3e:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <acis_parse_command+0x950>)
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	4b32      	ldr	r3, [pc, #200]	; (8004d0c <acis_parse_command+0x988>)
 8004c44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      PK_DragUpdateResponse.Completed = DragCompleted;
 8004c48:	4b24      	ldr	r3, [pc, #144]	; (8004cdc <acis_parse_command+0x958>)
 8004c4a:	781a      	ldrb	r2, [r3, #0]
 8004c4c:	4b2f      	ldr	r3, [pc, #188]	; (8004d0c <acis_parse_command+0x988>)
 8004c4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      PK_DragUpdateResponse.Time = DragStartTime > 0 ? DelayDiff(now, DragStartTime) : 0;
 8004c52:	4b24      	ldr	r3, [pc, #144]	; (8004ce4 <acis_parse_command+0x960>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d007      	beq.n	8004c6a <acis_parse_command+0x8e6>
 8004c5a:	4b22      	ldr	r3, [pc, #136]	; (8004ce4 <acis_parse_command+0x960>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4619      	mov	r1, r3
 8004c60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c62:	f003 fb5f 	bl	8008324 <DelayDiff>
 8004c66:	4603      	mov	r3, r0
 8004c68:	e000      	b.n	8004c6c <acis_parse_command+0x8e8>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	4a27      	ldr	r2, [pc, #156]	; (8004d0c <acis_parse_command+0x988>)
 8004c6e:	6213      	str	r3, [r2, #32]
      if(DragFromRPM != PK_DragUpdateRequest.FromRPM || DragToRPM != PK_DragUpdateRequest.ToRPM)
 8004c70:	4b25      	ldr	r3, [pc, #148]	; (8004d08 <acis_parse_command+0x984>)
 8004c72:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c76:	4b15      	ldr	r3, [pc, #84]	; (8004ccc <acis_parse_command+0x948>)
 8004c78:	edd3 7a00 	vldr	s15, [r3]
 8004c7c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c84:	d10a      	bne.n	8004c9c <acis_parse_command+0x918>
 8004c86:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <acis_parse_command+0x984>)
 8004c88:	ed93 7a02 	vldr	s14, [r3, #8]
 8004c8c:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <acis_parse_command+0x94c>)
 8004c8e:	edd3 7a00 	vldr	s15, [r3]
 8004c92:	eeb4 7a67 	vcmp.f32	s14, s15
 8004c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9a:	d003      	beq.n	8004ca4 <acis_parse_command+0x920>
      {
        PK_DragUpdateResponse.ErrorCode = 2;
 8004c9c:	4b1b      	ldr	r3, [pc, #108]	; (8004d0c <acis_parse_command+0x988>)
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	711a      	strb	r2, [r3, #4]
 8004ca2:	e009      	b.n	8004cb8 <acis_parse_command+0x934>
      }
      else if(DragStatus > 0) PK_DragUpdateResponse.ErrorCode = DragStatus + 10;
 8004ca4:	4b14      	ldr	r3, [pc, #80]	; (8004cf8 <acis_parse_command+0x974>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <acis_parse_command+0x934>
 8004cac:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <acis_parse_command+0x974>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	330a      	adds	r3, #10
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <acis_parse_command+0x988>)
 8004cb6:	711a      	strb	r2, [r3, #4]
      protPushSequence(&fifoSendingQueue, &PK_DragUpdateResponse, sizeof(PK_DragUpdateResponse));
 8004cb8:	222c      	movs	r2, #44	; 0x2c
 8004cba:	4914      	ldr	r1, [pc, #80]	; (8004d0c <acis_parse_command+0x988>)
 8004cbc:	480f      	ldr	r0, [pc, #60]	; (8004cfc <acis_parse_command+0x978>)
 8004cbe:	f006 fdaa 	bl	800b816 <protPushSequence>
      break;
 8004cc2:	e0a7      	b.n	8004e14 <acis_parse_command+0xa90>
 8004cc4:	20010340 	.word	0x20010340
 8004cc8:	20010440 	.word	0x20010440
 8004ccc:	20020948 	.word	0x20020948
 8004cd0:	2002094c 	.word	0x2002094c
 8004cd4:	20020951 	.word	0x20020951
 8004cd8:	20020950 	.word	0x20020950
 8004cdc:	20020952 	.word	0x20020952
 8004ce0:	20020944 	.word	0x20020944
 8004ce4:	20020958 	.word	0x20020958
 8004ce8:	20020954 	.word	0x20020954
 8004cec:	42c80000 	.word	0x42c80000
 8004cf0:	469c4000 	.word	0x469c4000
 8004cf4:	428c0000 	.word	0x428c0000
 8004cf8:	20020953 	.word	0x20020953
 8004cfc:	200210f0 	.word	0x200210f0
 8004d00:	200103c0 	.word	0x200103c0
 8004d04:	20010460 	.word	0x20010460
 8004d08:	20010360 	.word	0x20010360
 8004d0c:	20010380 	.word	0x20010380
 8004d10:	2001192c 	.word	0x2001192c
 8004d14:	47d6d800 	.word	0x47d6d800

    case PK_DragPointRequestID :
      PK_Copy(&PK_DragPointRequest, msgBuf);
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	4840      	ldr	r0, [pc, #256]	; (8004e1c <acis_parse_command+0xa98>)
 8004d1c:	f7fc f81e 	bl	8000d5c <PK_Copy>
      PK_DragPointResponse.Destination = xChaSrc;
 8004d20:	4a3f      	ldr	r2, [pc, #252]	; (8004e20 <acis_parse_command+0xa9c>)
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	7093      	strb	r3, [r2, #2]
      PK_DragPointResponse.FromRPM = PK_DragStop.FromRPM;
 8004d26:	4b3f      	ldr	r3, [pc, #252]	; (8004e24 <acis_parse_command+0xaa0>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	4a3d      	ldr	r2, [pc, #244]	; (8004e20 <acis_parse_command+0xa9c>)
 8004d2c:	6093      	str	r3, [r2, #8]
      PK_DragPointResponse.ToRPM = PK_DragStop.ToRPM;
 8004d2e:	4b3d      	ldr	r3, [pc, #244]	; (8004e24 <acis_parse_command+0xaa0>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	4a3b      	ldr	r2, [pc, #236]	; (8004e20 <acis_parse_command+0xa9c>)
 8004d34:	60d3      	str	r3, [r2, #12]
      PK_DragPointResponse.ErrorCode = 0;
 8004d36:	4b3a      	ldr	r3, [pc, #232]	; (8004e20 <acis_parse_command+0xa9c>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	711a      	strb	r2, [r3, #4]
      dragpoint = PK_DragPointResponse.PointNumber = PK_DragPointRequest.PointNumber;
 8004d3c:	4b37      	ldr	r3, [pc, #220]	; (8004e1c <acis_parse_command+0xa98>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	4a37      	ldr	r2, [pc, #220]	; (8004e20 <acis_parse_command+0xa9c>)
 8004d42:	6113      	str	r3, [r2, #16]
 8004d44:	4b36      	ldr	r3, [pc, #216]	; (8004e20 <acis_parse_command+0xa9c>)
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(dragpoint >= DragPointsCount)
 8004d4a:	4b37      	ldr	r3, [pc, #220]	; (8004e28 <acis_parse_command+0xaa4>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d316      	bcc.n	8004d82 <acis_parse_command+0x9fe>
      {
        PK_DragPointResponse.Point.Pressure = 0;
 8004d54:	4b32      	ldr	r3, [pc, #200]	; (8004e20 <acis_parse_command+0xa9c>)
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	619a      	str	r2, [r3, #24]
        PK_DragPointResponse.Point.RPM = 0;
 8004d5c:	4b30      	ldr	r3, [pc, #192]	; (8004e20 <acis_parse_command+0xa9c>)
 8004d5e:	f04f 0200 	mov.w	r2, #0
 8004d62:	615a      	str	r2, [r3, #20]
        PK_DragPointResponse.Point.Load = 0;
 8004d64:	4b2e      	ldr	r3, [pc, #184]	; (8004e20 <acis_parse_command+0xa9c>)
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	61da      	str	r2, [r3, #28]
        PK_DragPointResponse.Point.Ignition = 0;
 8004d6c:	4b2c      	ldr	r3, [pc, #176]	; (8004e20 <acis_parse_command+0xa9c>)
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	621a      	str	r2, [r3, #32]
        PK_DragPointResponse.Point.Time = 0;
 8004d74:	4b2a      	ldr	r3, [pc, #168]	; (8004e20 <acis_parse_command+0xa9c>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	625a      	str	r2, [r3, #36]	; 0x24
        PK_DragPointResponse.ErrorCode = 3;
 8004d7a:	4b29      	ldr	r3, [pc, #164]	; (8004e20 <acis_parse_command+0xa9c>)
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	711a      	strb	r2, [r3, #4]
 8004d80:	e027      	b.n	8004dd2 <acis_parse_command+0xa4e>
      }
      else
      {
        PK_DragPointResponse.Point = DragPoints[dragpoint];
 8004d82:	4927      	ldr	r1, [pc, #156]	; (8004e20 <acis_parse_command+0xa9c>)
 8004d84:	4829      	ldr	r0, [pc, #164]	; (8004e2c <acis_parse_command+0xaa8>)
 8004d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4403      	add	r3, r0
 8004d92:	f101 0414 	add.w	r4, r1, #20
 8004d96:	461d      	mov	r5, r3
 8004d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	6023      	str	r3, [r4, #0]
        if(DragFromRPM != PK_DragPointRequest.FromRPM || DragToRPM != PK_DragPointRequest.ToRPM)
 8004da0:	4b1e      	ldr	r3, [pc, #120]	; (8004e1c <acis_parse_command+0xa98>)
 8004da2:	ed93 7a02 	vldr	s14, [r3, #8]
 8004da6:	4b22      	ldr	r3, [pc, #136]	; (8004e30 <acis_parse_command+0xaac>)
 8004da8:	edd3 7a00 	vldr	s15, [r3]
 8004dac:	eeb4 7a67 	vcmp.f32	s14, s15
 8004db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db4:	d10a      	bne.n	8004dcc <acis_parse_command+0xa48>
 8004db6:	4b19      	ldr	r3, [pc, #100]	; (8004e1c <acis_parse_command+0xa98>)
 8004db8:	ed93 7a03 	vldr	s14, [r3, #12]
 8004dbc:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <acis_parse_command+0xab0>)
 8004dbe:	edd3 7a00 	vldr	s15, [r3]
 8004dc2:	eeb4 7a67 	vcmp.f32	s14, s15
 8004dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dca:	d002      	beq.n	8004dd2 <acis_parse_command+0xa4e>
        {
          PK_DragPointResponse.ErrorCode = 2;
 8004dcc:	4b14      	ldr	r3, [pc, #80]	; (8004e20 <acis_parse_command+0xa9c>)
 8004dce:	2202      	movs	r2, #2
 8004dd0:	711a      	strb	r2, [r3, #4]
        }
      }

      protPushSequence(&fifoSendingQueue, &PK_DragPointResponse, sizeof(PK_DragPointResponse));
 8004dd2:	2228      	movs	r2, #40	; 0x28
 8004dd4:	4912      	ldr	r1, [pc, #72]	; (8004e20 <acis_parse_command+0xa9c>)
 8004dd6:	4818      	ldr	r0, [pc, #96]	; (8004e38 <acis_parse_command+0xab4>)
 8004dd8:	f006 fd1d 	bl	800b816 <protPushSequence>
      break;
 8004ddc:	e01a      	b.n	8004e14 <acis_parse_command+0xa90>

    case PK_ConfigMemoryAcknowledgeID :
      PK_Copy(&PK_ConfigMemoryAcknowledge, msgBuf);
 8004dde:	68b9      	ldr	r1, [r7, #8]
 8004de0:	4816      	ldr	r0, [pc, #88]	; (8004e3c <acis_parse_command+0xab8>)
 8004de2:	f7fb ffbb 	bl	8000d5c <PK_Copy>
      if(PK_ConfigMemoryAcknowledge.ErrorCode != 0)
      {

      }
      break;
 8004de6:	e015      	b.n	8004e14 <acis_parse_command+0xa90>

    case PK_TableMemoryAcknowledgeID :
      PK_Copy(&PK_TableMemoryAcknowledge, msgBuf);
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	4815      	ldr	r0, [pc, #84]	; (8004e40 <acis_parse_command+0xabc>)
 8004dec:	f7fb ffb6 	bl	8000d5c <PK_Copy>
      if(PK_TableMemoryAcknowledge.ErrorCode != 0)
      {

      }
      break;
 8004df0:	e010      	b.n	8004e14 <acis_parse_command+0xa90>

    case PK_FuelSwitchID :
      PK_Copy(&PK_FuelSwitch, msgBuf);
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	4813      	ldr	r0, [pc, #76]	; (8004e44 <acis_parse_command+0xac0>)
 8004df6:	f7fb ffb1 	bl	8000d5c <PK_Copy>
      if(PK_FuelSwitch.FuelSwitchPos < 3)
 8004dfa:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <acis_parse_command+0xac0>)
 8004dfc:	791b      	ldrb	r3, [r3, #4]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d807      	bhi.n	8004e12 <acis_parse_command+0xa8e>
        switch_fuel_pos = PK_FuelSwitch.FuelSwitchPos;
 8004e02:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <acis_parse_command+0xac0>)
 8004e04:	791b      	ldrb	r3, [r3, #4]
 8004e06:	b25a      	sxtb	r2, r3
 8004e08:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <acis_parse_command+0xac4>)
 8004e0a:	701a      	strb	r2, [r3, #0]
      break;
 8004e0c:	e001      	b.n	8004e12 <acis_parse_command+0xa8e>

    default:
      break;
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <acis_parse_command+0xa90>
      break;
 8004e12:	bf00      	nop
  }
}
 8004e14:	bf00      	nop
 8004e16:	3738      	adds	r7, #56	; 0x38
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8004e1c:	200103e0 	.word	0x200103e0
 8004e20:	20010400 	.word	0x20010400
 8004e24:	200103c0 	.word	0x200103c0
 8004e28:	20020944 	.word	0x20020944
 8004e2c:	20011944 	.word	0x20011944
 8004e30:	20020948 	.word	0x20020948
 8004e34:	2002094c 	.word	0x2002094c
 8004e38:	200210f0 	.word	0x200210f0
 8004e3c:	200102e0 	.word	0x200102e0
 8004e40:	200101a0 	.word	0x200101a0
 8004e44:	200104a0 	.word	0x200104a0
 8004e48:	20011940 	.word	0x20011940

08004e4c <acis_send_command>:

inline int8_t acis_send_command(eTransChannels xChaDst, void * msgBuf, uint32_t length)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	73fb      	strb	r3, [r7, #15]
  return xSender(xChaDst, (uint8_t*)msgBuf, length);
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f005 fdc5 	bl	800a9f0 <xSender>
 8004e66:	4603      	mov	r3, r0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <config_load>:
#include "config.h"
#include "sst25vf032b.h"
#include "crc.h"

HAL_StatusTypeDef config_load(sAcisConfig * config)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_BUSY;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	75fb      	strb	r3, [r7, #23]
  uint32_t size = (uint32_t)&config->crc - (uint32_t)config;
 8004e7c:	f44f 534a 	mov.w	r3, #12928	; 0x3280
 8004e80:	613b      	str	r3, [r7, #16]
  uint8_t spistatus = SST25_Read(0, sizeof(sAcisConfig), (uint8_t*)config);
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	f243 21a0 	movw	r1, #12960	; 0x32a0
 8004e88:	2000      	movs	r0, #0
 8004e8a:	f004 feee 	bl	8009c6a <SST25_Read>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	73fb      	strb	r3, [r7, #15]
  if(spistatus)
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d011      	beq.n	8004ebc <config_load+0x4c>
  {
    uint16_t crc16 = CRC16_Generate((uint8_t*)config, size);
 8004e98:	6939      	ldr	r1, [r7, #16]
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f002 fc38 	bl	8007710 <CRC16_Generate>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	81bb      	strh	r3, [r7, #12]
    if(crc16 == config->crc)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f503 534a 	add.w	r3, r3, #12928	; 0x3280
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	89ba      	ldrh	r2, [r7, #12]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d102      	bne.n	8004eb8 <config_load+0x48>
      status = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	75fb      	strb	r3, [r7, #23]
 8004eb6:	e001      	b.n	8004ebc <config_load+0x4c>
    else status = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <setconfig_standart16l>:
  config->tables[i].ignitions[0][12] = 33.0f;
}
*/

static void setconfig_standart16l(sAcisConfig * config, uint8_t i)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	70fb      	strb	r3, [r7, #3]

  config->tables[i].rotates_count = 16;
 8004ed4:	78fb      	ldrb	r3, [r7, #3]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004edc:	fb01 f303 	mul.w	r3, r1, r3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004ee6:	2210      	movs	r2, #16
 8004ee8:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[0] = 600;
 8004eea:	78fb      	ldrb	r3, [r7, #3]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004efc:	4aba      	ldr	r2, [pc, #744]	; (80051e8 <setconfig_standart16l+0x320>)
 8004efe:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[1] = 720;
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004f08:	fb01 f303 	mul.w	r3, r1, r3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8004f12:	4ab6      	ldr	r2, [pc, #728]	; (80051ec <setconfig_standart16l+0x324>)
 8004f14:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[2] = 840;
 8004f16:	78fb      	ldrb	r3, [r7, #3]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004f1e:	fb01 f303 	mul.w	r3, r1, r3
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004f28:	4ab1      	ldr	r2, [pc, #708]	; (80051f0 <setconfig_standart16l+0x328>)
 8004f2a:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[3] = 990;
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004f34:	fb01 f303 	mul.w	r3, r1, r3
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004f3e:	4aad      	ldr	r2, [pc, #692]	; (80051f4 <setconfig_standart16l+0x32c>)
 8004f40:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[4] = 1170;
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004f4a:	fb01 f303 	mul.w	r3, r1, r3
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8004f54:	4aa8      	ldr	r2, [pc, #672]	; (80051f8 <setconfig_standart16l+0x330>)
 8004f56:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[5] = 1380;
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8004f6a:	4aa4      	ldr	r2, [pc, #656]	; (80051fc <setconfig_standart16l+0x334>)
 8004f6c:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[6] = 1650;
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004f76:	fb01 f303 	mul.w	r3, r1, r3
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8004f80:	4a9f      	ldr	r2, [pc, #636]	; (8005200 <setconfig_standart16l+0x338>)
 8004f82:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[7] = 1950;
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004f8c:	fb01 f303 	mul.w	r3, r1, r3
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8004f96:	4a9b      	ldr	r2, [pc, #620]	; (8005204 <setconfig_standart16l+0x33c>)
 8004f98:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[8] = 2310;
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004fa2:	fb01 f303 	mul.w	r3, r1, r3
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004fac:	4a96      	ldr	r2, [pc, #600]	; (8005208 <setconfig_standart16l+0x340>)
 8004fae:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[9] = 2730;
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004fb8:	fb01 f303 	mul.w	r3, r1, r3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8004fc2:	4a92      	ldr	r2, [pc, #584]	; (800520c <setconfig_standart16l+0x344>)
 8004fc4:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[10] = 3210;
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004fce:	fb01 f303 	mul.w	r3, r1, r3
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004fd8:	4a8d      	ldr	r2, [pc, #564]	; (8005210 <setconfig_standart16l+0x348>)
 8004fda:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[11] = 3840;
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004fe4:	fb01 f303 	mul.w	r3, r1, r3
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8004fee:	4a89      	ldr	r2, [pc, #548]	; (8005214 <setconfig_standart16l+0x34c>)
 8004ff0:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[12] = 4530;
 8004ff2:	78fb      	ldrb	r3, [r7, #3]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004ffa:	fb01 f303 	mul.w	r3, r1, r3
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8005004:	4a84      	ldr	r2, [pc, #528]	; (8005218 <setconfig_standart16l+0x350>)
 8005006:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[13] = 5370;
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	4413      	add	r3, r2
 8005016:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800501a:	4a80      	ldr	r2, [pc, #512]	; (800521c <setconfig_standart16l+0x354>)
 800501c:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[14] = 6360;
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005026:	fb01 f303 	mul.w	r3, r1, r3
 800502a:	4413      	add	r3, r2
 800502c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8005030:	4a7b      	ldr	r2, [pc, #492]	; (8005220 <setconfig_standart16l+0x358>)
 8005032:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[15] = 7500;
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	f640 416c 	movw	r1, #3180	; 0xc6c
 800503c:	fb01 f303 	mul.w	r3, r1, r3
 8005040:	4413      	add	r3, r2
 8005042:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8005046:	4a77      	ldr	r2, [pc, #476]	; (8005224 <setconfig_standart16l+0x35c>)
 8005048:	601a      	str	r2, [r3, #0]

  config->tables[i].pressures_count = 16;
 800504a:	78fb      	ldrb	r3, [r7, #3]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005052:	fb01 f303 	mul.w	r3, r1, r3
 8005056:	4413      	add	r3, r2
 8005058:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800505c:	2210      	movs	r2, #16
 800505e:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[0] = 6900.0f;
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005068:	fb01 f303 	mul.w	r3, r1, r3
 800506c:	4413      	add	r3, r2
 800506e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8005072:	4a6d      	ldr	r2, [pc, #436]	; (8005228 <setconfig_standart16l+0x360>)
 8005074:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[1] = 13300.0f;
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800507e:	fb01 f303 	mul.w	r3, r1, r3
 8005082:	4413      	add	r3, r2
 8005084:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005088:	4a68      	ldr	r2, [pc, #416]	; (800522c <setconfig_standart16l+0x364>)
 800508a:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[2] = 19700.0f;
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005094:	fb01 f303 	mul.w	r3, r1, r3
 8005098:	4413      	add	r3, r2
 800509a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800509e:	4a64      	ldr	r2, [pc, #400]	; (8005230 <setconfig_standart16l+0x368>)
 80050a0:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[3] = 26100.0f;
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80050aa:	fb01 f303 	mul.w	r3, r1, r3
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80050b4:	4a5f      	ldr	r2, [pc, #380]	; (8005234 <setconfig_standart16l+0x36c>)
 80050b6:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[4] = 32500.0f;
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	f640 416c 	movw	r1, #3180	; 0xc6c
 80050c0:	fb01 f303 	mul.w	r3, r1, r3
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80050ca:	4a5b      	ldr	r2, [pc, #364]	; (8005238 <setconfig_standart16l+0x370>)
 80050cc:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[5] = 38900.0f;
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80050d6:	fb01 f303 	mul.w	r3, r1, r3
 80050da:	4413      	add	r3, r2
 80050dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050e0:	4a56      	ldr	r2, [pc, #344]	; (800523c <setconfig_standart16l+0x374>)
 80050e2:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[6] = 45300.0f;
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80050ec:	fb01 f303 	mul.w	r3, r1, r3
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050f6:	4a52      	ldr	r2, [pc, #328]	; (8005240 <setconfig_standart16l+0x378>)
 80050f8:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[7] = 51700.0f;
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005102:	fb01 f303 	mul.w	r3, r1, r3
 8005106:	4413      	add	r3, r2
 8005108:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800510c:	4a4d      	ldr	r2, [pc, #308]	; (8005244 <setconfig_standart16l+0x37c>)
 800510e:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[8] = 58100.0f;
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005118:	fb01 f303 	mul.w	r3, r1, r3
 800511c:	4413      	add	r3, r2
 800511e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8005122:	4a49      	ldr	r2, [pc, #292]	; (8005248 <setconfig_standart16l+0x380>)
 8005124:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[9] = 64600.0f;
 8005126:	78fb      	ldrb	r3, [r7, #3]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800512e:	fb01 f303 	mul.w	r3, r1, r3
 8005132:	4413      	add	r3, r2
 8005134:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8005138:	4a44      	ldr	r2, [pc, #272]	; (800524c <setconfig_standart16l+0x384>)
 800513a:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[10] = 71000.0f;
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005144:	fb01 f303 	mul.w	r3, r1, r3
 8005148:	4413      	add	r3, r2
 800514a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800514e:	4a40      	ldr	r2, [pc, #256]	; (8005250 <setconfig_standart16l+0x388>)
 8005150:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[11] = 77400.0f;
 8005152:	78fb      	ldrb	r3, [r7, #3]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	f640 416c 	movw	r1, #3180	; 0xc6c
 800515a:	fb01 f303 	mul.w	r3, r1, r3
 800515e:	4413      	add	r3, r2
 8005160:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8005164:	4a3b      	ldr	r2, [pc, #236]	; (8005254 <setconfig_standart16l+0x38c>)
 8005166:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[12] = 83800.0f;
 8005168:	78fb      	ldrb	r3, [r7, #3]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	4413      	add	r3, r2
 8005176:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 800517a:	4a37      	ldr	r2, [pc, #220]	; (8005258 <setconfig_standart16l+0x390>)
 800517c:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[13] = 90200.0f;
 800517e:	78fb      	ldrb	r3, [r7, #3]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005186:	fb01 f303 	mul.w	r3, r1, r3
 800518a:	4413      	add	r3, r2
 800518c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8005190:	4a32      	ldr	r2, [pc, #200]	; (800525c <setconfig_standart16l+0x394>)
 8005192:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[14] = 96500.0f;
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	f640 416c 	movw	r1, #3180	; 0xc6c
 800519c:	fb01 f303 	mul.w	r3, r1, r3
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80051a6:	4a2e      	ldr	r2, [pc, #184]	; (8005260 <setconfig_standart16l+0x398>)
 80051a8:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[15] = 103000.0f;
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	f640 416c 	movw	r1, #3180	; 0xc6c
 80051b2:	fb01 f303 	mul.w	r3, r1, r3
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80051bc:	4a29      	ldr	r2, [pc, #164]	; (8005264 <setconfig_standart16l+0x39c>)
 80051be:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[0][0]  = 14.5f;
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80051c8:	fb01 f303 	mul.w	r3, r1, r3
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80051d2:	4a25      	ldr	r2, [pc, #148]	; (8005268 <setconfig_standart16l+0x3a0>)
 80051d4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][1]  = 16.1f;
 80051d6:	78fb      	ldrb	r3, [r7, #3]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	f640 416c 	movw	r1, #3180	; 0xc6c
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	4413      	add	r3, r2
 80051e4:	e042      	b.n	800526c <setconfig_standart16l+0x3a4>
 80051e6:	bf00      	nop
 80051e8:	44160000 	.word	0x44160000
 80051ec:	44340000 	.word	0x44340000
 80051f0:	44520000 	.word	0x44520000
 80051f4:	44778000 	.word	0x44778000
 80051f8:	44924000 	.word	0x44924000
 80051fc:	44ac8000 	.word	0x44ac8000
 8005200:	44ce4000 	.word	0x44ce4000
 8005204:	44f3c000 	.word	0x44f3c000
 8005208:	45106000 	.word	0x45106000
 800520c:	452aa000 	.word	0x452aa000
 8005210:	4548a000 	.word	0x4548a000
 8005214:	45700000 	.word	0x45700000
 8005218:	458d9000 	.word	0x458d9000
 800521c:	45a7d000 	.word	0x45a7d000
 8005220:	45c6c000 	.word	0x45c6c000
 8005224:	45ea6000 	.word	0x45ea6000
 8005228:	45d7a000 	.word	0x45d7a000
 800522c:	464fd000 	.word	0x464fd000
 8005230:	4699e800 	.word	0x4699e800
 8005234:	46cbe800 	.word	0x46cbe800
 8005238:	46fde800 	.word	0x46fde800
 800523c:	4717f400 	.word	0x4717f400
 8005240:	4730f400 	.word	0x4730f400
 8005244:	4749f400 	.word	0x4749f400
 8005248:	4762f400 	.word	0x4762f400
 800524c:	477c5800 	.word	0x477c5800
 8005250:	478aac00 	.word	0x478aac00
 8005254:	47972c00 	.word	0x47972c00
 8005258:	47a3ac00 	.word	0x47a3ac00
 800525c:	47b02c00 	.word	0x47b02c00
 8005260:	47bc7a00 	.word	0x47bc7a00
 8005264:	47c92c00 	.word	0x47c92c00
 8005268:	41680000 	.word	0x41680000
 800526c:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005270:	4aba      	ldr	r2, [pc, #744]	; (800555c <setconfig_standart16l+0x694>)
 8005272:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][2]  = 18.0f;
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	f640 416c 	movw	r1, #3180	; 0xc6c
 800527c:	fb01 f303 	mul.w	r3, r1, r3
 8005280:	4413      	add	r3, r2
 8005282:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8005286:	4ab6      	ldr	r2, [pc, #728]	; (8005560 <setconfig_standart16l+0x698>)
 8005288:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][3]  = 20.9f;
 800528a:	78fb      	ldrb	r3, [r7, #3]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	4413      	add	r3, r2
 8005298:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800529c:	4ab1      	ldr	r2, [pc, #708]	; (8005564 <setconfig_standart16l+0x69c>)
 800529e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][4]  = 24.7f;
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80052a8:	fb01 f303 	mul.w	r3, r1, r3
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052b2:	4aad      	ldr	r2, [pc, #692]	; (8005568 <setconfig_standart16l+0x6a0>)
 80052b4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][5]  = 29.7f;
 80052b6:	78fb      	ldrb	r3, [r7, #3]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	f640 416c 	movw	r1, #3180	; 0xc6c
 80052be:	fb01 f303 	mul.w	r3, r1, r3
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80052c8:	4aa8      	ldr	r2, [pc, #672]	; (800556c <setconfig_standart16l+0x6a4>)
 80052ca:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][6]  = 37.8f;
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80052d4:	fb01 f303 	mul.w	r3, r1, r3
 80052d8:	4413      	add	r3, r2
 80052da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80052de:	4aa4      	ldr	r2, [pc, #656]	; (8005570 <setconfig_standart16l+0x6a8>)
 80052e0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][7]  = 40.9f;
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80052ea:	fb01 f303 	mul.w	r3, r1, r3
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80052f4:	4a9f      	ldr	r2, [pc, #636]	; (8005574 <setconfig_standart16l+0x6ac>)
 80052f6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][8]  = 42.6f;
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	4413      	add	r3, r2
 8005306:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800530a:	4a9b      	ldr	r2, [pc, #620]	; (8005578 <setconfig_standart16l+0x6b0>)
 800530c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][9]  = 43.4f;
 800530e:	78fb      	ldrb	r3, [r7, #3]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005316:	fb01 f303 	mul.w	r3, r1, r3
 800531a:	4413      	add	r3, r2
 800531c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005320:	4a96      	ldr	r2, [pc, #600]	; (800557c <setconfig_standart16l+0x6b4>)
 8005322:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][10] = 44.0f;
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	f640 416c 	movw	r1, #3180	; 0xc6c
 800532c:	fb01 f303 	mul.w	r3, r1, r3
 8005330:	4413      	add	r3, r2
 8005332:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8005336:	4a92      	ldr	r2, [pc, #584]	; (8005580 <setconfig_standart16l+0x6b8>)
 8005338:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][11] = 44.4f;
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005342:	fb01 f303 	mul.w	r3, r1, r3
 8005346:	4413      	add	r3, r2
 8005348:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800534c:	4a8d      	ldr	r2, [pc, #564]	; (8005584 <setconfig_standart16l+0x6bc>)
 800534e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][12] = 44.3f;
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005358:	fb01 f303 	mul.w	r3, r1, r3
 800535c:	4413      	add	r3, r2
 800535e:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8005362:	4a89      	ldr	r2, [pc, #548]	; (8005588 <setconfig_standart16l+0x6c0>)
 8005364:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][13] = 44.3f;
 8005366:	78fb      	ldrb	r3, [r7, #3]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800536e:	fb01 f303 	mul.w	r3, r1, r3
 8005372:	4413      	add	r3, r2
 8005374:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005378:	4a83      	ldr	r2, [pc, #524]	; (8005588 <setconfig_standart16l+0x6c0>)
 800537a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][14] = 44.8f;
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005384:	fb01 f303 	mul.w	r3, r1, r3
 8005388:	4413      	add	r3, r2
 800538a:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 800538e:	4a7f      	ldr	r2, [pc, #508]	; (800558c <setconfig_standart16l+0x6c4>)
 8005390:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][15] = 45.0f;
 8005392:	78fb      	ldrb	r3, [r7, #3]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	f640 416c 	movw	r1, #3180	; 0xc6c
 800539a:	fb01 f303 	mul.w	r3, r1, r3
 800539e:	4413      	add	r3, r2
 80053a0:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80053a4:	4a7a      	ldr	r2, [pc, #488]	; (8005590 <setconfig_standart16l+0x6c8>)
 80053a6:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[1][0]  = 16.1f;
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	f640 416c 	movw	r1, #3180	; 0xc6c
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80053ba:	4a68      	ldr	r2, [pc, #416]	; (800555c <setconfig_standart16l+0x694>)
 80053bc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][1]  = 18.0f;
 80053be:	78fb      	ldrb	r3, [r7, #3]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80053c6:	fb01 f303 	mul.w	r3, r1, r3
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 80053d0:	4a63      	ldr	r2, [pc, #396]	; (8005560 <setconfig_standart16l+0x698>)
 80053d2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][2]  = 20.1f;
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80053dc:	fb01 f303 	mul.w	r3, r1, r3
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80053e6:	4a6b      	ldr	r2, [pc, #428]	; (8005594 <setconfig_standart16l+0x6cc>)
 80053e8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][3]  = 23.1f;
 80053ea:	78fb      	ldrb	r3, [r7, #3]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	f640 416c 	movw	r1, #3180	; 0xc6c
 80053f2:	fb01 f303 	mul.w	r3, r1, r3
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 80053fc:	4a66      	ldr	r2, [pc, #408]	; (8005598 <setconfig_standart16l+0x6d0>)
 80053fe:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][4]  = 26.6f;
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005408:	fb01 f303 	mul.w	r3, r1, r3
 800540c:	4413      	add	r3, r2
 800540e:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8005412:	4a62      	ldr	r2, [pc, #392]	; (800559c <setconfig_standart16l+0x6d4>)
 8005414:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][5]  = 31.0f;
 8005416:	78fb      	ldrb	r3, [r7, #3]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800541e:	fb01 f303 	mul.w	r3, r1, r3
 8005422:	4413      	add	r3, r2
 8005424:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 8005428:	4a5d      	ldr	r2, [pc, #372]	; (80055a0 <setconfig_standart16l+0x6d8>)
 800542a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][6]  = 38.1f;
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005434:	fb01 f303 	mul.w	r3, r1, r3
 8005438:	4413      	add	r3, r2
 800543a:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800543e:	4a59      	ldr	r2, [pc, #356]	; (80055a4 <setconfig_standart16l+0x6dc>)
 8005440:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][7]  = 41.0f;
 8005442:	78fb      	ldrb	r3, [r7, #3]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	f640 416c 	movw	r1, #3180	; 0xc6c
 800544a:	fb01 f303 	mul.w	r3, r1, r3
 800544e:	4413      	add	r3, r2
 8005450:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8005454:	4a54      	ldr	r2, [pc, #336]	; (80055a8 <setconfig_standart16l+0x6e0>)
 8005456:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][8]  = 42.6f;
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005460:	fb01 f303 	mul.w	r3, r1, r3
 8005464:	4413      	add	r3, r2
 8005466:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800546a:	4a43      	ldr	r2, [pc, #268]	; (8005578 <setconfig_standart16l+0x6b0>)
 800546c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][9]  = 43.4f;
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005476:	fb01 f303 	mul.w	r3, r1, r3
 800547a:	4413      	add	r3, r2
 800547c:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8005480:	4a3e      	ldr	r2, [pc, #248]	; (800557c <setconfig_standart16l+0x6b4>)
 8005482:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][10] = 43.0f;
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	f640 416c 	movw	r1, #3180	; 0xc6c
 800548c:	fb01 f303 	mul.w	r3, r1, r3
 8005490:	4413      	add	r3, r2
 8005492:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8005496:	4a45      	ldr	r2, [pc, #276]	; (80055ac <setconfig_standart16l+0x6e4>)
 8005498:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][11] = 44.4f;
 800549a:	78fb      	ldrb	r3, [r7, #3]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	f640 416c 	movw	r1, #3180	; 0xc6c
 80054a2:	fb01 f303 	mul.w	r3, r1, r3
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80054ac:	4a35      	ldr	r2, [pc, #212]	; (8005584 <setconfig_standart16l+0x6bc>)
 80054ae:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][12] = 44.3f;
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	4413      	add	r3, r2
 80054be:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80054c2:	4a31      	ldr	r2, [pc, #196]	; (8005588 <setconfig_standart16l+0x6c0>)
 80054c4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][13] = 44.3f;
 80054c6:	78fb      	ldrb	r3, [r7, #3]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	f640 416c 	movw	r1, #3180	; 0xc6c
 80054ce:	fb01 f303 	mul.w	r3, r1, r3
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80054d8:	4a2b      	ldr	r2, [pc, #172]	; (8005588 <setconfig_standart16l+0x6c0>)
 80054da:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][14] = 44.8f;
 80054dc:	78fb      	ldrb	r3, [r7, #3]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80054e4:	fb01 f303 	mul.w	r3, r1, r3
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80054ee:	4a27      	ldr	r2, [pc, #156]	; (800558c <setconfig_standart16l+0x6c4>)
 80054f0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][15] = 45.0f;
 80054f2:	78fb      	ldrb	r3, [r7, #3]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80054fa:	fb01 f303 	mul.w	r3, r1, r3
 80054fe:	4413      	add	r3, r2
 8005500:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8005504:	4a22      	ldr	r2, [pc, #136]	; (8005590 <setconfig_standart16l+0x6c8>)
 8005506:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[2][0]  = 17.8f;
 8005508:	78fb      	ldrb	r3, [r7, #3]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	4413      	add	r3, r2
 8005516:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800551a:	4a25      	ldr	r2, [pc, #148]	; (80055b0 <setconfig_standart16l+0x6e8>)
 800551c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][1]  = 19.7f;
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005526:	fb01 f303 	mul.w	r3, r1, r3
 800552a:	4413      	add	r3, r2
 800552c:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8005530:	4a20      	ldr	r2, [pc, #128]	; (80055b4 <setconfig_standart16l+0x6ec>)
 8005532:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][2]  = 21.5f;
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	f640 416c 	movw	r1, #3180	; 0xc6c
 800553c:	fb01 f303 	mul.w	r3, r1, r3
 8005540:	4413      	add	r3, r2
 8005542:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8005546:	4a1c      	ldr	r2, [pc, #112]	; (80055b8 <setconfig_standart16l+0x6f0>)
 8005548:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][3]  = 24.2f;
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005552:	fb01 f303 	mul.w	r3, r1, r3
 8005556:	4413      	add	r3, r2
 8005558:	e030      	b.n	80055bc <setconfig_standart16l+0x6f4>
 800555a:	bf00      	nop
 800555c:	4180cccd 	.word	0x4180cccd
 8005560:	41900000 	.word	0x41900000
 8005564:	41a73333 	.word	0x41a73333
 8005568:	41c5999a 	.word	0x41c5999a
 800556c:	41ed999a 	.word	0x41ed999a
 8005570:	42173333 	.word	0x42173333
 8005574:	4223999a 	.word	0x4223999a
 8005578:	422a6666 	.word	0x422a6666
 800557c:	422d999a 	.word	0x422d999a
 8005580:	42300000 	.word	0x42300000
 8005584:	4231999a 	.word	0x4231999a
 8005588:	42313333 	.word	0x42313333
 800558c:	42333333 	.word	0x42333333
 8005590:	42340000 	.word	0x42340000
 8005594:	41a0cccd 	.word	0x41a0cccd
 8005598:	41b8cccd 	.word	0x41b8cccd
 800559c:	41d4cccd 	.word	0x41d4cccd
 80055a0:	41f80000 	.word	0x41f80000
 80055a4:	42186666 	.word	0x42186666
 80055a8:	42240000 	.word	0x42240000
 80055ac:	422c0000 	.word	0x422c0000
 80055b0:	418e6666 	.word	0x418e6666
 80055b4:	419d999a 	.word	0x419d999a
 80055b8:	41ac0000 	.word	0x41ac0000
 80055bc:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80055c0:	4aba      	ldr	r2, [pc, #744]	; (80058ac <setconfig_standart16l+0x9e4>)
 80055c2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][4]  = 27.6f;
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80055cc:	fb01 f303 	mul.w	r3, r1, r3
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80055d6:	4ab6      	ldr	r2, [pc, #728]	; (80058b0 <setconfig_standart16l+0x9e8>)
 80055d8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][5]  = 31.7f;
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	f640 416c 	movw	r1, #3180	; 0xc6c
 80055e2:	fb01 f303 	mul.w	r3, r1, r3
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80055ec:	4ab1      	ldr	r2, [pc, #708]	; (80058b4 <setconfig_standart16l+0x9ec>)
 80055ee:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][6]  = 38.3f;
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80055f8:	fb01 f303 	mul.w	r3, r1, r3
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8005602:	4aad      	ldr	r2, [pc, #692]	; (80058b8 <setconfig_standart16l+0x9f0>)
 8005604:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][7]  = 41.1f;
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800560e:	fb01 f303 	mul.w	r3, r1, r3
 8005612:	4413      	add	r3, r2
 8005614:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8005618:	4aa8      	ldr	r2, [pc, #672]	; (80058bc <setconfig_standart16l+0x9f4>)
 800561a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][8]  = 42.6f;
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005624:	fb01 f303 	mul.w	r3, r1, r3
 8005628:	4413      	add	r3, r2
 800562a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800562e:	4aa4      	ldr	r2, [pc, #656]	; (80058c0 <setconfig_standart16l+0x9f8>)
 8005630:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][9]  = 43.4f;
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	f640 416c 	movw	r1, #3180	; 0xc6c
 800563a:	fb01 f303 	mul.w	r3, r1, r3
 800563e:	4413      	add	r3, r2
 8005640:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005644:	4a9f      	ldr	r2, [pc, #636]	; (80058c4 <setconfig_standart16l+0x9fc>)
 8005646:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][10] = 43.0f;
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	4413      	add	r3, r2
 8005656:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800565a:	4a9b      	ldr	r2, [pc, #620]	; (80058c8 <setconfig_standart16l+0xa00>)
 800565c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][11] = 44.4f;
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005666:	fb01 f303 	mul.w	r3, r1, r3
 800566a:	4413      	add	r3, r2
 800566c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005670:	4a96      	ldr	r2, [pc, #600]	; (80058cc <setconfig_standart16l+0xa04>)
 8005672:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][12] = 44.3f;
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	f640 416c 	movw	r1, #3180	; 0xc6c
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	4413      	add	r3, r2
 8005682:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005686:	4a92      	ldr	r2, [pc, #584]	; (80058d0 <setconfig_standart16l+0xa08>)
 8005688:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][13] = 44.3f;
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	4413      	add	r3, r2
 8005698:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 800569c:	4a8c      	ldr	r2, [pc, #560]	; (80058d0 <setconfig_standart16l+0xa08>)
 800569e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][14] = 44.8f;
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80056a8:	fb01 f303 	mul.w	r3, r1, r3
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80056b2:	4a88      	ldr	r2, [pc, #544]	; (80058d4 <setconfig_standart16l+0xa0c>)
 80056b4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][15] = 45.0f;
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	f640 416c 	movw	r1, #3180	; 0xc6c
 80056be:	fb01 f303 	mul.w	r3, r1, r3
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80056c8:	4a83      	ldr	r2, [pc, #524]	; (80058d8 <setconfig_standart16l+0xa10>)
 80056ca:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[3][0]  = 18.7f;
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	4413      	add	r3, r2
 80056da:	f503 7362 	add.w	r3, r3, #904	; 0x388
 80056de:	4a7f      	ldr	r2, [pc, #508]	; (80058dc <setconfig_standart16l+0xa14>)
 80056e0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][1]  = 20.5f;
 80056e2:	78fb      	ldrb	r3, [r7, #3]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80056ea:	fb01 f303 	mul.w	r3, r1, r3
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 80056f4:	4a7a      	ldr	r2, [pc, #488]	; (80058e0 <setconfig_standart16l+0xa18>)
 80056f6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][2]  = 22.2f;
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005700:	fb01 f303 	mul.w	r3, r1, r3
 8005704:	4413      	add	r3, r2
 8005706:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800570a:	4a76      	ldr	r2, [pc, #472]	; (80058e4 <setconfig_standart16l+0xa1c>)
 800570c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][3]  = 24.6f;
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005716:	fb01 f303 	mul.w	r3, r1, r3
 800571a:	4413      	add	r3, r2
 800571c:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8005720:	4a71      	ldr	r2, [pc, #452]	; (80058e8 <setconfig_standart16l+0xa20>)
 8005722:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][4]  = 27.7f;
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	f640 416c 	movw	r1, #3180	; 0xc6c
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	4413      	add	r3, r2
 8005732:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8005736:	4a6d      	ldr	r2, [pc, #436]	; (80058ec <setconfig_standart16l+0xa24>)
 8005738:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][5]  = 31.8f;
 800573a:	78fb      	ldrb	r3, [r7, #3]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	4413      	add	r3, r2
 8005748:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 800574c:	4a68      	ldr	r2, [pc, #416]	; (80058f0 <setconfig_standart16l+0xa28>)
 800574e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][6]  = 38.2f;
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005758:	fb01 f303 	mul.w	r3, r1, r3
 800575c:	4413      	add	r3, r2
 800575e:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8005762:	4a64      	ldr	r2, [pc, #400]	; (80058f4 <setconfig_standart16l+0xa2c>)
 8005764:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][7]  = 40.9f;
 8005766:	78fb      	ldrb	r3, [r7, #3]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800576e:	fb01 f303 	mul.w	r3, r1, r3
 8005772:	4413      	add	r3, r2
 8005774:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005778:	4a5f      	ldr	r2, [pc, #380]	; (80058f8 <setconfig_standart16l+0xa30>)
 800577a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][8]  = 42.4f;
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	4413      	add	r3, r2
 800578a:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 800578e:	4a5b      	ldr	r2, [pc, #364]	; (80058fc <setconfig_standart16l+0xa34>)
 8005790:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][9]  = 43.2f;
 8005792:	78fb      	ldrb	r3, [r7, #3]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	f640 416c 	movw	r1, #3180	; 0xc6c
 800579a:	fb01 f303 	mul.w	r3, r1, r3
 800579e:	4413      	add	r3, r2
 80057a0:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 80057a4:	4a56      	ldr	r2, [pc, #344]	; (8005900 <setconfig_standart16l+0xa38>)
 80057a6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][10] = 43.7f;
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	f640 416c 	movw	r1, #3180	; 0xc6c
 80057b0:	fb01 f303 	mul.w	r3, r1, r3
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 80057ba:	4a52      	ldr	r2, [pc, #328]	; (8005904 <setconfig_standart16l+0xa3c>)
 80057bc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][11] = 44.1f;
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80057c6:	fb01 f303 	mul.w	r3, r1, r3
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 80057d0:	4a4d      	ldr	r2, [pc, #308]	; (8005908 <setconfig_standart16l+0xa40>)
 80057d2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][12] = 44.0f;
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80057dc:	fb01 f303 	mul.w	r3, r1, r3
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80057e6:	4a49      	ldr	r2, [pc, #292]	; (800590c <setconfig_standart16l+0xa44>)
 80057e8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][13] = 44.1f;
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	f640 416c 	movw	r1, #3180	; 0xc6c
 80057f2:	fb01 f303 	mul.w	r3, r1, r3
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80057fc:	4a42      	ldr	r2, [pc, #264]	; (8005908 <setconfig_standart16l+0xa40>)
 80057fe:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][14] = 44.7f;
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	4413      	add	r3, r2
 800580e:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8005812:	4a3f      	ldr	r2, [pc, #252]	; (8005910 <setconfig_standart16l+0xa48>)
 8005814:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][15] = 44.9f;
 8005816:	78fb      	ldrb	r3, [r7, #3]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800581e:	fb01 f303 	mul.w	r3, r1, r3
 8005822:	4413      	add	r3, r2
 8005824:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005828:	4a3a      	ldr	r2, [pc, #232]	; (8005914 <setconfig_standart16l+0xa4c>)
 800582a:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[4][0]  = 18.7f;
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005834:	fb01 f303 	mul.w	r3, r1, r3
 8005838:	4413      	add	r3, r2
 800583a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800583e:	4a27      	ldr	r2, [pc, #156]	; (80058dc <setconfig_standart16l+0xa14>)
 8005840:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][1]  = 20.4f;
 8005842:	78fb      	ldrb	r3, [r7, #3]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	f640 416c 	movw	r1, #3180	; 0xc6c
 800584a:	fb01 f303 	mul.w	r3, r1, r3
 800584e:	4413      	add	r3, r2
 8005850:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8005854:	4a30      	ldr	r2, [pc, #192]	; (8005918 <setconfig_standart16l+0xa50>)
 8005856:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][2]  = 21.9f;
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	4413      	add	r3, r2
 8005866:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 800586a:	4a2c      	ldr	r2, [pc, #176]	; (800591c <setconfig_standart16l+0xa54>)
 800586c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][3]  = 24.3f;
 800586e:	78fb      	ldrb	r3, [r7, #3]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005876:	fb01 f303 	mul.w	r3, r1, r3
 800587a:	4413      	add	r3, r2
 800587c:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8005880:	4a27      	ldr	r2, [pc, #156]	; (8005920 <setconfig_standart16l+0xa58>)
 8005882:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][4]  = 27.3f;
 8005884:	78fb      	ldrb	r3, [r7, #3]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	f640 416c 	movw	r1, #3180	; 0xc6c
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	4413      	add	r3, r2
 8005892:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8005896:	4a23      	ldr	r2, [pc, #140]	; (8005924 <setconfig_standart16l+0xa5c>)
 8005898:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][5]  = 31.3f;
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	f640 416c 	movw	r1, #3180	; 0xc6c
 80058a2:	fb01 f303 	mul.w	r3, r1, r3
 80058a6:	4413      	add	r3, r2
 80058a8:	e03e      	b.n	8005928 <setconfig_standart16l+0xa60>
 80058aa:	bf00      	nop
 80058ac:	41c1999a 	.word	0x41c1999a
 80058b0:	41dccccd 	.word	0x41dccccd
 80058b4:	41fd999a 	.word	0x41fd999a
 80058b8:	42193333 	.word	0x42193333
 80058bc:	42246666 	.word	0x42246666
 80058c0:	422a6666 	.word	0x422a6666
 80058c4:	422d999a 	.word	0x422d999a
 80058c8:	422c0000 	.word	0x422c0000
 80058cc:	4231999a 	.word	0x4231999a
 80058d0:	42313333 	.word	0x42313333
 80058d4:	42333333 	.word	0x42333333
 80058d8:	42340000 	.word	0x42340000
 80058dc:	4195999a 	.word	0x4195999a
 80058e0:	41a40000 	.word	0x41a40000
 80058e4:	41b1999a 	.word	0x41b1999a
 80058e8:	41c4cccd 	.word	0x41c4cccd
 80058ec:	41dd999a 	.word	0x41dd999a
 80058f0:	41fe6666 	.word	0x41fe6666
 80058f4:	4218cccd 	.word	0x4218cccd
 80058f8:	4223999a 	.word	0x4223999a
 80058fc:	4229999a 	.word	0x4229999a
 8005900:	422ccccd 	.word	0x422ccccd
 8005904:	422ecccd 	.word	0x422ecccd
 8005908:	42306666 	.word	0x42306666
 800590c:	42300000 	.word	0x42300000
 8005910:	4232cccd 	.word	0x4232cccd
 8005914:	4233999a 	.word	0x4233999a
 8005918:	41a33333 	.word	0x41a33333
 800591c:	41af3333 	.word	0x41af3333
 8005920:	41c26666 	.word	0x41c26666
 8005924:	41da6666 	.word	0x41da6666
 8005928:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 800592c:	4aba      	ldr	r2, [pc, #744]	; (8005c18 <setconfig_standart16l+0xd50>)
 800592e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][6]  = 37.6f;
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005938:	fb01 f303 	mul.w	r3, r1, r3
 800593c:	4413      	add	r3, r2
 800593e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005942:	4ab6      	ldr	r2, [pc, #728]	; (8005c1c <setconfig_standart16l+0xd54>)
 8005944:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][7]  = 40.3f;
 8005946:	78fb      	ldrb	r3, [r7, #3]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800594e:	fb01 f303 	mul.w	r3, r1, r3
 8005952:	4413      	add	r3, r2
 8005954:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005958:	4ab1      	ldr	r2, [pc, #708]	; (8005c20 <setconfig_standart16l+0xd58>)
 800595a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][8]  = 41.7f;
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005964:	fb01 f303 	mul.w	r3, r1, r3
 8005968:	4413      	add	r3, r2
 800596a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800596e:	4aad      	ldr	r2, [pc, #692]	; (8005c24 <setconfig_standart16l+0xd5c>)
 8005970:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][9]  = 42.4f;
 8005972:	78fb      	ldrb	r3, [r7, #3]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	f640 416c 	movw	r1, #3180	; 0xc6c
 800597a:	fb01 f303 	mul.w	r3, r1, r3
 800597e:	4413      	add	r3, r2
 8005980:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005984:	4aa8      	ldr	r2, [pc, #672]	; (8005c28 <setconfig_standart16l+0xd60>)
 8005986:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][10] = 42.9f;
 8005988:	78fb      	ldrb	r3, [r7, #3]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005990:	fb01 f303 	mul.w	r3, r1, r3
 8005994:	4413      	add	r3, r2
 8005996:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800599a:	4aa4      	ldr	r2, [pc, #656]	; (8005c2c <setconfig_standart16l+0xd64>)
 800599c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][11] = 43.2f;
 800599e:	78fb      	ldrb	r3, [r7, #3]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80059a6:	fb01 f303 	mul.w	r3, r1, r3
 80059aa:	4413      	add	r3, r2
 80059ac:	f203 4314 	addw	r3, r3, #1044	; 0x414
 80059b0:	4a9f      	ldr	r2, [pc, #636]	; (8005c30 <setconfig_standart16l+0xd68>)
 80059b2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][12] = 43.1f;
 80059b4:	78fb      	ldrb	r3, [r7, #3]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80059bc:	fb01 f303 	mul.w	r3, r1, r3
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80059c6:	4a9b      	ldr	r2, [pc, #620]	; (8005c34 <setconfig_standart16l+0xd6c>)
 80059c8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][13] = 43.3f;
 80059ca:	78fb      	ldrb	r3, [r7, #3]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	f640 416c 	movw	r1, #3180	; 0xc6c
 80059d2:	fb01 f303 	mul.w	r3, r1, r3
 80059d6:	4413      	add	r3, r2
 80059d8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80059dc:	4a96      	ldr	r2, [pc, #600]	; (8005c38 <setconfig_standart16l+0xd70>)
 80059de:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][14] = 43.0f;
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80059e8:	fb01 f303 	mul.w	r3, r1, r3
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80059f2:	4a92      	ldr	r2, [pc, #584]	; (8005c3c <setconfig_standart16l+0xd74>)
 80059f4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][15] = 44.2f;
 80059f6:	78fb      	ldrb	r3, [r7, #3]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	f640 416c 	movw	r1, #3180	; 0xc6c
 80059fe:	fb01 f303 	mul.w	r3, r1, r3
 8005a02:	4413      	add	r3, r2
 8005a04:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005a08:	4a8d      	ldr	r2, [pc, #564]	; (8005c40 <setconfig_standart16l+0xd78>)
 8005a0a:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[5][0]  = 17.4f;
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005a14:	fb01 f303 	mul.w	r3, r1, r3
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8005a1e:	4a89      	ldr	r2, [pc, #548]	; (8005c44 <setconfig_standart16l+0xd7c>)
 8005a20:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][1]  = 19.4f;
 8005a22:	78fb      	ldrb	r3, [r7, #3]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005a2a:	fb01 f303 	mul.w	r3, r1, r3
 8005a2e:	4413      	add	r3, r2
 8005a30:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 8005a34:	4a84      	ldr	r2, [pc, #528]	; (8005c48 <setconfig_standart16l+0xd80>)
 8005a36:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][2]  = 20.9f;
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005a40:	fb01 f303 	mul.w	r3, r1, r3
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005a4a:	4a80      	ldr	r2, [pc, #512]	; (8005c4c <setconfig_standart16l+0xd84>)
 8005a4c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][3]  = 23.2f;
 8005a4e:	78fb      	ldrb	r3, [r7, #3]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005a56:	fb01 f303 	mul.w	r3, r1, r3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f203 4354 	addw	r3, r3, #1108	; 0x454
 8005a60:	4a7b      	ldr	r2, [pc, #492]	; (8005c50 <setconfig_standart16l+0xd88>)
 8005a62:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][4]  = 26.2f;
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005a6c:	fb01 f303 	mul.w	r3, r1, r3
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8005a76:	4a77      	ldr	r2, [pc, #476]	; (8005c54 <setconfig_standart16l+0xd8c>)
 8005a78:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][5]  = 30.1f;
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005a82:	fb01 f303 	mul.w	r3, r1, r3
 8005a86:	4413      	add	r3, r2
 8005a88:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8005a8c:	4a72      	ldr	r2, [pc, #456]	; (8005c58 <setconfig_standart16l+0xd90>)
 8005a8e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][6]  = 36.3f;
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005a98:	fb01 f303 	mul.w	r3, r1, r3
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8005aa2:	4a6e      	ldr	r2, [pc, #440]	; (8005c5c <setconfig_standart16l+0xd94>)
 8005aa4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][7]  = 39.1f;
 8005aa6:	78fb      	ldrb	r3, [r7, #3]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005aae:	fb01 f303 	mul.w	r3, r1, r3
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8005ab8:	4a69      	ldr	r2, [pc, #420]	; (8005c60 <setconfig_standart16l+0xd98>)
 8005aba:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][8]  = 40.6f;
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005ac4:	fb01 f303 	mul.w	r3, r1, r3
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8005ace:	4a65      	ldr	r2, [pc, #404]	; (8005c64 <setconfig_standart16l+0xd9c>)
 8005ad0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][9]  = 41.3f;
 8005ad2:	78fb      	ldrb	r3, [r7, #3]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005ada:	fb01 f303 	mul.w	r3, r1, r3
 8005ade:	4413      	add	r3, r2
 8005ae0:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8005ae4:	4a60      	ldr	r2, [pc, #384]	; (8005c68 <setconfig_standart16l+0xda0>)
 8005ae6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][10] = 41.9f;
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005af0:	fb01 f303 	mul.w	r3, r1, r3
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8005afa:	4a5c      	ldr	r2, [pc, #368]	; (8005c6c <setconfig_standart16l+0xda4>)
 8005afc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][11] = 42.2f;
 8005afe:	78fb      	ldrb	r3, [r7, #3]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005b06:	fb01 f303 	mul.w	r3, r1, r3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f203 4374 	addw	r3, r3, #1140	; 0x474
 8005b10:	4a57      	ldr	r2, [pc, #348]	; (8005c70 <setconfig_standart16l+0xda8>)
 8005b12:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][12] = 42.1f;
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005b1c:	fb01 f303 	mul.w	r3, r1, r3
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8005b26:	4a53      	ldr	r2, [pc, #332]	; (8005c74 <setconfig_standart16l+0xdac>)
 8005b28:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][13] = 42.3f;
 8005b2a:	78fb      	ldrb	r3, [r7, #3]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005b32:	fb01 f303 	mul.w	r3, r1, r3
 8005b36:	4413      	add	r3, r2
 8005b38:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8005b3c:	4a4e      	ldr	r2, [pc, #312]	; (8005c78 <setconfig_standart16l+0xdb0>)
 8005b3e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][14] = 42.9f;
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005b48:	fb01 f303 	mul.w	r3, r1, r3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8005b52:	4a36      	ldr	r2, [pc, #216]	; (8005c2c <setconfig_standart16l+0xd64>)
 8005b54:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][15] = 43.1f;
 8005b56:	78fb      	ldrb	r3, [r7, #3]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005b5e:	fb01 f303 	mul.w	r3, r1, r3
 8005b62:	4413      	add	r3, r2
 8005b64:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8005b68:	4a32      	ldr	r2, [pc, #200]	; (8005c34 <setconfig_standart16l+0xd6c>)
 8005b6a:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[6][0]  = 14.9f;
 8005b6c:	78fb      	ldrb	r3, [r7, #3]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8005b7e:	4a3f      	ldr	r2, [pc, #252]	; (8005c7c <setconfig_standart16l+0xdb4>)
 8005b80:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][1]  = 17.2f;
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005b8a:	fb01 f303 	mul.w	r3, r1, r3
 8005b8e:	4413      	add	r3, r2
 8005b90:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 8005b94:	4a3a      	ldr	r2, [pc, #232]	; (8005c80 <setconfig_standart16l+0xdb8>)
 8005b96:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][2]  = 18.7f;
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005ba0:	fb01 f303 	mul.w	r3, r1, r3
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8005baa:	4a36      	ldr	r2, [pc, #216]	; (8005c84 <setconfig_standart16l+0xdbc>)
 8005bac:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][3]  = 21.1f;
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005bb6:	fb01 f303 	mul.w	r3, r1, r3
 8005bba:	4413      	add	r3, r2
 8005bbc:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8005bc0:	4a31      	ldr	r2, [pc, #196]	; (8005c88 <setconfig_standart16l+0xdc0>)
 8005bc2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][4]  = 24.3f;
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005bcc:	fb01 f303 	mul.w	r3, r1, r3
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8005bd6:	4a2d      	ldr	r2, [pc, #180]	; (8005c8c <setconfig_standart16l+0xdc4>)
 8005bd8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][5]  = 28.4f;
 8005bda:	78fb      	ldrb	r3, [r7, #3]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005be2:	fb01 f303 	mul.w	r3, r1, r3
 8005be6:	4413      	add	r3, r2
 8005be8:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8005bec:	4a28      	ldr	r2, [pc, #160]	; (8005c90 <setconfig_standart16l+0xdc8>)
 8005bee:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][6]  = 34.3f;
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005bf8:	fb01 f303 	mul.w	r3, r1, r3
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8005c02:	4a24      	ldr	r2, [pc, #144]	; (8005c94 <setconfig_standart16l+0xdcc>)
 8005c04:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][7]  = 37.3f;
 8005c06:	78fb      	ldrb	r3, [r7, #3]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005c0e:	fb01 f303 	mul.w	r3, r1, r3
 8005c12:	4413      	add	r3, r2
 8005c14:	e040      	b.n	8005c98 <setconfig_standart16l+0xdd0>
 8005c16:	bf00      	nop
 8005c18:	41fa6666 	.word	0x41fa6666
 8005c1c:	42166666 	.word	0x42166666
 8005c20:	42213333 	.word	0x42213333
 8005c24:	4226cccd 	.word	0x4226cccd
 8005c28:	4229999a 	.word	0x4229999a
 8005c2c:	422b999a 	.word	0x422b999a
 8005c30:	422ccccd 	.word	0x422ccccd
 8005c34:	422c6666 	.word	0x422c6666
 8005c38:	422d3333 	.word	0x422d3333
 8005c3c:	422c0000 	.word	0x422c0000
 8005c40:	4230cccd 	.word	0x4230cccd
 8005c44:	418b3333 	.word	0x418b3333
 8005c48:	419b3333 	.word	0x419b3333
 8005c4c:	41a73333 	.word	0x41a73333
 8005c50:	41b9999a 	.word	0x41b9999a
 8005c54:	41d1999a 	.word	0x41d1999a
 8005c58:	41f0cccd 	.word	0x41f0cccd
 8005c5c:	42113333 	.word	0x42113333
 8005c60:	421c6666 	.word	0x421c6666
 8005c64:	42226666 	.word	0x42226666
 8005c68:	42253333 	.word	0x42253333
 8005c6c:	4227999a 	.word	0x4227999a
 8005c70:	4228cccd 	.word	0x4228cccd
 8005c74:	42286666 	.word	0x42286666
 8005c78:	42293333 	.word	0x42293333
 8005c7c:	416e6666 	.word	0x416e6666
 8005c80:	4189999a 	.word	0x4189999a
 8005c84:	4195999a 	.word	0x4195999a
 8005c88:	41a8cccd 	.word	0x41a8cccd
 8005c8c:	41c26666 	.word	0x41c26666
 8005c90:	41e33333 	.word	0x41e33333
 8005c94:	42093333 	.word	0x42093333
 8005c98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c9c:	4aba      	ldr	r2, [pc, #744]	; (8005f88 <setconfig_standart16l+0x10c0>)
 8005c9e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][8]  = 38.9f;
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005ca8:	fb01 f303 	mul.w	r3, r1, r3
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8005cb2:	4ab6      	ldr	r2, [pc, #728]	; (8005f8c <setconfig_standart16l+0x10c4>)
 8005cb4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][9]  = 39.8f;
 8005cb6:	78fb      	ldrb	r3, [r7, #3]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005cbe:	fb01 f303 	mul.w	r3, r1, r3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 8005cc8:	4ab1      	ldr	r2, [pc, #708]	; (8005f90 <setconfig_standart16l+0x10c8>)
 8005cca:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][10] = 40.6f;
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005cd4:	fb01 f303 	mul.w	r3, r1, r3
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8005cde:	4aad      	ldr	r2, [pc, #692]	; (8005f94 <setconfig_standart16l+0x10cc>)
 8005ce0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][11] = 41.0f;
 8005ce2:	78fb      	ldrb	r3, [r7, #3]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005cea:	fb01 f303 	mul.w	r3, r1, r3
 8005cee:	4413      	add	r3, r2
 8005cf0:	f203 43d4 	addw	r3, r3, #1236	; 0x4d4
 8005cf4:	4aa8      	ldr	r2, [pc, #672]	; (8005f98 <setconfig_standart16l+0x10d0>)
 8005cf6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][12] = 41.0f;
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005d00:	fb01 f303 	mul.w	r3, r1, r3
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8005d0a:	4aa3      	ldr	r2, [pc, #652]	; (8005f98 <setconfig_standart16l+0x10d0>)
 8005d0c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][13] = 41.3f;
 8005d0e:	78fb      	ldrb	r3, [r7, #3]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005d16:	fb01 f303 	mul.w	r3, r1, r3
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 8005d20:	4a9e      	ldr	r2, [pc, #632]	; (8005f9c <setconfig_standart16l+0x10d4>)
 8005d22:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][14] = 41.8f;
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8005d36:	4a9a      	ldr	r2, [pc, #616]	; (8005fa0 <setconfig_standart16l+0x10d8>)
 8005d38:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][15] = 42.0f;
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005d42:	fb01 f303 	mul.w	r3, r1, r3
 8005d46:	4413      	add	r3, r2
 8005d48:	f203 43e4 	addw	r3, r3, #1252	; 0x4e4
 8005d4c:	4a95      	ldr	r2, [pc, #596]	; (8005fa4 <setconfig_standart16l+0x10dc>)
 8005d4e:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[7][0]  = 12.2f;
 8005d50:	78fb      	ldrb	r3, [r7, #3]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005d58:	fb01 f303 	mul.w	r3, r1, r3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8005d62:	4a91      	ldr	r2, [pc, #580]	; (8005fa8 <setconfig_standart16l+0x10e0>)
 8005d64:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][1]  = 14.5f;
 8005d66:	78fb      	ldrb	r3, [r7, #3]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005d6e:	fb01 f303 	mul.w	r3, r1, r3
 8005d72:	4413      	add	r3, r2
 8005d74:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8005d78:	4a8c      	ldr	r2, [pc, #560]	; (8005fac <setconfig_standart16l+0x10e4>)
 8005d7a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][2]  = 15.9f;
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005d84:	fb01 f303 	mul.w	r3, r1, r3
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8005d8e:	4a88      	ldr	r2, [pc, #544]	; (8005fb0 <setconfig_standart16l+0x10e8>)
 8005d90:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][3]  = 17.9f;
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005d9a:	fb01 f303 	mul.w	r3, r1, r3
 8005d9e:	4413      	add	r3, r2
 8005da0:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8005da4:	4a83      	ldr	r2, [pc, #524]	; (8005fb4 <setconfig_standart16l+0x10ec>)
 8005da6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][4]  = 21.5f;
 8005da8:	78fb      	ldrb	r3, [r7, #3]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005db0:	fb01 f303 	mul.w	r3, r1, r3
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8005dba:	4a7f      	ldr	r2, [pc, #508]	; (8005fb8 <setconfig_standart16l+0x10f0>)
 8005dbc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][5]  = 26.0f;
 8005dbe:	78fb      	ldrb	r3, [r7, #3]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005dc6:	fb01 f303 	mul.w	r3, r1, r3
 8005dca:	4413      	add	r3, r2
 8005dcc:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8005dd0:	4a7a      	ldr	r2, [pc, #488]	; (8005fbc <setconfig_standart16l+0x10f4>)
 8005dd2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][6]  = 31.9f;
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005ddc:	fb01 f303 	mul.w	r3, r1, r3
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8005de6:	4a76      	ldr	r2, [pc, #472]	; (8005fc0 <setconfig_standart16l+0x10f8>)
 8005de8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][7]  = 35.0f;
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005df2:	fb01 f303 	mul.w	r3, r1, r3
 8005df6:	4413      	add	r3, r2
 8005df8:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8005dfc:	4a71      	ldr	r2, [pc, #452]	; (8005fc4 <setconfig_standart16l+0x10fc>)
 8005dfe:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][8]  = 36.8f;
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005e08:	fb01 f303 	mul.w	r3, r1, r3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8005e12:	4a6d      	ldr	r2, [pc, #436]	; (8005fc8 <setconfig_standart16l+0x1100>)
 8005e14:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][9]  = 37.9f;
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005e1e:	fb01 f303 	mul.w	r3, r1, r3
 8005e22:	4413      	add	r3, r2
 8005e24:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8005e28:	4a68      	ldr	r2, [pc, #416]	; (8005fcc <setconfig_standart16l+0x1104>)
 8005e2a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][10] = 38.9f;
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005e34:	fb01 f303 	mul.w	r3, r1, r3
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8005e3e:	4a53      	ldr	r2, [pc, #332]	; (8005f8c <setconfig_standart16l+0x10c4>)
 8005e40:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][11] = 39.5f;
 8005e42:	78fb      	ldrb	r3, [r7, #3]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005e4a:	fb01 f303 	mul.w	r3, r1, r3
 8005e4e:	4413      	add	r3, r2
 8005e50:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8005e54:	4a5e      	ldr	r2, [pc, #376]	; (8005fd0 <setconfig_standart16l+0x1108>)
 8005e56:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][12] = 39.5f;
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005e60:	fb01 f303 	mul.w	r3, r1, r3
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8005e6a:	4a59      	ldr	r2, [pc, #356]	; (8005fd0 <setconfig_standart16l+0x1108>)
 8005e6c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][13] = 40.2f;
 8005e6e:	78fb      	ldrb	r3, [r7, #3]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005e76:	fb01 f303 	mul.w	r3, r1, r3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8005e80:	4a54      	ldr	r2, [pc, #336]	; (8005fd4 <setconfig_standart16l+0x110c>)
 8005e82:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][14] = 40.8f;
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005e8c:	fb01 f303 	mul.w	r3, r1, r3
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8005e96:	4a50      	ldr	r2, [pc, #320]	; (8005fd8 <setconfig_standart16l+0x1110>)
 8005e98:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][15] = 41.0f;
 8005e9a:	78fb      	ldrb	r3, [r7, #3]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005ea2:	fb01 f303 	mul.w	r3, r1, r3
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f203 5344 	addw	r3, r3, #1348	; 0x544
 8005eac:	4a3a      	ldr	r2, [pc, #232]	; (8005f98 <setconfig_standart16l+0x10d0>)
 8005eae:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[8][0]  = 10.2f;
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8005ec2:	4a46      	ldr	r2, [pc, #280]	; (8005fdc <setconfig_standart16l+0x1114>)
 8005ec4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][1]  = 11.9f;
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005ece:	fb01 f303 	mul.w	r3, r1, r3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8005ed8:	4a41      	ldr	r2, [pc, #260]	; (8005fe0 <setconfig_standart16l+0x1118>)
 8005eda:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][2]  = 13.1f;
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005ee4:	fb01 f303 	mul.w	r3, r1, r3
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8005eee:	4a3d      	ldr	r2, [pc, #244]	; (8005fe4 <setconfig_standart16l+0x111c>)
 8005ef0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][3]  = 14.9f;
 8005ef2:	78fb      	ldrb	r3, [r7, #3]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005efa:	fb01 f303 	mul.w	r3, r1, r3
 8005efe:	4413      	add	r3, r2
 8005f00:	f203 5374 	addw	r3, r3, #1396	; 0x574
 8005f04:	4a38      	ldr	r2, [pc, #224]	; (8005fe8 <setconfig_standart16l+0x1120>)
 8005f06:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][4]  = 18.3f;
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005f10:	fb01 f303 	mul.w	r3, r1, r3
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8005f1a:	4a34      	ldr	r2, [pc, #208]	; (8005fec <setconfig_standart16l+0x1124>)
 8005f1c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][5]  = 22.8f;
 8005f1e:	78fb      	ldrb	r3, [r7, #3]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005f26:	fb01 f303 	mul.w	r3, r1, r3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8005f30:	4a2f      	ldr	r2, [pc, #188]	; (8005ff0 <setconfig_standart16l+0x1128>)
 8005f32:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][6]  = 28.4f;
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8005f46:	4a2b      	ldr	r2, [pc, #172]	; (8005ff4 <setconfig_standart16l+0x112c>)
 8005f48:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][7]  = 31.9f;
 8005f4a:	78fb      	ldrb	r3, [r7, #3]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005f52:	fb01 f303 	mul.w	r3, r1, r3
 8005f56:	4413      	add	r3, r2
 8005f58:	f203 5384 	addw	r3, r3, #1412	; 0x584
 8005f5c:	4a18      	ldr	r2, [pc, #96]	; (8005fc0 <setconfig_standart16l+0x10f8>)
 8005f5e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][8]  = 34.2f;
 8005f60:	78fb      	ldrb	r3, [r7, #3]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005f68:	fb01 f303 	mul.w	r3, r1, r3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8005f72:	4a21      	ldr	r2, [pc, #132]	; (8005ff8 <setconfig_standart16l+0x1130>)
 8005f74:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][9]  = 35.8f;
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005f7e:	fb01 f303 	mul.w	r3, r1, r3
 8005f82:	4413      	add	r3, r2
 8005f84:	e03a      	b.n	8005ffc <setconfig_standart16l+0x1134>
 8005f86:	bf00      	nop
 8005f88:	42153333 	.word	0x42153333
 8005f8c:	421b999a 	.word	0x421b999a
 8005f90:	421f3333 	.word	0x421f3333
 8005f94:	42226666 	.word	0x42226666
 8005f98:	42240000 	.word	0x42240000
 8005f9c:	42253333 	.word	0x42253333
 8005fa0:	42273333 	.word	0x42273333
 8005fa4:	42280000 	.word	0x42280000
 8005fa8:	41433333 	.word	0x41433333
 8005fac:	41680000 	.word	0x41680000
 8005fb0:	417e6666 	.word	0x417e6666
 8005fb4:	418f3333 	.word	0x418f3333
 8005fb8:	41ac0000 	.word	0x41ac0000
 8005fbc:	41d00000 	.word	0x41d00000
 8005fc0:	41ff3333 	.word	0x41ff3333
 8005fc4:	420c0000 	.word	0x420c0000
 8005fc8:	42133333 	.word	0x42133333
 8005fcc:	4217999a 	.word	0x4217999a
 8005fd0:	421e0000 	.word	0x421e0000
 8005fd4:	4220cccd 	.word	0x4220cccd
 8005fd8:	42233333 	.word	0x42233333
 8005fdc:	41233333 	.word	0x41233333
 8005fe0:	413e6666 	.word	0x413e6666
 8005fe4:	4151999a 	.word	0x4151999a
 8005fe8:	416e6666 	.word	0x416e6666
 8005fec:	41926666 	.word	0x41926666
 8005ff0:	41b66666 	.word	0x41b66666
 8005ff4:	41e33333 	.word	0x41e33333
 8005ff8:	4208cccd 	.word	0x4208cccd
 8005ffc:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8006000:	4aba      	ldr	r2, [pc, #744]	; (80062ec <setconfig_standart16l+0x1424>)
 8006002:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][10] = 37.2f;
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	f640 416c 	movw	r1, #3180	; 0xc6c
 800600c:	fb01 f303 	mul.w	r3, r1, r3
 8006010:	4413      	add	r3, r2
 8006012:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8006016:	4ab6      	ldr	r2, [pc, #728]	; (80062f0 <setconfig_standart16l+0x1428>)
 8006018:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][11] = 38.1f;
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006022:	fb01 f303 	mul.w	r3, r1, r3
 8006026:	4413      	add	r3, r2
 8006028:	f203 5394 	addw	r3, r3, #1428	; 0x594
 800602c:	4ab1      	ldr	r2, [pc, #708]	; (80062f4 <setconfig_standart16l+0x142c>)
 800602e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][12] = 38.7f;
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006038:	fb01 f303 	mul.w	r3, r1, r3
 800603c:	4413      	add	r3, r2
 800603e:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8006042:	4aad      	ldr	r2, [pc, #692]	; (80062f8 <setconfig_standart16l+0x1430>)
 8006044:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][13] = 39.1f;
 8006046:	78fb      	ldrb	r3, [r7, #3]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800604e:	fb01 f303 	mul.w	r3, r1, r3
 8006052:	4413      	add	r3, r2
 8006054:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 8006058:	4aa8      	ldr	r2, [pc, #672]	; (80062fc <setconfig_standart16l+0x1434>)
 800605a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][14] = 39.7f;
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006064:	fb01 f303 	mul.w	r3, r1, r3
 8006068:	4413      	add	r3, r2
 800606a:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 800606e:	4aa4      	ldr	r2, [pc, #656]	; (8006300 <setconfig_standart16l+0x1438>)
 8006070:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][15] = 39.9f;
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	f640 416c 	movw	r1, #3180	; 0xc6c
 800607a:	fb01 f303 	mul.w	r3, r1, r3
 800607e:	4413      	add	r3, r2
 8006080:	f203 53a4 	addw	r3, r3, #1444	; 0x5a4
 8006084:	4a9f      	ldr	r2, [pc, #636]	; (8006304 <setconfig_standart16l+0x143c>)
 8006086:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[9][0]  = 8.5f;
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006090:	fb01 f303 	mul.w	r3, r1, r3
 8006094:	4413      	add	r3, r2
 8006096:	f503 63b9 	add.w	r3, r3, #1480	; 0x5c8
 800609a:	4a9b      	ldr	r2, [pc, #620]	; (8006308 <setconfig_standart16l+0x1440>)
 800609c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][1]  = 9.7f;
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80060a6:	fb01 f303 	mul.w	r3, r1, r3
 80060aa:	4413      	add	r3, r2
 80060ac:	f203 53cc 	addw	r3, r3, #1484	; 0x5cc
 80060b0:	4a96      	ldr	r2, [pc, #600]	; (800630c <setconfig_standart16l+0x1444>)
 80060b2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][2]  = 10.8f;
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80060bc:	fb01 f303 	mul.w	r3, r1, r3
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 80060c6:	4a92      	ldr	r2, [pc, #584]	; (8006310 <setconfig_standart16l+0x1448>)
 80060c8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][3]  = 12.4f;
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	f640 416c 	movw	r1, #3180	; 0xc6c
 80060d2:	fb01 f303 	mul.w	r3, r1, r3
 80060d6:	4413      	add	r3, r2
 80060d8:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 80060dc:	4a8d      	ldr	r2, [pc, #564]	; (8006314 <setconfig_standart16l+0x144c>)
 80060de:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][4]  = 15.3f;
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80060e8:	fb01 f303 	mul.w	r3, r1, r3
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 80060f2:	4a89      	ldr	r2, [pc, #548]	; (8006318 <setconfig_standart16l+0x1450>)
 80060f4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][5]  = 19.2f;
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	f640 416c 	movw	r1, #3180	; 0xc6c
 80060fe:	fb01 f303 	mul.w	r3, r1, r3
 8006102:	4413      	add	r3, r2
 8006104:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8006108:	4a84      	ldr	r2, [pc, #528]	; (800631c <setconfig_standart16l+0x1454>)
 800610a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][6]  = 23.0f;
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006114:	fb01 f303 	mul.w	r3, r1, r3
 8006118:	4413      	add	r3, r2
 800611a:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
 800611e:	4a80      	ldr	r2, [pc, #512]	; (8006320 <setconfig_standart16l+0x1458>)
 8006120:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][7]  = 27.9f;
 8006122:	78fb      	ldrb	r3, [r7, #3]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	f640 416c 	movw	r1, #3180	; 0xc6c
 800612a:	fb01 f303 	mul.w	r3, r1, r3
 800612e:	4413      	add	r3, r2
 8006130:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 8006134:	4a7b      	ldr	r2, [pc, #492]	; (8006324 <setconfig_standart16l+0x145c>)
 8006136:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][8]  = 30.0f;
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006140:	fb01 f303 	mul.w	r3, r1, r3
 8006144:	4413      	add	r3, r2
 8006146:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 800614a:	4a77      	ldr	r2, [pc, #476]	; (8006328 <setconfig_standart16l+0x1460>)
 800614c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][9]  = 33.2f;
 800614e:	78fb      	ldrb	r3, [r7, #3]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006156:	fb01 f303 	mul.w	r3, r1, r3
 800615a:	4413      	add	r3, r2
 800615c:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8006160:	4a72      	ldr	r2, [pc, #456]	; (800632c <setconfig_standart16l+0x1464>)
 8006162:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][10] = 35.4f;
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	f640 416c 	movw	r1, #3180	; 0xc6c
 800616c:	fb01 f303 	mul.w	r3, r1, r3
 8006170:	4413      	add	r3, r2
 8006172:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8006176:	4a6e      	ldr	r2, [pc, #440]	; (8006330 <setconfig_standart16l+0x1468>)
 8006178:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][11] = 36.5f;
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006182:	fb01 f303 	mul.w	r3, r1, r3
 8006186:	4413      	add	r3, r2
 8006188:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800618c:	4a69      	ldr	r2, [pc, #420]	; (8006334 <setconfig_standart16l+0x146c>)
 800618e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][12] = 36.7f;
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006198:	fb01 f303 	mul.w	r3, r1, r3
 800619c:	4413      	add	r3, r2
 800619e:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 80061a2:	4a65      	ldr	r2, [pc, #404]	; (8006338 <setconfig_standart16l+0x1470>)
 80061a4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][13] = 37.0f;
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	f640 416c 	movw	r1, #3180	; 0xc6c
 80061ae:	fb01 f303 	mul.w	r3, r1, r3
 80061b2:	4413      	add	r3, r2
 80061b4:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 80061b8:	4a60      	ldr	r2, [pc, #384]	; (800633c <setconfig_standart16l+0x1474>)
 80061ba:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][14] = 37.5f;
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80061c4:	fb01 f303 	mul.w	r3, r1, r3
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80061ce:	4a5c      	ldr	r2, [pc, #368]	; (8006340 <setconfig_standart16l+0x1478>)
 80061d0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][15] = 37.7f;
 80061d2:	78fb      	ldrb	r3, [r7, #3]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80061da:	fb01 f303 	mul.w	r3, r1, r3
 80061de:	4413      	add	r3, r2
 80061e0:	f203 6304 	addw	r3, r3, #1540	; 0x604
 80061e4:	4a57      	ldr	r2, [pc, #348]	; (8006344 <setconfig_standart16l+0x147c>)
 80061e6:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[10][0]  = 7.1f;
 80061e8:	78fb      	ldrb	r3, [r7, #3]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	f640 416c 	movw	r1, #3180	; 0xc6c
 80061f0:	fb01 f303 	mul.w	r3, r1, r3
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 80061fa:	4a53      	ldr	r2, [pc, #332]	; (8006348 <setconfig_standart16l+0x1480>)
 80061fc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][1]  = 8.2f;
 80061fe:	78fb      	ldrb	r3, [r7, #3]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006206:	fb01 f303 	mul.w	r3, r1, r3
 800620a:	4413      	add	r3, r2
 800620c:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8006210:	4a4e      	ldr	r2, [pc, #312]	; (800634c <setconfig_standart16l+0x1484>)
 8006212:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][2]  = 9.2f;
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	f640 416c 	movw	r1, #3180	; 0xc6c
 800621c:	fb01 f303 	mul.w	r3, r1, r3
 8006220:	4413      	add	r3, r2
 8006222:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 8006226:	4a4a      	ldr	r2, [pc, #296]	; (8006350 <setconfig_standart16l+0x1488>)
 8006228:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][3]  = 10.6f;
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006232:	fb01 f303 	mul.w	r3, r1, r3
 8006236:	4413      	add	r3, r2
 8006238:	f203 6334 	addw	r3, r3, #1588	; 0x634
 800623c:	4a45      	ldr	r2, [pc, #276]	; (8006354 <setconfig_standart16l+0x148c>)
 800623e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][4]  = 12.9f;
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006248:	fb01 f303 	mul.w	r3, r1, r3
 800624c:	4413      	add	r3, r2
 800624e:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8006252:	4a41      	ldr	r2, [pc, #260]	; (8006358 <setconfig_standart16l+0x1490>)
 8006254:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][5]  = 16.1f;
 8006256:	78fb      	ldrb	r3, [r7, #3]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800625e:	fb01 f303 	mul.w	r3, r1, r3
 8006262:	4413      	add	r3, r2
 8006264:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8006268:	4a3c      	ldr	r2, [pc, #240]	; (800635c <setconfig_standart16l+0x1494>)
 800626a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][6]  = 20.8f;
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006274:	fb01 f303 	mul.w	r3, r1, r3
 8006278:	4413      	add	r3, r2
 800627a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800627e:	4a38      	ldr	r2, [pc, #224]	; (8006360 <setconfig_standart16l+0x1498>)
 8006280:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][7]  = 24.0f;
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	f640 416c 	movw	r1, #3180	; 0xc6c
 800628a:	fb01 f303 	mul.w	r3, r1, r3
 800628e:	4413      	add	r3, r2
 8006290:	f203 6344 	addw	r3, r3, #1604	; 0x644
 8006294:	4a33      	ldr	r2, [pc, #204]	; (8006364 <setconfig_standart16l+0x149c>)
 8006296:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][8]  = 28.3f;
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	f640 416c 	movw	r1, #3180	; 0xc6c
 80062a0:	fb01 f303 	mul.w	r3, r1, r3
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 80062aa:	4a2f      	ldr	r2, [pc, #188]	; (8006368 <setconfig_standart16l+0x14a0>)
 80062ac:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][9]  = 30.8f;
 80062ae:	78fb      	ldrb	r3, [r7, #3]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80062b6:	fb01 f303 	mul.w	r3, r1, r3
 80062ba:	4413      	add	r3, r2
 80062bc:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 80062c0:	4a2a      	ldr	r2, [pc, #168]	; (800636c <setconfig_standart16l+0x14a4>)
 80062c2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][10] = 33.4f;
 80062c4:	78fb      	ldrb	r3, [r7, #3]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80062cc:	fb01 f303 	mul.w	r3, r1, r3
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 80062d6:	4a26      	ldr	r2, [pc, #152]	; (8006370 <setconfig_standart16l+0x14a8>)
 80062d8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][11] = 34.2f;
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	f640 416c 	movw	r1, #3180	; 0xc6c
 80062e2:	fb01 f303 	mul.w	r3, r1, r3
 80062e6:	4413      	add	r3, r2
 80062e8:	e044      	b.n	8006374 <setconfig_standart16l+0x14ac>
 80062ea:	bf00      	nop
 80062ec:	420f3333 	.word	0x420f3333
 80062f0:	4214cccd 	.word	0x4214cccd
 80062f4:	42186666 	.word	0x42186666
 80062f8:	421acccd 	.word	0x421acccd
 80062fc:	421c6666 	.word	0x421c6666
 8006300:	421ecccd 	.word	0x421ecccd
 8006304:	421f999a 	.word	0x421f999a
 8006308:	41080000 	.word	0x41080000
 800630c:	411b3333 	.word	0x411b3333
 8006310:	412ccccd 	.word	0x412ccccd
 8006314:	41466666 	.word	0x41466666
 8006318:	4174cccd 	.word	0x4174cccd
 800631c:	4199999a 	.word	0x4199999a
 8006320:	41b80000 	.word	0x41b80000
 8006324:	41df3333 	.word	0x41df3333
 8006328:	41f00000 	.word	0x41f00000
 800632c:	4204cccd 	.word	0x4204cccd
 8006330:	420d999a 	.word	0x420d999a
 8006334:	42120000 	.word	0x42120000
 8006338:	4212cccd 	.word	0x4212cccd
 800633c:	42140000 	.word	0x42140000
 8006340:	42160000 	.word	0x42160000
 8006344:	4216cccd 	.word	0x4216cccd
 8006348:	40e33333 	.word	0x40e33333
 800634c:	41033333 	.word	0x41033333
 8006350:	41133333 	.word	0x41133333
 8006354:	4129999a 	.word	0x4129999a
 8006358:	414e6666 	.word	0x414e6666
 800635c:	4180cccd 	.word	0x4180cccd
 8006360:	41a66666 	.word	0x41a66666
 8006364:	41c00000 	.word	0x41c00000
 8006368:	41e26666 	.word	0x41e26666
 800636c:	41f66666 	.word	0x41f66666
 8006370:	4205999a 	.word	0x4205999a
 8006374:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8006378:	4aba      	ldr	r2, [pc, #744]	; (8006664 <setconfig_standart16l+0x179c>)
 800637a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][12] = 33.7f;
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006384:	fb01 f303 	mul.w	r3, r1, r3
 8006388:	4413      	add	r3, r2
 800638a:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 800638e:	4ab6      	ldr	r2, [pc, #728]	; (8006668 <setconfig_standart16l+0x17a0>)
 8006390:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][13] = 33.9f;
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	f640 416c 	movw	r1, #3180	; 0xc6c
 800639a:	fb01 f303 	mul.w	r3, r1, r3
 800639e:	4413      	add	r3, r2
 80063a0:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 80063a4:	4ab1      	ldr	r2, [pc, #708]	; (800666c <setconfig_standart16l+0x17a4>)
 80063a6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][14] = 34.2f;
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	f640 416c 	movw	r1, #3180	; 0xc6c
 80063b0:	fb01 f303 	mul.w	r3, r1, r3
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 80063ba:	4aaa      	ldr	r2, [pc, #680]	; (8006664 <setconfig_standart16l+0x179c>)
 80063bc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][15] = 34.3f;
 80063be:	78fb      	ldrb	r3, [r7, #3]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80063c6:	fb01 f303 	mul.w	r3, r1, r3
 80063ca:	4413      	add	r3, r2
 80063cc:	f203 6364 	addw	r3, r3, #1636	; 0x664
 80063d0:	4aa7      	ldr	r2, [pc, #668]	; (8006670 <setconfig_standart16l+0x17a8>)
 80063d2:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[11][0]  = 6.3f;
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80063dc:	fb01 f303 	mul.w	r3, r1, r3
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 80063e6:	4aa3      	ldr	r2, [pc, #652]	; (8006674 <setconfig_standart16l+0x17ac>)
 80063e8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][1]  = 7.2f;
 80063ea:	78fb      	ldrb	r3, [r7, #3]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	f640 416c 	movw	r1, #3180	; 0xc6c
 80063f2:	fb01 f303 	mul.w	r3, r1, r3
 80063f6:	4413      	add	r3, r2
 80063f8:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80063fc:	4a9e      	ldr	r2, [pc, #632]	; (8006678 <setconfig_standart16l+0x17b0>)
 80063fe:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][2]  = 8.1f;
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006408:	fb01 f303 	mul.w	r3, r1, r3
 800640c:	4413      	add	r3, r2
 800640e:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8006412:	4a9a      	ldr	r2, [pc, #616]	; (800667c <setconfig_standart16l+0x17b4>)
 8006414:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][3]  = 9.3f;
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800641e:	fb01 f303 	mul.w	r3, r1, r3
 8006422:	4413      	add	r3, r2
 8006424:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006428:	4a95      	ldr	r2, [pc, #596]	; (8006680 <setconfig_standart16l+0x17b8>)
 800642a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][4]  = 11.1f;
 800642c:	78fb      	ldrb	r3, [r7, #3]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006434:	fb01 f303 	mul.w	r3, r1, r3
 8006438:	4413      	add	r3, r2
 800643a:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 800643e:	4a91      	ldr	r2, [pc, #580]	; (8006684 <setconfig_standart16l+0x17bc>)
 8006440:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][5]  = 14.0f;
 8006442:	78fb      	ldrb	r3, [r7, #3]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	f640 416c 	movw	r1, #3180	; 0xc6c
 800644a:	fb01 f303 	mul.w	r3, r1, r3
 800644e:	4413      	add	r3, r2
 8006450:	f203 639c 	addw	r3, r3, #1692	; 0x69c
 8006454:	4a8c      	ldr	r2, [pc, #560]	; (8006688 <setconfig_standart16l+0x17c0>)
 8006456:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][6]  = 18.0f;
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006460:	fb01 f303 	mul.w	r3, r1, r3
 8006464:	4413      	add	r3, r2
 8006466:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800646a:	4a88      	ldr	r2, [pc, #544]	; (800668c <setconfig_standart16l+0x17c4>)
 800646c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][7]  = 23.3f;
 800646e:	78fb      	ldrb	r3, [r7, #3]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006476:	fb01 f303 	mul.w	r3, r1, r3
 800647a:	4413      	add	r3, r2
 800647c:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8006480:	4a83      	ldr	r2, [pc, #524]	; (8006690 <setconfig_standart16l+0x17c8>)
 8006482:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][8]  = 26.9f;
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	f640 416c 	movw	r1, #3180	; 0xc6c
 800648c:	fb01 f303 	mul.w	r3, r1, r3
 8006490:	4413      	add	r3, r2
 8006492:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 8006496:	4a7f      	ldr	r2, [pc, #508]	; (8006694 <setconfig_standart16l+0x17cc>)
 8006498:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][9]  = 29.1f;
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	f640 416c 	movw	r1, #3180	; 0xc6c
 80064a2:	fb01 f303 	mul.w	r3, r1, r3
 80064a6:	4413      	add	r3, r2
 80064a8:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 80064ac:	4a7a      	ldr	r2, [pc, #488]	; (8006698 <setconfig_standart16l+0x17d0>)
 80064ae:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][10] = 31.6f;
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80064b8:	fb01 f303 	mul.w	r3, r1, r3
 80064bc:	4413      	add	r3, r2
 80064be:	f503 63d6 	add.w	r3, r3, #1712	; 0x6b0
 80064c2:	4a76      	ldr	r2, [pc, #472]	; (800669c <setconfig_standart16l+0x17d4>)
 80064c4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][11] = 32.0f;
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	f640 416c 	movw	r1, #3180	; 0xc6c
 80064ce:	fb01 f303 	mul.w	r3, r1, r3
 80064d2:	4413      	add	r3, r2
 80064d4:	f203 63b4 	addw	r3, r3, #1716	; 0x6b4
 80064d8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80064dc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][12] = 31.0f;
 80064de:	78fb      	ldrb	r3, [r7, #3]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80064e6:	fb01 f303 	mul.w	r3, r1, r3
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 80064f0:	4a6b      	ldr	r2, [pc, #428]	; (80066a0 <setconfig_standart16l+0x17d8>)
 80064f2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][13] = 31.3f;
 80064f4:	78fb      	ldrb	r3, [r7, #3]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80064fc:	fb01 f303 	mul.w	r3, r1, r3
 8006500:	4413      	add	r3, r2
 8006502:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 8006506:	4a67      	ldr	r2, [pc, #412]	; (80066a4 <setconfig_standart16l+0x17dc>)
 8006508:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][14] = 31.7f;
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006512:	fb01 f303 	mul.w	r3, r1, r3
 8006516:	4413      	add	r3, r2
 8006518:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 800651c:	4a62      	ldr	r2, [pc, #392]	; (80066a8 <setconfig_standart16l+0x17e0>)
 800651e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][15] = 31.8f;
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006528:	fb01 f303 	mul.w	r3, r1, r3
 800652c:	4413      	add	r3, r2
 800652e:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
 8006532:	4a5e      	ldr	r2, [pc, #376]	; (80066ac <setconfig_standart16l+0x17e4>)
 8006534:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[12][0]  = 6.1f;
 8006536:	78fb      	ldrb	r3, [r7, #3]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800653e:	fb01 f303 	mul.w	r3, r1, r3
 8006542:	4413      	add	r3, r2
 8006544:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8006548:	4a59      	ldr	r2, [pc, #356]	; (80066b0 <setconfig_standart16l+0x17e8>)
 800654a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][1]  = 6.7f;
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006554:	fb01 f303 	mul.w	r3, r1, r3
 8006558:	4413      	add	r3, r2
 800655a:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 800655e:	4a55      	ldr	r2, [pc, #340]	; (80066b4 <setconfig_standart16l+0x17ec>)
 8006560:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][2]  = 7.3f;
 8006562:	78fb      	ldrb	r3, [r7, #3]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	f640 416c 	movw	r1, #3180	; 0xc6c
 800656a:	fb01 f303 	mul.w	r3, r1, r3
 800656e:	4413      	add	r3, r2
 8006570:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 8006574:	4a50      	ldr	r2, [pc, #320]	; (80066b8 <setconfig_standart16l+0x17f0>)
 8006576:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][3]  = 8.4f;
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006580:	fb01 f303 	mul.w	r3, r1, r3
 8006584:	4413      	add	r3, r2
 8006586:	f203 63f4 	addw	r3, r3, #1780	; 0x6f4
 800658a:	4a4c      	ldr	r2, [pc, #304]	; (80066bc <setconfig_standart16l+0x17f4>)
 800658c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][4]  = 9.9f;
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006596:	fb01 f303 	mul.w	r3, r1, r3
 800659a:	4413      	add	r3, r2
 800659c:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 80065a0:	4a47      	ldr	r2, [pc, #284]	; (80066c0 <setconfig_standart16l+0x17f8>)
 80065a2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][5]  = 12.5f;
 80065a4:	78fb      	ldrb	r3, [r7, #3]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	4413      	add	r3, r2
 80065b2:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 80065b6:	4a43      	ldr	r2, [pc, #268]	; (80066c4 <setconfig_standart16l+0x17fc>)
 80065b8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][6]  = 17.7f;
 80065ba:	78fb      	ldrb	r3, [r7, #3]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	f640 416c 	movw	r1, #3180	; 0xc6c
 80065c2:	fb01 f303 	mul.w	r3, r1, r3
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80065cc:	4a3e      	ldr	r2, [pc, #248]	; (80066c8 <setconfig_standart16l+0x1800>)
 80065ce:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][7]  = 22.0f;
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80065d8:	fb01 f303 	mul.w	r3, r1, r3
 80065dc:	4413      	add	r3, r2
 80065de:	f203 7304 	addw	r3, r3, #1796	; 0x704
 80065e2:	4a3a      	ldr	r2, [pc, #232]	; (80066cc <setconfig_standart16l+0x1804>)
 80065e4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][8]  = 25.9f;
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	f640 416c 	movw	r1, #3180	; 0xc6c
 80065ee:	fb01 f303 	mul.w	r3, r1, r3
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
 80065f8:	4a35      	ldr	r2, [pc, #212]	; (80066d0 <setconfig_standart16l+0x1808>)
 80065fa:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][9]  = 27.9f;
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006604:	fb01 f303 	mul.w	r3, r1, r3
 8006608:	4413      	add	r3, r2
 800660a:	f203 730c 	addw	r3, r3, #1804	; 0x70c
 800660e:	4a31      	ldr	r2, [pc, #196]	; (80066d4 <setconfig_standart16l+0x180c>)
 8006610:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][10] = 30.1f;
 8006612:	78fb      	ldrb	r3, [r7, #3]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	f640 416c 	movw	r1, #3180	; 0xc6c
 800661a:	fb01 f303 	mul.w	r3, r1, r3
 800661e:	4413      	add	r3, r2
 8006620:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 8006624:	4a2c      	ldr	r2, [pc, #176]	; (80066d8 <setconfig_standart16l+0x1810>)
 8006626:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][11] = 30.3f;
 8006628:	78fb      	ldrb	r3, [r7, #3]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006630:	fb01 f303 	mul.w	r3, r1, r3
 8006634:	4413      	add	r3, r2
 8006636:	f203 7314 	addw	r3, r3, #1812	; 0x714
 800663a:	4a28      	ldr	r2, [pc, #160]	; (80066dc <setconfig_standart16l+0x1814>)
 800663c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][12] = 29.2f;
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006646:	fb01 f303 	mul.w	r3, r1, r3
 800664a:	4413      	add	r3, r2
 800664c:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8006650:	4a23      	ldr	r2, [pc, #140]	; (80066e0 <setconfig_standart16l+0x1818>)
 8006652:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][13] = 29.4f;
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	f640 416c 	movw	r1, #3180	; 0xc6c
 800665c:	fb01 f303 	mul.w	r3, r1, r3
 8006660:	4413      	add	r3, r2
 8006662:	e03f      	b.n	80066e4 <setconfig_standart16l+0x181c>
 8006664:	4208cccd 	.word	0x4208cccd
 8006668:	4206cccd 	.word	0x4206cccd
 800666c:	4207999a 	.word	0x4207999a
 8006670:	42093333 	.word	0x42093333
 8006674:	40c9999a 	.word	0x40c9999a
 8006678:	40e66666 	.word	0x40e66666
 800667c:	4101999a 	.word	0x4101999a
 8006680:	4114cccd 	.word	0x4114cccd
 8006684:	4131999a 	.word	0x4131999a
 8006688:	41600000 	.word	0x41600000
 800668c:	41900000 	.word	0x41900000
 8006690:	41ba6666 	.word	0x41ba6666
 8006694:	41d73333 	.word	0x41d73333
 8006698:	41e8cccd 	.word	0x41e8cccd
 800669c:	41fccccd 	.word	0x41fccccd
 80066a0:	41f80000 	.word	0x41f80000
 80066a4:	41fa6666 	.word	0x41fa6666
 80066a8:	41fd999a 	.word	0x41fd999a
 80066ac:	41fe6666 	.word	0x41fe6666
 80066b0:	40c33333 	.word	0x40c33333
 80066b4:	40d66666 	.word	0x40d66666
 80066b8:	40e9999a 	.word	0x40e9999a
 80066bc:	41066666 	.word	0x41066666
 80066c0:	411e6666 	.word	0x411e6666
 80066c4:	41480000 	.word	0x41480000
 80066c8:	418d999a 	.word	0x418d999a
 80066cc:	41b00000 	.word	0x41b00000
 80066d0:	41cf3333 	.word	0x41cf3333
 80066d4:	41df3333 	.word	0x41df3333
 80066d8:	41f0cccd 	.word	0x41f0cccd
 80066dc:	41f26666 	.word	0x41f26666
 80066e0:	41e9999a 	.word	0x41e9999a
 80066e4:	f203 731c 	addw	r3, r3, #1820	; 0x71c
 80066e8:	4aba      	ldr	r2, [pc, #744]	; (80069d4 <setconfig_standart16l+0x1b0c>)
 80066ea:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][14] = 30.0f;
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80066f4:	fb01 f303 	mul.w	r3, r1, r3
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80066fe:	4ab6      	ldr	r2, [pc, #728]	; (80069d8 <setconfig_standart16l+0x1b10>)
 8006700:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][15] = 30.2f;
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	f640 416c 	movw	r1, #3180	; 0xc6c
 800670a:	fb01 f303 	mul.w	r3, r1, r3
 800670e:	4413      	add	r3, r2
 8006710:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8006714:	4ab1      	ldr	r2, [pc, #708]	; (80069dc <setconfig_standart16l+0x1b14>)
 8006716:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[13][0]  = 6.0f;
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006720:	fb01 f303 	mul.w	r3, r1, r3
 8006724:	4413      	add	r3, r2
 8006726:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 800672a:	4aad      	ldr	r2, [pc, #692]	; (80069e0 <setconfig_standart16l+0x1b18>)
 800672c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][1]  = 6.5f;
 800672e:	78fb      	ldrb	r3, [r7, #3]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006736:	fb01 f303 	mul.w	r3, r1, r3
 800673a:	4413      	add	r3, r2
 800673c:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 8006740:	4aa8      	ldr	r2, [pc, #672]	; (80069e4 <setconfig_standart16l+0x1b1c>)
 8006742:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][2]  = 7.1f;
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	f640 416c 	movw	r1, #3180	; 0xc6c
 800674c:	fb01 f303 	mul.w	r3, r1, r3
 8006750:	4413      	add	r3, r2
 8006752:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8006756:	4aa4      	ldr	r2, [pc, #656]	; (80069e8 <setconfig_standart16l+0x1b20>)
 8006758:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][3]  = 7.9f;
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006762:	fb01 f303 	mul.w	r3, r1, r3
 8006766:	4413      	add	r3, r2
 8006768:	f203 7354 	addw	r3, r3, #1876	; 0x754
 800676c:	4a9f      	ldr	r2, [pc, #636]	; (80069ec <setconfig_standart16l+0x1b24>)
 800676e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][4]  = 9.1f;
 8006770:	78fb      	ldrb	r3, [r7, #3]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006778:	fb01 f303 	mul.w	r3, r1, r3
 800677c:	4413      	add	r3, r2
 800677e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8006782:	4a9b      	ldr	r2, [pc, #620]	; (80069f0 <setconfig_standart16l+0x1b28>)
 8006784:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][5]  = 11.3f;
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800678e:	fb01 f303 	mul.w	r3, r1, r3
 8006792:	4413      	add	r3, r2
 8006794:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8006798:	4a96      	ldr	r2, [pc, #600]	; (80069f4 <setconfig_standart16l+0x1b2c>)
 800679a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][6]  = 15.8f;
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80067a4:	fb01 f303 	mul.w	r3, r1, r3
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80067ae:	4a92      	ldr	r2, [pc, #584]	; (80069f8 <setconfig_standart16l+0x1b30>)
 80067b0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][7]  = 20.3f;
 80067b2:	78fb      	ldrb	r3, [r7, #3]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80067ba:	fb01 f303 	mul.w	r3, r1, r3
 80067be:	4413      	add	r3, r2
 80067c0:	f203 7364 	addw	r3, r3, #1892	; 0x764
 80067c4:	4a8d      	ldr	r2, [pc, #564]	; (80069fc <setconfig_standart16l+0x1b34>)
 80067c6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][8]  = 24.4f;
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	f640 416c 	movw	r1, #3180	; 0xc6c
 80067d0:	fb01 f303 	mul.w	r3, r1, r3
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 63ed 	add.w	r3, r3, #1896	; 0x768
 80067da:	4a89      	ldr	r2, [pc, #548]	; (8006a00 <setconfig_standart16l+0x1b38>)
 80067dc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][9]  = 26.6f;
 80067de:	78fb      	ldrb	r3, [r7, #3]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80067e6:	fb01 f303 	mul.w	r3, r1, r3
 80067ea:	4413      	add	r3, r2
 80067ec:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80067f0:	4a84      	ldr	r2, [pc, #528]	; (8006a04 <setconfig_standart16l+0x1b3c>)
 80067f2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][10] = 28.7f;
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80067fc:	fb01 f303 	mul.w	r3, r1, r3
 8006800:	4413      	add	r3, r2
 8006802:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 8006806:	4a80      	ldr	r2, [pc, #512]	; (8006a08 <setconfig_standart16l+0x1b40>)
 8006808:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][11] = 28.8f;
 800680a:	78fb      	ldrb	r3, [r7, #3]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006812:	fb01 f303 	mul.w	r3, r1, r3
 8006816:	4413      	add	r3, r2
 8006818:	f203 7374 	addw	r3, r3, #1908	; 0x774
 800681c:	4a7b      	ldr	r2, [pc, #492]	; (8006a0c <setconfig_standart16l+0x1b44>)
 800681e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][12] = 27.6f;
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006828:	fb01 f303 	mul.w	r3, r1, r3
 800682c:	4413      	add	r3, r2
 800682e:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8006832:	4a77      	ldr	r2, [pc, #476]	; (8006a10 <setconfig_standart16l+0x1b48>)
 8006834:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][13] = 27.9f;
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800683e:	fb01 f303 	mul.w	r3, r1, r3
 8006842:	4413      	add	r3, r2
 8006844:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8006848:	4a72      	ldr	r2, [pc, #456]	; (8006a14 <setconfig_standart16l+0x1b4c>)
 800684a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][14] = 28.6f;
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006854:	fb01 f303 	mul.w	r3, r1, r3
 8006858:	4413      	add	r3, r2
 800685a:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 800685e:	4a6e      	ldr	r2, [pc, #440]	; (8006a18 <setconfig_standart16l+0x1b50>)
 8006860:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][15] = 28.8f;
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	f640 416c 	movw	r1, #3180	; 0xc6c
 800686a:	fb01 f303 	mul.w	r3, r1, r3
 800686e:	4413      	add	r3, r2
 8006870:	f203 7384 	addw	r3, r3, #1924	; 0x784
 8006874:	4a65      	ldr	r2, [pc, #404]	; (8006a0c <setconfig_standart16l+0x1b44>)
 8006876:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[14][0]  = 6.0f;
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006880:	fb01 f303 	mul.w	r3, r1, r3
 8006884:	4413      	add	r3, r2
 8006886:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800688a:	4a55      	ldr	r2, [pc, #340]	; (80069e0 <setconfig_standart16l+0x1b18>)
 800688c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][1]  = 6.5f;
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006896:	fb01 f303 	mul.w	r3, r1, r3
 800689a:	4413      	add	r3, r2
 800689c:	f203 73ac 	addw	r3, r3, #1964	; 0x7ac
 80068a0:	4a50      	ldr	r2, [pc, #320]	; (80069e4 <setconfig_standart16l+0x1b1c>)
 80068a2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][2]  = 7.0f;
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80068ac:	fb01 f303 	mul.w	r3, r1, r3
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 80068b6:	4a59      	ldr	r2, [pc, #356]	; (8006a1c <setconfig_standart16l+0x1b54>)
 80068b8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][3]  = 7.7f;
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	f640 416c 	movw	r1, #3180	; 0xc6c
 80068c2:	fb01 f303 	mul.w	r3, r1, r3
 80068c6:	4413      	add	r3, r2
 80068c8:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 80068cc:	4a54      	ldr	r2, [pc, #336]	; (8006a20 <setconfig_standart16l+0x1b58>)
 80068ce:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][4]  = 8.7f;
 80068d0:	78fb      	ldrb	r3, [r7, #3]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80068d8:	fb01 f303 	mul.w	r3, r1, r3
 80068dc:	4413      	add	r3, r2
 80068de:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80068e2:	4a50      	ldr	r2, [pc, #320]	; (8006a24 <setconfig_standart16l+0x1b5c>)
 80068e4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][5]  = 10.5f;
 80068e6:	78fb      	ldrb	r3, [r7, #3]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	f640 416c 	movw	r1, #3180	; 0xc6c
 80068ee:	fb01 f303 	mul.w	r3, r1, r3
 80068f2:	4413      	add	r3, r2
 80068f4:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 80068f8:	4a4b      	ldr	r2, [pc, #300]	; (8006a28 <setconfig_standart16l+0x1b60>)
 80068fa:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][6]  = 14.1f;
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006904:	fb01 f303 	mul.w	r3, r1, r3
 8006908:	4413      	add	r3, r2
 800690a:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800690e:	4a47      	ldr	r2, [pc, #284]	; (8006a2c <setconfig_standart16l+0x1b64>)
 8006910:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][7]  = 18.2f;
 8006912:	78fb      	ldrb	r3, [r7, #3]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	f640 416c 	movw	r1, #3180	; 0xc6c
 800691a:	fb01 f303 	mul.w	r3, r1, r3
 800691e:	4413      	add	r3, r2
 8006920:	f203 73c4 	addw	r3, r3, #1988	; 0x7c4
 8006924:	4a42      	ldr	r2, [pc, #264]	; (8006a30 <setconfig_standart16l+0x1b68>)
 8006926:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][8]  = 22.1f;
 8006928:	78fb      	ldrb	r3, [r7, #3]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006930:	fb01 f303 	mul.w	r3, r1, r3
 8006934:	4413      	add	r3, r2
 8006936:	f503 63f9 	add.w	r3, r3, #1992	; 0x7c8
 800693a:	4a3e      	ldr	r2, [pc, #248]	; (8006a34 <setconfig_standart16l+0x1b6c>)
 800693c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][9]  = 24.5f;
 800693e:	78fb      	ldrb	r3, [r7, #3]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006946:	fb01 f303 	mul.w	r3, r1, r3
 800694a:	4413      	add	r3, r2
 800694c:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 8006950:	4a39      	ldr	r2, [pc, #228]	; (8006a38 <setconfig_standart16l+0x1b70>)
 8006952:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][10] = 26.8f;
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	f640 416c 	movw	r1, #3180	; 0xc6c
 800695c:	fb01 f303 	mul.w	r3, r1, r3
 8006960:	4413      	add	r3, r2
 8006962:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006966:	4a35      	ldr	r2, [pc, #212]	; (8006a3c <setconfig_standart16l+0x1b74>)
 8006968:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][11] = 27.0f;
 800696a:	78fb      	ldrb	r3, [r7, #3]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006972:	fb01 f303 	mul.w	r3, r1, r3
 8006976:	4413      	add	r3, r2
 8006978:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 800697c:	4a30      	ldr	r2, [pc, #192]	; (8006a40 <setconfig_standart16l+0x1b78>)
 800697e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][12] = 25.9f;
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006988:	fb01 f303 	mul.w	r3, r1, r3
 800698c:	4413      	add	r3, r2
 800698e:	f503 63fb 	add.w	r3, r3, #2008	; 0x7d8
 8006992:	4a2c      	ldr	r2, [pc, #176]	; (8006a44 <setconfig_standart16l+0x1b7c>)
 8006994:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][13] = 26.2f;
 8006996:	78fb      	ldrb	r3, [r7, #3]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800699e:	fb01 f303 	mul.w	r3, r1, r3
 80069a2:	4413      	add	r3, r2
 80069a4:	f203 73dc 	addw	r3, r3, #2012	; 0x7dc
 80069a8:	4a27      	ldr	r2, [pc, #156]	; (8006a48 <setconfig_standart16l+0x1b80>)
 80069aa:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][14] = 26.8f;
 80069ac:	78fb      	ldrb	r3, [r7, #3]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80069b4:	fb01 f303 	mul.w	r3, r1, r3
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80069be:	4a1f      	ldr	r2, [pc, #124]	; (8006a3c <setconfig_standart16l+0x1b74>)
 80069c0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][15] = 27.0f;
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80069ca:	fb01 f303 	mul.w	r3, r1, r3
 80069ce:	4413      	add	r3, r2
 80069d0:	e03c      	b.n	8006a4c <setconfig_standart16l+0x1b84>
 80069d2:	bf00      	nop
 80069d4:	41eb3333 	.word	0x41eb3333
 80069d8:	41f00000 	.word	0x41f00000
 80069dc:	41f1999a 	.word	0x41f1999a
 80069e0:	40c00000 	.word	0x40c00000
 80069e4:	40d00000 	.word	0x40d00000
 80069e8:	40e33333 	.word	0x40e33333
 80069ec:	40fccccd 	.word	0x40fccccd
 80069f0:	4111999a 	.word	0x4111999a
 80069f4:	4134cccd 	.word	0x4134cccd
 80069f8:	417ccccd 	.word	0x417ccccd
 80069fc:	41a26666 	.word	0x41a26666
 8006a00:	41c33333 	.word	0x41c33333
 8006a04:	41d4cccd 	.word	0x41d4cccd
 8006a08:	41e5999a 	.word	0x41e5999a
 8006a0c:	41e66666 	.word	0x41e66666
 8006a10:	41dccccd 	.word	0x41dccccd
 8006a14:	41df3333 	.word	0x41df3333
 8006a18:	41e4cccd 	.word	0x41e4cccd
 8006a1c:	40e00000 	.word	0x40e00000
 8006a20:	40f66666 	.word	0x40f66666
 8006a24:	410b3333 	.word	0x410b3333
 8006a28:	41280000 	.word	0x41280000
 8006a2c:	4161999a 	.word	0x4161999a
 8006a30:	4191999a 	.word	0x4191999a
 8006a34:	41b0cccd 	.word	0x41b0cccd
 8006a38:	41c40000 	.word	0x41c40000
 8006a3c:	41d66666 	.word	0x41d66666
 8006a40:	41d80000 	.word	0x41d80000
 8006a44:	41cf3333 	.word	0x41cf3333
 8006a48:	41d1999a 	.word	0x41d1999a
 8006a4c:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8006a50:	4a5b      	ldr	r2, [pc, #364]	; (8006bc0 <setconfig_standart16l+0x1cf8>)
 8006a52:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[15][0]  = 6.0f;
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006a5c:	fb01 f303 	mul.w	r3, r1, r3
 8006a60:	4413      	add	r3, r2
 8006a62:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8006a66:	4a57      	ldr	r2, [pc, #348]	; (8006bc4 <setconfig_standart16l+0x1cfc>)
 8006a68:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][1]  = 6.5f;
 8006a6a:	78fb      	ldrb	r3, [r7, #3]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006a72:	fb01 f303 	mul.w	r3, r1, r3
 8006a76:	4413      	add	r3, r2
 8006a78:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 8006a7c:	4a52      	ldr	r2, [pc, #328]	; (8006bc8 <setconfig_standart16l+0x1d00>)
 8006a7e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][2]  = 7.0f;
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006a88:	fb01 f303 	mul.w	r3, r1, r3
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8006a92:	4a4e      	ldr	r2, [pc, #312]	; (8006bcc <setconfig_standart16l+0x1d04>)
 8006a94:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][3]  = 7.6f;
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006a9e:	fb01 f303 	mul.w	r3, r1, r3
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f603 0314 	addw	r3, r3, #2068	; 0x814
 8006aa8:	4a49      	ldr	r2, [pc, #292]	; (8006bd0 <setconfig_standart16l+0x1d08>)
 8006aaa:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][4]  = 8.5f;
 8006aac:	78fb      	ldrb	r3, [r7, #3]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006ab4:	fb01 f303 	mul.w	r3, r1, r3
 8006ab8:	4413      	add	r3, r2
 8006aba:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8006abe:	4a45      	ldr	r2, [pc, #276]	; (8006bd4 <setconfig_standart16l+0x1d0c>)
 8006ac0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][5]  = 9.9f;
 8006ac2:	78fb      	ldrb	r3, [r7, #3]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006aca:	fb01 f303 	mul.w	r3, r1, r3
 8006ace:	4413      	add	r3, r2
 8006ad0:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8006ad4:	4a40      	ldr	r2, [pc, #256]	; (8006bd8 <setconfig_standart16l+0x1d10>)
 8006ad6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][6]  = 12.3f;
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006ae0:	fb01 f303 	mul.w	r3, r1, r3
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8006aea:	4a3c      	ldr	r2, [pc, #240]	; (8006bdc <setconfig_standart16l+0x1d14>)
 8006aec:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][7]  = 15.8f;
 8006aee:	78fb      	ldrb	r3, [r7, #3]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006af6:	fb01 f303 	mul.w	r3, r1, r3
 8006afa:	4413      	add	r3, r2
 8006afc:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8006b00:	4a37      	ldr	r2, [pc, #220]	; (8006be0 <setconfig_standart16l+0x1d18>)
 8006b02:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][8]  = 19.5f;
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006b0c:	fb01 f303 	mul.w	r3, r1, r3
 8006b10:	4413      	add	r3, r2
 8006b12:	f603 0328 	addw	r3, r3, #2088	; 0x828
 8006b16:	4a33      	ldr	r2, [pc, #204]	; (8006be4 <setconfig_standart16l+0x1d1c>)
 8006b18:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][9]  = 22.2f;
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006b22:	fb01 f303 	mul.w	r3, r1, r3
 8006b26:	4413      	add	r3, r2
 8006b28:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 8006b2c:	4a2e      	ldr	r2, [pc, #184]	; (8006be8 <setconfig_standart16l+0x1d20>)
 8006b2e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][10] = 24.8f;
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006b38:	fb01 f303 	mul.w	r3, r1, r3
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 8006b42:	4a2a      	ldr	r2, [pc, #168]	; (8006bec <setconfig_standart16l+0x1d24>)
 8006b44:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][11] = 25.1f;
 8006b46:	78fb      	ldrb	r3, [r7, #3]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006b4e:	fb01 f303 	mul.w	r3, r1, r3
 8006b52:	4413      	add	r3, r2
 8006b54:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8006b58:	4a25      	ldr	r2, [pc, #148]	; (8006bf0 <setconfig_standart16l+0x1d28>)
 8006b5a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][12] = 24.0f;
 8006b5c:	78fb      	ldrb	r3, [r7, #3]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006b64:	fb01 f303 	mul.w	r3, r1, r3
 8006b68:	4413      	add	r3, r2
 8006b6a:	f603 0338 	addw	r3, r3, #2104	; 0x838
 8006b6e:	4a21      	ldr	r2, [pc, #132]	; (8006bf4 <setconfig_standart16l+0x1d2c>)
 8006b70:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][13] = 24.3f;
 8006b72:	78fb      	ldrb	r3, [r7, #3]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006b7a:	fb01 f303 	mul.w	r3, r1, r3
 8006b7e:	4413      	add	r3, r2
 8006b80:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8006b84:	4a1c      	ldr	r2, [pc, #112]	; (8006bf8 <setconfig_standart16l+0x1d30>)
 8006b86:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][14] = 24.8f;
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006b90:	fb01 f303 	mul.w	r3, r1, r3
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8006b9a:	4a14      	ldr	r2, [pc, #80]	; (8006bec <setconfig_standart16l+0x1d24>)
 8006b9c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][15] = 25.0f;
 8006b9e:	78fb      	ldrb	r3, [r7, #3]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006ba6:	fb01 f303 	mul.w	r3, r1, r3
 8006baa:	4413      	add	r3, r2
 8006bac:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8006bb0:	4a12      	ldr	r2, [pc, #72]	; (8006bfc <setconfig_standart16l+0x1d34>)
 8006bb2:	601a      	str	r2, [r3, #0]
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	41d80000 	.word	0x41d80000
 8006bc4:	40c00000 	.word	0x40c00000
 8006bc8:	40d00000 	.word	0x40d00000
 8006bcc:	40e00000 	.word	0x40e00000
 8006bd0:	40f33333 	.word	0x40f33333
 8006bd4:	41080000 	.word	0x41080000
 8006bd8:	411e6666 	.word	0x411e6666
 8006bdc:	4144cccd 	.word	0x4144cccd
 8006be0:	417ccccd 	.word	0x417ccccd
 8006be4:	419c0000 	.word	0x419c0000
 8006be8:	41b1999a 	.word	0x41b1999a
 8006bec:	41c66666 	.word	0x41c66666
 8006bf0:	41c8cccd 	.word	0x41c8cccd
 8006bf4:	41c00000 	.word	0x41c00000
 8006bf8:	41c26666 	.word	0x41c26666
 8006bfc:	41c80000 	.word	0x41c80000

08006c00 <config_default>:

HAL_StatusTypeDef config_default(sAcisConfig * config)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	72fb      	strb	r3, [r7, #11]

  for(int i = 0; i < sizeof(sAcisConfig); i++)
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	e007      	b.n	8006c22 <config_default+0x22>
    ((uint8_t*)config)[i] = 0;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	4413      	add	r3, r2
 8006c18:	2200      	movs	r2, #0
 8006c1a:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < sizeof(sAcisConfig); i++)
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f243 229f 	movw	r2, #12959	; 0x329f
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d9f2      	bls.n	8006c12 <config_default+0x12>

  config->params.isCutoffEnabled = 1;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	605a      	str	r2, [r3, #4]
  config->params.isTemperatureEnabled = 1;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	609a      	str	r2, [r3, #8]
  config->params.isEconomEnabled = 1;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	60da      	str	r2, [r3, #12]
  config->params.isAutostartEnabled = 0;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	611a      	str	r2, [r3, #16]
  config->params.isIgnitionByHall = 0;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	615a      	str	r2, [r3, #20]
  config->params.isForceTable = 0;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	625a      	str	r2, [r3, #36]	; 0x24
  config->params.isHallLearningMode = 0;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	619a      	str	r2, [r3, #24]
  config->params.isSwitchByExternal = 1;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	61da      	str	r2, [r3, #28]
  config->params.isEconOutAsStrobe = 0;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	621a      	str	r2, [r3, #32]

  config->params.switchPos1Table = 0;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	62da      	str	r2, [r3, #44]	; 0x2c
  config->params.switchPos0Table = 0;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	631a      	str	r2, [r3, #48]	; 0x30
  config->params.switchPos2Table = 0;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	635a      	str	r2, [r3, #52]	; 0x34
  config->params.forceTableNumber = 0;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	629a      	str	r2, [r3, #40]	; 0x28

  config->params.EconRpmThreshold = 2000;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a12      	ldr	r2, [pc, #72]	; (8006cc8 <config_default+0xc8>)
 8006c7e:	639a      	str	r2, [r3, #56]	; 0x38
  config->params.CutoffRPM = 6000;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a12      	ldr	r2, [pc, #72]	; (8006ccc <config_default+0xcc>)
 8006c84:	63da      	str	r2, [r3, #60]	; 0x3c
  config->params.CutoffMode = 5;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2205      	movs	r2, #5
 8006c8a:	641a      	str	r2, [r3, #64]	; 0x40

  for(int i = 0; i < TABLE_SETUPS_MAX; i++)
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	e010      	b.n	8006cb4 <config_default+0xb4>
    memset(&config->tables[i], 0, sizeof(sAcisIgnTable));
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f640 426c 	movw	r2, #3180	; 0xc6c
 8006c98:	fb02 f303 	mul.w	r3, r2, r3
 8006c9c:	33c0      	adds	r3, #192	; 0xc0
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f640 426c 	movw	r2, #3180	; 0xc6c
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f00b f8a2 	bl	8011df2 <memset>
  for(int i = 0; i < TABLE_SETUPS_MAX; i++)
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	613b      	str	r3, [r7, #16]
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	ddeb      	ble.n	8006c92 <config_default+0x92>

  config->tables_count = TABLE_SETUPS_MAX;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2204      	movs	r2, #4
 8006cbe:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < 1; i++)
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	f000 bc5d 	b.w	8007582 <config_default+0x982>
 8006cc8:	44fa0000 	.word	0x44fa0000
 8006ccc:	45bb8000 	.word	0x45bb8000
  {

    strcpy(config->tables[i].name, "Default 1");
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f640 426c 	movw	r2, #3180	; 0xc6c
 8006cd6:	fb02 f303 	mul.w	r3, r2, r3
 8006cda:	33c0      	adds	r3, #192	; 0xc0
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	4413      	add	r3, r2
 8006ce0:	49bb      	ldr	r1, [pc, #748]	; (8006fd0 <config_default+0x3d0>)
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	cb03      	ldmia	r3!, {r0, r1}
 8006ce8:	6010      	str	r0, [r2, #0]
 8006cea:	6051      	str	r1, [r2, #4]
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	8113      	strh	r3, [r2, #8]

    config->tables[i].valve_channel = ValvePetrol;
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006cf8:	fb01 f303 	mul.w	r3, r1, r3
 8006cfc:	4413      	add	r3, r2
 8006cfe:	33cc      	adds	r3, #204	; 0xcc
 8006d00:	2201      	movs	r2, #1
 8006d02:	701a      	strb	r2, [r3, #0]
    config->tables[i].valve_timeout = 0;
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006d0c:	fb01 f303 	mul.w	r3, r1, r3
 8006d10:	4413      	add	r3, r2
 8006d12:	33d0      	adds	r3, #208	; 0xd0
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]

    config->tables[i].initial_ignition = 0.0f;
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006d20:	fb01 f303 	mul.w	r3, r1, r3
 8006d24:	4413      	add	r3, r2
 8006d26:	33d4      	adds	r3, #212	; 0xd4
 8006d28:	f04f 0200 	mov.w	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
    config->tables[i].octane_corrector = 0.0f;
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006d36:	fb01 f303 	mul.w	r3, r1, r3
 8006d3a:	4413      	add	r3, r2
 8006d3c:	33d8      	adds	r3, #216	; 0xd8
 8006d3e:	f04f 0200 	mov.w	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]

    config->tables[i].idles_count = 20;
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006d4c:	fb01 f303 	mul.w	r3, r1, r3
 8006d50:	4413      	add	r3, r2
 8006d52:	33dc      	adds	r3, #220	; 0xdc
 8006d54:	2214      	movs	r2, #20
 8006d56:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[0] = 417;
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006d60:	fb01 f303 	mul.w	r3, r1, r3
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006d6a:	4a9a      	ldr	r2, [pc, #616]	; (8006fd4 <config_default+0x3d4>)
 8006d6c:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[1] = 455;
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006d76:	fb01 f303 	mul.w	r3, r1, r3
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006d80:	4a95      	ldr	r2, [pc, #596]	; (8006fd8 <config_default+0x3d8>)
 8006d82:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[2] = 476;
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006d8c:	fb01 f303 	mul.w	r3, r1, r3
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8006d96:	4a91      	ldr	r2, [pc, #580]	; (8006fdc <config_default+0x3dc>)
 8006d98:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[3] = 500;
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006da2:	fb01 f303 	mul.w	r3, r1, r3
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8006dac:	4a8c      	ldr	r2, [pc, #560]	; (8006fe0 <config_default+0x3e0>)
 8006dae:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[4] = 525;
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006db8:	fb01 f303 	mul.w	r3, r1, r3
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dc2:	4a88      	ldr	r2, [pc, #544]	; (8006fe4 <config_default+0x3e4>)
 8006dc4:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[5] = 556;
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006dce:	fb01 f303 	mul.w	r3, r1, r3
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006dd8:	4a83      	ldr	r2, [pc, #524]	; (8006fe8 <config_default+0x3e8>)
 8006dda:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[6] = 588;
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006de4:	fb01 f303 	mul.w	r3, r1, r3
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006dee:	4a7f      	ldr	r2, [pc, #508]	; (8006fec <config_default+0x3ec>)
 8006df0:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[7] = 625;
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006dfa:	fb01 f303 	mul.w	r3, r1, r3
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8006e04:	4a7a      	ldr	r2, [pc, #488]	; (8006ff0 <config_default+0x3f0>)
 8006e06:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[8] = 667;
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006e10:	fb01 f303 	mul.w	r3, r1, r3
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8006e1a:	4a76      	ldr	r2, [pc, #472]	; (8006ff4 <config_default+0x3f4>)
 8006e1c:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[9] = 714;
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006e26:	fb01 f303 	mul.w	r3, r1, r3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e30:	4a71      	ldr	r2, [pc, #452]	; (8006ff8 <config_default+0x3f8>)
 8006e32:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[10] = 769;
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006e3c:	fb01 f303 	mul.w	r3, r1, r3
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006e46:	4a6d      	ldr	r2, [pc, #436]	; (8006ffc <config_default+0x3fc>)
 8006e48:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[11] = 833;
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006e52:	fb01 f303 	mul.w	r3, r1, r3
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8006e5c:	4a68      	ldr	r2, [pc, #416]	; (8007000 <config_default+0x400>)
 8006e5e:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[12] = 909;
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006e68:	fb01 f303 	mul.w	r3, r1, r3
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8006e72:	4a64      	ldr	r2, [pc, #400]	; (8007004 <config_default+0x404>)
 8006e74:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[13] = 1000;
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006e7e:	fb01 f303 	mul.w	r3, r1, r3
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8006e88:	4a5f      	ldr	r2, [pc, #380]	; (8007008 <config_default+0x408>)
 8006e8a:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[14] = 1111;
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006e94:	fb01 f303 	mul.w	r3, r1, r3
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006e9e:	4a5b      	ldr	r2, [pc, #364]	; (800700c <config_default+0x40c>)
 8006ea0:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[15] = 1250;
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006eaa:	fb01 f303 	mul.w	r3, r1, r3
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006eb4:	4a56      	ldr	r2, [pc, #344]	; (8007010 <config_default+0x410>)
 8006eb6:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[16] = 1429;
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006ec0:	fb01 f303 	mul.w	r3, r1, r3
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006eca:	4a52      	ldr	r2, [pc, #328]	; (8007014 <config_default+0x414>)
 8006ecc:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[17] = 1667;
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006ed6:	fb01 f303 	mul.w	r3, r1, r3
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006ee0:	4a4d      	ldr	r2, [pc, #308]	; (8007018 <config_default+0x418>)
 8006ee2:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[18] = 2000;
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006eec:	fb01 f303 	mul.w	r3, r1, r3
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006ef6:	4a49      	ldr	r2, [pc, #292]	; (800701c <config_default+0x41c>)
 8006ef8:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[19] = 2500;
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006f02:	fb01 f303 	mul.w	r3, r1, r3
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006f0c:	4a44      	ldr	r2, [pc, #272]	; (8007020 <config_default+0x420>)
 8006f0e:	601a      	str	r2, [r3, #0]

    config->tables[i].idle_ignitions[0] = 10;
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006f18:	fb01 f303 	mul.w	r3, r1, r3
 8006f1c:	4413      	add	r3, r2
 8006f1e:	33e0      	adds	r3, #224	; 0xe0
 8006f20:	4a40      	ldr	r2, [pc, #256]	; (8007024 <config_default+0x424>)
 8006f22:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[1] = 11;
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006f2c:	fb01 f303 	mul.w	r3, r1, r3
 8006f30:	4413      	add	r3, r2
 8006f32:	33e4      	adds	r3, #228	; 0xe4
 8006f34:	4a3c      	ldr	r2, [pc, #240]	; (8007028 <config_default+0x428>)
 8006f36:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[2] = 12;
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006f40:	fb01 f303 	mul.w	r3, r1, r3
 8006f44:	4413      	add	r3, r2
 8006f46:	33e8      	adds	r3, #232	; 0xe8
 8006f48:	4a38      	ldr	r2, [pc, #224]	; (800702c <config_default+0x42c>)
 8006f4a:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[3] = 13;
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006f54:	fb01 f303 	mul.w	r3, r1, r3
 8006f58:	4413      	add	r3, r2
 8006f5a:	33ec      	adds	r3, #236	; 0xec
 8006f5c:	4a34      	ldr	r2, [pc, #208]	; (8007030 <config_default+0x430>)
 8006f5e:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[4] = 14;
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006f68:	fb01 f303 	mul.w	r3, r1, r3
 8006f6c:	4413      	add	r3, r2
 8006f6e:	33f0      	adds	r3, #240	; 0xf0
 8006f70:	4a30      	ldr	r2, [pc, #192]	; (8007034 <config_default+0x434>)
 8006f72:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[5] = 16;
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006f7c:	fb01 f303 	mul.w	r3, r1, r3
 8006f80:	4413      	add	r3, r2
 8006f82:	33f4      	adds	r3, #244	; 0xf4
 8006f84:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8006f88:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[6] = 18;
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006f92:	fb01 f303 	mul.w	r3, r1, r3
 8006f96:	4413      	add	r3, r2
 8006f98:	33f8      	adds	r3, #248	; 0xf8
 8006f9a:	4a27      	ldr	r2, [pc, #156]	; (8007038 <config_default+0x438>)
 8006f9c:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[7] = 20;
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006fa6:	fb01 f303 	mul.w	r3, r1, r3
 8006faa:	4413      	add	r3, r2
 8006fac:	33fc      	adds	r3, #252	; 0xfc
 8006fae:	4a23      	ldr	r2, [pc, #140]	; (800703c <config_default+0x43c>)
 8006fb0:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[8] = 20;
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006fba:	fb01 f303 	mul.w	r3, r1, r3
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006fc4:	4a1d      	ldr	r2, [pc, #116]	; (800703c <config_default+0x43c>)
 8006fc6:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[9] = 19;
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	e038      	b.n	8007040 <config_default+0x440>
 8006fce:	bf00      	nop
 8006fd0:	08011eec 	.word	0x08011eec
 8006fd4:	43d08000 	.word	0x43d08000
 8006fd8:	43e38000 	.word	0x43e38000
 8006fdc:	43ee0000 	.word	0x43ee0000
 8006fe0:	43fa0000 	.word	0x43fa0000
 8006fe4:	44034000 	.word	0x44034000
 8006fe8:	440b0000 	.word	0x440b0000
 8006fec:	44130000 	.word	0x44130000
 8006ff0:	441c4000 	.word	0x441c4000
 8006ff4:	4426c000 	.word	0x4426c000
 8006ff8:	44328000 	.word	0x44328000
 8006ffc:	44404000 	.word	0x44404000
 8007000:	44504000 	.word	0x44504000
 8007004:	44634000 	.word	0x44634000
 8007008:	447a0000 	.word	0x447a0000
 800700c:	448ae000 	.word	0x448ae000
 8007010:	449c4000 	.word	0x449c4000
 8007014:	44b2a000 	.word	0x44b2a000
 8007018:	44d06000 	.word	0x44d06000
 800701c:	44fa0000 	.word	0x44fa0000
 8007020:	451c4000 	.word	0x451c4000
 8007024:	41200000 	.word	0x41200000
 8007028:	41300000 	.word	0x41300000
 800702c:	41400000 	.word	0x41400000
 8007030:	41500000 	.word	0x41500000
 8007034:	41600000 	.word	0x41600000
 8007038:	41900000 	.word	0x41900000
 800703c:	41a00000 	.word	0x41a00000
 8007040:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007044:	fb01 f303 	mul.w	r3, r1, r3
 8007048:	4413      	add	r3, r2
 800704a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800704e:	4ac0      	ldr	r2, [pc, #768]	; (8007350 <config_default+0x750>)
 8007050:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[10] = 15;
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f640 416c 	movw	r1, #3180	; 0xc6c
 800705a:	fb01 f303 	mul.w	r3, r1, r3
 800705e:	4413      	add	r3, r2
 8007060:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8007064:	4abb      	ldr	r2, [pc, #748]	; (8007354 <config_default+0x754>)
 8007066:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[11] = 11;
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007070:	fb01 f303 	mul.w	r3, r1, r3
 8007074:	4413      	add	r3, r2
 8007076:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800707a:	4ab7      	ldr	r2, [pc, #732]	; (8007358 <config_default+0x758>)
 800707c:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[12] = 9;
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007086:	fb01 f303 	mul.w	r3, r1, r3
 800708a:	4413      	add	r3, r2
 800708c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8007090:	4ab2      	ldr	r2, [pc, #712]	; (800735c <config_default+0x75c>)
 8007092:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[13] = 8;
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f640 416c 	movw	r1, #3180	; 0xc6c
 800709c:	fb01 f303 	mul.w	r3, r1, r3
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80070a6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80070aa:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[14] = 8;
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80070b4:	fb01 f303 	mul.w	r3, r1, r3
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80070be:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80070c2:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[15] = 9;
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80070cc:	fb01 f303 	mul.w	r3, r1, r3
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070d6:	4aa1      	ldr	r2, [pc, #644]	; (800735c <config_default+0x75c>)
 80070d8:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[16] = 10;
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f640 416c 	movw	r1, #3180	; 0xc6c
 80070e2:	fb01 f303 	mul.w	r3, r1, r3
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80070ec:	4a9c      	ldr	r2, [pc, #624]	; (8007360 <config_default+0x760>)
 80070ee:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[17] = 12;
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80070f8:	fb01 f303 	mul.w	r3, r1, r3
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007102:	4a98      	ldr	r2, [pc, #608]	; (8007364 <config_default+0x764>)
 8007104:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[18] = 14;
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800710e:	fb01 f303 	mul.w	r3, r1, r3
 8007112:	4413      	add	r3, r2
 8007114:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007118:	4a93      	ldr	r2, [pc, #588]	; (8007368 <config_default+0x768>)
 800711a:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[19] = 17;
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007124:	fb01 f303 	mul.w	r3, r1, r3
 8007128:	4413      	add	r3, r2
 800712a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800712e:	4a8f      	ldr	r2, [pc, #572]	; (800736c <config_default+0x76c>)
 8007130:	601a      	str	r2, [r3, #0]

    //setconfig_microplex(config, i);
    setconfig_standart16l(config,i);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	b2db      	uxtb	r3, r3
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7fd fec5 	bl	8004ec8 <setconfig_standart16l>

    config->tables[i].temperatures_count = 11;
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007146:	fb01 f303 	mul.w	r3, r1, r3
 800714a:	4413      	add	r3, r2
 800714c:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 8007150:	220b      	movs	r2, #11
 8007152:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[0] = -20.0f;
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f640 416c 	movw	r1, #3180	; 0xc6c
 800715c:	fb01 f303 	mul.w	r3, r1, r3
 8007160:	4413      	add	r3, r2
 8007162:	f603 336c 	addw	r3, r3, #2924	; 0xb6c
 8007166:	4a82      	ldr	r2, [pc, #520]	; (8007370 <config_default+0x770>)
 8007168:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[1] = -10.0f;
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007172:	fb01 f303 	mul.w	r3, r1, r3
 8007176:	4413      	add	r3, r2
 8007178:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 800717c:	4a7d      	ldr	r2, [pc, #500]	; (8007374 <config_default+0x774>)
 800717e:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[2] = 0.0f;
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007188:	fb01 f303 	mul.w	r3, r1, r3
 800718c:	4413      	add	r3, r2
 800718e:	f603 3374 	addw	r3, r3, #2932	; 0xb74
 8007192:	f04f 0200 	mov.w	r2, #0
 8007196:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[3] = 10.0f;
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f640 416c 	movw	r1, #3180	; 0xc6c
 80071a0:	fb01 f303 	mul.w	r3, r1, r3
 80071a4:	4413      	add	r3, r2
 80071a6:	f603 3378 	addw	r3, r3, #2936	; 0xb78
 80071aa:	4a6d      	ldr	r2, [pc, #436]	; (8007360 <config_default+0x760>)
 80071ac:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[4] = 20.0f;
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80071b6:	fb01 f303 	mul.w	r3, r1, r3
 80071ba:	4413      	add	r3, r2
 80071bc:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 80071c0:	4a6d      	ldr	r2, [pc, #436]	; (8007378 <config_default+0x778>)
 80071c2:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[5] = 30.0f;
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80071cc:	fb01 f303 	mul.w	r3, r1, r3
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
 80071d6:	4a69      	ldr	r2, [pc, #420]	; (800737c <config_default+0x77c>)
 80071d8:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[6] = 40.0f;
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f640 416c 	movw	r1, #3180	; 0xc6c
 80071e2:	fb01 f303 	mul.w	r3, r1, r3
 80071e6:	4413      	add	r3, r2
 80071e8:	f603 3384 	addw	r3, r3, #2948	; 0xb84
 80071ec:	4a64      	ldr	r2, [pc, #400]	; (8007380 <config_default+0x780>)
 80071ee:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[7] = 50.0f;
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80071f8:	fb01 f303 	mul.w	r3, r1, r3
 80071fc:	4413      	add	r3, r2
 80071fe:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 8007202:	4a60      	ldr	r2, [pc, #384]	; (8007384 <config_default+0x784>)
 8007204:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[8] = 60.0f;
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800720e:	fb01 f303 	mul.w	r3, r1, r3
 8007212:	4413      	add	r3, r2
 8007214:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 8007218:	4a5b      	ldr	r2, [pc, #364]	; (8007388 <config_default+0x788>)
 800721a:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[9] = 70.0f;
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007224:	fb01 f303 	mul.w	r3, r1, r3
 8007228:	4413      	add	r3, r2
 800722a:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 800722e:	4a57      	ldr	r2, [pc, #348]	; (800738c <config_default+0x78c>)
 8007230:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[10] = 80.0f;
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f640 416c 	movw	r1, #3180	; 0xc6c
 800723a:	fb01 f303 	mul.w	r3, r1, r3
 800723e:	4413      	add	r3, r2
 8007240:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8007244:	4a52      	ldr	r2, [pc, #328]	; (8007390 <config_default+0x790>)
 8007246:	601a      	str	r2, [r3, #0]

    config->tables[i].temperature_ignitions[0] = 5.0f;
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007250:	fb01 f303 	mul.w	r3, r1, r3
 8007254:	4413      	add	r3, r2
 8007256:	f603 339c 	addw	r3, r3, #2972	; 0xb9c
 800725a:	4a4e      	ldr	r2, [pc, #312]	; (8007394 <config_default+0x794>)
 800725c:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[1] = 4.0f;
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007266:	fb01 f303 	mul.w	r3, r1, r3
 800726a:	4413      	add	r3, r2
 800726c:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8007270:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8007274:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[2] = 3.0f;
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800727e:	fb01 f303 	mul.w	r3, r1, r3
 8007282:	4413      	add	r3, r2
 8007284:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 8007288:	4a43      	ldr	r2, [pc, #268]	; (8007398 <config_default+0x798>)
 800728a:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[3] = 2.0f;
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007294:	fb01 f303 	mul.w	r3, r1, r3
 8007298:	4413      	add	r3, r2
 800729a:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 800729e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80072a2:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[4] = 2.0f;
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80072ac:	fb01 f303 	mul.w	r3, r1, r3
 80072b0:	4413      	add	r3, r2
 80072b2:	f603 33ac 	addw	r3, r3, #2988	; 0xbac
 80072b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80072ba:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[5] = 1.0f;
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80072c4:	fb01 f303 	mul.w	r3, r1, r3
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 633b 	add.w	r3, r3, #2992	; 0xbb0
 80072ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80072d2:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[6] = 1.0f;
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80072dc:	fb01 f303 	mul.w	r3, r1, r3
 80072e0:	4413      	add	r3, r2
 80072e2:	f603 33b4 	addw	r3, r3, #2996	; 0xbb4
 80072e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80072ea:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[7] = 0.0f;
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80072f4:	fb01 f303 	mul.w	r3, r1, r3
 80072f8:	4413      	add	r3, r2
 80072fa:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80072fe:	f04f 0200 	mov.w	r2, #0
 8007302:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[8] = 0.0f;
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f640 416c 	movw	r1, #3180	; 0xc6c
 800730c:	fb01 f303 	mul.w	r3, r1, r3
 8007310:	4413      	add	r3, r2
 8007312:	f603 33bc 	addw	r3, r3, #3004	; 0xbbc
 8007316:	f04f 0200 	mov.w	r2, #0
 800731a:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[9] = 0.0f;
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007324:	fb01 f303 	mul.w	r3, r1, r3
 8007328:	4413      	add	r3, r2
 800732a:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 800732e:	f04f 0200 	mov.w	r2, #0
 8007332:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[10] = 0.0f;
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f640 416c 	movw	r1, #3180	; 0xc6c
 800733c:	fb01 f303 	mul.w	r3, r1, r3
 8007340:	4413      	add	r3, r2
 8007342:	f603 33c4 	addw	r3, r3, #3012	; 0xbc4
 8007346:	f04f 0200 	mov.w	r2, #0
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	e026      	b.n	800739c <config_default+0x79c>
 800734e:	bf00      	nop
 8007350:	41980000 	.word	0x41980000
 8007354:	41700000 	.word	0x41700000
 8007358:	41300000 	.word	0x41300000
 800735c:	41100000 	.word	0x41100000
 8007360:	41200000 	.word	0x41200000
 8007364:	41400000 	.word	0x41400000
 8007368:	41600000 	.word	0x41600000
 800736c:	41880000 	.word	0x41880000
 8007370:	c1a00000 	.word	0xc1a00000
 8007374:	c1200000 	.word	0xc1200000
 8007378:	41a00000 	.word	0x41a00000
 800737c:	41f00000 	.word	0x41f00000
 8007380:	42200000 	.word	0x42200000
 8007384:	42480000 	.word	0x42480000
 8007388:	42700000 	.word	0x42700000
 800738c:	428c0000 	.word	0x428c0000
 8007390:	42a00000 	.word	0x42a00000
 8007394:	40a00000 	.word	0x40a00000
 8007398:	40400000 	.word	0x40400000

    config->tables[i].servo_acc[0] = 0.0f;
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80073a4:	fb01 f303 	mul.w	r3, r1, r3
 80073a8:	4413      	add	r3, r2
 80073aa:	f603 33cc 	addw	r3, r3, #3020	; 0xbcc
 80073ae:	f04f 0200 	mov.w	r2, #0
 80073b2:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[1] = 0.0f;
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80073bc:	fb01 f303 	mul.w	r3, r1, r3
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 80073c6:	f04f 0200 	mov.w	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[2] = 0.0f;
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80073d4:	fb01 f303 	mul.w	r3, r1, r3
 80073d8:	4413      	add	r3, r2
 80073da:	f603 33d4 	addw	r3, r3, #3028	; 0xbd4
 80073de:	f04f 0200 	mov.w	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[3] = 0.0f;
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80073ec:	fb01 f303 	mul.w	r3, r1, r3
 80073f0:	4413      	add	r3, r2
 80073f2:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 80073f6:	f04f 0200 	mov.w	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[4] = 0.0f;
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007404:	fb01 f303 	mul.w	r3, r1, r3
 8007408:	4413      	add	r3, r2
 800740a:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 800740e:	f04f 0200 	mov.w	r2, #0
 8007412:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[5] = 0.0f;
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f640 416c 	movw	r1, #3180	; 0xc6c
 800741c:	fb01 f303 	mul.w	r3, r1, r3
 8007420:	4413      	add	r3, r2
 8007422:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8007426:	f04f 0200 	mov.w	r2, #0
 800742a:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[6] = 0.0f;
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007434:	fb01 f303 	mul.w	r3, r1, r3
 8007438:	4413      	add	r3, r2
 800743a:	f603 33e4 	addw	r3, r3, #3044	; 0xbe4
 800743e:	f04f 0200 	mov.w	r2, #0
 8007442:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[7] = 0.0f;
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f640 416c 	movw	r1, #3180	; 0xc6c
 800744c:	fb01 f303 	mul.w	r3, r1, r3
 8007450:	4413      	add	r3, r2
 8007452:	f603 33e8 	addw	r3, r3, #3048	; 0xbe8
 8007456:	f04f 0200 	mov.w	r2, #0
 800745a:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[8] = 0.0f;
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007464:	fb01 f303 	mul.w	r3, r1, r3
 8007468:	4413      	add	r3, r2
 800746a:	f603 33ec 	addw	r3, r3, #3052	; 0xbec
 800746e:	f04f 0200 	mov.w	r2, #0
 8007472:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[9] = 0.0f;
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f640 416c 	movw	r1, #3180	; 0xc6c
 800747c:	fb01 f303 	mul.w	r3, r1, r3
 8007480:	4413      	add	r3, r2
 8007482:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 8007486:	f04f 0200 	mov.w	r2, #0
 800748a:	601a      	str	r2, [r3, #0]

    config->tables[i].servo_choke[0] = 0.0f;
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007494:	fb01 f303 	mul.w	r3, r1, r3
 8007498:	4413      	add	r3, r2
 800749a:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 800749e:	f04f 0200 	mov.w	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[1] = 0.0f;
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80074ac:	fb01 f303 	mul.w	r3, r1, r3
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80074b6:	f04f 0200 	mov.w	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[2] = 0.0f;
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80074c4:	fb01 f303 	mul.w	r3, r1, r3
 80074c8:	4413      	add	r3, r2
 80074ca:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 80074ce:	f04f 0200 	mov.w	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[3] = 0.0f;
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80074dc:	fb01 f303 	mul.w	r3, r1, r3
 80074e0:	4413      	add	r3, r2
 80074e2:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 80074e6:	f04f 0200 	mov.w	r2, #0
 80074ea:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[4] = 0.0f;
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80074f4:	fb01 f303 	mul.w	r3, r1, r3
 80074f8:	4413      	add	r3, r2
 80074fa:	f603 430c 	addw	r3, r3, #3084	; 0xc0c
 80074fe:	f04f 0200 	mov.w	r2, #0
 8007502:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[5] = 0.0f;
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f640 416c 	movw	r1, #3180	; 0xc6c
 800750c:	fb01 f303 	mul.w	r3, r1, r3
 8007510:	4413      	add	r3, r2
 8007512:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 8007516:	f04f 0200 	mov.w	r2, #0
 800751a:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[6] = 0.0f;
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007524:	fb01 f303 	mul.w	r3, r1, r3
 8007528:	4413      	add	r3, r2
 800752a:	f603 4314 	addw	r3, r3, #3092	; 0xc14
 800752e:	f04f 0200 	mov.w	r2, #0
 8007532:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[7] = 0.0f;
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f640 416c 	movw	r1, #3180	; 0xc6c
 800753c:	fb01 f303 	mul.w	r3, r1, r3
 8007540:	4413      	add	r3, r2
 8007542:	f603 4318 	addw	r3, r3, #3096	; 0xc18
 8007546:	f04f 0200 	mov.w	r2, #0
 800754a:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[8] = 0.0f;
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007554:	fb01 f303 	mul.w	r3, r1, r3
 8007558:	4413      	add	r3, r2
 800755a:	f603 431c 	addw	r3, r3, #3100	; 0xc1c
 800755e:	f04f 0200 	mov.w	r2, #0
 8007562:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[9] = 0.0f;
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f640 416c 	movw	r1, #3180	; 0xc6c
 800756c:	fb01 f303 	mul.w	r3, r1, r3
 8007570:	4413      	add	r3, r2
 8007572:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 8007576:	f04f 0200 	mov.w	r2, #0
 800757a:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < 1; i++)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	3301      	adds	r3, #1
 8007580:	60fb      	str	r3, [r7, #12]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	f77f aba3 	ble.w	8006cd0 <config_default+0xd0>
  }

  return status;
 800758a:	7afb      	ldrb	r3, [r7, #11]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3718      	adds	r7, #24
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <config_save>:

HAL_StatusTypeDef config_save(sAcisConfig * config)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_BUSY;
 800759c:	2302      	movs	r3, #2
 800759e:	73fb      	strb	r3, [r7, #15]
  static uint32_t size = 0;
  static uint16_t crc16 = 0;
  static uint16_t sectors = 0;
  static uint16_t erased = 0;
  uint16_t crc16_check;
  uint8_t spistatus = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73bb      	strb	r3, [r7, #14]
  do
  {
    switch (state)
 80075a4:	4b4d      	ldr	r3, [pc, #308]	; (80076dc <config_save+0x148>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	f200 8089 	bhi.w	80076c0 <config_save+0x12c>
 80075ae:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <config_save+0x20>)
 80075b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b4:	080075c5 	.word	0x080075c5
 80075b8:	08007607 	.word	0x08007607
 80075bc:	08007645 	.word	0x08007645
 80075c0:	08007669 	.word	0x08007669
    {
      case 0:
        size = (uint32_t)&config->crc - (uint32_t)config;
 80075c4:	4b46      	ldr	r3, [pc, #280]	; (80076e0 <config_save+0x14c>)
 80075c6:	f44f 524a 	mov.w	r2, #12928	; 0x3280
 80075ca:	601a      	str	r2, [r3, #0]
        crc16 = CRC16_Generate((uint8_t*)config, size);
 80075cc:	4b44      	ldr	r3, [pc, #272]	; (80076e0 <config_save+0x14c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f89c 	bl	8007710 <CRC16_Generate>
 80075d8:	4603      	mov	r3, r0
 80075da:	461a      	mov	r2, r3
 80075dc:	4b41      	ldr	r3, [pc, #260]	; (80076e4 <config_save+0x150>)
 80075de:	801a      	strh	r2, [r3, #0]
        config->crc = crc16;
 80075e0:	4b40      	ldr	r3, [pc, #256]	; (80076e4 <config_save+0x150>)
 80075e2:	881a      	ldrh	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f503 534a 	add.w	r3, r3, #12928	; 0x3280
 80075ea:	801a      	strh	r2, [r3, #0]
        state++;
 80075ec:	4b3b      	ldr	r3, [pc, #236]	; (80076dc <config_save+0x148>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	3301      	adds	r3, #1
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	4b39      	ldr	r3, [pc, #228]	; (80076dc <config_save+0x148>)
 80075f6:	701a      	strb	r2, [r3, #0]
        sectors = (sizeof(sAcisConfig) / SST25_SECTORSIZE) + ((sizeof(sAcisConfig) % SST25_SECTORSIZE > 0) ? (1) : (0));
 80075f8:	4b3b      	ldr	r3, [pc, #236]	; (80076e8 <config_save+0x154>)
 80075fa:	2204      	movs	r2, #4
 80075fc:	801a      	strh	r2, [r3, #0]
        erased = 0;
 80075fe:	4b3b      	ldr	r3, [pc, #236]	; (80076ec <config_save+0x158>)
 8007600:	2200      	movs	r2, #0
 8007602:	801a      	strh	r2, [r3, #0]
        continue;
 8007604:	e065      	b.n	80076d2 <config_save+0x13e>
      case 1:
        if(erased < sectors)
 8007606:	4b39      	ldr	r3, [pc, #228]	; (80076ec <config_save+0x158>)
 8007608:	881a      	ldrh	r2, [r3, #0]
 800760a:	4b37      	ldr	r3, [pc, #220]	; (80076e8 <config_save+0x154>)
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d211      	bcs.n	8007636 <config_save+0xa2>
        {
          spistatus = SST25_Erase4KSector(erased * SST25_SECTORSIZE);
 8007612:	4b36      	ldr	r3, [pc, #216]	; (80076ec <config_save+0x158>)
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	031b      	lsls	r3, r3, #12
 8007618:	4618      	mov	r0, r3
 800761a:	f002 fb17 	bl	8009c4c <SST25_Erase4KSector>
 800761e:	4603      	mov	r3, r0
 8007620:	73bb      	strb	r3, [r7, #14]
          if(spistatus)
 8007622:	7bbb      	ldrb	r3, [r7, #14]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d04f      	beq.n	80076c8 <config_save+0x134>
          {
            erased++;
 8007628:	4b30      	ldr	r3, [pc, #192]	; (80076ec <config_save+0x158>)
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	3301      	adds	r3, #1
 800762e:	b29a      	uxth	r2, r3
 8007630:	4b2e      	ldr	r3, [pc, #184]	; (80076ec <config_save+0x158>)
 8007632:	801a      	strh	r2, [r3, #0]
            continue;
 8007634:	e04d      	b.n	80076d2 <config_save+0x13e>
          }
        }
        else
        {
          state++;
 8007636:	4b29      	ldr	r3, [pc, #164]	; (80076dc <config_save+0x148>)
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	3301      	adds	r3, #1
 800763c:	b2da      	uxtb	r2, r3
 800763e:	4b27      	ldr	r3, [pc, #156]	; (80076dc <config_save+0x148>)
 8007640:	701a      	strb	r2, [r3, #0]
          continue;
 8007642:	e046      	b.n	80076d2 <config_save+0x13e>
        }
        break;
      case 2:
        spistatus = SST25_Write(0, sizeof(sAcisConfig), (uint8_t*)config);
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	f243 21a0 	movw	r1, #12960	; 0x32a0
 800764a:	2000      	movs	r0, #0
 800764c:	f002 fb20 	bl	8009c90 <SST25_Write>
 8007650:	4603      	mov	r3, r0
 8007652:	73bb      	strb	r3, [r7, #14]
        if(spistatus)
 8007654:	7bbb      	ldrb	r3, [r7, #14]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d038      	beq.n	80076cc <config_save+0x138>
        {
          state++;
 800765a:	4b20      	ldr	r3, [pc, #128]	; (80076dc <config_save+0x148>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	3301      	adds	r3, #1
 8007660:	b2da      	uxtb	r2, r3
 8007662:	4b1e      	ldr	r3, [pc, #120]	; (80076dc <config_save+0x148>)
 8007664:	701a      	strb	r2, [r3, #0]
          continue;
 8007666:	e034      	b.n	80076d2 <config_save+0x13e>
        }
        break;
      case 3:
        spistatus = SST25_Read(0, sizeof(sAcisConfig), (uint8_t*)config);
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	f243 21a0 	movw	r1, #12960	; 0x32a0
 800766e:	2000      	movs	r0, #0
 8007670:	f002 fafb 	bl	8009c6a <SST25_Read>
 8007674:	4603      	mov	r3, r0
 8007676:	73bb      	strb	r3, [r7, #14]
        if(spistatus)
 8007678:	7bbb      	ldrb	r3, [r7, #14]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d028      	beq.n	80076d0 <config_save+0x13c>
        {
          size = (uint32_t)&config->crc - (uint32_t)config;
 800767e:	4b18      	ldr	r3, [pc, #96]	; (80076e0 <config_save+0x14c>)
 8007680:	f44f 524a 	mov.w	r2, #12928	; 0x3280
 8007684:	601a      	str	r2, [r3, #0]
          crc16_check = CRC16_Generate((uint8_t*)config, size);
 8007686:	4b16      	ldr	r3, [pc, #88]	; (80076e0 <config_save+0x14c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f83f 	bl	8007710 <CRC16_Generate>
 8007692:	4603      	mov	r3, r0
 8007694:	81bb      	strh	r3, [r7, #12]
          if(crc16_check == config->crc && crc16_check == crc16)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f503 534a 	add.w	r3, r3, #12928	; 0x3280
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	89ba      	ldrh	r2, [r7, #12]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d107      	bne.n	80076b4 <config_save+0x120>
 80076a4:	4b0f      	ldr	r3, [pc, #60]	; (80076e4 <config_save+0x150>)
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	89ba      	ldrh	r2, [r7, #12]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d102      	bne.n	80076b4 <config_save+0x120>
            status = HAL_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	73fb      	strb	r3, [r7, #15]
 80076b2:	e001      	b.n	80076b8 <config_save+0x124>
          else status = HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	73fb      	strb	r3, [r7, #15]
          state = 0;
 80076b8:	4b08      	ldr	r3, [pc, #32]	; (80076dc <config_save+0x148>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	701a      	strb	r2, [r3, #0]
        }
        break;
 80076be:	e007      	b.n	80076d0 <config_save+0x13c>
      default:
        state = 0;
 80076c0:	4b06      	ldr	r3, [pc, #24]	; (80076dc <config_save+0x148>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	701a      	strb	r2, [r3, #0]
        continue;
 80076c6:	e004      	b.n	80076d2 <config_save+0x13e>
        break;
 80076c8:	bf00      	nop
 80076ca:	e002      	b.n	80076d2 <config_save+0x13e>
        break;
 80076cc:	bf00      	nop
 80076ce:	e000      	b.n	80076d2 <config_save+0x13e>
        break;
 80076d0:	bf00      	nop
    }
  } while(0);

  return status;
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	20021148 	.word	0x20021148
 80076e0:	2002114c 	.word	0x2002114c
 80076e4:	20021150 	.word	0x20021150
 80076e8:	20021152 	.word	0x20021152
 80076ec:	20021154 	.word	0x20021154

080076f0 <CRC16_RegisterHardware>:
#elif defined(CRC_HW)

static CRC_HandleTypeDef * handle_crc;

void CRC16_RegisterHardware(CRC_HandleTypeDef * hcrc)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  handle_crc = hcrc;
 80076f8:	4a04      	ldr	r2, [pc, #16]	; (800770c <CRC16_RegisterHardware+0x1c>)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6013      	str	r3, [r2, #0]
}
 80076fe:	bf00      	nop
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	20021158 	.word	0x20021158

08007710 <CRC16_Generate>:

inline uint16_t CRC16_Generate(uint8_t * input, uint32_t size)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 800771a:	2300      	movs	r3, #0
 800771c:	81fb      	strh	r3, [r7, #14]
  if(handle_crc != NULL)
 800771e:	4b09      	ldr	r3, [pc, #36]	; (8007744 <CRC16_Generate+0x34>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d008      	beq.n	8007738 <CRC16_Generate+0x28>
  {
      result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 8007726:	4b07      	ldr	r3, [pc, #28]	; (8007744 <CRC16_Generate+0x34>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	6879      	ldr	r1, [r7, #4]
 800772e:	4618      	mov	r0, r3
 8007730:	f004 fee4 	bl	800c4fc <HAL_CRC_Calculate>
 8007734:	4603      	mov	r3, r0
 8007736:	81fb      	strh	r3, [r7, #14]
  }
  return result;
 8007738:	89fb      	ldrh	r3, [r7, #14]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20021158 	.word	0x20021158

08007748 <CRC8_Generate>:

inline uint8_t CRC8_Generate(uint8_t * input, uint32_t size)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 8007752:	2300      	movs	r3, #0
 8007754:	81fb      	strh	r3, [r7, #14]
  if(handle_crc != NULL)
 8007756:	4b0d      	ldr	r3, [pc, #52]	; (800778c <CRC8_Generate+0x44>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d008      	beq.n	8007770 <CRC8_Generate+0x28>
  {
    result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 800775e:	4b0b      	ldr	r3, [pc, #44]	; (800778c <CRC8_Generate+0x44>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	6879      	ldr	r1, [r7, #4]
 8007766:	4618      	mov	r0, r3
 8007768:	f004 fec8 	bl	800c4fc <HAL_CRC_Calculate>
 800776c:	4603      	mov	r3, r0
 800776e:	81fb      	strh	r3, [r7, #14]

  }
  return (result & 0xFF) ^ (result >> 8);
 8007770:	89fb      	ldrh	r3, [r7, #14]
 8007772:	b25a      	sxtb	r2, r3
 8007774:	89fb      	ldrh	r3, [r7, #14]
 8007776:	0a1b      	lsrs	r3, r3, #8
 8007778:	b29b      	uxth	r3, r3
 800777a:	b25b      	sxtb	r3, r3
 800777c:	4053      	eors	r3, r2
 800777e:	b25b      	sxtb	r3, r3
 8007780:	b2db      	uxtb	r3, r3
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	20021158 	.word	0x20021158

08007790 <csps_exti>:
}

#define csps_time_calculate(x) (1.0f / (x) * 60.0f / 120.0f * 3.0f)

inline void csps_exti(void)
{
 8007790:	b5b0      	push	{r4, r5, r7, lr}
 8007792:	b094      	sub	sp, #80	; 0x50
 8007794:	af00      	add	r7, sp, #0
  static float average_prev = 0;
  static uint8_t dataindex = 0;
  static uint32_t t1 = 0;
  static uint32_t t2 = 0;

  const float uspa_koff = 1.0f / 10.0f;
 8007796:	4bb4      	ldr	r3, [pc, #720]	; (8007a68 <csps_exti+0x2d8>)
 8007798:	637b      	str	r3, [r7, #52]	; 0x34
  float rpm_gui_koff = 1.0f / 60.0f;
 800779a:	4bb4      	ldr	r3, [pc, #720]	; (8007a6c <csps_exti+0x2dc>)
 800779c:	64fb      	str	r3, [r7, #76]	; 0x4c
  float rpm_koff = 1.0f / 40.0f;
 800779e:	4bb4      	ldr	r3, [pc, #720]	; (8007a70 <csps_exti+0x2e0>)
 80077a0:	64bb      	str	r3, [r7, #72]	; 0x48

  uint32_t i, ticks, cur, prev;
  sCspsData data;
  float cs14, cs23;
  float average = 0;
 80077a2:	f04f 0300 	mov.w	r3, #0
 80077a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  float diff = 0;
 80077a8:	f04f 0300 	mov.w	r3, #0
 80077ac:	633b      	str	r3, [r7, #48]	; 0x30

  cur = Delay_Tick;
 80077ae:	4bb1      	ldr	r3, [pc, #708]	; (8007a74 <csps_exti+0x2e4>)
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if(csps_rpm < 1500)
 80077b4:	4bb0      	ldr	r3, [pc, #704]	; (8007a78 <csps_exti+0x2e8>)
 80077b6:	edd3 7a00 	vldr	s15, [r3]
 80077ba:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8007a7c <csps_exti+0x2ec>
 80077be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c6:	d512      	bpl.n	80077ee <csps_exti+0x5e>
  {
    if(DelayDiff(cur, csps_pulse_last) < csps_time_calculate(1500))
 80077c8:	4bad      	ldr	r3, [pc, #692]	; (8007a80 <csps_exti+0x2f0>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4619      	mov	r1, r3
 80077ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077d0:	f000 fda8 	bl	8008324 <DelayDiff>
 80077d4:	ee07 0a90 	vmov	s15, r0
 80077d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077dc:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8007a84 <csps_exti+0x2f4>
 80077e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e8:	f100 8374 	bmi.w	8007ed4 <csps_exti+0x744>
 80077ec:	e022      	b.n	8007834 <csps_exti+0xa4>
      return;
  }
  else
  {
    if(DelayDiff(cur, csps_pulse_last) < csps_time_calculate(csps_rpm))
 80077ee:	4ba4      	ldr	r3, [pc, #656]	; (8007a80 <csps_exti+0x2f0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4619      	mov	r1, r3
 80077f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077f6:	f000 fd95 	bl	8008324 <DelayDiff>
 80077fa:	ee07 0a90 	vmov	s15, r0
 80077fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007802:	4b9d      	ldr	r3, [pc, #628]	; (8007a78 <csps_exti+0x2e8>)
 8007804:	edd3 6a00 	vldr	s13, [r3]
 8007808:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800780c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8007810:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8007a88 <csps_exti+0x2f8>
 8007814:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007818:	ed9f 6a9c 	vldr	s12, [pc, #624]	; 8007a8c <csps_exti+0x2fc>
 800781c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007820:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8007824:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800782c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007830:	f100 8352 	bmi.w	8007ed8 <csps_exti+0x748>
      return;
  }

  csps_pulse_last = cur;
 8007834:	4a92      	ldr	r2, [pc, #584]	; (8007a80 <csps_exti+0x2f0>)
 8007836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007838:	6013      	str	r3, [r2, #0]
  for(i = 1; i < IRQ_SIZE; i++)
 800783a:	2301      	movs	r3, #1
 800783c:	647b      	str	r3, [r7, #68]	; 0x44
 800783e:	e00b      	b.n	8007858 <csps_exti+0xc8>
    cspc_irq_data[i - 1] = cspc_irq_data[i];
 8007840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007842:	3b01      	subs	r3, #1
 8007844:	4992      	ldr	r1, [pc, #584]	; (8007a90 <csps_exti+0x300>)
 8007846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007848:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800784c:	4990      	ldr	r1, [pc, #576]	; (8007a90 <csps_exti+0x300>)
 800784e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(i = 1; i < IRQ_SIZE; i++)
 8007852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007854:	3301      	adds	r3, #1
 8007856:	647b      	str	r3, [r7, #68]	; 0x44
 8007858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800785a:	2b07      	cmp	r3, #7
 800785c:	d9f0      	bls.n	8007840 <csps_exti+0xb0>
  cspc_irq_data[IRQ_SIZE - 1] = cur;
 800785e:	4a8c      	ldr	r2, [pc, #560]	; (8007a90 <csps_exti+0x300>)
 8007860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007862:	61d3      	str	r3, [r2, #28]
  if(cspc_irq_data[0] == 0)
 8007864:	4b8a      	ldr	r3, [pc, #552]	; (8007a90 <csps_exti+0x300>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 8337 	beq.w	8007edc <csps_exti+0x74c>
    return;
  prev = cspc_irq_data[IRQ_SIZE - 2];
 800786e:	4b88      	ldr	r3, [pc, #544]	; (8007a90 <csps_exti+0x300>)
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	643b      	str	r3, [r7, #64]	; 0x40
  csps_rotates = 1;
 8007874:	4b87      	ldr	r3, [pc, #540]	; (8007a94 <csps_exti+0x304>)
 8007876:	2201      	movs	r2, #1
 8007878:	701a      	strb	r2, [r3, #0]

  t1++;
 800787a:	4b87      	ldr	r3, [pc, #540]	; (8007a98 <csps_exti+0x308>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3301      	adds	r3, #1
 8007880:	4a85      	ldr	r2, [pc, #532]	; (8007a98 <csps_exti+0x308>)
 8007882:	6013      	str	r3, [r2, #0]

  for(i = 1; i < IRQ_SIZE; i++)
 8007884:	2301      	movs	r3, #1
 8007886:	647b      	str	r3, [r7, #68]	; 0x44
 8007888:	e018      	b.n	80078bc <csps_exti+0x12c>
  {
    average += DelayDiff(cspc_irq_data[i], cspc_irq_data[i - 1]);
 800788a:	4a81      	ldr	r2, [pc, #516]	; (8007a90 <csps_exti+0x300>)
 800788c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800788e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007894:	3b01      	subs	r3, #1
 8007896:	4a7e      	ldr	r2, [pc, #504]	; (8007a90 <csps_exti+0x300>)
 8007898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800789c:	4619      	mov	r1, r3
 800789e:	f000 fd41 	bl	8008324 <DelayDiff>
 80078a2:	ee07 0a90 	vmov	s15, r0
 80078a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078aa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80078ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078b2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  for(i = 1; i < IRQ_SIZE; i++)
 80078b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078b8:	3301      	adds	r3, #1
 80078ba:	647b      	str	r3, [r7, #68]	; 0x44
 80078bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078be:	2b07      	cmp	r3, #7
 80078c0:	d9e3      	bls.n	800788a <csps_exti+0xfa>
  }
  average /= (float)(IRQ_SIZE - 1);
 80078c2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80078c6:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 80078ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078ce:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

  if(average / average_prev > 1.0f + 1.0f / IRQ_SIZE)
 80078d2:	4b72      	ldr	r3, [pc, #456]	; (8007a9c <csps_exti+0x30c>)
 80078d4:	ed93 7a00 	vldr	s14, [r3]
 80078d8:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80078dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078e0:	eeb7 7a02 	vmov.f32	s14, #114	; 0x3f900000  1.125
 80078e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ec:	dd25      	ble.n	800793a <csps_exti+0x1aa>
  {
    if(++t2 == 2)
 80078ee:	4b6c      	ldr	r3, [pc, #432]	; (8007aa0 <csps_exti+0x310>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3301      	adds	r3, #1
 80078f4:	4a6a      	ldr	r2, [pc, #424]	; (8007aa0 <csps_exti+0x310>)
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	4b69      	ldr	r3, [pc, #420]	; (8007aa0 <csps_exti+0x310>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d130      	bne.n	8007962 <csps_exti+0x1d2>
    {
      ticks = t1;
 8007900:	4b65      	ldr	r3, [pc, #404]	; (8007a98 <csps_exti+0x308>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	62bb      	str	r3, [r7, #40]	; 0x28
      t1 = 0;
 8007906:	4b64      	ldr	r3, [pc, #400]	; (8007a98 <csps_exti+0x308>)
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]
      t2 = 0;
 800790c:	4b64      	ldr	r3, [pc, #400]	; (8007aa0 <csps_exti+0x310>)
 800790e:	2200      	movs	r2, #0
 8007910:	601a      	str	r2, [r3, #0]
      if(ticks != 116)
 8007912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007914:	2b74      	cmp	r3, #116	; 0x74
 8007916:	d009      	beq.n	800792c <csps_exti+0x19c>
        csps_errors += 1.0f;
 8007918:	4b62      	ldr	r3, [pc, #392]	; (8007aa4 <csps_exti+0x314>)
 800791a:	edd3 7a00 	vldr	s15, [r3]
 800791e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007922:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007926:	4b5f      	ldr	r3, [pc, #380]	; (8007aa4 <csps_exti+0x314>)
 8007928:	edc3 7a00 	vstr	s15, [r3]

      csps_last = cur;
 800792c:	4a5e      	ldr	r2, [pc, #376]	; (8007aa8 <csps_exti+0x318>)
 800792e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007930:	6013      	str	r3, [r2, #0]
      csps_found = 1;
 8007932:	4b5e      	ldr	r3, [pc, #376]	; (8007aac <csps_exti+0x31c>)
 8007934:	2201      	movs	r2, #1
 8007936:	701a      	strb	r2, [r3, #0]
 8007938:	e013      	b.n	8007962 <csps_exti+0x1d2>

    }
  }
  else
  {
    t2 = 0;
 800793a:	4b59      	ldr	r3, [pc, #356]	; (8007aa0 <csps_exti+0x310>)
 800793c:	2200      	movs	r2, #0
 800793e:	601a      	str	r2, [r3, #0]
    if(t1 >= 116)
 8007940:	4b55      	ldr	r3, [pc, #340]	; (8007a98 <csps_exti+0x308>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b73      	cmp	r3, #115	; 0x73
 8007946:	d90c      	bls.n	8007962 <csps_exti+0x1d2>
    {
      t1 = 1;
 8007948:	4b53      	ldr	r3, [pc, #332]	; (8007a98 <csps_exti+0x308>)
 800794a:	2201      	movs	r2, #1
 800794c:	601a      	str	r2, [r3, #0]
      csps_errors += 1.0f;
 800794e:	4b55      	ldr	r3, [pc, #340]	; (8007aa4 <csps_exti+0x314>)
 8007950:	edd3 7a00 	vldr	s15, [r3]
 8007954:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007958:	ee77 7a87 	vadd.f32	s15, s15, s14
 800795c:	4b51      	ldr	r3, [pc, #324]	; (8007aa4 <csps_exti+0x314>)
 800795e:	edc3 7a00 	vstr	s15, [r3]
    }
  }

  average_prev = average;
 8007962:	4a4e      	ldr	r2, [pc, #312]	; (8007a9c <csps_exti+0x30c>)
 8007964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007966:	6013      	str	r3, [r2, #0]

  if(csps_found)
 8007968:	4b50      	ldr	r3, [pc, #320]	; (8007aac <csps_exti+0x31c>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 8191 	beq.w	8007c96 <csps_exti+0x506>
  {
    switch(t1)
 8007974:	4b48      	ldr	r3, [pc, #288]	; (8007a98 <csps_exti+0x308>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <csps_exti+0x1f2>
 800797c:	2b01      	cmp	r3, #1
 800797e:	d029      	beq.n	80079d4 <csps_exti+0x244>
 8007980:	e036      	b.n	80079f0 <csps_exti+0x260>
    {
      case 0:
        csps_angle14 = ANGLE_INITIAL;
 8007982:	4b4b      	ldr	r3, [pc, #300]	; (8007ab0 <csps_exti+0x320>)
 8007984:	4a4b      	ldr	r2, [pc, #300]	; (8007ab4 <csps_exti+0x324>)
 8007986:	601a      	str	r2, [r3, #0]
        if (ANGLE_INITIAL > 0)
          csps_angle23 = ANGLE_INITIAL - 180.0f;
        else
          csps_angle23 = ANGLE_INITIAL + 180.0f;
 8007988:	4b4b      	ldr	r3, [pc, #300]	; (8007ab8 <csps_exti+0x328>)
 800798a:	4a4c      	ldr	r2, [pc, #304]	; (8007abc <csps_exti+0x32c>)
 800798c:	601a      	str	r2, [r3, #0]
        cs14_p = csps_angle14 - 3.0f;
 800798e:	4b48      	ldr	r3, [pc, #288]	; (8007ab0 <csps_exti+0x320>)
 8007990:	edd3 7a00 	vldr	s15, [r3]
 8007994:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8007998:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800799c:	4b48      	ldr	r3, [pc, #288]	; (8007ac0 <csps_exti+0x330>)
 800799e:	edc3 7a00 	vstr	s15, [r3]
        cs23_p = csps_angle23 - 3.0f;
 80079a2:	4b45      	ldr	r3, [pc, #276]	; (8007ab8 <csps_exti+0x328>)
 80079a4:	edd3 7a00 	vldr	s15, [r3]
 80079a8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80079ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079b0:	4b44      	ldr	r3, [pc, #272]	; (8007ac4 <csps_exti+0x334>)
 80079b2:	edc3 7a00 	vstr	s15, [r3]
        prev = (cur - (DelayDiff(cur, prev) / 3)) & DelayMask;
 80079b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079ba:	f000 fcb3 	bl	8008324 <DelayDiff>
 80079be:	4602      	mov	r2, r0
 80079c0:	4b41      	ldr	r3, [pc, #260]	; (8007ac8 <csps_exti+0x338>)
 80079c2:	fba3 2302 	umull	r2, r3, r3, r2
 80079c6:	085b      	lsrs	r3, r3, #1
 80079c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80079d0:	643b      	str	r3, [r7, #64]	; 0x40
        break;
 80079d2:	e0c0      	b.n	8007b56 <csps_exti+0x3c6>
      case 1:
        prev = (cur - (DelayDiff(cur, prev) / 3)) & DelayMask;
 80079d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079d8:	f000 fca4 	bl	8008324 <DelayDiff>
 80079dc:	4602      	mov	r2, r0
 80079de:	4b3a      	ldr	r3, [pc, #232]	; (8007ac8 <csps_exti+0x338>)
 80079e0:	fba3 2302 	umull	r2, r3, r3, r2
 80079e4:	085b      	lsrs	r3, r3, #1
 80079e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80079ee:	643b      	str	r3, [r7, #64]	; 0x40
        /* no break */
      default:
        cs14 = csps_angle14 + 3.0f;
 80079f0:	4b2f      	ldr	r3, [pc, #188]	; (8007ab0 <csps_exti+0x320>)
 80079f2:	edd3 7a00 	vldr	s15, [r3]
 80079f6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80079fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        if(cs14 > 180.0f) csps_angle14 = cs14 - 360.0f;
 8007a02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007a06:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007acc <csps_exti+0x33c>
 8007a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a12:	dd09      	ble.n	8007a28 <csps_exti+0x298>
 8007a14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007a18:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8007ad0 <csps_exti+0x340>
 8007a1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a20:	4b23      	ldr	r3, [pc, #140]	; (8007ab0 <csps_exti+0x320>)
 8007a22:	edc3 7a00 	vstr	s15, [r3]
 8007a26:	e002      	b.n	8007a2e <csps_exti+0x29e>
        else csps_angle14 = cs14;
 8007a28:	4a21      	ldr	r2, [pc, #132]	; (8007ab0 <csps_exti+0x320>)
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	6013      	str	r3, [r2, #0]

        cs23 = csps_angle23 + 3.0f;
 8007a2e:	4b22      	ldr	r3, [pc, #136]	; (8007ab8 <csps_exti+0x328>)
 8007a30:	edd3 7a00 	vldr	s15, [r3]
 8007a34:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8007a38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a3c:	edc7 7a08 	vstr	s15, [r7, #32]
        if(cs23 > 180.0f) csps_angle23 = cs23 - 360.0f;
 8007a40:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a44:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007acc <csps_exti+0x33c>
 8007a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a50:	dd40      	ble.n	8007ad4 <csps_exti+0x344>
 8007a52:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a56:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007ad0 <csps_exti+0x340>
 8007a5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a5e:	4b16      	ldr	r3, [pc, #88]	; (8007ab8 <csps_exti+0x328>)
 8007a60:	edc3 7a00 	vstr	s15, [r3]
 8007a64:	e039      	b.n	8007ada <csps_exti+0x34a>
 8007a66:	bf00      	nop
 8007a68:	3dcccccd 	.word	0x3dcccccd
 8007a6c:	3c888889 	.word	0x3c888889
 8007a70:	3ccccccd 	.word	0x3ccccccd
 8007a74:	40000c00 	.word	0x40000c00
 8007a78:	2002118c 	.word	0x2002118c
 8007a7c:	44bb8000 	.word	0x44bb8000
 8007a80:	20021180 	.word	0x20021180
 8007a84:	3a83126e 	.word	0x3a83126e
 8007a88:	42700000 	.word	0x42700000
 8007a8c:	42f00000 	.word	0x42f00000
 8007a90:	2002115c 	.word	0x2002115c
 8007a94:	2002117d 	.word	0x2002117d
 8007a98:	2002139c 	.word	0x2002139c
 8007a9c:	200213a0 	.word	0x200213a0
 8007aa0:	200213a4 	.word	0x200213a4
 8007aa4:	20021188 	.word	0x20021188
 8007aa8:	20021184 	.word	0x20021184
 8007aac:	2002117c 	.word	0x2002117c
 8007ab0:	200213a8 	.word	0x200213a8
 8007ab4:	c2ea0000 	.word	0xc2ea0000
 8007ab8:	200213ac 	.word	0x200213ac
 8007abc:	427c0000 	.word	0x427c0000
 8007ac0:	200213b0 	.word	0x200213b0
 8007ac4:	200213b4 	.word	0x200213b4
 8007ac8:	aaaaaaab 	.word	0xaaaaaaab
 8007acc:	43340000 	.word	0x43340000
 8007ad0:	43b40000 	.word	0x43b40000
        else csps_angle23 = cs23;
 8007ad4:	4abd      	ldr	r2, [pc, #756]	; (8007dcc <csps_exti+0x63c>)
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	6013      	str	r3, [r2, #0]

        cs14_p += 3.0f;
 8007ada:	4bbd      	ldr	r3, [pc, #756]	; (8007dd0 <csps_exti+0x640>)
 8007adc:	edd3 7a00 	vldr	s15, [r3]
 8007ae0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8007ae4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ae8:	4bb9      	ldr	r3, [pc, #740]	; (8007dd0 <csps_exti+0x640>)
 8007aea:	edc3 7a00 	vstr	s15, [r3]
        if(cs14_p > 180.0f)
 8007aee:	4bb8      	ldr	r3, [pc, #736]	; (8007dd0 <csps_exti+0x640>)
 8007af0:	edd3 7a00 	vldr	s15, [r3]
 8007af4:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8007dd4 <csps_exti+0x644>
 8007af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b00:	dd09      	ble.n	8007b16 <csps_exti+0x386>
          cs14_p -= 360.0f;
 8007b02:	4bb3      	ldr	r3, [pc, #716]	; (8007dd0 <csps_exti+0x640>)
 8007b04:	edd3 7a00 	vldr	s15, [r3]
 8007b08:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8007dd8 <csps_exti+0x648>
 8007b0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b10:	4baf      	ldr	r3, [pc, #700]	; (8007dd0 <csps_exti+0x640>)
 8007b12:	edc3 7a00 	vstr	s15, [r3]

        cs23_p += 3.0f;
 8007b16:	4bb1      	ldr	r3, [pc, #708]	; (8007ddc <csps_exti+0x64c>)
 8007b18:	edd3 7a00 	vldr	s15, [r3]
 8007b1c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8007b20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b24:	4bad      	ldr	r3, [pc, #692]	; (8007ddc <csps_exti+0x64c>)
 8007b26:	edc3 7a00 	vstr	s15, [r3]
        if(cs23_p > 180.0f)
 8007b2a:	4bac      	ldr	r3, [pc, #688]	; (8007ddc <csps_exti+0x64c>)
 8007b2c:	edd3 7a00 	vldr	s15, [r3]
 8007b30:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8007dd4 <csps_exti+0x644>
 8007b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b3c:	dc00      	bgt.n	8007b40 <csps_exti+0x3b0>
          cs23_p -= 360.0f;
        break;
 8007b3e:	e009      	b.n	8007b54 <csps_exti+0x3c4>
          cs23_p -= 360.0f;
 8007b40:	4ba6      	ldr	r3, [pc, #664]	; (8007ddc <csps_exti+0x64c>)
 8007b42:	edd3 7a00 	vldr	s15, [r3]
 8007b46:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8007dd8 <csps_exti+0x648>
 8007b4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b4e:	4ba3      	ldr	r3, [pc, #652]	; (8007ddc <csps_exti+0x64c>)
 8007b50:	edc3 7a00 	vstr	s15, [r3]
        break;
 8007b54:	bf00      	nop
    }

    if(csps_rpm < 200.0f)
 8007b56:	4ba2      	ldr	r3, [pc, #648]	; (8007de0 <csps_exti+0x650>)
 8007b58:	edd3 7a00 	vldr	s15, [r3]
 8007b5c:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8007de4 <csps_exti+0x654>
 8007b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b68:	d502      	bpl.n	8007b70 <csps_exti+0x3e0>
      rpm_koff = 1.0f;
 8007b6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007b6e:	64bb      	str	r3, [r7, #72]	; 0x48

    diff = (float)DelayDiff(cur, prev);
 8007b70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b74:	f000 fbd6 	bl	8008324 <DelayDiff>
 8007b78:	ee07 0a90 	vmov	s15, r0
 8007b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b80:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    if(csps_period > 10000000.0f)
 8007b84:	4b98      	ldr	r3, [pc, #608]	; (8007de8 <csps_exti+0x658>)
 8007b86:	edd3 7a00 	vldr	s15, [r3]
 8007b8a:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8007dec <csps_exti+0x65c>
 8007b8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b96:	dd02      	ble.n	8007b9e <csps_exti+0x40e>
      csps_period = 10000000.0f;
 8007b98:	4b93      	ldr	r3, [pc, #588]	; (8007de8 <csps_exti+0x658>)
 8007b9a:	4a95      	ldr	r2, [pc, #596]	; (8007df0 <csps_exti+0x660>)
 8007b9c:	601a      	str	r2, [r3, #0]

    csps_period = csps_period * (1.0f - rpm_koff) + (diff * 120.0f) * rpm_koff;
 8007b9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ba2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007ba6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007baa:	4b8f      	ldr	r3, [pc, #572]	; (8007de8 <csps_exti+0x658>)
 8007bac:	edd3 7a00 	vldr	s15, [r3]
 8007bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007bb4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007bb8:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8007df4 <csps_exti+0x664>
 8007bbc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007bc0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bcc:	4b86      	ldr	r3, [pc, #536]	; (8007de8 <csps_exti+0x658>)
 8007bce:	edc3 7a00 	vstr	s15, [r3]
    csps_rpm = 1000000.0f / csps_period * 60.0f;
 8007bd2:	4b85      	ldr	r3, [pc, #532]	; (8007de8 <csps_exti+0x658>)
 8007bd4:	ed93 7a00 	vldr	s14, [r3]
 8007bd8:	eddf 6a87 	vldr	s13, [pc, #540]	; 8007df8 <csps_exti+0x668>
 8007bdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007be0:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8007dfc <csps_exti+0x66c>
 8007be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007be8:	4b7d      	ldr	r3, [pc, #500]	; (8007de0 <csps_exti+0x650>)
 8007bea:	edc3 7a00 	vstr	s15, [r3]

    if(csps_rpm < 400) rpm_gui_koff = 0.1f;
 8007bee:	4b7c      	ldr	r3, [pc, #496]	; (8007de0 <csps_exti+0x650>)
 8007bf0:	edd3 7a00 	vldr	s15, [r3]
 8007bf4:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8007e00 <csps_exti+0x670>
 8007bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c00:	d501      	bpl.n	8007c06 <csps_exti+0x476>
 8007c02:	4b80      	ldr	r3, [pc, #512]	; (8007e04 <csps_exti+0x674>)
 8007c04:	64fb      	str	r3, [r7, #76]	; 0x4c

    csps_rpm_gui = (1.0f - rpm_gui_koff) * csps_rpm_gui + csps_rpm * rpm_gui_koff;
 8007c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c0a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007c0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c12:	4b7d      	ldr	r3, [pc, #500]	; (8007e08 <csps_exti+0x678>)
 8007c14:	edd3 7a00 	vldr	s15, [r3]
 8007c18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c1c:	4b70      	ldr	r3, [pc, #448]	; (8007de0 <csps_exti+0x650>)
 8007c1e:	edd3 6a00 	vldr	s13, [r3]
 8007c22:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007c26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c2e:	4b76      	ldr	r3, [pc, #472]	; (8007e08 <csps_exti+0x678>)
 8007c30:	edc3 7a00 	vstr	s15, [r3]
    csps_uspa = csps_uspa * (1.0f - uspa_koff) + (diff / 3.0f) * uspa_koff;
 8007c34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c38:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007c3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c40:	4b72      	ldr	r3, [pc, #456]	; (8007e0c <csps_exti+0x67c>)
 8007c42:	edd3 7a00 	vldr	s15, [r3]
 8007c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c4a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007c4e:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8007c52:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007c56:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c62:	4b6a      	ldr	r3, [pc, #424]	; (8007e0c <csps_exti+0x67c>)
 8007c64:	edc3 7a00 	vstr	s15, [r3]

    data.AngleCur14 = csps_angle14;
 8007c68:	4b69      	ldr	r3, [pc, #420]	; (8007e10 <csps_exti+0x680>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	60bb      	str	r3, [r7, #8]
    data.AngleCur23 = csps_angle23;
 8007c6e:	4b57      	ldr	r3, [pc, #348]	; (8007dcc <csps_exti+0x63c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	613b      	str	r3, [r7, #16]
    data.AnglePrev14 = cs14_p;
 8007c74:	4b56      	ldr	r3, [pc, #344]	; (8007dd0 <csps_exti+0x640>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	60fb      	str	r3, [r7, #12]
    data.AnglePrev23 = cs23_p;
 8007c7a:	4b58      	ldr	r3, [pc, #352]	; (8007ddc <csps_exti+0x64c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	617b      	str	r3, [r7, #20]
    data.DelayPrev = prev;
 8007c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c82:	607b      	str	r3, [r7, #4]
    data.DelayCur = cur;
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c86:	603b      	str	r3, [r7, #0]
    data.RPM = csps_rpm;
 8007c88:	4b55      	ldr	r3, [pc, #340]	; (8007de0 <csps_exti+0x650>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	61bb      	str	r3, [r7, #24]
    data.uSPA = csps_uspa;
 8007c8e:	4b5f      	ldr	r3, [pc, #380]	; (8007e0c <csps_exti+0x67c>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	61fb      	str	r3, [r7, #28]
 8007c94:	e02d      	b.n	8007cf2 <csps_exti+0x562>

  }
  else
  {
    data.AngleCur14 = 0;
 8007c96:	f04f 0300 	mov.w	r3, #0
 8007c9a:	60bb      	str	r3, [r7, #8]
    data.AngleCur23 = 0;
 8007c9c:	f04f 0300 	mov.w	r3, #0
 8007ca0:	613b      	str	r3, [r7, #16]
    data.AnglePrev14 = 0;
 8007ca2:	f04f 0300 	mov.w	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
    data.AnglePrev23 = 0;
 8007ca8:	f04f 0300 	mov.w	r3, #0
 8007cac:	617b      	str	r3, [r7, #20]
    data.DelayPrev = 0;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	607b      	str	r3, [r7, #4]
    data.DelayCur = 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	603b      	str	r3, [r7, #0]
    data.RPM = 0;
 8007cb6:	f04f 0300 	mov.w	r3, #0
 8007cba:	61bb      	str	r3, [r7, #24]
    data.uSPA = 1.0f / csps_rpm;
 8007cbc:	4b48      	ldr	r3, [pc, #288]	; (8007de0 <csps_exti+0x650>)
 8007cbe:	ed93 7a00 	vldr	s14, [r3]
 8007cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cca:	edc7 7a07 	vstr	s15, [r7, #28]
    csps_period = 1.0f / csps_rpm;
 8007cce:	4b44      	ldr	r3, [pc, #272]	; (8007de0 <csps_exti+0x650>)
 8007cd0:	ed93 7a00 	vldr	s14, [r3]
 8007cd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cdc:	4b42      	ldr	r3, [pc, #264]	; (8007de8 <csps_exti+0x658>)
 8007cde:	edc3 7a00 	vstr	s15, [r3]
    csps_rpm = 0;
 8007ce2:	4b3f      	ldr	r3, [pc, #252]	; (8007de0 <csps_exti+0x650>)
 8007ce4:	f04f 0200 	mov.w	r2, #0
 8007ce8:	601a      	str	r2, [r3, #0]
    csps_rpm_gui = 0;
 8007cea:	4b47      	ldr	r3, [pc, #284]	; (8007e08 <csps_exti+0x678>)
 8007cec:	f04f 0200 	mov.w	r2, #0
 8007cf0:	601a      	str	r2, [r3, #0]
  }
  CspsData[dataindex] = data;
 8007cf2:	4b48      	ldr	r3, [pc, #288]	; (8007e14 <csps_exti+0x684>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	4a48      	ldr	r2, [pc, #288]	; (8007e18 <csps_exti+0x688>)
 8007cf8:	015b      	lsls	r3, r3, #5
 8007cfa:	4413      	add	r3, r2
 8007cfc:	461d      	mov	r5, r3
 8007cfe:	463c      	mov	r4, r7
 8007d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d04:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007d08:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  CspsDataPtr = &CspsData[dataindex];
 8007d0c:	4b41      	ldr	r3, [pc, #260]	; (8007e14 <csps_exti+0x684>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	015b      	lsls	r3, r3, #5
 8007d12:	4a41      	ldr	r2, [pc, #260]	; (8007e18 <csps_exti+0x688>)
 8007d14:	4413      	add	r3, r2
 8007d16:	4a41      	ldr	r2, [pc, #260]	; (8007e1c <csps_exti+0x68c>)
 8007d18:	6013      	str	r3, [r2, #0]
  if(++dataindex >= DATA_SIZE)
 8007d1a:	4b3e      	ldr	r3, [pc, #248]	; (8007e14 <csps_exti+0x684>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	4b3c      	ldr	r3, [pc, #240]	; (8007e14 <csps_exti+0x684>)
 8007d24:	701a      	strb	r2, [r3, #0]
 8007d26:	4b3b      	ldr	r3, [pc, #236]	; (8007e14 <csps_exti+0x684>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b0f      	cmp	r3, #15
 8007d2c:	d902      	bls.n	8007d34 <csps_exti+0x5a4>
    dataindex = 0;
 8007d2e:	4b39      	ldr	r3, [pc, #228]	; (8007e14 <csps_exti+0x684>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	701a      	strb	r2, [r3, #0]

  static float angle_tach = 0;
  float angle_t = csps_angle14;
 8007d34:	4b36      	ldr	r3, [pc, #216]	; (8007e10 <csps_exti+0x680>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	63bb      	str	r3, [r7, #56]	; 0x38
  if((angle_t - angle_tach < 0.0f && angle_t - angle_tach > -90.0f) || angle_t - angle_tach > 90.0f)
 8007d3a:	4b39      	ldr	r3, [pc, #228]	; (8007e20 <csps_exti+0x690>)
 8007d3c:	edd3 7a00 	vldr	s15, [r3]
 8007d40:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8007d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d50:	d50d      	bpl.n	8007d6e <csps_exti+0x5de>
 8007d52:	4b33      	ldr	r3, [pc, #204]	; (8007e20 <csps_exti+0x690>)
 8007d54:	edd3 7a00 	vldr	s15, [r3]
 8007d58:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8007d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d60:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007e24 <csps_exti+0x694>
 8007d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d6c:	dc0d      	bgt.n	8007d8a <csps_exti+0x5fa>
 8007d6e:	4b2c      	ldr	r3, [pc, #176]	; (8007e20 <csps_exti+0x690>)
 8007d70:	edd3 7a00 	vldr	s15, [r3]
 8007d74:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8007d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d7c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007e28 <csps_exti+0x698>
 8007d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d88:	dd02      	ble.n	8007d90 <csps_exti+0x600>
    angle_t = angle_tach;
 8007d8a:	4b25      	ldr	r3, [pc, #148]	; (8007e20 <csps_exti+0x690>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  angle_tach = angle_t;
 8007d90:	4a23      	ldr	r2, [pc, #140]	; (8007e20 <csps_exti+0x690>)
 8007d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d94:	6013      	str	r3, [r2, #0]
  if(angle_tach > -45 && angle_tach < 45)
 8007d96:	4b22      	ldr	r3, [pc, #136]	; (8007e20 <csps_exti+0x690>)
 8007d98:	edd3 7a00 	vldr	s15, [r3]
 8007d9c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8007e2c <csps_exti+0x69c>
 8007da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da8:	dd46      	ble.n	8007e38 <csps_exti+0x6a8>
 8007daa:	4b1d      	ldr	r3, [pc, #116]	; (8007e20 <csps_exti+0x690>)
 8007dac:	edd3 7a00 	vldr	s15, [r3]
 8007db0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007e30 <csps_exti+0x6a0>
 8007db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dbc:	d53c      	bpl.n	8007e38 <csps_exti+0x6a8>
    HAL_GPIO_WritePin(TACHOMETER_GPIO_Port, TACHOMETER_Pin, GPIO_PIN_SET);
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	481c      	ldr	r0, [pc, #112]	; (8007e34 <csps_exti+0x6a4>)
 8007dc4:	f005 fa7c 	bl	800d2c0 <HAL_GPIO_WritePin>
 8007dc8:	e089      	b.n	8007ede <csps_exti+0x74e>
 8007dca:	bf00      	nop
 8007dcc:	200213ac 	.word	0x200213ac
 8007dd0:	200213b0 	.word	0x200213b0
 8007dd4:	43340000 	.word	0x43340000
 8007dd8:	43b40000 	.word	0x43b40000
 8007ddc:	200213b4 	.word	0x200213b4
 8007de0:	2002118c 	.word	0x2002118c
 8007de4:	43480000 	.word	0x43480000
 8007de8:	20021198 	.word	0x20021198
 8007dec:	4b189680 	.word	0x4b189680
 8007df0:	4b189680 	.word	0x4b189680
 8007df4:	42f00000 	.word	0x42f00000
 8007df8:	49742400 	.word	0x49742400
 8007dfc:	42700000 	.word	0x42700000
 8007e00:	43c80000 	.word	0x43c80000
 8007e04:	3dcccccd 	.word	0x3dcccccd
 8007e08:	20021190 	.word	0x20021190
 8007e0c:	20021194 	.word	0x20021194
 8007e10:	200213a8 	.word	0x200213a8
 8007e14:	200213b8 	.word	0x200213b8
 8007e18:	2002119c 	.word	0x2002119c
 8007e1c:	200104bc 	.word	0x200104bc
 8007e20:	200213bc 	.word	0x200213bc
 8007e24:	c2b40000 	.word	0xc2b40000
 8007e28:	42b40000 	.word	0x42b40000
 8007e2c:	c2340000 	.word	0xc2340000
 8007e30:	42340000 	.word	0x42340000
 8007e34:	40021c00 	.word	0x40021c00
  else if(angle_tach > 45 && angle_tach < 135)
 8007e38:	4b2a      	ldr	r3, [pc, #168]	; (8007ee4 <csps_exti+0x754>)
 8007e3a:	edd3 7a00 	vldr	s15, [r3]
 8007e3e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007ee8 <csps_exti+0x758>
 8007e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e4a:	dd0f      	ble.n	8007e6c <csps_exti+0x6dc>
 8007e4c:	4b25      	ldr	r3, [pc, #148]	; (8007ee4 <csps_exti+0x754>)
 8007e4e:	edd3 7a00 	vldr	s15, [r3]
 8007e52:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007eec <csps_exti+0x75c>
 8007e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e5e:	d505      	bpl.n	8007e6c <csps_exti+0x6dc>
    HAL_GPIO_WritePin(TACHOMETER_GPIO_Port, TACHOMETER_Pin, GPIO_PIN_RESET);
 8007e60:	2200      	movs	r2, #0
 8007e62:	2101      	movs	r1, #1
 8007e64:	4822      	ldr	r0, [pc, #136]	; (8007ef0 <csps_exti+0x760>)
 8007e66:	f005 fa2b 	bl	800d2c0 <HAL_GPIO_WritePin>
 8007e6a:	e038      	b.n	8007ede <csps_exti+0x74e>
  else if(angle_tach > 135 || angle_tach < -135)
 8007e6c:	4b1d      	ldr	r3, [pc, #116]	; (8007ee4 <csps_exti+0x754>)
 8007e6e:	edd3 7a00 	vldr	s15, [r3]
 8007e72:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007eec <csps_exti+0x75c>
 8007e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e7e:	dc09      	bgt.n	8007e94 <csps_exti+0x704>
 8007e80:	4b18      	ldr	r3, [pc, #96]	; (8007ee4 <csps_exti+0x754>)
 8007e82:	edd3 7a00 	vldr	s15, [r3]
 8007e86:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8007ef4 <csps_exti+0x764>
 8007e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e92:	d505      	bpl.n	8007ea0 <csps_exti+0x710>
    HAL_GPIO_WritePin(TACHOMETER_GPIO_Port, TACHOMETER_Pin, GPIO_PIN_SET);
 8007e94:	2201      	movs	r2, #1
 8007e96:	2101      	movs	r1, #1
 8007e98:	4815      	ldr	r0, [pc, #84]	; (8007ef0 <csps_exti+0x760>)
 8007e9a:	f005 fa11 	bl	800d2c0 <HAL_GPIO_WritePin>
 8007e9e:	e01e      	b.n	8007ede <csps_exti+0x74e>
  else if(angle_tach < -45 && angle_tach > -135)
 8007ea0:	4b10      	ldr	r3, [pc, #64]	; (8007ee4 <csps_exti+0x754>)
 8007ea2:	edd3 7a00 	vldr	s15, [r3]
 8007ea6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007ef8 <csps_exti+0x768>
 8007eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eb2:	d514      	bpl.n	8007ede <csps_exti+0x74e>
 8007eb4:	4b0b      	ldr	r3, [pc, #44]	; (8007ee4 <csps_exti+0x754>)
 8007eb6:	edd3 7a00 	vldr	s15, [r3]
 8007eba:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007ef4 <csps_exti+0x764>
 8007ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ec6:	dd0a      	ble.n	8007ede <csps_exti+0x74e>
    HAL_GPIO_WritePin(TACHOMETER_GPIO_Port, TACHOMETER_Pin, GPIO_PIN_RESET);
 8007ec8:	2200      	movs	r2, #0
 8007eca:	2101      	movs	r1, #1
 8007ecc:	4808      	ldr	r0, [pc, #32]	; (8007ef0 <csps_exti+0x760>)
 8007ece:	f005 f9f7 	bl	800d2c0 <HAL_GPIO_WritePin>
 8007ed2:	e004      	b.n	8007ede <csps_exti+0x74e>
      return;
 8007ed4:	bf00      	nop
 8007ed6:	e002      	b.n	8007ede <csps_exti+0x74e>
      return;
 8007ed8:	bf00      	nop
 8007eda:	e000      	b.n	8007ede <csps_exti+0x74e>
    return;
 8007edc:	bf00      	nop

}
 8007ede:	3750      	adds	r7, #80	; 0x50
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8007ee4:	200213bc 	.word	0x200213bc
 8007ee8:	42340000 	.word	0x42340000
 8007eec:	43070000 	.word	0x43070000
 8007ef0:	40021c00 	.word	0x40021c00
 8007ef4:	c3070000 	.word	0xc3070000
 8007ef8:	c2340000 	.word	0xc2340000

08007efc <csps_getangle14>:
  else return 360 + a - b;
}
*/

inline float csps_getangle14(void)
{
 8007efc:	b5b0      	push	{r4, r5, r7, lr}
 8007efe:	b08e      	sub	sp, #56	; 0x38
 8007f00:	af00      	add	r7, sp, #0
  static float angle_prev = 0;
  float now = Delay_Tick;
 8007f02:	4b57      	ldr	r3, [pc, #348]	; (8008060 <csps_getangle14+0x164>)
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	ee07 3a90 	vmov	s15, r3
 8007f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f0e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float angle, acur, aprev, mult, cur;
  sCspsData data = *CspsDataPtr;
 8007f12:	4b54      	ldr	r3, [pc, #336]	; (8008064 <csps_getangle14+0x168>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	463c      	mov	r4, r7
 8007f18:	461d      	mov	r5, r3
 8007f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f1e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007f22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  if(!csps_rotates)
 8007f26:	4b50      	ldr	r3, [pc, #320]	; (8008068 <csps_getangle14+0x16c>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d102      	bne.n	8007f36 <csps_getangle14+0x3a>
    return 0.0f;
 8007f30:	f04f 0300 	mov.w	r3, #0
 8007f34:	e08d      	b.n	8008052 <csps_getangle14+0x156>

  cur = DelayDiff(data.DelayCur, data.DelayPrev);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 f9f1 	bl	8008324 <DelayDiff>
 8007f42:	ee07 0a90 	vmov	s15, r0
 8007f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  now = DelayDiff(now, data.DelayPrev);
 8007f4e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	ee17 0a90 	vmov	r0, s15
 8007f5e:	f000 f9e1 	bl	8008324 <DelayDiff>
 8007f62:	ee07 0a90 	vmov	s15, r0
 8007f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

  acur = data.AngleCur14;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	633b      	str	r3, [r7, #48]	; 0x30
  aprev = data.AnglePrev14;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	627b      	str	r3, [r7, #36]	; 0x24

  if(acur < aprev)
 8007f76:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007f7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007f7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f86:	d507      	bpl.n	8007f98 <csps_getangle14+0x9c>
    acur += 360.0f;
 8007f88:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007f8c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800806c <csps_getangle14+0x170>
 8007f90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f94:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

  angle = acur - aprev;
 8007f98:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007f9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fa4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  mult = angle / cur;
 8007fa8:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8007fac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8007fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fb4:	edc7 7a08 	vstr	s15, [r7, #32]
  angle = mult * now + aprev;
 8007fb8:	ed97 7a08 	vldr	s14, [r7, #32]
 8007fbc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fcc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

  while(angle > 180.0f)
 8007fd0:	e007      	b.n	8007fe2 <csps_getangle14+0xe6>
    angle -= 360.0f;
 8007fd2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007fd6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800806c <csps_getangle14+0x170>
 8007fda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fde:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  while(angle > 180.0f)
 8007fe2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007fe6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8008070 <csps_getangle14+0x174>
 8007fea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff2:	dcee      	bgt.n	8007fd2 <csps_getangle14+0xd6>

  if((angle - angle_prev < 0.0f && angle - angle_prev > -90.0f) || angle - angle_prev > 90.0f)
 8007ff4:	4b1f      	ldr	r3, [pc, #124]	; (8008074 <csps_getangle14+0x178>)
 8007ff6:	edd3 7a00 	vldr	s15, [r3]
 8007ffa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8007ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008002:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800800a:	d50d      	bpl.n	8008028 <csps_getangle14+0x12c>
 800800c:	4b19      	ldr	r3, [pc, #100]	; (8008074 <csps_getangle14+0x178>)
 800800e:	edd3 7a00 	vldr	s15, [r3]
 8008012:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800801a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8008078 <csps_getangle14+0x17c>
 800801e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008026:	dc0d      	bgt.n	8008044 <csps_getangle14+0x148>
 8008028:	4b12      	ldr	r3, [pc, #72]	; (8008074 <csps_getangle14+0x178>)
 800802a:	edd3 7a00 	vldr	s15, [r3]
 800802e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008036:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800807c <csps_getangle14+0x180>
 800803a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800803e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008042:	dd02      	ble.n	800804a <csps_getangle14+0x14e>
  {
    angle = angle_prev;
 8008044:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <csps_getangle14+0x178>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	637b      	str	r3, [r7, #52]	; 0x34
  }
  angle_prev = angle;
 800804a:	4a0a      	ldr	r2, [pc, #40]	; (8008074 <csps_getangle14+0x178>)
 800804c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804e:	6013      	str	r3, [r2, #0]

  return angle;
 8008050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008052:	ee07 3a90 	vmov	s15, r3
}
 8008056:	eeb0 0a67 	vmov.f32	s0, s15
 800805a:	3738      	adds	r7, #56	; 0x38
 800805c:	46bd      	mov	sp, r7
 800805e:	bdb0      	pop	{r4, r5, r7, pc}
 8008060:	40000c00 	.word	0x40000c00
 8008064:	200104bc 	.word	0x200104bc
 8008068:	2002117d 	.word	0x2002117d
 800806c:	43b40000 	.word	0x43b40000
 8008070:	43340000 	.word	0x43340000
 8008074:	200213c0 	.word	0x200213c0
 8008078:	c2b40000 	.word	0xc2b40000
 800807c:	42b40000 	.word	0x42b40000

08008080 <csps_getangle23from14>:

  return angle;
}

inline float csps_getangle23from14(float angle)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	ed87 0a01 	vstr	s0, [r7, #4]
  if(!csps_rotates)
 800808a:	4b15      	ldr	r3, [pc, #84]	; (80080e0 <csps_getangle23from14+0x60>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	d102      	bne.n	800809a <csps_getangle23from14+0x1a>
    return 0.0f;
 8008094:	f04f 0300 	mov.w	r3, #0
 8008098:	e018      	b.n	80080cc <csps_getangle23from14+0x4c>

  if(angle > 0.0f) angle -= 180.0f;
 800809a:	edd7 7a01 	vldr	s15, [r7, #4]
 800809e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80080a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a6:	dd08      	ble.n	80080ba <csps_getangle23from14+0x3a>
 80080a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80080ac:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80080e4 <csps_getangle23from14+0x64>
 80080b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080b4:	edc7 7a01 	vstr	s15, [r7, #4]
 80080b8:	e007      	b.n	80080ca <csps_getangle23from14+0x4a>
  else angle += 180.0f;
 80080ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80080be:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80080e4 <csps_getangle23from14+0x64>
 80080c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080c6:	edc7 7a01 	vstr	s15, [r7, #4]
  return angle;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	ee07 3a90 	vmov	s15, r3
}
 80080d0:	eeb0 0a67 	vmov.f32	s0, s15
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	2002117d 	.word	0x2002117d
 80080e4:	43340000 	.word	0x43340000

080080e8 <csps_getrpm>:

inline float csps_getrpm(void)
{
 80080e8:	b480      	push	{r7}
 80080ea:	af00      	add	r7, sp, #0
  return csps_rpm;
 80080ec:	4b04      	ldr	r3, [pc, #16]	; (8008100 <csps_getrpm+0x18>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	ee07 3a90 	vmov	s15, r3
}
 80080f4:	eeb0 0a67 	vmov.f32	s0, s15
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	2002118c 	.word	0x2002118c

08008104 <csps_getrpmgui>:

inline float csps_getrpmgui(void)
{
 8008104:	b480      	push	{r7}
 8008106:	af00      	add	r7, sp, #0
  return csps_rpm_gui;
 8008108:	4b04      	ldr	r3, [pc, #16]	; (800811c <csps_getrpmgui+0x18>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	ee07 3a90 	vmov	s15, r3
}
 8008110:	eeb0 0a67 	vmov.f32	s0, s15
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	20021190 	.word	0x20021190

08008120 <csps_getuspa>:

inline float csps_getuspa(void)
{
 8008120:	b480      	push	{r7}
 8008122:	af00      	add	r7, sp, #0
  return csps_uspa;
 8008124:	4b04      	ldr	r3, [pc, #16]	; (8008138 <csps_getuspa+0x18>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	ee07 3a90 	vmov	s15, r3
}
 800812c:	eeb0 0a67 	vmov.f32	s0, s15
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	20021194 	.word	0x20021194

0800813c <csps_getperiod>:

inline float csps_getperiod(void)
{
 800813c:	b480      	push	{r7}
 800813e:	af00      	add	r7, sp, #0
  return csps_period;
 8008140:	4b04      	ldr	r3, [pc, #16]	; (8008154 <csps_getperiod+0x18>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	ee07 3a90 	vmov	s15, r3
}
 8008148:	eeb0 0a67 	vmov.f32	s0, s15
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	20021198 	.word	0x20021198

08008158 <csps_isrotates>:

inline uint8_t csps_isrotates(void)
{
 8008158:	b480      	push	{r7}
 800815a:	af00      	add	r7, sp, #0
  return csps_rotates;
 800815c:	4b03      	ldr	r3, [pc, #12]	; (800816c <csps_isrotates+0x14>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	b2db      	uxtb	r3, r3
}
 8008162:	4618      	mov	r0, r3
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	2002117d 	.word	0x2002117d

08008170 <csps_isfound>:

inline uint8_t csps_isfound(void)
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
  return csps_found;
 8008174:	4b03      	ldr	r3, [pc, #12]	; (8008184 <csps_isfound+0x14>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	b2db      	uxtb	r3, r3
}
 800817a:	4618      	mov	r0, r3
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	2002117c 	.word	0x2002117c

08008188 <csps_iserror>:

inline uint8_t csps_iserror(void)
{
 8008188:	b480      	push	{r7}
 800818a:	af00      	add	r7, sp, #0
  return csps_errors > 3.0f;
 800818c:	4b08      	ldr	r3, [pc, #32]	; (80081b0 <csps_iserror+0x28>)
 800818e:	edd3 7a00 	vldr	s15, [r3]
 8008192:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800819a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800819e:	bfcc      	ite	gt
 80081a0:	2301      	movgt	r3, #1
 80081a2:	2300      	movle	r3, #0
 80081a4:	b2db      	uxtb	r3, r3
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	20021188 	.word	0x20021188

080081b4 <csps_loop>:

inline void csps_loop(void)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
  static uint32_t last_error_null = 0;

  uint32_t pulse_last = csps_pulse_last;
 80081ba:	4b29      	ldr	r3, [pc, #164]	; (8008260 <csps_loop+0xac>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	60bb      	str	r3, [r7, #8]
  uint32_t now = Delay_Tick;
 80081c0:	4b28      	ldr	r3, [pc, #160]	; (8008264 <csps_loop+0xb0>)
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	607b      	str	r3, [r7, #4]

  if(DelayDiff(now, pulse_last) > 50000)
 80081c6:	68b9      	ldr	r1, [r7, #8]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f8ab 	bl	8008324 <DelayDiff>
 80081ce:	4602      	mov	r2, r0
 80081d0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d927      	bls.n	8008228 <csps_loop+0x74>
  {
    pulse_last = now;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	60bb      	str	r3, [r7, #8]
    for(int i = 0; i < IRQ_SIZE; i++)
 80081dc:	2300      	movs	r3, #0
 80081de:	60fb      	str	r3, [r7, #12]
 80081e0:	e007      	b.n	80081f2 <csps_loop+0x3e>
      cspc_irq_data[i] = 0;
 80081e2:	4a21      	ldr	r2, [pc, #132]	; (8008268 <csps_loop+0xb4>)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2100      	movs	r1, #0
 80081e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0; i < IRQ_SIZE; i++)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3301      	adds	r3, #1
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b07      	cmp	r3, #7
 80081f6:	ddf4      	ble.n	80081e2 <csps_loop+0x2e>
    csps_found = 0;
 80081f8:	4b1c      	ldr	r3, [pc, #112]	; (800826c <csps_loop+0xb8>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	701a      	strb	r2, [r3, #0]
    csps_rpm = 0;
 80081fe:	4b1c      	ldr	r3, [pc, #112]	; (8008270 <csps_loop+0xbc>)
 8008200:	f04f 0200 	mov.w	r2, #0
 8008204:	601a      	str	r2, [r3, #0]
    csps_rpm_gui = 0;
 8008206:	4b1b      	ldr	r3, [pc, #108]	; (8008274 <csps_loop+0xc0>)
 8008208:	f04f 0200 	mov.w	r2, #0
 800820c:	601a      	str	r2, [r3, #0]
    csps_rotates = 0;
 800820e:	4b1a      	ldr	r3, [pc, #104]	; (8008278 <csps_loop+0xc4>)
 8008210:	2200      	movs	r2, #0
 8008212:	701a      	strb	r2, [r3, #0]
    csps_period = 1.0f / csps_rpm;
 8008214:	4b16      	ldr	r3, [pc, #88]	; (8008270 <csps_loop+0xbc>)
 8008216:	ed93 7a00 	vldr	s14, [r3]
 800821a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800821e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008222:	4b16      	ldr	r3, [pc, #88]	; (800827c <csps_loop+0xc8>)
 8008224:	edc3 7a00 	vstr	s15, [r3]
  }

  if(DelayDiff(now, last_error_null) > 50000)
 8008228:	4b15      	ldr	r3, [pc, #84]	; (8008280 <csps_loop+0xcc>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f878 	bl	8008324 <DelayDiff>
 8008234:	4602      	mov	r2, r0
 8008236:	f24c 3350 	movw	r3, #50000	; 0xc350
 800823a:	429a      	cmp	r2, r3
 800823c:	d90c      	bls.n	8008258 <csps_loop+0xa4>
  {
    csps_errors *= 0.95f;
 800823e:	4b11      	ldr	r3, [pc, #68]	; (8008284 <csps_loop+0xd0>)
 8008240:	edd3 7a00 	vldr	s15, [r3]
 8008244:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008288 <csps_loop+0xd4>
 8008248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800824c:	4b0d      	ldr	r3, [pc, #52]	; (8008284 <csps_loop+0xd0>)
 800824e:	edc3 7a00 	vstr	s15, [r3]
    last_error_null = now;
 8008252:	4a0b      	ldr	r2, [pc, #44]	; (8008280 <csps_loop+0xcc>)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6013      	str	r3, [r2, #0]
  }

}
 8008258:	bf00      	nop
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	20021180 	.word	0x20021180
 8008264:	40000c00 	.word	0x40000c00
 8008268:	2002115c 	.word	0x2002115c
 800826c:	2002117c 	.word	0x2002117c
 8008270:	2002118c 	.word	0x2002118c
 8008274:	20021190 	.word	0x20021190
 8008278:	2002117d 	.word	0x2002117d
 800827c:	20021198 	.word	0x20021198
 8008280:	200213c4 	.word	0x200213c4
 8008284:	20021188 	.word	0x20021188
 8008288:	3f733333 	.word	0x3f733333

0800828c <DelayInit>:
static TIM_HandleTypeDef htim_delay;

volatile uint32_t DelStart[COUNTERS];

void DelayInit(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b088      	sub	sp, #32
 8008290:	af00      	add	r7, sp, #0
  __DELAY_TIM_CLK_ENABLE();
 8008292:	4b20      	ldr	r3, [pc, #128]	; (8008314 <DelayInit+0x88>)
 8008294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008296:	4a1f      	ldr	r2, [pc, #124]	; (8008314 <DelayInit+0x88>)
 8008298:	f043 0308 	orr.w	r3, r3, #8
 800829c:	6413      	str	r3, [r2, #64]	; 0x40
 800829e:	4b1d      	ldr	r3, [pc, #116]	; (8008314 <DelayInit+0x88>)
 80082a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a2:	f003 0308 	and.w	r3, r3, #8
 80082a6:	603b      	str	r3, [r7, #0]
 80082a8:	683b      	ldr	r3, [r7, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig;
    TIM_MasterConfigTypeDef sMasterConfig;

    htim_delay.Instance = DelayTimer;
 80082aa:	4b1b      	ldr	r3, [pc, #108]	; (8008318 <DelayInit+0x8c>)
 80082ac:	4a1b      	ldr	r2, [pc, #108]	; (800831c <DelayInit+0x90>)
 80082ae:	601a      	str	r2, [r3, #0]
    htim_delay.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) - 1;
 80082b0:	f005 fce6 	bl	800dc80 <HAL_RCC_GetPCLK1Freq>
 80082b4:	4603      	mov	r3, r0
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	4a19      	ldr	r2, [pc, #100]	; (8008320 <DelayInit+0x94>)
 80082ba:	fba2 2303 	umull	r2, r3, r2, r3
 80082be:	0c9b      	lsrs	r3, r3, #18
 80082c0:	3b01      	subs	r3, #1
 80082c2:	4a15      	ldr	r2, [pc, #84]	; (8008318 <DelayInit+0x8c>)
 80082c4:	6053      	str	r3, [r2, #4]
    htim_delay.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082c6:	4b14      	ldr	r3, [pc, #80]	; (8008318 <DelayInit+0x8c>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	609a      	str	r2, [r3, #8]
    htim_delay.Init.Period = DelayMask;
 80082cc:	4b12      	ldr	r3, [pc, #72]	; (8008318 <DelayInit+0x8c>)
 80082ce:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 80082d2:	60da      	str	r2, [r3, #12]
    htim_delay.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082d4:	4b10      	ldr	r3, [pc, #64]	; (8008318 <DelayInit+0x8c>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim_delay);
 80082da:	480f      	ldr	r0, [pc, #60]	; (8008318 <DelayInit+0x8c>)
 80082dc:	f007 fc8f 	bl	800fbfe <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80082e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082e4:	613b      	str	r3, [r7, #16]
    HAL_TIM_ConfigClockSource(&htim_delay, &sClockSourceConfig);
 80082e6:	f107 0310 	add.w	r3, r7, #16
 80082ea:	4619      	mov	r1, r3
 80082ec:	480a      	ldr	r0, [pc, #40]	; (8008318 <DelayInit+0x8c>)
 80082ee:	f007 ffad 	bl	801024c <HAL_TIM_ConfigClockSource>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80082f2:	2300      	movs	r3, #0
 80082f4:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]
    HAL_TIMEx_MasterConfigSynchronization(&htim_delay, &sMasterConfig);
 80082fa:	1d3b      	adds	r3, r7, #4
 80082fc:	4619      	mov	r1, r3
 80082fe:	4806      	ldr	r0, [pc, #24]	; (8008318 <DelayInit+0x8c>)
 8008300:	f008 fc4e 	bl	8010ba0 <HAL_TIMEx_MasterConfigSynchronization>

    HAL_TIM_Base_Start(&htim_delay);
 8008304:	4804      	ldr	r0, [pc, #16]	; (8008318 <DelayInit+0x8c>)
 8008306:	f007 fca5 	bl	800fc54 <HAL_TIM_Base_Start>

}
 800830a:	bf00      	nop
 800830c:	3720      	adds	r7, #32
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	40023800 	.word	0x40023800
 8008318:	200213c8 	.word	0x200213c8
 800831c:	40000c00 	.word	0x40000c00
 8008320:	431bde83 	.word	0x431bde83

08008324 <DelayDiff>:
{
  DelayUs(val * 1000);
}

inline uint32_t DelayDiff(uint32_t a, uint32_t b)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  if(a >= b)
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	429a      	cmp	r2, r3
 8008334:	d303      	bcc.n	800833e <DelayDiff+0x1a>
    return (a - b);
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	e005      	b.n	800834a <DelayDiff+0x26>
  return ((DelayMask - b) + a);
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	1ad2      	subs	r2, r2, r3
 8008344:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8008348:	4413      	add	r3, r2
}
 800834a:	4618      	mov	r0, r3
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
	...

08008358 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8008358:	b480      	push	{r7}
 800835a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800835c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008360:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008364:	4b0b      	ldr	r3, [pc, #44]	; (8008394 <SCB_EnableICache+0x3c>)
 8008366:	2200      	movs	r2, #0
 8008368:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800836c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008370:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008374:	4b07      	ldr	r3, [pc, #28]	; (8008394 <SCB_EnableICache+0x3c>)
 8008376:	695b      	ldr	r3, [r3, #20]
 8008378:	4a06      	ldr	r2, [pc, #24]	; (8008394 <SCB_EnableICache+0x3c>)
 800837a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800837e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008380:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008384:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8008388:	bf00      	nop
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	e000ed00 	.word	0xe000ed00

08008398 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800839e:	4b1d      	ldr	r3, [pc, #116]	; (8008414 <SCB_EnableDCache+0x7c>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80083a6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80083aa:	4b1a      	ldr	r3, [pc, #104]	; (8008414 <SCB_EnableDCache+0x7c>)
 80083ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083b0:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	0b5b      	lsrs	r3, r3, #13
 80083b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80083ba:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	08db      	lsrs	r3, r3, #3
 80083c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083c4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80083ce:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80083d4:	490f      	ldr	r1, [pc, #60]	; (8008414 <SCB_EnableDCache+0x7c>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	1e5a      	subs	r2, r3, #1
 80083e0:	60ba      	str	r2, [r7, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1ef      	bne.n	80083c6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	1e5a      	subs	r2, r3, #1
 80083ea:	60fa      	str	r2, [r7, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e5      	bne.n	80083bc <SCB_EnableDCache+0x24>
 80083f0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80083f4:	4b07      	ldr	r3, [pc, #28]	; (8008414 <SCB_EnableDCache+0x7c>)
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	4a06      	ldr	r2, [pc, #24]	; (8008414 <SCB_EnableDCache+0x7c>)
 80083fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083fe:	6153      	str	r3, [r2, #20]
 8008400:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008404:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8008408:	bf00      	nop
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	e000ed00 	.word	0xe000ed00

08008418 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800842a:	2320      	movs	r3, #32
 800842c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800842e:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8008432:	e00b      	b.n	800844c <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 8008434:	4a0c      	ldr	r2, [pc, #48]	; (8008468 <SCB_InvalidateDCache_by_Addr+0x50>)
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	4413      	add	r3, r2
 8008442:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2b00      	cmp	r3, #0
 8008450:	dcf0      	bgt.n	8008434 <SCB_InvalidateDCache_by_Addr+0x1c>
 8008452:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008456:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800845a:	bf00      	nop
 800845c:	371c      	adds	r7, #28
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	e000ed00 	.word	0xe000ed00

0800846c <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800847e:	2320      	movs	r3, #32
 8008480:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008482:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8008486:	e00b      	b.n	80084a0 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 8008488:	4a0c      	ldr	r2, [pc, #48]	; (80084bc <SCB_CleanDCache_by_Addr+0x50>)
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	4413      	add	r3, r2
 8008496:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	dcf0      	bgt.n	8008488 <SCB_CleanDCache_by_Addr+0x1c>
 80084a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80084aa:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 80084ae:	bf00      	nop
 80084b0:	371c      	adds	r7, #28
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	e000ed00 	.word	0xe000ed00

080084c0 <HAL_GPIO_EXTI_Callback>:
static void MX_RNG_Init(void);
static void UpdateIWDG(void);
static void UpdateDebugger(void);

inline void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 80084ca:	88fb      	ldrh	r3, [r7, #6]
 80084cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084d0:	d006      	beq.n	80084e0 <HAL_GPIO_EXTI_Callback+0x20>
 80084d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084d6:	d006      	beq.n	80084e6 <HAL_GPIO_EXTI_Callback+0x26>
 80084d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084dc:	d006      	beq.n	80084ec <HAL_GPIO_EXTI_Callback+0x2c>
      break;
    case ADC_STATUS_Pin :
      HAL_TIM_Base_Start_IT(&htim7);
      break;
    default:
      break;
 80084de:	e009      	b.n	80084f4 <HAL_GPIO_EXTI_Callback+0x34>
      csps_exti();
 80084e0:	f7ff f956 	bl	8007790 <csps_exti>
      break;
 80084e4:	e006      	b.n	80084f4 <HAL_GPIO_EXTI_Callback+0x34>
      acis_hall_exti();
 80084e6:	f7f9 fa55 	bl	8001994 <acis_hall_exti>
      break;
 80084ea:	e003      	b.n	80084f4 <HAL_GPIO_EXTI_Callback+0x34>
      HAL_TIM_Base_Start_IT(&htim7);
 80084ec:	4803      	ldr	r0, [pc, #12]	; (80084fc <HAL_GPIO_EXTI_Callback+0x3c>)
 80084ee:	f007 fbdb 	bl	800fca8 <HAL_TIM_Base_Start_IT>
      break;
 80084f2:	bf00      	nop
  }
}
 80084f4:	bf00      	nop
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	20024bb0 	.word	0x20024bb0

08008500 <HAL_TIM_PeriodElapsedCallback>:

inline void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  static uint16_t ms_tim = 0;
  if(htim == &htim4)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a10      	ldr	r2, [pc, #64]	; (800854c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d112      	bne.n	8008536 <HAL_TIM_PeriodElapsedCallback+0x36>
  {
    acis_loop_irq();
 8008510:	f7fa feb2 	bl	8003278 <acis_loop_irq>
    if(++ms_tim >= 500)
 8008514:	4b0e      	ldr	r3, [pc, #56]	; (8008550 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	3301      	adds	r3, #1
 800851a:	b29a      	uxth	r2, r3
 800851c:	4b0c      	ldr	r3, [pc, #48]	; (8008550 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800851e:	801a      	strh	r2, [r3, #0]
 8008520:	4b0b      	ldr	r3, [pc, #44]	; (8008550 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008528:	d30b      	bcc.n	8008542 <HAL_TIM_PeriodElapsedCallback+0x42>
    {
      csps_loop();
 800852a:	f7ff fe43 	bl	80081b4 <csps_loop>
      ms_tim = 0;
 800852e:	4b08      	ldr	r3, [pc, #32]	; (8008550 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8008530:	2200      	movs	r2, #0
 8008532:	801a      	strh	r2, [r3, #0]
  }
  else if(htim == &htim7)
  {
    map_adc_read();
  }
}
 8008534:	e005      	b.n	8008542 <HAL_TIM_PeriodElapsedCallback+0x42>
  else if(htim == &htim7)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a06      	ldr	r2, [pc, #24]	; (8008554 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d101      	bne.n	8008542 <HAL_TIM_PeriodElapsedCallback+0x42>
    map_adc_read();
 800853e:	f000 fea9 	bl	8009294 <map_adc_read>
}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	200247e4 	.word	0x200247e4
 8008550:	20021408 	.word	0x20021408
 8008554:	20024bb0 	.word	0x20024bb0

08008558 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  xDmaTxIrqHandler(huart);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f002 fd9d 	bl	800b0a0 <xDmaTxIrqHandler>
}
 8008566:	bf00      	nop
 8008568:	3708      	adds	r7, #8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  xDmaErIrqHandler(huart);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f002 fdf6 	bl	800b168 <xDmaErIrqHandler>
}
 800857c:	bf00      	nop
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef * hspi)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  if(hspi == &hspi2)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a05      	ldr	r2, [pc, #20]	; (80085a4 <HAL_SPI_ErrorCallback+0x20>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d102      	bne.n	800859a <HAL_SPI_ErrorCallback+0x16>
  {
    SST25_ErrorCallback(hspi);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 ff4b 	bl	8009430 <SST25_ErrorCallback>
  }
}
 800859a:	bf00      	nop
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20024740 	.word	0x20024740

080085a8 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  if(hspi == &hspi2)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a05      	ldr	r2, [pc, #20]	; (80085c8 <HAL_SPI_TxCpltCallback+0x20>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d102      	bne.n	80085be <HAL_SPI_TxCpltCallback+0x16>
  {
    SST25_TxCpltCallback(hspi);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 ff43 	bl	8009444 <SST25_TxCpltCallback>
  }
}
 80085be:	bf00      	nop
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20024740 	.word	0x20024740

080085cc <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  if(hspi == &hspi2)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a05      	ldr	r2, [pc, #20]	; (80085ec <HAL_SPI_RxCpltCallback+0x20>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d102      	bne.n	80085e2 <HAL_SPI_RxCpltCallback+0x16>
  {
    SST25_RxCpltCallback(hspi);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 ff47 	bl	8009470 <SST25_RxCpltCallback>
  }
}
 80085e2:	bf00      	nop
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	20024740 	.word	0x20024740

080085f0 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  if(hspi == &hspi2)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a05      	ldr	r2, [pc, #20]	; (8008610 <HAL_SPI_TxRxCpltCallback+0x20>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d102      	bne.n	8008606 <HAL_SPI_TxRxCpltCallback+0x16>
  {
    SST25_TxRxCpltCallback(hspi);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 ff4b 	bl	800949c <SST25_TxRxCpltCallback>
  }
}
 8008606:	bf00      	nop
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	20024740 	.word	0x20024740

08008614 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef * hadc)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  if(hadc == &hadc1)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a08      	ldr	r2, [pc, #32]	; (8008640 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d109      	bne.n	8008638 <HAL_ADC_ConvHalfCpltCallback+0x24>
  {
    SCB_InvalidateDCache_by_Addr((uint32_t*)&ADC_BUF[0], ADC_BUF_SIZE);
 8008624:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008628:	4806      	ldr	r0, [pc, #24]	; (8008644 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800862a:	f7ff fef5 	bl	8008418 <SCB_InvalidateDCache_by_Addr>
    acis_adc_irq(&ADC_BUF[0], ADC_BUF_SIZE / 2);
 800862e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008632:	4804      	ldr	r0, [pc, #16]	; (8008644 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8008634:	f7f8 fd8e 	bl	8001154 <acis_adc_irq>
  }
}
 8008638:	bf00      	nop
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	200249b8 	.word	0x200249b8
 8008644:	20024c00 	.word	0x20024c00

08008648 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  if(hadc == &hadc1)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a08      	ldr	r2, [pc, #32]	; (8008674 <HAL_ADC_ConvCpltCallback+0x2c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d109      	bne.n	800866c <HAL_ADC_ConvCpltCallback+0x24>
  {
    SCB_InvalidateDCache_by_Addr((uint32_t*)&ADC_BUF[ADC_BUF_SIZE / 2], ADC_BUF_SIZE);
 8008658:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800865c:	4806      	ldr	r0, [pc, #24]	; (8008678 <HAL_ADC_ConvCpltCallback+0x30>)
 800865e:	f7ff fedb 	bl	8008418 <SCB_InvalidateDCache_by_Addr>
    acis_adc_irq(&ADC_BUF[ADC_BUF_SIZE / 2], ADC_BUF_SIZE / 2);
 8008662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008666:	4804      	ldr	r0, [pc, #16]	; (8008678 <HAL_ADC_ConvCpltCallback+0x30>)
 8008668:	f7f8 fd74 	bl	8001154 <acis_adc_irq>
  }
}
 800866c:	bf00      	nop
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	200249b8 	.word	0x200249b8
 8008678:	20025000 	.word	0x20025000

0800867c <main>:


int main(void)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0
  SCB_EnableICache();
 8008680:	f7ff fe6a 	bl	8008358 <SCB_EnableICache>

  SCB_EnableDCache();
 8008684:	f7ff fe88 	bl	8008398 <SCB_EnableDCache>

  HAL_Init();
 8008688:	f003 f95a 	bl	800b940 <HAL_Init>

  SystemClock_Config();
 800868c:	f000 f8c8 	bl	8008820 <SystemClock_Config>

  MX_GPIO_Init();
 8008690:	f000 fc5c 	bl	8008f4c <MX_GPIO_Init>
  MX_DMA_Init();
 8008694:	f000 fc08 	bl	8008ea8 <MX_DMA_Init>
  //MX_IWDG_Init();
  MX_USART1_UART_Init();  //Control Communication
 8008698:	f000 fbce 	bl	8008e38 <MX_USART1_UART_Init>
  MX_SPI2_Init(); //SPI Flash
 800869c:	f000 f9fa 	bl	8008a94 <MX_SPI2_Init>
  MX_ADC1_Init(); //Temperature and battery sensor
 80086a0:	f000 f956 	bl	8008950 <MX_ADC1_Init>
  MX_TIM3_Init(); //Servo PWM
 80086a4:	f000 fa34 	bl	8008b10 <MX_TIM3_Init>
  MX_TIM4_Init(); //ACIS common workout IT
 80086a8:	f000 faa2 	bl	8008bf0 <MX_TIM4_Init>
  MX_TIM7_Init(); //Wait timer for ADC670
 80086ac:	f000 fae2 	bl	8008c74 <MX_TIM7_Init>
  MX_TIM8_Init(); //ADCs trigger strobe
 80086b0:	f000 fb28 	bl	8008d04 <MX_TIM8_Init>
  MX_CRC_Init();
 80086b4:	f000 f9ae 	bl	8008a14 <MX_CRC_Init>
  MX_RNG_Init();
 80086b8:	f000 f9d8 	bl	8008a6c <MX_RNG_Init>
  DelayInit();
 80086bc:	f7ff fde6 	bl	800828c <DelayInit>

  SST25_Init(&hspi2);
 80086c0:	4813      	ldr	r0, [pc, #76]	; (8008710 <main+0x94>)
 80086c2:	f001 faa3 	bl	8009c0c <SST25_Init>

  CRC16_RegisterHardware(&hcrc);
 80086c6:	4813      	ldr	r0, [pc, #76]	; (8008714 <main+0x98>)
 80086c8:	f7ff f812 	bl	80076f0 <CRC16_RegisterHardware>

  xFifosInit();
 80086cc:	f002 fd86 	bl	800b1dc <xFifosInit>
  xGetterInit();
 80086d0:	f002 fdd4 	bl	800b27c <xGetterInit>

  SCB_CleanDCache_by_Addr((uint32_t*)&ADC_BUF[0], ADC_BUF_SIZE*2);
 80086d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086d8:	480f      	ldr	r0, [pc, #60]	; (8008718 <main+0x9c>)
 80086da:	f7ff fec7 	bl	800846c <SCB_CleanDCache_by_Addr>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_BUF, ADC_BUF_SIZE);
 80086de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086e2:	490d      	ldr	r1, [pc, #52]	; (8008718 <main+0x9c>)
 80086e4:	480d      	ldr	r0, [pc, #52]	; (800871c <main+0xa0>)
 80086e6:	f003 f9d5 	bl	800ba94 <HAL_ADC_Start_DMA>


  map_init();
 80086ea:	f000 fdaf 	bl	800924c <map_init>
  acis_init();
 80086ee:	f7f8 fb81 	bl	8000df4 <acis_init>

  HAL_TIM_Base_Start(&htim8);
 80086f2:	480b      	ldr	r0, [pc, #44]	; (8008720 <main+0xa4>)
 80086f4:	f007 faae 	bl	800fc54 <HAL_TIM_Base_Start>

  while (1)
  {
    UpdateIWDG();
 80086f8:	f000 f814 	bl	8008724 <UpdateIWDG>
    UpdateDebugger();
 80086fc:	f000 f834 	bl	8008768 <UpdateDebugger>
    xGetterLoop();
 8008700:	f002 fdf2 	bl	800b2e8 <xGetterLoop>
    acis_loop();
 8008704:	f7fb f888 	bl	8003818 <acis_loop>
    acis_deinitIfNeed();
 8008708:	f7f8 fd02 	bl	8001110 <acis_deinitIfNeed>
    UpdateIWDG();
 800870c:	e7f4      	b.n	80086f8 <main+0x7c>
 800870e:	bf00      	nop
 8008710:	20024740 	.word	0x20024740
 8008714:	20024894 	.word	0x20024894
 8008718:	20024c00 	.word	0x20024c00
 800871c:	200249b8 	.word	0x200249b8
 8008720:	200247a4 	.word	0x200247a4

08008724 <UpdateIWDG>:
  }
}

static inline void UpdateIWDG(void)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
  static uint32_t delay_old = 0;
  uint32_t delay = Delay_Tick;
 800872a:	4b0b      	ldr	r3, [pc, #44]	; (8008758 <UpdateIWDG+0x34>)
 800872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872e:	607b      	str	r3, [r7, #4]
  if(DelayDiff(delay, delay_old) > 1000000)
 8008730:	4b0a      	ldr	r3, [pc, #40]	; (800875c <UpdateIWDG+0x38>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7ff fdf4 	bl	8008324 <DelayDiff>
 800873c:	4602      	mov	r2, r0
 800873e:	4b08      	ldr	r3, [pc, #32]	; (8008760 <UpdateIWDG+0x3c>)
 8008740:	429a      	cmp	r2, r3
 8008742:	d905      	bls.n	8008750 <UpdateIWDG+0x2c>
  {
    delay_old = delay;
 8008744:	4a05      	ldr	r2, [pc, #20]	; (800875c <UpdateIWDG+0x38>)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6013      	str	r3, [r2, #0]
    HAL_IWDG_Refresh(&hiwdg);
 800874a:	4806      	ldr	r0, [pc, #24]	; (8008764 <UpdateIWDG+0x40>)
 800874c:	f004 fdea 	bl	800d324 <HAL_IWDG_Refresh>
  }
}
 8008750:	bf00      	nop
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	40000c00 	.word	0x40000c00
 800875c:	2002140c 	.word	0x2002140c
 8008760:	000f4240 	.word	0x000f4240
 8008764:	20024884 	.word	0x20024884

08008768 <UpdateDebugger>:

static inline void UpdateDebugger(void)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
  static uint8_t was_attached = 0;
  uint8_t attached = IS_DEBUGGER_ATTACHED();
 800876e:	4b2a      	ldr	r3, [pc, #168]	; (8008818 <UpdateDebugger+0xb0>)
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	b2db      	uxtb	r3, r3
 8008774:	f003 0307 	and.w	r3, r3, #7
 8008778:	71fb      	strb	r3, [r7, #7]
  if(was_attached != attached)
 800877a:	4b28      	ldr	r3, [pc, #160]	; (800881c <UpdateDebugger+0xb4>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	79fa      	ldrb	r2, [r7, #7]
 8008780:	429a      	cmp	r2, r3
 8008782:	d042      	beq.n	800880a <UpdateDebugger+0xa2>
  {
    was_attached = attached;
 8008784:	4a25      	ldr	r2, [pc, #148]	; (800881c <UpdateDebugger+0xb4>)
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	7013      	strb	r3, [r2, #0]
    if(attached)
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d01e      	beq.n	80087ce <UpdateDebugger+0x66>
    {
      __HAL_DBGMCU_FREEZE_IWDG();
 8008790:	4b21      	ldr	r3, [pc, #132]	; (8008818 <UpdateDebugger+0xb0>)
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	4a20      	ldr	r2, [pc, #128]	; (8008818 <UpdateDebugger+0xb0>)
 8008796:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800879a:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM4();
 800879c:	4b1e      	ldr	r3, [pc, #120]	; (8008818 <UpdateDebugger+0xb0>)
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	4a1d      	ldr	r2, [pc, #116]	; (8008818 <UpdateDebugger+0xb0>)
 80087a2:	f043 0304 	orr.w	r3, r3, #4
 80087a6:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM5();
 80087a8:	4b1b      	ldr	r3, [pc, #108]	; (8008818 <UpdateDebugger+0xb0>)
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	4a1a      	ldr	r2, [pc, #104]	; (8008818 <UpdateDebugger+0xb0>)
 80087ae:	f043 0308 	orr.w	r3, r3, #8
 80087b2:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM7();
 80087b4:	4b18      	ldr	r3, [pc, #96]	; (8008818 <UpdateDebugger+0xb0>)
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	4a17      	ldr	r2, [pc, #92]	; (8008818 <UpdateDebugger+0xb0>)
 80087ba:	f043 0320 	orr.w	r3, r3, #32
 80087be:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM8();
 80087c0:	4b15      	ldr	r3, [pc, #84]	; (8008818 <UpdateDebugger+0xb0>)
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	4a14      	ldr	r2, [pc, #80]	; (8008818 <UpdateDebugger+0xb0>)
 80087c6:	f043 0302 	orr.w	r3, r3, #2
 80087ca:	60d3      	str	r3, [r2, #12]
      __HAL_DBGMCU_UNFREEZE_TIM5();
      __HAL_DBGMCU_UNFREEZE_TIM7();
      __HAL_DBGMCU_UNFREEZE_TIM8();
    }
  }
}
 80087cc:	e01d      	b.n	800880a <UpdateDebugger+0xa2>
      __HAL_DBGMCU_UNFREEZE_IWDG();
 80087ce:	4b12      	ldr	r3, [pc, #72]	; (8008818 <UpdateDebugger+0xb0>)
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	4a11      	ldr	r2, [pc, #68]	; (8008818 <UpdateDebugger+0xb0>)
 80087d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087d8:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM4();
 80087da:	4b0f      	ldr	r3, [pc, #60]	; (8008818 <UpdateDebugger+0xb0>)
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	4a0e      	ldr	r2, [pc, #56]	; (8008818 <UpdateDebugger+0xb0>)
 80087e0:	f023 0304 	bic.w	r3, r3, #4
 80087e4:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM5();
 80087e6:	4b0c      	ldr	r3, [pc, #48]	; (8008818 <UpdateDebugger+0xb0>)
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	4a0b      	ldr	r2, [pc, #44]	; (8008818 <UpdateDebugger+0xb0>)
 80087ec:	f023 0308 	bic.w	r3, r3, #8
 80087f0:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM7();
 80087f2:	4b09      	ldr	r3, [pc, #36]	; (8008818 <UpdateDebugger+0xb0>)
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	4a08      	ldr	r2, [pc, #32]	; (8008818 <UpdateDebugger+0xb0>)
 80087f8:	f023 0320 	bic.w	r3, r3, #32
 80087fc:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM8();
 80087fe:	4b06      	ldr	r3, [pc, #24]	; (8008818 <UpdateDebugger+0xb0>)
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	4a05      	ldr	r2, [pc, #20]	; (8008818 <UpdateDebugger+0xb0>)
 8008804:	f023 0302 	bic.w	r3, r3, #2
 8008808:	60d3      	str	r3, [r2, #12]
}
 800880a:	bf00      	nop
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	e0042000 	.word	0xe0042000
 800881c:	20021410 	.word	0x20021410

08008820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b0b4      	sub	sp, #208	; 0xd0
 8008824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008826:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800882a:	2230      	movs	r2, #48	; 0x30
 800882c:	2100      	movs	r1, #0
 800882e:	4618      	mov	r0, r3
 8008830:	f009 fadf 	bl	8011df2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008834:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008838:	2200      	movs	r2, #0
 800883a:	601a      	str	r2, [r3, #0]
 800883c:	605a      	str	r2, [r3, #4]
 800883e:	609a      	str	r2, [r3, #8]
 8008840:	60da      	str	r2, [r3, #12]
 8008842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008844:	f107 030c 	add.w	r3, r7, #12
 8008848:	2280      	movs	r2, #128	; 0x80
 800884a:	2100      	movs	r1, #0
 800884c:	4618      	mov	r0, r3
 800884e:	f009 fad0 	bl	8011df2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008852:	4b3c      	ldr	r3, [pc, #240]	; (8008944 <SystemClock_Config+0x124>)
 8008854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008856:	4a3b      	ldr	r2, [pc, #236]	; (8008944 <SystemClock_Config+0x124>)
 8008858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800885c:	6413      	str	r3, [r2, #64]	; 0x40
 800885e:	4b39      	ldr	r3, [pc, #228]	; (8008944 <SystemClock_Config+0x124>)
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008866:	60bb      	str	r3, [r7, #8]
 8008868:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800886a:	4b37      	ldr	r3, [pc, #220]	; (8008948 <SystemClock_Config+0x128>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a36      	ldr	r2, [pc, #216]	; (8008948 <SystemClock_Config+0x128>)
 8008870:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008874:	6013      	str	r3, [r2, #0]
 8008876:	4b34      	ldr	r3, [pc, #208]	; (8008948 <SystemClock_Config+0x128>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800887e:	607b      	str	r3, [r7, #4]
 8008880:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8008882:	230a      	movs	r3, #10
 8008884:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008888:	2301      	movs	r3, #1
 800888a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = 7;
 800888e:	2307      	movs	r3, #7
 8008890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008894:	2301      	movs	r3, #1
 8008896:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800889a:	2302      	movs	r3, #2
 800889c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80088a0:	2300      	movs	r3, #0
 80088a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80088a6:	2308      	movs	r3, #8
 80088a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80088ac:	23d8      	movs	r3, #216	; 0xd8
 80088ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80088b2:	2302      	movs	r3, #2
 80088b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80088b8:	2309      	movs	r3, #9
 80088ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80088be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80088c2:	4618      	mov	r0, r3
 80088c4:	f004 fd8e 	bl	800d3e4 <HAL_RCC_OscConfig>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d001      	beq.n	80088d2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80088ce:	f000 fcb9 	bl	8009244 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80088d2:	f004 fd37 	bl	800d344 <HAL_PWREx_EnableOverDrive>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d001      	beq.n	80088e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80088dc:	f000 fcb2 	bl	8009244 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80088e0:	230f      	movs	r3, #15
 80088e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80088e6:	2302      	movs	r3, #2
 80088e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80088ec:	2300      	movs	r3, #0
 80088ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80088f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80088f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80088fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008902:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008906:	2107      	movs	r1, #7
 8008908:	4618      	mov	r0, r3
 800890a:	f005 f80f 	bl	800d92c <HAL_RCC_ClockConfig>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8008914:	f000 fc96 	bl	8009244 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_CLK48;
 8008918:	4b0c      	ldr	r3, [pc, #48]	; (800894c <SystemClock_Config+0x12c>)
 800891a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800891c:	2300      	movs	r3, #0
 800891e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8008920:	2300      	movs	r3, #0
 8008922:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008926:	f107 030c 	add.w	r3, r7, #12
 800892a:	4618      	mov	r0, r3
 800892c:	f005 f9d0 	bl	800dcd0 <HAL_RCCEx_PeriphCLKConfig>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8008936:	f000 fc85 	bl	8009244 <Error_Handler>
  }
}
 800893a:	bf00      	nop
 800893c:	37d0      	adds	r7, #208	; 0xd0
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	40023800 	.word	0x40023800
 8008948:	40007000 	.word	0x40007000
 800894c:	00200040 	.word	0x00200040

08008950 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008956:	463b      	mov	r3, r7
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]
 800895c:	605a      	str	r2, [r3, #4]
 800895e:	609a      	str	r2, [r3, #8]
 8008960:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008962:	4b2a      	ldr	r3, [pc, #168]	; (8008a0c <MX_ADC1_Init+0xbc>)
 8008964:	4a2a      	ldr	r2, [pc, #168]	; (8008a10 <MX_ADC1_Init+0xc0>)
 8008966:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008968:	4b28      	ldr	r3, [pc, #160]	; (8008a0c <MX_ADC1_Init+0xbc>)
 800896a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800896e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008970:	4b26      	ldr	r3, [pc, #152]	; (8008a0c <MX_ADC1_Init+0xbc>)
 8008972:	2200      	movs	r2, #0
 8008974:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008976:	4b25      	ldr	r3, [pc, #148]	; (8008a0c <MX_ADC1_Init+0xbc>)
 8008978:	2201      	movs	r2, #1
 800897a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800897c:	4b23      	ldr	r3, [pc, #140]	; (8008a0c <MX_ADC1_Init+0xbc>)
 800897e:	2200      	movs	r2, #0
 8008980:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008982:	4b22      	ldr	r3, [pc, #136]	; (8008a0c <MX_ADC1_Init+0xbc>)
 8008984:	2200      	movs	r2, #0
 8008986:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800898a:	4b20      	ldr	r3, [pc, #128]	; (8008a0c <MX_ADC1_Init+0xbc>)
 800898c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008990:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8008992:	4b1e      	ldr	r3, [pc, #120]	; (8008a0c <MX_ADC1_Init+0xbc>)
 8008994:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8008998:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800899a:	4b1c      	ldr	r3, [pc, #112]	; (8008a0c <MX_ADC1_Init+0xbc>)
 800899c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80089a2:	4b1a      	ldr	r3, [pc, #104]	; (8008a0c <MX_ADC1_Init+0xbc>)
 80089a4:	2202      	movs	r2, #2
 80089a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80089a8:	4b18      	ldr	r3, [pc, #96]	; (8008a0c <MX_ADC1_Init+0xbc>)
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80089b0:	4b16      	ldr	r3, [pc, #88]	; (8008a0c <MX_ADC1_Init+0xbc>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80089b6:	4815      	ldr	r0, [pc, #84]	; (8008a0c <MX_ADC1_Init+0xbc>)
 80089b8:	f003 f828 	bl	800ba0c <HAL_ADC_Init>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80089c2:	f000 fc3f 	bl	8009244 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80089c6:	230c      	movs	r3, #12
 80089c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80089ca:	2301      	movs	r3, #1
 80089cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80089ce:	2303      	movs	r3, #3
 80089d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80089d2:	463b      	mov	r3, r7
 80089d4:	4619      	mov	r1, r3
 80089d6:	480d      	ldr	r0, [pc, #52]	; (8008a0c <MX_ADC1_Init+0xbc>)
 80089d8:	f003 f954 	bl	800bc84 <HAL_ADC_ConfigChannel>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80089e2:	f000 fc2f 	bl	8009244 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80089e6:	230d      	movs	r3, #13
 80089e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80089ea:	2302      	movs	r3, #2
 80089ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80089ee:	463b      	mov	r3, r7
 80089f0:	4619      	mov	r1, r3
 80089f2:	4806      	ldr	r0, [pc, #24]	; (8008a0c <MX_ADC1_Init+0xbc>)
 80089f4:	f003 f946 	bl	800bc84 <HAL_ADC_ConfigChannel>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80089fe:	f000 fc21 	bl	8009244 <Error_Handler>
  */
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	200249b8 	.word	0x200249b8
 8008a10:	40012000 	.word	0x40012000

08008a14 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8008a18:	4b12      	ldr	r3, [pc, #72]	; (8008a64 <MX_CRC_Init+0x50>)
 8008a1a:	4a13      	ldr	r2, [pc, #76]	; (8008a68 <MX_CRC_Init+0x54>)
 8008a1c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8008a1e:	4b11      	ldr	r3, [pc, #68]	; (8008a64 <MX_CRC_Init+0x50>)
 8008a20:	2201      	movs	r2, #1
 8008a22:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8008a24:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <MX_CRC_Init+0x50>)
 8008a26:	2201      	movs	r2, #1
 8008a28:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = CRC_POLY;
 8008a2a:	4b0e      	ldr	r3, [pc, #56]	; (8008a64 <MX_CRC_Init+0x50>)
 8008a2c:	f24a 0201 	movw	r2, #40961	; 0xa001
 8008a30:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8008a32:	4b0c      	ldr	r3, [pc, #48]	; (8008a64 <MX_CRC_Init+0x50>)
 8008a34:	2208      	movs	r2, #8
 8008a36:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8008a38:	4b0a      	ldr	r3, [pc, #40]	; (8008a64 <MX_CRC_Init+0x50>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8008a3e:	4b09      	ldr	r3, [pc, #36]	; (8008a64 <MX_CRC_Init+0x50>)
 8008a40:	2220      	movs	r2, #32
 8008a42:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8008a44:	4b07      	ldr	r3, [pc, #28]	; (8008a64 <MX_CRC_Init+0x50>)
 8008a46:	2280      	movs	r2, #128	; 0x80
 8008a48:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8008a4a:	4b06      	ldr	r3, [pc, #24]	; (8008a64 <MX_CRC_Init+0x50>)
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008a50:	4804      	ldr	r0, [pc, #16]	; (8008a64 <MX_CRC_Init+0x50>)
 8008a52:	f003 fcef 	bl	800c434 <HAL_CRC_Init>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8008a5c:	f000 fbf2 	bl	8009244 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8008a60:	bf00      	nop
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	20024894 	.word	0x20024894
 8008a68:	40023000 	.word	0x40023000

08008a6c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8008a70:	4b06      	ldr	r3, [pc, #24]	; (8008a8c <MX_RNG_Init+0x20>)
 8008a72:	4a07      	ldr	r2, [pc, #28]	; (8008a90 <MX_RNG_Init+0x24>)
 8008a74:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8008a76:	4805      	ldr	r0, [pc, #20]	; (8008a8c <MX_RNG_Init+0x20>)
 8008a78:	f005 fc72 	bl	800e360 <HAL_RNG_Init>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8008a82:	f000 fbdf 	bl	8009244 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8008a86:	bf00      	nop
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20024b40 	.word	0x20024b40
 8008a90:	50060800 	.word	0x50060800

08008a94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8008a98:	4b1b      	ldr	r3, [pc, #108]	; (8008b08 <MX_SPI2_Init+0x74>)
 8008a9a:	4a1c      	ldr	r2, [pc, #112]	; (8008b0c <MX_SPI2_Init+0x78>)
 8008a9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008a9e:	4b1a      	ldr	r3, [pc, #104]	; (8008b08 <MX_SPI2_Init+0x74>)
 8008aa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008aa4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008aa6:	4b18      	ldr	r3, [pc, #96]	; (8008b08 <MX_SPI2_Init+0x74>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008aac:	4b16      	ldr	r3, [pc, #88]	; (8008b08 <MX_SPI2_Init+0x74>)
 8008aae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008ab2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ab4:	4b14      	ldr	r3, [pc, #80]	; (8008b08 <MX_SPI2_Init+0x74>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008aba:	4b13      	ldr	r3, [pc, #76]	; (8008b08 <MX_SPI2_Init+0x74>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008ac0:	4b11      	ldr	r3, [pc, #68]	; (8008b08 <MX_SPI2_Init+0x74>)
 8008ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ac6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ac8:	4b0f      	ldr	r3, [pc, #60]	; (8008b08 <MX_SPI2_Init+0x74>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008ace:	4b0e      	ldr	r3, [pc, #56]	; (8008b08 <MX_SPI2_Init+0x74>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008ad4:	4b0c      	ldr	r3, [pc, #48]	; (8008b08 <MX_SPI2_Init+0x74>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ada:	4b0b      	ldr	r3, [pc, #44]	; (8008b08 <MX_SPI2_Init+0x74>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8008ae0:	4b09      	ldr	r3, [pc, #36]	; (8008b08 <MX_SPI2_Init+0x74>)
 8008ae2:	2207      	movs	r2, #7
 8008ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008ae6:	4b08      	ldr	r3, [pc, #32]	; (8008b08 <MX_SPI2_Init+0x74>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008aec:	4b06      	ldr	r3, [pc, #24]	; (8008b08 <MX_SPI2_Init+0x74>)
 8008aee:	2208      	movs	r2, #8
 8008af0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008af2:	4805      	ldr	r0, [pc, #20]	; (8008b08 <MX_SPI2_Init+0x74>)
 8008af4:	f005 fc5e 	bl	800e3b4 <HAL_SPI_Init>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d001      	beq.n	8008b02 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8008afe:	f000 fba1 	bl	8009244 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8008b02:	bf00      	nop
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20024740 	.word	0x20024740
 8008b0c:	40003800 	.word	0x40003800

08008b10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b08a      	sub	sp, #40	; 0x28
 8008b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b16:	f107 031c 	add.w	r3, r7, #28
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	601a      	str	r2, [r3, #0]
 8008b1e:	605a      	str	r2, [r3, #4]
 8008b20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008b22:	463b      	mov	r3, r7
 8008b24:	2200      	movs	r2, #0
 8008b26:	601a      	str	r2, [r3, #0]
 8008b28:	605a      	str	r2, [r3, #4]
 8008b2a:	609a      	str	r2, [r3, #8]
 8008b2c:	60da      	str	r2, [r3, #12]
 8008b2e:	611a      	str	r2, [r3, #16]
 8008b30:	615a      	str	r2, [r3, #20]
 8008b32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008b34:	4b2b      	ldr	r3, [pc, #172]	; (8008be4 <MX_TIM3_Init+0xd4>)
 8008b36:	4a2c      	ldr	r2, [pc, #176]	; (8008be8 <MX_TIM3_Init+0xd8>)
 8008b38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 50 / 5120) - 1; //This is to set prescaler to 1 MHz
 8008b3a:	f005 f8a1 	bl	800dc80 <HAL_RCC_GetPCLK1Freq>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	4a2a      	ldr	r2, [pc, #168]	; (8008bec <MX_TIM3_Init+0xdc>)
 8008b44:	fba2 2303 	umull	r2, r3, r2, r3
 8008b48:	0b9b      	lsrs	r3, r3, #14
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	4a25      	ldr	r2, [pc, #148]	; (8008be4 <MX_TIM3_Init+0xd4>)
 8008b4e:	6053      	str	r3, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b50:	4b24      	ldr	r3, [pc, #144]	; (8008be4 <MX_TIM3_Init+0xd4>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5119;
 8008b56:	4b23      	ldr	r3, [pc, #140]	; (8008be4 <MX_TIM3_Init+0xd4>)
 8008b58:	f241 32ff 	movw	r2, #5119	; 0x13ff
 8008b5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b5e:	4b21      	ldr	r3, [pc, #132]	; (8008be4 <MX_TIM3_Init+0xd4>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b64:	4b1f      	ldr	r3, [pc, #124]	; (8008be4 <MX_TIM3_Init+0xd4>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008b6a:	481e      	ldr	r0, [pc, #120]	; (8008be4 <MX_TIM3_Init+0xd4>)
 8008b6c:	f007 f8c6 	bl	800fcfc <HAL_TIM_PWM_Init>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d001      	beq.n	8008b7a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8008b76:	f000 fb65 	bl	8009244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008b82:	f107 031c 	add.w	r3, r7, #28
 8008b86:	4619      	mov	r1, r3
 8008b88:	4816      	ldr	r0, [pc, #88]	; (8008be4 <MX_TIM3_Init+0xd4>)
 8008b8a:	f008 f809 	bl	8010ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8008b94:	f000 fb56 	bl	8009244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008b98:	2360      	movs	r3, #96	; 0x60
 8008b9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 256;
 8008b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ba0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008baa:	463b      	mov	r3, r7
 8008bac:	2208      	movs	r2, #8
 8008bae:	4619      	mov	r1, r3
 8008bb0:	480c      	ldr	r0, [pc, #48]	; (8008be4 <MX_TIM3_Init+0xd4>)
 8008bb2:	f007 fa33 	bl	801001c <HAL_TIM_PWM_ConfigChannel>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8008bbc:	f000 fb42 	bl	8009244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008bc0:	463b      	mov	r3, r7
 8008bc2:	220c      	movs	r2, #12
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4807      	ldr	r0, [pc, #28]	; (8008be4 <MX_TIM3_Init+0xd4>)
 8008bc8:	f007 fa28 	bl	801001c <HAL_TIM_PWM_ConfigChannel>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8008bd2:	f000 fb37 	bl	8009244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008bd6:	4803      	ldr	r0, [pc, #12]	; (8008be4 <MX_TIM3_Init+0xd4>)
 8008bd8:	f001 fab2 	bl	800a140 <HAL_TIM_MspPostInit>

}
 8008bdc:	bf00      	nop
 8008bde:	3728      	adds	r7, #40	; 0x28
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	20024918 	.word	0x20024918
 8008be8:	40000400 	.word	0x40000400
 8008bec:	10624dd3 	.word	0x10624dd3

08008bf0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008bf6:	463b      	mov	r3, r7
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	605a      	str	r2, [r3, #4]
 8008bfe:	609a      	str	r2, [r3, #8]
 8008c00:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8008c02:	4b19      	ldr	r3, [pc, #100]	; (8008c68 <MX_TIM4_Init+0x78>)
 8008c04:	4a19      	ldr	r2, [pc, #100]	; (8008c6c <MX_TIM4_Init+0x7c>)
 8008c06:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) - 1; //This is to set prescaler to 1 MHz
 8008c08:	f005 f83a 	bl	800dc80 <HAL_RCC_GetPCLK1Freq>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	4a17      	ldr	r2, [pc, #92]	; (8008c70 <MX_TIM4_Init+0x80>)
 8008c12:	fba2 2303 	umull	r2, r3, r2, r3
 8008c16:	0c9b      	lsrs	r3, r3, #18
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	4a13      	ldr	r2, [pc, #76]	; (8008c68 <MX_TIM4_Init+0x78>)
 8008c1c:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c1e:	4b12      	ldr	r3, [pc, #72]	; (8008c68 <MX_TIM4_Init+0x78>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 14;
 8008c24:	4b10      	ldr	r3, [pc, #64]	; (8008c68 <MX_TIM4_Init+0x78>)
 8008c26:	220e      	movs	r2, #14
 8008c28:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c2a:	4b0f      	ldr	r3, [pc, #60]	; (8008c68 <MX_TIM4_Init+0x78>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c30:	4b0d      	ldr	r3, [pc, #52]	; (8008c68 <MX_TIM4_Init+0x78>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008c36:	480c      	ldr	r0, [pc, #48]	; (8008c68 <MX_TIM4_Init+0x78>)
 8008c38:	f006 ffe1 	bl	800fbfe <HAL_TIM_Base_Init>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8008c42:	f000 faff 	bl	8009244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c4a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008c4c:	463b      	mov	r3, r7
 8008c4e:	4619      	mov	r1, r3
 8008c50:	4805      	ldr	r0, [pc, #20]	; (8008c68 <MX_TIM4_Init+0x78>)
 8008c52:	f007 fafb 	bl	801024c <HAL_TIM_ConfigClockSource>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8008c5c:	f000 faf2 	bl	8009244 <Error_Handler>
  }

}
 8008c60:	bf00      	nop
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	200247e4 	.word	0x200247e4
 8008c6c:	40000800 	.word	0x40000800
 8008c70:	431bde83 	.word	0x431bde83

08008c74 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c7a:	1d3b      	adds	r3, r7, #4
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	601a      	str	r2, [r3, #0]
 8008c80:	605a      	str	r2, [r3, #4]
 8008c82:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8008c84:	4b1c      	ldr	r3, [pc, #112]	; (8008cf8 <MX_TIM7_Init+0x84>)
 8008c86:	4a1d      	ldr	r2, [pc, #116]	; (8008cfc <MX_TIM7_Init+0x88>)
 8008c88:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8008c8a:	4b1b      	ldr	r3, [pc, #108]	; (8008cf8 <MX_TIM7_Init+0x84>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c90:	4b19      	ldr	r3, [pc, #100]	; (8008cf8 <MX_TIM7_Init+0x84>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) / 2 - 1; //This is to set period to 2 MHz;
 8008c96:	f004 fff3 	bl	800dc80 <HAL_RCC_GetPCLK1Freq>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	005b      	lsls	r3, r3, #1
 8008c9e:	4a18      	ldr	r2, [pc, #96]	; (8008d00 <MX_TIM7_Init+0x8c>)
 8008ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca4:	0cdb      	lsrs	r3, r3, #19
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	4a13      	ldr	r2, [pc, #76]	; (8008cf8 <MX_TIM7_Init+0x84>)
 8008caa:	60d3      	str	r3, [r2, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008cac:	4b12      	ldr	r3, [pc, #72]	; (8008cf8 <MX_TIM7_Init+0x84>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8008cb2:	4811      	ldr	r0, [pc, #68]	; (8008cf8 <MX_TIM7_Init+0x84>)
 8008cb4:	f006 ffa3 	bl	800fbfe <HAL_TIM_Base_Init>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <MX_TIM7_Init+0x4e>
  {
    Error_Handler();
 8008cbe:	f000 fac1 	bl	8009244 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 8008cc2:	2108      	movs	r1, #8
 8008cc4:	480c      	ldr	r0, [pc, #48]	; (8008cf8 <MX_TIM7_Init+0x84>)
 8008cc6:	f007 f844 	bl	800fd52 <HAL_TIM_OnePulse_Init>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <MX_TIM7_Init+0x60>
  {
    Error_Handler();
 8008cd0:	f000 fab8 	bl	8009244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008cd4:	2320      	movs	r3, #32
 8008cd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8008cdc:	1d3b      	adds	r3, r7, #4
 8008cde:	4619      	mov	r1, r3
 8008ce0:	4805      	ldr	r0, [pc, #20]	; (8008cf8 <MX_TIM7_Init+0x84>)
 8008ce2:	f007 ff5d 	bl	8010ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <MX_TIM7_Init+0x7c>
  {
    Error_Handler();
 8008cec:	f000 faaa 	bl	8009244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8008cf0:	bf00      	nop
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	20024bb0 	.word	0x20024bb0
 8008cfc:	40001400 	.word	0x40001400
 8008d00:	431bde83 	.word	0x431bde83

08008d04 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b096      	sub	sp, #88	; 0x58
 8008d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008d0e:	2200      	movs	r2, #0
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	605a      	str	r2, [r3, #4]
 8008d14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008d16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	605a      	str	r2, [r3, #4]
 8008d20:	609a      	str	r2, [r3, #8]
 8008d22:	60da      	str	r2, [r3, #12]
 8008d24:	611a      	str	r2, [r3, #16]
 8008d26:	615a      	str	r2, [r3, #20]
 8008d28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008d2a:	1d3b      	adds	r3, r7, #4
 8008d2c:	222c      	movs	r2, #44	; 0x2c
 8008d2e:	2100      	movs	r1, #0
 8008d30:	4618      	mov	r0, r3
 8008d32:	f009 f85e 	bl	8011df2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008d36:	4b3d      	ldr	r3, [pc, #244]	; (8008e2c <MX_TIM8_Init+0x128>)
 8008d38:	4a3d      	ldr	r2, [pc, #244]	; (8008e30 <MX_TIM8_Init+0x12c>)
 8008d3a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = (HAL_RCC_GetPCLK2Freq() * 2 / 1000000) - 1; //This is to set prescaler to 1 MHz
 8008d3c:	f004 ffb4 	bl	800dca8 <HAL_RCC_GetPCLK2Freq>
 8008d40:	4603      	mov	r3, r0
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	4a3b      	ldr	r2, [pc, #236]	; (8008e34 <MX_TIM8_Init+0x130>)
 8008d46:	fba2 2303 	umull	r2, r3, r2, r3
 8008d4a:	0c9b      	lsrs	r3, r3, #18
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	4a37      	ldr	r2, [pc, #220]	; (8008e2c <MX_TIM8_Init+0x128>)
 8008d50:	6053      	str	r3, [r2, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d52:	4b36      	ldr	r3, [pc, #216]	; (8008e2c <MX_TIM8_Init+0x128>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8008d58:	4b34      	ldr	r3, [pc, #208]	; (8008e2c <MX_TIM8_Init+0x128>)
 8008d5a:	2231      	movs	r2, #49	; 0x31
 8008d5c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d5e:	4b33      	ldr	r3, [pc, #204]	; (8008e2c <MX_TIM8_Init+0x128>)
 8008d60:	2200      	movs	r2, #0
 8008d62:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008d64:	4b31      	ldr	r3, [pc, #196]	; (8008e2c <MX_TIM8_Init+0x128>)
 8008d66:	2200      	movs	r2, #0
 8008d68:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008d6a:	4b30      	ldr	r3, [pc, #192]	; (8008e2c <MX_TIM8_Init+0x128>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8008d70:	482e      	ldr	r0, [pc, #184]	; (8008e2c <MX_TIM8_Init+0x128>)
 8008d72:	f006 ffc3 	bl	800fcfc <HAL_TIM_PWM_Init>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8008d7c:	f000 fa62 	bl	8009244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008d80:	2320      	movs	r3, #32
 8008d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008d84:	2300      	movs	r3, #0
 8008d86:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008d8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008d90:	4619      	mov	r1, r3
 8008d92:	4826      	ldr	r0, [pc, #152]	; (8008e2c <MX_TIM8_Init+0x128>)
 8008d94:	f007 ff04 	bl	8010ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8008d9e:	f000 fa51 	bl	8009244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008da2:	2360      	movs	r3, #96	; 0x60
 8008da4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1;
 8008da6:	2301      	movs	r3, #1
 8008da8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008daa:	2300      	movs	r3, #0
 8008dac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8008dae:	2308      	movs	r3, #8
 8008db0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008db2:	2300      	movs	r3, #0
 8008db4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008db6:	2300      	movs	r3, #0
 8008db8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8008dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dbe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008dc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008dc4:	2208      	movs	r2, #8
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	4818      	ldr	r0, [pc, #96]	; (8008e2c <MX_TIM8_Init+0x128>)
 8008dca:	f007 f927 	bl	801001c <HAL_TIM_PWM_ConfigChannel>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 8008dd4:	f000 fa36 	bl	8009244 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008de8:	2300      	movs	r3, #0
 8008dea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008df0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008df6:	2300      	movs	r3, #0
 8008df8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008dfe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008e08:	1d3b      	adds	r3, r7, #4
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4807      	ldr	r0, [pc, #28]	; (8008e2c <MX_TIM8_Init+0x128>)
 8008e0e:	f007 ff55 	bl	8010cbc <HAL_TIMEx_ConfigBreakDeadTime>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8008e18:	f000 fa14 	bl	8009244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8008e1c:	4803      	ldr	r0, [pc, #12]	; (8008e2c <MX_TIM8_Init+0x128>)
 8008e1e:	f001 f98f 	bl	800a140 <HAL_TIM_MspPostInit>

}
 8008e22:	bf00      	nop
 8008e24:	3758      	adds	r7, #88	; 0x58
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	200247a4 	.word	0x200247a4
 8008e30:	40010400 	.word	0x40010400
 8008e34:	431bde83 	.word	0x431bde83

08008e38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008e3c:	4b17      	ldr	r3, [pc, #92]	; (8008e9c <MX_USART1_UART_Init+0x64>)
 8008e3e:	4a18      	ldr	r2, [pc, #96]	; (8008ea0 <MX_USART1_UART_Init+0x68>)
 8008e40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3375000;
 8008e42:	4b16      	ldr	r3, [pc, #88]	; (8008e9c <MX_USART1_UART_Init+0x64>)
 8008e44:	4a17      	ldr	r2, [pc, #92]	; (8008ea4 <MX_USART1_UART_Init+0x6c>)
 8008e46:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008e48:	4b14      	ldr	r3, [pc, #80]	; (8008e9c <MX_USART1_UART_Init+0x64>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008e4e:	4b13      	ldr	r3, [pc, #76]	; (8008e9c <MX_USART1_UART_Init+0x64>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008e54:	4b11      	ldr	r3, [pc, #68]	; (8008e9c <MX_USART1_UART_Init+0x64>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008e5a:	4b10      	ldr	r3, [pc, #64]	; (8008e9c <MX_USART1_UART_Init+0x64>)
 8008e5c:	220c      	movs	r2, #12
 8008e5e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e60:	4b0e      	ldr	r3, [pc, #56]	; (8008e9c <MX_USART1_UART_Init+0x64>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008e66:	4b0d      	ldr	r3, [pc, #52]	; (8008e9c <MX_USART1_UART_Init+0x64>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008e6c:	4b0b      	ldr	r3, [pc, #44]	; (8008e9c <MX_USART1_UART_Init+0x64>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8008e72:	4b0a      	ldr	r3, [pc, #40]	; (8008e9c <MX_USART1_UART_Init+0x64>)
 8008e74:	2240      	movs	r2, #64	; 0x40
 8008e76:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8008e78:	4b08      	ldr	r3, [pc, #32]	; (8008e9c <MX_USART1_UART_Init+0x64>)
 8008e7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME;
 8008e80:	4b06      	ldr	r3, [pc, #24]	; (8008e9c <MX_USART1_UART_Init+0x64>)
 8008e82:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8008e86:	645a      	str	r2, [r3, #68]	; 0x44
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008e88:	4804      	ldr	r0, [pc, #16]	; (8008e9c <MX_USART1_UART_Init+0x64>)
 8008e8a:	f007 ffd8 	bl	8010e3e <HAL_UART_Init>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8008e94:	f000 f9d6 	bl	8009244 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008e98:	bf00      	nop
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	20024a60 	.word	0x20024a60
 8008ea0:	40011000 	.word	0x40011000
 8008ea4:	00337f98 	.word	0x00337f98

08008ea8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008eae:	4b26      	ldr	r3, [pc, #152]	; (8008f48 <MX_DMA_Init+0xa0>)
 8008eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb2:	4a25      	ldr	r2, [pc, #148]	; (8008f48 <MX_DMA_Init+0xa0>)
 8008eb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8008eba:	4b23      	ldr	r3, [pc, #140]	; (8008f48 <MX_DMA_Init+0xa0>)
 8008ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ec2:	607b      	str	r3, [r7, #4]
 8008ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008ec6:	4b20      	ldr	r3, [pc, #128]	; (8008f48 <MX_DMA_Init+0xa0>)
 8008ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eca:	4a1f      	ldr	r2, [pc, #124]	; (8008f48 <MX_DMA_Init+0xa0>)
 8008ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ed2:	4b1d      	ldr	r3, [pc, #116]	; (8008f48 <MX_DMA_Init+0xa0>)
 8008ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008eda:	603b      	str	r3, [r7, #0]
 8008edc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0); //TIM7_UP
 8008ede:	2200      	movs	r2, #0
 8008ee0:	2105      	movs	r1, #5
 8008ee2:	200d      	movs	r0, #13
 8008ee4:	f003 fa6f 	bl	800c3c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8008ee8:	200d      	movs	r0, #13
 8008eea:	f003 fa88 	bl	800c3fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 15, 0); //SPI2_RX
 8008eee:	2200      	movs	r2, #0
 8008ef0:	210f      	movs	r1, #15
 8008ef2:	200e      	movs	r0, #14
 8008ef4:	f003 fa67 	bl	800c3c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8008ef8:	200e      	movs	r0, #14
 8008efa:	f003 fa80 	bl	800c3fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 15, 0); //SPI2_TX
 8008efe:	2200      	movs	r2, #0
 8008f00:	210f      	movs	r1, #15
 8008f02:	200f      	movs	r0, #15
 8008f04:	f003 fa5f 	bl	800c3c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8008f08:	200f      	movs	r0, #15
 8008f0a:	f003 fa78 	bl	800c3fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 0); //ADC1
 8008f0e:	2200      	movs	r2, #0
 8008f10:	210a      	movs	r1, #10
 8008f12:	2038      	movs	r0, #56	; 0x38
 8008f14:	f003 fa57 	bl	800c3c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8008f18:	2038      	movs	r0, #56	; 0x38
 8008f1a:	f003 fa70 	bl	800c3fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 8, 0); //USART1_RX
 8008f1e:	2200      	movs	r2, #0
 8008f20:	2108      	movs	r1, #8
 8008f22:	203a      	movs	r0, #58	; 0x3a
 8008f24:	f003 fa4f 	bl	800c3c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8008f28:	203a      	movs	r0, #58	; 0x3a
 8008f2a:	f003 fa68 	bl	800c3fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 8, 0); //USART1_TX
 8008f2e:	2200      	movs	r2, #0
 8008f30:	2108      	movs	r1, #8
 8008f32:	2046      	movs	r0, #70	; 0x46
 8008f34:	f003 fa47 	bl	800c3c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8008f38:	2046      	movs	r0, #70	; 0x46
 8008f3a:	f003 fa60 	bl	800c3fe <HAL_NVIC_EnableIRQ>

}
 8008f3e:	bf00      	nop
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	40023800 	.word	0x40023800

08008f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b08a      	sub	sp, #40	; 0x28
 8008f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f52:	f107 0314 	add.w	r3, r7, #20
 8008f56:	2200      	movs	r2, #0
 8008f58:	601a      	str	r2, [r3, #0]
 8008f5a:	605a      	str	r2, [r3, #4]
 8008f5c:	609a      	str	r2, [r3, #8]
 8008f5e:	60da      	str	r2, [r3, #12]
 8008f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f62:	4baf      	ldr	r3, [pc, #700]	; (8009220 <MX_GPIO_Init+0x2d4>)
 8008f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f66:	4aae      	ldr	r2, [pc, #696]	; (8009220 <MX_GPIO_Init+0x2d4>)
 8008f68:	f043 0304 	orr.w	r3, r3, #4
 8008f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8008f6e:	4bac      	ldr	r3, [pc, #688]	; (8009220 <MX_GPIO_Init+0x2d4>)
 8008f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f72:	f003 0304 	and.w	r3, r3, #4
 8008f76:	613b      	str	r3, [r7, #16]
 8008f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f7a:	4ba9      	ldr	r3, [pc, #676]	; (8009220 <MX_GPIO_Init+0x2d4>)
 8008f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7e:	4aa8      	ldr	r2, [pc, #672]	; (8009220 <MX_GPIO_Init+0x2d4>)
 8008f80:	f043 0301 	orr.w	r3, r3, #1
 8008f84:	6313      	str	r3, [r2, #48]	; 0x30
 8008f86:	4ba6      	ldr	r3, [pc, #664]	; (8009220 <MX_GPIO_Init+0x2d4>)
 8008f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8a:	f003 0301 	and.w	r3, r3, #1
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f92:	4ba3      	ldr	r3, [pc, #652]	; (8009220 <MX_GPIO_Init+0x2d4>)
 8008f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f96:	4aa2      	ldr	r2, [pc, #648]	; (8009220 <MX_GPIO_Init+0x2d4>)
 8008f98:	f043 0302 	orr.w	r3, r3, #2
 8008f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8008f9e:	4ba0      	ldr	r3, [pc, #640]	; (8009220 <MX_GPIO_Init+0x2d4>)
 8008fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa2:	f003 0302 	and.w	r3, r3, #2
 8008fa6:	60bb      	str	r3, [r7, #8]
 8008fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008faa:	4b9d      	ldr	r3, [pc, #628]	; (8009220 <MX_GPIO_Init+0x2d4>)
 8008fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fae:	4a9c      	ldr	r2, [pc, #624]	; (8009220 <MX_GPIO_Init+0x2d4>)
 8008fb0:	f043 0308 	orr.w	r3, r3, #8
 8008fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8008fb6:	4b9a      	ldr	r3, [pc, #616]	; (8009220 <MX_GPIO_Init+0x2d4>)
 8008fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fba:	f003 0308 	and.w	r3, r3, #8
 8008fbe:	607b      	str	r3, [r7, #4]
 8008fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008fc2:	4b97      	ldr	r3, [pc, #604]	; (8009220 <MX_GPIO_Init+0x2d4>)
 8008fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc6:	4a96      	ldr	r2, [pc, #600]	; (8009220 <MX_GPIO_Init+0x2d4>)
 8008fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8008fce:	4b94      	ldr	r3, [pc, #592]	; (8009220 <MX_GPIO_Init+0x2d4>)
 8008fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd6:	603b      	str	r3, [r7, #0]
 8008fd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VDD3V3EN_Pin|SPI2_WP_Pin|RELAY_IGN_Pin, GPIO_PIN_RESET);
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f240 4141 	movw	r1, #1089	; 0x441
 8008fe0:	4890      	ldr	r0, [pc, #576]	; (8009224 <MX_GPIO_Init+0x2d8>)
 8008fe2:	f004 f96d 	bl	800d2c0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, IGN_14_Pin|IGN_23_Pin, GPIO_PIN_SET);
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	21c0      	movs	r1, #192	; 0xc0
 8008fea:	488f      	ldr	r0, [pc, #572]	; (8009228 <MX_GPIO_Init+0x2dc>)
 8008fec:	f004 f968 	bl	800d2c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_nCE_Pin|LED_CHECK_Pin, GPIO_PIN_SET);
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	2190      	movs	r1, #144	; 0x90
 8008ff4:	488b      	ldr	r0, [pc, #556]	; (8009224 <MX_GPIO_Init+0x2d8>)
 8008ff6:	f004 f963 	bl	800d2c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	488a      	ldr	r0, [pc, #552]	; (8009228 <MX_GPIO_Init+0x2dc>)
 8009000:	f004 f95e 	bl	800d2c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_FORMAT_Pin|ADC_BPO_Pin|PROPANE_OUT_Pin
 8009004:	2200      	movs	r2, #0
 8009006:	f240 7104 	movw	r1, #1796	; 0x704
 800900a:	4887      	ldr	r0, [pc, #540]	; (8009228 <MX_GPIO_Init+0x2dc>)
 800900c:	f004 f958 	bl	800d2c0 <HAL_GPIO_WritePin>
                          |PETROL_OUT_Pin, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin, GPIO_PIN_SET);
 8009010:	2201      	movs	r2, #1
 8009012:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009016:	4884      	ldr	r0, [pc, #528]	; (8009228 <MX_GPIO_Init+0x2dc>)
 8009018:	f004 f952 	bl	800d2c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_START_GPIO_Port, RELAY_START_Pin, GPIO_PIN_RESET);
 800901c:	2200      	movs	r2, #0
 800901e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009022:	4882      	ldr	r0, [pc, #520]	; (800922c <MX_GPIO_Init+0x2e0>)
 8009024:	f004 f94c 	bl	800d2c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TACHOMETER_GPIO_Port, TACHOMETER_Pin, GPIO_PIN_RESET);
 8009028:	2200      	movs	r2, #0
 800902a:	2101      	movs	r1, #1
 800902c:	4880      	ldr	r0, [pc, #512]	; (8009230 <MX_GPIO_Init+0x2e4>)
 800902e:	f004 f947 	bl	800d2c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_RESET);
 8009032:	2200      	movs	r2, #0
 8009034:	2104      	movs	r1, #4
 8009036:	487f      	ldr	r0, [pc, #508]	; (8009234 <MX_GPIO_Init+0x2e8>)
 8009038:	f004 f942 	bl	800d2c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SENS_CSPS_Pin */
  GPIO_InitStruct.Pin = SENS_CSPS_Pin;
 800903c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8009042:	4b7d      	ldr	r3, [pc, #500]	; (8009238 <MX_GPIO_Init+0x2ec>)
 8009044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009046:	2302      	movs	r3, #2
 8009048:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENS_CSPS_GPIO_Port, &GPIO_InitStruct);
 800904a:	f107 0314 	add.w	r3, r7, #20
 800904e:	4619      	mov	r1, r3
 8009050:	4874      	ldr	r0, [pc, #464]	; (8009224 <MX_GPIO_Init+0x2d8>)
 8009052:	f003 ff83 	bl	800cf5c <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_HALL_Pin */
  GPIO_InitStruct.Pin = SENS_HALL_Pin;
 8009056:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800905a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800905c:	4b77      	ldr	r3, [pc, #476]	; (800923c <MX_GPIO_Init+0x2f0>)
 800905e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009060:	2300      	movs	r3, #0
 8009062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009064:	f107 0314 	add.w	r3, r7, #20
 8009068:	4619      	mov	r1, r3
 800906a:	486e      	ldr	r0, [pc, #440]	; (8009224 <MX_GPIO_Init+0x2d8>)
 800906c:	f003 ff76 	bl	800cf5c <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_ACC_Pin */
  GPIO_InitStruct.Pin = SENS_ACC_Pin;
 8009070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009076:	2300      	movs	r3, #0
 8009078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800907a:	2301      	movs	r3, #1
 800907c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800907e:	f107 0314 	add.w	r3, r7, #20
 8009082:	4619      	mov	r1, r3
 8009084:	4867      	ldr	r0, [pc, #412]	; (8009224 <MX_GPIO_Init+0x2d8>)
 8009086:	f003 ff69 	bl	800cf5c <HAL_GPIO_Init>

  /*Configure GPIO pins : VDD3V3EN_Pin ADC_nCE_Pin LED_CHECK_Pin RELAY_IGN_Pin */
  GPIO_InitStruct.Pin = VDD3V3EN_Pin|ADC_nCE_Pin|LED_CHECK_Pin|RELAY_IGN_Pin;
 800908a:	f240 4391 	movw	r3, #1169	; 0x491
 800908e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009090:	2301      	movs	r3, #1
 8009092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009094:	2300      	movs	r3, #0
 8009096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009098:	2300      	movs	r3, #0
 800909a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800909c:	f107 0314 	add.w	r3, r7, #20
 80090a0:	4619      	mov	r1, r3
 80090a2:	4860      	ldr	r0, [pc, #384]	; (8009224 <MX_GPIO_Init+0x2d8>)
 80090a4:	f003 ff5a 	bl	800cf5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC0_Pin ADC1_Pin ADC2_Pin ADC3_Pin
                           ADC4_Pin ADC5_Pin ADC6_Pin ADC7_Pin */
  GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin
 80090a8:	23ff      	movs	r3, #255	; 0xff
 80090aa:	617b      	str	r3, [r7, #20]
                          |ADC4_Pin|ADC5_Pin|ADC6_Pin|ADC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80090ac:	2300      	movs	r3, #0
 80090ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80090b0:	2302      	movs	r3, #2
 80090b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090b4:	f107 0314 	add.w	r3, r7, #20
 80090b8:	4619      	mov	r1, r3
 80090ba:	485c      	ldr	r0, [pc, #368]	; (800922c <MX_GPIO_Init+0x2e0>)
 80090bc:	f003 ff4e 	bl	800cf5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_nCS_Pin ADC_FORMAT_Pin ADC_BPO_Pin PROPANE_OUT_Pin
                           PETROL_OUT_Pin */
  GPIO_InitStruct.Pin = ADC_nCS_Pin|ADC_FORMAT_Pin|ADC_BPO_Pin|PROPANE_OUT_Pin
 80090c0:	f240 7305 	movw	r3, #1797	; 0x705
 80090c4:	617b      	str	r3, [r7, #20]
                          |PETROL_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80090c6:	2301      	movs	r3, #1
 80090c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090ca:	2300      	movs	r3, #0
 80090cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090ce:	2303      	movs	r3, #3
 80090d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090d2:	f107 0314 	add.w	r3, r7, #20
 80090d6:	4619      	mov	r1, r3
 80090d8:	4853      	ldr	r0, [pc, #332]	; (8009228 <MX_GPIO_Init+0x2dc>)
 80090da:	f003 ff3f 	bl	800cf5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_STATUS_Pin */
  GPIO_InitStruct.Pin = ADC_STATUS_Pin;
 80090de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80090e4:	4b56      	ldr	r3, [pc, #344]	; (8009240 <MX_GPIO_Init+0x2f4>)
 80090e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80090e8:	2302      	movs	r3, #2
 80090ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADC_STATUS_GPIO_Port, &GPIO_InitStruct);
 80090ec:	f107 0314 	add.w	r3, r7, #20
 80090f0:	4619      	mov	r1, r3
 80090f2:	484d      	ldr	r0, [pc, #308]	; (8009228 <MX_GPIO_Init+0x2dc>)
 80090f4:	f003 ff32 	bl	800cf5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 80090f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80090fe:	2301      	movs	r3, #1
 8009100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009102:	2300      	movs	r3, #0
 8009104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009106:	2303      	movs	r3, #3
 8009108:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 800910a:	f107 0314 	add.w	r3, r7, #20
 800910e:	4619      	mov	r1, r3
 8009110:	4845      	ldr	r0, [pc, #276]	; (8009228 <MX_GPIO_Init+0x2dc>)
 8009112:	f003 ff23 	bl	800cf5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 8009116:	2340      	movs	r3, #64	; 0x40
 8009118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800911a:	2301      	movs	r3, #1
 800911c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800911e:	2300      	movs	r3, #0
 8009120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009122:	2303      	movs	r3, #3
 8009124:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 8009126:	f107 0314 	add.w	r3, r7, #20
 800912a:	4619      	mov	r1, r3
 800912c:	483d      	ldr	r0, [pc, #244]	; (8009224 <MX_GPIO_Init+0x2d8>)
 800912e:	f003 ff15 	bl	800cf5c <HAL_GPIO_Init>

  /*Configure GPIO pin : TACHOMETER_Pin */
  GPIO_InitStruct.Pin = TACHOMETER_Pin;
 8009132:	2301      	movs	r3, #1
 8009134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009136:	2301      	movs	r3, #1
 8009138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800913a:	2300      	movs	r3, #0
 800913c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800913e:	2303      	movs	r3, #3
 8009140:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TACHOMETER_GPIO_Port, &GPIO_InitStruct);
 8009142:	f107 0314 	add.w	r3, r7, #20
 8009146:	4619      	mov	r1, r3
 8009148:	4839      	ldr	r0, [pc, #228]	; (8009230 <MX_GPIO_Init+0x2e4>)
 800914a:	f003 ff07 	bl	800cf5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800914e:	2302      	movs	r3, #2
 8009150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009152:	2303      	movs	r3, #3
 8009154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009156:	2300      	movs	r3, #0
 8009158:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800915a:	f107 0314 	add.w	r3, r7, #20
 800915e:	4619      	mov	r1, r3
 8009160:	4833      	ldr	r0, [pc, #204]	; (8009230 <MX_GPIO_Init+0x2e4>)
 8009162:	f003 fefb 	bl	800cf5c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART1_COMM_Pin MCU_IGN_Pin */
  GPIO_InitStruct.Pin = USART1_COMM_Pin|MCU_IGN_Pin;
 8009166:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800916a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800916c:	2300      	movs	r3, #0
 800916e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009170:	2301      	movs	r3, #1
 8009172:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009174:	f107 0314 	add.w	r3, r7, #20
 8009178:	4619      	mov	r1, r3
 800917a:	482c      	ldr	r0, [pc, #176]	; (800922c <MX_GPIO_Init+0x2e0>)
 800917c:	f003 feee 	bl	800cf5c <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_START_Pin */
  GPIO_InitStruct.Pin = RELAY_START_Pin;
 8009180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009186:	2301      	movs	r3, #1
 8009188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800918a:	2300      	movs	r3, #0
 800918c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800918e:	2300      	movs	r3, #0
 8009190:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY_START_GPIO_Port, &GPIO_InitStruct);
 8009192:	f107 0314 	add.w	r3, r7, #20
 8009196:	4619      	mov	r1, r3
 8009198:	4824      	ldr	r0, [pc, #144]	; (800922c <MX_GPIO_Init+0x2e0>)
 800919a:	f003 fedf 	bl	800cf5c <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_PARK_Pin SENS_GEAR_Pin */
  GPIO_InitStruct.Pin = SENS_PARK_Pin|SENS_GEAR_Pin;
 800919e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80091a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091a4:	2300      	movs	r3, #0
 80091a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091a8:	2300      	movs	r3, #0
 80091aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80091ac:	f107 0314 	add.w	r3, r7, #20
 80091b0:	4619      	mov	r1, r3
 80091b2:	481c      	ldr	r0, [pc, #112]	; (8009224 <MX_GPIO_Init+0x2d8>)
 80091b4:	f003 fed2 	bl	800cf5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ECON_Pin */
  GPIO_InitStruct.Pin = ECON_Pin;
 80091b8:	2304      	movs	r3, #4
 80091ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091bc:	2301      	movs	r3, #1
 80091be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091c0:	2300      	movs	r3, #0
 80091c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091c4:	2300      	movs	r3, #0
 80091c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ECON_GPIO_Port, &GPIO_InitStruct);
 80091c8:	f107 0314 	add.w	r3, r7, #20
 80091cc:	4619      	mov	r1, r3
 80091ce:	4819      	ldr	r0, [pc, #100]	; (8009234 <MX_GPIO_Init+0x2e8>)
 80091d0:	f003 fec4 	bl	800cf5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PROPANE_IN_Pin PETROL_IN_Pin */
  GPIO_InitStruct.Pin = PROPANE_IN_Pin|PETROL_IN_Pin;
 80091d4:	2330      	movs	r3, #48	; 0x30
 80091d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091d8:	2300      	movs	r3, #0
 80091da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80091dc:	2301      	movs	r3, #1
 80091de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80091e0:	f107 0314 	add.w	r3, r7, #20
 80091e4:	4619      	mov	r1, r3
 80091e6:	4810      	ldr	r0, [pc, #64]	; (8009228 <MX_GPIO_Init+0x2dc>)
 80091e8:	f003 feb8 	bl	800cf5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = IGN_23_Pin|IGN_14_Pin;
 80091ec:	23c0      	movs	r3, #192	; 0xc0
 80091ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091f0:	2301      	movs	r3, #1
 80091f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091f4:	2300      	movs	r3, #0
 80091f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091f8:	2303      	movs	r3, #3
 80091fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80091fc:	f107 0314 	add.w	r3, r7, #20
 8009200:	4619      	mov	r1, r3
 8009202:	4809      	ldr	r0, [pc, #36]	; (8009228 <MX_GPIO_Init+0x2dc>)
 8009204:	f003 feaa 	bl	800cf5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8009208:	2200      	movs	r2, #0
 800920a:	2102      	movs	r1, #2
 800920c:	2028      	movs	r0, #40	; 0x28
 800920e:	f003 f8da 	bl	800c3c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009212:	2028      	movs	r0, #40	; 0x28
 8009214:	f003 f8f3 	bl	800c3fe <HAL_NVIC_EnableIRQ>

}
 8009218:	bf00      	nop
 800921a:	3728      	adds	r7, #40	; 0x28
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	40023800 	.word	0x40023800
 8009224:	40020800 	.word	0x40020800
 8009228:	40020400 	.word	0x40020400
 800922c:	40020000 	.word	0x40020000
 8009230:	40021c00 	.word	0x40021c00
 8009234:	40020c00 	.word	0x40020c00
 8009238:	10310000 	.word	0x10310000
 800923c:	10110000 	.word	0x10110000
 8009240:	10210000 	.word	0x10210000

08009244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009244:	b480      	push	{r7}
 8009246:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009248:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800924a:	e7fe      	b.n	800924a <Error_Handler+0x6>

0800924c <map_init>:
#define REF_VOLTAGE 3.32f
#define RES_DIVIDER 1.467f


void map_init(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ADC_FORMAT_GPIO_Port, ADC_FORMAT_Pin, GPIO_PIN_RESET);
 8009250:	2200      	movs	r2, #0
 8009252:	2104      	movs	r1, #4
 8009254:	480c      	ldr	r0, [pc, #48]	; (8009288 <map_init+0x3c>)
 8009256:	f004 f833 	bl	800d2c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_BPO_GPIO_Port, ADC_BPO_Pin, GPIO_PIN_RESET);
 800925a:	2200      	movs	r2, #0
 800925c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009260:	4809      	ldr	r0, [pc, #36]	; (8009288 <map_init+0x3c>)
 8009262:	f004 f82d 	bl	800d2c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nCE_GPIO_Port, ADC_nCE_Pin, GPIO_PIN_RESET);
 8009266:	2200      	movs	r2, #0
 8009268:	2110      	movs	r1, #16
 800926a:	4808      	ldr	r0, [pc, #32]	; (800928c <map_init+0x40>)
 800926c:	f004 f828 	bl	800d2c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8009270:	2200      	movs	r2, #0
 8009272:	2101      	movs	r1, #1
 8009274:	4804      	ldr	r0, [pc, #16]	; (8009288 <map_init+0x3c>)
 8009276:	f004 f823 	bl	800d2c0 <HAL_GPIO_WritePin>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 800927a:	2108      	movs	r1, #8
 800927c:	4804      	ldr	r0, [pc, #16]	; (8009290 <map_init+0x44>)
 800927e:	f007 fc5f 	bl	8010b40 <HAL_TIMEx_PWMN_Start>
}
 8009282:	bf00      	nop
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	40020400 	.word	0x40020400
 800928c:	40020800 	.word	0x40020800
 8009290:	200247a4 	.word	0x200247a4

08009294 <map_adc_read>:

inline void map_adc_read(void)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
  uint8_t portdata = GPIOA->IDR & 0xFF;
 800929a:	4b26      	ldr	r3, [pc, #152]	; (8009334 <map_adc_read+0xa0>)
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	72fb      	strb	r3, [r7, #11]
  float voltage = portdata / 50.0f;
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	ee07 3a90 	vmov	s15, r3
 80092a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092aa:	eddf 6a23 	vldr	s13, [pc, #140]	; 8009338 <map_adc_read+0xa4>
 80092ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80092b2:	edc7 7a01 	vstr	s15, [r7, #4]
  if(voltage < 0.3f) map_error = 1;
 80092b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80092ba:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800933c <map_adc_read+0xa8>
 80092be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c6:	d503      	bpl.n	80092d0 <map_adc_read+0x3c>
 80092c8:	4b1d      	ldr	r3, [pc, #116]	; (8009340 <map_adc_read+0xac>)
 80092ca:	2201      	movs	r2, #1
 80092cc:	701a      	strb	r2, [r3, #0]
 80092ce:	e002      	b.n	80092d6 <map_adc_read+0x42>
  else map_error = 0;
 80092d0:	4b1b      	ldr	r3, [pc, #108]	; (8009340 <map_adc_read+0xac>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	701a      	strb	r2, [r3, #0]
  float pressure = (voltage - 0.5f) * 25517.0f;
 80092d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80092da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80092de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80092e2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8009344 <map_adc_read+0xb0>
 80092e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092ea:	edc7 7a03 	vstr	s15, [r7, #12]
  if(pressure < 0.0f)
 80092ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80092f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092fa:	d502      	bpl.n	8009302 <map_adc_read+0x6e>
    pressure = 0.0f;
 80092fc:	f04f 0300 	mov.w	r3, #0
 8009300:	60fb      	str	r3, [r7, #12]
  map_data = map_data * (1.0f - lowpass_koff) + pressure * lowpass_koff;
 8009302:	4b11      	ldr	r3, [pc, #68]	; (8009348 <map_adc_read+0xb4>)
 8009304:	edd3 7a00 	vldr	s15, [r3]
 8009308:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800934c <map_adc_read+0xb8>
 800930c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009310:	edd7 7a03 	vldr	s15, [r7, #12]
 8009314:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8009350 <map_adc_read+0xbc>
 8009318:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800931c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009320:	4b09      	ldr	r3, [pc, #36]	; (8009348 <map_adc_read+0xb4>)
 8009322:	edc3 7a00 	vstr	s15, [r3]
}
 8009326:	bf00      	nop
 8009328:	3714      	adds	r7, #20
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	40020000 	.word	0x40020000
 8009338:	42480000 	.word	0x42480000
 800933c:	3e99999a 	.word	0x3e99999a
 8009340:	20021411 	.word	0x20021411
 8009344:	46c75a00 	.word	0x46c75a00
 8009348:	200104c0 	.word	0x200104c0
 800934c:	3f733333 	.word	0x3f733333
 8009350:	3d4ccccd 	.word	0x3d4ccccd

08009354 <map_getpressure>:

inline float map_getpressure(void)
{
 8009354:	b480      	push	{r7}
 8009356:	af00      	add	r7, sp, #0
  return map_data;
 8009358:	4b04      	ldr	r3, [pc, #16]	; (800936c <map_getpressure+0x18>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	ee07 3a90 	vmov	s15, r3
}
 8009360:	eeb0 0a67 	vmov.f32	s0, s15
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	200104c0 	.word	0x200104c0

08009370 <map_iserror>:

inline uint8_t map_iserror(void)
{
 8009370:	b480      	push	{r7}
 8009372:	af00      	add	r7, sp, #0
  return map_error;
 8009374:	4b03      	ldr	r3, [pc, #12]	; (8009384 <map_iserror+0x14>)
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	b2db      	uxtb	r3, r3
}
 800937a:	4618      	mov	r0, r3
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	20021411 	.word	0x20021411

08009388 <SCB_InvalidateDCache_by_Addr>:
{
 8009388:	b480      	push	{r7}
 800938a:	b087      	sub	sp, #28
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800939a:	2320      	movs	r3, #32
 800939c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800939e:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 80093a2:	e00b      	b.n	80093bc <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 80093a4:	4a0c      	ldr	r2, [pc, #48]	; (80093d8 <SCB_InvalidateDCache_by_Addr+0x50>)
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	4413      	add	r3, r2
 80093b2:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	dcf0      	bgt.n	80093a4 <SCB_InvalidateDCache_by_Addr+0x1c>
 80093c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80093c6:	f3bf 8f6f 	isb	sy
}
 80093ca:	bf00      	nop
 80093cc:	371c      	adds	r7, #28
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	e000ed00 	.word	0xe000ed00

080093dc <SCB_CleanDCache_by_Addr>:
{
 80093dc:	b480      	push	{r7}
 80093de:	b087      	sub	sp, #28
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80093ee:	2320      	movs	r3, #32
 80093f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80093f2:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 80093f6:	e00b      	b.n	8009410 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 80093f8:	4a0c      	ldr	r2, [pc, #48]	; (800942c <SCB_CleanDCache_by_Addr+0x50>)
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	693a      	ldr	r2, [r7, #16]
 8009404:	4413      	add	r3, r2
 8009406:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009408:	697a      	ldr	r2, [r7, #20]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	2b00      	cmp	r3, #0
 8009414:	dcf0      	bgt.n	80093f8 <SCB_CleanDCache_by_Addr+0x1c>
 8009416:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800941a:	f3bf 8f6f 	isb	sy
}
 800941e:	bf00      	nop
 8009420:	371c      	adds	r7, #28
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	e000ed00 	.word	0xe000ed00

08009430 <SST25_ErrorCallback>:

volatile uint8_t semTx = 0;
volatile uint8_t semRx = 0;

inline void SST25_ErrorCallback(SPI_HandleTypeDef * _hspi)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  if(_hspi == hspi)
  {

  }
}
 8009438:	bf00      	nop
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <SST25_TxCpltCallback>:

inline void SST25_TxCpltCallback(SPI_HandleTypeDef * _hspi)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  if(_hspi == hspi)
 800944c:	4b06      	ldr	r3, [pc, #24]	; (8009468 <SST25_TxCpltCallback+0x24>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	429a      	cmp	r2, r3
 8009454:	d102      	bne.n	800945c <SST25_TxCpltCallback+0x18>
  {
    semTx = 1;
 8009456:	4b05      	ldr	r3, [pc, #20]	; (800946c <SST25_TxCpltCallback+0x28>)
 8009458:	2201      	movs	r2, #1
 800945a:	701a      	strb	r2, [r3, #0]
  }
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr
 8009468:	20021414 	.word	0x20021414
 800946c:	20021460 	.word	0x20021460

08009470 <SST25_RxCpltCallback>:

inline void SST25_RxCpltCallback(SPI_HandleTypeDef * _hspi)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  if(_hspi == hspi)
 8009478:	4b06      	ldr	r3, [pc, #24]	; (8009494 <SST25_RxCpltCallback+0x24>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	429a      	cmp	r2, r3
 8009480:	d102      	bne.n	8009488 <SST25_RxCpltCallback+0x18>
  {
    semRx = 1;
 8009482:	4b05      	ldr	r3, [pc, #20]	; (8009498 <SST25_RxCpltCallback+0x28>)
 8009484:	2201      	movs	r2, #1
 8009486:	701a      	strb	r2, [r3, #0]
  }
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr
 8009494:	20021414 	.word	0x20021414
 8009498:	20021461 	.word	0x20021461

0800949c <SST25_TxRxCpltCallback>:

inline void SST25_TxRxCpltCallback(SPI_HandleTypeDef * _hspi)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  if(_hspi == hspi)
 80094a4:	4b08      	ldr	r3, [pc, #32]	; (80094c8 <SST25_TxRxCpltCallback+0x2c>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d105      	bne.n	80094ba <SST25_TxRxCpltCallback+0x1e>
  {
    semTx = 1;
 80094ae:	4b07      	ldr	r3, [pc, #28]	; (80094cc <SST25_TxRxCpltCallback+0x30>)
 80094b0:	2201      	movs	r2, #1
 80094b2:	701a      	strb	r2, [r3, #0]
    semRx = 1;
 80094b4:	4b06      	ldr	r3, [pc, #24]	; (80094d0 <SST25_TxRxCpltCallback+0x34>)
 80094b6:	2201      	movs	r2, #1
 80094b8:	701a      	strb	r2, [r3, #0]
  }
}
 80094ba:	bf00      	nop
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	20021414 	.word	0x20021414
 80094cc:	20021460 	.word	0x20021460
 80094d0:	20021461 	.word	0x20021461

080094d4 <waitTxCplt>:

static inline uint8_t waitTxCplt()
{
 80094d4:	b480      	push	{r7}
 80094d6:	af00      	add	r7, sp, #0
  if(semTx)
 80094d8:	4b07      	ldr	r3, [pc, #28]	; (80094f8 <waitTxCplt+0x24>)
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d004      	beq.n	80094ec <waitTxCplt+0x18>
  {
    semTx = 0;
 80094e2:	4b05      	ldr	r3, [pc, #20]	; (80094f8 <waitTxCplt+0x24>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	701a      	strb	r2, [r3, #0]
    return 1;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e000      	b.n	80094ee <waitTxCplt+0x1a>
  }
  return 0;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr
 80094f8:	20021460 	.word	0x20021460

080094fc <waitRxCplt>:

static inline uint8_t waitRxCplt()
{
 80094fc:	b480      	push	{r7}
 80094fe:	af00      	add	r7, sp, #0
  if(semRx)
 8009500:	4b07      	ldr	r3, [pc, #28]	; (8009520 <waitRxCplt+0x24>)
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d004      	beq.n	8009514 <waitRxCplt+0x18>
  {
    semRx = 0;
 800950a:	4b05      	ldr	r3, [pc, #20]	; (8009520 <waitRxCplt+0x24>)
 800950c:	2200      	movs	r2, #0
 800950e:	701a      	strb	r2, [r3, #0]
    return 1;
 8009510:	2301      	movs	r3, #1
 8009512:	e000      	b.n	8009516 <waitRxCplt+0x1a>
  }
  return 0;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	20021461 	.word	0x20021461

08009524 <waitTxRxCplt>:

static inline uint8_t waitTxRxCplt()
{
 8009524:	b480      	push	{r7}
 8009526:	af00      	add	r7, sp, #0
  if(semRx && semTx)
 8009528:	4b0b      	ldr	r3, [pc, #44]	; (8009558 <waitTxRxCplt+0x34>)
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00c      	beq.n	800954c <waitTxRxCplt+0x28>
 8009532:	4b0a      	ldr	r3, [pc, #40]	; (800955c <waitTxRxCplt+0x38>)
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	b2db      	uxtb	r3, r3
 8009538:	2b00      	cmp	r3, #0
 800953a:	d007      	beq.n	800954c <waitTxRxCplt+0x28>
  {
    semRx = 0;
 800953c:	4b06      	ldr	r3, [pc, #24]	; (8009558 <waitTxRxCplt+0x34>)
 800953e:	2200      	movs	r2, #0
 8009540:	701a      	strb	r2, [r3, #0]
    semTx = 0;
 8009542:	4b06      	ldr	r3, [pc, #24]	; (800955c <waitTxRxCplt+0x38>)
 8009544:	2200      	movs	r2, #0
 8009546:	701a      	strb	r2, [r3, #0]
    return 1;
 8009548:	2301      	movs	r3, #1
 800954a:	e000      	b.n	800954e <waitTxRxCplt+0x2a>
  }
  return 0;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	20021461 	.word	0x20021461
 800955c:	20021460 	.word	0x20021460

08009560 <SPI_CheckChip>:

static inline HAL_StatusTypeDef SPI_CheckChip(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	af00      	add	r7, sp, #0
  tx[0] = 0x90;
 8009564:	4b43      	ldr	r3, [pc, #268]	; (8009674 <SPI_CheckChip+0x114>)
 8009566:	2290      	movs	r2, #144	; 0x90
 8009568:	701a      	strb	r2, [r3, #0]
  tx[1] = 0;
 800956a:	4b42      	ldr	r3, [pc, #264]	; (8009674 <SPI_CheckChip+0x114>)
 800956c:	2200      	movs	r2, #0
 800956e:	705a      	strb	r2, [r3, #1]
  tx[2] = 0;
 8009570:	4b40      	ldr	r3, [pc, #256]	; (8009674 <SPI_CheckChip+0x114>)
 8009572:	2200      	movs	r2, #0
 8009574:	709a      	strb	r2, [r3, #2]
  tx[3] = 0;
 8009576:	4b3f      	ldr	r3, [pc, #252]	; (8009674 <SPI_CheckChip+0x114>)
 8009578:	2200      	movs	r2, #0
 800957a:	70da      	strb	r2, [r3, #3]
  tx[4] = 0;
 800957c:	4b3d      	ldr	r3, [pc, #244]	; (8009674 <SPI_CheckChip+0x114>)
 800957e:	2200      	movs	r2, #0
 8009580:	711a      	strb	r2, [r3, #4]
  tx[5] = 0;
 8009582:	4b3c      	ldr	r3, [pc, #240]	; (8009674 <SPI_CheckChip+0x114>)
 8009584:	2200      	movs	r2, #0
 8009586:	715a      	strb	r2, [r3, #5]

  SCB_CleanDCache_by_Addr((uint32_t*)tx, 6);
 8009588:	2106      	movs	r1, #6
 800958a:	483a      	ldr	r0, [pc, #232]	; (8009674 <SPI_CheckChip+0x114>)
 800958c:	f7ff ff26 	bl	80093dc <SCB_CleanDCache_by_Addr>

  SPI_NSS_ON();
 8009590:	2200      	movs	r2, #0
 8009592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009596:	4838      	ldr	r0, [pc, #224]	; (8009678 <SPI_CheckChip+0x118>)
 8009598:	f003 fe92 	bl	800d2c0 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive_DMA(hspi, tx, rx, 6);
 800959c:	4b37      	ldr	r3, [pc, #220]	; (800967c <SPI_CheckChip+0x11c>)
 800959e:	6818      	ldr	r0, [r3, #0]
 80095a0:	2306      	movs	r3, #6
 80095a2:	4a37      	ldr	r2, [pc, #220]	; (8009680 <SPI_CheckChip+0x120>)
 80095a4:	4933      	ldr	r1, [pc, #204]	; (8009674 <SPI_CheckChip+0x114>)
 80095a6:	f005 fb7d 	bl	800eca4 <HAL_SPI_TransmitReceive_DMA>
  while(!waitTxRxCplt()) {}
 80095aa:	bf00      	nop
 80095ac:	f7ff ffba 	bl	8009524 <waitTxRxCplt>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d0fa      	beq.n	80095ac <SPI_CheckChip+0x4c>
  SPI_NSS_OFF();
 80095b6:	2201      	movs	r2, #1
 80095b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80095bc:	482e      	ldr	r0, [pc, #184]	; (8009678 <SPI_CheckChip+0x118>)
 80095be:	f003 fe7f 	bl	800d2c0 <HAL_GPIO_WritePin>

  SCB_InvalidateDCache_by_Addr((uint32_t*)rx, 6);
 80095c2:	2106      	movs	r1, #6
 80095c4:	482e      	ldr	r0, [pc, #184]	; (8009680 <SPI_CheckChip+0x120>)
 80095c6:	f7ff fedf 	bl	8009388 <SCB_InvalidateDCache_by_Addr>

  if(rx[4] != 0xBF)
 80095ca:	4b2d      	ldr	r3, [pc, #180]	; (8009680 <SPI_CheckChip+0x120>)
 80095cc:	791b      	ldrb	r3, [r3, #4]
 80095ce:	2bbf      	cmp	r3, #191	; 0xbf
 80095d0:	d001      	beq.n	80095d6 <SPI_CheckChip+0x76>
    return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e04b      	b.n	800966e <SPI_CheckChip+0x10e>
  if(rx[5] != 0x4A)
 80095d6:	4b2a      	ldr	r3, [pc, #168]	; (8009680 <SPI_CheckChip+0x120>)
 80095d8:	795b      	ldrb	r3, [r3, #5]
 80095da:	2b4a      	cmp	r3, #74	; 0x4a
 80095dc:	d001      	beq.n	80095e2 <SPI_CheckChip+0x82>
    return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e045      	b.n	800966e <SPI_CheckChip+0x10e>

  HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_SET);
 80095e2:	2201      	movs	r2, #1
 80095e4:	2140      	movs	r1, #64	; 0x40
 80095e6:	4827      	ldr	r0, [pc, #156]	; (8009684 <SPI_CheckChip+0x124>)
 80095e8:	f003 fe6a 	bl	800d2c0 <HAL_GPIO_WritePin>
  tx[0] = 0x06;
 80095ec:	4b21      	ldr	r3, [pc, #132]	; (8009674 <SPI_CheckChip+0x114>)
 80095ee:	2206      	movs	r2, #6
 80095f0:	701a      	strb	r2, [r3, #0]
  SPI_NSS_ON();
 80095f2:	2200      	movs	r2, #0
 80095f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80095f8:	481f      	ldr	r0, [pc, #124]	; (8009678 <SPI_CheckChip+0x118>)
 80095fa:	f003 fe61 	bl	800d2c0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit_IT(hspi, tx, 1);
 80095fe:	4b1f      	ldr	r3, [pc, #124]	; (800967c <SPI_CheckChip+0x11c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2201      	movs	r2, #1
 8009604:	491b      	ldr	r1, [pc, #108]	; (8009674 <SPI_CheckChip+0x114>)
 8009606:	4618      	mov	r0, r3
 8009608:	f004 ff66 	bl	800e4d8 <HAL_SPI_Transmit_IT>
  while(!waitTxCplt()) {}
 800960c:	bf00      	nop
 800960e:	f7ff ff61 	bl	80094d4 <waitTxCplt>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d0fa      	beq.n	800960e <SPI_CheckChip+0xae>
  SPI_NSS_OFF();
 8009618:	2201      	movs	r2, #1
 800961a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800961e:	4816      	ldr	r0, [pc, #88]	; (8009678 <SPI_CheckChip+0x118>)
 8009620:	f003 fe4e 	bl	800d2c0 <HAL_GPIO_WritePin>

  tx[0] = 0x01;
 8009624:	4b13      	ldr	r3, [pc, #76]	; (8009674 <SPI_CheckChip+0x114>)
 8009626:	2201      	movs	r2, #1
 8009628:	701a      	strb	r2, [r3, #0]
  tx[1] = 0x00;
 800962a:	4b12      	ldr	r3, [pc, #72]	; (8009674 <SPI_CheckChip+0x114>)
 800962c:	2200      	movs	r2, #0
 800962e:	705a      	strb	r2, [r3, #1]
  SPI_NSS_ON();
 8009630:	2200      	movs	r2, #0
 8009632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009636:	4810      	ldr	r0, [pc, #64]	; (8009678 <SPI_CheckChip+0x118>)
 8009638:	f003 fe42 	bl	800d2c0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit_IT(hspi, tx, 2);
 800963c:	4b0f      	ldr	r3, [pc, #60]	; (800967c <SPI_CheckChip+0x11c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2202      	movs	r2, #2
 8009642:	490c      	ldr	r1, [pc, #48]	; (8009674 <SPI_CheckChip+0x114>)
 8009644:	4618      	mov	r0, r3
 8009646:	f004 ff47 	bl	800e4d8 <HAL_SPI_Transmit_IT>
  while(!waitTxCplt()) {}
 800964a:	bf00      	nop
 800964c:	f7ff ff42 	bl	80094d4 <waitTxCplt>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d0fa      	beq.n	800964c <SPI_CheckChip+0xec>
  SPI_NSS_OFF();
 8009656:	2201      	movs	r2, #1
 8009658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800965c:	4806      	ldr	r0, [pc, #24]	; (8009678 <SPI_CheckChip+0x118>)
 800965e:	f003 fe2f 	bl	800d2c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_RESET);
 8009662:	2200      	movs	r2, #0
 8009664:	2140      	movs	r1, #64	; 0x40
 8009666:	4807      	ldr	r0, [pc, #28]	; (8009684 <SPI_CheckChip+0x124>)
 8009668:	f003 fe2a 	bl	800d2c0 <HAL_GPIO_WritePin>

  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20021420 	.word	0x20021420
 8009678:	40020400 	.word	0x40020400
 800967c:	20021414 	.word	0x20021414
 8009680:	20021440 	.word	0x20021440
 8009684:	40020800 	.word	0x40020800

08009688 <SPI_Read>:

static inline uint8_t SPI_Read(uint32_t address, uint32_t size, uint8_t * buffer)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
  static uint8_t state = 0;

  switch(state)
 8009694:	4b47      	ldr	r3, [pc, #284]	; (80097b4 <SPI_Read+0x12c>)
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d047      	beq.n	800972c <SPI_Read+0xa4>
 800969c:	2b02      	cmp	r3, #2
 800969e:	d059      	beq.n	8009754 <SPI_Read+0xcc>
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d000      	beq.n	80096a6 <SPI_Read+0x1e>
        state = 0;
        return 1;
      }
      break;
    default :
      break;
 80096a4:	e080      	b.n	80097a8 <SPI_Read+0x120>
      tx[0] = 0x0B;
 80096a6:	4b44      	ldr	r3, [pc, #272]	; (80097b8 <SPI_Read+0x130>)
 80096a8:	220b      	movs	r2, #11
 80096aa:	701a      	strb	r2, [r3, #0]
      tx[1] = (address >> 16) & 0xFF;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	0c1b      	lsrs	r3, r3, #16
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	4b41      	ldr	r3, [pc, #260]	; (80097b8 <SPI_Read+0x130>)
 80096b4:	705a      	strb	r2, [r3, #1]
      tx[2] = (address >> 8) & 0xFF;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	0a1b      	lsrs	r3, r3, #8
 80096ba:	b2da      	uxtb	r2, r3
 80096bc:	4b3e      	ldr	r3, [pc, #248]	; (80097b8 <SPI_Read+0x130>)
 80096be:	709a      	strb	r2, [r3, #2]
      tx[3] = address & 0xFF;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	4b3c      	ldr	r3, [pc, #240]	; (80097b8 <SPI_Read+0x130>)
 80096c6:	70da      	strb	r2, [r3, #3]
      tx[4] = 0xFF;
 80096c8:	4b3b      	ldr	r3, [pc, #236]	; (80097b8 <SPI_Read+0x130>)
 80096ca:	22ff      	movs	r2, #255	; 0xff
 80096cc:	711a      	strb	r2, [r3, #4]
      SCB_CleanDCache_by_Addr((uint32_t*)tx, 5);
 80096ce:	2105      	movs	r1, #5
 80096d0:	4839      	ldr	r0, [pc, #228]	; (80097b8 <SPI_Read+0x130>)
 80096d2:	f7ff fe83 	bl	80093dc <SCB_CleanDCache_by_Addr>
      if((uint32_t)buffer % 32 == 0)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f003 031f 	and.w	r3, r3, #31
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d105      	bne.n	80096ec <SPI_Read+0x64>
        SCB_CleanDCache_by_Addr((uint32_t*)buffer, size);
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	4619      	mov	r1, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7ff fe79 	bl	80093dc <SCB_CleanDCache_by_Addr>
 80096ea:	e00b      	b.n	8009704 <SPI_Read+0x7c>
      else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - ((uint32_t)buffer%32)), size + ((uint32_t)buffer%32));
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f023 031f 	bic.w	r3, r3, #31
 80096f2:	4618      	mov	r0, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f003 021f 	and.w	r2, r3, #31
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	4413      	add	r3, r2
 80096fe:	4619      	mov	r1, r3
 8009700:	f7ff fe6c 	bl	80093dc <SCB_CleanDCache_by_Addr>
      SPI_NSS_ON();
 8009704:	2200      	movs	r2, #0
 8009706:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800970a:	482c      	ldr	r0, [pc, #176]	; (80097bc <SPI_Read+0x134>)
 800970c:	f003 fdd8 	bl	800d2c0 <HAL_GPIO_WritePin>
      HAL_SPI_Transmit_DMA(hspi, tx, 5);
 8009710:	4b2b      	ldr	r3, [pc, #172]	; (80097c0 <SPI_Read+0x138>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2205      	movs	r2, #5
 8009716:	4928      	ldr	r1, [pc, #160]	; (80097b8 <SPI_Read+0x130>)
 8009718:	4618      	mov	r0, r3
 800971a:	f005 f8bb 	bl	800e894 <HAL_SPI_Transmit_DMA>
      state++;
 800971e:	4b25      	ldr	r3, [pc, #148]	; (80097b4 <SPI_Read+0x12c>)
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	3301      	adds	r3, #1
 8009724:	b2da      	uxtb	r2, r3
 8009726:	4b23      	ldr	r3, [pc, #140]	; (80097b4 <SPI_Read+0x12c>)
 8009728:	701a      	strb	r2, [r3, #0]
      break;
 800972a:	e03d      	b.n	80097a8 <SPI_Read+0x120>
      if(waitTxCplt())
 800972c:	f7ff fed2 	bl	80094d4 <waitTxCplt>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d035      	beq.n	80097a2 <SPI_Read+0x11a>
        HAL_SPI_Receive_DMA(hspi, buffer, size);
 8009736:	4b22      	ldr	r3, [pc, #136]	; (80097c0 <SPI_Read+0x138>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	b292      	uxth	r2, r2
 800973e:	6879      	ldr	r1, [r7, #4]
 8009740:	4618      	mov	r0, r3
 8009742:	f005 f993 	bl	800ea6c <HAL_SPI_Receive_DMA>
        state++;
 8009746:	4b1b      	ldr	r3, [pc, #108]	; (80097b4 <SPI_Read+0x12c>)
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	3301      	adds	r3, #1
 800974c:	b2da      	uxtb	r2, r3
 800974e:	4b19      	ldr	r3, [pc, #100]	; (80097b4 <SPI_Read+0x12c>)
 8009750:	701a      	strb	r2, [r3, #0]
      break;
 8009752:	e026      	b.n	80097a2 <SPI_Read+0x11a>
      if(waitRxCplt())
 8009754:	f7ff fed2 	bl	80094fc <waitRxCplt>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d023      	beq.n	80097a6 <SPI_Read+0x11e>
        SPI_NSS_OFF();
 800975e:	2201      	movs	r2, #1
 8009760:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009764:	4815      	ldr	r0, [pc, #84]	; (80097bc <SPI_Read+0x134>)
 8009766:	f003 fdab 	bl	800d2c0 <HAL_GPIO_WritePin>
        if((uint32_t)buffer % 32 == 0)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f003 031f 	and.w	r3, r3, #31
 8009770:	2b00      	cmp	r3, #0
 8009772:	d105      	bne.n	8009780 <SPI_Read+0xf8>
          SCB_InvalidateDCache_by_Addr((uint32_t*)buffer, size);
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7ff fe05 	bl	8009388 <SCB_InvalidateDCache_by_Addr>
 800977e:	e00b      	b.n	8009798 <SPI_Read+0x110>
        else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - ((uint32_t)buffer%32)), size + ((uint32_t)buffer%32));
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f023 031f 	bic.w	r3, r3, #31
 8009786:	4618      	mov	r0, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f003 021f 	and.w	r2, r3, #31
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	4413      	add	r3, r2
 8009792:	4619      	mov	r1, r3
 8009794:	f7ff fdf8 	bl	8009388 <SCB_InvalidateDCache_by_Addr>
        state = 0;
 8009798:	4b06      	ldr	r3, [pc, #24]	; (80097b4 <SPI_Read+0x12c>)
 800979a:	2200      	movs	r2, #0
 800979c:	701a      	strb	r2, [r3, #0]
        return 1;
 800979e:	2301      	movs	r3, #1
 80097a0:	e003      	b.n	80097aa <SPI_Read+0x122>
      break;
 80097a2:	bf00      	nop
 80097a4:	e000      	b.n	80097a8 <SPI_Read+0x120>
      break;
 80097a6:	bf00      	nop
  }
  return 0;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	20021469 	.word	0x20021469
 80097b8:	20021420 	.word	0x20021420
 80097bc:	40020400 	.word	0x40020400
 80097c0:	20021414 	.word	0x20021414

080097c4 <SPI_WaitForWrite>:

static inline uint8_t SPI_WaitForWrite(void)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	af00      	add	r7, sp, #0
  static uint8_t state = 0;
  //static uint32_t wait_time = 0;
  do
  {
    switch(state)
 80097c8:	4b32      	ldr	r3, [pc, #200]	; (8009894 <SPI_WaitForWrite+0xd0>)
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	2b03      	cmp	r3, #3
 80097ce:	d856      	bhi.n	800987e <SPI_WaitForWrite+0xba>
 80097d0:	a201      	add	r2, pc, #4	; (adr r2, 80097d8 <SPI_WaitForWrite+0x14>)
 80097d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d6:	bf00      	nop
 80097d8:	080097e9 	.word	0x080097e9
 80097dc:	08009809 	.word	0x08009809
 80097e0:	08009825 	.word	0x08009825
 80097e4:	0800984b 	.word	0x0800984b
    {
      case 0 :
        tx[0] = 0x05;
 80097e8:	4b2b      	ldr	r3, [pc, #172]	; (8009898 <SPI_WaitForWrite+0xd4>)
 80097ea:	2205      	movs	r2, #5
 80097ec:	701a      	strb	r2, [r3, #0]
        //wait_time = Delay_Tick;
        SPI_NSS_ON();
 80097ee:	2200      	movs	r2, #0
 80097f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80097f4:	4829      	ldr	r0, [pc, #164]	; (800989c <SPI_WaitForWrite+0xd8>)
 80097f6:	f003 fd63 	bl	800d2c0 <HAL_GPIO_WritePin>
        state++;
 80097fa:	4b26      	ldr	r3, [pc, #152]	; (8009894 <SPI_WaitForWrite+0xd0>)
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	3301      	adds	r3, #1
 8009800:	b2da      	uxtb	r2, r3
 8009802:	4b24      	ldr	r3, [pc, #144]	; (8009894 <SPI_WaitForWrite+0xd0>)
 8009804:	701a      	strb	r2, [r3, #0]
        continue;
 8009806:	e041      	b.n	800988c <SPI_WaitForWrite+0xc8>
      case 1 :
        HAL_SPI_Transmit_IT(hspi, tx, 1);
 8009808:	4b25      	ldr	r3, [pc, #148]	; (80098a0 <SPI_WaitForWrite+0xdc>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2201      	movs	r2, #1
 800980e:	4922      	ldr	r1, [pc, #136]	; (8009898 <SPI_WaitForWrite+0xd4>)
 8009810:	4618      	mov	r0, r3
 8009812:	f004 fe61 	bl	800e4d8 <HAL_SPI_Transmit_IT>
        state++;
 8009816:	4b1f      	ldr	r3, [pc, #124]	; (8009894 <SPI_WaitForWrite+0xd0>)
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	3301      	adds	r3, #1
 800981c:	b2da      	uxtb	r2, r3
 800981e:	4b1d      	ldr	r3, [pc, #116]	; (8009894 <SPI_WaitForWrite+0xd0>)
 8009820:	701a      	strb	r2, [r3, #0]
        break;
 8009822:	e033      	b.n	800988c <SPI_WaitForWrite+0xc8>
      case 2 :
        if(waitTxCplt())
 8009824:	f7ff fe56 	bl	80094d4 <waitTxCplt>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d02b      	beq.n	8009886 <SPI_WaitForWrite+0xc2>
        {
          HAL_SPI_Receive_IT(hspi, rx, 1);
 800982e:	4b1c      	ldr	r3, [pc, #112]	; (80098a0 <SPI_WaitForWrite+0xdc>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2201      	movs	r2, #1
 8009834:	491b      	ldr	r1, [pc, #108]	; (80098a4 <SPI_WaitForWrite+0xe0>)
 8009836:	4618      	mov	r0, r3
 8009838:	f004 fed4 	bl	800e5e4 <HAL_SPI_Receive_IT>
          state++;
 800983c:	4b15      	ldr	r3, [pc, #84]	; (8009894 <SPI_WaitForWrite+0xd0>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	3301      	adds	r3, #1
 8009842:	b2da      	uxtb	r2, r3
 8009844:	4b13      	ldr	r3, [pc, #76]	; (8009894 <SPI_WaitForWrite+0xd0>)
 8009846:	701a      	strb	r2, [r3, #0]
        }
        break;
 8009848:	e01d      	b.n	8009886 <SPI_WaitForWrite+0xc2>
      case 3 :
        if(waitRxCplt())
 800984a:	f7ff fe57 	bl	80094fc <waitRxCplt>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d01a      	beq.n	800988a <SPI_WaitForWrite+0xc6>
        {
          if(rx[0] & 0x01)
 8009854:	4b13      	ldr	r3, [pc, #76]	; (80098a4 <SPI_WaitForWrite+0xe0>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	f003 0301 	and.w	r3, r3, #1
 800985c:	2b00      	cmp	r3, #0
 800985e:	d003      	beq.n	8009868 <SPI_WaitForWrite+0xa4>
          {
            //Never should get here...
            //if(DelayDiff(Delay_Tick, wait_time) > 1000);
            state = 1;
 8009860:	4b0c      	ldr	r3, [pc, #48]	; (8009894 <SPI_WaitForWrite+0xd0>)
 8009862:	2201      	movs	r2, #1
 8009864:	701a      	strb	r2, [r3, #0]
            SPI_NSS_OFF();
            state = 0;
            return 1;
          }
        }
        break;
 8009866:	e010      	b.n	800988a <SPI_WaitForWrite+0xc6>
            SPI_NSS_OFF();
 8009868:	2201      	movs	r2, #1
 800986a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800986e:	480b      	ldr	r0, [pc, #44]	; (800989c <SPI_WaitForWrite+0xd8>)
 8009870:	f003 fd26 	bl	800d2c0 <HAL_GPIO_WritePin>
            state = 0;
 8009874:	4b07      	ldr	r3, [pc, #28]	; (8009894 <SPI_WaitForWrite+0xd0>)
 8009876:	2200      	movs	r2, #0
 8009878:	701a      	strb	r2, [r3, #0]
            return 1;
 800987a:	2301      	movs	r3, #1
 800987c:	e007      	b.n	800988e <SPI_WaitForWrite+0xca>
      default :
        state = 0;
 800987e:	4b05      	ldr	r3, [pc, #20]	; (8009894 <SPI_WaitForWrite+0xd0>)
 8009880:	2200      	movs	r2, #0
 8009882:	701a      	strb	r2, [r3, #0]
        continue;
 8009884:	e002      	b.n	800988c <SPI_WaitForWrite+0xc8>
        break;
 8009886:	bf00      	nop
 8009888:	e000      	b.n	800988c <SPI_WaitForWrite+0xc8>
        break;
 800988a:	bf00      	nop
    }
  }
  while(0);
  return 0;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	20021468 	.word	0x20021468
 8009898:	20021420 	.word	0x20021420
 800989c:	40020400 	.word	0x40020400
 80098a0:	20021414 	.word	0x20021414
 80098a4:	20021440 	.word	0x20021440

080098a8 <SPI_Write>:

static inline uint8_t SPI_Write(uint32_t addr, uint32_t size, const uint8_t * buffer)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
  static const uint8_t * pointer = NULL;
  static uint32_t program_time = 0;

  do
  {
    switch(state)
 80098b4:	4b6c      	ldr	r3, [pc, #432]	; (8009a68 <SPI_Write+0x1c0>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b05      	cmp	r3, #5
 80098ba:	f200 80c5 	bhi.w	8009a48 <SPI_Write+0x1a0>
 80098be:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <SPI_Write+0x1c>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	080098dd 	.word	0x080098dd
 80098c8:	08009907 	.word	0x08009907
 80098cc:	08009935 	.word	0x08009935
 80098d0:	080099af 	.word	0x080099af
 80098d4:	080099db 	.word	0x080099db
 80098d8:	080099ff 	.word	0x080099ff
    {
      case 0 :

        HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_SET);
 80098dc:	2201      	movs	r2, #1
 80098de:	2140      	movs	r1, #64	; 0x40
 80098e0:	4862      	ldr	r0, [pc, #392]	; (8009a6c <SPI_Write+0x1c4>)
 80098e2:	f003 fced 	bl	800d2c0 <HAL_GPIO_WritePin>
        left = size;
 80098e6:	4a62      	ldr	r2, [pc, #392]	; (8009a70 <SPI_Write+0x1c8>)
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	6013      	str	r3, [r2, #0]
        address = addr;
 80098ec:	4a61      	ldr	r2, [pc, #388]	; (8009a74 <SPI_Write+0x1cc>)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6013      	str	r3, [r2, #0]
        pointer = buffer;
 80098f2:	4a61      	ldr	r2, [pc, #388]	; (8009a78 <SPI_Write+0x1d0>)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6013      	str	r3, [r2, #0]
        state++;
 80098f8:	4b5b      	ldr	r3, [pc, #364]	; (8009a68 <SPI_Write+0x1c0>)
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	3301      	adds	r3, #1
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	4b59      	ldr	r3, [pc, #356]	; (8009a68 <SPI_Write+0x1c0>)
 8009902:	701a      	strb	r2, [r3, #0]
        continue;
 8009904:	e0ab      	b.n	8009a5e <SPI_Write+0x1b6>
      case 1 :
        tx[0] = 0x06;
 8009906:	4b5d      	ldr	r3, [pc, #372]	; (8009a7c <SPI_Write+0x1d4>)
 8009908:	2206      	movs	r2, #6
 800990a:	701a      	strb	r2, [r3, #0]
        SPI_NSS_ON();
 800990c:	2200      	movs	r2, #0
 800990e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009912:	485b      	ldr	r0, [pc, #364]	; (8009a80 <SPI_Write+0x1d8>)
 8009914:	f003 fcd4 	bl	800d2c0 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit_IT(hspi, tx, 1);
 8009918:	4b5a      	ldr	r3, [pc, #360]	; (8009a84 <SPI_Write+0x1dc>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2201      	movs	r2, #1
 800991e:	4957      	ldr	r1, [pc, #348]	; (8009a7c <SPI_Write+0x1d4>)
 8009920:	4618      	mov	r0, r3
 8009922:	f004 fdd9 	bl	800e4d8 <HAL_SPI_Transmit_IT>
        state++;
 8009926:	4b50      	ldr	r3, [pc, #320]	; (8009a68 <SPI_Write+0x1c0>)
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	3301      	adds	r3, #1
 800992c:	b2da      	uxtb	r2, r3
 800992e:	4b4e      	ldr	r3, [pc, #312]	; (8009a68 <SPI_Write+0x1c0>)
 8009930:	701a      	strb	r2, [r3, #0]
        break;
 8009932:	e094      	b.n	8009a5e <SPI_Write+0x1b6>
      case 2 :
        if(waitTxCplt())
 8009934:	f7ff fdce 	bl	80094d4 <waitTxCplt>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 8088 	beq.w	8009a50 <SPI_Write+0x1a8>
        {
          SPI_NSS_OFF();
 8009940:	2201      	movs	r2, #1
 8009942:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009946:	484e      	ldr	r0, [pc, #312]	; (8009a80 <SPI_Write+0x1d8>)
 8009948:	f003 fcba 	bl	800d2c0 <HAL_GPIO_WritePin>
          tx[0] = 0x02;
 800994c:	4b4b      	ldr	r3, [pc, #300]	; (8009a7c <SPI_Write+0x1d4>)
 800994e:	2202      	movs	r2, #2
 8009950:	701a      	strb	r2, [r3, #0]
          tx[1] = (address >> 16) & 0xFF;
 8009952:	4b48      	ldr	r3, [pc, #288]	; (8009a74 <SPI_Write+0x1cc>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	0c1b      	lsrs	r3, r3, #16
 8009958:	b2da      	uxtb	r2, r3
 800995a:	4b48      	ldr	r3, [pc, #288]	; (8009a7c <SPI_Write+0x1d4>)
 800995c:	705a      	strb	r2, [r3, #1]
          tx[2] = (address >> 8) & 0xFF;
 800995e:	4b45      	ldr	r3, [pc, #276]	; (8009a74 <SPI_Write+0x1cc>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	0a1b      	lsrs	r3, r3, #8
 8009964:	b2da      	uxtb	r2, r3
 8009966:	4b45      	ldr	r3, [pc, #276]	; (8009a7c <SPI_Write+0x1d4>)
 8009968:	709a      	strb	r2, [r3, #2]
          tx[3] = address & 0xFF;
 800996a:	4b42      	ldr	r3, [pc, #264]	; (8009a74 <SPI_Write+0x1cc>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	b2da      	uxtb	r2, r3
 8009970:	4b42      	ldr	r3, [pc, #264]	; (8009a7c <SPI_Write+0x1d4>)
 8009972:	70da      	strb	r2, [r3, #3]
          tx[4] = *pointer;
 8009974:	4b40      	ldr	r3, [pc, #256]	; (8009a78 <SPI_Write+0x1d0>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	781a      	ldrb	r2, [r3, #0]
 800997a:	4b40      	ldr	r3, [pc, #256]	; (8009a7c <SPI_Write+0x1d4>)
 800997c:	711a      	strb	r2, [r3, #4]
          SPI_NSS_ON();
 800997e:	2200      	movs	r2, #0
 8009980:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009984:	483e      	ldr	r0, [pc, #248]	; (8009a80 <SPI_Write+0x1d8>)
 8009986:	f003 fc9b 	bl	800d2c0 <HAL_GPIO_WritePin>
          SCB_CleanDCache_by_Addr((uint32_t*)tx, 5);
 800998a:	2105      	movs	r1, #5
 800998c:	483b      	ldr	r0, [pc, #236]	; (8009a7c <SPI_Write+0x1d4>)
 800998e:	f7ff fd25 	bl	80093dc <SCB_CleanDCache_by_Addr>
          HAL_SPI_Transmit_DMA(hspi, tx, 5);
 8009992:	4b3c      	ldr	r3, [pc, #240]	; (8009a84 <SPI_Write+0x1dc>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2205      	movs	r2, #5
 8009998:	4938      	ldr	r1, [pc, #224]	; (8009a7c <SPI_Write+0x1d4>)
 800999a:	4618      	mov	r0, r3
 800999c:	f004 ff7a 	bl	800e894 <HAL_SPI_Transmit_DMA>
          state++;
 80099a0:	4b31      	ldr	r3, [pc, #196]	; (8009a68 <SPI_Write+0x1c0>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	3301      	adds	r3, #1
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	4b2f      	ldr	r3, [pc, #188]	; (8009a68 <SPI_Write+0x1c0>)
 80099aa:	701a      	strb	r2, [r3, #0]
        }
        break;
 80099ac:	e050      	b.n	8009a50 <SPI_Write+0x1a8>
      case 3 :
        if(waitTxCplt())
 80099ae:	f7ff fd91 	bl	80094d4 <waitTxCplt>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d04d      	beq.n	8009a54 <SPI_Write+0x1ac>
        {
          program_time = Delay_Tick;
 80099b8:	4b33      	ldr	r3, [pc, #204]	; (8009a88 <SPI_Write+0x1e0>)
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	4a33      	ldr	r2, [pc, #204]	; (8009a8c <SPI_Write+0x1e4>)
 80099be:	6013      	str	r3, [r2, #0]
          SPI_NSS_OFF();
 80099c0:	2201      	movs	r2, #1
 80099c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80099c6:	482e      	ldr	r0, [pc, #184]	; (8009a80 <SPI_Write+0x1d8>)
 80099c8:	f003 fc7a 	bl	800d2c0 <HAL_GPIO_WritePin>
          state++;
 80099cc:	4b26      	ldr	r3, [pc, #152]	; (8009a68 <SPI_Write+0x1c0>)
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	3301      	adds	r3, #1
 80099d2:	b2da      	uxtb	r2, r3
 80099d4:	4b24      	ldr	r3, [pc, #144]	; (8009a68 <SPI_Write+0x1c0>)
 80099d6:	701a      	strb	r2, [r3, #0]
        }
        break;
 80099d8:	e03c      	b.n	8009a54 <SPI_Write+0x1ac>
      case 4 :
        if(DelayDiff(Delay_Tick, program_time) >= 8)
 80099da:	4b2b      	ldr	r3, [pc, #172]	; (8009a88 <SPI_Write+0x1e0>)
 80099dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099de:	4b2b      	ldr	r3, [pc, #172]	; (8009a8c <SPI_Write+0x1e4>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4619      	mov	r1, r3
 80099e4:	4610      	mov	r0, r2
 80099e6:	f7fe fc9d 	bl	8008324 <DelayDiff>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b07      	cmp	r3, #7
 80099ee:	d933      	bls.n	8009a58 <SPI_Write+0x1b0>
        {
          state++;
 80099f0:	4b1d      	ldr	r3, [pc, #116]	; (8009a68 <SPI_Write+0x1c0>)
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	3301      	adds	r3, #1
 80099f6:	b2da      	uxtb	r2, r3
 80099f8:	4b1b      	ldr	r3, [pc, #108]	; (8009a68 <SPI_Write+0x1c0>)
 80099fa:	701a      	strb	r2, [r3, #0]
          continue;
 80099fc:	e02f      	b.n	8009a5e <SPI_Write+0x1b6>
        }
        break;
      case 5 :
        if(SPI_WaitForWrite())
 80099fe:	f7ff fee1 	bl	80097c4 <SPI_WaitForWrite>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d029      	beq.n	8009a5c <SPI_Write+0x1b4>
        {
          left--;
 8009a08:	4b19      	ldr	r3, [pc, #100]	; (8009a70 <SPI_Write+0x1c8>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	4a18      	ldr	r2, [pc, #96]	; (8009a70 <SPI_Write+0x1c8>)
 8009a10:	6013      	str	r3, [r2, #0]
          address++;
 8009a12:	4b18      	ldr	r3, [pc, #96]	; (8009a74 <SPI_Write+0x1cc>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3301      	adds	r3, #1
 8009a18:	4a16      	ldr	r2, [pc, #88]	; (8009a74 <SPI_Write+0x1cc>)
 8009a1a:	6013      	str	r3, [r2, #0]
          pointer++;
 8009a1c:	4b16      	ldr	r3, [pc, #88]	; (8009a78 <SPI_Write+0x1d0>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	3301      	adds	r3, #1
 8009a22:	4a15      	ldr	r2, [pc, #84]	; (8009a78 <SPI_Write+0x1d0>)
 8009a24:	6013      	str	r3, [r2, #0]
          state = 1;
 8009a26:	4b10      	ldr	r3, [pc, #64]	; (8009a68 <SPI_Write+0x1c0>)
 8009a28:	2201      	movs	r2, #1
 8009a2a:	701a      	strb	r2, [r3, #0]
          if(left == 0)
 8009a2c:	4b10      	ldr	r3, [pc, #64]	; (8009a70 <SPI_Write+0x1c8>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d113      	bne.n	8009a5c <SPI_Write+0x1b4>
          {
            state = 0;
 8009a34:	4b0c      	ldr	r3, [pc, #48]	; (8009a68 <SPI_Write+0x1c0>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_RESET);
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2140      	movs	r1, #64	; 0x40
 8009a3e:	480b      	ldr	r0, [pc, #44]	; (8009a6c <SPI_Write+0x1c4>)
 8009a40:	f003 fc3e 	bl	800d2c0 <HAL_GPIO_WritePin>
            return 1;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e00b      	b.n	8009a60 <SPI_Write+0x1b8>
          }
        }
        break;
      default :
        state = 0;
 8009a48:	4b07      	ldr	r3, [pc, #28]	; (8009a68 <SPI_Write+0x1c0>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	701a      	strb	r2, [r3, #0]
        continue;
 8009a4e:	e006      	b.n	8009a5e <SPI_Write+0x1b6>
        break;
 8009a50:	bf00      	nop
 8009a52:	e004      	b.n	8009a5e <SPI_Write+0x1b6>
        break;
 8009a54:	bf00      	nop
 8009a56:	e002      	b.n	8009a5e <SPI_Write+0x1b6>
        break;
 8009a58:	bf00      	nop
 8009a5a:	e000      	b.n	8009a5e <SPI_Write+0x1b6>
        break;
 8009a5c:	bf00      	nop
    }
  } while(0);
  return 0;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	2002146a 	.word	0x2002146a
 8009a6c:	40020800 	.word	0x40020800
 8009a70:	2002146c 	.word	0x2002146c
 8009a74:	20021470 	.word	0x20021470
 8009a78:	20021474 	.word	0x20021474
 8009a7c:	20021420 	.word	0x20021420
 8009a80:	40020400 	.word	0x40020400
 8009a84:	20021414 	.word	0x20021414
 8009a88:	40000c00 	.word	0x40000c00
 8009a8c:	20021478 	.word	0x20021478

08009a90 <SPI_EraseSector>:

static inline uint8_t SPI_EraseSector(uint32_t address)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  static uint8_t state = 0;
  static uint32_t program_time = 0;

  do
  {
    switch(state)
 8009a98:	4b55      	ldr	r3, [pc, #340]	; (8009bf0 <SPI_EraseSector+0x160>)
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	2b04      	cmp	r3, #4
 8009a9e:	f200 8096 	bhi.w	8009bce <SPI_EraseSector+0x13e>
 8009aa2:	a201      	add	r2, pc, #4	; (adr r2, 8009aa8 <SPI_EraseSector+0x18>)
 8009aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa8:	08009abd 	.word	0x08009abd
 8009aac:	08009af5 	.word	0x08009af5
 8009ab0:	08009b5d 	.word	0x08009b5d
 8009ab4:	08009b89 	.word	0x08009b89
 8009ab8:	08009bb1 	.word	0x08009bb1
    {
      case 0 :
        HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_SET);
 8009abc:	2201      	movs	r2, #1
 8009abe:	2140      	movs	r1, #64	; 0x40
 8009ac0:	484c      	ldr	r0, [pc, #304]	; (8009bf4 <SPI_EraseSector+0x164>)
 8009ac2:	f003 fbfd 	bl	800d2c0 <HAL_GPIO_WritePin>
        tx[0] = 0x06;
 8009ac6:	4b4c      	ldr	r3, [pc, #304]	; (8009bf8 <SPI_EraseSector+0x168>)
 8009ac8:	2206      	movs	r2, #6
 8009aca:	701a      	strb	r2, [r3, #0]
        SPI_NSS_ON();
 8009acc:	2200      	movs	r2, #0
 8009ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009ad2:	484a      	ldr	r0, [pc, #296]	; (8009bfc <SPI_EraseSector+0x16c>)
 8009ad4:	f003 fbf4 	bl	800d2c0 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit_IT(hspi, tx, 1);
 8009ad8:	4b49      	ldr	r3, [pc, #292]	; (8009c00 <SPI_EraseSector+0x170>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2201      	movs	r2, #1
 8009ade:	4946      	ldr	r1, [pc, #280]	; (8009bf8 <SPI_EraseSector+0x168>)
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f004 fcf9 	bl	800e4d8 <HAL_SPI_Transmit_IT>
        state++;
 8009ae6:	4b42      	ldr	r3, [pc, #264]	; (8009bf0 <SPI_EraseSector+0x160>)
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	3301      	adds	r3, #1
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	4b40      	ldr	r3, [pc, #256]	; (8009bf0 <SPI_EraseSector+0x160>)
 8009af0:	701a      	strb	r2, [r3, #0]
        break;
 8009af2:	e077      	b.n	8009be4 <SPI_EraseSector+0x154>
      case 1 :
        if(waitTxCplt())
 8009af4:	f7ff fcee 	bl	80094d4 <waitTxCplt>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d06b      	beq.n	8009bd6 <SPI_EraseSector+0x146>
        {
          SPI_NSS_OFF();
 8009afe:	2201      	movs	r2, #1
 8009b00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009b04:	483d      	ldr	r0, [pc, #244]	; (8009bfc <SPI_EraseSector+0x16c>)
 8009b06:	f003 fbdb 	bl	800d2c0 <HAL_GPIO_WritePin>
          tx[0] = 0x20;
 8009b0a:	4b3b      	ldr	r3, [pc, #236]	; (8009bf8 <SPI_EraseSector+0x168>)
 8009b0c:	2220      	movs	r2, #32
 8009b0e:	701a      	strb	r2, [r3, #0]
          tx[1] = (address >> 16) & 0xFF;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	0c1b      	lsrs	r3, r3, #16
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	4b38      	ldr	r3, [pc, #224]	; (8009bf8 <SPI_EraseSector+0x168>)
 8009b18:	705a      	strb	r2, [r3, #1]
          tx[2] = (address >> 8) & 0xFF;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	0a1b      	lsrs	r3, r3, #8
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	4b35      	ldr	r3, [pc, #212]	; (8009bf8 <SPI_EraseSector+0x168>)
 8009b22:	709a      	strb	r2, [r3, #2]
          tx[3] = address & 0xFF;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	b2da      	uxtb	r2, r3
 8009b28:	4b33      	ldr	r3, [pc, #204]	; (8009bf8 <SPI_EraseSector+0x168>)
 8009b2a:	70da      	strb	r2, [r3, #3]
          SPI_NSS_ON();
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009b32:	4832      	ldr	r0, [pc, #200]	; (8009bfc <SPI_EraseSector+0x16c>)
 8009b34:	f003 fbc4 	bl	800d2c0 <HAL_GPIO_WritePin>
          SCB_CleanDCache_by_Addr((uint32_t*)tx, 4);
 8009b38:	2104      	movs	r1, #4
 8009b3a:	482f      	ldr	r0, [pc, #188]	; (8009bf8 <SPI_EraseSector+0x168>)
 8009b3c:	f7ff fc4e 	bl	80093dc <SCB_CleanDCache_by_Addr>
          HAL_SPI_Transmit_DMA(hspi, tx, 4);
 8009b40:	4b2f      	ldr	r3, [pc, #188]	; (8009c00 <SPI_EraseSector+0x170>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2204      	movs	r2, #4
 8009b46:	492c      	ldr	r1, [pc, #176]	; (8009bf8 <SPI_EraseSector+0x168>)
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f004 fea3 	bl	800e894 <HAL_SPI_Transmit_DMA>
          state++;
 8009b4e:	4b28      	ldr	r3, [pc, #160]	; (8009bf0 <SPI_EraseSector+0x160>)
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	3301      	adds	r3, #1
 8009b54:	b2da      	uxtb	r2, r3
 8009b56:	4b26      	ldr	r3, [pc, #152]	; (8009bf0 <SPI_EraseSector+0x160>)
 8009b58:	701a      	strb	r2, [r3, #0]
        }
        break;
 8009b5a:	e03c      	b.n	8009bd6 <SPI_EraseSector+0x146>
      case 2 :
        if(waitTxCplt())
 8009b5c:	f7ff fcba 	bl	80094d4 <waitTxCplt>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d039      	beq.n	8009bda <SPI_EraseSector+0x14a>
        {
          program_time = Delay_Tick;
 8009b66:	4b27      	ldr	r3, [pc, #156]	; (8009c04 <SPI_EraseSector+0x174>)
 8009b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6a:	4a27      	ldr	r2, [pc, #156]	; (8009c08 <SPI_EraseSector+0x178>)
 8009b6c:	6013      	str	r3, [r2, #0]
          SPI_NSS_OFF();
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009b74:	4821      	ldr	r0, [pc, #132]	; (8009bfc <SPI_EraseSector+0x16c>)
 8009b76:	f003 fba3 	bl	800d2c0 <HAL_GPIO_WritePin>
          state++;
 8009b7a:	4b1d      	ldr	r3, [pc, #116]	; (8009bf0 <SPI_EraseSector+0x160>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	4b1b      	ldr	r3, [pc, #108]	; (8009bf0 <SPI_EraseSector+0x160>)
 8009b84:	701a      	strb	r2, [r3, #0]
        }
        break;
 8009b86:	e028      	b.n	8009bda <SPI_EraseSector+0x14a>
      case 3 :
        if(DelayDiff(Delay_Tick, program_time) >= 36000)
 8009b88:	4b1e      	ldr	r3, [pc, #120]	; (8009c04 <SPI_EraseSector+0x174>)
 8009b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b8c:	4b1e      	ldr	r3, [pc, #120]	; (8009c08 <SPI_EraseSector+0x178>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4619      	mov	r1, r3
 8009b92:	4610      	mov	r0, r2
 8009b94:	f7fe fbc6 	bl	8008324 <DelayDiff>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	f648 439f 	movw	r3, #35999	; 0x8c9f
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d91d      	bls.n	8009bde <SPI_EraseSector+0x14e>
        {
          state++;
 8009ba2:	4b13      	ldr	r3, [pc, #76]	; (8009bf0 <SPI_EraseSector+0x160>)
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	4b11      	ldr	r3, [pc, #68]	; (8009bf0 <SPI_EraseSector+0x160>)
 8009bac:	701a      	strb	r2, [r3, #0]
          continue;
 8009bae:	e019      	b.n	8009be4 <SPI_EraseSector+0x154>
        }
        break;
      case 4 :
        if(SPI_WaitForWrite())
 8009bb0:	f7ff fe08 	bl	80097c4 <SPI_WaitForWrite>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d013      	beq.n	8009be2 <SPI_EraseSector+0x152>
        {
          state = 0;
 8009bba:	4b0d      	ldr	r3, [pc, #52]	; (8009bf0 <SPI_EraseSector+0x160>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	701a      	strb	r2, [r3, #0]
          HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_RESET);
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	2140      	movs	r1, #64	; 0x40
 8009bc4:	480b      	ldr	r0, [pc, #44]	; (8009bf4 <SPI_EraseSector+0x164>)
 8009bc6:	f003 fb7b 	bl	800d2c0 <HAL_GPIO_WritePin>
          return 1;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e00b      	b.n	8009be6 <SPI_EraseSector+0x156>
        }
        break;
      default :
        state = 0;
 8009bce:	4b08      	ldr	r3, [pc, #32]	; (8009bf0 <SPI_EraseSector+0x160>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	701a      	strb	r2, [r3, #0]
        continue;
 8009bd4:	e006      	b.n	8009be4 <SPI_EraseSector+0x154>
        break;
 8009bd6:	bf00      	nop
 8009bd8:	e004      	b.n	8009be4 <SPI_EraseSector+0x154>
        break;
 8009bda:	bf00      	nop
 8009bdc:	e002      	b.n	8009be4 <SPI_EraseSector+0x154>
        break;
 8009bde:	bf00      	nop
 8009be0:	e000      	b.n	8009be4 <SPI_EraseSector+0x154>
        break;
 8009be2:	bf00      	nop
    }
  } while(0);
  return 0;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	20021462 	.word	0x20021462
 8009bf4:	40020800 	.word	0x40020800
 8009bf8:	20021420 	.word	0x20021420
 8009bfc:	40020400 	.word	0x40020400
 8009c00:	20021414 	.word	0x20021414
 8009c04:	40000c00 	.word	0x40000c00
 8009c08:	20021464 	.word	0x20021464

08009c0c <SST25_Init>:
  return 0;
}


HAL_StatusTypeDef SST25_Init(SPI_HandleTypeDef * _hspi)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	73fb      	strb	r3, [r7, #15]
  hspi = _hspi;
 8009c18:	4a09      	ldr	r2, [pc, #36]	; (8009c40 <SST25_Init+0x34>)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6013      	str	r3, [r2, #0]

  SCB_CleanDCache_by_Addr((uint32_t*)tx, sizeof(tx));
 8009c1e:	2120      	movs	r1, #32
 8009c20:	4808      	ldr	r0, [pc, #32]	; (8009c44 <SST25_Init+0x38>)
 8009c22:	f7ff fbdb 	bl	80093dc <SCB_CleanDCache_by_Addr>
  SCB_CleanDCache_by_Addr((uint32_t*)rx, sizeof(rx));
 8009c26:	2120      	movs	r1, #32
 8009c28:	4807      	ldr	r0, [pc, #28]	; (8009c48 <SST25_Init+0x3c>)
 8009c2a:	f7ff fbd7 	bl	80093dc <SCB_CleanDCache_by_Addr>

  status = SPI_CheckChip();
 8009c2e:	f7ff fc97 	bl	8009560 <SPI_CheckChip>
 8009c32:	4603      	mov	r3, r0
 8009c34:	73fb      	strb	r3, [r7, #15]
  return status;
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	20021414 	.word	0x20021414
 8009c44:	20021420 	.word	0x20021420
 8009c48:	20021440 	.word	0x20021440

08009c4c <SST25_Erase4KSector>:

uint8_t SST25_Erase4KSector(uint32_t address)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  return SPI_EraseSector(address & 0x3FFFFF);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7ff ff18 	bl	8009a90 <SPI_EraseSector>
 8009c60:	4603      	mov	r3, r0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <SST25_Read>:
{
  return SPI_ChipErase();
}

uint8_t SST25_Read(uint32_t address, uint32_t size, uint8_t * buffer)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b084      	sub	sp, #16
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	60f8      	str	r0, [r7, #12]
 8009c72:	60b9      	str	r1, [r7, #8]
 8009c74:	607a      	str	r2, [r7, #4]
  return SPI_Read(address & 0x3FFFFF, size, buffer);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	68b9      	ldr	r1, [r7, #8]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7ff fd01 	bl	8009688 <SPI_Read>
 8009c86:	4603      	mov	r3, r0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <SST25_Write>:

uint8_t SST25_Write(uint32_t address, uint32_t size, const uint8_t * buffer)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
  return SPI_Write(address & 0x3FFFFF, size, buffer);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	68b9      	ldr	r1, [r7, #8]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7ff fdfe 	bl	80098a8 <SPI_Write>
 8009cac:	4603      	mov	r3, r0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
	...

08009cb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009cbe:	4b0f      	ldr	r3, [pc, #60]	; (8009cfc <HAL_MspInit+0x44>)
 8009cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc2:	4a0e      	ldr	r2, [pc, #56]	; (8009cfc <HAL_MspInit+0x44>)
 8009cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8009cca:	4b0c      	ldr	r3, [pc, #48]	; (8009cfc <HAL_MspInit+0x44>)
 8009ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cd2:	607b      	str	r3, [r7, #4]
 8009cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009cd6:	4b09      	ldr	r3, [pc, #36]	; (8009cfc <HAL_MspInit+0x44>)
 8009cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cda:	4a08      	ldr	r2, [pc, #32]	; (8009cfc <HAL_MspInit+0x44>)
 8009cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8009ce2:	4b06      	ldr	r3, [pc, #24]	; (8009cfc <HAL_MspInit+0x44>)
 8009ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cea:	603b      	str	r3, [r7, #0]
 8009cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009cee:	bf00      	nop
 8009cf0:	370c      	adds	r7, #12
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	40023800 	.word	0x40023800

08009d00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b08a      	sub	sp, #40	; 0x28
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d08:	f107 0314 	add.w	r3, r7, #20
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	605a      	str	r2, [r3, #4]
 8009d12:	609a      	str	r2, [r3, #8]
 8009d14:	60da      	str	r2, [r3, #12]
 8009d16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a37      	ldr	r2, [pc, #220]	; (8009dfc <HAL_ADC_MspInit+0xfc>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d168      	bne.n	8009df4 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009d22:	4b37      	ldr	r3, [pc, #220]	; (8009e00 <HAL_ADC_MspInit+0x100>)
 8009d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d26:	4a36      	ldr	r2, [pc, #216]	; (8009e00 <HAL_ADC_MspInit+0x100>)
 8009d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8009d2e:	4b34      	ldr	r3, [pc, #208]	; (8009e00 <HAL_ADC_MspInit+0x100>)
 8009d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d36:	613b      	str	r3, [r7, #16]
 8009d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d3a:	4b31      	ldr	r3, [pc, #196]	; (8009e00 <HAL_ADC_MspInit+0x100>)
 8009d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3e:	4a30      	ldr	r2, [pc, #192]	; (8009e00 <HAL_ADC_MspInit+0x100>)
 8009d40:	f043 0301 	orr.w	r3, r3, #1
 8009d44:	6313      	str	r3, [r2, #48]	; 0x30
 8009d46:	4b2e      	ldr	r3, [pc, #184]	; (8009e00 <HAL_ADC_MspInit+0x100>)
 8009d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009d52:	4b2b      	ldr	r3, [pc, #172]	; (8009e00 <HAL_ADC_MspInit+0x100>)
 8009d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d56:	4a2a      	ldr	r2, [pc, #168]	; (8009e00 <HAL_ADC_MspInit+0x100>)
 8009d58:	f043 0304 	orr.w	r3, r3, #4
 8009d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8009d5e:	4b28      	ldr	r3, [pc, #160]	; (8009e00 <HAL_ADC_MspInit+0x100>)
 8009d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d62:	f003 0304 	and.w	r3, r3, #4
 8009d66:	60bb      	str	r3, [r7, #8]
 8009d68:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_12_TEMP_Pin|ADC1_13_BAT_Pin;
 8009d6a:	230c      	movs	r3, #12
 8009d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d72:	2300      	movs	r3, #0
 8009d74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d76:	f107 0314 	add.w	r3, r7, #20
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	4821      	ldr	r0, [pc, #132]	; (8009e04 <HAL_ADC_MspInit+0x104>)
 8009d7e:	f003 f8ed 	bl	800cf5c <HAL_GPIO_Init>
    //GPIO_InitStruct.Pull = GPIO_NOPULL;
    //HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8009d82:	4b21      	ldr	r3, [pc, #132]	; (8009e08 <HAL_ADC_MspInit+0x108>)
 8009d84:	4a21      	ldr	r2, [pc, #132]	; (8009e0c <HAL_ADC_MspInit+0x10c>)
 8009d86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8009d88:	4b1f      	ldr	r3, [pc, #124]	; (8009e08 <HAL_ADC_MspInit+0x108>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009d8e:	4b1e      	ldr	r3, [pc, #120]	; (8009e08 <HAL_ADC_MspInit+0x108>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009d94:	4b1c      	ldr	r3, [pc, #112]	; (8009e08 <HAL_ADC_MspInit+0x108>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009d9a:	4b1b      	ldr	r3, [pc, #108]	; (8009e08 <HAL_ADC_MspInit+0x108>)
 8009d9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009da0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009da2:	4b19      	ldr	r3, [pc, #100]	; (8009e08 <HAL_ADC_MspInit+0x108>)
 8009da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009da8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009daa:	4b17      	ldr	r3, [pc, #92]	; (8009e08 <HAL_ADC_MspInit+0x108>)
 8009dac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009db0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8009db2:	4b15      	ldr	r3, [pc, #84]	; (8009e08 <HAL_ADC_MspInit+0x108>)
 8009db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009db8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8009dba:	4b13      	ldr	r3, [pc, #76]	; (8009e08 <HAL_ADC_MspInit+0x108>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009dc0:	4b11      	ldr	r3, [pc, #68]	; (8009e08 <HAL_ADC_MspInit+0x108>)
 8009dc2:	2204      	movs	r2, #4
 8009dc4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8009dc6:	4b10      	ldr	r3, [pc, #64]	; (8009e08 <HAL_ADC_MspInit+0x108>)
 8009dc8:	2203      	movs	r2, #3
 8009dca:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8009dcc:	4b0e      	ldr	r3, [pc, #56]	; (8009e08 <HAL_ADC_MspInit+0x108>)
 8009dce:	2200      	movs	r2, #0
 8009dd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009dd2:	4b0d      	ldr	r3, [pc, #52]	; (8009e08 <HAL_ADC_MspInit+0x108>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8009dd8:	480b      	ldr	r0, [pc, #44]	; (8009e08 <HAL_ADC_MspInit+0x108>)
 8009dda:	f002 fd27 	bl	800c82c <HAL_DMA_Init>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 8009de4:	f7ff fa2e 	bl	8009244 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a07      	ldr	r2, [pc, #28]	; (8009e08 <HAL_ADC_MspInit+0x108>)
 8009dec:	639a      	str	r2, [r3, #56]	; 0x38
 8009dee:	4a06      	ldr	r2, [pc, #24]	; (8009e08 <HAL_ADC_MspInit+0x108>)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8009df4:	bf00      	nop
 8009df6:	3728      	adds	r7, #40	; 0x28
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	40012000 	.word	0x40012000
 8009e00:	40023800 	.word	0x40023800
 8009e04:	40020800 	.word	0x40020800
 8009e08:	20024ae0 	.word	0x20024ae0
 8009e0c:	40026410 	.word	0x40026410

08009e10 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a0a      	ldr	r2, [pc, #40]	; (8009e48 <HAL_CRC_MspInit+0x38>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d10b      	bne.n	8009e3a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8009e22:	4b0a      	ldr	r3, [pc, #40]	; (8009e4c <HAL_CRC_MspInit+0x3c>)
 8009e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e26:	4a09      	ldr	r2, [pc, #36]	; (8009e4c <HAL_CRC_MspInit+0x3c>)
 8009e28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8009e2e:	4b07      	ldr	r3, [pc, #28]	; (8009e4c <HAL_CRC_MspInit+0x3c>)
 8009e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e36:	60fb      	str	r3, [r7, #12]
 8009e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8009e3a:	bf00      	nop
 8009e3c:	3714      	adds	r7, #20
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	40023000 	.word	0x40023000
 8009e4c:	40023800 	.word	0x40023800

08009e50 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a0a      	ldr	r2, [pc, #40]	; (8009e88 <HAL_RNG_MspInit+0x38>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d10b      	bne.n	8009e7a <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8009e62:	4b0a      	ldr	r3, [pc, #40]	; (8009e8c <HAL_RNG_MspInit+0x3c>)
 8009e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e66:	4a09      	ldr	r2, [pc, #36]	; (8009e8c <HAL_RNG_MspInit+0x3c>)
 8009e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e6c:	6353      	str	r3, [r2, #52]	; 0x34
 8009e6e:	4b07      	ldr	r3, [pc, #28]	; (8009e8c <HAL_RNG_MspInit+0x3c>)
 8009e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e76:	60fb      	str	r3, [r7, #12]
 8009e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8009e7a:	bf00      	nop
 8009e7c:	3714      	adds	r7, #20
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr
 8009e86:	bf00      	nop
 8009e88:	50060800 	.word	0x50060800
 8009e8c:	40023800 	.word	0x40023800

08009e90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08a      	sub	sp, #40	; 0x28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e98:	f107 0314 	add.w	r3, r7, #20
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	601a      	str	r2, [r3, #0]
 8009ea0:	605a      	str	r2, [r3, #4]
 8009ea2:	609a      	str	r2, [r3, #8]
 8009ea4:	60da      	str	r2, [r3, #12]
 8009ea6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a49      	ldr	r2, [pc, #292]	; (8009fd4 <HAL_SPI_MspInit+0x144>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	f040 808b 	bne.w	8009fca <HAL_SPI_MspInit+0x13a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009eb4:	4b48      	ldr	r3, [pc, #288]	; (8009fd8 <HAL_SPI_MspInit+0x148>)
 8009eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb8:	4a47      	ldr	r2, [pc, #284]	; (8009fd8 <HAL_SPI_MspInit+0x148>)
 8009eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8009ec0:	4b45      	ldr	r3, [pc, #276]	; (8009fd8 <HAL_SPI_MspInit+0x148>)
 8009ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ec8:	613b      	str	r3, [r7, #16]
 8009eca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ecc:	4b42      	ldr	r3, [pc, #264]	; (8009fd8 <HAL_SPI_MspInit+0x148>)
 8009ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed0:	4a41      	ldr	r2, [pc, #260]	; (8009fd8 <HAL_SPI_MspInit+0x148>)
 8009ed2:	f043 0302 	orr.w	r3, r3, #2
 8009ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8009ed8:	4b3f      	ldr	r3, [pc, #252]	; (8009fd8 <HAL_SPI_MspInit+0x148>)
 8009eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009edc:	f003 0302 	and.w	r3, r3, #2
 8009ee0:	60fb      	str	r3, [r7, #12]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8009ee4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8009ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009eea:	2302      	movs	r3, #2
 8009eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009ef6:	2305      	movs	r3, #5
 8009ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009efa:	f107 0314 	add.w	r3, r7, #20
 8009efe:	4619      	mov	r1, r3
 8009f00:	4836      	ldr	r0, [pc, #216]	; (8009fdc <HAL_SPI_MspInit+0x14c>)
 8009f02:	f003 f82b 	bl	800cf5c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8009f06:	4b36      	ldr	r3, [pc, #216]	; (8009fe0 <HAL_SPI_MspInit+0x150>)
 8009f08:	4a36      	ldr	r2, [pc, #216]	; (8009fe4 <HAL_SPI_MspInit+0x154>)
 8009f0a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8009f0c:	4b34      	ldr	r3, [pc, #208]	; (8009fe0 <HAL_SPI_MspInit+0x150>)
 8009f0e:	2200      	movs	r2, #0
 8009f10:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f12:	4b33      	ldr	r3, [pc, #204]	; (8009fe0 <HAL_SPI_MspInit+0x150>)
 8009f14:	2240      	movs	r2, #64	; 0x40
 8009f16:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f18:	4b31      	ldr	r3, [pc, #196]	; (8009fe0 <HAL_SPI_MspInit+0x150>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009f1e:	4b30      	ldr	r3, [pc, #192]	; (8009fe0 <HAL_SPI_MspInit+0x150>)
 8009f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f24:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009f26:	4b2e      	ldr	r3, [pc, #184]	; (8009fe0 <HAL_SPI_MspInit+0x150>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009f2c:	4b2c      	ldr	r3, [pc, #176]	; (8009fe0 <HAL_SPI_MspInit+0x150>)
 8009f2e:	2200      	movs	r2, #0
 8009f30:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8009f32:	4b2b      	ldr	r3, [pc, #172]	; (8009fe0 <HAL_SPI_MspInit+0x150>)
 8009f34:	2200      	movs	r2, #0
 8009f36:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009f38:	4b29      	ldr	r3, [pc, #164]	; (8009fe0 <HAL_SPI_MspInit+0x150>)
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009f3e:	4b28      	ldr	r3, [pc, #160]	; (8009fe0 <HAL_SPI_MspInit+0x150>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8009f44:	4826      	ldr	r0, [pc, #152]	; (8009fe0 <HAL_SPI_MspInit+0x150>)
 8009f46:	f002 fc71 	bl	800c82c <HAL_DMA_Init>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d001      	beq.n	8009f54 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8009f50:	f7ff f978 	bl	8009244 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a22      	ldr	r2, [pc, #136]	; (8009fe0 <HAL_SPI_MspInit+0x150>)
 8009f58:	655a      	str	r2, [r3, #84]	; 0x54
 8009f5a:	4a21      	ldr	r2, [pc, #132]	; (8009fe0 <HAL_SPI_MspInit+0x150>)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8009f60:	4b21      	ldr	r3, [pc, #132]	; (8009fe8 <HAL_SPI_MspInit+0x158>)
 8009f62:	4a22      	ldr	r2, [pc, #136]	; (8009fec <HAL_SPI_MspInit+0x15c>)
 8009f64:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8009f66:	4b20      	ldr	r3, [pc, #128]	; (8009fe8 <HAL_SPI_MspInit+0x158>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009f6c:	4b1e      	ldr	r3, [pc, #120]	; (8009fe8 <HAL_SPI_MspInit+0x158>)
 8009f6e:	2200      	movs	r2, #0
 8009f70:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f72:	4b1d      	ldr	r3, [pc, #116]	; (8009fe8 <HAL_SPI_MspInit+0x158>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009f78:	4b1b      	ldr	r3, [pc, #108]	; (8009fe8 <HAL_SPI_MspInit+0x158>)
 8009f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f7e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009f80:	4b19      	ldr	r3, [pc, #100]	; (8009fe8 <HAL_SPI_MspInit+0x158>)
 8009f82:	2200      	movs	r2, #0
 8009f84:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009f86:	4b18      	ldr	r3, [pc, #96]	; (8009fe8 <HAL_SPI_MspInit+0x158>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8009f8c:	4b16      	ldr	r3, [pc, #88]	; (8009fe8 <HAL_SPI_MspInit+0x158>)
 8009f8e:	2200      	movs	r2, #0
 8009f90:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009f92:	4b15      	ldr	r3, [pc, #84]	; (8009fe8 <HAL_SPI_MspInit+0x158>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009f98:	4b13      	ldr	r3, [pc, #76]	; (8009fe8 <HAL_SPI_MspInit+0x158>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8009f9e:	4812      	ldr	r0, [pc, #72]	; (8009fe8 <HAL_SPI_MspInit+0x158>)
 8009fa0:	f002 fc44 	bl	800c82c <HAL_DMA_Init>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d001      	beq.n	8009fae <HAL_SPI_MspInit+0x11e>
    {
      Error_Handler();
 8009faa:	f7ff f94b 	bl	8009244 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a0d      	ldr	r2, [pc, #52]	; (8009fe8 <HAL_SPI_MspInit+0x158>)
 8009fb2:	659a      	str	r2, [r3, #88]	; 0x58
 8009fb4:	4a0c      	ldr	r2, [pc, #48]	; (8009fe8 <HAL_SPI_MspInit+0x158>)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 14, 0);
 8009fba:	2200      	movs	r2, #0
 8009fbc:	210e      	movs	r1, #14
 8009fbe:	2024      	movs	r0, #36	; 0x24
 8009fc0:	f002 fa01 	bl	800c3c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8009fc4:	2024      	movs	r0, #36	; 0x24
 8009fc6:	f002 fa1a 	bl	800c3fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8009fca:	bf00      	nop
 8009fcc:	3728      	adds	r7, #40	; 0x28
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	40003800 	.word	0x40003800
 8009fd8:	40023800 	.word	0x40023800
 8009fdc:	40020400 	.word	0x40020400
 8009fe0:	20024b50 	.word	0x20024b50
 8009fe4:	40026070 	.word	0x40026070
 8009fe8:	200248b8 	.word	0x200248b8
 8009fec:	40026058 	.word	0x40026058

08009ff0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a13      	ldr	r2, [pc, #76]	; (800a04c <HAL_TIM_PWM_MspInit+0x5c>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d10c      	bne.n	800a01c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a002:	4b13      	ldr	r3, [pc, #76]	; (800a050 <HAL_TIM_PWM_MspInit+0x60>)
 800a004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a006:	4a12      	ldr	r2, [pc, #72]	; (800a050 <HAL_TIM_PWM_MspInit+0x60>)
 800a008:	f043 0302 	orr.w	r3, r3, #2
 800a00c:	6413      	str	r3, [r2, #64]	; 0x40
 800a00e:	4b10      	ldr	r3, [pc, #64]	; (800a050 <HAL_TIM_PWM_MspInit+0x60>)
 800a010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a012:	f003 0302 	and.w	r3, r3, #2
 800a016:	60fb      	str	r3, [r7, #12]
 800a018:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800a01a:	e010      	b.n	800a03e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a0c      	ldr	r2, [pc, #48]	; (800a054 <HAL_TIM_PWM_MspInit+0x64>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d10b      	bne.n	800a03e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a026:	4b0a      	ldr	r3, [pc, #40]	; (800a050 <HAL_TIM_PWM_MspInit+0x60>)
 800a028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a02a:	4a09      	ldr	r2, [pc, #36]	; (800a050 <HAL_TIM_PWM_MspInit+0x60>)
 800a02c:	f043 0302 	orr.w	r3, r3, #2
 800a030:	6453      	str	r3, [r2, #68]	; 0x44
 800a032:	4b07      	ldr	r3, [pc, #28]	; (800a050 <HAL_TIM_PWM_MspInit+0x60>)
 800a034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a036:	f003 0302 	and.w	r3, r3, #2
 800a03a:	60bb      	str	r3, [r7, #8]
 800a03c:	68bb      	ldr	r3, [r7, #8]
}
 800a03e:	bf00      	nop
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	40000400 	.word	0x40000400
 800a050:	40023800 	.word	0x40023800
 800a054:	40010400 	.word	0x40010400

0800a058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a31      	ldr	r2, [pc, #196]	; (800a12c <HAL_TIM_Base_MspInit+0xd4>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d114      	bne.n	800a094 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a06a:	4b31      	ldr	r3, [pc, #196]	; (800a130 <HAL_TIM_Base_MspInit+0xd8>)
 800a06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06e:	4a30      	ldr	r2, [pc, #192]	; (800a130 <HAL_TIM_Base_MspInit+0xd8>)
 800a070:	f043 0304 	orr.w	r3, r3, #4
 800a074:	6413      	str	r3, [r2, #64]	; 0x40
 800a076:	4b2e      	ldr	r3, [pc, #184]	; (800a130 <HAL_TIM_Base_MspInit+0xd8>)
 800a078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07a:	f003 0304 	and.w	r3, r3, #4
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 800a082:	2200      	movs	r2, #0
 800a084:	2103      	movs	r1, #3
 800a086:	201e      	movs	r0, #30
 800a088:	f002 f99d 	bl	800c3c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a08c:	201e      	movs	r0, #30
 800a08e:	f002 f9b6 	bl	800c3fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800a092:	e047      	b.n	800a124 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM7)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a26      	ldr	r2, [pc, #152]	; (800a134 <HAL_TIM_Base_MspInit+0xdc>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d142      	bne.n	800a124 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800a09e:	4b24      	ldr	r3, [pc, #144]	; (800a130 <HAL_TIM_Base_MspInit+0xd8>)
 800a0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a2:	4a23      	ldr	r2, [pc, #140]	; (800a130 <HAL_TIM_Base_MspInit+0xd8>)
 800a0a4:	f043 0320 	orr.w	r3, r3, #32
 800a0a8:	6413      	str	r3, [r2, #64]	; 0x40
 800a0aa:	4b21      	ldr	r3, [pc, #132]	; (800a130 <HAL_TIM_Base_MspInit+0xd8>)
 800a0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ae:	f003 0320 	and.w	r3, r3, #32
 800a0b2:	60bb      	str	r3, [r7, #8]
 800a0b4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim7_up.Instance = DMA1_Stream2;
 800a0b6:	4b20      	ldr	r3, [pc, #128]	; (800a138 <HAL_TIM_Base_MspInit+0xe0>)
 800a0b8:	4a20      	ldr	r2, [pc, #128]	; (800a13c <HAL_TIM_Base_MspInit+0xe4>)
 800a0ba:	601a      	str	r2, [r3, #0]
    hdma_tim7_up.Init.Channel = DMA_CHANNEL_1;
 800a0bc:	4b1e      	ldr	r3, [pc, #120]	; (800a138 <HAL_TIM_Base_MspInit+0xe0>)
 800a0be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a0c2:	605a      	str	r2, [r3, #4]
    hdma_tim7_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a0c4:	4b1c      	ldr	r3, [pc, #112]	; (800a138 <HAL_TIM_Base_MspInit+0xe0>)
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	609a      	str	r2, [r3, #8]
    hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800a0ca:	4b1b      	ldr	r3, [pc, #108]	; (800a138 <HAL_TIM_Base_MspInit+0xe0>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	60da      	str	r2, [r3, #12]
    hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 800a0d0:	4b19      	ldr	r3, [pc, #100]	; (800a138 <HAL_TIM_Base_MspInit+0xe0>)
 800a0d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a0d6:	611a      	str	r2, [r3, #16]
    hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a0d8:	4b17      	ldr	r3, [pc, #92]	; (800a138 <HAL_TIM_Base_MspInit+0xe0>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	615a      	str	r2, [r3, #20]
    hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a0de:	4b16      	ldr	r3, [pc, #88]	; (800a138 <HAL_TIM_Base_MspInit+0xe0>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	619a      	str	r2, [r3, #24]
    hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 800a0e4:	4b14      	ldr	r3, [pc, #80]	; (800a138 <HAL_TIM_Base_MspInit+0xe0>)
 800a0e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0ea:	61da      	str	r2, [r3, #28]
    hdma_tim7_up.Init.Priority = DMA_PRIORITY_LOW;
 800a0ec:	4b12      	ldr	r3, [pc, #72]	; (800a138 <HAL_TIM_Base_MspInit+0xe0>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	621a      	str	r2, [r3, #32]
    hdma_tim7_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a0f2:	4b11      	ldr	r3, [pc, #68]	; (800a138 <HAL_TIM_Base_MspInit+0xe0>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 800a0f8:	480f      	ldr	r0, [pc, #60]	; (800a138 <HAL_TIM_Base_MspInit+0xe0>)
 800a0fa:	f002 fb97 	bl	800c82c <HAL_DMA_Init>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <HAL_TIM_Base_MspInit+0xb0>
      Error_Handler();
 800a104:	f7ff f89e 	bl	8009244 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a0b      	ldr	r2, [pc, #44]	; (800a138 <HAL_TIM_Base_MspInit+0xe0>)
 800a10c:	621a      	str	r2, [r3, #32]
 800a10e:	4a0a      	ldr	r2, [pc, #40]	; (800a138 <HAL_TIM_Base_MspInit+0xe0>)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800a114:	2200      	movs	r2, #0
 800a116:	2105      	movs	r1, #5
 800a118:	2037      	movs	r0, #55	; 0x37
 800a11a:	f002 f954 	bl	800c3c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800a11e:	2037      	movs	r0, #55	; 0x37
 800a120:	f002 f96d 	bl	800c3fe <HAL_NVIC_EnableIRQ>
}
 800a124:	bf00      	nop
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	40000800 	.word	0x40000800
 800a130:	40023800 	.word	0x40023800
 800a134:	40001400 	.word	0x40001400
 800a138:	20024824 	.word	0x20024824
 800a13c:	40026040 	.word	0x40026040

0800a140 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b08a      	sub	sp, #40	; 0x28
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a148:	f107 0314 	add.w	r3, r7, #20
 800a14c:	2200      	movs	r2, #0
 800a14e:	601a      	str	r2, [r3, #0]
 800a150:	605a      	str	r2, [r3, #4]
 800a152:	609a      	str	r2, [r3, #8]
 800a154:	60da      	str	r2, [r3, #12]
 800a156:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a22      	ldr	r2, [pc, #136]	; (800a1e8 <HAL_TIM_MspPostInit+0xa8>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d11d      	bne.n	800a19e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a162:	4b22      	ldr	r3, [pc, #136]	; (800a1ec <HAL_TIM_MspPostInit+0xac>)
 800a164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a166:	4a21      	ldr	r2, [pc, #132]	; (800a1ec <HAL_TIM_MspPostInit+0xac>)
 800a168:	f043 0304 	orr.w	r3, r3, #4
 800a16c:	6313      	str	r3, [r2, #48]	; 0x30
 800a16e:	4b1f      	ldr	r3, [pc, #124]	; (800a1ec <HAL_TIM_MspPostInit+0xac>)
 800a170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a172:	f003 0304 	and.w	r3, r3, #4
 800a176:	613b      	str	r3, [r7, #16]
 800a178:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH3_CHOKE_Pin|TIM3_CH4_ACC_Pin;
 800a17a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a17e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a180:	2302      	movs	r3, #2
 800a182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a184:	2302      	movs	r3, #2
 800a186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a188:	2303      	movs	r3, #3
 800a18a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a18c:	2302      	movs	r3, #2
 800a18e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a190:	f107 0314 	add.w	r3, r7, #20
 800a194:	4619      	mov	r1, r3
 800a196:	4816      	ldr	r0, [pc, #88]	; (800a1f0 <HAL_TIM_MspPostInit+0xb0>)
 800a198:	f002 fee0 	bl	800cf5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800a19c:	e020      	b.n	800a1e0 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a14      	ldr	r2, [pc, #80]	; (800a1f4 <HAL_TIM_MspPostInit+0xb4>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d11b      	bne.n	800a1e0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a1a8:	4b10      	ldr	r3, [pc, #64]	; (800a1ec <HAL_TIM_MspPostInit+0xac>)
 800a1aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ac:	4a0f      	ldr	r2, [pc, #60]	; (800a1ec <HAL_TIM_MspPostInit+0xac>)
 800a1ae:	f043 0302 	orr.w	r3, r3, #2
 800a1b2:	6313      	str	r3, [r2, #48]	; 0x30
 800a1b4:	4b0d      	ldr	r3, [pc, #52]	; (800a1ec <HAL_TIM_MspPostInit+0xac>)
 800a1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b8:	f003 0302 	and.w	r3, r3, #2
 800a1bc:	60fb      	str	r3, [r7, #12]
 800a1be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH3N_ADC_RW_Pin;
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1cc:	2303      	movs	r3, #3
 800a1ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM8_CH3N_ADC_RW_GPIO_Port, &GPIO_InitStruct);
 800a1d4:	f107 0314 	add.w	r3, r7, #20
 800a1d8:	4619      	mov	r1, r3
 800a1da:	4807      	ldr	r0, [pc, #28]	; (800a1f8 <HAL_TIM_MspPostInit+0xb8>)
 800a1dc:	f002 febe 	bl	800cf5c <HAL_GPIO_Init>
}
 800a1e0:	bf00      	nop
 800a1e2:	3728      	adds	r7, #40	; 0x28
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	40000400 	.word	0x40000400
 800a1ec:	40023800 	.word	0x40023800
 800a1f0:	40020800 	.word	0x40020800
 800a1f4:	40010400 	.word	0x40010400
 800a1f8:	40020400 	.word	0x40020400

0800a1fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b08a      	sub	sp, #40	; 0x28
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a204:	f107 0314 	add.w	r3, r7, #20
 800a208:	2200      	movs	r2, #0
 800a20a:	601a      	str	r2, [r3, #0]
 800a20c:	605a      	str	r2, [r3, #4]
 800a20e:	609a      	str	r2, [r3, #8]
 800a210:	60da      	str	r2, [r3, #12]
 800a212:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a4a      	ldr	r2, [pc, #296]	; (800a344 <HAL_UART_MspInit+0x148>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	f040 808e 	bne.w	800a33c <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a220:	4b49      	ldr	r3, [pc, #292]	; (800a348 <HAL_UART_MspInit+0x14c>)
 800a222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a224:	4a48      	ldr	r2, [pc, #288]	; (800a348 <HAL_UART_MspInit+0x14c>)
 800a226:	f043 0310 	orr.w	r3, r3, #16
 800a22a:	6453      	str	r3, [r2, #68]	; 0x44
 800a22c:	4b46      	ldr	r3, [pc, #280]	; (800a348 <HAL_UART_MspInit+0x14c>)
 800a22e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a230:	f003 0310 	and.w	r3, r3, #16
 800a234:	613b      	str	r3, [r7, #16]
 800a236:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a238:	4b43      	ldr	r3, [pc, #268]	; (800a348 <HAL_UART_MspInit+0x14c>)
 800a23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23c:	4a42      	ldr	r2, [pc, #264]	; (800a348 <HAL_UART_MspInit+0x14c>)
 800a23e:	f043 0301 	orr.w	r3, r3, #1
 800a242:	6313      	str	r3, [r2, #48]	; 0x30
 800a244:	4b40      	ldr	r3, [pc, #256]	; (800a348 <HAL_UART_MspInit+0x14c>)
 800a246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a248:	f003 0301 	and.w	r3, r3, #1
 800a24c:	60fb      	str	r3, [r7, #12]
 800a24e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800a250:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a256:	2302      	movs	r3, #2
 800a258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a25a:	2301      	movs	r3, #1
 800a25c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a25e:	2303      	movs	r3, #3
 800a260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a262:	2307      	movs	r3, #7
 800a264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a266:	f107 0314 	add.w	r3, r7, #20
 800a26a:	4619      	mov	r1, r3
 800a26c:	4837      	ldr	r0, [pc, #220]	; (800a34c <HAL_UART_MspInit+0x150>)
 800a26e:	f002 fe75 	bl	800cf5c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800a272:	4b37      	ldr	r3, [pc, #220]	; (800a350 <HAL_UART_MspInit+0x154>)
 800a274:	4a37      	ldr	r2, [pc, #220]	; (800a354 <HAL_UART_MspInit+0x158>)
 800a276:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800a278:	4b35      	ldr	r3, [pc, #212]	; (800a350 <HAL_UART_MspInit+0x154>)
 800a27a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a27e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a280:	4b33      	ldr	r3, [pc, #204]	; (800a350 <HAL_UART_MspInit+0x154>)
 800a282:	2200      	movs	r2, #0
 800a284:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a286:	4b32      	ldr	r3, [pc, #200]	; (800a350 <HAL_UART_MspInit+0x154>)
 800a288:	2200      	movs	r2, #0
 800a28a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a28c:	4b30      	ldr	r3, [pc, #192]	; (800a350 <HAL_UART_MspInit+0x154>)
 800a28e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a292:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a294:	4b2e      	ldr	r3, [pc, #184]	; (800a350 <HAL_UART_MspInit+0x154>)
 800a296:	2200      	movs	r2, #0
 800a298:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a29a:	4b2d      	ldr	r3, [pc, #180]	; (800a350 <HAL_UART_MspInit+0x154>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800a2a0:	4b2b      	ldr	r3, [pc, #172]	; (800a350 <HAL_UART_MspInit+0x154>)
 800a2a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2a6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a2a8:	4b29      	ldr	r3, [pc, #164]	; (800a350 <HAL_UART_MspInit+0x154>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a2ae:	4b28      	ldr	r3, [pc, #160]	; (800a350 <HAL_UART_MspInit+0x154>)
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a2b4:	4826      	ldr	r0, [pc, #152]	; (800a350 <HAL_UART_MspInit+0x154>)
 800a2b6:	f002 fab9 	bl	800c82c <HAL_DMA_Init>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 800a2c0:	f7fe ffc0 	bl	8009244 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a22      	ldr	r2, [pc, #136]	; (800a350 <HAL_UART_MspInit+0x154>)
 800a2c8:	66da      	str	r2, [r3, #108]	; 0x6c
 800a2ca:	4a21      	ldr	r2, [pc, #132]	; (800a350 <HAL_UART_MspInit+0x154>)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800a2d0:	4b21      	ldr	r3, [pc, #132]	; (800a358 <HAL_UART_MspInit+0x15c>)
 800a2d2:	4a22      	ldr	r2, [pc, #136]	; (800a35c <HAL_UART_MspInit+0x160>)
 800a2d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800a2d6:	4b20      	ldr	r3, [pc, #128]	; (800a358 <HAL_UART_MspInit+0x15c>)
 800a2d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a2dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a2de:	4b1e      	ldr	r3, [pc, #120]	; (800a358 <HAL_UART_MspInit+0x15c>)
 800a2e0:	2240      	movs	r2, #64	; 0x40
 800a2e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a2e4:	4b1c      	ldr	r3, [pc, #112]	; (800a358 <HAL_UART_MspInit+0x15c>)
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a2ea:	4b1b      	ldr	r3, [pc, #108]	; (800a358 <HAL_UART_MspInit+0x15c>)
 800a2ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a2f0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a2f2:	4b19      	ldr	r3, [pc, #100]	; (800a358 <HAL_UART_MspInit+0x15c>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a2f8:	4b17      	ldr	r3, [pc, #92]	; (800a358 <HAL_UART_MspInit+0x15c>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800a2fe:	4b16      	ldr	r3, [pc, #88]	; (800a358 <HAL_UART_MspInit+0x15c>)
 800a300:	2200      	movs	r2, #0
 800a302:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a304:	4b14      	ldr	r3, [pc, #80]	; (800a358 <HAL_UART_MspInit+0x15c>)
 800a306:	2200      	movs	r2, #0
 800a308:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a30a:	4b13      	ldr	r3, [pc, #76]	; (800a358 <HAL_UART_MspInit+0x15c>)
 800a30c:	2200      	movs	r2, #0
 800a30e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a310:	4811      	ldr	r0, [pc, #68]	; (800a358 <HAL_UART_MspInit+0x15c>)
 800a312:	f002 fa8b 	bl	800c82c <HAL_DMA_Init>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 800a31c:	f7fe ff92 	bl	8009244 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	4a0d      	ldr	r2, [pc, #52]	; (800a358 <HAL_UART_MspInit+0x15c>)
 800a324:	669a      	str	r2, [r3, #104]	; 0x68
 800a326:	4a0c      	ldr	r2, [pc, #48]	; (800a358 <HAL_UART_MspInit+0x15c>)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 9, 0);
 800a32c:	2200      	movs	r2, #0
 800a32e:	2109      	movs	r1, #9
 800a330:	2025      	movs	r0, #37	; 0x25
 800a332:	f002 f848 	bl	800c3c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a336:	2025      	movs	r0, #37	; 0x25
 800a338:	f002 f861 	bl	800c3fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a33c:	bf00      	nop
 800a33e:	3728      	adds	r7, #40	; 0x28
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	40011000 	.word	0x40011000
 800a348:	40023800 	.word	0x40023800
 800a34c:	40020000 	.word	0x40020000
 800a350:	20024a00 	.word	0x20024a00
 800a354:	40026440 	.word	0x40026440
 800a358:	20024958 	.word	0x20024958
 800a35c:	400264b8 	.word	0x400264b8

0800a360 <__NVIC_SystemReset>:
{
 800a360:	b480      	push	{r7}
 800a362:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a364:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a368:	4b05      	ldr	r3, [pc, #20]	; (800a380 <__NVIC_SystemReset+0x20>)
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a370:	4903      	ldr	r1, [pc, #12]	; (800a380 <__NVIC_SystemReset+0x20>)
 800a372:	4b04      	ldr	r3, [pc, #16]	; (800a384 <__NVIC_SystemReset+0x24>)
 800a374:	4313      	orrs	r3, r2
 800a376:	60cb      	str	r3, [r1, #12]
 800a378:	f3bf 8f4f 	dsb	sy
    __NOP();
 800a37c:	bf00      	nop
 800a37e:	e7fd      	b.n	800a37c <__NVIC_SystemReset+0x1c>
 800a380:	e000ed00 	.word	0xe000ed00
 800a384:	05fa0004 	.word	0x05fa0004

0800a388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a388:	b480      	push	{r7}
 800a38a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a38c:	e7fe      	b.n	800a38c <NMI_Handler+0x4>

0800a38e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  NVIC_SystemReset();
 800a392:	f7ff ffe5 	bl	800a360 <__NVIC_SystemReset>

0800a396 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a396:	b480      	push	{r7}
 800a398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a39a:	e7fe      	b.n	800a39a <MemManage_Handler+0x4>

0800a39c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a39c:	b480      	push	{r7}
 800a39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a3a0:	e7fe      	b.n	800a3a0 <BusFault_Handler+0x4>

0800a3a2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a3a6:	e7fe      	b.n	800a3a6 <UsageFault_Handler+0x4>

0800a3a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a3ac:	bf00      	nop
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a3b6:	b480      	push	{r7}
 800a3b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a3ba:	bf00      	nop
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a3c8:	bf00      	nop
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a3d6:	f001 faf9 	bl	800b9cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a3da:	bf00      	nop
 800a3dc:	bd80      	pop	{r7, pc}
	...

0800a3e0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim7_up);
 800a3e4:	4802      	ldr	r0, [pc, #8]	; (800a3f0 <DMA1_Stream2_IRQHandler+0x10>)
 800a3e6:	f002 fb51 	bl	800ca8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800a3ea:	bf00      	nop
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20024824 	.word	0x20024824

0800a3f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800a3f8:	4802      	ldr	r0, [pc, #8]	; (800a404 <DMA1_Stream3_IRQHandler+0x10>)
 800a3fa:	f002 fb47 	bl	800ca8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800a3fe:	bf00      	nop
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	200248b8 	.word	0x200248b8

0800a408 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800a40c:	4802      	ldr	r0, [pc, #8]	; (800a418 <DMA1_Stream4_IRQHandler+0x10>)
 800a40e:	f002 fb3d 	bl	800ca8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800a412:	bf00      	nop
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	20024b50 	.word	0x20024b50

0800a41c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800a420:	4802      	ldr	r0, [pc, #8]	; (800a42c <SPI2_IRQHandler+0x10>)
 800a422:	f004 fdcb 	bl	800efbc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800a426:	bf00      	nop
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	20024740 	.word	0x20024740

0800a430 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a434:	4802      	ldr	r0, [pc, #8]	; (800a440 <USART1_IRQHandler+0x10>)
 800a436:	f006 fe51 	bl	80110dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a43a:	bf00      	nop
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	20024a60 	.word	0x20024a60

0800a444 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800a448:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a44c:	f002 ff52 	bl	800d2f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800a450:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a454:	f002 ff4e 	bl	800d2f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800a458:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a45c:	f002 ff4a 	bl	800d2f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800a460:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a464:	f002 ff46 	bl	800d2f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a468:	bf00      	nop
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800a470:	4802      	ldr	r0, [pc, #8]	; (800a47c <TIM4_IRQHandler+0x10>)
 800a472:	f005 fcb4 	bl	800fdde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800a476:	bf00      	nop
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	200247e4 	.word	0x200247e4

0800a480 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800a484:	4802      	ldr	r0, [pc, #8]	; (800a490 <TIM7_IRQHandler+0x10>)
 800a486:	f005 fcaa 	bl	800fdde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800a48a:	bf00      	nop
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	20024bb0 	.word	0x20024bb0

0800a494 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a498:	4802      	ldr	r0, [pc, #8]	; (800a4a4 <DMA2_Stream0_IRQHandler+0x10>)
 800a49a:	f002 faf7 	bl	800ca8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800a49e:	bf00      	nop
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	20024ae0 	.word	0x20024ae0

0800a4a8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800a4ac:	4802      	ldr	r0, [pc, #8]	; (800a4b8 <DMA2_Stream2_IRQHandler+0x10>)
 800a4ae:	f002 faed 	bl	800ca8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800a4b2:	bf00      	nop
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	20024a00 	.word	0x20024a00

0800a4bc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800a4c0:	4802      	ldr	r0, [pc, #8]	; (800a4cc <DMA2_Stream7_IRQHandler+0x10>)
 800a4c2:	f002 fae3 	bl	800ca8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800a4c6:	bf00      	nop
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	20024958 	.word	0x20024958

0800a4d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a4d4:	4b08      	ldr	r3, [pc, #32]	; (800a4f8 <SystemInit+0x28>)
 800a4d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4da:	4a07      	ldr	r2, [pc, #28]	; (800a4f8 <SystemInit+0x28>)
 800a4dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a4e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a4e4:	4b04      	ldr	r3, [pc, #16]	; (800a4f8 <SystemInit+0x28>)
 800a4e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a4ea:	609a      	str	r2, [r3, #8]
#endif
}
 800a4ec:	bf00      	nop
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr
 800a4f6:	bf00      	nop
 800a4f8:	e000ed00 	.word	0xe000ed00

0800a4fc <SCB_InvalidateDCache_by_Addr>:
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b087      	sub	sp, #28
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a50e:	2320      	movs	r3, #32
 800a510:	60fb      	str	r3, [r7, #12]
 800a512:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 800a516:	e00b      	b.n	800a530 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800a518:	4a0c      	ldr	r2, [pc, #48]	; (800a54c <SCB_InvalidateDCache_by_Addr+0x50>)
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	693a      	ldr	r2, [r7, #16]
 800a524:	4413      	add	r3, r2
 800a526:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	2b00      	cmp	r3, #0
 800a534:	dcf0      	bgt.n	800a518 <SCB_InvalidateDCache_by_Addr+0x1c>
 800a536:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a53a:	f3bf 8f6f 	isb	sy
}
 800a53e:	bf00      	nop
 800a540:	371c      	adds	r7, #28
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	e000ed00 	.word	0xe000ed00

0800a550 <SCB_CleanDCache_by_Addr>:
{
 800a550:	b480      	push	{r7}
 800a552:	b087      	sub	sp, #28
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a562:	2320      	movs	r3, #32
 800a564:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a566:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 800a56a:	e00b      	b.n	800a584 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 800a56c:	4a0c      	ldr	r2, [pc, #48]	; (800a5a0 <SCB_CleanDCache_by_Addr+0x50>)
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	4413      	add	r3, r2
 800a57a:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	2b00      	cmp	r3, #0
 800a588:	dcf0      	bgt.n	800a56c <SCB_CleanDCache_by_Addr+0x1c>
 800a58a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a58e:	f3bf 8f6f 	isb	sy
}
 800a592:	bf00      	nop
 800a594:	371c      	adds	r7, #28
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	e000ed00 	.word	0xe000ed00

0800a5a4 <entercritical>:

#ifndef taskENTER_CRITICAL
#define configMAX_SYSCALL_INTERRUPT_PRIORITY 5
#define taskENTER_CRITICAL entercritical
static inline void entercritical(void)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	af00      	add	r7, sp, #0
    " dsb                           \n" \
    " cpsie i                         \n" \
    :"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
  );
  */
}
 800a5a8:	bf00      	nop
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <exitcritical>:
#endif

#ifndef taskEXIT_CRITICAL
#define taskEXIT_CRITICAL exitcritical
static inline void exitcritical(void)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	af00      	add	r7, sp, #0
  __asm volatile
  (
    " msr basepri, %0 " :: "r" ( 0 ) : "memory"
  );
  */
}
 800a5b6:	bf00      	nop
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <Msg_GetSrc>:

static sGetterHandle xHandles[] = {
    {{0},{0},{0},{0},{0},{0}, &huart1, {etrCTRL,etrPC,etrNone} },
};

static inline int Msg_GetSrc(uint8_t xValue) { return (xValue & 7); }
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	71fb      	strb	r3, [r7, #7]
 800a5ca:	79fb      	ldrb	r3, [r7, #7]
 800a5cc:	f003 0307 	and.w	r3, r3, #7
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <Msg_GetDest>:
static inline int Msg_GetDest(uint8_t xValue) { return ((xValue >> 3) & 7); }
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	71fb      	strb	r3, [r7, #7]
 800a5e6:	79fb      	ldrb	r3, [r7, #7]
 800a5e8:	08db      	lsrs	r3, r3, #3
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	f003 0307 	and.w	r3, r3, #7
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <CacheInvalidate>:

static inline void CacheInvalidate(void * buffer, uint32_t size)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f003 031f 	and.w	r3, r3, #31
 800a60c:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d105      	bne.n	800a620 <CacheInvalidate+0x24>
    SCB_InvalidateDCache_by_Addr((uint32_t*)buffer, size);
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	4619      	mov	r1, r3
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f7ff ff6f 	bl	800a4fc <SCB_InvalidateDCache_by_Addr>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 800a61e:	e009      	b.n	800a634 <CacheInvalidate+0x38>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	4618      	mov	r0, r3
 800a628:	683a      	ldr	r2, [r7, #0]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	4413      	add	r3, r2
 800a62e:	4619      	mov	r1, r3
 800a630:	f7ff ff64 	bl	800a4fc <SCB_InvalidateDCache_by_Addr>
}
 800a634:	bf00      	nop
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <CacheClean>:

static inline void CacheClean(void * buffer, uint32_t size)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f003 031f 	and.w	r3, r3, #31
 800a64c:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d105      	bne.n	800a660 <CacheClean+0x24>
    SCB_CleanDCache_by_Addr((uint32_t*)buffer, size);
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	4619      	mov	r1, r3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7ff ff79 	bl	800a550 <SCB_CleanDCache_by_Addr>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 800a65e:	e009      	b.n	800a674 <CacheClean+0x38>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	4618      	mov	r0, r3
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	4413      	add	r3, r2
 800a66e:	4619      	mov	r1, r3
 800a670:	f7ff ff6e 	bl	800a550 <SCB_CleanDCache_by_Addr>
}
 800a674:	bf00      	nop
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <calculatePacketId>:

static inline uint16_t calculatePacketId(void)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
  static uint16_t counter = 0;
  uint16_t returnvalue;
  do
  {
    counter++;
 800a682:	4b19      	ldr	r3, [pc, #100]	; (800a6e8 <calculatePacketId+0x6c>)
 800a684:	881b      	ldrh	r3, [r3, #0]
 800a686:	3301      	adds	r3, #1
 800a688:	b29a      	uxth	r2, r3
 800a68a:	4b17      	ldr	r3, [pc, #92]	; (800a6e8 <calculatePacketId+0x6c>)
 800a68c:	801a      	strh	r2, [r3, #0]
    uint16_t localcounter = counter;
 800a68e:	4b16      	ldr	r3, [pc, #88]	; (800a6e8 <calculatePacketId+0x6c>)
 800a690:	881b      	ldrh	r3, [r3, #0]
 800a692:	81fb      	strh	r3, [r7, #14]
    uint32_t now = Delay_Tick;
 800a694:	4b15      	ldr	r3, [pc, #84]	; (800a6ec <calculatePacketId+0x70>)
 800a696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a698:	60bb      	str	r3, [r7, #8]
    uint8_t crcdata[6] = {(localcounter >> 8) & 0xFF,localcounter & 0xFF, (now >> 24) & 0xFF, (now >> 16) & 0xFF, (now >> 8) & 0xFF, now & 0xFF } ;
 800a69a:	89fb      	ldrh	r3, [r7, #14]
 800a69c:	0a1b      	lsrs	r3, r3, #8
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	703b      	strb	r3, [r7, #0]
 800a6a4:	89fb      	ldrh	r3, [r7, #14]
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	707b      	strb	r3, [r7, #1]
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	0e1b      	lsrs	r3, r3, #24
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	70bb      	strb	r3, [r7, #2]
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	0c1b      	lsrs	r3, r3, #16
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	70fb      	strb	r3, [r7, #3]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	0a1b      	lsrs	r3, r3, #8
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	713b      	strb	r3, [r7, #4]
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	717b      	strb	r3, [r7, #5]
    returnvalue = CRC16_Generate(crcdata, sizeof(crcdata));
 800a6c8:	463b      	mov	r3, r7
 800a6ca:	2106      	movs	r1, #6
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fd f81f 	bl	8007710 <CRC16_Generate>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	80fb      	strh	r3, [r7, #6]
  } while(returnvalue == 0);
 800a6d6:	88fb      	ldrh	r3, [r7, #6]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d0d2      	beq.n	800a682 <calculatePacketId+0x6>
  return returnvalue;
 800a6dc:	88fb      	ldrh	r3, [r7, #6]

}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	20021488 	.word	0x20021488
 800a6ec:	40000c00 	.word	0x40000c00

0800a6f0 <packager>:

static inline void packager(sGetterHandle* xHandle, uint8_t* xMsgPtr, uint16_t xMsgLen, eTransChannels xChaDest, uint16_t aPacketId) {
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	460b      	mov	r3, r1
 800a700:	80fb      	strh	r3, [r7, #6]
 800a702:	4613      	mov	r3, r2
 800a704:	717b      	strb	r3, [r7, #5]

    if (xHandle && xMsgLen<MAX_PACK_LEN)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 80ed 	beq.w	800a8e8 <packager+0x1f8>
 800a70e:	88fb      	ldrh	r3, [r7, #6]
 800a710:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800a714:	f080 80e8 	bcs.w	800a8e8 <packager+0x1f8>
    {
        uint16_t aCrc15 = 0;
 800a718:	2300      	movs	r3, #0
 800a71a:	823b      	strh	r3, [r7, #16]
        uint16_t aTotLen = xMsgLen ? xMsgLen + 10 : 8;
 800a71c:	88fb      	ldrh	r3, [r7, #6]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <packager+0x3a>
 800a722:	88fb      	ldrh	r3, [r7, #6]
 800a724:	330a      	adds	r3, #10
 800a726:	b29b      	uxth	r3, r3
 800a728:	e000      	b.n	800a72c <packager+0x3c>
 800a72a:	2308      	movs	r3, #8
 800a72c:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = etrACIS | ( xChaDest << 3 );
 800a72e:	797b      	ldrb	r3, [r7, #5]
 800a730:	00db      	lsls	r3, r3, #3
 800a732:	b25b      	sxtb	r3, r3
 800a734:	f043 0302 	orr.w	r3, r3, #2
 800a738:	b25b      	sxtb	r3, r3
 800a73a:	74fb      	strb	r3, [r7, #19]


        xHandle->BufSender[0] = 0x55;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800a742:	2255      	movs	r2, #85	; 0x55
 800a744:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[1] = 0x55;
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	f241 0381 	movw	r3, #4225	; 0x1081
 800a74c:	4413      	add	r3, r2
 800a74e:	2255      	movs	r2, #85	; 0x55
 800a750:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[2] = aHeadByte;
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	f241 0382 	movw	r3, #4226	; 0x1082
 800a758:	4413      	add	r3, r2
 800a75a:	7cfa      	ldrb	r2, [r7, #19]
 800a75c:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[3] = aTotLen & 0xFF;
 800a75e:	8abb      	ldrh	r3, [r7, #20]
 800a760:	b2d9      	uxtb	r1, r3
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	f241 0383 	movw	r3, #4227	; 0x1083
 800a768:	4413      	add	r3, r2
 800a76a:	460a      	mov	r2, r1
 800a76c:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[4] = (aTotLen >> 8) & 0xFF;
 800a76e:	8abb      	ldrh	r3, [r7, #20]
 800a770:	0a1b      	lsrs	r3, r3, #8
 800a772:	b29b      	uxth	r3, r3
 800a774:	b2d9      	uxtb	r1, r3
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	f241 0384 	movw	r3, #4228	; 0x1084
 800a77c:	4413      	add	r3, r2
 800a77e:	460a      	mov	r2, r1
 800a780:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[5] = aPacketId & 0xFF;
 800a782:	8c3b      	ldrh	r3, [r7, #32]
 800a784:	b2d9      	uxtb	r1, r3
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	f241 0385 	movw	r3, #4229	; 0x1085
 800a78c:	4413      	add	r3, r2
 800a78e:	460a      	mov	r2, r1
 800a790:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[6] = (aPacketId >> 8) & 0xFF;
 800a792:	8c3b      	ldrh	r3, [r7, #32]
 800a794:	0a1b      	lsrs	r3, r3, #8
 800a796:	b29b      	uxth	r3, r3
 800a798:	b2d9      	uxtb	r1, r3
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	f241 0386 	movw	r3, #4230	; 0x1086
 800a7a0:	4413      	add	r3, r2
 800a7a2:	460a      	mov	r2, r1
 800a7a4:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[7] = CRC8_Generate(xHandle->BufSender, 7);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800a7ac:	2107      	movs	r1, #7
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fc ffca 	bl	8007748 <CRC8_Generate>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	f241 0387 	movw	r3, #4231	; 0x1087
 800a7be:	4413      	add	r3, r2
 800a7c0:	460a      	mov	r2, r1
 800a7c2:	701a      	strb	r2, [r3, #0]


        if (xMsgLen)
 800a7c4:	88fb      	ldrh	r3, [r7, #6]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d013      	beq.n	800a7f2 <packager+0x102>
        {
          memcpy(&xHandle->BufSender[8], xMsgPtr, xMsgLen);
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	f241 0388 	movw	r3, #4232	; 0x1088
 800a7d0:	4413      	add	r3, r2
 800a7d2:	88fa      	ldrh	r2, [r7, #6]
 800a7d4:	68b9      	ldr	r1, [r7, #8]
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f007 fb00 	bl	8011ddc <memcpy>
          aCrc15 = CRC16_Generate(xHandle->BufSender, xMsgLen + 8);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 800a7e2:	88fb      	ldrh	r3, [r7, #6]
 800a7e4:	3308      	adds	r3, #8
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	f7fc ff91 	bl	8007710 <CRC16_Generate>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	823b      	strh	r3, [r7, #16]
        }

        uint8_t handled = 0;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	75fb      	strb	r3, [r7, #23]

        if(!protIsSome(&xHandle->xTxFifo))
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	f241 3388 	movw	r3, #5000	; 0x1388
 800a7fc:	4413      	add	r3, r2
 800a7fe:	4618      	mov	r0, r3
 800a800:	f001 f861 	bl	800b8c6 <protIsSome>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d147      	bne.n	800a89a <packager+0x1aa>
        {
          taskENTER_CRITICAL();
 800a80a:	f7ff fecb 	bl	800a5a4 <entercritical>
          if(!xHandle->TxBusy)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d13c      	bne.n	800a896 <packager+0x1a6>
          {
            xHandle->TxBusy = 1;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a822:	2201      	movs	r2, #1
 800a824:	701a      	strb	r2, [r3, #0]
            handled = 1;
 800a826:	2301      	movs	r3, #1
 800a828:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 800a82a:	f7ff fec2 	bl	800a5b2 <exitcritical>

            memcpy(&xHandle->BufTx[0],xHandle->BufSender,8);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f503 7040 	add.w	r0, r3, #768	; 0x300
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800a83a:	2208      	movs	r2, #8
 800a83c:	4619      	mov	r1, r3
 800a83e:	f007 facd 	bl	8011ddc <memcpy>
            if (xMsgLen) {
 800a842:	88fb      	ldrh	r3, [r7, #6]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d012      	beq.n	800a86e <packager+0x17e>
              memcpy(&xHandle->BufTx[8], &xHandle->BufSender[8],xMsgLen);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f503 7042 	add.w	r0, r3, #776	; 0x308
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	f241 0388 	movw	r3, #4232	; 0x1088
 800a854:	4413      	add	r3, r2
 800a856:	88fa      	ldrh	r2, [r7, #6]
 800a858:	4619      	mov	r1, r3
 800a85a:	f007 fabf 	bl	8011ddc <memcpy>
              memcpy(&xHandle->BufTx[xMsgLen+8], &aCrc15,2);
 800a85e:	88fb      	ldrh	r3, [r7, #6]
 800a860:	3308      	adds	r3, #8
 800a862:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	4413      	add	r3, r2
 800a86a:	8a3a      	ldrh	r2, [r7, #16]
 800a86c:	801a      	strh	r2, [r3, #0]
            }

            CacheClean(xHandle->BufTx, aTotLen);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a874:	8aba      	ldrh	r2, [r7, #20]
 800a876:	4611      	mov	r1, r2
 800a878:	4618      	mov	r0, r3
 800a87a:	f7ff fedf 	bl	800a63c <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, aTotLen);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a884:	6818      	ldr	r0, [r3, #0]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a88c:	8aba      	ldrh	r2, [r7, #20]
 800a88e:	4619      	mov	r1, r3
 800a890:	f006 fb24 	bl	8010edc <HAL_UART_Transmit_DMA>
 800a894:	e001      	b.n	800a89a <packager+0x1aa>
          }
          else taskEXIT_CRITICAL();
 800a896:	f7ff fe8c 	bl	800a5b2 <exitcritical>
        }

        if(!handled)
 800a89a:	7dfb      	ldrb	r3, [r7, #23]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d123      	bne.n	800a8e8 <packager+0x1f8>
        {
          protPushSequence(&xHandle->xTxFifo,xHandle->BufSender,8);
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	f241 3388 	movw	r3, #5000	; 0x1388
 800a8a6:	4413      	add	r3, r2
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	f502 5184 	add.w	r1, r2, #4224	; 0x1080
 800a8ae:	2208      	movs	r2, #8
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f000 ffb0 	bl	800b816 <protPushSequence>
          if (xMsgLen) {
 800a8b6:	88fb      	ldrh	r3, [r7, #6]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d015      	beq.n	800a8e8 <packager+0x1f8>
              protPushSequence(&xHandle->xTxFifo,&xHandle->BufSender[8],xMsgLen);
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	f241 3388 	movw	r3, #5000	; 0x1388
 800a8c2:	4413      	add	r3, r2
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	f241 0188 	movw	r1, #4232	; 0x1088
 800a8ca:	4411      	add	r1, r2
 800a8cc:	88fa      	ldrh	r2, [r7, #6]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 ffa1 	bl	800b816 <protPushSequence>
              protPushSequence(&xHandle->xTxFifo,&aCrc15,2);
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	f241 3388 	movw	r3, #5000	; 0x1388
 800a8da:	4413      	add	r3, r2
 800a8dc:	f107 0110 	add.w	r1, r7, #16
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f000 ff97 	bl	800b816 <protPushSequence>
          }
        }
    }
}
 800a8e8:	bf00      	nop
 800a8ea:	3718      	adds	r7, #24
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <acker>:

static inline void acker(sGetterHandle* xHandle, uint16_t aPacketId, eTransChannels xChaDest) {
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	807b      	strh	r3, [r7, #2]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	707b      	strb	r3, [r7, #1]

    if (xHandle)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d06f      	beq.n	800a9e6 <acker+0xf6>
    {
        uint16_t aTotLen = 8;
 800a906:	2308      	movs	r3, #8
 800a908:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = (( etrACIS | ( xChaDest << 3 ) ) | HEADER_ACK_BIT);
 800a90a:	787b      	ldrb	r3, [r7, #1]
 800a90c:	00db      	lsls	r3, r3, #3
 800a90e:	b25b      	sxtb	r3, r3
 800a910:	f063 037d 	orn	r3, r3, #125	; 0x7d
 800a914:	b25b      	sxtb	r3, r3
 800a916:	74fb      	strb	r3, [r7, #19]
        uint8_t header[8];

        header[0] = 0x55;
 800a918:	2355      	movs	r3, #85	; 0x55
 800a91a:	723b      	strb	r3, [r7, #8]
        header[1] = 0x55;
 800a91c:	2355      	movs	r3, #85	; 0x55
 800a91e:	727b      	strb	r3, [r7, #9]
        header[2] = aHeadByte;
 800a920:	7cfb      	ldrb	r3, [r7, #19]
 800a922:	72bb      	strb	r3, [r7, #10]
        header[3] = aTotLen & 0xFF;
 800a924:	8abb      	ldrh	r3, [r7, #20]
 800a926:	b2db      	uxtb	r3, r3
 800a928:	72fb      	strb	r3, [r7, #11]
        header[4] = (aTotLen >> 8) & 0xFF;
 800a92a:	8abb      	ldrh	r3, [r7, #20]
 800a92c:	0a1b      	lsrs	r3, r3, #8
 800a92e:	b29b      	uxth	r3, r3
 800a930:	b2db      	uxtb	r3, r3
 800a932:	733b      	strb	r3, [r7, #12]
        header[5] = aPacketId & 0xFF;
 800a934:	887b      	ldrh	r3, [r7, #2]
 800a936:	b2db      	uxtb	r3, r3
 800a938:	737b      	strb	r3, [r7, #13]
        header[6] = (aPacketId >> 8) & 0xFF;
 800a93a:	887b      	ldrh	r3, [r7, #2]
 800a93c:	0a1b      	lsrs	r3, r3, #8
 800a93e:	b29b      	uxth	r3, r3
 800a940:	b2db      	uxtb	r3, r3
 800a942:	73bb      	strb	r3, [r7, #14]
        header[7] = CRC8_Generate(header, 7);
 800a944:	f107 0308 	add.w	r3, r7, #8
 800a948:	2107      	movs	r1, #7
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fc fefc 	bl	8007748 <CRC8_Generate>
 800a950:	4603      	mov	r3, r0
 800a952:	73fb      	strb	r3, [r7, #15]

        uint8_t handled = 0;
 800a954:	2300      	movs	r3, #0
 800a956:	75fb      	strb	r3, [r7, #23]
        if(!protIsSome(&xHandle->xTxFifo))
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a95e:	4413      	add	r3, r2
 800a960:	4618      	mov	r0, r3
 800a962:	f000 ffb0 	bl	800b8c6 <protIsSome>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d12f      	bne.n	800a9cc <acker+0xdc>
        {
          taskENTER_CRITICAL();
 800a96c:	f7ff fe1a 	bl	800a5a4 <entercritical>
          if(!xHandle->TxBusy)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d124      	bne.n	800a9c8 <acker+0xd8>
          {
            xHandle->TxBusy = 1;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a984:	2201      	movs	r2, #1
 800a986:	701a      	strb	r2, [r3, #0]
            handled = 1;
 800a988:	2301      	movs	r3, #1
 800a98a:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 800a98c:	f7ff fe11 	bl	800a5b2 <exitcritical>
            memcpy(xHandle->BufTx,header,8);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a996:	461a      	mov	r2, r3
 800a998:	f107 0308 	add.w	r3, r7, #8
 800a99c:	cb03      	ldmia	r3!, {r0, r1}
 800a99e:	6010      	str	r0, [r2, #0]
 800a9a0:	6051      	str	r1, [r2, #4]
            CacheClean(xHandle->BufTx, 8);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a9a8:	2108      	movs	r1, #8
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7ff fe46 	bl	800a63c <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, 8);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a9b6:	6818      	ldr	r0, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a9be:	2208      	movs	r2, #8
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	f006 fa8b 	bl	8010edc <HAL_UART_Transmit_DMA>
 800a9c6:	e001      	b.n	800a9cc <acker+0xdc>
          }
          else taskEXIT_CRITICAL();
 800a9c8:	f7ff fdf3 	bl	800a5b2 <exitcritical>
        }

        if(!handled)
 800a9cc:	7dfb      	ldrb	r3, [r7, #23]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d109      	bne.n	800a9e6 <acker+0xf6>
        {
          protPushSequence(&xHandle->xTxFifo,header,8);
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	f241 3388 	movw	r3, #5000	; 0x1388
 800a9d8:	4413      	add	r3, r2
 800a9da:	f107 0108 	add.w	r1, r7, #8
 800a9de:	2208      	movs	r2, #8
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f000 ff18 	bl	800b816 <protPushSequence>
        }
    }
}
 800a9e6:	bf00      	nop
 800a9e8:	3718      	adds	r7, #24
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
	...

0800a9f0 <xSender>:


int8_t xSender(eTransChannels xChaDest, uint8_t* xMsgPtr, uint32_t xMsgLen)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b088      	sub	sp, #32
 800a9f4:	af02      	add	r7, sp, #8
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	607a      	str	r2, [r7, #4]
 800a9fc:	73fb      	strb	r3, [r7, #15]
  uint32_t now = Delay_Tick;
 800a9fe:	4b3d      	ldr	r3, [pc, #244]	; (800aaf4 <xSender+0x104>)
 800aa00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa02:	617b      	str	r3, [r7, #20]

  sGetterHandle * handle = &xHandles[0];
 800aa04:	4b3c      	ldr	r3, [pc, #240]	; (800aaf8 <xSender+0x108>)
 800aa06:	613b      	str	r3, [r7, #16]
    if(handle)
      break;
  }
  */

  if(handle)
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d06c      	beq.n	800aae8 <xSender+0xf8>
  {
    taskENTER_CRITICAL();
 800aa0e:	f7ff fdc9 	bl	800a5a4 <entercritical>
    if(NeedAckPacket)
 800aa12:	4b3a      	ldr	r3, [pc, #232]	; (800aafc <xSender+0x10c>)
 800aa14:	881b      	ldrh	r3, [r3, #0]
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d045      	beq.n	800aaa8 <xSender+0xb8>
    {
      if(ReceivedAckPacket)
 800aa1c:	4b38      	ldr	r3, [pc, #224]	; (800ab00 <xSender+0x110>)
 800aa1e:	881b      	ldrh	r3, [r3, #0]
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d009      	beq.n	800aa3a <xSender+0x4a>
      {
        NeedAckPacket = 0;
 800aa26:	4b35      	ldr	r3, [pc, #212]	; (800aafc <xSender+0x10c>)
 800aa28:	2200      	movs	r2, #0
 800aa2a:	801a      	strh	r2, [r3, #0]
        NeededAckPacketId = 0;
 800aa2c:	4b35      	ldr	r3, [pc, #212]	; (800ab04 <xSender+0x114>)
 800aa2e:	2200      	movs	r2, #0
 800aa30:	801a      	strh	r2, [r3, #0]
        taskEXIT_CRITICAL();
 800aa32:	f7ff fdbe 	bl	800a5b2 <exitcritical>
        return 1;
 800aa36:	2301      	movs	r3, #1
 800aa38:	e057      	b.n	800aaea <xSender+0xfa>
      }
      else
      {
        if(DelayDiff(now, LastNotAckedTime) > RETRIES_TIMEOUT)
 800aa3a:	4b33      	ldr	r3, [pc, #204]	; (800ab08 <xSender+0x118>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4619      	mov	r1, r3
 800aa40:	6978      	ldr	r0, [r7, #20]
 800aa42:	f7fd fc6f 	bl	8008324 <DelayDiff>
 800aa46:	4602      	mov	r2, r0
 800aa48:	f641 3358 	movw	r3, #7000	; 0x1b58
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d928      	bls.n	800aaa2 <xSender+0xb2>
        {
          if(RetriesPacket > RETRIES_MAX)
 800aa50:	4b2e      	ldr	r3, [pc, #184]	; (800ab0c <xSender+0x11c>)
 800aa52:	881b      	ldrh	r3, [r3, #0]
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	2b05      	cmp	r3, #5
 800aa58:	d90a      	bls.n	800aa70 <xSender+0x80>
          {
            NeedAckPacket = 0;
 800aa5a:	4b28      	ldr	r3, [pc, #160]	; (800aafc <xSender+0x10c>)
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	801a      	strh	r2, [r3, #0]
            NeededAckPacketId = 0;
 800aa60:	4b28      	ldr	r3, [pc, #160]	; (800ab04 <xSender+0x114>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	801a      	strh	r2, [r3, #0]
            taskEXIT_CRITICAL();
 800aa66:	f7ff fda4 	bl	800a5b2 <exitcritical>
            return -1;
 800aa6a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa6e:	e03c      	b.n	800aaea <xSender+0xfa>
          }
          LastNotAckedTime = now;
 800aa70:	4a25      	ldr	r2, [pc, #148]	; (800ab08 <xSender+0x118>)
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	6013      	str	r3, [r2, #0]
          RetriesPacket++;
 800aa76:	4b25      	ldr	r3, [pc, #148]	; (800ab0c <xSender+0x11c>)
 800aa78:	881b      	ldrh	r3, [r3, #0]
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	4b22      	ldr	r3, [pc, #136]	; (800ab0c <xSender+0x11c>)
 800aa82:	801a      	strh	r2, [r3, #0]
          taskEXIT_CRITICAL();
 800aa84:	f7ff fd95 	bl	800a5b2 <exitcritical>
          packager(handle, xMsgPtr, xMsgLen, xChaDest, NeededAckPacketId);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	b29a      	uxth	r2, r3
 800aa8c:	4b1d      	ldr	r3, [pc, #116]	; (800ab04 <xSender+0x114>)
 800aa8e:	881b      	ldrh	r3, [r3, #0]
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	7bf9      	ldrb	r1, [r7, #15]
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	460b      	mov	r3, r1
 800aa98:	68b9      	ldr	r1, [r7, #8]
 800aa9a:	6938      	ldr	r0, [r7, #16]
 800aa9c:	f7ff fe28 	bl	800a6f0 <packager>
 800aaa0:	e022      	b.n	800aae8 <xSender+0xf8>
        }
        else taskEXIT_CRITICAL();
 800aaa2:	f7ff fd86 	bl	800a5b2 <exitcritical>
 800aaa6:	e01f      	b.n	800aae8 <xSender+0xf8>
      }
    }
    else
    {
      ReceivedAckPacket = 0;
 800aaa8:	4b15      	ldr	r3, [pc, #84]	; (800ab00 <xSender+0x110>)
 800aaaa:	2200      	movs	r2, #0
 800aaac:	801a      	strh	r2, [r3, #0]
      NeedAckPacket = 1;
 800aaae:	4b13      	ldr	r3, [pc, #76]	; (800aafc <xSender+0x10c>)
 800aab0:	2201      	movs	r2, #1
 800aab2:	801a      	strh	r2, [r3, #0]
      LastNotAckedTime = now;
 800aab4:	4a14      	ldr	r2, [pc, #80]	; (800ab08 <xSender+0x118>)
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	6013      	str	r3, [r2, #0]
      RetriesPacket = 0;
 800aaba:	4b14      	ldr	r3, [pc, #80]	; (800ab0c <xSender+0x11c>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	801a      	strh	r2, [r3, #0]
      taskEXIT_CRITICAL();
 800aac0:	f7ff fd77 	bl	800a5b2 <exitcritical>
      NeededAckPacketId = calculatePacketId();
 800aac4:	f7ff fdda 	bl	800a67c <calculatePacketId>
 800aac8:	4603      	mov	r3, r0
 800aaca:	461a      	mov	r2, r3
 800aacc:	4b0d      	ldr	r3, [pc, #52]	; (800ab04 <xSender+0x114>)
 800aace:	801a      	strh	r2, [r3, #0]
      packager(handle, xMsgPtr, xMsgLen, xChaDest, NeededAckPacketId);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	4b0b      	ldr	r3, [pc, #44]	; (800ab04 <xSender+0x114>)
 800aad6:	881b      	ldrh	r3, [r3, #0]
 800aad8:	b29b      	uxth	r3, r3
 800aada:	7bf9      	ldrb	r1, [r7, #15]
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	460b      	mov	r3, r1
 800aae0:	68b9      	ldr	r1, [r7, #8]
 800aae2:	6938      	ldr	r0, [r7, #16]
 800aae4:	f7ff fe04 	bl	800a6f0 <packager>
    }
  }
  return 0;
 800aae8:	2300      	movs	r3, #0

}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3718      	adds	r7, #24
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	40000c00 	.word	0x40000c00
 800aaf8:	200104e0 	.word	0x200104e0
 800aafc:	2002147e 	.word	0x2002147e
 800ab00:	200104c8 	.word	0x200104c8
 800ab04:	20021480 	.word	0x20021480
 800ab08:	20021484 	.word	0x20021484
 800ab0c:	2002147c 	.word	0x2002147c

0800ab10 <parser>:

static inline void parser(sProFIFO* xFifo, uint32_t xPacketId, uint32_t xDataLen, eTransChannels xChaSrc, eTransChannels xChaDest) {
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b08e      	sub	sp, #56	; 0x38
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	607a      	str	r2, [r7, #4]
 800ab1c:	70fb      	strb	r3, [r7, #3]

  uint32_t aCount;
  uint8_t data;
  uint8_t sCount;
  sGetterHandle * hDest = NULL;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t header[8];
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800ab22:	2300      	movs	r3, #0
 800ab24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab26:	e027      	b.n	800ab78 <parser+0x68>
  {
    for(int j = 0; j < sizeof(xHandles[j].xChannels) / sizeof(xHandles[j].xChannels[0]); j++)
 800ab28:	2300      	movs	r3, #0
 800ab2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab2c:	e01b      	b.n	800ab66 <parser+0x56>
    {
      if(xHandles[i].xChannels[j] == xChaSrc)
 800ab2e:	4aa7      	ldr	r2, [pc, #668]	; (800adcc <parser+0x2bc>)
 800ab30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab32:	f241 31c4 	movw	r1, #5060	; 0x13c4
 800ab36:	fb01 f303 	mul.w	r3, r1, r3
 800ab3a:	441a      	add	r2, r3
 800ab3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3e:	441a      	add	r2, r3
 800ab40:	f241 3384 	movw	r3, #4996	; 0x1384
 800ab44:	4413      	add	r3, r2
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	78fa      	ldrb	r2, [r7, #3]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d108      	bne.n	800ab60 <parser+0x50>
      {
        hDest = &xHandles[i];
 800ab4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab50:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800ab54:	fb02 f303 	mul.w	r3, r2, r3
 800ab58:	4a9c      	ldr	r2, [pc, #624]	; (800adcc <parser+0x2bc>)
 800ab5a:	4413      	add	r3, r2
 800ab5c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800ab5e:	e005      	b.n	800ab6c <parser+0x5c>
    for(int j = 0; j < sizeof(xHandles[j].xChannels) / sizeof(xHandles[j].xChannels[0]); j++)
 800ab60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab62:	3301      	adds	r3, #1
 800ab64:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	d9e0      	bls.n	800ab2e <parser+0x1e>
      }
    }
    if(hDest)
 800ab6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d106      	bne.n	800ab80 <parser+0x70>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800ab72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab74:	3301      	adds	r3, #1
 800ab76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d0d4      	beq.n	800ab28 <parser+0x18>
 800ab7e:	e000      	b.n	800ab82 <parser+0x72>
      break;
 800ab80:	bf00      	nop
  }


  switch (xChaDest)
 800ab82:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d006      	beq.n	800ab98 <parser+0x88>
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	f000 808f 	beq.w	800acae <parser+0x19e>
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	f000 808c 	beq.w	800acae <parser+0x19e>
 800ab96:	e0fb      	b.n	800ad90 <parser+0x280>
  {

      case etrACIS:
      {
          if (xDataLen)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d04f      	beq.n	800ac3e <parser+0x12e>
          {
              for(int i = 0; i < 8; i++)
 800ab9e:	2300      	movs	r3, #0
 800aba0:	627b      	str	r3, [r7, #36]	; 0x24
 800aba2:	e00a      	b.n	800abba <parser+0xaa>
                protPull(xFifo, &header[i]);
 800aba4:	f107 0214 	add.w	r2, r7, #20
 800aba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abaa:	4413      	add	r3, r2
 800abac:	4619      	mov	r1, r3
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f000 fe51 	bl	800b856 <protPull>
              for(int i = 0; i < 8; i++)
 800abb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb6:	3301      	adds	r3, #1
 800abb8:	627b      	str	r3, [r7, #36]	; 0x24
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbc:	2b07      	cmp	r3, #7
 800abbe:	ddf1      	ble.n	800aba4 <parser+0x94>

              for (aCount = 0; aCount < xDataLen - 10; aCount++)
 800abc0:	2300      	movs	r3, #0
 800abc2:	637b      	str	r3, [r7, #52]	; 0x34
 800abc4:	e010      	b.n	800abe8 <parser+0xd8>
              {
                protPull(xFifo, &data);
 800abc6:	f107 031d 	add.w	r3, r7, #29
 800abca:	4619      	mov	r1, r3
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 fe42 	bl	800b856 <protPull>
                hDest->BufParser[aCount]=data;
 800abd2:	7f79      	ldrb	r1, [r7, #29]
 800abd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd8:	4413      	add	r3, r2
 800abda:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800abde:	460a      	mov	r2, r1
 800abe0:	701a      	strb	r2, [r3, #0]
              for (aCount = 0; aCount < xDataLen - 10; aCount++)
 800abe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe4:	3301      	adds	r3, #1
 800abe6:	637b      	str	r3, [r7, #52]	; 0x34
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	3b0a      	subs	r3, #10
 800abec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abee:	429a      	cmp	r2, r3
 800abf0:	d3e9      	bcc.n	800abc6 <parser+0xb6>
              }
              protPull(xFifo, &data);
 800abf2:	f107 031d 	add.w	r3, r7, #29
 800abf6:	4619      	mov	r1, r3
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f000 fe2c 	bl	800b856 <protPull>
              protPull(xFifo, &data);
 800abfe:	f107 031d 	add.w	r3, r7, #29
 800ac02:	4619      	mov	r1, r3
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 fe26 	bl	800b856 <protPull>

              hDest->BufParser[aCount]=0;
 800ac0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0e:	4413      	add	r3, r2
 800ac10:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800ac14:	2200      	movs	r2, #0
 800ac16:	701a      	strb	r2, [r3, #0]

              if(hDest) acker(hDest,xPacketId,xChaSrc);
 800ac18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d006      	beq.n	800ac2c <parser+0x11c>
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	78fa      	ldrb	r2, [r7, #3]
 800ac24:	4619      	mov	r1, r3
 800ac26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac28:	f7ff fe62 	bl	800a8f0 <acker>

              acis_parse_command(xChaSrc, hDest->BufParser, aCount);
 800ac2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2e:	f503 5190 	add.w	r1, r3, #4608	; 0x1200
 800ac32:	78fb      	ldrb	r3, [r7, #3]
 800ac34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7f9 fba4 	bl	8004384 <acis_parse_command>
              }
              taskEXIT_CRITICAL();

          }

          break;
 800ac3c:	e0c2      	b.n	800adc4 <parser+0x2b4>
              for (aCount = 0; aCount < 8; aCount++)
 800ac3e:	2300      	movs	r3, #0
 800ac40:	637b      	str	r3, [r7, #52]	; 0x34
 800ac42:	e013      	b.n	800ac6c <parser+0x15c>
                for(int i = 0; i < 8; i++)
 800ac44:	2300      	movs	r3, #0
 800ac46:	623b      	str	r3, [r7, #32]
 800ac48:	e00a      	b.n	800ac60 <parser+0x150>
                  protPull(xFifo, &header[i]);
 800ac4a:	f107 0214 	add.w	r2, r7, #20
 800ac4e:	6a3b      	ldr	r3, [r7, #32]
 800ac50:	4413      	add	r3, r2
 800ac52:	4619      	mov	r1, r3
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f000 fdfe 	bl	800b856 <protPull>
                for(int i = 0; i < 8; i++)
 800ac5a:	6a3b      	ldr	r3, [r7, #32]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	623b      	str	r3, [r7, #32]
 800ac60:	6a3b      	ldr	r3, [r7, #32]
 800ac62:	2b07      	cmp	r3, #7
 800ac64:	ddf1      	ble.n	800ac4a <parser+0x13a>
              for (aCount = 0; aCount < 8; aCount++)
 800ac66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac68:	3301      	adds	r3, #1
 800ac6a:	637b      	str	r3, [r7, #52]	; 0x34
 800ac6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6e:	2b07      	cmp	r3, #7
 800ac70:	d9e8      	bls.n	800ac44 <parser+0x134>
              taskENTER_CRITICAL();
 800ac72:	f7ff fc97 	bl	800a5a4 <entercritical>
              if(NeedAckPacket && NeededAckPacketId != 0 && NeededAckPacketId == xPacketId && !ReceivedAckPacket)
 800ac76:	4b56      	ldr	r3, [pc, #344]	; (800add0 <parser+0x2c0>)
 800ac78:	881b      	ldrh	r3, [r3, #0]
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d013      	beq.n	800aca8 <parser+0x198>
 800ac80:	4b54      	ldr	r3, [pc, #336]	; (800add4 <parser+0x2c4>)
 800ac82:	881b      	ldrh	r3, [r3, #0]
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00e      	beq.n	800aca8 <parser+0x198>
 800ac8a:	4b52      	ldr	r3, [pc, #328]	; (800add4 <parser+0x2c4>)
 800ac8c:	881b      	ldrh	r3, [r3, #0]
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	461a      	mov	r2, r3
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d107      	bne.n	800aca8 <parser+0x198>
 800ac98:	4b4f      	ldr	r3, [pc, #316]	; (800add8 <parser+0x2c8>)
 800ac9a:	881b      	ldrh	r3, [r3, #0]
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d102      	bne.n	800aca8 <parser+0x198>
                ReceivedAckPacket = 1;
 800aca2:	4b4d      	ldr	r3, [pc, #308]	; (800add8 <parser+0x2c8>)
 800aca4:	2201      	movs	r2, #1
 800aca6:	801a      	strh	r2, [r3, #0]
              taskEXIT_CRITICAL();
 800aca8:	f7ff fc83 	bl	800a5b2 <exitcritical>
          break;
 800acac:	e08a      	b.n	800adc4 <parser+0x2b4>
      }

      case etrCTRL:
      case etrPC:
      {
        sCount = (xDataLen > 10) ? xDataLen : 8;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2b0a      	cmp	r3, #10
 800acb2:	d902      	bls.n	800acba <parser+0x1aa>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	e000      	b.n	800acbc <parser+0x1ac>
 800acba:	2308      	movs	r3, #8
 800acbc:	77bb      	strb	r3, [r7, #30]

        if(hDest)
 800acbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d065      	beq.n	800ad90 <parser+0x280>
        {

          uint8_t handled = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	77fb      	strb	r3, [r7, #31]
          if(!protIsSome(&hDest->xTxFifo))
 800acc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acca:	f241 3388 	movw	r3, #5000	; 0x1388
 800acce:	4413      	add	r3, r2
 800acd0:	4618      	mov	r0, r3
 800acd2:	f000 fdf8 	bl	800b8c6 <protIsSome>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d13b      	bne.n	800ad54 <parser+0x244>
          {
            taskENTER_CRITICAL();
 800acdc:	f7ff fc62 	bl	800a5a4 <entercritical>
            if(!hDest->TxBusy)
 800ace0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace2:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b00      	cmp	r3, #0
 800acec:	d130      	bne.n	800ad50 <parser+0x240>
            {
              hDest->TxBusy = 1;
 800acee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf0:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800acf4:	2201      	movs	r2, #1
 800acf6:	701a      	strb	r2, [r3, #0]
              handled = 1;
 800acf8:	2301      	movs	r3, #1
 800acfa:	77fb      	strb	r3, [r7, #31]
              taskEXIT_CRITICAL();
 800acfc:	f7ff fc59 	bl	800a5b2 <exitcritical>

              for (aCount = 0; aCount < sCount; aCount++)
 800ad00:	2300      	movs	r3, #0
 800ad02:	637b      	str	r3, [r7, #52]	; 0x34
 800ad04:	e00b      	b.n	800ad1e <parser+0x20e>
              {
                protPull(xFifo, &hDest->BufTx[aCount]);
 800ad06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad08:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ad0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad0e:	4413      	add	r3, r2
 800ad10:	4619      	mov	r1, r3
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f000 fd9f 	bl	800b856 <protPull>
              for (aCount = 0; aCount < sCount; aCount++)
 800ad18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	637b      	str	r3, [r7, #52]	; 0x34
 800ad1e:	7fbb      	ldrb	r3, [r7, #30]
 800ad20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d3ef      	bcc.n	800ad06 <parser+0x1f6>
              }

              CacheClean(hDest->BufTx, sCount);
 800ad26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad28:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ad2c:	7fba      	ldrb	r2, [r7, #30]
 800ad2e:	4611      	mov	r1, r2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7ff fc83 	bl	800a63c <CacheClean>
              HAL_UART_Transmit_DMA(hDest->xUart, hDest->BufTx, sCount);
 800ad36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad38:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ad3c:	6818      	ldr	r0, [r3, #0]
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad40:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ad44:	7fba      	ldrb	r2, [r7, #30]
 800ad46:	b292      	uxth	r2, r2
 800ad48:	4619      	mov	r1, r3
 800ad4a:	f006 f8c7 	bl	8010edc <HAL_UART_Transmit_DMA>
 800ad4e:	e001      	b.n	800ad54 <parser+0x244>
            }
            else taskEXIT_CRITICAL();
 800ad50:	f7ff fc2f 	bl	800a5b2 <exitcritical>
          }

          if(!handled)
 800ad54:	7ffb      	ldrb	r3, [r7, #31]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d133      	bne.n	800adc2 <parser+0x2b2>
          {
            for (aCount = 0; aCount < sCount; aCount++)
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	637b      	str	r3, [r7, #52]	; 0x34
 800ad5e:	e012      	b.n	800ad86 <parser+0x276>
            {
              protPull(xFifo, &data);
 800ad60:	f107 031d 	add.w	r3, r7, #29
 800ad64:	4619      	mov	r1, r3
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f000 fd75 	bl	800b856 <protPull>
              protPush(&hDest->xTxFifo, &data);
 800ad6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad6e:	f241 3388 	movw	r3, #5000	; 0x1388
 800ad72:	4413      	add	r3, r2
 800ad74:	f107 021d 	add.w	r2, r7, #29
 800ad78:	4611      	mov	r1, r2
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 fd5c 	bl	800b838 <protPush>
            for (aCount = 0; aCount < sCount; aCount++)
 800ad80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad82:	3301      	adds	r3, #1
 800ad84:	637b      	str	r3, [r7, #52]	; 0x34
 800ad86:	7fbb      	ldrb	r3, [r7, #30]
 800ad88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d3e8      	bcc.n	800ad60 <parser+0x250>
            }
          }

          break;
 800ad8e:	e018      	b.n	800adc2 <parser+0x2b2>
      }
      /* no break */

      default:
      {
        sCount = (xDataLen > 10) ? xDataLen : 8;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b0a      	cmp	r3, #10
 800ad94:	d902      	bls.n	800ad9c <parser+0x28c>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	e000      	b.n	800ad9e <parser+0x28e>
 800ad9c:	2308      	movs	r3, #8
 800ad9e:	77bb      	strb	r3, [r7, #30]
        for (aCount = 0; aCount < sCount; aCount++)
 800ada0:	2300      	movs	r3, #0
 800ada2:	637b      	str	r3, [r7, #52]	; 0x34
 800ada4:	e008      	b.n	800adb8 <parser+0x2a8>
        {
          protPull(xFifo, &data);
 800ada6:	f107 031d 	add.w	r3, r7, #29
 800adaa:	4619      	mov	r1, r3
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f000 fd52 	bl	800b856 <protPull>
        for (aCount = 0; aCount < sCount; aCount++)
 800adb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb4:	3301      	adds	r3, #1
 800adb6:	637b      	str	r3, [r7, #52]	; 0x34
 800adb8:	7fbb      	ldrb	r3, [r7, #30]
 800adba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d3f2      	bcc.n	800ada6 <parser+0x296>
        }
        break;
 800adc0:	e000      	b.n	800adc4 <parser+0x2b4>
          break;
 800adc2:	bf00      	nop
      }
  }
}
 800adc4:	bf00      	nop
 800adc6:	3738      	adds	r7, #56	; 0x38
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	200104e0 	.word	0x200104e0
 800add0:	2002147e 	.word	0x2002147e
 800add4:	20021480 	.word	0x20021480
 800add8:	200104c8 	.word	0x200104c8

0800addc <lookByte>:

static inline uint8_t lookByte(sProFIFO* xFifo, uint32_t xOffset) { uint8_t aByte; protLook(xFifo,xOffset,&aByte); return aByte; }
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
 800ade6:	f107 030f 	add.w	r3, r7, #15
 800adea:	461a      	mov	r2, r3
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fd40 	bl	800b874 <protLook>
 800adf4:	7bfb      	ldrb	r3, [r7, #15]
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <countCRC8>:

static inline uint8_t countCRC8(sGetterHandle * handle) {
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b084      	sub	sp, #16
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
    uint32_t i; uint8_t aCrc8 = 0;
 800ae06:	2300      	movs	r3, #0
 800ae08:	72fb      	strb	r3, [r7, #11]
    for (i=0; i<7; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60fb      	str	r3, [r7, #12]
 800ae0e:	e013      	b.n	800ae38 <countCRC8+0x3a>
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	f241 339c 	movw	r3, #5020	; 0x139c
 800ae16:	4413      	add	r3, r2
 800ae18:	68f9      	ldr	r1, [r7, #12]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7ff ffde 	bl	800addc <lookByte>
 800ae20:	4603      	mov	r3, r0
 800ae22:	4619      	mov	r1, r3
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	4413      	add	r3, r2
 800ae2a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800ae2e:	460a      	mov	r2, r1
 800ae30:	701a      	strb	r2, [r3, #0]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	3301      	adds	r3, #1
 800ae36:	60fb      	str	r3, [r7, #12]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2b06      	cmp	r3, #6
 800ae3c:	d9e8      	bls.n	800ae10 <countCRC8+0x12>
    aCrc8 = CRC8_Generate(handle->BufParser, 7);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800ae44:	2107      	movs	r1, #7
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fc fc7e 	bl	8007748 <CRC8_Generate>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	72fb      	strb	r3, [r7, #11]
    return aCrc8;
 800ae50:	7afb      	ldrb	r3, [r7, #11]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <countCRC16>:

static inline int32_t countCRC16(sGetterHandle * handle, uint32_t xLen) {
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b084      	sub	sp, #16
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
 800ae62:	6039      	str	r1, [r7, #0]
    uint32_t i; int32_t aCrc16 = 0;
 800ae64:	2300      	movs	r3, #0
 800ae66:	60bb      	str	r3, [r7, #8]
    for (i=0; i<xLen-2; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 800ae68:	2300      	movs	r3, #0
 800ae6a:	60fb      	str	r3, [r7, #12]
 800ae6c:	e013      	b.n	800ae96 <countCRC16+0x3c>
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	f241 339c 	movw	r3, #5020	; 0x139c
 800ae74:	4413      	add	r3, r2
 800ae76:	68f9      	ldr	r1, [r7, #12]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7ff ffaf 	bl	800addc <lookByte>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	4619      	mov	r1, r3
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	4413      	add	r3, r2
 800ae88:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800ae8c:	460a      	mov	r2, r1
 800ae8e:	701a      	strb	r2, [r3, #0]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	3301      	adds	r3, #1
 800ae94:	60fb      	str	r3, [r7, #12]
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	3b02      	subs	r3, #2
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d3e6      	bcc.n	800ae6e <countCRC16+0x14>
    aCrc16 = CRC16_Generate(handle->BufParser, xLen-2);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	3b02      	subs	r3, #2
 800aeaa:	4619      	mov	r1, r3
 800aeac:	4610      	mov	r0, r2
 800aeae:	f7fc fc2f 	bl	8007710 <CRC16_Generate>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	60bb      	str	r3, [r7, #8]
    return aCrc16;
 800aeb6:	68bb      	ldr	r3, [r7, #8]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <Getter>:

static void Getter(sGetterHandle * handle)
{
 800aec0:	b5b0      	push	{r4, r5, r7, lr}
 800aec2:	b08c      	sub	sp, #48	; 0x30
 800aec4:	af02      	add	r7, sp, #8
 800aec6:	6078      	str	r0, [r7, #4]
  uint32_t dataSkip = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	627b      	str	r3, [r7, #36]	; 0x24
  sProFIFO* xFifo = &handle->xRxFifo;
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	f241 339c 	movw	r3, #5020	; 0x139c
 800aed2:	4413      	add	r3, r2
 800aed4:	617b      	str	r3, [r7, #20]
  uint32_t * pDataReceiving = &handle->dataReceiving;
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800aedc:	4413      	add	r3, r2
 800aede:	613b      	str	r3, [r7, #16]
  uint32_t * pDataLen = &handle->dataLen;
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	f241 33b4 	movw	r3, #5044	; 0x13b4
 800aee6:	4413      	add	r3, r2
 800aee8:	60fb      	str	r3, [r7, #12]
  uint16_t * pPacketId = &handle->packetId;
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800aef0:	4413      	add	r3, r2
 800aef2:	60bb      	str	r3, [r7, #8]

  uint16_t packetId = *pPacketId;
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t dataLen = *pDataLen;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	61fb      	str	r3, [r7, #28]
  uint32_t dataReceiving = *pDataReceiving;
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	61bb      	str	r3, [r7, #24]
  if(dataReceiving)
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d043      	beq.n	800af94 <Getter+0xd4>
  {
    // Check if we got a data
    if (protGetSize(xFifo) >= dataLen)
 800af0c:	6978      	ldr	r0, [r7, #20]
 800af0e:	f000 fb97 	bl	800b640 <protGetSize>
 800af12:	4602      	mov	r2, r0
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	4293      	cmp	r3, r2
 800af18:	f200 80ad 	bhi.w	800b076 <Getter+0x1b6>
    {
        if (countCRC16(handle,dataLen) == lookByte(xFifo,dataLen-2) + (lookByte(xFifo,dataLen-1) << 8))
 800af1c:	69f9      	ldr	r1, [r7, #28]
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f7ff ff9b 	bl	800ae5a <countCRC16>
 800af24:	4604      	mov	r4, r0
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	3b02      	subs	r3, #2
 800af2a:	4619      	mov	r1, r3
 800af2c:	6978      	ldr	r0, [r7, #20]
 800af2e:	f7ff ff55 	bl	800addc <lookByte>
 800af32:	4603      	mov	r3, r0
 800af34:	461d      	mov	r5, r3
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	3b01      	subs	r3, #1
 800af3a:	4619      	mov	r1, r3
 800af3c:	6978      	ldr	r0, [r7, #20]
 800af3e:	f7ff ff4d 	bl	800addc <lookByte>
 800af42:	4603      	mov	r3, r0
 800af44:	021b      	lsls	r3, r3, #8
 800af46:	442b      	add	r3, r5
 800af48:	429c      	cmp	r4, r3
 800af4a:	d11c      	bne.n	800af86 <Getter+0xc6>
        {
            // Got True package
            parser(xFifo,packetId,dataLen,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 800af4c:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800af4e:	2102      	movs	r1, #2
 800af50:	6978      	ldr	r0, [r7, #20]
 800af52:	f7ff ff43 	bl	800addc <lookByte>
 800af56:	4603      	mov	r3, r0
 800af58:	4618      	mov	r0, r3
 800af5a:	f7ff fb31 	bl	800a5c0 <Msg_GetSrc>
 800af5e:	4603      	mov	r3, r0
 800af60:	b2dd      	uxtb	r5, r3
 800af62:	2102      	movs	r1, #2
 800af64:	6978      	ldr	r0, [r7, #20]
 800af66:	f7ff ff39 	bl	800addc <lookByte>
 800af6a:	4603      	mov	r3, r0
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7ff fb35 	bl	800a5dc <Msg_GetDest>
 800af72:	4603      	mov	r3, r0
 800af74:	b2db      	uxtb	r3, r3
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	462b      	mov	r3, r5
 800af7a:	69fa      	ldr	r2, [r7, #28]
 800af7c:	4621      	mov	r1, r4
 800af7e:	6978      	ldr	r0, [r7, #20]
 800af80:	f7ff fdc6 	bl	800ab10 <parser>
 800af84:	e001      	b.n	800af8a <Getter+0xca>
        }
        else { dataSkip=1; } // Wrong CRC16, so skip 1 byte
 800af86:	2301      	movs	r3, #1
 800af88:	627b      	str	r3, [r7, #36]	; 0x24
        dataReceiving = 0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	61bb      	str	r3, [r7, #24]
        dataLen = 0;
 800af8e:	2300      	movs	r3, #0
 800af90:	61fb      	str	r3, [r7, #28]
 800af92:	e070      	b.n	800b076 <Getter+0x1b6>
    }
  }
  else
  {
    if (protGetSize(xFifo) > 7)
 800af94:	6978      	ldr	r0, [r7, #20]
 800af96:	f000 fb53 	bl	800b640 <protGetSize>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b07      	cmp	r3, #7
 800af9e:	d96a      	bls.n	800b076 <Getter+0x1b6>
    {
      if(lookByte(xFifo,0) == 0x55 && lookByte(xFifo,1) == 0x55)
 800afa0:	2100      	movs	r1, #0
 800afa2:	6978      	ldr	r0, [r7, #20]
 800afa4:	f7ff ff1a 	bl	800addc <lookByte>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b55      	cmp	r3, #85	; 0x55
 800afac:	d161      	bne.n	800b072 <Getter+0x1b2>
 800afae:	2101      	movs	r1, #1
 800afb0:	6978      	ldr	r0, [r7, #20]
 800afb2:	f7ff ff13 	bl	800addc <lookByte>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b55      	cmp	r3, #85	; 0x55
 800afba:	d15a      	bne.n	800b072 <Getter+0x1b2>
      {
        if (countCRC8(handle) == lookByte(xFifo,7))
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f7ff ff1e 	bl	800adfe <countCRC8>
 800afc2:	4603      	mov	r3, r0
 800afc4:	461c      	mov	r4, r3
 800afc6:	2107      	movs	r1, #7
 800afc8:	6978      	ldr	r0, [r7, #20]
 800afca:	f7ff ff07 	bl	800addc <lookByte>
 800afce:	4603      	mov	r3, r0
 800afd0:	429c      	cmp	r4, r3
 800afd2:	d14a      	bne.n	800b06a <Getter+0x1aa>
        {
          dataLen = lookByte(xFifo,3) + (lookByte(xFifo,4) << 8);
 800afd4:	2103      	movs	r1, #3
 800afd6:	6978      	ldr	r0, [r7, #20]
 800afd8:	f7ff ff00 	bl	800addc <lookByte>
 800afdc:	4603      	mov	r3, r0
 800afde:	461c      	mov	r4, r3
 800afe0:	2104      	movs	r1, #4
 800afe2:	6978      	ldr	r0, [r7, #20]
 800afe4:	f7ff fefa 	bl	800addc <lookByte>
 800afe8:	4603      	mov	r3, r0
 800afea:	021b      	lsls	r3, r3, #8
 800afec:	4423      	add	r3, r4
 800afee:	61fb      	str	r3, [r7, #28]
          packetId = lookByte(xFifo,5) + (lookByte(xFifo,6) << 8);
 800aff0:	2105      	movs	r1, #5
 800aff2:	6978      	ldr	r0, [r7, #20]
 800aff4:	f7ff fef2 	bl	800addc <lookByte>
 800aff8:	4603      	mov	r3, r0
 800affa:	b29c      	uxth	r4, r3
 800affc:	2106      	movs	r1, #6
 800affe:	6978      	ldr	r0, [r7, #20]
 800b000:	f7ff feec 	bl	800addc <lookByte>
 800b004:	4603      	mov	r3, r0
 800b006:	b29b      	uxth	r3, r3
 800b008:	021b      	lsls	r3, r3, #8
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	4423      	add	r3, r4
 800b00e:	847b      	strh	r3, [r7, #34]	; 0x22
          if (packetId > 0 && dataLen < MAX_PACK_LEN)
 800b010:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b012:	2b00      	cmp	r3, #0
 800b014:	d026      	beq.n	800b064 <Getter+0x1a4>
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800b01c:	d222      	bcs.n	800b064 <Getter+0x1a4>
          {
              if (dataLen>10)
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	2b0a      	cmp	r3, #10
 800b022:	d902      	bls.n	800b02a <Getter+0x16a>
              {
                dataReceiving = 1;
 800b024:	2301      	movs	r3, #1
 800b026:	61bb      	str	r3, [r7, #24]
              if (dataLen>10)
 800b028:	e022      	b.n	800b070 <Getter+0x1b0>
              }
              else
              {
                  // Got ShortPackage (Header Only)
                  parser(xFifo,packetId,0,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 800b02a:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800b02c:	2102      	movs	r1, #2
 800b02e:	6978      	ldr	r0, [r7, #20]
 800b030:	f7ff fed4 	bl	800addc <lookByte>
 800b034:	4603      	mov	r3, r0
 800b036:	4618      	mov	r0, r3
 800b038:	f7ff fac2 	bl	800a5c0 <Msg_GetSrc>
 800b03c:	4603      	mov	r3, r0
 800b03e:	b2dd      	uxtb	r5, r3
 800b040:	2102      	movs	r1, #2
 800b042:	6978      	ldr	r0, [r7, #20]
 800b044:	f7ff feca 	bl	800addc <lookByte>
 800b048:	4603      	mov	r3, r0
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7ff fac6 	bl	800a5dc <Msg_GetDest>
 800b050:	4603      	mov	r3, r0
 800b052:	b2db      	uxtb	r3, r3
 800b054:	9300      	str	r3, [sp, #0]
 800b056:	462b      	mov	r3, r5
 800b058:	2200      	movs	r2, #0
 800b05a:	4621      	mov	r1, r4
 800b05c:	6978      	ldr	r0, [r7, #20]
 800b05e:	f7ff fd57 	bl	800ab10 <parser>
              if (dataLen>10)
 800b062:	e005      	b.n	800b070 <Getter+0x1b0>
              }
          }
          else { dataSkip=1; } // Wrong data length or packet id, so skip 1 byte
 800b064:	2301      	movs	r3, #1
 800b066:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 800b068:	e005      	b.n	800b076 <Getter+0x1b6>
        }
        else { dataSkip=1; } // Wrong CRC8, so skip 1 byte
 800b06a:	2301      	movs	r3, #1
 800b06c:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 800b06e:	e002      	b.n	800b076 <Getter+0x1b6>
 800b070:	e001      	b.n	800b076 <Getter+0x1b6>
      }
      else { dataSkip=1; } // Wrong sync bytes
 800b072:	2301      	movs	r3, #1
 800b074:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (dataSkip)
 800b076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d003      	beq.n	800b084 <Getter+0x1c4>
  {
    protMoveRead(xFifo,dataSkip);
 800b07c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b07e:	6978      	ldr	r0, [r7, #20]
 800b080:	f000 fc10 	bl	800b8a4 <protMoveRead>
  }

  *pDataReceiving = dataReceiving;
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	69ba      	ldr	r2, [r7, #24]
 800b088:	601a      	str	r2, [r3, #0]
  *pDataLen = dataLen;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	69fa      	ldr	r2, [r7, #28]
 800b08e:	601a      	str	r2, [r3, #0]
  *pPacketId = packetId;
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b094:	801a      	strh	r2, [r3, #0]
}
 800b096:	bf00      	nop
 800b098:	3728      	adds	r7, #40	; 0x28
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b0a0 <xDmaTxIrqHandler>:



inline void xDmaTxIrqHandler(UART_HandleTypeDef *huart)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	617b      	str	r3, [r7, #20]
 800b0ac:	e053      	b.n	800b156 <xDmaTxIrqHandler+0xb6>
  {
    handle = &xHandles[i];
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800b0b4:	fb02 f303 	mul.w	r3, r2, r3
 800b0b8:	4a2a      	ldr	r2, [pc, #168]	; (800b164 <xDmaTxIrqHandler+0xc4>)
 800b0ba:	4413      	add	r3, r2
 800b0bc:	60fb      	str	r3, [r7, #12]
    uint32_t length = 0;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	613b      	str	r3, [r7, #16]
    if(huart == handle->xUart)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d13f      	bne.n	800b150 <xDmaTxIrqHandler+0xb0>
    {
      if(protIsSome(&handle->xTxFifo))
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	f241 3388 	movw	r3, #5000	; 0x1388
 800b0d6:	4413      	add	r3, r2
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f000 fbf4 	bl	800b8c6 <protIsSome>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d02f      	beq.n	800b144 <xDmaTxIrqHandler+0xa4>
      {
        handle->TxBusy = 1;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	701a      	strb	r2, [r3, #0]
        while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 800b0ee:	bf00      	nop
 800b0f0:	68fa      	ldr	r2, [r7, #12]
 800b0f2:	f241 3388 	movw	r3, #5000	; 0x1388
 800b0f6:	4413      	add	r3, r2
 800b0f8:	693a      	ldr	r2, [r7, #16]
 800b0fa:	1c51      	adds	r1, r2, #1
 800b0fc:	6139      	str	r1, [r7, #16]
 800b0fe:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800b102:	68f9      	ldr	r1, [r7, #12]
 800b104:	440a      	add	r2, r1
 800b106:	4611      	mov	r1, r2
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 fba4 	bl	800b856 <protPull>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d003      	beq.n	800b11c <xDmaTxIrqHandler+0x7c>
            && length < MAX_PACK_LEN);
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800b11a:	d3e9      	bcc.n	800b0f0 <xDmaTxIrqHandler+0x50>
        CacheClean(handle->BufTx, length);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b122:	6939      	ldr	r1, [r7, #16]
 800b124:	4618      	mov	r0, r3
 800b126:	f7ff fa89 	bl	800a63c <CacheClean>
        HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b130:	6818      	ldr	r0, [r3, #0]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b138:	693a      	ldr	r2, [r7, #16]
 800b13a:	b292      	uxth	r2, r2
 800b13c:	4619      	mov	r1, r3
 800b13e:	f005 fecd 	bl	8010edc <HAL_UART_Transmit_DMA>
      }
      else handle->TxBusy = 0;
      break;
 800b142:	e00b      	b.n	800b15c <xDmaTxIrqHandler+0xbc>
      else handle->TxBusy = 0;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b14a:	2200      	movs	r2, #0
 800b14c:	701a      	strb	r2, [r3, #0]
      break;
 800b14e:	e005      	b.n	800b15c <xDmaTxIrqHandler+0xbc>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	3301      	adds	r3, #1
 800b154:	617b      	str	r3, [r7, #20]
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d0a8      	beq.n	800b0ae <xDmaTxIrqHandler+0xe>
    }
  }
}
 800b15c:	bf00      	nop
 800b15e:	3718      	adds	r7, #24
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	200104e0 	.word	0x200104e0

0800b168 <xDmaErIrqHandler>:

inline void xDmaErIrqHandler(UART_HandleTypeDef *huart)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800b170:	2300      	movs	r3, #0
 800b172:	60fb      	str	r3, [r7, #12]
 800b174:	e028      	b.n	800b1c8 <xDmaErIrqHandler+0x60>
  {
    handle = &xHandles[i];
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800b17c:	fb02 f303 	mul.w	r3, r2, r3
 800b180:	4a15      	ldr	r2, [pc, #84]	; (800b1d8 <xDmaErIrqHandler+0x70>)
 800b182:	4413      	add	r3, r2
 800b184:	60bb      	str	r3, [r7, #8]
    if(huart == handle->xUart)
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	429a      	cmp	r2, r3
 800b192:	d116      	bne.n	800b1c2 <xDmaErIrqHandler+0x5a>
    {
      HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	68b9      	ldr	r1, [r7, #8]
 800b19e:	f44f 7240 	mov.w	r2, #768	; 0x300
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f005 ff16 	bl	8010fd4 <HAL_UART_Receive_DMA>
      handle->RxPointer = handle->xUart->RxXferSize;
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800b1bc:	4413      	add	r3, r2
 800b1be:	6019      	str	r1, [r3, #0]
      break;
 800b1c0:	e005      	b.n	800b1ce <xDmaErIrqHandler+0x66>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	60fb      	str	r3, [r7, #12]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d0d3      	beq.n	800b176 <xDmaErIrqHandler+0xe>
    }
  }
}
 800b1ce:	bf00      	nop
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	200104e0 	.word	0x200104e0

0800b1dc <xFifosInit>:


void xFifosInit(void)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	607b      	str	r3, [r7, #4]
 800b1e6:	e040      	b.n	800b26a <xFifosInit+0x8e>
  {
    protInit(&xHandles[i].xTxFifo,xHandles[i].xTxFifoBuf,1,MAX_PACK_LEN*4);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800b1ee:	fb02 f203 	mul.w	r2, r2, r3
 800b1f2:	f241 3388 	movw	r3, #5000	; 0x1388
 800b1f6:	4413      	add	r3, r2
 800b1f8:	4a1f      	ldr	r2, [pc, #124]	; (800b278 <xFifosInit+0x9c>)
 800b1fa:	1898      	adds	r0, r3, r2
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800b202:	fb02 f303 	mul.w	r3, r2, r3
 800b206:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 800b20a:	4a1b      	ldr	r2, [pc, #108]	; (800b278 <xFifosInit+0x9c>)
 800b20c:	1899      	adds	r1, r3, r2
 800b20e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b212:	2201      	movs	r2, #1
 800b214:	f000 fa24 	bl	800b660 <protInit>
    protInit(&xHandles[i].xRxFifo,xHandles[i].xRxFifoBuf,1,MAX_PACK_LEN*4);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800b21e:	fb02 f203 	mul.w	r2, r2, r3
 800b222:	f241 3398 	movw	r3, #5016	; 0x1398
 800b226:	4413      	add	r3, r2
 800b228:	4a13      	ldr	r2, [pc, #76]	; (800b278 <xFifosInit+0x9c>)
 800b22a:	4413      	add	r3, r2
 800b22c:	1d18      	adds	r0, r3, #4
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800b234:	fb02 f303 	mul.w	r3, r2, r3
 800b238:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800b23c:	4a0e      	ldr	r2, [pc, #56]	; (800b278 <xFifosInit+0x9c>)
 800b23e:	1899      	adds	r1, r3, r2
 800b240:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b244:	2201      	movs	r2, #1
 800b246:	f000 fa0b 	bl	800b660 <protInit>
    xHandles[i].RxPointer = 0xFFFFFFFF;
 800b24a:	4a0b      	ldr	r2, [pc, #44]	; (800b278 <xFifosInit+0x9c>)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f241 31c4 	movw	r1, #5060	; 0x13c4
 800b252:	fb01 f303 	mul.w	r3, r1, r3
 800b256:	441a      	add	r2, r3
 800b258:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800b25c:	4413      	add	r3, r2
 800b25e:	f04f 32ff 	mov.w	r2, #4294967295
 800b262:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	3301      	adds	r3, #1
 800b268:	607b      	str	r3, [r7, #4]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d0bb      	beq.n	800b1e8 <xFifosInit+0xc>
  }
}
 800b270:	bf00      	nop
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	200104e0 	.word	0x200104e0

0800b27c <xGetterInit>:

void xGetterInit(void)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
  sGetterHandle * handle;

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800b282:	2300      	movs	r3, #0
 800b284:	607b      	str	r3, [r7, #4]
 800b286:	e026      	b.n	800b2d6 <xGetterInit+0x5a>
  {
    handle = &xHandles[i];
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800b28e:	fb02 f303 	mul.w	r3, r2, r3
 800b292:	4a14      	ldr	r2, [pc, #80]	; (800b2e4 <xGetterInit+0x68>)
 800b294:	4413      	add	r3, r2
 800b296:	603b      	str	r3, [r7, #0]
    CacheClean(handle->BufRx, UART_DMA_BUFFER);
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7ff f9cc 	bl	800a63c <CacheClean>
    HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	6839      	ldr	r1, [r7, #0]
 800b2ae:	f44f 7240 	mov.w	r2, #768	; 0x300
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f005 fe8e 	bl	8010fd4 <HAL_UART_Receive_DMA>
    handle->RxPointer = handle->xUart->RxXferSize;
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	683a      	ldr	r2, [r7, #0]
 800b2c8:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800b2cc:	4413      	add	r3, r2
 800b2ce:	6019      	str	r1, [r3, #0]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	607b      	str	r3, [r7, #4]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d0d5      	beq.n	800b288 <xGetterInit+0xc>
  }
}
 800b2dc:	bf00      	nop
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	200104e0 	.word	0x200104e0

0800b2e8 <xGetterLoop>:

void xGetterLoop(void)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b0e6      	sub	sp, #408	; 0x198
 800b2ec:	af00      	add	r7, sp, #0
  uint32_t dmacnt;
  uint32_t length;
  uint32_t dmasize;
  uint8_t tempbuffer[MAX_PACK_LEN];

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800b2f4:	e11f      	b.n	800b536 <xGetterLoop+0x24e>
  {
    handle = &xHandles[i];
 800b2f6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800b2fa:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800b2fe:	fb02 f303 	mul.w	r3, r2, r3
 800b302:	4a92      	ldr	r2, [pc, #584]	; (800b54c <xGetterLoop+0x264>)
 800b304:	4413      	add	r3, r2
 800b306:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    do
    {
      dmacnt = handle->xUart->hdmarx->Instance->NDTR;
 800b30a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800b30e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
      dmasize = handle->xUart->RxXferSize;
 800b31e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800b322:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b32c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
      if(handle->RxPointer == 0xFFFFFFFF) handle->RxPointer = dmacnt;
 800b330:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800b334:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800b338:	4413      	add	r3, r2
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b340:	d107      	bne.n	800b352 <xGetterLoop+0x6a>
 800b342:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800b346:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800b34a:	4413      	add	r3, r2
 800b34c:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800b350:	601a      	str	r2, [r3, #0]
      if(dmacnt > handle->RxPointer)
 800b352:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800b356:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800b35a:	4413      	add	r3, r2
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800b362:	429a      	cmp	r2, r3
 800b364:	d90e      	bls.n	800b384 <xGetterLoop+0x9c>
        length = (dmasize-dmacnt)+handle->RxPointer;
 800b366:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800b36a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800b36e:	1ad2      	subs	r2, r2, r3
 800b370:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 800b374:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800b378:	440b      	add	r3, r1
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4413      	add	r3, r2
 800b37e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800b382:	e00a      	b.n	800b39a <xGetterLoop+0xb2>
      else length = handle->RxPointer-dmacnt;
 800b384:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800b388:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800b38c:	4413      	add	r3, r2
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

      if(length > MAX_PACK_LEN) length = MAX_PACK_LEN;
 800b39a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800b39e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800b3a2:	d903      	bls.n	800b3ac <xGetterLoop+0xc4>
 800b3a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800b3a8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
      if(length > 0)
 800b3ac:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d050      	beq.n	800b456 <xGetterLoop+0x16e>
      {
        CacheInvalidate(handle->BufRx, UART_DMA_BUFFER);
 800b3b4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800b3b8:	f44f 7140 	mov.w	r1, #768	; 0x300
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7ff f91d 	bl	800a5fc <CacheInvalidate>
        for(i=0;i<length;i++)
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800b3c8:	e034      	b.n	800b434 <xGetterLoop+0x14c>
        {
          tempbuffer[i] = handle->BufRx[dmasize-handle->RxPointer];
 800b3ca:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800b3ce:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800b3d2:	4413      	add	r3, r2
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800b3da:	1ad3      	subs	r3, r2, r3
 800b3dc:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800b3e0:	5cd1      	ldrb	r1, [r2, r3]
 800b3e2:	1d3a      	adds	r2, r7, #4
 800b3e4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800b3e8:	4413      	add	r3, r2
 800b3ea:	460a      	mov	r2, r1
 800b3ec:	701a      	strb	r2, [r3, #0]
          if(handle->RxPointer == 1) handle->RxPointer = dmasize;
 800b3ee:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800b3f2:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800b3f6:	4413      	add	r3, r2
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d108      	bne.n	800b410 <xGetterLoop+0x128>
 800b3fe:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800b402:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800b406:	4413      	add	r3, r2
 800b408:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	e00c      	b.n	800b42a <xGetterLoop+0x142>
          else handle->RxPointer--;
 800b410:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800b414:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800b418:	4413      	add	r3, r2
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	1e5a      	subs	r2, r3, #1
 800b41e:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 800b422:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800b426:	440b      	add	r3, r1
 800b428:	601a      	str	r2, [r3, #0]
        for(i=0;i<length;i++)
 800b42a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800b42e:	3301      	adds	r3, #1
 800b430:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800b434:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800b438:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d8c4      	bhi.n	800b3ca <xGetterLoop+0xe2>
        }

        protPushSequence(&handle->xRxFifo, tempbuffer, length);
 800b440:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800b444:	f241 339c 	movw	r3, #5020	; 0x139c
 800b448:	4413      	add	r3, r2
 800b44a:	1d39      	adds	r1, r7, #4
 800b44c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800b450:	4618      	mov	r0, r3
 800b452:	f000 f9e0 	bl	800b816 <protPushSequence>
      }
    } while(length > 0);
 800b456:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f47f af55 	bne.w	800b30a <xGetterLoop+0x22>

    if(protIsSome(&handle->xRxFifo))
 800b460:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800b464:	f241 339c 	movw	r3, #5020	; 0x139c
 800b468:	4413      	add	r3, r2
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 fa2b 	bl	800b8c6 <protIsSome>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d003      	beq.n	800b47e <xGetterLoop+0x196>
    {
      Getter(handle);
 800b476:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 800b47a:	f7ff fd21 	bl	800aec0 <Getter>
    }

    taskENTER_CRITICAL();
 800b47e:	f7ff f891 	bl	800a5a4 <entercritical>
    if(!handle->TxBusy && protIsSome(&handle->xTxFifo))
 800b482:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800b486:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d14a      	bne.n	800b528 <xGetterLoop+0x240>
 800b492:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800b496:	f241 3388 	movw	r3, #5000	; 0x1388
 800b49a:	4413      	add	r3, r2
 800b49c:	4618      	mov	r0, r3
 800b49e:	f000 fa12 	bl	800b8c6 <protIsSome>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d03f      	beq.n	800b528 <xGetterLoop+0x240>
    {
      length = 0;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
      handle->TxBusy = 1;
 800b4ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800b4b2:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	701a      	strb	r2, [r3, #0]
      taskEXIT_CRITICAL();
 800b4ba:	f7ff f87a 	bl	800a5b2 <exitcritical>
      while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 800b4be:	bf00      	nop
 800b4c0:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800b4c4:	f241 3388 	movw	r3, #5000	; 0x1388
 800b4c8:	4413      	add	r3, r2
 800b4ca:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800b4ce:	1c51      	adds	r1, r2, #1
 800b4d0:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 800b4d4:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800b4d8:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 800b4dc:	440a      	add	r2, r1
 800b4de:	4611      	mov	r1, r2
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f000 f9b8 	bl	800b856 <protPull>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d004      	beq.n	800b4f6 <xGetterLoop+0x20e>
          && length < MAX_PACK_LEN);
 800b4ec:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800b4f0:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800b4f4:	d3e4      	bcc.n	800b4c0 <xGetterLoop+0x1d8>
      CacheClean(handle->BufTx, length);
 800b4f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800b4fa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b4fe:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800b502:	4618      	mov	r0, r3
 800b504:	f7ff f89a 	bl	800a63c <CacheClean>
      HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 800b508:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800b50c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b510:	6818      	ldr	r0, [r3, #0]
 800b512:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800b516:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b51a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800b51e:	b292      	uxth	r2, r2
 800b520:	4619      	mov	r1, r3
 800b522:	f005 fcdb 	bl	8010edc <HAL_UART_Transmit_DMA>
 800b526:	e001      	b.n	800b52c <xGetterLoop+0x244>
    }
    else taskEXIT_CRITICAL();
 800b528:	f7ff f843 	bl	800a5b2 <exitcritical>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800b52c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800b530:	3301      	adds	r3, #1
 800b532:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800b536:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f43f aedb 	beq.w	800b2f6 <xGetterLoop+0xe>
  }
}
 800b540:	bf00      	nop
 800b542:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	200104e0 	.word	0x200104e0

0800b550 <infoGetSize>:

#include "xProFIFO.h"
#include <string.h>


static inline int infoGetSize(sProInfo* info) {
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
    if(info->write >= info->read) return (info->write - info->read);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	689a      	ldr	r2, [r3, #8]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	429a      	cmp	r2, r3
 800b562:	d305      	bcc.n	800b570 <infoGetSize+0x20>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	689a      	ldr	r2, [r3, #8]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	1ad3      	subs	r3, r2, r3
 800b56e:	e007      	b.n	800b580 <infoGetSize+0x30>
    else return (info->capacity - info->read + info->write);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	1ad2      	subs	r2, r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	4413      	add	r3, r2
}
 800b580:	4618      	mov	r0, r3
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <infoGetAvail>:

static uint32_t infoGetAvail(sProInfo* info) { return info->capacity-infoGetSize(info); }
 800b58c:	b590      	push	{r4, r7, lr}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681c      	ldr	r4, [r3, #0]
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f7ff ffd9 	bl	800b550 <infoGetSize>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	1ae3      	subs	r3, r4, r3
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	370c      	adds	r7, #12
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd90      	pop	{r4, r7, pc}

0800b5aa <infoCorrect>:
static inline uint32_t infoCorrect(sProInfo* info, uint32_t* param, uint32_t move) { return ((*param + move) % info->capacity); }
 800b5aa:	b480      	push	{r7}
 800b5ac:	b085      	sub	sp, #20
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	60f8      	str	r0, [r7, #12]
 800b5b2:	60b9      	str	r1, [r7, #8]
 800b5b4:	607a      	str	r2, [r7, #4]
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4413      	add	r3, r2
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	6812      	ldr	r2, [r2, #0]
 800b5c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5c6:	fb02 f201 	mul.w	r2, r2, r1
 800b5ca:	1a9b      	subs	r3, r3, r2
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3714      	adds	r7, #20
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <infoMovePar>:
static inline void infoMovePar(sProInfo* info, uint32_t* param, uint32_t move) { *param = (uint32_t)infoCorrect(info,param,move); }
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	68b9      	ldr	r1, [r7, #8]
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f7ff ffde 	bl	800b5aa <infoCorrect>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	601a      	str	r2, [r3, #0]
 800b5f4:	bf00      	nop
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <infoIsSome>:
static uint8_t infoIsSome(sProInfo* info) { return info->read != info->write; }
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	685a      	ldr	r2, [r3, #4]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	bf14      	ite	ne
 800b610:	2301      	movne	r3, #1
 800b612:	2300      	moveq	r3, #0
 800b614:	b2db      	uxtb	r3, r3
 800b616:	4618      	mov	r0, r3
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr

0800b622 <protMovePar>:

static void protMovePar(sProInfo* info, uint32_t* param, uint32_t move) {
 800b622:	b580      	push	{r7, lr}
 800b624:	b084      	sub	sp, #16
 800b626:	af00      	add	r7, sp, #0
 800b628:	60f8      	str	r0, [r7, #12]
 800b62a:	60b9      	str	r1, [r7, #8]
 800b62c:	607a      	str	r2, [r7, #4]
        infoMovePar(info,param,move);
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	68b9      	ldr	r1, [r7, #8]
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f7ff ffd0 	bl	800b5d8 <infoMovePar>
}
 800b638:	bf00      	nop
 800b63a:	3710      	adds	r7, #16
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <protGetSize>:


uint32_t protGetSize(sProFIFO* fifo) {
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
    uint32_t value;
        value = infoGetSize(&fifo->info);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	3304      	adds	r3, #4
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7ff ff7f 	bl	800b550 <infoGetSize>
 800b652:	4603      	mov	r3, r0
 800b654:	60fb      	str	r3, [r7, #12]
    return value;
 800b656:	68fb      	ldr	r3, [r7, #12]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <protInit>:
    uint32_t value;
        value = infoGetAvail(&fifo->info);
    return value;
}

void protInit(sProFIFO* fifo, void* xBuffer, uint8_t xElemSize, int xCapacity) {
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	603b      	str	r3, [r7, #0]
 800b66c:	4613      	mov	r3, r2
 800b66e:	71fb      	strb	r3, [r7, #7]
    fifo->buffer = xBuffer;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	68ba      	ldr	r2, [r7, #8]
 800b674:	601a      	str	r2, [r3, #0]
    fifo->info.capacity = xCapacity;
 800b676:	683a      	ldr	r2, [r7, #0]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	605a      	str	r2, [r3, #4]
    fifo->info.read = 0;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2200      	movs	r2, #0
 800b680:	609a      	str	r2, [r3, #8]
    fifo->info.write = 0;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2200      	movs	r2, #0
 800b686:	60da      	str	r2, [r3, #12]
    fifo->info.overflow = 0;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	745a      	strb	r2, [r3, #17]
    fifo->info.elemsize = xElemSize;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	79fa      	ldrb	r2, [r7, #7]
 800b692:	741a      	strb	r2, [r3, #16]
}
 800b694:	bf00      	nop
 800b696:	3714      	adds	r7, #20
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <interPut>:
        fifo->info.read = 0;
        fifo->info.write = 0;
        fifo->info.overflow = 0;
}

static inline void interPut(sProFIFO* fifo, void* xData) {
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)((uint32_t)fifo->buffer + fifo->info.write * fifo->info.elemsize), (uint8_t*)xData, fifo->info.elemsize);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	7c12      	ldrb	r2, [r2, #16]
 800b6b8:	fb02 f303 	mul.w	r3, r2, r3
 800b6bc:	440b      	add	r3, r1
 800b6be:	4618      	mov	r0, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	7c1b      	ldrb	r3, [r3, #16]
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	f006 fb88 	bl	8011ddc <memcpy>
}
 800b6cc:	bf00      	nop
 800b6ce:	3708      	adds	r7, #8
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <interGet>:

static inline void interGet(sProFIFO* fifo, void* xData) {
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + fifo->info.read * fifo->info.elemsize), fifo->info.elemsize);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	7c12      	ldrb	r2, [r2, #16]
 800b6ec:	fb02 f303 	mul.w	r3, r2, r3
 800b6f0:	440b      	add	r3, r1
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	7c1b      	ldrb	r3, [r3, #16]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	6838      	ldr	r0, [r7, #0]
 800b6fc:	f006 fb6e 	bl	8011ddc <memcpy>
}
 800b700:	bf00      	nop
 800b702:	3708      	adds	r7, #8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <interLook>:

static inline void interLook(sProFIFO* fifo, uint32_t xIndex, void* xData) {
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + xIndex * fifo->info.elemsize), fifo->info.elemsize);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	461a      	mov	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	7c1b      	ldrb	r3, [r3, #16]
 800b71e:	4619      	mov	r1, r3
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	fb03 f301 	mul.w	r3, r3, r1
 800b726:	4413      	add	r3, r2
 800b728:	4619      	mov	r1, r3
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	7c1b      	ldrb	r3, [r3, #16]
 800b72e:	461a      	mov	r2, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f006 fb53 	bl	8011ddc <memcpy>
}
 800b736:	bf00      	nop
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <interPush>:

static inline uint32_t interPush(sProFIFO* fifo, void* xData) {
 800b73e:	b580      	push	{r7, lr}
 800b740:	b084      	sub	sp, #16
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    if ((retval = infoGetAvail(&fifo->info))) {
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	3304      	adds	r3, #4
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7ff ff1d 	bl	800b58c <infoGetAvail>
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d00c      	beq.n	800b774 <interPush+0x36>
        interPut(fifo,xData);
 800b75a:	6839      	ldr	r1, [r7, #0]
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f7ff ff9f 	bl	800b6a0 <interPut>
        infoMovePar(&fifo->info, &fifo->info.write, 1);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	1d18      	adds	r0, r3, #4
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	330c      	adds	r3, #12
 800b76a:	2201      	movs	r2, #1
 800b76c:	4619      	mov	r1, r3
 800b76e:	f7ff ff33 	bl	800b5d8 <infoMovePar>
 800b772:	e002      	b.n	800b77a <interPush+0x3c>
    } else { fifo->info.overflow=1; }
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2201      	movs	r2, #1
 800b778:	745a      	strb	r2, [r3, #17]
    return retval;
 800b77a:	68fb      	ldr	r3, [r7, #12]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <interPull>:

static inline uint32_t interPull(sProFIFO* fifo, void* xDest) {
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    if ((retval = infoIsSome(&fifo->info))) {
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	3304      	adds	r3, #4
 800b792:	4618      	mov	r0, r3
 800b794:	f7ff ff32 	bl	800b5fc <infoIsSome>
 800b798:	4603      	mov	r3, r0
 800b79a:	60fb      	str	r3, [r7, #12]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00b      	beq.n	800b7ba <interPull+0x36>
        interGet(fifo,xDest);
 800b7a2:	6839      	ldr	r1, [r7, #0]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7ff ff95 	bl	800b6d4 <interGet>
        infoMovePar(&fifo->info, &fifo->info.read, 1);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	1d18      	adds	r0, r3, #4
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	3308      	adds	r3, #8
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	f7ff ff0f 	bl	800b5d8 <infoMovePar>
    }
    return retval;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3710      	adds	r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <interPushSequence>:

static inline uint32_t interPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
    uint32_t retval = 0; uint32_t i;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	617b      	str	r3, [r7, #20]
    for (i=0; i<xCount; i++) {
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	613b      	str	r3, [r7, #16]
 800b7d8:	e012      	b.n	800b800 <interPushSequence+0x3c>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	7c1b      	ldrb	r3, [r3, #16]
 800b7de:	461a      	mov	r2, r3
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	fb03 f202 	mul.w	r2, r3, r2
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f7ff ffa6 	bl	800b73e <interPush>
 800b7f2:	6178      	str	r0, [r7, #20]
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d007      	beq.n	800b80a <interPushSequence+0x46>
    for (i=0; i<xCount; i++) {
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	613b      	str	r3, [r7, #16]
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	429a      	cmp	r2, r3
 800b806:	d3e8      	bcc.n	800b7da <interPushSequence+0x16>
 800b808:	e000      	b.n	800b80c <interPushSequence+0x48>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 800b80a:	bf00      	nop
    }
    return retval;
 800b80c:	697b      	ldr	r3, [r7, #20]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3718      	adds	r7, #24
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <protPushSequence>:

uint32_t protPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 800b816:	b580      	push	{r7, lr}
 800b818:	b086      	sub	sp, #24
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	60f8      	str	r0, [r7, #12]
 800b81e:	60b9      	str	r1, [r7, #8]
 800b820:	607a      	str	r2, [r7, #4]
    uint32_t retval;
        retval=interPushSequence(fifo,xData,xCount);
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	68b9      	ldr	r1, [r7, #8]
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f7ff ffcc 	bl	800b7c4 <interPushSequence>
 800b82c:	6178      	str	r0, [r7, #20]
    return retval;
 800b82e:	697b      	ldr	r3, [r7, #20]
}
 800b830:	4618      	mov	r0, r3
 800b832:	3718      	adds	r7, #24
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <protPush>:

uint32_t protPush(sProFIFO* fifo, void* xData) {
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
    uint32_t retval;
        retval=interPush(fifo,xData);
 800b842:	6839      	ldr	r1, [r7, #0]
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f7ff ff7a 	bl	800b73e <interPush>
 800b84a:	60f8      	str	r0, [r7, #12]
    return retval;
 800b84c:	68fb      	ldr	r3, [r7, #12]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <protPull>:

uint32_t protPull(sProFIFO* fifo, void* xDest) {
 800b856:	b580      	push	{r7, lr}
 800b858:	b084      	sub	sp, #16
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
 800b85e:	6039      	str	r1, [r7, #0]
    uint32_t retval;
        retval=interPull(fifo,xDest);
 800b860:	6839      	ldr	r1, [r7, #0]
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f7ff ff8e 	bl	800b784 <interPull>
 800b868:	60f8      	str	r0, [r7, #12]
    return retval;
 800b86a:	68fb      	ldr	r3, [r7, #12]
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <protLook>:

void protLook(sProFIFO* fifo, uint32_t xOffset, void* xDest) {
 800b874:	b580      	push	{r7, lr}
 800b876:	b086      	sub	sp, #24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	607a      	str	r2, [r7, #4]
        uint32_t aIndex = infoCorrect(&fifo->info, &fifo->info.read, xOffset);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	1d18      	adds	r0, r3, #4
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	3308      	adds	r3, #8
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	4619      	mov	r1, r3
 800b88c:	f7ff fe8d 	bl	800b5aa <infoCorrect>
 800b890:	6178      	str	r0, [r7, #20]
        interLook(fifo,aIndex,xDest);
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	6979      	ldr	r1, [r7, #20]
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f7ff ff36 	bl	800b708 <interLook>
}
 800b89c:	bf00      	nop
 800b89e:	3718      	adds	r7, #24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <protMoveRead>:

void protMoveWrite(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.write, amove); }
void protMoveRead(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.read, amove); }
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	1d18      	adds	r0, r3, #4
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	3308      	adds	r3, #8
 800b8b6:	683a      	ldr	r2, [r7, #0]
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	f7ff feb2 	bl	800b622 <protMovePar>
 800b8be:	bf00      	nop
 800b8c0:	3708      	adds	r7, #8
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <protIsSome>:

uint8_t protIsSome(sProFIFO* fifo) { return fifo->info.read != fifo->info.write; }
 800b8c6:	b480      	push	{r7}
 800b8c8:	b083      	sub	sp, #12
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	689a      	ldr	r2, [r3, #8]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	bf14      	ite	ne
 800b8da:	2301      	movne	r3, #1
 800b8dc:	2300      	moveq	r3, #0
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b8ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b924 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b8f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b8f2:	e003      	b.n	800b8fc <LoopCopyDataInit>

0800b8f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b8f4:	4b0c      	ldr	r3, [pc, #48]	; (800b928 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b8f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b8f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b8fa:	3104      	adds	r1, #4

0800b8fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b8fc:	480b      	ldr	r0, [pc, #44]	; (800b92c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b8fe:	4b0c      	ldr	r3, [pc, #48]	; (800b930 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b900:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b902:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b904:	d3f6      	bcc.n	800b8f4 <CopyDataInit>
  ldr  r2, =_sbss
 800b906:	4a0b      	ldr	r2, [pc, #44]	; (800b934 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b908:	e002      	b.n	800b910 <LoopFillZerobss>

0800b90a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b90a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b90c:	f842 3b04 	str.w	r3, [r2], #4

0800b910 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b910:	4b09      	ldr	r3, [pc, #36]	; (800b938 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b912:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b914:	d3f9      	bcc.n	800b90a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b916:	f7fe fddb 	bl	800a4d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b91a:	f006 fa3b 	bl	8011d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b91e:	f7fc fead 	bl	800867c <main>
  bx  lr    
 800b922:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b924:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 800b928:	08011f28 	.word	0x08011f28
  ldr  r0, =_sdata
 800b92c:	20010000 	.word	0x20010000
  ldr  r3, =_edata
 800b930:	200118c8 	.word	0x200118c8
  ldr  r2, =_sbss
 800b934:	200118e0 	.word	0x200118e0
  ldr  r3, = _ebss
 800b938:	20025404 	.word	0x20025404

0800b93c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b93c:	e7fe      	b.n	800b93c <ADC_IRQHandler>
	...

0800b940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800b944:	4b08      	ldr	r3, [pc, #32]	; (800b968 <HAL_Init+0x28>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a07      	ldr	r2, [pc, #28]	; (800b968 <HAL_Init+0x28>)
 800b94a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b94e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b950:	2003      	movs	r0, #3
 800b952:	f000 fd2d 	bl	800c3b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b956:	2000      	movs	r0, #0
 800b958:	f000 f808 	bl	800b96c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800b95c:	f7fe f9ac 	bl	8009cb8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	40023c00 	.word	0x40023c00

0800b96c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b974:	4b12      	ldr	r3, [pc, #72]	; (800b9c0 <HAL_InitTick+0x54>)
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	4b12      	ldr	r3, [pc, #72]	; (800b9c4 <HAL_InitTick+0x58>)
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	4619      	mov	r1, r3
 800b97e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b982:	fbb3 f3f1 	udiv	r3, r3, r1
 800b986:	fbb2 f3f3 	udiv	r3, r2, r3
 800b98a:	4618      	mov	r0, r3
 800b98c:	f000 fd45 	bl	800c41a <HAL_SYSTICK_Config>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	e00e      	b.n	800b9b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2b0f      	cmp	r3, #15
 800b99e:	d80a      	bhi.n	800b9b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	6879      	ldr	r1, [r7, #4]
 800b9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a8:	f000 fd0d 	bl	800c3c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b9ac:	4a06      	ldr	r2, [pc, #24]	; (800b9c8 <HAL_InitTick+0x5c>)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	e000      	b.n	800b9b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	200104c4 	.word	0x200104c4
 800b9c4:	200118c4 	.word	0x200118c4
 800b9c8:	200118c0 	.word	0x200118c0

0800b9cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b9d0:	4b06      	ldr	r3, [pc, #24]	; (800b9ec <HAL_IncTick+0x20>)
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	4b06      	ldr	r3, [pc, #24]	; (800b9f0 <HAL_IncTick+0x24>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4413      	add	r3, r2
 800b9dc:	4a04      	ldr	r2, [pc, #16]	; (800b9f0 <HAL_IncTick+0x24>)
 800b9de:	6013      	str	r3, [r2, #0]
}
 800b9e0:	bf00      	nop
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	200118c4 	.word	0x200118c4
 800b9f0:	20025400 	.word	0x20025400

0800b9f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	af00      	add	r7, sp, #0
  return uwTick;
 800b9f8:	4b03      	ldr	r3, [pc, #12]	; (800ba08 <HAL_GetTick+0x14>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	20025400 	.word	0x20025400

0800ba0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d101      	bne.n	800ba22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e031      	b.n	800ba86 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d109      	bne.n	800ba3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f7fe f968 	bl	8009d00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba42:	f003 0310 	and.w	r3, r3, #16
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d116      	bne.n	800ba78 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba4e:	4b10      	ldr	r3, [pc, #64]	; (800ba90 <HAL_ADC_Init+0x84>)
 800ba50:	4013      	ands	r3, r2
 800ba52:	f043 0202 	orr.w	r2, r3, #2
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 fa5c 	bl	800bf18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba6a:	f023 0303 	bic.w	r3, r3, #3
 800ba6e:	f043 0201 	orr.w	r2, r3, #1
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	641a      	str	r2, [r3, #64]	; 0x40
 800ba76:	e001      	b.n	800ba7c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800ba84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	ffffeefd 	.word	0xffffeefd

0800ba94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b086      	sub	sp, #24
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800baa0:	2300      	movs	r3, #0
 800baa2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d101      	bne.n	800bab2 <HAL_ADC_Start_DMA+0x1e>
 800baae:	2302      	movs	r3, #2
 800bab0:	e0c7      	b.n	800bc42 <HAL_ADC_Start_DMA+0x1ae>
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2201      	movs	r2, #1
 800bab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	f003 0301 	and.w	r3, r3, #1
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d018      	beq.n	800bafa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	689a      	ldr	r2, [r3, #8]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f042 0201 	orr.w	r2, r2, #1
 800bad6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800bad8:	4b5c      	ldr	r3, [pc, #368]	; (800bc4c <HAL_ADC_Start_DMA+0x1b8>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a5c      	ldr	r2, [pc, #368]	; (800bc50 <HAL_ADC_Start_DMA+0x1bc>)
 800bade:	fba2 2303 	umull	r2, r3, r2, r3
 800bae2:	0c9a      	lsrs	r2, r3, #18
 800bae4:	4613      	mov	r3, r2
 800bae6:	005b      	lsls	r3, r3, #1
 800bae8:	4413      	add	r3, r2
 800baea:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800baec:	e002      	b.n	800baf4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	3b01      	subs	r3, #1
 800baf2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1f9      	bne.n	800baee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	f003 0301 	and.w	r3, r3, #1
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	f040 809b 	bne.w	800bc40 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb0e:	4b51      	ldr	r3, [pc, #324]	; (800bc54 <HAL_ADC_Start_DMA+0x1c0>)
 800bb10:	4013      	ands	r3, r2
 800bb12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d007      	beq.n	800bb38 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800bb30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bb40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb44:	d106      	bne.n	800bb54 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb4a:	f023 0206 	bic.w	r2, r3, #6
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	645a      	str	r2, [r3, #68]	; 0x44
 800bb52:	e002      	b.n	800bb5a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb66:	4a3c      	ldr	r2, [pc, #240]	; (800bc58 <HAL_ADC_Start_DMA+0x1c4>)
 800bb68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb6e:	4a3b      	ldr	r2, [pc, #236]	; (800bc5c <HAL_ADC_Start_DMA+0x1c8>)
 800bb70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb76:	4a3a      	ldr	r2, [pc, #232]	; (800bc60 <HAL_ADC_Start_DMA+0x1cc>)
 800bb78:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800bb82:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	685a      	ldr	r2, [r3, #4]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800bb92:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	689a      	ldr	r2, [r3, #8]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bba2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	334c      	adds	r3, #76	; 0x4c
 800bbae:	4619      	mov	r1, r3
 800bbb0:	68ba      	ldr	r2, [r7, #8]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f000 fee8 	bl	800c988 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800bbb8:	4b2a      	ldr	r3, [pc, #168]	; (800bc64 <HAL_ADC_Start_DMA+0x1d0>)
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	f003 031f 	and.w	r3, r3, #31
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10f      	bne.n	800bbe4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d136      	bne.n	800bc40 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	689a      	ldr	r2, [r3, #8]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800bbe0:	609a      	str	r2, [r3, #8]
 800bbe2:	e02d      	b.n	800bc40 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a1f      	ldr	r2, [pc, #124]	; (800bc68 <HAL_ADC_Start_DMA+0x1d4>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d10e      	bne.n	800bc0c <HAL_ADC_Start_DMA+0x178>
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d107      	bne.n	800bc0c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	689a      	ldr	r2, [r3, #8]
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800bc0a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800bc0c:	4b15      	ldr	r3, [pc, #84]	; (800bc64 <HAL_ADC_Start_DMA+0x1d0>)
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	f003 0310 	and.w	r3, r3, #16
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d113      	bne.n	800bc40 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a13      	ldr	r2, [pc, #76]	; (800bc6c <HAL_ADC_Start_DMA+0x1d8>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d10e      	bne.n	800bc40 <HAL_ADC_Start_DMA+0x1ac>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d107      	bne.n	800bc40 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	689a      	ldr	r2, [r3, #8]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800bc3e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800bc40:	2300      	movs	r3, #0
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3718      	adds	r7, #24
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	200104c4 	.word	0x200104c4
 800bc50:	431bde83 	.word	0x431bde83
 800bc54:	fffff8fe 	.word	0xfffff8fe
 800bc58:	0800c10d 	.word	0x0800c10d
 800bc5c:	0800c1c7 	.word	0x0800c1c7
 800bc60:	0800c1e3 	.word	0x0800c1e3
 800bc64:	40012300 	.word	0x40012300
 800bc68:	40012000 	.word	0x40012000
 800bc6c:	40012200 	.word	0x40012200

0800bc70 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800bc78:	bf00      	nop
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d101      	bne.n	800bca0 <HAL_ADC_ConfigChannel+0x1c>
 800bc9c:	2302      	movs	r3, #2
 800bc9e:	e12a      	b.n	800bef6 <HAL_ADC_ConfigChannel+0x272>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2b09      	cmp	r3, #9
 800bcae:	d93a      	bls.n	800bd26 <HAL_ADC_ConfigChannel+0xa2>
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcb8:	d035      	beq.n	800bd26 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	68d9      	ldr	r1, [r3, #12]
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	4613      	mov	r3, r2
 800bcca:	005b      	lsls	r3, r3, #1
 800bccc:	4413      	add	r3, r2
 800bcce:	3b1e      	subs	r3, #30
 800bcd0:	2207      	movs	r2, #7
 800bcd2:	fa02 f303 	lsl.w	r3, r2, r3
 800bcd6:	43da      	mvns	r2, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	400a      	ands	r2, r1
 800bcde:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a87      	ldr	r2, [pc, #540]	; (800bf04 <HAL_ADC_ConfigChannel+0x280>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d10a      	bne.n	800bd00 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	68d9      	ldr	r1, [r3, #12]
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	061a      	lsls	r2, r3, #24
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	430a      	orrs	r2, r1
 800bcfc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800bcfe:	e035      	b.n	800bd6c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	68d9      	ldr	r1, [r3, #12]
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	689a      	ldr	r2, [r3, #8]
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	4618      	mov	r0, r3
 800bd12:	4603      	mov	r3, r0
 800bd14:	005b      	lsls	r3, r3, #1
 800bd16:	4403      	add	r3, r0
 800bd18:	3b1e      	subs	r3, #30
 800bd1a:	409a      	lsls	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	430a      	orrs	r2, r1
 800bd22:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800bd24:	e022      	b.n	800bd6c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	6919      	ldr	r1, [r3, #16]
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	461a      	mov	r2, r3
 800bd34:	4613      	mov	r3, r2
 800bd36:	005b      	lsls	r3, r3, #1
 800bd38:	4413      	add	r3, r2
 800bd3a:	2207      	movs	r2, #7
 800bd3c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd40:	43da      	mvns	r2, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	400a      	ands	r2, r1
 800bd48:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	6919      	ldr	r1, [r3, #16]
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	689a      	ldr	r2, [r3, #8]
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	005b      	lsls	r3, r3, #1
 800bd60:	4403      	add	r3, r0
 800bd62:	409a      	lsls	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	430a      	orrs	r2, r1
 800bd6a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	2b06      	cmp	r3, #6
 800bd72:	d824      	bhi.n	800bdbe <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	685a      	ldr	r2, [r3, #4]
 800bd7e:	4613      	mov	r3, r2
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	4413      	add	r3, r2
 800bd84:	3b05      	subs	r3, #5
 800bd86:	221f      	movs	r2, #31
 800bd88:	fa02 f303 	lsl.w	r3, r2, r3
 800bd8c:	43da      	mvns	r2, r3
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	400a      	ands	r2, r1
 800bd94:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	4618      	mov	r0, r3
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	685a      	ldr	r2, [r3, #4]
 800bda8:	4613      	mov	r3, r2
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	4413      	add	r3, r2
 800bdae:	3b05      	subs	r3, #5
 800bdb0:	fa00 f203 	lsl.w	r2, r0, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	635a      	str	r2, [r3, #52]	; 0x34
 800bdbc:	e04c      	b.n	800be58 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	2b0c      	cmp	r3, #12
 800bdc4:	d824      	bhi.n	800be10 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	685a      	ldr	r2, [r3, #4]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	4413      	add	r3, r2
 800bdd6:	3b23      	subs	r3, #35	; 0x23
 800bdd8:	221f      	movs	r2, #31
 800bdda:	fa02 f303 	lsl.w	r3, r2, r3
 800bdde:	43da      	mvns	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	400a      	ands	r2, r1
 800bde6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	685a      	ldr	r2, [r3, #4]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	4413      	add	r3, r2
 800be00:	3b23      	subs	r3, #35	; 0x23
 800be02:	fa00 f203 	lsl.w	r2, r0, r3
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	430a      	orrs	r2, r1
 800be0c:	631a      	str	r2, [r3, #48]	; 0x30
 800be0e:	e023      	b.n	800be58 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	4613      	mov	r3, r2
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	4413      	add	r3, r2
 800be20:	3b41      	subs	r3, #65	; 0x41
 800be22:	221f      	movs	r2, #31
 800be24:	fa02 f303 	lsl.w	r3, r2, r3
 800be28:	43da      	mvns	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	400a      	ands	r2, r1
 800be30:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	4618      	mov	r0, r3
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	685a      	ldr	r2, [r3, #4]
 800be44:	4613      	mov	r3, r2
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	4413      	add	r3, r2
 800be4a:	3b41      	subs	r3, #65	; 0x41
 800be4c:	fa00 f203 	lsl.w	r2, r0, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	430a      	orrs	r2, r1
 800be56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a2a      	ldr	r2, [pc, #168]	; (800bf08 <HAL_ADC_ConfigChannel+0x284>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d10a      	bne.n	800be78 <HAL_ADC_ConfigChannel+0x1f4>
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be6a:	d105      	bne.n	800be78 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800be6c:	4b27      	ldr	r3, [pc, #156]	; (800bf0c <HAL_ADC_ConfigChannel+0x288>)
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	4a26      	ldr	r2, [pc, #152]	; (800bf0c <HAL_ADC_ConfigChannel+0x288>)
 800be72:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800be76:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a22      	ldr	r2, [pc, #136]	; (800bf08 <HAL_ADC_ConfigChannel+0x284>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d109      	bne.n	800be96 <HAL_ADC_ConfigChannel+0x212>
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2b12      	cmp	r3, #18
 800be88:	d105      	bne.n	800be96 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800be8a:	4b20      	ldr	r3, [pc, #128]	; (800bf0c <HAL_ADC_ConfigChannel+0x288>)
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	4a1f      	ldr	r2, [pc, #124]	; (800bf0c <HAL_ADC_ConfigChannel+0x288>)
 800be90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800be94:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a1b      	ldr	r2, [pc, #108]	; (800bf08 <HAL_ADC_ConfigChannel+0x284>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d125      	bne.n	800beec <HAL_ADC_ConfigChannel+0x268>
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a17      	ldr	r2, [pc, #92]	; (800bf04 <HAL_ADC_ConfigChannel+0x280>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d003      	beq.n	800beb2 <HAL_ADC_ConfigChannel+0x22e>
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b11      	cmp	r3, #17
 800beb0:	d11c      	bne.n	800beec <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800beb2:	4b16      	ldr	r3, [pc, #88]	; (800bf0c <HAL_ADC_ConfigChannel+0x288>)
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	4a15      	ldr	r2, [pc, #84]	; (800bf0c <HAL_ADC_ConfigChannel+0x288>)
 800beb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bebc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4a10      	ldr	r2, [pc, #64]	; (800bf04 <HAL_ADC_ConfigChannel+0x280>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d111      	bne.n	800beec <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800bec8:	4b11      	ldr	r3, [pc, #68]	; (800bf10 <HAL_ADC_ConfigChannel+0x28c>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a11      	ldr	r2, [pc, #68]	; (800bf14 <HAL_ADC_ConfigChannel+0x290>)
 800bece:	fba2 2303 	umull	r2, r3, r2, r3
 800bed2:	0c9a      	lsrs	r2, r3, #18
 800bed4:	4613      	mov	r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	005b      	lsls	r3, r3, #1
 800bedc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800bede:	e002      	b.n	800bee6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	3b01      	subs	r3, #1
 800bee4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1f9      	bne.n	800bee0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3714      	adds	r7, #20
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	10000012 	.word	0x10000012
 800bf08:	40012000 	.word	0x40012000
 800bf0c:	40012300 	.word	0x40012300
 800bf10:	200104c4 	.word	0x200104c4
 800bf14:	431bde83 	.word	0x431bde83

0800bf18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800bf20:	4b78      	ldr	r3, [pc, #480]	; (800c104 <ADC_Init+0x1ec>)
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	4a77      	ldr	r2, [pc, #476]	; (800c104 <ADC_Init+0x1ec>)
 800bf26:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800bf2a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800bf2c:	4b75      	ldr	r3, [pc, #468]	; (800c104 <ADC_Init+0x1ec>)
 800bf2e:	685a      	ldr	r2, [r3, #4]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	4973      	ldr	r1, [pc, #460]	; (800c104 <ADC_Init+0x1ec>)
 800bf36:	4313      	orrs	r3, r2
 800bf38:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	685a      	ldr	r2, [r3, #4]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bf48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	6859      	ldr	r1, [r3, #4]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	691b      	ldr	r3, [r3, #16]
 800bf54:	021a      	lsls	r2, r3, #8
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	430a      	orrs	r2, r1
 800bf5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	685a      	ldr	r2, [r3, #4]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800bf6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	6859      	ldr	r1, [r3, #4]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	689a      	ldr	r2, [r3, #8]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	430a      	orrs	r2, r1
 800bf7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	689a      	ldr	r2, [r3, #8]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	6899      	ldr	r1, [r3, #8]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	68da      	ldr	r2, [r3, #12]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	430a      	orrs	r2, r1
 800bfa0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa6:	4a58      	ldr	r2, [pc, #352]	; (800c108 <ADC_Init+0x1f0>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d022      	beq.n	800bff2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	689a      	ldr	r2, [r3, #8]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bfba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	6899      	ldr	r1, [r3, #8]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	430a      	orrs	r2, r1
 800bfcc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	689a      	ldr	r2, [r3, #8]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bfdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	6899      	ldr	r1, [r3, #8]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	430a      	orrs	r2, r1
 800bfee:	609a      	str	r2, [r3, #8]
 800bff0:	e00f      	b.n	800c012 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	689a      	ldr	r2, [r3, #8]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c000:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	689a      	ldr	r2, [r3, #8]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c010:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	689a      	ldr	r2, [r3, #8]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f022 0202 	bic.w	r2, r2, #2
 800c020:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	6899      	ldr	r1, [r3, #8]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	699b      	ldr	r3, [r3, #24]
 800c02c:	005a      	lsls	r2, r3, #1
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	430a      	orrs	r2, r1
 800c034:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d01b      	beq.n	800c078 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	685a      	ldr	r2, [r3, #4]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c04e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	685a      	ldr	r2, [r3, #4]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800c05e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6859      	ldr	r1, [r3, #4]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06a:	3b01      	subs	r3, #1
 800c06c:	035a      	lsls	r2, r3, #13
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	430a      	orrs	r2, r1
 800c074:	605a      	str	r2, [r3, #4]
 800c076:	e007      	b.n	800c088 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c086:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800c096:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	69db      	ldr	r3, [r3, #28]
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	051a      	lsls	r2, r3, #20
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	430a      	orrs	r2, r1
 800c0ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	689a      	ldr	r2, [r3, #8]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c0bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	6899      	ldr	r1, [r3, #8]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c0ca:	025a      	lsls	r2, r3, #9
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	430a      	orrs	r2, r1
 800c0d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	689a      	ldr	r2, [r3, #8]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	6899      	ldr	r1, [r3, #8]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	695b      	ldr	r3, [r3, #20]
 800c0ee:	029a      	lsls	r2, r3, #10
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	430a      	orrs	r2, r1
 800c0f6:	609a      	str	r2, [r3, #8]
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr
 800c104:	40012300 	.word	0x40012300
 800c108:	0f000001 	.word	0x0f000001

0800c10c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c118:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c11e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c122:	2b00      	cmp	r3, #0
 800c124:	d13c      	bne.n	800c1a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c12a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d12b      	bne.n	800c198 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c144:	2b00      	cmp	r3, #0
 800c146:	d127      	bne.n	800c198 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c152:	2b00      	cmp	r3, #0
 800c154:	d006      	beq.n	800c164 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c160:	2b00      	cmp	r3, #0
 800c162:	d119      	bne.n	800c198 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	685a      	ldr	r2, [r3, #4]
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f022 0220 	bic.w	r2, r2, #32
 800c172:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c178:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d105      	bne.n	800c198 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c190:	f043 0201 	orr.w	r2, r3, #1
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c198:	68f8      	ldr	r0, [r7, #12]
 800c19a:	f7fc fa55 	bl	8008648 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c19e:	e00e      	b.n	800c1be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a4:	f003 0310 	and.w	r3, r3, #16
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d003      	beq.n	800c1b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	f7ff fd5f 	bl	800bc70 <HAL_ADC_ErrorCallback>
}
 800c1b2:	e004      	b.n	800c1be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	4798      	blx	r3
}
 800c1be:	bf00      	nop
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b084      	sub	sp, #16
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f7fc fa1d 	bl	8008614 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c1da:	bf00      	nop
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b084      	sub	sp, #16
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2240      	movs	r2, #64	; 0x40
 800c1f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1fa:	f043 0204 	orr.w	r2, r3, #4
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f7ff fd34 	bl	800bc70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c208:	bf00      	nop
 800c20a:	3710      	adds	r7, #16
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <__NVIC_SetPriorityGrouping>:
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f003 0307 	and.w	r3, r3, #7
 800c21e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c220:	4b0b      	ldr	r3, [pc, #44]	; (800c250 <__NVIC_SetPriorityGrouping+0x40>)
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c22c:	4013      	ands	r3, r2
 800c22e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800c238:	4b06      	ldr	r3, [pc, #24]	; (800c254 <__NVIC_SetPriorityGrouping+0x44>)
 800c23a:	4313      	orrs	r3, r2
 800c23c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c23e:	4a04      	ldr	r2, [pc, #16]	; (800c250 <__NVIC_SetPriorityGrouping+0x40>)
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	60d3      	str	r3, [r2, #12]
}
 800c244:	bf00      	nop
 800c246:	3714      	adds	r7, #20
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr
 800c250:	e000ed00 	.word	0xe000ed00
 800c254:	05fa0000 	.word	0x05fa0000

0800c258 <__NVIC_GetPriorityGrouping>:
{
 800c258:	b480      	push	{r7}
 800c25a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c25c:	4b04      	ldr	r3, [pc, #16]	; (800c270 <__NVIC_GetPriorityGrouping+0x18>)
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	0a1b      	lsrs	r3, r3, #8
 800c262:	f003 0307 	and.w	r3, r3, #7
}
 800c266:	4618      	mov	r0, r3
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr
 800c270:	e000ed00 	.word	0xe000ed00

0800c274 <__NVIC_EnableIRQ>:
{
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
 800c27a:	4603      	mov	r3, r0
 800c27c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c27e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c282:	2b00      	cmp	r3, #0
 800c284:	db0b      	blt.n	800c29e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c286:	79fb      	ldrb	r3, [r7, #7]
 800c288:	f003 021f 	and.w	r2, r3, #31
 800c28c:	4907      	ldr	r1, [pc, #28]	; (800c2ac <__NVIC_EnableIRQ+0x38>)
 800c28e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c292:	095b      	lsrs	r3, r3, #5
 800c294:	2001      	movs	r0, #1
 800c296:	fa00 f202 	lsl.w	r2, r0, r2
 800c29a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c29e:	bf00      	nop
 800c2a0:	370c      	adds	r7, #12
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	e000e100 	.word	0xe000e100

0800c2b0 <__NVIC_SetPriority>:
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	6039      	str	r1, [r7, #0]
 800c2ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c2bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	db0a      	blt.n	800c2da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	b2da      	uxtb	r2, r3
 800c2c8:	490c      	ldr	r1, [pc, #48]	; (800c2fc <__NVIC_SetPriority+0x4c>)
 800c2ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2ce:	0112      	lsls	r2, r2, #4
 800c2d0:	b2d2      	uxtb	r2, r2
 800c2d2:	440b      	add	r3, r1
 800c2d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c2d8:	e00a      	b.n	800c2f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	b2da      	uxtb	r2, r3
 800c2de:	4908      	ldr	r1, [pc, #32]	; (800c300 <__NVIC_SetPriority+0x50>)
 800c2e0:	79fb      	ldrb	r3, [r7, #7]
 800c2e2:	f003 030f 	and.w	r3, r3, #15
 800c2e6:	3b04      	subs	r3, #4
 800c2e8:	0112      	lsls	r2, r2, #4
 800c2ea:	b2d2      	uxtb	r2, r2
 800c2ec:	440b      	add	r3, r1
 800c2ee:	761a      	strb	r2, [r3, #24]
}
 800c2f0:	bf00      	nop
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr
 800c2fc:	e000e100 	.word	0xe000e100
 800c300:	e000ed00 	.word	0xe000ed00

0800c304 <NVIC_EncodePriority>:
{
 800c304:	b480      	push	{r7}
 800c306:	b089      	sub	sp, #36	; 0x24
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f003 0307 	and.w	r3, r3, #7
 800c316:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	f1c3 0307 	rsb	r3, r3, #7
 800c31e:	2b04      	cmp	r3, #4
 800c320:	bf28      	it	cs
 800c322:	2304      	movcs	r3, #4
 800c324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c326:	69fb      	ldr	r3, [r7, #28]
 800c328:	3304      	adds	r3, #4
 800c32a:	2b06      	cmp	r3, #6
 800c32c:	d902      	bls.n	800c334 <NVIC_EncodePriority+0x30>
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	3b03      	subs	r3, #3
 800c332:	e000      	b.n	800c336 <NVIC_EncodePriority+0x32>
 800c334:	2300      	movs	r3, #0
 800c336:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c338:	f04f 32ff 	mov.w	r2, #4294967295
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	fa02 f303 	lsl.w	r3, r2, r3
 800c342:	43da      	mvns	r2, r3
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	401a      	ands	r2, r3
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c34c:	f04f 31ff 	mov.w	r1, #4294967295
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	fa01 f303 	lsl.w	r3, r1, r3
 800c356:	43d9      	mvns	r1, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c35c:	4313      	orrs	r3, r2
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3724      	adds	r7, #36	; 0x24
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
	...

0800c36c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	3b01      	subs	r3, #1
 800c378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c37c:	d301      	bcc.n	800c382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c37e:	2301      	movs	r3, #1
 800c380:	e00f      	b.n	800c3a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c382:	4a0a      	ldr	r2, [pc, #40]	; (800c3ac <SysTick_Config+0x40>)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	3b01      	subs	r3, #1
 800c388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c38a:	210f      	movs	r1, #15
 800c38c:	f04f 30ff 	mov.w	r0, #4294967295
 800c390:	f7ff ff8e 	bl	800c2b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c394:	4b05      	ldr	r3, [pc, #20]	; (800c3ac <SysTick_Config+0x40>)
 800c396:	2200      	movs	r2, #0
 800c398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c39a:	4b04      	ldr	r3, [pc, #16]	; (800c3ac <SysTick_Config+0x40>)
 800c39c:	2207      	movs	r2, #7
 800c39e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3708      	adds	r7, #8
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	e000e010 	.word	0xe000e010

0800c3b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f7ff ff29 	bl	800c210 <__NVIC_SetPriorityGrouping>
}
 800c3be:	bf00      	nop
 800c3c0:	3708      	adds	r7, #8
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}

0800c3c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b086      	sub	sp, #24
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	60b9      	str	r1, [r7, #8]
 800c3d0:	607a      	str	r2, [r7, #4]
 800c3d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c3d8:	f7ff ff3e 	bl	800c258 <__NVIC_GetPriorityGrouping>
 800c3dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	68b9      	ldr	r1, [r7, #8]
 800c3e2:	6978      	ldr	r0, [r7, #20]
 800c3e4:	f7ff ff8e 	bl	800c304 <NVIC_EncodePriority>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7ff ff5d 	bl	800c2b0 <__NVIC_SetPriority>
}
 800c3f6:	bf00      	nop
 800c3f8:	3718      	adds	r7, #24
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b082      	sub	sp, #8
 800c402:	af00      	add	r7, sp, #0
 800c404:	4603      	mov	r3, r0
 800c406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7ff ff31 	bl	800c274 <__NVIC_EnableIRQ>
}
 800c412:	bf00      	nop
 800c414:	3708      	adds	r7, #8
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b082      	sub	sp, #8
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7ff ffa2 	bl	800c36c <SysTick_Config>
 800c428:	4603      	mov	r3, r0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3708      	adds	r7, #8
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
	...

0800c434 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d101      	bne.n	800c446 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	e054      	b.n	800c4f0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	7f5b      	ldrb	r3, [r3, #29]
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d105      	bne.n	800c45c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2200      	movs	r2, #0
 800c454:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f7fd fcda 	bl	8009e10 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2202      	movs	r2, #2
 800c460:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	791b      	ldrb	r3, [r3, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d10c      	bne.n	800c484 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4a22      	ldr	r2, [pc, #136]	; (800c4f8 <HAL_CRC_Init+0xc4>)
 800c470:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	689a      	ldr	r2, [r3, #8]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f022 0218 	bic.w	r2, r2, #24
 800c480:	609a      	str	r2, [r3, #8]
 800c482:	e00c      	b.n	800c49e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6899      	ldr	r1, [r3, #8]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	461a      	mov	r2, r3
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f946 	bl	800c720 <HAL_CRCEx_Polynomial_Set>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800c49a:	2301      	movs	r3, #1
 800c49c:	e028      	b.n	800c4f0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	795b      	ldrb	r3, [r3, #5]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d105      	bne.n	800c4b2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ae:	611a      	str	r2, [r3, #16]
 800c4b0:	e004      	b.n	800c4bc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	6912      	ldr	r2, [r2, #16]
 800c4ba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	689b      	ldr	r3, [r3, #8]
 800c4c2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	695a      	ldr	r2, [r3, #20]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	430a      	orrs	r2, r1
 800c4d0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	699a      	ldr	r2, [r3, #24]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	430a      	orrs	r2, r1
 800c4e6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800c4ee:	2300      	movs	r3, #0
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	04c11db7 	.word	0x04c11db7

0800c4fc <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
inline uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b086      	sub	sp, #24
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800c508:	2300      	movs	r3, #0
 800c50a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2202      	movs	r2, #2
 800c510:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	689a      	ldr	r2, [r3, #8]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f042 0201 	orr.w	r2, r2, #1
 800c520:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6a1b      	ldr	r3, [r3, #32]
 800c526:	2b02      	cmp	r3, #2
 800c528:	d022      	beq.n	800c570 <HAL_CRC_Calculate+0x74>
 800c52a:	2b03      	cmp	r3, #3
 800c52c:	d002      	beq.n	800c534 <HAL_CRC_Calculate+0x38>
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d017      	beq.n	800c562 <HAL_CRC_Calculate+0x66>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800c532:	e024      	b.n	800c57e <HAL_CRC_Calculate+0x82>
      for (index = 0U; index < BufferLength; index++)
 800c534:	2300      	movs	r3, #0
 800c536:	617b      	str	r3, [r7, #20]
 800c538:	e00a      	b.n	800c550 <HAL_CRC_Calculate+0x54>
        hcrc->Instance->DR = pBuffer[index];
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	68ba      	ldr	r2, [r7, #8]
 800c540:	441a      	add	r2, r3
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	6812      	ldr	r2, [r2, #0]
 800c548:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	3301      	adds	r3, #1
 800c54e:	617b      	str	r3, [r7, #20]
 800c550:	697a      	ldr	r2, [r7, #20]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	429a      	cmp	r2, r3
 800c556:	d3f0      	bcc.n	800c53a <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	613b      	str	r3, [r7, #16]
      break;
 800c560:	e00d      	b.n	800c57e <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	68b9      	ldr	r1, [r7, #8]
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f000 f811 	bl	800c58e <CRC_Handle_8>
 800c56c:	6138      	str	r0, [r7, #16]
      break;
 800c56e:	e006      	b.n	800c57e <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	68b9      	ldr	r1, [r7, #8]
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f000 f898 	bl	800c6aa <CRC_Handle_16>
 800c57a:	6138      	str	r0, [r7, #16]
      break;
 800c57c:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2201      	movs	r2, #1
 800c582:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800c584:	693b      	ldr	r3, [r7, #16]
}
 800c586:	4618      	mov	r0, r3
 800c588:	3718      	adds	r7, #24
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static inline uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800c58e:	b480      	push	{r7}
 800c590:	b089      	sub	sp, #36	; 0x24
 800c592:	af00      	add	r7, sp, #0
 800c594:	60f8      	str	r0, [r7, #12]
 800c596:	60b9      	str	r1, [r7, #8]
 800c598:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800c59a:	2300      	movs	r3, #0
 800c59c:	61fb      	str	r3, [r7, #28]
 800c59e:	e023      	b.n	800c5e8 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	68ba      	ldr	r2, [r7, #8]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	68b9      	ldr	r1, [r7, #8]
 800c5b4:	440b      	add	r3, r1
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c5ba:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	3302      	adds	r3, #2
 800c5c2:	68b9      	ldr	r1, [r7, #8]
 800c5c4:	440b      	add	r3, r1
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800c5ca:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	3303      	adds	r3, #3
 800c5d2:	68b9      	ldr	r1, [r7, #8]
 800c5d4:	440b      	add	r3, r1
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800c5de:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c5e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	61fb      	str	r3, [r7, #28]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	089b      	lsrs	r3, r3, #2
 800c5ec:	69fa      	ldr	r2, [r7, #28]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d3d6      	bcc.n	800c5a0 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f003 0303 	and.w	r3, r3, #3
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d04d      	beq.n	800c698 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f003 0303 	and.w	r3, r3, #3
 800c602:	2b01      	cmp	r3, #1
 800c604:	d107      	bne.n	800c616 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	4413      	add	r3, r2
 800c60e:	68fa      	ldr	r2, [r7, #12]
 800c610:	6812      	ldr	r2, [r2, #0]
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f003 0303 	and.w	r3, r3, #3
 800c61c:	2b02      	cmp	r3, #2
 800c61e:	d116      	bne.n	800c64e <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	4413      	add	r3, r2
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	021b      	lsls	r3, r3, #8
 800c62c:	b21a      	sxth	r2, r3
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	3301      	adds	r3, #1
 800c634:	68b9      	ldr	r1, [r7, #8]
 800c636:	440b      	add	r3, r1
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	b21b      	sxth	r3, r3
 800c63c:	4313      	orrs	r3, r2
 800c63e:	b21b      	sxth	r3, r3
 800c640:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	8b7a      	ldrh	r2, [r7, #26]
 800c64c:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f003 0303 	and.w	r3, r3, #3
 800c654:	2b03      	cmp	r3, #3
 800c656:	d11f      	bne.n	800c698 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	68ba      	ldr	r2, [r7, #8]
 800c65e:	4413      	add	r3, r2
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	021b      	lsls	r3, r3, #8
 800c664:	b21a      	sxth	r2, r3
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	3301      	adds	r3, #1
 800c66c:	68b9      	ldr	r1, [r7, #8]
 800c66e:	440b      	add	r3, r1
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	b21b      	sxth	r3, r3
 800c674:	4313      	orrs	r3, r2
 800c676:	b21b      	sxth	r3, r3
 800c678:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	8b7a      	ldrh	r2, [r7, #26]
 800c684:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	3302      	adds	r3, #2
 800c68c:	68ba      	ldr	r2, [r7, #8]
 800c68e:	4413      	add	r3, r2
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	6812      	ldr	r2, [r2, #0]
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	681b      	ldr	r3, [r3, #0]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3724      	adds	r7, #36	; 0x24
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr

0800c6aa <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static inline uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800c6aa:	b480      	push	{r7}
 800c6ac:	b087      	sub	sp, #28
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	60f8      	str	r0, [r7, #12]
 800c6b2:	60b9      	str	r1, [r7, #8]
 800c6b4:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	617b      	str	r3, [r7, #20]
 800c6ba:	e013      	b.n	800c6e4 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	68ba      	ldr	r2, [r7, #8]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	881b      	ldrh	r3, [r3, #0]
 800c6c6:	041a      	lsls	r2, r3, #16
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	3302      	adds	r3, #2
 800c6ce:	68b9      	ldr	r1, [r7, #8]
 800c6d0:	440b      	add	r3, r1
 800c6d2:	881b      	ldrh	r3, [r3, #0]
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	430a      	orrs	r2, r1
 800c6dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	617b      	str	r3, [r7, #20]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	085b      	lsrs	r3, r3, #1
 800c6e8:	697a      	ldr	r2, [r7, #20]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d3e6      	bcc.n	800c6bc <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f003 0301 	and.w	r3, r3, #1
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d009      	beq.n	800c70c <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	68ba      	ldr	r2, [r7, #8]
 800c704:	4413      	add	r3, r2
 800c706:	881a      	ldrh	r2, [r3, #0]
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	681b      	ldr	r3, [r3, #0]
}
 800c712:	4618      	mov	r0, r3
 800c714:	371c      	adds	r7, #28
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr
	...

0800c720 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800c720:	b480      	push	{r7}
 800c722:	b087      	sub	sp, #28
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c72c:	2300      	movs	r3, #0
 800c72e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c730:	231f      	movs	r3, #31
 800c732:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c734:	bf00      	nop
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	1e5a      	subs	r2, r3, #1
 800c73a:	613a      	str	r2, [r7, #16]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d009      	beq.n	800c754 <HAL_CRCEx_Polynomial_Set+0x34>
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	f003 031f 	and.w	r3, r3, #31
 800c746:	68ba      	ldr	r2, [r7, #8]
 800c748:	fa22 f303 	lsr.w	r3, r2, r3
 800c74c:	f003 0301 	and.w	r3, r3, #1
 800c750:	2b00      	cmp	r3, #0
 800c752:	d0f0      	beq.n	800c736 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2b18      	cmp	r3, #24
 800c758:	d846      	bhi.n	800c7e8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800c75a:	a201      	add	r2, pc, #4	; (adr r2, 800c760 <HAL_CRCEx_Polynomial_Set+0x40>)
 800c75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c760:	0800c7ef 	.word	0x0800c7ef
 800c764:	0800c7e9 	.word	0x0800c7e9
 800c768:	0800c7e9 	.word	0x0800c7e9
 800c76c:	0800c7e9 	.word	0x0800c7e9
 800c770:	0800c7e9 	.word	0x0800c7e9
 800c774:	0800c7e9 	.word	0x0800c7e9
 800c778:	0800c7e9 	.word	0x0800c7e9
 800c77c:	0800c7e9 	.word	0x0800c7e9
 800c780:	0800c7dd 	.word	0x0800c7dd
 800c784:	0800c7e9 	.word	0x0800c7e9
 800c788:	0800c7e9 	.word	0x0800c7e9
 800c78c:	0800c7e9 	.word	0x0800c7e9
 800c790:	0800c7e9 	.word	0x0800c7e9
 800c794:	0800c7e9 	.word	0x0800c7e9
 800c798:	0800c7e9 	.word	0x0800c7e9
 800c79c:	0800c7e9 	.word	0x0800c7e9
 800c7a0:	0800c7d1 	.word	0x0800c7d1
 800c7a4:	0800c7e9 	.word	0x0800c7e9
 800c7a8:	0800c7e9 	.word	0x0800c7e9
 800c7ac:	0800c7e9 	.word	0x0800c7e9
 800c7b0:	0800c7e9 	.word	0x0800c7e9
 800c7b4:	0800c7e9 	.word	0x0800c7e9
 800c7b8:	0800c7e9 	.word	0x0800c7e9
 800c7bc:	0800c7e9 	.word	0x0800c7e9
 800c7c0:	0800c7c5 	.word	0x0800c7c5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	2b06      	cmp	r3, #6
 800c7c8:	d913      	bls.n	800c7f2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c7ce:	e010      	b.n	800c7f2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	2b07      	cmp	r3, #7
 800c7d4:	d90f      	bls.n	800c7f6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c7da:	e00c      	b.n	800c7f6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	2b0f      	cmp	r3, #15
 800c7e0:	d90b      	bls.n	800c7fa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c7e6:	e008      	b.n	800c7fa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	75fb      	strb	r3, [r7, #23]
      break;
 800c7ec:	e006      	b.n	800c7fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c7ee:	bf00      	nop
 800c7f0:	e004      	b.n	800c7fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c7f2:	bf00      	nop
 800c7f4:	e002      	b.n	800c7fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c7f6:	bf00      	nop
 800c7f8:	e000      	b.n	800c7fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c7fa:	bf00      	nop
  }
  if (status == HAL_OK)
 800c7fc:	7dfb      	ldrb	r3, [r7, #23]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10d      	bne.n	800c81e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	689b      	ldr	r3, [r3, #8]
 800c810:	f023 0118 	bic.w	r1, r3, #24
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	430a      	orrs	r2, r1
 800c81c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800c81e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c820:	4618      	mov	r0, r3
 800c822:	371c      	adds	r7, #28
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b086      	sub	sp, #24
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c834:	2300      	movs	r3, #0
 800c836:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c838:	f7ff f8dc 	bl	800b9f4 <HAL_GetTick>
 800c83c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d101      	bne.n	800c848 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c844:	2301      	movs	r3, #1
 800c846:	e099      	b.n	800c97c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2202      	movs	r2, #2
 800c854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f022 0201 	bic.w	r2, r2, #1
 800c866:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c868:	e00f      	b.n	800c88a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c86a:	f7ff f8c3 	bl	800b9f4 <HAL_GetTick>
 800c86e:	4602      	mov	r2, r0
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	1ad3      	subs	r3, r2, r3
 800c874:	2b05      	cmp	r3, #5
 800c876:	d908      	bls.n	800c88a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2220      	movs	r2, #32
 800c87c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2203      	movs	r2, #3
 800c882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c886:	2303      	movs	r3, #3
 800c888:	e078      	b.n	800c97c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f003 0301 	and.w	r3, r3, #1
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1e8      	bne.n	800c86a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c8a0:	697a      	ldr	r2, [r7, #20]
 800c8a2:	4b38      	ldr	r3, [pc, #224]	; (800c984 <HAL_DMA_Init+0x158>)
 800c8a4:	4013      	ands	r3, r2
 800c8a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	689b      	ldr	r3, [r3, #8]
 800c8b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c8b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	691b      	ldr	r3, [r3, #16]
 800c8bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c8c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	699b      	ldr	r3, [r3, #24]
 800c8c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c8ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6a1b      	ldr	r3, [r3, #32]
 800c8d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e0:	2b04      	cmp	r3, #4
 800c8e2:	d107      	bne.n	800c8f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	697a      	ldr	r2, [r7, #20]
 800c8fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	695b      	ldr	r3, [r3, #20]
 800c902:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	f023 0307 	bic.w	r3, r3, #7
 800c90a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c910:	697a      	ldr	r2, [r7, #20]
 800c912:	4313      	orrs	r3, r2
 800c914:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91a:	2b04      	cmp	r3, #4
 800c91c:	d117      	bne.n	800c94e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c922:	697a      	ldr	r2, [r7, #20]
 800c924:	4313      	orrs	r3, r2
 800c926:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d00e      	beq.n	800c94e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 fa99 	bl	800ce68 <DMA_CheckFifoParam>
 800c936:	4603      	mov	r3, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d008      	beq.n	800c94e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2240      	movs	r2, #64	; 0x40
 800c940:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2201      	movs	r2, #1
 800c946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c94a:	2301      	movs	r3, #1
 800c94c:	e016      	b.n	800c97c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	697a      	ldr	r2, [r7, #20]
 800c954:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 fa50 	bl	800cdfc <DMA_CalcBaseAndBitshift>
 800c95c:	4603      	mov	r3, r0
 800c95e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c964:	223f      	movs	r2, #63	; 0x3f
 800c966:	409a      	lsls	r2, r3
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2201      	movs	r2, #1
 800c976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3718      	adds	r7, #24
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	e010803f 	.word	0xe010803f

0800c988 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b086      	sub	sp, #24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	607a      	str	r2, [r7, #4]
 800c994:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c996:	2300      	movs	r3, #0
 800c998:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c99e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	d101      	bne.n	800c9ae <HAL_DMA_Start_IT+0x26>
 800c9aa:	2302      	movs	r3, #2
 800c9ac:	e048      	b.n	800ca40 <HAL_DMA_Start_IT+0xb8>
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	d137      	bne.n	800ca32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2202      	movs	r2, #2
 800c9c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	68b9      	ldr	r1, [r7, #8]
 800c9d6:	68f8      	ldr	r0, [r7, #12]
 800c9d8:	f000 f9e2 	bl	800cda0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9e0:	223f      	movs	r2, #63	; 0x3f
 800c9e2:	409a      	lsls	r2, r3
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	681a      	ldr	r2, [r3, #0]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f042 0216 	orr.w	r2, r2, #22
 800c9f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	695a      	ldr	r2, [r3, #20]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ca06:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d007      	beq.n	800ca20 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	681a      	ldr	r2, [r3, #0]
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f042 0208 	orr.w	r2, r2, #8
 800ca1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f042 0201 	orr.w	r2, r2, #1
 800ca2e:	601a      	str	r2, [r3, #0]
 800ca30:	e005      	b.n	800ca3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2200      	movs	r2, #0
 800ca36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ca3a:	2302      	movs	r3, #2
 800ca3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ca3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3718      	adds	r7, #24
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	d004      	beq.n	800ca66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2280      	movs	r2, #128	; 0x80
 800ca60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ca62:	2301      	movs	r3, #1
 800ca64:	e00c      	b.n	800ca80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2205      	movs	r2, #5
 800ca6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f022 0201 	bic.w	r2, r2, #1
 800ca7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ca7e:	2300      	movs	r3, #0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
inline void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b086      	sub	sp, #24
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800ca94:	2300      	movs	r3, #0
 800ca96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800ca98:	4b92      	ldr	r3, [pc, #584]	; (800cce4 <HAL_DMA_IRQHandler+0x258>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a92      	ldr	r2, [pc, #584]	; (800cce8 <HAL_DMA_IRQHandler+0x25c>)
 800ca9e:	fba2 2303 	umull	r2, r3, r2, r3
 800caa2:	0a9b      	lsrs	r3, r3, #10
 800caa4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cab6:	2208      	movs	r2, #8
 800cab8:	409a      	lsls	r2, r3
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	4013      	ands	r3, r2
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d01a      	beq.n	800caf8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f003 0304 	and.w	r3, r3, #4
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d013      	beq.n	800caf8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	681a      	ldr	r2, [r3, #0]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f022 0204 	bic.w	r2, r2, #4
 800cade:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cae4:	2208      	movs	r2, #8
 800cae6:	409a      	lsls	r2, r3
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caf0:	f043 0201 	orr.w	r2, r3, #1
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cafc:	2201      	movs	r2, #1
 800cafe:	409a      	lsls	r2, r3
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	4013      	ands	r3, r2
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d012      	beq.n	800cb2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	695b      	ldr	r3, [r3, #20]
 800cb0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00b      	beq.n	800cb2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	409a      	lsls	r2, r3
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb26:	f043 0202 	orr.w	r2, r3, #2
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb32:	2204      	movs	r2, #4
 800cb34:	409a      	lsls	r2, r3
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	4013      	ands	r3, r2
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d012      	beq.n	800cb64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f003 0302 	and.w	r3, r3, #2
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00b      	beq.n	800cb64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb50:	2204      	movs	r2, #4
 800cb52:	409a      	lsls	r2, r3
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb5c:	f043 0204 	orr.w	r2, r3, #4
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb68:	2210      	movs	r2, #16
 800cb6a:	409a      	lsls	r2, r3
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	4013      	ands	r3, r2
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d043      	beq.n	800cbfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f003 0308 	and.w	r3, r3, #8
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d03c      	beq.n	800cbfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb86:	2210      	movs	r2, #16
 800cb88:	409a      	lsls	r2, r3
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d018      	beq.n	800cbce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d108      	bne.n	800cbbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d024      	beq.n	800cbfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	4798      	blx	r3
 800cbba:	e01f      	b.n	800cbfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d01b      	beq.n	800cbfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	4798      	blx	r3
 800cbcc:	e016      	b.n	800cbfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d107      	bne.n	800cbec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f022 0208 	bic.w	r2, r2, #8
 800cbea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d003      	beq.n	800cbfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc00:	2220      	movs	r2, #32
 800cc02:	409a      	lsls	r2, r3
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	4013      	ands	r3, r2
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f000 808e 	beq.w	800cd2a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f003 0310 	and.w	r3, r3, #16
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	f000 8086 	beq.w	800cd2a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc22:	2220      	movs	r2, #32
 800cc24:	409a      	lsls	r2, r3
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	2b05      	cmp	r3, #5
 800cc34:	d136      	bne.n	800cca4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f022 0216 	bic.w	r2, r2, #22
 800cc44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	695a      	ldr	r2, [r3, #20]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d103      	bne.n	800cc66 <HAL_DMA_IRQHandler+0x1da>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d007      	beq.n	800cc76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f022 0208 	bic.w	r2, r2, #8
 800cc74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc7a:	223f      	movs	r2, #63	; 0x3f
 800cc7c:	409a      	lsls	r2, r3
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2200      	movs	r2, #0
 800cc86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d07d      	beq.n	800cd96 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	4798      	blx	r3
        }
        return;
 800cca2:	e078      	b.n	800cd96 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d01c      	beq.n	800ccec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d108      	bne.n	800ccd2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d030      	beq.n	800cd2a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	4798      	blx	r3
 800ccd0:	e02b      	b.n	800cd2a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d027      	beq.n	800cd2a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	4798      	blx	r3
 800cce2:	e022      	b.n	800cd2a <HAL_DMA_IRQHandler+0x29e>
 800cce4:	200104c4 	.word	0x200104c4
 800cce8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10f      	bne.n	800cd1a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f022 0210 	bic.w	r2, r2, #16
 800cd08:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2201      	movs	r2, #1
 800cd16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d003      	beq.n	800cd2a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d032      	beq.n	800cd98 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd36:	f003 0301 	and.w	r3, r3, #1
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d022      	beq.n	800cd84 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2205      	movs	r2, #5
 800cd42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f022 0201 	bic.w	r2, r2, #1
 800cd54:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	3301      	adds	r3, #1
 800cd5a:	60bb      	str	r3, [r7, #8]
 800cd5c:	697a      	ldr	r2, [r7, #20]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d307      	bcc.n	800cd72 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f003 0301 	and.w	r3, r3, #1
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1f2      	bne.n	800cd56 <HAL_DMA_IRQHandler+0x2ca>
 800cd70:	e000      	b.n	800cd74 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800cd72:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2200      	movs	r2, #0
 800cd78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d005      	beq.n	800cd98 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	4798      	blx	r3
 800cd94:	e000      	b.n	800cd98 <HAL_DMA_IRQHandler+0x30c>
        return;
 800cd96:	bf00      	nop
    }
  }
}
 800cd98:	3718      	adds	r7, #24
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop

0800cda0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
 800cdac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cdbc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	683a      	ldr	r2, [r7, #0]
 800cdc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	2b40      	cmp	r3, #64	; 0x40
 800cdcc:	d108      	bne.n	800cde0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	68ba      	ldr	r2, [r7, #8]
 800cddc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800cdde:	e007      	b.n	800cdf0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	68ba      	ldr	r2, [r7, #8]
 800cde6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	60da      	str	r2, [r3, #12]
}
 800cdf0:	bf00      	nop
 800cdf2:	3714      	adds	r7, #20
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr

0800cdfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	3b10      	subs	r3, #16
 800ce0c:	4a13      	ldr	r2, [pc, #76]	; (800ce5c <DMA_CalcBaseAndBitshift+0x60>)
 800ce0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce12:	091b      	lsrs	r3, r3, #4
 800ce14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ce16:	4a12      	ldr	r2, [pc, #72]	; (800ce60 <DMA_CalcBaseAndBitshift+0x64>)
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	461a      	mov	r2, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2b03      	cmp	r3, #3
 800ce28:	d908      	bls.n	800ce3c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	4b0c      	ldr	r3, [pc, #48]	; (800ce64 <DMA_CalcBaseAndBitshift+0x68>)
 800ce32:	4013      	ands	r3, r2
 800ce34:	1d1a      	adds	r2, r3, #4
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	659a      	str	r2, [r3, #88]	; 0x58
 800ce3a:	e006      	b.n	800ce4a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	461a      	mov	r2, r3
 800ce42:	4b08      	ldr	r3, [pc, #32]	; (800ce64 <DMA_CalcBaseAndBitshift+0x68>)
 800ce44:	4013      	ands	r3, r2
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3714      	adds	r7, #20
 800ce52:	46bd      	mov	sp, r7
 800ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	aaaaaaab 	.word	0xaaaaaaab
 800ce60:	08011f10 	.word	0x08011f10
 800ce64:	fffffc00 	.word	0xfffffc00

0800ce68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b085      	sub	sp, #20
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce70:	2300      	movs	r3, #0
 800ce72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	699b      	ldr	r3, [r3, #24]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d11f      	bne.n	800cec2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	2b03      	cmp	r3, #3
 800ce86:	d855      	bhi.n	800cf34 <DMA_CheckFifoParam+0xcc>
 800ce88:	a201      	add	r2, pc, #4	; (adr r2, 800ce90 <DMA_CheckFifoParam+0x28>)
 800ce8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce8e:	bf00      	nop
 800ce90:	0800cea1 	.word	0x0800cea1
 800ce94:	0800ceb3 	.word	0x0800ceb3
 800ce98:	0800cea1 	.word	0x0800cea1
 800ce9c:	0800cf35 	.word	0x0800cf35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d045      	beq.n	800cf38 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800ceac:	2301      	movs	r3, #1
 800ceae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ceb0:	e042      	b.n	800cf38 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ceba:	d13f      	bne.n	800cf3c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800cebc:	2301      	movs	r3, #1
 800cebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cec0:	e03c      	b.n	800cf3c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	699b      	ldr	r3, [r3, #24]
 800cec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ceca:	d121      	bne.n	800cf10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	2b03      	cmp	r3, #3
 800ced0:	d836      	bhi.n	800cf40 <DMA_CheckFifoParam+0xd8>
 800ced2:	a201      	add	r2, pc, #4	; (adr r2, 800ced8 <DMA_CheckFifoParam+0x70>)
 800ced4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced8:	0800cee9 	.word	0x0800cee9
 800cedc:	0800ceef 	.word	0x0800ceef
 800cee0:	0800cee9 	.word	0x0800cee9
 800cee4:	0800cf01 	.word	0x0800cf01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800cee8:	2301      	movs	r3, #1
 800ceea:	73fb      	strb	r3, [r7, #15]
      break;
 800ceec:	e02f      	b.n	800cf4e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d024      	beq.n	800cf44 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800cefa:	2301      	movs	r3, #1
 800cefc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cefe:	e021      	b.n	800cf44 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800cf08:	d11e      	bne.n	800cf48 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800cf0e:	e01b      	b.n	800cf48 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	2b02      	cmp	r3, #2
 800cf14:	d902      	bls.n	800cf1c <DMA_CheckFifoParam+0xb4>
 800cf16:	2b03      	cmp	r3, #3
 800cf18:	d003      	beq.n	800cf22 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800cf1a:	e018      	b.n	800cf4e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	73fb      	strb	r3, [r7, #15]
      break;
 800cf20:	e015      	b.n	800cf4e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00e      	beq.n	800cf4c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	73fb      	strb	r3, [r7, #15]
      break;
 800cf32:	e00b      	b.n	800cf4c <DMA_CheckFifoParam+0xe4>
      break;
 800cf34:	bf00      	nop
 800cf36:	e00a      	b.n	800cf4e <DMA_CheckFifoParam+0xe6>
      break;
 800cf38:	bf00      	nop
 800cf3a:	e008      	b.n	800cf4e <DMA_CheckFifoParam+0xe6>
      break;
 800cf3c:	bf00      	nop
 800cf3e:	e006      	b.n	800cf4e <DMA_CheckFifoParam+0xe6>
      break;
 800cf40:	bf00      	nop
 800cf42:	e004      	b.n	800cf4e <DMA_CheckFifoParam+0xe6>
      break;
 800cf44:	bf00      	nop
 800cf46:	e002      	b.n	800cf4e <DMA_CheckFifoParam+0xe6>
      break;   
 800cf48:	bf00      	nop
 800cf4a:	e000      	b.n	800cf4e <DMA_CheckFifoParam+0xe6>
      break;
 800cf4c:	bf00      	nop
    }
  } 
  
  return status; 
 800cf4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3714      	adds	r7, #20
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr

0800cf5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b089      	sub	sp, #36	; 0x24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800cf66:	2300      	movs	r3, #0
 800cf68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800cf72:	2300      	movs	r3, #0
 800cf74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800cf76:	2300      	movs	r3, #0
 800cf78:	61fb      	str	r3, [r7, #28]
 800cf7a:	e169      	b.n	800d250 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	fa02 f303 	lsl.w	r3, r2, r3
 800cf84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	697a      	ldr	r2, [r7, #20]
 800cf8c:	4013      	ands	r3, r2
 800cf8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800cf90:	693a      	ldr	r2, [r7, #16]
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	f040 8158 	bne.w	800d24a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	2b01      	cmp	r3, #1
 800cfa0:	d00b      	beq.n	800cfba <HAL_GPIO_Init+0x5e>
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	d007      	beq.n	800cfba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800cfae:	2b11      	cmp	r3, #17
 800cfb0:	d003      	beq.n	800cfba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	2b12      	cmp	r3, #18
 800cfb8:	d130      	bne.n	800d01c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	005b      	lsls	r3, r3, #1
 800cfc4:	2203      	movs	r2, #3
 800cfc6:	fa02 f303 	lsl.w	r3, r2, r3
 800cfca:	43db      	mvns	r3, r3
 800cfcc:	69ba      	ldr	r2, [r7, #24]
 800cfce:	4013      	ands	r3, r2
 800cfd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	68da      	ldr	r2, [r3, #12]
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	005b      	lsls	r3, r3, #1
 800cfda:	fa02 f303 	lsl.w	r3, r2, r3
 800cfde:	69ba      	ldr	r2, [r7, #24]
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	69ba      	ldr	r2, [r7, #24]
 800cfe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cff0:	2201      	movs	r2, #1
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	fa02 f303 	lsl.w	r3, r2, r3
 800cff8:	43db      	mvns	r3, r3
 800cffa:	69ba      	ldr	r2, [r7, #24]
 800cffc:	4013      	ands	r3, r2
 800cffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	091b      	lsrs	r3, r3, #4
 800d006:	f003 0201 	and.w	r2, r3, #1
 800d00a:	69fb      	ldr	r3, [r7, #28]
 800d00c:	fa02 f303 	lsl.w	r3, r2, r3
 800d010:	69ba      	ldr	r2, [r7, #24]
 800d012:	4313      	orrs	r3, r2
 800d014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	69ba      	ldr	r2, [r7, #24]
 800d01a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	68db      	ldr	r3, [r3, #12]
 800d020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	005b      	lsls	r3, r3, #1
 800d026:	2203      	movs	r2, #3
 800d028:	fa02 f303 	lsl.w	r3, r2, r3
 800d02c:	43db      	mvns	r3, r3
 800d02e:	69ba      	ldr	r2, [r7, #24]
 800d030:	4013      	ands	r3, r2
 800d032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	689a      	ldr	r2, [r3, #8]
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	005b      	lsls	r3, r3, #1
 800d03c:	fa02 f303 	lsl.w	r3, r2, r3
 800d040:	69ba      	ldr	r2, [r7, #24]
 800d042:	4313      	orrs	r3, r2
 800d044:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	69ba      	ldr	r2, [r7, #24]
 800d04a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	2b02      	cmp	r3, #2
 800d052:	d003      	beq.n	800d05c <HAL_GPIO_Init+0x100>
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	2b12      	cmp	r3, #18
 800d05a:	d123      	bne.n	800d0a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	08da      	lsrs	r2, r3, #3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	3208      	adds	r2, #8
 800d064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	f003 0307 	and.w	r3, r3, #7
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	220f      	movs	r2, #15
 800d074:	fa02 f303 	lsl.w	r3, r2, r3
 800d078:	43db      	mvns	r3, r3
 800d07a:	69ba      	ldr	r2, [r7, #24]
 800d07c:	4013      	ands	r3, r2
 800d07e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	691a      	ldr	r2, [r3, #16]
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	f003 0307 	and.w	r3, r3, #7
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	fa02 f303 	lsl.w	r3, r2, r3
 800d090:	69ba      	ldr	r2, [r7, #24]
 800d092:	4313      	orrs	r3, r2
 800d094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	08da      	lsrs	r2, r3, #3
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	3208      	adds	r2, #8
 800d09e:	69b9      	ldr	r1, [r7, #24]
 800d0a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	005b      	lsls	r3, r3, #1
 800d0ae:	2203      	movs	r2, #3
 800d0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b4:	43db      	mvns	r3, r3
 800d0b6:	69ba      	ldr	r2, [r7, #24]
 800d0b8:	4013      	ands	r3, r2
 800d0ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	f003 0203 	and.w	r2, r3, #3
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	005b      	lsls	r3, r3, #1
 800d0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d0cc:	69ba      	ldr	r2, [r7, #24]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	69ba      	ldr	r2, [r7, #24]
 800d0d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	f000 80b2 	beq.w	800d24a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d0e6:	4b5f      	ldr	r3, [pc, #380]	; (800d264 <HAL_GPIO_Init+0x308>)
 800d0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0ea:	4a5e      	ldr	r2, [pc, #376]	; (800d264 <HAL_GPIO_Init+0x308>)
 800d0ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d0f0:	6453      	str	r3, [r2, #68]	; 0x44
 800d0f2:	4b5c      	ldr	r3, [pc, #368]	; (800d264 <HAL_GPIO_Init+0x308>)
 800d0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0fa:	60fb      	str	r3, [r7, #12]
 800d0fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800d0fe:	4a5a      	ldr	r2, [pc, #360]	; (800d268 <HAL_GPIO_Init+0x30c>)
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	089b      	lsrs	r3, r3, #2
 800d104:	3302      	adds	r3, #2
 800d106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d10a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	f003 0303 	and.w	r3, r3, #3
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	220f      	movs	r2, #15
 800d116:	fa02 f303 	lsl.w	r3, r2, r3
 800d11a:	43db      	mvns	r3, r3
 800d11c:	69ba      	ldr	r2, [r7, #24]
 800d11e:	4013      	ands	r3, r2
 800d120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4a51      	ldr	r2, [pc, #324]	; (800d26c <HAL_GPIO_Init+0x310>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d02b      	beq.n	800d182 <HAL_GPIO_Init+0x226>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4a50      	ldr	r2, [pc, #320]	; (800d270 <HAL_GPIO_Init+0x314>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d025      	beq.n	800d17e <HAL_GPIO_Init+0x222>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4a4f      	ldr	r2, [pc, #316]	; (800d274 <HAL_GPIO_Init+0x318>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d01f      	beq.n	800d17a <HAL_GPIO_Init+0x21e>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4a4e      	ldr	r2, [pc, #312]	; (800d278 <HAL_GPIO_Init+0x31c>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d019      	beq.n	800d176 <HAL_GPIO_Init+0x21a>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	4a4d      	ldr	r2, [pc, #308]	; (800d27c <HAL_GPIO_Init+0x320>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d013      	beq.n	800d172 <HAL_GPIO_Init+0x216>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	4a4c      	ldr	r2, [pc, #304]	; (800d280 <HAL_GPIO_Init+0x324>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d00d      	beq.n	800d16e <HAL_GPIO_Init+0x212>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	4a4b      	ldr	r2, [pc, #300]	; (800d284 <HAL_GPIO_Init+0x328>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d007      	beq.n	800d16a <HAL_GPIO_Init+0x20e>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	4a4a      	ldr	r2, [pc, #296]	; (800d288 <HAL_GPIO_Init+0x32c>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d101      	bne.n	800d166 <HAL_GPIO_Init+0x20a>
 800d162:	2307      	movs	r3, #7
 800d164:	e00e      	b.n	800d184 <HAL_GPIO_Init+0x228>
 800d166:	2308      	movs	r3, #8
 800d168:	e00c      	b.n	800d184 <HAL_GPIO_Init+0x228>
 800d16a:	2306      	movs	r3, #6
 800d16c:	e00a      	b.n	800d184 <HAL_GPIO_Init+0x228>
 800d16e:	2305      	movs	r3, #5
 800d170:	e008      	b.n	800d184 <HAL_GPIO_Init+0x228>
 800d172:	2304      	movs	r3, #4
 800d174:	e006      	b.n	800d184 <HAL_GPIO_Init+0x228>
 800d176:	2303      	movs	r3, #3
 800d178:	e004      	b.n	800d184 <HAL_GPIO_Init+0x228>
 800d17a:	2302      	movs	r3, #2
 800d17c:	e002      	b.n	800d184 <HAL_GPIO_Init+0x228>
 800d17e:	2301      	movs	r3, #1
 800d180:	e000      	b.n	800d184 <HAL_GPIO_Init+0x228>
 800d182:	2300      	movs	r3, #0
 800d184:	69fa      	ldr	r2, [r7, #28]
 800d186:	f002 0203 	and.w	r2, r2, #3
 800d18a:	0092      	lsls	r2, r2, #2
 800d18c:	4093      	lsls	r3, r2
 800d18e:	69ba      	ldr	r2, [r7, #24]
 800d190:	4313      	orrs	r3, r2
 800d192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800d194:	4934      	ldr	r1, [pc, #208]	; (800d268 <HAL_GPIO_Init+0x30c>)
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	089b      	lsrs	r3, r3, #2
 800d19a:	3302      	adds	r3, #2
 800d19c:	69ba      	ldr	r2, [r7, #24]
 800d19e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d1a2:	4b3a      	ldr	r3, [pc, #232]	; (800d28c <HAL_GPIO_Init+0x330>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	43db      	mvns	r3, r3
 800d1ac:	69ba      	ldr	r2, [r7, #24]
 800d1ae:	4013      	ands	r3, r2
 800d1b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d003      	beq.n	800d1c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800d1be:	69ba      	ldr	r2, [r7, #24]
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d1c6:	4a31      	ldr	r2, [pc, #196]	; (800d28c <HAL_GPIO_Init+0x330>)
 800d1c8:	69bb      	ldr	r3, [r7, #24]
 800d1ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d1cc:	4b2f      	ldr	r3, [pc, #188]	; (800d28c <HAL_GPIO_Init+0x330>)
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	43db      	mvns	r3, r3
 800d1d6:	69ba      	ldr	r2, [r7, #24]
 800d1d8:	4013      	ands	r3, r2
 800d1da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d003      	beq.n	800d1f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800d1e8:	69ba      	ldr	r2, [r7, #24]
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d1f0:	4a26      	ldr	r2, [pc, #152]	; (800d28c <HAL_GPIO_Init+0x330>)
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d1f6:	4b25      	ldr	r3, [pc, #148]	; (800d28c <HAL_GPIO_Init+0x330>)
 800d1f8:	689b      	ldr	r3, [r3, #8]
 800d1fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	43db      	mvns	r3, r3
 800d200:	69ba      	ldr	r2, [r7, #24]
 800d202:	4013      	ands	r3, r2
 800d204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d003      	beq.n	800d21a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800d212:	69ba      	ldr	r2, [r7, #24]
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	4313      	orrs	r3, r2
 800d218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d21a:	4a1c      	ldr	r2, [pc, #112]	; (800d28c <HAL_GPIO_Init+0x330>)
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d220:	4b1a      	ldr	r3, [pc, #104]	; (800d28c <HAL_GPIO_Init+0x330>)
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	43db      	mvns	r3, r3
 800d22a:	69ba      	ldr	r2, [r7, #24]
 800d22c:	4013      	ands	r3, r2
 800d22e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d003      	beq.n	800d244 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800d23c:	69ba      	ldr	r2, [r7, #24]
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	4313      	orrs	r3, r2
 800d242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d244:	4a11      	ldr	r2, [pc, #68]	; (800d28c <HAL_GPIO_Init+0x330>)
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800d24a:	69fb      	ldr	r3, [r7, #28]
 800d24c:	3301      	adds	r3, #1
 800d24e:	61fb      	str	r3, [r7, #28]
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	2b0f      	cmp	r3, #15
 800d254:	f67f ae92 	bls.w	800cf7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800d258:	bf00      	nop
 800d25a:	3724      	adds	r7, #36	; 0x24
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr
 800d264:	40023800 	.word	0x40023800
 800d268:	40013800 	.word	0x40013800
 800d26c:	40020000 	.word	0x40020000
 800d270:	40020400 	.word	0x40020400
 800d274:	40020800 	.word	0x40020800
 800d278:	40020c00 	.word	0x40020c00
 800d27c:	40021000 	.word	0x40021000
 800d280:	40021400 	.word	0x40021400
 800d284:	40021800 	.word	0x40021800
 800d288:	40021c00 	.word	0x40021c00
 800d28c:	40013c00 	.word	0x40013c00

0800d290 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
inline GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d290:	b480      	push	{r7}
 800d292:	b085      	sub	sp, #20
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	460b      	mov	r3, r1
 800d29a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	691a      	ldr	r2, [r3, #16]
 800d2a0:	887b      	ldrh	r3, [r7, #2]
 800d2a2:	4013      	ands	r3, r2
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d002      	beq.n	800d2ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	73fb      	strb	r3, [r7, #15]
 800d2ac:	e001      	b.n	800d2b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3714      	adds	r7, #20
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr

0800d2c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
inline void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b083      	sub	sp, #12
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	807b      	strh	r3, [r7, #2]
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d2d0:	787b      	ldrb	r3, [r7, #1]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d003      	beq.n	800d2de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d2d6:	887a      	ldrh	r2, [r7, #2]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800d2dc:	e003      	b.n	800d2e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800d2de:	887b      	ldrh	r3, [r7, #2]
 800d2e0:	041a      	lsls	r2, r3, #16
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	619a      	str	r2, [r3, #24]
}
 800d2e6:	bf00      	nop
 800d2e8:	370c      	adds	r7, #12
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr
	...

0800d2f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
inline void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800d2fe:	4b08      	ldr	r3, [pc, #32]	; (800d320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d300:	695a      	ldr	r2, [r3, #20]
 800d302:	88fb      	ldrh	r3, [r7, #6]
 800d304:	4013      	ands	r3, r2
 800d306:	2b00      	cmp	r3, #0
 800d308:	d006      	beq.n	800d318 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d30a:	4a05      	ldr	r2, [pc, #20]	; (800d320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d30c:	88fb      	ldrh	r3, [r7, #6]
 800d30e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d310:	88fb      	ldrh	r3, [r7, #6]
 800d312:	4618      	mov	r0, r3
 800d314:	f7fb f8d4 	bl	80084c0 <HAL_GPIO_EXTI_Callback>
  }
}
 800d318:	bf00      	nop
 800d31a:	3708      	adds	r7, #8
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	40013c00 	.word	0x40013c00

0800d324 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800d334:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d336:	2300      	movs	r3, #0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	370c      	adds	r7, #12
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d34e:	4b23      	ldr	r3, [pc, #140]	; (800d3dc <HAL_PWREx_EnableOverDrive+0x98>)
 800d350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d352:	4a22      	ldr	r2, [pc, #136]	; (800d3dc <HAL_PWREx_EnableOverDrive+0x98>)
 800d354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d358:	6413      	str	r3, [r2, #64]	; 0x40
 800d35a:	4b20      	ldr	r3, [pc, #128]	; (800d3dc <HAL_PWREx_EnableOverDrive+0x98>)
 800d35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d35e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d362:	603b      	str	r3, [r7, #0]
 800d364:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d366:	4b1e      	ldr	r3, [pc, #120]	; (800d3e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4a1d      	ldr	r2, [pc, #116]	; (800d3e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d36c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d370:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d372:	f7fe fb3f 	bl	800b9f4 <HAL_GetTick>
 800d376:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d378:	e009      	b.n	800d38e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d37a:	f7fe fb3b 	bl	800b9f4 <HAL_GetTick>
 800d37e:	4602      	mov	r2, r0
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	1ad3      	subs	r3, r2, r3
 800d384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d388:	d901      	bls.n	800d38e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800d38a:	2303      	movs	r3, #3
 800d38c:	e022      	b.n	800d3d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d38e:	4b14      	ldr	r3, [pc, #80]	; (800d3e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d39a:	d1ee      	bne.n	800d37a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d39c:	4b10      	ldr	r3, [pc, #64]	; (800d3e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4a0f      	ldr	r2, [pc, #60]	; (800d3e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d3a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d3a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d3a8:	f7fe fb24 	bl	800b9f4 <HAL_GetTick>
 800d3ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d3ae:	e009      	b.n	800d3c4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d3b0:	f7fe fb20 	bl	800b9f4 <HAL_GetTick>
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	1ad3      	subs	r3, r2, r3
 800d3ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3be:	d901      	bls.n	800d3c4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800d3c0:	2303      	movs	r3, #3
 800d3c2:	e007      	b.n	800d3d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d3c4:	4b06      	ldr	r3, [pc, #24]	; (800d3e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d3d0:	d1ee      	bne.n	800d3b0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	40023800 	.word	0x40023800
 800d3e0:	40007000 	.word	0x40007000

0800d3e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d101      	bne.n	800d3fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	e291      	b.n	800d91e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f003 0301 	and.w	r3, r3, #1
 800d402:	2b00      	cmp	r3, #0
 800d404:	f000 8087 	beq.w	800d516 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d408:	4b96      	ldr	r3, [pc, #600]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	f003 030c 	and.w	r3, r3, #12
 800d410:	2b04      	cmp	r3, #4
 800d412:	d00c      	beq.n	800d42e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d414:	4b93      	ldr	r3, [pc, #588]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d416:	689b      	ldr	r3, [r3, #8]
 800d418:	f003 030c 	and.w	r3, r3, #12
 800d41c:	2b08      	cmp	r3, #8
 800d41e:	d112      	bne.n	800d446 <HAL_RCC_OscConfig+0x62>
 800d420:	4b90      	ldr	r3, [pc, #576]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d42c:	d10b      	bne.n	800d446 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d42e:	4b8d      	ldr	r3, [pc, #564]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d436:	2b00      	cmp	r3, #0
 800d438:	d06c      	beq.n	800d514 <HAL_RCC_OscConfig+0x130>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d168      	bne.n	800d514 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	e26b      	b.n	800d91e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d44e:	d106      	bne.n	800d45e <HAL_RCC_OscConfig+0x7a>
 800d450:	4b84      	ldr	r3, [pc, #528]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4a83      	ldr	r2, [pc, #524]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d45a:	6013      	str	r3, [r2, #0]
 800d45c:	e02e      	b.n	800d4bc <HAL_RCC_OscConfig+0xd8>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d10c      	bne.n	800d480 <HAL_RCC_OscConfig+0x9c>
 800d466:	4b7f      	ldr	r3, [pc, #508]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4a7e      	ldr	r2, [pc, #504]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d46c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d470:	6013      	str	r3, [r2, #0]
 800d472:	4b7c      	ldr	r3, [pc, #496]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4a7b      	ldr	r2, [pc, #492]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d478:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d47c:	6013      	str	r3, [r2, #0]
 800d47e:	e01d      	b.n	800d4bc <HAL_RCC_OscConfig+0xd8>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d488:	d10c      	bne.n	800d4a4 <HAL_RCC_OscConfig+0xc0>
 800d48a:	4b76      	ldr	r3, [pc, #472]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a75      	ldr	r2, [pc, #468]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d494:	6013      	str	r3, [r2, #0]
 800d496:	4b73      	ldr	r3, [pc, #460]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	4a72      	ldr	r2, [pc, #456]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d49c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d4a0:	6013      	str	r3, [r2, #0]
 800d4a2:	e00b      	b.n	800d4bc <HAL_RCC_OscConfig+0xd8>
 800d4a4:	4b6f      	ldr	r3, [pc, #444]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4a6e      	ldr	r2, [pc, #440]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d4aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d4ae:	6013      	str	r3, [r2, #0]
 800d4b0:	4b6c      	ldr	r3, [pc, #432]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4a6b      	ldr	r2, [pc, #428]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d4b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d4ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d013      	beq.n	800d4ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4c4:	f7fe fa96 	bl	800b9f4 <HAL_GetTick>
 800d4c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d4ca:	e008      	b.n	800d4de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d4cc:	f7fe fa92 	bl	800b9f4 <HAL_GetTick>
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	1ad3      	subs	r3, r2, r3
 800d4d6:	2b64      	cmp	r3, #100	; 0x64
 800d4d8:	d901      	bls.n	800d4de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d4da:	2303      	movs	r3, #3
 800d4dc:	e21f      	b.n	800d91e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d4de:	4b61      	ldr	r3, [pc, #388]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d0f0      	beq.n	800d4cc <HAL_RCC_OscConfig+0xe8>
 800d4ea:	e014      	b.n	800d516 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4ec:	f7fe fa82 	bl	800b9f4 <HAL_GetTick>
 800d4f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d4f2:	e008      	b.n	800d506 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d4f4:	f7fe fa7e 	bl	800b9f4 <HAL_GetTick>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	1ad3      	subs	r3, r2, r3
 800d4fe:	2b64      	cmp	r3, #100	; 0x64
 800d500:	d901      	bls.n	800d506 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d502:	2303      	movs	r3, #3
 800d504:	e20b      	b.n	800d91e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d506:	4b57      	ldr	r3, [pc, #348]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d1f0      	bne.n	800d4f4 <HAL_RCC_OscConfig+0x110>
 800d512:	e000      	b.n	800d516 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f003 0302 	and.w	r3, r3, #2
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d069      	beq.n	800d5f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d522:	4b50      	ldr	r3, [pc, #320]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d524:	689b      	ldr	r3, [r3, #8]
 800d526:	f003 030c 	and.w	r3, r3, #12
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d00b      	beq.n	800d546 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d52e:	4b4d      	ldr	r3, [pc, #308]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d530:	689b      	ldr	r3, [r3, #8]
 800d532:	f003 030c 	and.w	r3, r3, #12
 800d536:	2b08      	cmp	r3, #8
 800d538:	d11c      	bne.n	800d574 <HAL_RCC_OscConfig+0x190>
 800d53a:	4b4a      	ldr	r3, [pc, #296]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d542:	2b00      	cmp	r3, #0
 800d544:	d116      	bne.n	800d574 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d546:	4b47      	ldr	r3, [pc, #284]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f003 0302 	and.w	r3, r3, #2
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d005      	beq.n	800d55e <HAL_RCC_OscConfig+0x17a>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	2b01      	cmp	r3, #1
 800d558:	d001      	beq.n	800d55e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d55a:	2301      	movs	r3, #1
 800d55c:	e1df      	b.n	800d91e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d55e:	4b41      	ldr	r3, [pc, #260]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	691b      	ldr	r3, [r3, #16]
 800d56a:	00db      	lsls	r3, r3, #3
 800d56c:	493d      	ldr	r1, [pc, #244]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d56e:	4313      	orrs	r3, r2
 800d570:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d572:	e040      	b.n	800d5f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d023      	beq.n	800d5c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d57c:	4b39      	ldr	r3, [pc, #228]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a38      	ldr	r2, [pc, #224]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d582:	f043 0301 	orr.w	r3, r3, #1
 800d586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d588:	f7fe fa34 	bl	800b9f4 <HAL_GetTick>
 800d58c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d58e:	e008      	b.n	800d5a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d590:	f7fe fa30 	bl	800b9f4 <HAL_GetTick>
 800d594:	4602      	mov	r2, r0
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	1ad3      	subs	r3, r2, r3
 800d59a:	2b02      	cmp	r3, #2
 800d59c:	d901      	bls.n	800d5a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800d59e:	2303      	movs	r3, #3
 800d5a0:	e1bd      	b.n	800d91e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d5a2:	4b30      	ldr	r3, [pc, #192]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f003 0302 	and.w	r3, r3, #2
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d0f0      	beq.n	800d590 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d5ae:	4b2d      	ldr	r3, [pc, #180]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	691b      	ldr	r3, [r3, #16]
 800d5ba:	00db      	lsls	r3, r3, #3
 800d5bc:	4929      	ldr	r1, [pc, #164]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d5be:	4313      	orrs	r3, r2
 800d5c0:	600b      	str	r3, [r1, #0]
 800d5c2:	e018      	b.n	800d5f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d5c4:	4b27      	ldr	r3, [pc, #156]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	4a26      	ldr	r2, [pc, #152]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d5ca:	f023 0301 	bic.w	r3, r3, #1
 800d5ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5d0:	f7fe fa10 	bl	800b9f4 <HAL_GetTick>
 800d5d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d5d6:	e008      	b.n	800d5ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d5d8:	f7fe fa0c 	bl	800b9f4 <HAL_GetTick>
 800d5dc:	4602      	mov	r2, r0
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	1ad3      	subs	r3, r2, r3
 800d5e2:	2b02      	cmp	r3, #2
 800d5e4:	d901      	bls.n	800d5ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d5e6:	2303      	movs	r3, #3
 800d5e8:	e199      	b.n	800d91e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d5ea:	4b1e      	ldr	r3, [pc, #120]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f003 0302 	and.w	r3, r3, #2
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d1f0      	bne.n	800d5d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f003 0308 	and.w	r3, r3, #8
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d038      	beq.n	800d674 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	695b      	ldr	r3, [r3, #20]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d019      	beq.n	800d63e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d60a:	4b16      	ldr	r3, [pc, #88]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d60c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d60e:	4a15      	ldr	r2, [pc, #84]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d610:	f043 0301 	orr.w	r3, r3, #1
 800d614:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d616:	f7fe f9ed 	bl	800b9f4 <HAL_GetTick>
 800d61a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d61c:	e008      	b.n	800d630 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d61e:	f7fe f9e9 	bl	800b9f4 <HAL_GetTick>
 800d622:	4602      	mov	r2, r0
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	1ad3      	subs	r3, r2, r3
 800d628:	2b02      	cmp	r3, #2
 800d62a:	d901      	bls.n	800d630 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d62c:	2303      	movs	r3, #3
 800d62e:	e176      	b.n	800d91e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d630:	4b0c      	ldr	r3, [pc, #48]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d634:	f003 0302 	and.w	r3, r3, #2
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d0f0      	beq.n	800d61e <HAL_RCC_OscConfig+0x23a>
 800d63c:	e01a      	b.n	800d674 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d63e:	4b09      	ldr	r3, [pc, #36]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d642:	4a08      	ldr	r2, [pc, #32]	; (800d664 <HAL_RCC_OscConfig+0x280>)
 800d644:	f023 0301 	bic.w	r3, r3, #1
 800d648:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d64a:	f7fe f9d3 	bl	800b9f4 <HAL_GetTick>
 800d64e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d650:	e00a      	b.n	800d668 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d652:	f7fe f9cf 	bl	800b9f4 <HAL_GetTick>
 800d656:	4602      	mov	r2, r0
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	1ad3      	subs	r3, r2, r3
 800d65c:	2b02      	cmp	r3, #2
 800d65e:	d903      	bls.n	800d668 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d660:	2303      	movs	r3, #3
 800d662:	e15c      	b.n	800d91e <HAL_RCC_OscConfig+0x53a>
 800d664:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d668:	4b91      	ldr	r3, [pc, #580]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d66a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d66c:	f003 0302 	and.w	r3, r3, #2
 800d670:	2b00      	cmp	r3, #0
 800d672:	d1ee      	bne.n	800d652 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f003 0304 	and.w	r3, r3, #4
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	f000 80a4 	beq.w	800d7ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d682:	4b8b      	ldr	r3, [pc, #556]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d10d      	bne.n	800d6aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800d68e:	4b88      	ldr	r3, [pc, #544]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d692:	4a87      	ldr	r2, [pc, #540]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d698:	6413      	str	r3, [r2, #64]	; 0x40
 800d69a:	4b85      	ldr	r3, [pc, #532]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d69e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6a2:	60bb      	str	r3, [r7, #8]
 800d6a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d6aa:	4b82      	ldr	r3, [pc, #520]	; (800d8b4 <HAL_RCC_OscConfig+0x4d0>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d118      	bne.n	800d6e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800d6b6:	4b7f      	ldr	r3, [pc, #508]	; (800d8b4 <HAL_RCC_OscConfig+0x4d0>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4a7e      	ldr	r2, [pc, #504]	; (800d8b4 <HAL_RCC_OscConfig+0x4d0>)
 800d6bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d6c2:	f7fe f997 	bl	800b9f4 <HAL_GetTick>
 800d6c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d6c8:	e008      	b.n	800d6dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d6ca:	f7fe f993 	bl	800b9f4 <HAL_GetTick>
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	1ad3      	subs	r3, r2, r3
 800d6d4:	2b64      	cmp	r3, #100	; 0x64
 800d6d6:	d901      	bls.n	800d6dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800d6d8:	2303      	movs	r3, #3
 800d6da:	e120      	b.n	800d91e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d6dc:	4b75      	ldr	r3, [pc, #468]	; (800d8b4 <HAL_RCC_OscConfig+0x4d0>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d0f0      	beq.n	800d6ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	689b      	ldr	r3, [r3, #8]
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	d106      	bne.n	800d6fe <HAL_RCC_OscConfig+0x31a>
 800d6f0:	4b6f      	ldr	r3, [pc, #444]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d6f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6f4:	4a6e      	ldr	r2, [pc, #440]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d6f6:	f043 0301 	orr.w	r3, r3, #1
 800d6fa:	6713      	str	r3, [r2, #112]	; 0x70
 800d6fc:	e02d      	b.n	800d75a <HAL_RCC_OscConfig+0x376>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d10c      	bne.n	800d720 <HAL_RCC_OscConfig+0x33c>
 800d706:	4b6a      	ldr	r3, [pc, #424]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d70a:	4a69      	ldr	r2, [pc, #420]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d70c:	f023 0301 	bic.w	r3, r3, #1
 800d710:	6713      	str	r3, [r2, #112]	; 0x70
 800d712:	4b67      	ldr	r3, [pc, #412]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d716:	4a66      	ldr	r2, [pc, #408]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d718:	f023 0304 	bic.w	r3, r3, #4
 800d71c:	6713      	str	r3, [r2, #112]	; 0x70
 800d71e:	e01c      	b.n	800d75a <HAL_RCC_OscConfig+0x376>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	689b      	ldr	r3, [r3, #8]
 800d724:	2b05      	cmp	r3, #5
 800d726:	d10c      	bne.n	800d742 <HAL_RCC_OscConfig+0x35e>
 800d728:	4b61      	ldr	r3, [pc, #388]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d72a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d72c:	4a60      	ldr	r2, [pc, #384]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d72e:	f043 0304 	orr.w	r3, r3, #4
 800d732:	6713      	str	r3, [r2, #112]	; 0x70
 800d734:	4b5e      	ldr	r3, [pc, #376]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d738:	4a5d      	ldr	r2, [pc, #372]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d73a:	f043 0301 	orr.w	r3, r3, #1
 800d73e:	6713      	str	r3, [r2, #112]	; 0x70
 800d740:	e00b      	b.n	800d75a <HAL_RCC_OscConfig+0x376>
 800d742:	4b5b      	ldr	r3, [pc, #364]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d746:	4a5a      	ldr	r2, [pc, #360]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d748:	f023 0301 	bic.w	r3, r3, #1
 800d74c:	6713      	str	r3, [r2, #112]	; 0x70
 800d74e:	4b58      	ldr	r3, [pc, #352]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d752:	4a57      	ldr	r2, [pc, #348]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d754:	f023 0304 	bic.w	r3, r3, #4
 800d758:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	689b      	ldr	r3, [r3, #8]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d015      	beq.n	800d78e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d762:	f7fe f947 	bl	800b9f4 <HAL_GetTick>
 800d766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d768:	e00a      	b.n	800d780 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d76a:	f7fe f943 	bl	800b9f4 <HAL_GetTick>
 800d76e:	4602      	mov	r2, r0
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	1ad3      	subs	r3, r2, r3
 800d774:	f241 3288 	movw	r2, #5000	; 0x1388
 800d778:	4293      	cmp	r3, r2
 800d77a:	d901      	bls.n	800d780 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800d77c:	2303      	movs	r3, #3
 800d77e:	e0ce      	b.n	800d91e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d780:	4b4b      	ldr	r3, [pc, #300]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d784:	f003 0302 	and.w	r3, r3, #2
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d0ee      	beq.n	800d76a <HAL_RCC_OscConfig+0x386>
 800d78c:	e014      	b.n	800d7b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d78e:	f7fe f931 	bl	800b9f4 <HAL_GetTick>
 800d792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d794:	e00a      	b.n	800d7ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d796:	f7fe f92d 	bl	800b9f4 <HAL_GetTick>
 800d79a:	4602      	mov	r2, r0
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	1ad3      	subs	r3, r2, r3
 800d7a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d901      	bls.n	800d7ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800d7a8:	2303      	movs	r3, #3
 800d7aa:	e0b8      	b.n	800d91e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d7ac:	4b40      	ldr	r3, [pc, #256]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d7ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7b0:	f003 0302 	and.w	r3, r3, #2
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d1ee      	bne.n	800d796 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d7b8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d105      	bne.n	800d7ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d7be:	4b3c      	ldr	r3, [pc, #240]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7c2:	4a3b      	ldr	r2, [pc, #236]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d7c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d7c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	699b      	ldr	r3, [r3, #24]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	f000 80a4 	beq.w	800d91c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d7d4:	4b36      	ldr	r3, [pc, #216]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d7d6:	689b      	ldr	r3, [r3, #8]
 800d7d8:	f003 030c 	and.w	r3, r3, #12
 800d7dc:	2b08      	cmp	r3, #8
 800d7de:	d06b      	beq.n	800d8b8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	699b      	ldr	r3, [r3, #24]
 800d7e4:	2b02      	cmp	r3, #2
 800d7e6:	d149      	bne.n	800d87c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d7e8:	4b31      	ldr	r3, [pc, #196]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a30      	ldr	r2, [pc, #192]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d7ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d7f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7f4:	f7fe f8fe 	bl	800b9f4 <HAL_GetTick>
 800d7f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d7fa:	e008      	b.n	800d80e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d7fc:	f7fe f8fa 	bl	800b9f4 <HAL_GetTick>
 800d800:	4602      	mov	r2, r0
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	1ad3      	subs	r3, r2, r3
 800d806:	2b02      	cmp	r3, #2
 800d808:	d901      	bls.n	800d80e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800d80a:	2303      	movs	r3, #3
 800d80c:	e087      	b.n	800d91e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d80e:	4b28      	ldr	r3, [pc, #160]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d816:	2b00      	cmp	r3, #0
 800d818:	d1f0      	bne.n	800d7fc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	69da      	ldr	r2, [r3, #28]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6a1b      	ldr	r3, [r3, #32]
 800d822:	431a      	orrs	r2, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d828:	019b      	lsls	r3, r3, #6
 800d82a:	431a      	orrs	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d830:	085b      	lsrs	r3, r3, #1
 800d832:	3b01      	subs	r3, #1
 800d834:	041b      	lsls	r3, r3, #16
 800d836:	431a      	orrs	r2, r3
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d83c:	061b      	lsls	r3, r3, #24
 800d83e:	4313      	orrs	r3, r2
 800d840:	4a1b      	ldr	r2, [pc, #108]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d842:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d846:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d848:	4b19      	ldr	r3, [pc, #100]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4a18      	ldr	r2, [pc, #96]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d84e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d854:	f7fe f8ce 	bl	800b9f4 <HAL_GetTick>
 800d858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d85a:	e008      	b.n	800d86e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d85c:	f7fe f8ca 	bl	800b9f4 <HAL_GetTick>
 800d860:	4602      	mov	r2, r0
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	1ad3      	subs	r3, r2, r3
 800d866:	2b02      	cmp	r3, #2
 800d868:	d901      	bls.n	800d86e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800d86a:	2303      	movs	r3, #3
 800d86c:	e057      	b.n	800d91e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d86e:	4b10      	ldr	r3, [pc, #64]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d876:	2b00      	cmp	r3, #0
 800d878:	d0f0      	beq.n	800d85c <HAL_RCC_OscConfig+0x478>
 800d87a:	e04f      	b.n	800d91c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d87c:	4b0c      	ldr	r3, [pc, #48]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a0b      	ldr	r2, [pc, #44]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d888:	f7fe f8b4 	bl	800b9f4 <HAL_GetTick>
 800d88c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d88e:	e008      	b.n	800d8a2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d890:	f7fe f8b0 	bl	800b9f4 <HAL_GetTick>
 800d894:	4602      	mov	r2, r0
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	1ad3      	subs	r3, r2, r3
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	d901      	bls.n	800d8a2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800d89e:	2303      	movs	r3, #3
 800d8a0:	e03d      	b.n	800d91e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d8a2:	4b03      	ldr	r3, [pc, #12]	; (800d8b0 <HAL_RCC_OscConfig+0x4cc>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1f0      	bne.n	800d890 <HAL_RCC_OscConfig+0x4ac>
 800d8ae:	e035      	b.n	800d91c <HAL_RCC_OscConfig+0x538>
 800d8b0:	40023800 	.word	0x40023800
 800d8b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800d8b8:	4b1b      	ldr	r3, [pc, #108]	; (800d928 <HAL_RCC_OscConfig+0x544>)
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	699b      	ldr	r3, [r3, #24]
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d028      	beq.n	800d918 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d121      	bne.n	800d918 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d11a      	bne.n	800d918 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d8e2:	68fa      	ldr	r2, [r7, #12]
 800d8e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d8e8:	4013      	ands	r3, r2
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d8ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d111      	bne.n	800d918 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8fe:	085b      	lsrs	r3, r3, #1
 800d900:	3b01      	subs	r3, #1
 800d902:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d904:	429a      	cmp	r2, r3
 800d906:	d107      	bne.n	800d918 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d912:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d914:	429a      	cmp	r2, r3
 800d916:	d001      	beq.n	800d91c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800d918:	2301      	movs	r3, #1
 800d91a:	e000      	b.n	800d91e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800d91c:	2300      	movs	r3, #0
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3718      	adds	r7, #24
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	40023800 	.word	0x40023800

0800d92c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b084      	sub	sp, #16
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800d936:	2300      	movs	r3, #0
 800d938:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d101      	bne.n	800d944 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d940:	2301      	movs	r3, #1
 800d942:	e0d0      	b.n	800dae6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d944:	4b6a      	ldr	r3, [pc, #424]	; (800daf0 <HAL_RCC_ClockConfig+0x1c4>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f003 030f 	and.w	r3, r3, #15
 800d94c:	683a      	ldr	r2, [r7, #0]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d910      	bls.n	800d974 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d952:	4b67      	ldr	r3, [pc, #412]	; (800daf0 <HAL_RCC_ClockConfig+0x1c4>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f023 020f 	bic.w	r2, r3, #15
 800d95a:	4965      	ldr	r1, [pc, #404]	; (800daf0 <HAL_RCC_ClockConfig+0x1c4>)
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	4313      	orrs	r3, r2
 800d960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d962:	4b63      	ldr	r3, [pc, #396]	; (800daf0 <HAL_RCC_ClockConfig+0x1c4>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f003 030f 	and.w	r3, r3, #15
 800d96a:	683a      	ldr	r2, [r7, #0]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d001      	beq.n	800d974 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d970:	2301      	movs	r3, #1
 800d972:	e0b8      	b.n	800dae6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f003 0302 	and.w	r3, r3, #2
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d020      	beq.n	800d9c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f003 0304 	and.w	r3, r3, #4
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d005      	beq.n	800d998 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d98c:	4b59      	ldr	r3, [pc, #356]	; (800daf4 <HAL_RCC_ClockConfig+0x1c8>)
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	4a58      	ldr	r2, [pc, #352]	; (800daf4 <HAL_RCC_ClockConfig+0x1c8>)
 800d992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d996:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f003 0308 	and.w	r3, r3, #8
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d005      	beq.n	800d9b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d9a4:	4b53      	ldr	r3, [pc, #332]	; (800daf4 <HAL_RCC_ClockConfig+0x1c8>)
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	4a52      	ldr	r2, [pc, #328]	; (800daf4 <HAL_RCC_ClockConfig+0x1c8>)
 800d9aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d9ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d9b0:	4b50      	ldr	r3, [pc, #320]	; (800daf4 <HAL_RCC_ClockConfig+0x1c8>)
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	494d      	ldr	r1, [pc, #308]	; (800daf4 <HAL_RCC_ClockConfig+0x1c8>)
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f003 0301 	and.w	r3, r3, #1
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d040      	beq.n	800da50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d107      	bne.n	800d9e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d9d6:	4b47      	ldr	r3, [pc, #284]	; (800daf4 <HAL_RCC_ClockConfig+0x1c8>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d115      	bne.n	800da0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	e07f      	b.n	800dae6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	2b02      	cmp	r3, #2
 800d9ec:	d107      	bne.n	800d9fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d9ee:	4b41      	ldr	r3, [pc, #260]	; (800daf4 <HAL_RCC_ClockConfig+0x1c8>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d109      	bne.n	800da0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	e073      	b.n	800dae6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d9fe:	4b3d      	ldr	r3, [pc, #244]	; (800daf4 <HAL_RCC_ClockConfig+0x1c8>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f003 0302 	and.w	r3, r3, #2
 800da06:	2b00      	cmp	r3, #0
 800da08:	d101      	bne.n	800da0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800da0a:	2301      	movs	r3, #1
 800da0c:	e06b      	b.n	800dae6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800da0e:	4b39      	ldr	r3, [pc, #228]	; (800daf4 <HAL_RCC_ClockConfig+0x1c8>)
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	f023 0203 	bic.w	r2, r3, #3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	4936      	ldr	r1, [pc, #216]	; (800daf4 <HAL_RCC_ClockConfig+0x1c8>)
 800da1c:	4313      	orrs	r3, r2
 800da1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da20:	f7fd ffe8 	bl	800b9f4 <HAL_GetTick>
 800da24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da26:	e00a      	b.n	800da3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800da28:	f7fd ffe4 	bl	800b9f4 <HAL_GetTick>
 800da2c:	4602      	mov	r2, r0
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	f241 3288 	movw	r2, #5000	; 0x1388
 800da36:	4293      	cmp	r3, r2
 800da38:	d901      	bls.n	800da3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800da3a:	2303      	movs	r3, #3
 800da3c:	e053      	b.n	800dae6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da3e:	4b2d      	ldr	r3, [pc, #180]	; (800daf4 <HAL_RCC_ClockConfig+0x1c8>)
 800da40:	689b      	ldr	r3, [r3, #8]
 800da42:	f003 020c 	and.w	r2, r3, #12
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	685b      	ldr	r3, [r3, #4]
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d1eb      	bne.n	800da28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800da50:	4b27      	ldr	r3, [pc, #156]	; (800daf0 <HAL_RCC_ClockConfig+0x1c4>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	f003 030f 	and.w	r3, r3, #15
 800da58:	683a      	ldr	r2, [r7, #0]
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d210      	bcs.n	800da80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da5e:	4b24      	ldr	r3, [pc, #144]	; (800daf0 <HAL_RCC_ClockConfig+0x1c4>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f023 020f 	bic.w	r2, r3, #15
 800da66:	4922      	ldr	r1, [pc, #136]	; (800daf0 <HAL_RCC_ClockConfig+0x1c4>)
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	4313      	orrs	r3, r2
 800da6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800da6e:	4b20      	ldr	r3, [pc, #128]	; (800daf0 <HAL_RCC_ClockConfig+0x1c4>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f003 030f 	and.w	r3, r3, #15
 800da76:	683a      	ldr	r2, [r7, #0]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d001      	beq.n	800da80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800da7c:	2301      	movs	r3, #1
 800da7e:	e032      	b.n	800dae6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f003 0304 	and.w	r3, r3, #4
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d008      	beq.n	800da9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800da8c:	4b19      	ldr	r3, [pc, #100]	; (800daf4 <HAL_RCC_ClockConfig+0x1c8>)
 800da8e:	689b      	ldr	r3, [r3, #8]
 800da90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	4916      	ldr	r1, [pc, #88]	; (800daf4 <HAL_RCC_ClockConfig+0x1c8>)
 800da9a:	4313      	orrs	r3, r2
 800da9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f003 0308 	and.w	r3, r3, #8
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d009      	beq.n	800dabe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800daaa:	4b12      	ldr	r3, [pc, #72]	; (800daf4 <HAL_RCC_ClockConfig+0x1c8>)
 800daac:	689b      	ldr	r3, [r3, #8]
 800daae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	691b      	ldr	r3, [r3, #16]
 800dab6:	00db      	lsls	r3, r3, #3
 800dab8:	490e      	ldr	r1, [pc, #56]	; (800daf4 <HAL_RCC_ClockConfig+0x1c8>)
 800daba:	4313      	orrs	r3, r2
 800dabc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800dabe:	f000 f821 	bl	800db04 <HAL_RCC_GetSysClockFreq>
 800dac2:	4601      	mov	r1, r0
 800dac4:	4b0b      	ldr	r3, [pc, #44]	; (800daf4 <HAL_RCC_ClockConfig+0x1c8>)
 800dac6:	689b      	ldr	r3, [r3, #8]
 800dac8:	091b      	lsrs	r3, r3, #4
 800daca:	f003 030f 	and.w	r3, r3, #15
 800dace:	4a0a      	ldr	r2, [pc, #40]	; (800daf8 <HAL_RCC_ClockConfig+0x1cc>)
 800dad0:	5cd3      	ldrb	r3, [r2, r3]
 800dad2:	fa21 f303 	lsr.w	r3, r1, r3
 800dad6:	4a09      	ldr	r2, [pc, #36]	; (800dafc <HAL_RCC_ClockConfig+0x1d0>)
 800dad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800dada:	4b09      	ldr	r3, [pc, #36]	; (800db00 <HAL_RCC_ClockConfig+0x1d4>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fd ff44 	bl	800b96c <HAL_InitTick>

  return HAL_OK;
 800dae4:	2300      	movs	r3, #0
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3710      	adds	r7, #16
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	40023c00 	.word	0x40023c00
 800daf4:	40023800 	.word	0x40023800
 800daf8:	08011ef8 	.word	0x08011ef8
 800dafc:	200104c4 	.word	0x200104c4
 800db00:	200118c0 	.word	0x200118c0

0800db04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800db04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db06:	b085      	sub	sp, #20
 800db08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800db0a:	2300      	movs	r3, #0
 800db0c:	607b      	str	r3, [r7, #4]
 800db0e:	2300      	movs	r3, #0
 800db10:	60fb      	str	r3, [r7, #12]
 800db12:	2300      	movs	r3, #0
 800db14:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800db16:	2300      	movs	r3, #0
 800db18:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800db1a:	4b50      	ldr	r3, [pc, #320]	; (800dc5c <HAL_RCC_GetSysClockFreq+0x158>)
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	f003 030c 	and.w	r3, r3, #12
 800db22:	2b04      	cmp	r3, #4
 800db24:	d007      	beq.n	800db36 <HAL_RCC_GetSysClockFreq+0x32>
 800db26:	2b08      	cmp	r3, #8
 800db28:	d008      	beq.n	800db3c <HAL_RCC_GetSysClockFreq+0x38>
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f040 808d 	bne.w	800dc4a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800db30:	4b4b      	ldr	r3, [pc, #300]	; (800dc60 <HAL_RCC_GetSysClockFreq+0x15c>)
 800db32:	60bb      	str	r3, [r7, #8]
      break;
 800db34:	e08c      	b.n	800dc50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800db36:	4b4b      	ldr	r3, [pc, #300]	; (800dc64 <HAL_RCC_GetSysClockFreq+0x160>)
 800db38:	60bb      	str	r3, [r7, #8]
      break;
 800db3a:	e089      	b.n	800dc50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800db3c:	4b47      	ldr	r3, [pc, #284]	; (800dc5c <HAL_RCC_GetSysClockFreq+0x158>)
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db44:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800db46:	4b45      	ldr	r3, [pc, #276]	; (800dc5c <HAL_RCC_GetSysClockFreq+0x158>)
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d023      	beq.n	800db9a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800db52:	4b42      	ldr	r3, [pc, #264]	; (800dc5c <HAL_RCC_GetSysClockFreq+0x158>)
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	099b      	lsrs	r3, r3, #6
 800db58:	f04f 0400 	mov.w	r4, #0
 800db5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800db60:	f04f 0200 	mov.w	r2, #0
 800db64:	ea03 0501 	and.w	r5, r3, r1
 800db68:	ea04 0602 	and.w	r6, r4, r2
 800db6c:	4a3d      	ldr	r2, [pc, #244]	; (800dc64 <HAL_RCC_GetSysClockFreq+0x160>)
 800db6e:	fb02 f106 	mul.w	r1, r2, r6
 800db72:	2200      	movs	r2, #0
 800db74:	fb02 f205 	mul.w	r2, r2, r5
 800db78:	440a      	add	r2, r1
 800db7a:	493a      	ldr	r1, [pc, #232]	; (800dc64 <HAL_RCC_GetSysClockFreq+0x160>)
 800db7c:	fba5 0101 	umull	r0, r1, r5, r1
 800db80:	1853      	adds	r3, r2, r1
 800db82:	4619      	mov	r1, r3
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f04f 0400 	mov.w	r4, #0
 800db8a:	461a      	mov	r2, r3
 800db8c:	4623      	mov	r3, r4
 800db8e:	f7f2 ff65 	bl	8000a5c <__aeabi_uldivmod>
 800db92:	4603      	mov	r3, r0
 800db94:	460c      	mov	r4, r1
 800db96:	60fb      	str	r3, [r7, #12]
 800db98:	e049      	b.n	800dc2e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800db9a:	4b30      	ldr	r3, [pc, #192]	; (800dc5c <HAL_RCC_GetSysClockFreq+0x158>)
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	099b      	lsrs	r3, r3, #6
 800dba0:	f04f 0400 	mov.w	r4, #0
 800dba4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dba8:	f04f 0200 	mov.w	r2, #0
 800dbac:	ea03 0501 	and.w	r5, r3, r1
 800dbb0:	ea04 0602 	and.w	r6, r4, r2
 800dbb4:	4629      	mov	r1, r5
 800dbb6:	4632      	mov	r2, r6
 800dbb8:	f04f 0300 	mov.w	r3, #0
 800dbbc:	f04f 0400 	mov.w	r4, #0
 800dbc0:	0154      	lsls	r4, r2, #5
 800dbc2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800dbc6:	014b      	lsls	r3, r1, #5
 800dbc8:	4619      	mov	r1, r3
 800dbca:	4622      	mov	r2, r4
 800dbcc:	1b49      	subs	r1, r1, r5
 800dbce:	eb62 0206 	sbc.w	r2, r2, r6
 800dbd2:	f04f 0300 	mov.w	r3, #0
 800dbd6:	f04f 0400 	mov.w	r4, #0
 800dbda:	0194      	lsls	r4, r2, #6
 800dbdc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800dbe0:	018b      	lsls	r3, r1, #6
 800dbe2:	1a5b      	subs	r3, r3, r1
 800dbe4:	eb64 0402 	sbc.w	r4, r4, r2
 800dbe8:	f04f 0100 	mov.w	r1, #0
 800dbec:	f04f 0200 	mov.w	r2, #0
 800dbf0:	00e2      	lsls	r2, r4, #3
 800dbf2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dbf6:	00d9      	lsls	r1, r3, #3
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	4614      	mov	r4, r2
 800dbfc:	195b      	adds	r3, r3, r5
 800dbfe:	eb44 0406 	adc.w	r4, r4, r6
 800dc02:	f04f 0100 	mov.w	r1, #0
 800dc06:	f04f 0200 	mov.w	r2, #0
 800dc0a:	02a2      	lsls	r2, r4, #10
 800dc0c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800dc10:	0299      	lsls	r1, r3, #10
 800dc12:	460b      	mov	r3, r1
 800dc14:	4614      	mov	r4, r2
 800dc16:	4618      	mov	r0, r3
 800dc18:	4621      	mov	r1, r4
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f04f 0400 	mov.w	r4, #0
 800dc20:	461a      	mov	r2, r3
 800dc22:	4623      	mov	r3, r4
 800dc24:	f7f2 ff1a 	bl	8000a5c <__aeabi_uldivmod>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800dc2e:	4b0b      	ldr	r3, [pc, #44]	; (800dc5c <HAL_RCC_GetSysClockFreq+0x158>)
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	0c1b      	lsrs	r3, r3, #16
 800dc34:	f003 0303 	and.w	r3, r3, #3
 800dc38:	3301      	adds	r3, #1
 800dc3a:	005b      	lsls	r3, r3, #1
 800dc3c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800dc3e:	68fa      	ldr	r2, [r7, #12]
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc46:	60bb      	str	r3, [r7, #8]
      break;
 800dc48:	e002      	b.n	800dc50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dc4a:	4b05      	ldr	r3, [pc, #20]	; (800dc60 <HAL_RCC_GetSysClockFreq+0x15c>)
 800dc4c:	60bb      	str	r3, [r7, #8]
      break;
 800dc4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dc50:	68bb      	ldr	r3, [r7, #8]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3714      	adds	r7, #20
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	40023800 	.word	0x40023800
 800dc60:	00f42400 	.word	0x00f42400
 800dc64:	017d7840 	.word	0x017d7840

0800dc68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dc6c:	4b03      	ldr	r3, [pc, #12]	; (800dc7c <HAL_RCC_GetHCLKFreq+0x14>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	200104c4 	.word	0x200104c4

0800dc80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800dc84:	f7ff fff0 	bl	800dc68 <HAL_RCC_GetHCLKFreq>
 800dc88:	4601      	mov	r1, r0
 800dc8a:	4b05      	ldr	r3, [pc, #20]	; (800dca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	0a9b      	lsrs	r3, r3, #10
 800dc90:	f003 0307 	and.w	r3, r3, #7
 800dc94:	4a03      	ldr	r2, [pc, #12]	; (800dca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dc96:	5cd3      	ldrb	r3, [r2, r3]
 800dc98:	fa21 f303 	lsr.w	r3, r1, r3
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	40023800 	.word	0x40023800
 800dca4:	08011f08 	.word	0x08011f08

0800dca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800dcac:	f7ff ffdc 	bl	800dc68 <HAL_RCC_GetHCLKFreq>
 800dcb0:	4601      	mov	r1, r0
 800dcb2:	4b05      	ldr	r3, [pc, #20]	; (800dcc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dcb4:	689b      	ldr	r3, [r3, #8]
 800dcb6:	0b5b      	lsrs	r3, r3, #13
 800dcb8:	f003 0307 	and.w	r3, r3, #7
 800dcbc:	4a03      	ldr	r2, [pc, #12]	; (800dccc <HAL_RCC_GetPCLK2Freq+0x24>)
 800dcbe:	5cd3      	ldrb	r3, [r2, r3]
 800dcc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	40023800 	.word	0x40023800
 800dccc:	08011f08 	.word	0x08011f08

0800dcd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b088      	sub	sp, #32
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800dce0:	2300      	movs	r3, #0
 800dce2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800dce4:	2300      	movs	r3, #0
 800dce6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f003 0301 	and.w	r3, r3, #1
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d012      	beq.n	800dd1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800dcf4:	4b65      	ldr	r3, [pc, #404]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800dcf6:	689b      	ldr	r3, [r3, #8]
 800dcf8:	4a64      	ldr	r2, [pc, #400]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800dcfa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800dcfe:	6093      	str	r3, [r2, #8]
 800dd00:	4b62      	ldr	r3, [pc, #392]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800dd02:	689a      	ldr	r2, [r3, #8]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd08:	4960      	ldr	r1, [pc, #384]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800dd0a:	4313      	orrs	r3, r2
 800dd0c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d101      	bne.n	800dd1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800dd16:	2301      	movs	r3, #1
 800dd18:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d017      	beq.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dd26:	4b59      	ldr	r3, [pc, #356]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800dd28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd34:	4955      	ldr	r1, [pc, #340]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800dd36:	4313      	orrs	r3, r2
 800dd38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd44:	d101      	bne.n	800dd4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800dd46:	2301      	movs	r3, #1
 800dd48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d101      	bne.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800dd52:	2301      	movs	r3, #1
 800dd54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d017      	beq.n	800dd92 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800dd62:	4b4a      	ldr	r3, [pc, #296]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800dd64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd70:	4946      	ldr	r1, [pc, #280]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800dd72:	4313      	orrs	r3, r2
 800dd74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd80:	d101      	bne.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800dd82:	2301      	movs	r3, #1
 800dd84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d101      	bne.n	800dd92 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800dd8e:	2301      	movs	r3, #1
 800dd90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f003 0320 	and.w	r3, r3, #32
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f000 808b 	beq.w	800deb6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800dda0:	4b3a      	ldr	r3, [pc, #232]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800dda2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dda4:	4a39      	ldr	r2, [pc, #228]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800dda6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ddaa:	6413      	str	r3, [r2, #64]	; 0x40
 800ddac:	4b37      	ldr	r3, [pc, #220]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ddae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ddb4:	60fb      	str	r3, [r7, #12]
 800ddb6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ddb8:	4b35      	ldr	r3, [pc, #212]	; (800de90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a34      	ldr	r2, [pc, #208]	; (800de90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800ddbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ddc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddc4:	f7fd fe16 	bl	800b9f4 <HAL_GetTick>
 800ddc8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ddca:	e008      	b.n	800ddde <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ddcc:	f7fd fe12 	bl	800b9f4 <HAL_GetTick>
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	1ad3      	subs	r3, r2, r3
 800ddd6:	2b64      	cmp	r3, #100	; 0x64
 800ddd8:	d901      	bls.n	800ddde <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ddda:	2303      	movs	r3, #3
 800dddc:	e2ba      	b.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ddde:	4b2c      	ldr	r3, [pc, #176]	; (800de90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d0f0      	beq.n	800ddcc <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ddea:	4b28      	ldr	r3, [pc, #160]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ddec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ddf2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d035      	beq.n	800de66 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de02:	693a      	ldr	r2, [r7, #16]
 800de04:	429a      	cmp	r2, r3
 800de06:	d02e      	beq.n	800de66 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800de08:	4b20      	ldr	r3, [pc, #128]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800de0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800de12:	4b1e      	ldr	r3, [pc, #120]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800de14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de16:	4a1d      	ldr	r2, [pc, #116]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800de18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800de1e:	4b1b      	ldr	r3, [pc, #108]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800de20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de22:	4a1a      	ldr	r2, [pc, #104]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800de24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800de2a:	4a18      	ldr	r2, [pc, #96]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800de30:	4b16      	ldr	r3, [pc, #88]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800de32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de34:	f003 0301 	and.w	r3, r3, #1
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d114      	bne.n	800de66 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de3c:	f7fd fdda 	bl	800b9f4 <HAL_GetTick>
 800de40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800de42:	e00a      	b.n	800de5a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800de44:	f7fd fdd6 	bl	800b9f4 <HAL_GetTick>
 800de48:	4602      	mov	r2, r0
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	1ad3      	subs	r3, r2, r3
 800de4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800de52:	4293      	cmp	r3, r2
 800de54:	d901      	bls.n	800de5a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800de56:	2303      	movs	r3, #3
 800de58:	e27c      	b.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800de5a:	4b0c      	ldr	r3, [pc, #48]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800de5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de5e:	f003 0302 	and.w	r3, r3, #2
 800de62:	2b00      	cmp	r3, #0
 800de64:	d0ee      	beq.n	800de44 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800de72:	d111      	bne.n	800de98 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800de74:	4b05      	ldr	r3, [pc, #20]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800de76:	689b      	ldr	r3, [r3, #8]
 800de78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800de80:	4b04      	ldr	r3, [pc, #16]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800de82:	400b      	ands	r3, r1
 800de84:	4901      	ldr	r1, [pc, #4]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800de86:	4313      	orrs	r3, r2
 800de88:	608b      	str	r3, [r1, #8]
 800de8a:	e00b      	b.n	800dea4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800de8c:	40023800 	.word	0x40023800
 800de90:	40007000 	.word	0x40007000
 800de94:	0ffffcff 	.word	0x0ffffcff
 800de98:	4ba3      	ldr	r3, [pc, #652]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	4aa2      	ldr	r2, [pc, #648]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800de9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800dea2:	6093      	str	r3, [r2, #8]
 800dea4:	4ba0      	ldr	r3, [pc, #640]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800dea6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800deb0:	499d      	ldr	r1, [pc, #628]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800deb2:	4313      	orrs	r3, r2
 800deb4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f003 0310 	and.w	r3, r3, #16
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d010      	beq.n	800dee4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800dec2:	4b99      	ldr	r3, [pc, #612]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800dec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dec8:	4a97      	ldr	r2, [pc, #604]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800deca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dece:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ded2:	4b95      	ldr	r3, [pc, #596]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800ded4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dedc:	4992      	ldr	r1, [pc, #584]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800dede:	4313      	orrs	r3, r2
 800dee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800deec:	2b00      	cmp	r3, #0
 800deee:	d00a      	beq.n	800df06 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800def0:	4b8d      	ldr	r3, [pc, #564]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800def2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800def6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800defe:	498a      	ldr	r1, [pc, #552]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800df00:	4313      	orrs	r3, r2
 800df02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d00a      	beq.n	800df28 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800df12:	4b85      	ldr	r3, [pc, #532]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800df14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df20:	4981      	ldr	r1, [pc, #516]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800df22:	4313      	orrs	r3, r2
 800df24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df30:	2b00      	cmp	r3, #0
 800df32:	d00a      	beq.n	800df4a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800df34:	4b7c      	ldr	r3, [pc, #496]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800df36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df42:	4979      	ldr	r1, [pc, #484]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800df44:	4313      	orrs	r3, r2
 800df46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df52:	2b00      	cmp	r3, #0
 800df54:	d00a      	beq.n	800df6c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800df56:	4b74      	ldr	r3, [pc, #464]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800df58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df5c:	f023 0203 	bic.w	r2, r3, #3
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df64:	4970      	ldr	r1, [pc, #448]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800df66:	4313      	orrs	r3, r2
 800df68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df74:	2b00      	cmp	r3, #0
 800df76:	d00a      	beq.n	800df8e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800df78:	4b6b      	ldr	r3, [pc, #428]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800df7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df7e:	f023 020c 	bic.w	r2, r3, #12
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df86:	4968      	ldr	r1, [pc, #416]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800df88:	4313      	orrs	r3, r2
 800df8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df96:	2b00      	cmp	r3, #0
 800df98:	d00a      	beq.n	800dfb0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800df9a:	4b63      	ldr	r3, [pc, #396]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800df9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfa8:	495f      	ldr	r1, [pc, #380]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d00a      	beq.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800dfbc:	4b5a      	ldr	r3, [pc, #360]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800dfbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfca:	4957      	ldr	r1, [pc, #348]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00a      	beq.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800dfde:	4b52      	ldr	r3, [pc, #328]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800dfe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfec:	494e      	ldr	r1, [pc, #312]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800dfee:	4313      	orrs	r3, r2
 800dff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00a      	beq.n	800e016 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e000:	4b49      	ldr	r3, [pc, #292]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e006:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e00e:	4946      	ldr	r1, [pc, #280]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e010:	4313      	orrs	r3, r2
 800e012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d00a      	beq.n	800e038 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e022:	4b41      	ldr	r3, [pc, #260]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e028:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e030:	493d      	ldr	r1, [pc, #244]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e032:	4313      	orrs	r3, r2
 800e034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e040:	2b00      	cmp	r3, #0
 800e042:	d00a      	beq.n	800e05a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e044:	4b38      	ldr	r3, [pc, #224]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e04a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e052:	4935      	ldr	r1, [pc, #212]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e054:	4313      	orrs	r3, r2
 800e056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e062:	2b00      	cmp	r3, #0
 800e064:	d011      	beq.n	800e08a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e066:	4b30      	ldr	r3, [pc, #192]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e06c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e074:	492c      	ldr	r1, [pc, #176]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e076:	4313      	orrs	r3, r2
 800e078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e080:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e084:	d101      	bne.n	800e08a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800e086:	2301      	movs	r3, #1
 800e088:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e092:	2b00      	cmp	r3, #0
 800e094:	d00a      	beq.n	800e0ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e096:	4b24      	ldr	r3, [pc, #144]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e09c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0a4:	4920      	ldr	r1, [pc, #128]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e0a6:	4313      	orrs	r3, r2
 800e0a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d00a      	beq.n	800e0ce <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e0b8:	4b1b      	ldr	r3, [pc, #108]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e0ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0c6:	4918      	ldr	r1, [pc, #96]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e0c8:	4313      	orrs	r3, r2
 800e0ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d00a      	beq.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800e0da:	4b13      	ldr	r3, [pc, #76]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0e0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0e8:	490f      	ldr	r1, [pc, #60]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d005      	beq.n	800e102 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e0fe:	f040 809c 	bne.w	800e23a <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e102:	4b09      	ldr	r3, [pc, #36]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	4a08      	ldr	r2, [pc, #32]	; (800e128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e108:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e10c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e10e:	f7fd fc71 	bl	800b9f4 <HAL_GetTick>
 800e112:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e114:	e00a      	b.n	800e12c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e116:	f7fd fc6d 	bl	800b9f4 <HAL_GetTick>
 800e11a:	4602      	mov	r2, r0
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	1ad3      	subs	r3, r2, r3
 800e120:	2b64      	cmp	r3, #100	; 0x64
 800e122:	d903      	bls.n	800e12c <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e124:	2303      	movs	r3, #3
 800e126:	e115      	b.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800e128:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e12c:	4b8b      	ldr	r3, [pc, #556]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e134:	2b00      	cmp	r3, #0
 800e136:	d1ee      	bne.n	800e116 <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f003 0301 	and.w	r3, r3, #1
 800e140:	2b00      	cmp	r3, #0
 800e142:	d017      	beq.n	800e174 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d113      	bne.n	800e174 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e14c:	4b83      	ldr	r3, [pc, #524]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e14e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e152:	0e1b      	lsrs	r3, r3, #24
 800e154:	f003 030f 	and.w	r3, r3, #15
 800e158:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	019a      	lsls	r2, r3, #6
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	061b      	lsls	r3, r3, #24
 800e164:	431a      	orrs	r2, r3
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	071b      	lsls	r3, r3, #28
 800e16c:	497b      	ldr	r1, [pc, #492]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e16e:	4313      	orrs	r3, r2
 800e170:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d004      	beq.n	800e18a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e188:	d00a      	beq.n	800e1a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e192:	2b00      	cmp	r3, #0
 800e194:	d024      	beq.n	800e1e0 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e19a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e19e:	d11f      	bne.n	800e1e0 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e1a0:	4b6e      	ldr	r3, [pc, #440]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e1a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1a6:	0f1b      	lsrs	r3, r3, #28
 800e1a8:	f003 0307 	and.w	r3, r3, #7
 800e1ac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	019a      	lsls	r2, r3, #6
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	68db      	ldr	r3, [r3, #12]
 800e1b8:	061b      	lsls	r3, r3, #24
 800e1ba:	431a      	orrs	r2, r3
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	071b      	lsls	r3, r3, #28
 800e1c0:	4966      	ldr	r1, [pc, #408]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e1c8:	4b64      	ldr	r3, [pc, #400]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e1ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1ce:	f023 021f 	bic.w	r2, r3, #31
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	69db      	ldr	r3, [r3, #28]
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	4960      	ldr	r1, [pc, #384]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d00d      	beq.n	800e208 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	019a      	lsls	r2, r3, #6
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	68db      	ldr	r3, [r3, #12]
 800e1f6:	061b      	lsls	r3, r3, #24
 800e1f8:	431a      	orrs	r2, r3
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	071b      	lsls	r3, r3, #28
 800e200:	4956      	ldr	r1, [pc, #344]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e202:	4313      	orrs	r3, r2
 800e204:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e208:	4b54      	ldr	r3, [pc, #336]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4a53      	ldr	r2, [pc, #332]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e20e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e214:	f7fd fbee 	bl	800b9f4 <HAL_GetTick>
 800e218:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e21a:	e008      	b.n	800e22e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e21c:	f7fd fbea 	bl	800b9f4 <HAL_GetTick>
 800e220:	4602      	mov	r2, r0
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	1ad3      	subs	r3, r2, r3
 800e226:	2b64      	cmp	r3, #100	; 0x64
 800e228:	d901      	bls.n	800e22e <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e22a:	2303      	movs	r3, #3
 800e22c:	e092      	b.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e22e:	4b4b      	ldr	r3, [pc, #300]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e236:	2b00      	cmp	r3, #0
 800e238:	d0f0      	beq.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e23a:	69bb      	ldr	r3, [r7, #24]
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	f040 8088 	bne.w	800e352 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e242:	4b46      	ldr	r3, [pc, #280]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a45      	ldr	r2, [pc, #276]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e24c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e24e:	f7fd fbd1 	bl	800b9f4 <HAL_GetTick>
 800e252:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e254:	e008      	b.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e256:	f7fd fbcd 	bl	800b9f4 <HAL_GetTick>
 800e25a:	4602      	mov	r2, r0
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	1ad3      	subs	r3, r2, r3
 800e260:	2b64      	cmp	r3, #100	; 0x64
 800e262:	d901      	bls.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e264:	2303      	movs	r3, #3
 800e266:	e075      	b.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e268:	4b3c      	ldr	r3, [pc, #240]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e274:	d0ef      	beq.n	800e256 <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d003      	beq.n	800e28a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e286:	2b00      	cmp	r3, #0
 800e288:	d009      	beq.n	800e29e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e292:	2b00      	cmp	r3, #0
 800e294:	d024      	beq.n	800e2e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d120      	bne.n	800e2e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e29e:	4b2f      	ldr	r3, [pc, #188]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2a4:	0c1b      	lsrs	r3, r3, #16
 800e2a6:	f003 0303 	and.w	r3, r3, #3
 800e2aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	691b      	ldr	r3, [r3, #16]
 800e2b0:	019a      	lsls	r2, r3, #6
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	041b      	lsls	r3, r3, #16
 800e2b6:	431a      	orrs	r2, r3
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	695b      	ldr	r3, [r3, #20]
 800e2bc:	061b      	lsls	r3, r3, #24
 800e2be:	4927      	ldr	r1, [pc, #156]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e2c0:	4313      	orrs	r3, r2
 800e2c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e2c6:	4b25      	ldr	r3, [pc, #148]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e2c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6a1b      	ldr	r3, [r3, #32]
 800e2d4:	3b01      	subs	r3, #1
 800e2d6:	021b      	lsls	r3, r3, #8
 800e2d8:	4920      	ldr	r1, [pc, #128]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d018      	beq.n	800e31e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e2f4:	d113      	bne.n	800e31e <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e2f6:	4b19      	ldr	r3, [pc, #100]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2fc:	0e1b      	lsrs	r3, r3, #24
 800e2fe:	f003 030f 	and.w	r3, r3, #15
 800e302:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	691b      	ldr	r3, [r3, #16]
 800e308:	019a      	lsls	r2, r3, #6
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	699b      	ldr	r3, [r3, #24]
 800e30e:	041b      	lsls	r3, r3, #16
 800e310:	431a      	orrs	r2, r3
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	061b      	lsls	r3, r3, #24
 800e316:	4911      	ldr	r1, [pc, #68]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e318:	4313      	orrs	r3, r2
 800e31a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e31e:	4b0f      	ldr	r3, [pc, #60]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	4a0e      	ldr	r2, [pc, #56]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e32a:	f7fd fb63 	bl	800b9f4 <HAL_GetTick>
 800e32e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e330:	e008      	b.n	800e344 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e332:	f7fd fb5f 	bl	800b9f4 <HAL_GetTick>
 800e336:	4602      	mov	r2, r0
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	1ad3      	subs	r3, r2, r3
 800e33c:	2b64      	cmp	r3, #100	; 0x64
 800e33e:	d901      	bls.n	800e344 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e340:	2303      	movs	r3, #3
 800e342:	e007      	b.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e344:	4b05      	ldr	r3, [pc, #20]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e34c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e350:	d1ef      	bne.n	800e332 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 800e352:	2300      	movs	r3, #0
}
 800e354:	4618      	mov	r0, r3
 800e356:	3720      	adds	r7, #32
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	40023800 	.word	0x40023800

0800e360 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d101      	bne.n	800e372 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800e36e:	2301      	movs	r3, #1
 800e370:	e01c      	b.n	800e3ac <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	795b      	ldrb	r3, [r3, #5]
 800e376:	b2db      	uxtb	r3, r3
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d105      	bne.n	800e388 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2200      	movs	r2, #0
 800e380:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f7fb fd64 	bl	8009e50 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2202      	movs	r2, #2
 800e38c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f042 0204 	orr.w	r2, r2, #4
 800e39c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2201      	movs	r2, #1
 800e3a2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800e3aa:	2300      	movs	r3, #0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3708      	adds	r7, #8
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d101      	bne.n	800e3c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	e084      	b.n	800e4d0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d106      	bne.n	800e3e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f7fb fd55 	bl	8009e90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2202      	movs	r2, #2
 800e3ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3fc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	68db      	ldr	r3, [r3, #12]
 800e402:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e406:	d902      	bls.n	800e40e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e408:	2300      	movs	r3, #0
 800e40a:	60fb      	str	r3, [r7, #12]
 800e40c:	e002      	b.n	800e414 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e40e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e412:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	68db      	ldr	r3, [r3, #12]
 800e418:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e41c:	d007      	beq.n	800e42e <HAL_SPI_Init+0x7a>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e426:	d002      	beq.n	800e42e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2200      	movs	r2, #0
 800e42c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e432:	2b00      	cmp	r3, #0
 800e434:	d10b      	bne.n	800e44e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	68db      	ldr	r3, [r3, #12]
 800e43a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e43e:	d903      	bls.n	800e448 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2202      	movs	r2, #2
 800e444:	631a      	str	r2, [r3, #48]	; 0x30
 800e446:	e002      	b.n	800e44e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2201      	movs	r2, #1
 800e44c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	685a      	ldr	r2, [r3, #4]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	689b      	ldr	r3, [r3, #8]
 800e456:	431a      	orrs	r2, r3
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	691b      	ldr	r3, [r3, #16]
 800e45c:	431a      	orrs	r2, r3
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	695b      	ldr	r3, [r3, #20]
 800e462:	431a      	orrs	r2, r3
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	699b      	ldr	r3, [r3, #24]
 800e468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e46c:	431a      	orrs	r2, r3
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	69db      	ldr	r3, [r3, #28]
 800e472:	431a      	orrs	r2, r3
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6a1b      	ldr	r3, [r3, #32]
 800e478:	ea42 0103 	orr.w	r1, r2, r3
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	430a      	orrs	r2, r1
 800e486:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	699b      	ldr	r3, [r3, #24]
 800e48c:	0c1b      	lsrs	r3, r3, #16
 800e48e:	f003 0204 	and.w	r2, r3, #4
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e496:	431a      	orrs	r2, r3
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e49c:	431a      	orrs	r2, r3
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	68db      	ldr	r3, [r3, #12]
 800e4a2:	ea42 0103 	orr.w	r1, r2, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	68fa      	ldr	r2, [r7, #12]
 800e4ac:	430a      	orrs	r2, r1
 800e4ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	69da      	ldr	r2, [r3, #28]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e4be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800e4ce:	2300      	movs	r3, #0
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3710      	adds	r7, #16
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b087      	sub	sp, #28
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	60b9      	str	r1, [r7, #8]
 800e4e2:	4613      	mov	r3, r2
 800e4e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d101      	bne.n	800e4f8 <HAL_SPI_Transmit_IT+0x20>
 800e4f4:	2302      	movs	r3, #2
 800e4f6:	e06a      	b.n	800e5ce <HAL_SPI_Transmit_IT+0xf6>
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d002      	beq.n	800e50c <HAL_SPI_Transmit_IT+0x34>
 800e506:	88fb      	ldrh	r3, [r7, #6]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d102      	bne.n	800e512 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800e50c:	2301      	movs	r3, #1
 800e50e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e510:	e058      	b.n	800e5c4 <HAL_SPI_Transmit_IT+0xec>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	d002      	beq.n	800e524 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800e51e:	2302      	movs	r3, #2
 800e520:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e522:	e04f      	b.n	800e5c4 <HAL_SPI_Transmit_IT+0xec>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	2203      	movs	r2, #3
 800e528:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	2200      	movs	r2, #0
 800e530:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	68ba      	ldr	r2, [r7, #8]
 800e536:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	88fa      	ldrh	r2, [r7, #6]
 800e53c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	88fa      	ldrh	r2, [r7, #6]
 800e542:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2200      	movs	r2, #0
 800e548:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	2200      	movs	r2, #0
 800e54e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2200      	movs	r2, #0
 800e556:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	2200      	movs	r2, #0
 800e55e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	68db      	ldr	r3, [r3, #12]
 800e564:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e568:	d903      	bls.n	800e572 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	4a1b      	ldr	r2, [pc, #108]	; (800e5dc <HAL_SPI_Transmit_IT+0x104>)
 800e56e:	651a      	str	r2, [r3, #80]	; 0x50
 800e570:	e002      	b.n	800e578 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	4a1a      	ldr	r2, [pc, #104]	; (800e5e0 <HAL_SPI_Transmit_IT+0x108>)
 800e576:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	689b      	ldr	r3, [r3, #8]
 800e57c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e580:	d107      	bne.n	800e592 <HAL_SPI_Transmit_IT+0xba>
  {
    SPI_1LINE_TX(hspi);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e590:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	685a      	ldr	r2, [r3, #4]
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800e5a0:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5ac:	2b40      	cmp	r3, #64	; 0x40
 800e5ae:	d008      	beq.n	800e5c2 <HAL_SPI_Transmit_IT+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e5be:	601a      	str	r2, [r3, #0]
 800e5c0:	e000      	b.n	800e5c4 <HAL_SPI_Transmit_IT+0xec>
  }

error :
 800e5c2:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e5cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	371c      	adds	r7, #28
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr
 800e5da:	bf00      	nop
 800e5dc:	0800f76f 	.word	0x0800f76f
 800e5e0:	0800f729 	.word	0x0800f729

0800e5e4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b086      	sub	sp, #24
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	4613      	mov	r3, r2
 800e5f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	689b      	ldr	r3, [r3, #8]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d110      	bne.n	800e620 <HAL_SPI_Receive_IT+0x3c>
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e606:	d10b      	bne.n	800e620 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2204      	movs	r2, #4
 800e60c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800e610:	88fb      	ldrh	r3, [r7, #6]
 800e612:	68ba      	ldr	r2, [r7, #8]
 800e614:	68b9      	ldr	r1, [r7, #8]
 800e616:	68f8      	ldr	r0, [r7, #12]
 800e618:	f000 f88c 	bl	800e734 <HAL_SPI_TransmitReceive_IT>
 800e61c:	4603      	mov	r3, r0
 800e61e:	e081      	b.n	800e724 <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e626:	2b01      	cmp	r3, #1
 800e628:	d101      	bne.n	800e62e <HAL_SPI_Receive_IT+0x4a>
 800e62a:	2302      	movs	r3, #2
 800e62c:	e07a      	b.n	800e724 <HAL_SPI_Receive_IT+0x140>
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2201      	movs	r2, #1
 800e632:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d002      	beq.n	800e648 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800e642:	2302      	movs	r3, #2
 800e644:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e646:	e068      	b.n	800e71a <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d002      	beq.n	800e654 <HAL_SPI_Receive_IT+0x70>
 800e64e:	88fb      	ldrh	r3, [r7, #6]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d102      	bne.n	800e65a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800e654:	2301      	movs	r3, #1
 800e656:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e658:	e05f      	b.n	800e71a <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2204      	movs	r2, #4
 800e65e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2200      	movs	r2, #0
 800e666:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	68ba      	ldr	r2, [r7, #8]
 800e66c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	88fa      	ldrh	r2, [r7, #6]
 800e672:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	88fa      	ldrh	r2, [r7, #6]
 800e67a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2200      	movs	r2, #0
 800e682:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2200      	movs	r2, #0
 800e688:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2200      	movs	r2, #0
 800e68e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	2200      	movs	r2, #0
 800e694:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e69e:	d90b      	bls.n	800e6b8 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	685a      	ldr	r2, [r3, #4]
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e6ae:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	4a1e      	ldr	r2, [pc, #120]	; (800e72c <HAL_SPI_Receive_IT+0x148>)
 800e6b4:	64da      	str	r2, [r3, #76]	; 0x4c
 800e6b6:	e00a      	b.n	800e6ce <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	685a      	ldr	r2, [r3, #4]
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e6c6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	4a19      	ldr	r2, [pc, #100]	; (800e730 <HAL_SPI_Receive_IT+0x14c>)
 800e6cc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	689b      	ldr	r3, [r3, #8]
 800e6d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6d6:	d107      	bne.n	800e6e8 <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	681a      	ldr	r2, [r3, #0]
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e6e6:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	685a      	ldr	r2, [r3, #4]
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800e6f6:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e702:	2b40      	cmp	r3, #64	; 0x40
 800e704:	d008      	beq.n	800e718 <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e714:	601a      	str	r2, [r3, #0]
 800e716:	e000      	b.n	800e71a <HAL_SPI_Receive_IT+0x136>
  }

error :
 800e718:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2200      	movs	r2, #0
 800e71e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e722:	7dfb      	ldrb	r3, [r7, #23]
}
 800e724:	4618      	mov	r0, r3
 800e726:	3718      	adds	r7, #24
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	0800f6dd 	.word	0x0800f6dd
 800e730:	0800f68d 	.word	0x0800f68d

0800e734 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800e734:	b480      	push	{r7}
 800e736:	b087      	sub	sp, #28
 800e738:	af00      	add	r7, sp, #0
 800e73a:	60f8      	str	r0, [r7, #12]
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	607a      	str	r2, [r7, #4]
 800e740:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e742:	2300      	movs	r3, #0
 800e744:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d101      	bne.n	800e754 <HAL_SPI_TransmitReceive_IT+0x20>
 800e750:	2302      	movs	r3, #2
 800e752:	e091      	b.n	800e878 <HAL_SPI_TransmitReceive_IT+0x144>
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2201      	movs	r2, #1
 800e758:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e762:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	685b      	ldr	r3, [r3, #4]
 800e768:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e76a:	7dbb      	ldrb	r3, [r7, #22]
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	d00d      	beq.n	800e78c <HAL_SPI_TransmitReceive_IT+0x58>
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e776:	d106      	bne.n	800e786 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	689b      	ldr	r3, [r3, #8]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d102      	bne.n	800e786 <HAL_SPI_TransmitReceive_IT+0x52>
 800e780:	7dbb      	ldrb	r3, [r7, #22]
 800e782:	2b04      	cmp	r3, #4
 800e784:	d002      	beq.n	800e78c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800e786:	2302      	movs	r3, #2
 800e788:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e78a:	e070      	b.n	800e86e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d005      	beq.n	800e79e <HAL_SPI_TransmitReceive_IT+0x6a>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d002      	beq.n	800e79e <HAL_SPI_TransmitReceive_IT+0x6a>
 800e798:	887b      	ldrh	r3, [r7, #2]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d102      	bne.n	800e7a4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e7a2:	e064      	b.n	800e86e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e7aa:	b2db      	uxtb	r3, r3
 800e7ac:	2b04      	cmp	r3, #4
 800e7ae:	d003      	beq.n	800e7b8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2205      	movs	r2, #5
 800e7b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	68ba      	ldr	r2, [r7, #8]
 800e7c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	887a      	ldrh	r2, [r7, #2]
 800e7c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	887a      	ldrh	r2, [r7, #2]
 800e7ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	687a      	ldr	r2, [r7, #4]
 800e7d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	887a      	ldrh	r2, [r7, #2]
 800e7da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	887a      	ldrh	r2, [r7, #2]
 800e7e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	68db      	ldr	r3, [r3, #12]
 800e7ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e7ee:	d906      	bls.n	800e7fe <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	4a24      	ldr	r2, [pc, #144]	; (800e884 <HAL_SPI_TransmitReceive_IT+0x150>)
 800e7f4:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	4a23      	ldr	r2, [pc, #140]	; (800e888 <HAL_SPI_TransmitReceive_IT+0x154>)
 800e7fa:	651a      	str	r2, [r3, #80]	; 0x50
 800e7fc:	e005      	b.n	800e80a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	4a22      	ldr	r2, [pc, #136]	; (800e88c <HAL_SPI_TransmitReceive_IT+0x158>)
 800e802:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	4a22      	ldr	r2, [pc, #136]	; (800e890 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800e808:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	68db      	ldr	r3, [r3, #12]
 800e80e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e812:	d802      	bhi.n	800e81a <HAL_SPI_TransmitReceive_IT+0xe6>
 800e814:	887b      	ldrh	r3, [r7, #2]
 800e816:	2b01      	cmp	r3, #1
 800e818:	d908      	bls.n	800e82c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	685a      	ldr	r2, [r3, #4]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e828:	605a      	str	r2, [r3, #4]
 800e82a:	e007      	b.n	800e83c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	685a      	ldr	r2, [r3, #4]
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e83a:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	685a      	ldr	r2, [r3, #4]
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800e84a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e856:	2b40      	cmp	r3, #64	; 0x40
 800e858:	d008      	beq.n	800e86c <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	681a      	ldr	r2, [r3, #0]
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e868:	601a      	str	r2, [r3, #0]
 800e86a:	e000      	b.n	800e86e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800e86c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2200      	movs	r2, #0
 800e872:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e876:	7dfb      	ldrb	r3, [r7, #23]
}
 800e878:	4618      	mov	r0, r3
 800e87a:	371c      	adds	r7, #28
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr
 800e884:	0800f5c7 	.word	0x0800f5c7
 800e888:	0800f62d 	.word	0x0800f62d
 800e88c:	0800f477 	.word	0x0800f477
 800e890:	0800f535 	.word	0x0800f535

0800e894 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	4613      	mov	r3, r2
 800e8a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	d101      	bne.n	800e8b4 <HAL_SPI_Transmit_DMA+0x20>
 800e8b0:	2302      	movs	r3, #2
 800e8b2:	e0d0      	b.n	800ea56 <HAL_SPI_Transmit_DMA+0x1c2>
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	d002      	beq.n	800e8ce <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800e8c8:	2302      	movs	r3, #2
 800e8ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e8cc:	e0be      	b.n	800ea4c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d002      	beq.n	800e8da <HAL_SPI_Transmit_DMA+0x46>
 800e8d4:	88fb      	ldrh	r3, [r7, #6]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d102      	bne.n	800e8e0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e8de:	e0b5      	b.n	800ea4c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2203      	movs	r2, #3
 800e8e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	68ba      	ldr	r2, [r7, #8]
 800e8f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	88fa      	ldrh	r2, [r7, #6]
 800e8f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	88fa      	ldrh	r2, [r7, #6]
 800e8fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2200      	movs	r2, #0
 800e904:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	2200      	movs	r2, #0
 800e90a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2200      	movs	r2, #0
 800e910:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2200      	movs	r2, #0
 800e916:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2200      	movs	r2, #0
 800e91e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	689b      	ldr	r3, [r3, #8]
 800e926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e92a:	d107      	bne.n	800e93c <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	681a      	ldr	r2, [r3, #0]
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e93a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e940:	4a47      	ldr	r2, [pc, #284]	; (800ea60 <HAL_SPI_Transmit_DMA+0x1cc>)
 800e942:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e948:	4a46      	ldr	r2, [pc, #280]	; (800ea64 <HAL_SPI_Transmit_DMA+0x1d0>)
 800e94a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e950:	4a45      	ldr	r2, [pc, #276]	; (800ea68 <HAL_SPI_Transmit_DMA+0x1d4>)
 800e952:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e958:	2200      	movs	r2, #0
 800e95a:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	685a      	ldr	r2, [r3, #4]
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e96a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	68db      	ldr	r3, [r3, #12]
 800e970:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e974:	d82d      	bhi.n	800e9d2 <HAL_SPI_Transmit_DMA+0x13e>
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e97a:	699b      	ldr	r3, [r3, #24]
 800e97c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e980:	d127      	bne.n	800e9d2 <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e986:	b29b      	uxth	r3, r3
 800e988:	f003 0301 	and.w	r3, r3, #1
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d10f      	bne.n	800e9b0 <HAL_SPI_Transmit_DMA+0x11c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	685a      	ldr	r2, [r3, #4]
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e99e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9a4:	b29b      	uxth	r3, r3
 800e9a6:	085b      	lsrs	r3, r3, #1
 800e9a8:	b29a      	uxth	r2, r3
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e9ae:	e010      	b.n	800e9d2 <HAL_SPI_Transmit_DMA+0x13e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	685a      	ldr	r2, [r3, #4]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e9be:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	085b      	lsrs	r3, r3, #1
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	b29a      	uxth	r2, r3
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9da:	4619      	mov	r1, r3
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	330c      	adds	r3, #12
 800e9e2:	461a      	mov	r2, r3
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	f7fd ffcd 	bl	800c988 <HAL_DMA_Start_IT>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d00c      	beq.n	800ea0e <HAL_SPI_Transmit_DMA+0x17a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9f8:	f043 0210 	orr.w	r2, r3, #16
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800ea00:	2301      	movs	r3, #1
 800ea02:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2201      	movs	r2, #1
 800ea08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800ea0c:	e01e      	b.n	800ea4c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea18:	2b40      	cmp	r3, #64	; 0x40
 800ea1a:	d007      	beq.n	800ea2c <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	681a      	ldr	r2, [r3, #0]
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea2a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	685a      	ldr	r2, [r3, #4]
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	f042 0220 	orr.w	r2, r2, #32
 800ea3a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	685a      	ldr	r2, [r3, #4]
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	f042 0202 	orr.w	r2, r2, #2
 800ea4a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ea54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3718      	adds	r7, #24
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	0800f3b9 	.word	0x0800f3b9
 800ea64:	0800f1f9 	.word	0x0800f1f9
 800ea68:	0800f40d 	.word	0x0800f40d

0800ea6c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b086      	sub	sp, #24
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	60f8      	str	r0, [r7, #12]
 800ea74:	60b9      	str	r1, [r7, #8]
 800ea76:	4613      	mov	r3, r2
 800ea78:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	689b      	ldr	r3, [r3, #8]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d110      	bne.n	800eaa8 <HAL_SPI_Receive_DMA+0x3c>
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea8e:	d10b      	bne.n	800eaa8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2204      	movs	r2, #4
 800ea94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800ea98:	88fb      	ldrh	r3, [r7, #6]
 800ea9a:	68ba      	ldr	r2, [r7, #8]
 800ea9c:	68b9      	ldr	r1, [r7, #8]
 800ea9e:	68f8      	ldr	r0, [r7, #12]
 800eaa0:	f000 f900 	bl	800eca4 <HAL_SPI_TransmitReceive_DMA>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	e0f3      	b.n	800ec90 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800eaae:	2b01      	cmp	r3, #1
 800eab0:	d101      	bne.n	800eab6 <HAL_SPI_Receive_DMA+0x4a>
 800eab2:	2302      	movs	r3, #2
 800eab4:	e0ec      	b.n	800ec90 <HAL_SPI_Receive_DMA+0x224>
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2201      	movs	r2, #1
 800eaba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800eac4:	b2db      	uxtb	r3, r3
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d002      	beq.n	800ead0 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800eaca:	2302      	movs	r3, #2
 800eacc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eace:	e0da      	b.n	800ec86 <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d002      	beq.n	800eadc <HAL_SPI_Receive_DMA+0x70>
 800ead6:	88fb      	ldrh	r3, [r7, #6]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d102      	bne.n	800eae2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800eadc:	2301      	movs	r3, #1
 800eade:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eae0:	e0d1      	b.n	800ec86 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2204      	movs	r2, #4
 800eae6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2200      	movs	r2, #0
 800eaee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	68ba      	ldr	r2, [r7, #8]
 800eaf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	88fa      	ldrh	r2, [r7, #6]
 800eafa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	88fa      	ldrh	r2, [r7, #6]
 800eb02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2200      	movs	r2, #0
 800eb16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	689b      	ldr	r3, [r3, #8]
 800eb22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb26:	d107      	bne.n	800eb38 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800eb36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	685a      	ldr	r2, [r3, #4]
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eb46:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800eb50:	d908      	bls.n	800eb64 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	685a      	ldr	r2, [r3, #4]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800eb60:	605a      	str	r2, [r3, #4]
 800eb62:	e042      	b.n	800ebea <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	685a      	ldr	r2, [r3, #4]
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800eb72:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb78:	699b      	ldr	r3, [r3, #24]
 800eb7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb7e:	d134      	bne.n	800ebea <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	685a      	ldr	r2, [r3, #4]
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800eb8e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	f003 0301 	and.w	r3, r3, #1
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d111      	bne.n	800ebc4 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	685a      	ldr	r2, [r3, #4]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ebae:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	085b      	lsrs	r3, r3, #1
 800ebba:	b29a      	uxth	r2, r3
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ebc2:	e012      	b.n	800ebea <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	685a      	ldr	r2, [r3, #4]
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ebd2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	085b      	lsrs	r3, r3, #1
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	b29a      	uxth	r2, r3
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebee:	4a2a      	ldr	r2, [pc, #168]	; (800ec98 <HAL_SPI_Receive_DMA+0x22c>)
 800ebf0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebf6:	4a29      	ldr	r2, [pc, #164]	; (800ec9c <HAL_SPI_Receive_DMA+0x230>)
 800ebf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebfe:	4a28      	ldr	r2, [pc, #160]	; (800eca0 <HAL_SPI_Receive_DMA+0x234>)
 800ec00:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec06:	2200      	movs	r2, #0
 800ec08:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	330c      	adds	r3, #12
 800ec14:	4619      	mov	r1, r3
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ec22:	b29b      	uxth	r3, r3
 800ec24:	f7fd feb0 	bl	800c988 <HAL_DMA_Start_IT>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d00c      	beq.n	800ec48 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec32:	f043 0210 	orr.w	r2, r3, #16
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2201      	movs	r2, #1
 800ec42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800ec46:	e01e      	b.n	800ec86 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec52:	2b40      	cmp	r3, #64	; 0x40
 800ec54:	d007      	beq.n	800ec66 <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	681a      	ldr	r2, [r3, #0]
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec64:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	685a      	ldr	r2, [r3, #4]
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	f042 0220 	orr.w	r2, r2, #32
 800ec74:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	685a      	ldr	r2, [r3, #4]
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f042 0201 	orr.w	r2, r2, #1
 800ec84:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ec8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3718      	adds	r7, #24
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	0800f3d5 	.word	0x0800f3d5
 800ec9c:	0800f2a1 	.word	0x0800f2a1
 800eca0:	0800f40d 	.word	0x0800f40d

0800eca4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b086      	sub	sp, #24
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	607a      	str	r2, [r7, #4]
 800ecb0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d101      	bne.n	800ecc4 <HAL_SPI_TransmitReceive_DMA+0x20>
 800ecc0:	2302      	movs	r3, #2
 800ecc2:	e16c      	b.n	800ef9e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ecd2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800ecda:	7dbb      	ldrb	r3, [r7, #22]
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d00d      	beq.n	800ecfc <HAL_SPI_TransmitReceive_DMA+0x58>
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ece6:	d106      	bne.n	800ecf6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	689b      	ldr	r3, [r3, #8]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d102      	bne.n	800ecf6 <HAL_SPI_TransmitReceive_DMA+0x52>
 800ecf0:	7dbb      	ldrb	r3, [r7, #22]
 800ecf2:	2b04      	cmp	r3, #4
 800ecf4:	d002      	beq.n	800ecfc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800ecf6:	2302      	movs	r3, #2
 800ecf8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ecfa:	e14b      	b.n	800ef94 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d005      	beq.n	800ed0e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d002      	beq.n	800ed0e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ed08:	887b      	ldrh	r3, [r7, #2]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d102      	bne.n	800ed14 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800ed0e:	2301      	movs	r3, #1
 800ed10:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ed12:	e13f      	b.n	800ef94 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	2b04      	cmp	r3, #4
 800ed1e:	d003      	beq.n	800ed28 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2205      	movs	r2, #5
 800ed24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	68ba      	ldr	r2, [r7, #8]
 800ed32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	887a      	ldrh	r2, [r7, #2]
 800ed38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	887a      	ldrh	r2, [r7, #2]
 800ed3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	887a      	ldrh	r2, [r7, #2]
 800ed4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	887a      	ldrh	r2, [r7, #2]
 800ed52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	685a      	ldr	r2, [r3, #4]
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800ed70:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ed7a:	d908      	bls.n	800ed8e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	685a      	ldr	r2, [r3, #4]
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ed8a:	605a      	str	r2, [r3, #4]
 800ed8c:	e06f      	b.n	800ee6e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	685a      	ldr	r2, [r3, #4]
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ed9c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eda2:	699b      	ldr	r3, [r3, #24]
 800eda4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eda8:	d126      	bne.n	800edf8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800edae:	f003 0301 	and.w	r3, r3, #1
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d10f      	bne.n	800edd6 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	685a      	ldr	r2, [r3, #4]
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800edc4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edca:	b29b      	uxth	r3, r3
 800edcc:	085b      	lsrs	r3, r3, #1
 800edce:	b29a      	uxth	r2, r3
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800edd4:	e010      	b.n	800edf8 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	685a      	ldr	r2, [r3, #4]
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ede4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edea:	b29b      	uxth	r3, r3
 800edec:	085b      	lsrs	r3, r3, #1
 800edee:	b29b      	uxth	r3, r3
 800edf0:	3301      	adds	r3, #1
 800edf2:	b29a      	uxth	r2, r3
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edfc:	699b      	ldr	r3, [r3, #24]
 800edfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee02:	d134      	bne.n	800ee6e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	685a      	ldr	r2, [r3, #4]
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ee12:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	f003 0301 	and.w	r3, r3, #1
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d111      	bne.n	800ee48 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	685a      	ldr	r2, [r3, #4]
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ee32:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	085b      	lsrs	r3, r3, #1
 800ee3e:	b29a      	uxth	r2, r3
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ee46:	e012      	b.n	800ee6e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	685a      	ldr	r2, [r3, #4]
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ee56:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	085b      	lsrs	r3, r3, #1
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	3301      	adds	r3, #1
 800ee66:	b29a      	uxth	r2, r3
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	2b04      	cmp	r3, #4
 800ee78:	d108      	bne.n	800ee8c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee7e:	4a4a      	ldr	r2, [pc, #296]	; (800efa8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800ee80:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee86:	4a49      	ldr	r2, [pc, #292]	; (800efac <HAL_SPI_TransmitReceive_DMA+0x308>)
 800ee88:	63da      	str	r2, [r3, #60]	; 0x3c
 800ee8a:	e007      	b.n	800ee9c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee90:	4a47      	ldr	r2, [pc, #284]	; (800efb0 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800ee92:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee98:	4a46      	ldr	r2, [pc, #280]	; (800efb4 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800ee9a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eea0:	4a45      	ldr	r2, [pc, #276]	; (800efb8 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800eea2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eea8:	2200      	movs	r2, #0
 800eeaa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	330c      	adds	r3, #12
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eebc:	461a      	mov	r2, r3
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	f7fd fd5f 	bl	800c988 <HAL_DMA_Start_IT>
 800eeca:	4603      	mov	r3, r0
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d00c      	beq.n	800eeea <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eed4:	f043 0210 	orr.w	r2, r3, #16
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800eedc:	2301      	movs	r3, #1
 800eede:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2201      	movs	r2, #1
 800eee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800eee8:	e054      	b.n	800ef94 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	685a      	ldr	r2, [r3, #4]
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f042 0201 	orr.w	r2, r2, #1
 800eef8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eefe:	2200      	movs	r2, #0
 800ef00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef06:	2200      	movs	r2, #0
 800ef08:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef0e:	2200      	movs	r2, #0
 800ef10:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef16:	2200      	movs	r2, #0
 800ef18:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef22:	4619      	mov	r1, r3
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	330c      	adds	r3, #12
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef30:	b29b      	uxth	r3, r3
 800ef32:	f7fd fd29 	bl	800c988 <HAL_DMA_Start_IT>
 800ef36:	4603      	mov	r3, r0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d00c      	beq.n	800ef56 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef40:	f043 0210 	orr.w	r2, r3, #16
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800ef48:	2301      	movs	r3, #1
 800ef4a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2201      	movs	r2, #1
 800ef50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800ef54:	e01e      	b.n	800ef94 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef60:	2b40      	cmp	r3, #64	; 0x40
 800ef62:	d007      	beq.n	800ef74 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	681a      	ldr	r2, [r3, #0]
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ef72:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	685a      	ldr	r2, [r3, #4]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f042 0220 	orr.w	r2, r2, #32
 800ef82:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	685a      	ldr	r2, [r3, #4]
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	f042 0202 	orr.w	r2, r2, #2
 800ef92:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2200      	movs	r2, #0
 800ef98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ef9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3718      	adds	r7, #24
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	0800f3d5 	.word	0x0800f3d5
 800efac:	0800f2a1 	.word	0x0800f2a1
 800efb0:	0800f3f1 	.word	0x0800f3f1
 800efb4:	0800f327 	.word	0x0800f327
 800efb8:	0800f40d 	.word	0x0800f40d

0800efbc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
inline void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b088      	sub	sp, #32
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	689b      	ldr	r3, [r3, #8]
 800efd2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800efd4:	69bb      	ldr	r3, [r7, #24]
 800efd6:	099b      	lsrs	r3, r3, #6
 800efd8:	f003 0301 	and.w	r3, r3, #1
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d10f      	bne.n	800f000 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800efe0:	69bb      	ldr	r3, [r7, #24]
 800efe2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d00a      	beq.n	800f000 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	099b      	lsrs	r3, r3, #6
 800efee:	f003 0301 	and.w	r3, r3, #1
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d004      	beq.n	800f000 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	4798      	blx	r3
    return;
 800effe:	e0d8      	b.n	800f1b2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	085b      	lsrs	r3, r3, #1
 800f004:	f003 0301 	and.w	r3, r3, #1
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d00a      	beq.n	800f022 <HAL_SPI_IRQHandler+0x66>
 800f00c:	69fb      	ldr	r3, [r7, #28]
 800f00e:	09db      	lsrs	r3, r3, #7
 800f010:	f003 0301 	and.w	r3, r3, #1
 800f014:	2b00      	cmp	r3, #0
 800f016:	d004      	beq.n	800f022 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	4798      	blx	r3
    return;
 800f020:	e0c7      	b.n	800f1b2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f022:	69bb      	ldr	r3, [r7, #24]
 800f024:	095b      	lsrs	r3, r3, #5
 800f026:	f003 0301 	and.w	r3, r3, #1
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d10c      	bne.n	800f048 <HAL_SPI_IRQHandler+0x8c>
 800f02e:	69bb      	ldr	r3, [r7, #24]
 800f030:	099b      	lsrs	r3, r3, #6
 800f032:	f003 0301 	and.w	r3, r3, #1
 800f036:	2b00      	cmp	r3, #0
 800f038:	d106      	bne.n	800f048 <HAL_SPI_IRQHandler+0x8c>
 800f03a:	69bb      	ldr	r3, [r7, #24]
 800f03c:	0a1b      	lsrs	r3, r3, #8
 800f03e:	f003 0301 	and.w	r3, r3, #1
 800f042:	2b00      	cmp	r3, #0
 800f044:	f000 80b5 	beq.w	800f1b2 <HAL_SPI_IRQHandler+0x1f6>
 800f048:	69fb      	ldr	r3, [r7, #28]
 800f04a:	095b      	lsrs	r3, r3, #5
 800f04c:	f003 0301 	and.w	r3, r3, #1
 800f050:	2b00      	cmp	r3, #0
 800f052:	f000 80ae 	beq.w	800f1b2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f056:	69bb      	ldr	r3, [r7, #24]
 800f058:	099b      	lsrs	r3, r3, #6
 800f05a:	f003 0301 	and.w	r3, r3, #1
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d023      	beq.n	800f0aa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	2b03      	cmp	r3, #3
 800f06c:	d011      	beq.n	800f092 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f072:	f043 0204 	orr.w	r2, r3, #4
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f07a:	2300      	movs	r3, #0
 800f07c:	617b      	str	r3, [r7, #20]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	617b      	str	r3, [r7, #20]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	689b      	ldr	r3, [r3, #8]
 800f08c:	617b      	str	r3, [r7, #20]
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	e00b      	b.n	800f0aa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f092:	2300      	movs	r3, #0
 800f094:	613b      	str	r3, [r7, #16]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	613b      	str	r3, [r7, #16]
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	689b      	ldr	r3, [r3, #8]
 800f0a4:	613b      	str	r3, [r7, #16]
 800f0a6:	693b      	ldr	r3, [r7, #16]
        return;
 800f0a8:	e083      	b.n	800f1b2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f0aa:	69bb      	ldr	r3, [r7, #24]
 800f0ac:	095b      	lsrs	r3, r3, #5
 800f0ae:	f003 0301 	and.w	r3, r3, #1
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d014      	beq.n	800f0e0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f0ba:	f043 0201 	orr.w	r2, r3, #1
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	60fb      	str	r3, [r7, #12]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	689b      	ldr	r3, [r3, #8]
 800f0cc:	60fb      	str	r3, [r7, #12]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f0dc:	601a      	str	r2, [r3, #0]
 800f0de:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f0e0:	69bb      	ldr	r3, [r7, #24]
 800f0e2:	0a1b      	lsrs	r3, r3, #8
 800f0e4:	f003 0301 	and.w	r3, r3, #1
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d00c      	beq.n	800f106 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f0f0:	f043 0208 	orr.w	r2, r3, #8
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	60bb      	str	r3, [r7, #8]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	689b      	ldr	r3, [r3, #8]
 800f102:	60bb      	str	r3, [r7, #8]
 800f104:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d050      	beq.n	800f1b0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	685a      	ldr	r2, [r3, #4]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f11c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2201      	movs	r2, #1
 800f122:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f126:	69fb      	ldr	r3, [r7, #28]
 800f128:	f003 0302 	and.w	r3, r3, #2
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d104      	bne.n	800f13a <HAL_SPI_IRQHandler+0x17e>
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	f003 0301 	and.w	r3, r3, #1
 800f136:	2b00      	cmp	r3, #0
 800f138:	d034      	beq.n	800f1a4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	685a      	ldr	r2, [r3, #4]
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f022 0203 	bic.w	r2, r2, #3
 800f148:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d011      	beq.n	800f176 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f156:	4a18      	ldr	r2, [pc, #96]	; (800f1b8 <HAL_SPI_IRQHandler+0x1fc>)
 800f158:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fd fc72 	bl	800ca48 <HAL_DMA_Abort_IT>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d005      	beq.n	800f176 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f16e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d016      	beq.n	800f1ac <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f182:	4a0d      	ldr	r2, [pc, #52]	; (800f1b8 <HAL_SPI_IRQHandler+0x1fc>)
 800f184:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fd fc5c 	bl	800ca48 <HAL_DMA_Abort_IT>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d00a      	beq.n	800f1ac <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f19a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800f1a2:	e003      	b.n	800f1ac <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f7f9 f9ed 	bl	8008584 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f1aa:	e000      	b.n	800f1ae <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800f1ac:	bf00      	nop
    return;
 800f1ae:	bf00      	nop
 800f1b0:	bf00      	nop
  }
}
 800f1b2:	3720      	adds	r7, #32
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}
 800f1b8:	0800f44d 	.word	0x0800f44d

0800f1bc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b083      	sub	sp, #12
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800f1c4:	bf00      	nop
 800f1c6:	370c      	adds	r7, #12
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr

0800f1d0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b083      	sub	sp, #12
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800f1d8:	bf00      	nop
 800f1da:	370c      	adds	r7, #12
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr

0800f1e4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b083      	sub	sp, #12
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800f1ec:	bf00      	nop
 800f1ee:	370c      	adds	r7, #12
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f6:	4770      	bx	lr

0800f1f8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b086      	sub	sp, #24
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f204:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f206:	f7fc fbf5 	bl	800b9f4 <HAL_GetTick>
 800f20a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f21a:	d03b      	beq.n	800f294 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	685a      	ldr	r2, [r3, #4]
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f022 0220 	bic.w	r2, r2, #32
 800f22a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	685a      	ldr	r2, [r3, #4]
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f022 0202 	bic.w	r2, r2, #2
 800f23a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f23c:	693a      	ldr	r2, [r7, #16]
 800f23e:	2164      	movs	r1, #100	; 0x64
 800f240:	6978      	ldr	r0, [r7, #20]
 800f242:	f000 fbe5 	bl	800fa10 <SPI_EndRxTxTransaction>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d005      	beq.n	800f258 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f250:	f043 0220 	orr.w	r2, r3, #32
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	689b      	ldr	r3, [r3, #8]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d10a      	bne.n	800f276 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f260:	2300      	movs	r3, #0
 800f262:	60fb      	str	r3, [r7, #12]
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	68db      	ldr	r3, [r3, #12]
 800f26a:	60fb      	str	r3, [r7, #12]
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	689b      	ldr	r3, [r3, #8]
 800f272:	60fb      	str	r3, [r7, #12]
 800f274:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	2200      	movs	r2, #0
 800f27a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	2201      	movs	r2, #1
 800f280:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d003      	beq.n	800f294 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f28c:	6978      	ldr	r0, [r7, #20]
 800f28e:	f7f9 f979 	bl	8008584 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f292:	e002      	b.n	800f29a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800f294:	6978      	ldr	r0, [r7, #20]
 800f296:	f7f9 f987 	bl	80085a8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f29a:	3718      	adds	r7, #24
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ac:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f2ae:	f7fc fba1 	bl	800b9f4 <HAL_GetTick>
 800f2b2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f2c2:	d02a      	beq.n	800f31a <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	685a      	ldr	r2, [r3, #4]
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f022 0220 	bic.w	r2, r2, #32
 800f2d2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	685a      	ldr	r2, [r3, #4]
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	f022 0203 	bic.w	r2, r2, #3
 800f2e2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f2e4:	68ba      	ldr	r2, [r7, #8]
 800f2e6:	2164      	movs	r1, #100	; 0x64
 800f2e8:	68f8      	ldr	r0, [r7, #12]
 800f2ea:	f000 fb39 	bl	800f960 <SPI_EndRxTransaction>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d002      	beq.n	800f2fa <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	2220      	movs	r2, #32
 800f2f8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2201      	movs	r2, #1
 800f306:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d003      	beq.n	800f31a <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f312:	68f8      	ldr	r0, [r7, #12]
 800f314:	f7f9 f936 	bl	8008584 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f318:	e002      	b.n	800f320 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800f31a:	68f8      	ldr	r0, [r7, #12]
 800f31c:	f7f9 f956 	bl	80085cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f320:	3710      	adds	r7, #16
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}

0800f326 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f326:	b580      	push	{r7, lr}
 800f328:	b084      	sub	sp, #16
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f332:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f334:	f7fc fb5e 	bl	800b9f4 <HAL_GetTick>
 800f338:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f348:	d030      	beq.n	800f3ac <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	685a      	ldr	r2, [r3, #4]
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	f022 0220 	bic.w	r2, r2, #32
 800f358:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f35a:	68ba      	ldr	r2, [r7, #8]
 800f35c:	2164      	movs	r1, #100	; 0x64
 800f35e:	68f8      	ldr	r0, [r7, #12]
 800f360:	f000 fb56 	bl	800fa10 <SPI_EndRxTxTransaction>
 800f364:	4603      	mov	r3, r0
 800f366:	2b00      	cmp	r3, #0
 800f368:	d005      	beq.n	800f376 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f36e:	f043 0220 	orr.w	r2, r3, #32
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	685a      	ldr	r2, [r3, #4]
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f022 0203 	bic.w	r2, r2, #3
 800f384:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2200      	movs	r2, #0
 800f38a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2200      	movs	r2, #0
 800f390:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2201      	movs	r2, #1
 800f398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d003      	beq.n	800f3ac <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f3a4:	68f8      	ldr	r0, [r7, #12]
 800f3a6:	f7f9 f8ed 	bl	8008584 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f3aa:	e002      	b.n	800f3b2 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800f3ac:	68f8      	ldr	r0, [r7, #12]
 800f3ae:	f7f9 f91f 	bl	80085f0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f3b2:	3710      	adds	r7, #16
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b084      	sub	sp, #16
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3c4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800f3c6:	68f8      	ldr	r0, [r7, #12]
 800f3c8:	f7ff fef8 	bl	800f1bc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f3cc:	bf00      	nop
 800f3ce:	3710      	adds	r7, #16
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3e0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800f3e2:	68f8      	ldr	r0, [r7, #12]
 800f3e4:	f7ff fef4 	bl	800f1d0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f3e8:	bf00      	nop
 800f3ea:	3710      	adds	r7, #16
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b084      	sub	sp, #16
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3fc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800f3fe:	68f8      	ldr	r0, [r7, #12]
 800f400:	f7ff fef0 	bl	800f1e4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f404:	bf00      	nop
 800f406:	3710      	adds	r7, #16
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f418:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	685a      	ldr	r2, [r3, #4]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	f022 0203 	bic.w	r2, r2, #3
 800f428:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f42e:	f043 0210 	orr.w	r2, r3, #16
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2201      	movs	r2, #1
 800f43a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f43e:	68f8      	ldr	r0, [r7, #12]
 800f440:	f7f9 f8a0 	bl	8008584 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f444:	bf00      	nop
 800f446:	3710      	adds	r7, #16
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b084      	sub	sp, #16
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f458:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	2200      	movs	r2, #0
 800f45e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2200      	movs	r2, #0
 800f466:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	f7f9 f88b 	bl	8008584 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f46e:	bf00      	nop
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}

0800f476 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f476:	b580      	push	{r7, lr}
 800f478:	b082      	sub	sp, #8
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f484:	b29b      	uxth	r3, r3
 800f486:	2b01      	cmp	r3, #1
 800f488:	d923      	bls.n	800f4d2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	68da      	ldr	r2, [r3, #12]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f494:	b292      	uxth	r2, r2
 800f496:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f49c:	1c9a      	adds	r2, r3, #2
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	3b02      	subs	r3, #2
 800f4ac:	b29a      	uxth	r2, r3
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d11f      	bne.n	800f500 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	685a      	ldr	r2, [r3, #4]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f4ce:	605a      	str	r2, [r3, #4]
 800f4d0:	e016      	b.n	800f500 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f103 020c 	add.w	r2, r3, #12
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4de:	7812      	ldrb	r2, [r2, #0]
 800f4e0:	b2d2      	uxtb	r2, r2
 800f4e2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4e8:	1c5a      	adds	r2, r3, #1
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	3b01      	subs	r3, #1
 800f4f8:	b29a      	uxth	r2, r3
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f506:	b29b      	uxth	r3, r3
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d10f      	bne.n	800f52c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	685a      	ldr	r2, [r3, #4]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800f51a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f520:	b29b      	uxth	r3, r3
 800f522:	2b00      	cmp	r3, #0
 800f524:	d102      	bne.n	800f52c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 fab8 	bl	800fa9c <SPI_CloseRxTx_ISR>
    }
  }
}
 800f52c:	bf00      	nop
 800f52e:	3708      	adds	r7, #8
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f540:	b29b      	uxth	r3, r3
 800f542:	2b01      	cmp	r3, #1
 800f544:	d912      	bls.n	800f56c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f54a:	881a      	ldrh	r2, [r3, #0]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f556:	1c9a      	adds	r2, r3, #2
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f560:	b29b      	uxth	r3, r3
 800f562:	3b02      	subs	r3, #2
 800f564:	b29a      	uxth	r2, r3
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f56a:	e012      	b.n	800f592 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	330c      	adds	r3, #12
 800f576:	7812      	ldrb	r2, [r2, #0]
 800f578:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f57e:	1c5a      	adds	r2, r3, #1
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f588:	b29b      	uxth	r3, r3
 800f58a:	3b01      	subs	r3, #1
 800f58c:	b29a      	uxth	r2, r3
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f596:	b29b      	uxth	r3, r3
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d110      	bne.n	800f5be <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	685a      	ldr	r2, [r3, #4]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f5aa:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f5b2:	b29b      	uxth	r3, r3
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d102      	bne.n	800f5be <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f000 fa6f 	bl	800fa9c <SPI_CloseRxTx_ISR>
    }
  }
}
 800f5be:	bf00      	nop
 800f5c0:	3708      	adds	r7, #8
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}

0800f5c6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f5c6:	b580      	push	{r7, lr}
 800f5c8:	b082      	sub	sp, #8
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	68da      	ldr	r2, [r3, #12]
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5d8:	b292      	uxth	r2, r2
 800f5da:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5e0:	1c9a      	adds	r2, r3, #2
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	3b01      	subs	r3, #1
 800f5f0:	b29a      	uxth	r2, r3
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	2b00      	cmp	r3, #0
 800f602:	d10f      	bne.n	800f624 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	685a      	ldr	r2, [r3, #4]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f612:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f618:	b29b      	uxth	r3, r3
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d102      	bne.n	800f624 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 fa3c 	bl	800fa9c <SPI_CloseRxTx_ISR>
    }
  }
}
 800f624:	bf00      	nop
 800f626:	3708      	adds	r7, #8
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f638:	881a      	ldrh	r2, [r3, #0]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f644:	1c9a      	adds	r2, r3, #2
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f64e:	b29b      	uxth	r3, r3
 800f650:	3b01      	subs	r3, #1
 800f652:	b29a      	uxth	r2, r3
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f65c:	b29b      	uxth	r3, r3
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d110      	bne.n	800f684 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	685a      	ldr	r2, [r3, #4]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f670:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f678:	b29b      	uxth	r3, r3
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d102      	bne.n	800f684 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f000 fa0c 	bl	800fa9c <SPI_CloseRxTx_ISR>
    }
  }
}
 800f684:	bf00      	nop
 800f686:	3708      	adds	r7, #8
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}

0800f68c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b082      	sub	sp, #8
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f103 020c 	add.w	r2, r3, #12
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6a0:	7812      	ldrb	r2, [r2, #0]
 800f6a2:	b2d2      	uxtb	r2, r2
 800f6a4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6aa:	1c5a      	adds	r2, r3, #1
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	3b01      	subs	r3, #1
 800f6ba:	b29a      	uxth	r2, r3
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d102      	bne.n	800f6d4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f000 fa26 	bl	800fb20 <SPI_CloseRx_ISR>
  }
}
 800f6d4:	bf00      	nop
 800f6d6:	3708      	adds	r7, #8
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	68da      	ldr	r2, [r3, #12]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6ee:	b292      	uxth	r2, r2
 800f6f0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6f6:	1c9a      	adds	r2, r3, #2
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f702:	b29b      	uxth	r3, r3
 800f704:	3b01      	subs	r3, #1
 800f706:	b29a      	uxth	r2, r3
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f714:	b29b      	uxth	r3, r3
 800f716:	2b00      	cmp	r3, #0
 800f718:	d102      	bne.n	800f720 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f000 fa00 	bl	800fb20 <SPI_CloseRx_ISR>
  }
}
 800f720:	bf00      	nop
 800f722:	3708      	adds	r7, #8
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}

0800f728 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	330c      	adds	r3, #12
 800f73a:	7812      	ldrb	r2, [r2, #0]
 800f73c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f742:	1c5a      	adds	r2, r3, #1
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f74c:	b29b      	uxth	r3, r3
 800f74e:	3b01      	subs	r3, #1
 800f750:	b29a      	uxth	r2, r3
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d102      	bne.n	800f766 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f000 fa0d 	bl	800fb80 <SPI_CloseTx_ISR>
  }
}
 800f766:	bf00      	nop
 800f768:	3708      	adds	r7, #8
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}

0800f76e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f76e:	b580      	push	{r7, lr}
 800f770:	b082      	sub	sp, #8
 800f772:	af00      	add	r7, sp, #0
 800f774:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f77a:	881a      	ldrh	r2, [r3, #0]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f786:	1c9a      	adds	r2, r3, #2
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f790:	b29b      	uxth	r3, r3
 800f792:	3b01      	subs	r3, #1
 800f794:	b29a      	uxth	r2, r3
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d102      	bne.n	800f7aa <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f000 f9eb 	bl	800fb80 <SPI_CloseTx_ISR>
  }
}
 800f7aa:	bf00      	nop
 800f7ac:	3708      	adds	r7, #8
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}

0800f7b2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f7b2:	b580      	push	{r7, lr}
 800f7b4:	b084      	sub	sp, #16
 800f7b6:	af00      	add	r7, sp, #0
 800f7b8:	60f8      	str	r0, [r7, #12]
 800f7ba:	60b9      	str	r1, [r7, #8]
 800f7bc:	603b      	str	r3, [r7, #0]
 800f7be:	4613      	mov	r3, r2
 800f7c0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f7c2:	e04c      	b.n	800f85e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ca:	d048      	beq.n	800f85e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f7cc:	f7fc f912 	bl	800b9f4 <HAL_GetTick>
 800f7d0:	4602      	mov	r2, r0
 800f7d2:	69bb      	ldr	r3, [r7, #24]
 800f7d4:	1ad3      	subs	r3, r2, r3
 800f7d6:	683a      	ldr	r2, [r7, #0]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d902      	bls.n	800f7e2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d13d      	bne.n	800f85e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	685a      	ldr	r2, [r3, #4]
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f7f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	685b      	ldr	r3, [r3, #4]
 800f7f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f7fa:	d111      	bne.n	800f820 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	689b      	ldr	r3, [r3, #8]
 800f800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f804:	d004      	beq.n	800f810 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	689b      	ldr	r3, [r3, #8]
 800f80a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f80e:	d107      	bne.n	800f820 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	681a      	ldr	r2, [r3, #0]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f81e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f828:	d10f      	bne.n	800f84a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	681a      	ldr	r2, [r3, #0]
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f838:	601a      	str	r2, [r3, #0]
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	681a      	ldr	r2, [r3, #0]
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f848:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	2201      	movs	r2, #1
 800f84e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2200      	movs	r2, #0
 800f856:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f85a:	2303      	movs	r3, #3
 800f85c:	e00f      	b.n	800f87e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	689a      	ldr	r2, [r3, #8]
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	4013      	ands	r3, r2
 800f868:	68ba      	ldr	r2, [r7, #8]
 800f86a:	429a      	cmp	r2, r3
 800f86c:	bf0c      	ite	eq
 800f86e:	2301      	moveq	r3, #1
 800f870:	2300      	movne	r3, #0
 800f872:	b2db      	uxtb	r3, r3
 800f874:	461a      	mov	r2, r3
 800f876:	79fb      	ldrb	r3, [r7, #7]
 800f878:	429a      	cmp	r2, r3
 800f87a:	d1a3      	bne.n	800f7c4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f87c:	2300      	movs	r3, #0
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3710      	adds	r7, #16
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}

0800f886 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f886:	b580      	push	{r7, lr}
 800f888:	b084      	sub	sp, #16
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	60f8      	str	r0, [r7, #12]
 800f88e:	60b9      	str	r1, [r7, #8]
 800f890:	607a      	str	r2, [r7, #4]
 800f892:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800f894:	e057      	b.n	800f946 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f89c:	d106      	bne.n	800f8ac <SPI_WaitFifoStateUntilTimeout+0x26>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d103      	bne.n	800f8ac <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	330c      	adds	r3, #12
 800f8aa:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8b2:	d048      	beq.n	800f946 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f8b4:	f7fc f89e 	bl	800b9f4 <HAL_GetTick>
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	69bb      	ldr	r3, [r7, #24]
 800f8bc:	1ad3      	subs	r3, r2, r3
 800f8be:	683a      	ldr	r2, [r7, #0]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d902      	bls.n	800f8ca <SPI_WaitFifoStateUntilTimeout+0x44>
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d13d      	bne.n	800f946 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	685a      	ldr	r2, [r3, #4]
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f8d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f8e2:	d111      	bne.n	800f908 <SPI_WaitFifoStateUntilTimeout+0x82>
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	689b      	ldr	r3, [r3, #8]
 800f8e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8ec:	d004      	beq.n	800f8f8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	689b      	ldr	r3, [r3, #8]
 800f8f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f8f6:	d107      	bne.n	800f908 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	681a      	ldr	r2, [r3, #0]
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f90c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f910:	d10f      	bne.n	800f932 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	681a      	ldr	r2, [r3, #0]
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f920:	601a      	str	r2, [r3, #0]
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	681a      	ldr	r2, [r3, #0]
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f930:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	2201      	movs	r2, #1
 800f936:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2200      	movs	r2, #0
 800f93e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f942:	2303      	movs	r3, #3
 800f944:	e008      	b.n	800f958 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	689a      	ldr	r2, [r3, #8]
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	4013      	ands	r3, r2
 800f950:	687a      	ldr	r2, [r7, #4]
 800f952:	429a      	cmp	r2, r3
 800f954:	d19f      	bne.n	800f896 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800f956:	2300      	movs	r3, #0
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3710      	adds	r7, #16
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b086      	sub	sp, #24
 800f964:	af02      	add	r7, sp, #8
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	60b9      	str	r1, [r7, #8]
 800f96a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f974:	d111      	bne.n	800f99a <SPI_EndRxTransaction+0x3a>
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	689b      	ldr	r3, [r3, #8]
 800f97a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f97e:	d004      	beq.n	800f98a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	689b      	ldr	r3, [r3, #8]
 800f984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f988:	d107      	bne.n	800f99a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f998:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	9300      	str	r3, [sp, #0]
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	2180      	movs	r1, #128	; 0x80
 800f9a4:	68f8      	ldr	r0, [r7, #12]
 800f9a6:	f7ff ff04 	bl	800f7b2 <SPI_WaitFlagStateUntilTimeout>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d007      	beq.n	800f9c0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f9b4:	f043 0220 	orr.w	r2, r3, #32
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f9bc:	2303      	movs	r3, #3
 800f9be:	e023      	b.n	800fa08 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	685b      	ldr	r3, [r3, #4]
 800f9c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f9c8:	d11d      	bne.n	800fa06 <SPI_EndRxTransaction+0xa6>
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	689b      	ldr	r3, [r3, #8]
 800f9ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9d2:	d004      	beq.n	800f9de <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	689b      	ldr	r3, [r3, #8]
 800f9d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9dc:	d113      	bne.n	800fa06 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	9300      	str	r3, [sp, #0]
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f9ea:	68f8      	ldr	r0, [r7, #12]
 800f9ec:	f7ff ff4b 	bl	800f886 <SPI_WaitFifoStateUntilTimeout>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d007      	beq.n	800fa06 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f9fa:	f043 0220 	orr.w	r2, r3, #32
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800fa02:	2303      	movs	r3, #3
 800fa04:	e000      	b.n	800fa08 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800fa06:	2300      	movs	r3, #0
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3710      	adds	r7, #16
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b086      	sub	sp, #24
 800fa14:	af02      	add	r7, sp, #8
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	60b9      	str	r1, [r7, #8]
 800fa1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	9300      	str	r3, [sp, #0]
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	2200      	movs	r2, #0
 800fa24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800fa28:	68f8      	ldr	r0, [r7, #12]
 800fa2a:	f7ff ff2c 	bl	800f886 <SPI_WaitFifoStateUntilTimeout>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d007      	beq.n	800fa44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fa38:	f043 0220 	orr.w	r2, r3, #32
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fa40:	2303      	movs	r3, #3
 800fa42:	e027      	b.n	800fa94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	9300      	str	r3, [sp, #0]
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	2180      	movs	r1, #128	; 0x80
 800fa4e:	68f8      	ldr	r0, [r7, #12]
 800fa50:	f7ff feaf 	bl	800f7b2 <SPI_WaitFlagStateUntilTimeout>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d007      	beq.n	800fa6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fa5e:	f043 0220 	orr.w	r2, r3, #32
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fa66:	2303      	movs	r3, #3
 800fa68:	e014      	b.n	800fa94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	9300      	str	r3, [sp, #0]
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	2200      	movs	r2, #0
 800fa72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800fa76:	68f8      	ldr	r0, [r7, #12]
 800fa78:	f7ff ff05 	bl	800f886 <SPI_WaitFifoStateUntilTimeout>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d007      	beq.n	800fa92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fa86:	f043 0220 	orr.w	r2, r3, #32
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fa8e:	2303      	movs	r3, #3
 800fa90:	e000      	b.n	800fa94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800fa92:	2300      	movs	r3, #0
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3710      	adds	r7, #16
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800faa4:	f7fb ffa6 	bl	800b9f4 <HAL_GetTick>
 800faa8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	685a      	ldr	r2, [r3, #4]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f022 0220 	bic.w	r2, r2, #32
 800fab8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800faba:	68fa      	ldr	r2, [r7, #12]
 800fabc:	2164      	movs	r1, #100	; 0x64
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f7ff ffa6 	bl	800fa10 <SPI_EndRxTxTransaction>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d005      	beq.n	800fad6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800face:	f043 0220 	orr.w	r2, r3, #32
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d115      	bne.n	800fb0a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fae4:	b2db      	uxtb	r3, r3
 800fae6:	2b04      	cmp	r3, #4
 800fae8:	d107      	bne.n	800fafa <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2201      	movs	r2, #1
 800faee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f7f8 fd6a 	bl	80085cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800faf8:	e00e      	b.n	800fb18 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2201      	movs	r2, #1
 800fafe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f7f8 fd74 	bl	80085f0 <HAL_SPI_TxRxCpltCallback>
}
 800fb08:	e006      	b.n	800fb18 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f7f8 fd36 	bl	8008584 <HAL_SPI_ErrorCallback>
}
 800fb18:	bf00      	nop
 800fb1a:	3710      	adds	r7, #16
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	685a      	ldr	r2, [r3, #4]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800fb36:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800fb38:	f7fb ff5c 	bl	800b9f4 <HAL_GetTick>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	461a      	mov	r2, r3
 800fb40:	2164      	movs	r1, #100	; 0x64
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f7ff ff0c 	bl	800f960 <SPI_EndRxTransaction>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d005      	beq.n	800fb5a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb52:	f043 0220 	orr.w	r2, r3, #32
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d103      	bne.n	800fb72 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f7f8 fd2e 	bl	80085cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800fb70:	e002      	b.n	800fb78 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f7f8 fd06 	bl	8008584 <HAL_SPI_ErrorCallback>
}
 800fb78:	bf00      	nop
 800fb7a:	3708      	adds	r7, #8
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}

0800fb80 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b084      	sub	sp, #16
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fb88:	f7fb ff34 	bl	800b9f4 <HAL_GetTick>
 800fb8c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	685a      	ldr	r2, [r3, #4]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800fb9c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800fb9e:	68fa      	ldr	r2, [r7, #12]
 800fba0:	2164      	movs	r1, #100	; 0x64
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f7ff ff34 	bl	800fa10 <SPI_EndRxTxTransaction>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d005      	beq.n	800fbba <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fbb2:	f043 0220 	orr.w	r2, r3, #32
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	689b      	ldr	r3, [r3, #8]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d10a      	bne.n	800fbd8 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	60bb      	str	r3, [r7, #8]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	68db      	ldr	r3, [r3, #12]
 800fbcc:	60bb      	str	r3, [r7, #8]
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	689b      	ldr	r3, [r3, #8]
 800fbd4:	60bb      	str	r3, [r7, #8]
 800fbd6:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2201      	movs	r2, #1
 800fbdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d003      	beq.n	800fbf0 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f7f8 fccb 	bl	8008584 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800fbee:	e002      	b.n	800fbf6 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f7f8 fcd9 	bl	80085a8 <HAL_SPI_TxCpltCallback>
}
 800fbf6:	bf00      	nop
 800fbf8:	3710      	adds	r7, #16
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}

0800fbfe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fbfe:	b580      	push	{r7, lr}
 800fc00:	b082      	sub	sp, #8
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d101      	bne.n	800fc10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	e01d      	b.n	800fc4c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc16:	b2db      	uxtb	r3, r3
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d106      	bne.n	800fc2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f7fa fa17 	bl	800a058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2202      	movs	r2, #2
 800fc2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681a      	ldr	r2, [r3, #0]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	3304      	adds	r3, #4
 800fc3a:	4619      	mov	r1, r3
 800fc3c:	4610      	mov	r0, r2
 800fc3e:	f000 fbe7 	bl	8010410 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2201      	movs	r2, #1
 800fc46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fc4a:	2300      	movs	r3, #0
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3708      	adds	r7, #8
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800fc54:	b480      	push	{r7}
 800fc56:	b085      	sub	sp, #20
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2202      	movs	r2, #2
 800fc60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	689a      	ldr	r2, [r3, #8]
 800fc6a:	4b0e      	ldr	r3, [pc, #56]	; (800fca4 <HAL_TIM_Base_Start+0x50>)
 800fc6c:	4013      	ands	r3, r2
 800fc6e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	2b06      	cmp	r3, #6
 800fc74:	d00b      	beq.n	800fc8e <HAL_TIM_Base_Start+0x3a>
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc7c:	d007      	beq.n	800fc8e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	681a      	ldr	r2, [r3, #0]
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f042 0201 	orr.w	r2, r2, #1
 800fc8c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2201      	movs	r2, #1
 800fc92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800fc96:	2300      	movs	r3, #0
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3714      	adds	r7, #20
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca2:	4770      	bx	lr
 800fca4:	00010007 	.word	0x00010007

0800fca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b085      	sub	sp, #20
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	68da      	ldr	r2, [r3, #12]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f042 0201 	orr.w	r2, r2, #1
 800fcbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	689a      	ldr	r2, [r3, #8]
 800fcc6:	4b0c      	ldr	r3, [pc, #48]	; (800fcf8 <HAL_TIM_Base_Start_IT+0x50>)
 800fcc8:	4013      	ands	r3, r2
 800fcca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	2b06      	cmp	r3, #6
 800fcd0:	d00b      	beq.n	800fcea <HAL_TIM_Base_Start_IT+0x42>
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcd8:	d007      	beq.n	800fcea <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	681a      	ldr	r2, [r3, #0]
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f042 0201 	orr.w	r2, r2, #1
 800fce8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fcea:	2300      	movs	r3, #0
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3714      	adds	r7, #20
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf6:	4770      	bx	lr
 800fcf8:	00010007 	.word	0x00010007

0800fcfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b082      	sub	sp, #8
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d101      	bne.n	800fd0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	e01d      	b.n	800fd4a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd14:	b2db      	uxtb	r3, r3
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d106      	bne.n	800fd28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f7fa f964 	bl	8009ff0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2202      	movs	r2, #2
 800fd2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	3304      	adds	r3, #4
 800fd38:	4619      	mov	r1, r3
 800fd3a:	4610      	mov	r0, r2
 800fd3c:	f000 fb68 	bl	8010410 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2201      	movs	r2, #1
 800fd44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fd48:	2300      	movs	r3, #0
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3708      	adds	r7, #8
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}

0800fd52 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800fd52:	b580      	push	{r7, lr}
 800fd54:	b082      	sub	sp, #8
 800fd56:	af00      	add	r7, sp, #0
 800fd58:	6078      	str	r0, [r7, #4]
 800fd5a:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d101      	bne.n	800fd66 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800fd62:	2301      	movs	r3, #1
 800fd64:	e02d      	b.n	800fdc2 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd6c:	b2db      	uxtb	r3, r3
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d106      	bne.n	800fd80 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2200      	movs	r2, #0
 800fd76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f000 f825 	bl	800fdca <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2202      	movs	r2, #2
 800fd84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681a      	ldr	r2, [r3, #0]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	3304      	adds	r3, #4
 800fd90:	4619      	mov	r1, r3
 800fd92:	4610      	mov	r0, r2
 800fd94:	f000 fb3c 	bl	8010410 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	681a      	ldr	r2, [r3, #0]
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	f022 0208 	bic.w	r2, r2, #8
 800fda6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	6819      	ldr	r1, [r3, #0]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	683a      	ldr	r2, [r7, #0]
 800fdb4:	430a      	orrs	r2, r1
 800fdb6:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2201      	movs	r2, #1
 800fdbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fdc0:	2300      	movs	r3, #0
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3708      	adds	r7, #8
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}

0800fdca <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800fdca:	b480      	push	{r7}
 800fdcc:	b083      	sub	sp, #12
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800fdd2:	bf00      	nop
 800fdd4:	370c      	adds	r7, #12
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fddc:	4770      	bx	lr

0800fdde <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
inline void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fdde:	b580      	push	{r7, lr}
 800fde0:	b082      	sub	sp, #8
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	691b      	ldr	r3, [r3, #16]
 800fdec:	f003 0302 	and.w	r3, r3, #2
 800fdf0:	2b02      	cmp	r3, #2
 800fdf2:	d122      	bne.n	800fe3a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	68db      	ldr	r3, [r3, #12]
 800fdfa:	f003 0302 	and.w	r3, r3, #2
 800fdfe:	2b02      	cmp	r3, #2
 800fe00:	d11b      	bne.n	800fe3a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f06f 0202 	mvn.w	r2, #2
 800fe0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2201      	movs	r2, #1
 800fe10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	699b      	ldr	r3, [r3, #24]
 800fe18:	f003 0303 	and.w	r3, r3, #3
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d003      	beq.n	800fe28 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f000 fad7 	bl	80103d4 <HAL_TIM_IC_CaptureCallback>
 800fe26:	e005      	b.n	800fe34 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f000 fac9 	bl	80103c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f000 fada 	bl	80103e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2200      	movs	r2, #0
 800fe38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	691b      	ldr	r3, [r3, #16]
 800fe40:	f003 0304 	and.w	r3, r3, #4
 800fe44:	2b04      	cmp	r3, #4
 800fe46:	d122      	bne.n	800fe8e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	68db      	ldr	r3, [r3, #12]
 800fe4e:	f003 0304 	and.w	r3, r3, #4
 800fe52:	2b04      	cmp	r3, #4
 800fe54:	d11b      	bne.n	800fe8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	f06f 0204 	mvn.w	r2, #4
 800fe5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2202      	movs	r2, #2
 800fe64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	699b      	ldr	r3, [r3, #24]
 800fe6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d003      	beq.n	800fe7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f000 faad 	bl	80103d4 <HAL_TIM_IC_CaptureCallback>
 800fe7a:	e005      	b.n	800fe88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f000 fa9f 	bl	80103c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f000 fab0 	bl	80103e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	691b      	ldr	r3, [r3, #16]
 800fe94:	f003 0308 	and.w	r3, r3, #8
 800fe98:	2b08      	cmp	r3, #8
 800fe9a:	d122      	bne.n	800fee2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	68db      	ldr	r3, [r3, #12]
 800fea2:	f003 0308 	and.w	r3, r3, #8
 800fea6:	2b08      	cmp	r3, #8
 800fea8:	d11b      	bne.n	800fee2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	f06f 0208 	mvn.w	r2, #8
 800feb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2204      	movs	r2, #4
 800feb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	69db      	ldr	r3, [r3, #28]
 800fec0:	f003 0303 	and.w	r3, r3, #3
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d003      	beq.n	800fed0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f000 fa83 	bl	80103d4 <HAL_TIM_IC_CaptureCallback>
 800fece:	e005      	b.n	800fedc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f000 fa75 	bl	80103c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f000 fa86 	bl	80103e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2200      	movs	r2, #0
 800fee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	691b      	ldr	r3, [r3, #16]
 800fee8:	f003 0310 	and.w	r3, r3, #16
 800feec:	2b10      	cmp	r3, #16
 800feee:	d122      	bne.n	800ff36 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	68db      	ldr	r3, [r3, #12]
 800fef6:	f003 0310 	and.w	r3, r3, #16
 800fefa:	2b10      	cmp	r3, #16
 800fefc:	d11b      	bne.n	800ff36 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	f06f 0210 	mvn.w	r2, #16
 800ff06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2208      	movs	r2, #8
 800ff0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	69db      	ldr	r3, [r3, #28]
 800ff14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d003      	beq.n	800ff24 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f000 fa59 	bl	80103d4 <HAL_TIM_IC_CaptureCallback>
 800ff22:	e005      	b.n	800ff30 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f000 fa4b 	bl	80103c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f000 fa5c 	bl	80103e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2200      	movs	r2, #0
 800ff34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	691b      	ldr	r3, [r3, #16]
 800ff3c:	f003 0301 	and.w	r3, r3, #1
 800ff40:	2b01      	cmp	r3, #1
 800ff42:	d10e      	bne.n	800ff62 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	68db      	ldr	r3, [r3, #12]
 800ff4a:	f003 0301 	and.w	r3, r3, #1
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d107      	bne.n	800ff62 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	f06f 0201 	mvn.w	r2, #1
 800ff5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f7f8 facf 	bl	8008500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	691b      	ldr	r3, [r3, #16]
 800ff68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff6c:	2b80      	cmp	r3, #128	; 0x80
 800ff6e:	d10e      	bne.n	800ff8e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	68db      	ldr	r3, [r3, #12]
 800ff76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff7a:	2b80      	cmp	r3, #128	; 0x80
 800ff7c:	d107      	bne.n	800ff8e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ff86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f000 ff1f 	bl	8010dcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	691b      	ldr	r3, [r3, #16]
 800ff94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff9c:	d10e      	bne.n	800ffbc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffa8:	2b80      	cmp	r3, #128	; 0x80
 800ffaa:	d107      	bne.n	800ffbc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ffb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f000 ff12 	bl	8010de0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	691b      	ldr	r3, [r3, #16]
 800ffc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffc6:	2b40      	cmp	r3, #64	; 0x40
 800ffc8:	d10e      	bne.n	800ffe8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffd4:	2b40      	cmp	r3, #64	; 0x40
 800ffd6:	d107      	bne.n	800ffe8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ffe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f000 fa0a 	bl	80103fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	691b      	ldr	r3, [r3, #16]
 800ffee:	f003 0320 	and.w	r3, r3, #32
 800fff2:	2b20      	cmp	r3, #32
 800fff4:	d10e      	bne.n	8010014 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	68db      	ldr	r3, [r3, #12]
 800fffc:	f003 0320 	and.w	r3, r3, #32
 8010000:	2b20      	cmp	r3, #32
 8010002:	d107      	bne.n	8010014 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	f06f 0220 	mvn.w	r2, #32
 801000c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f000 fed2 	bl	8010db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010014:	bf00      	nop
 8010016:	3708      	adds	r7, #8
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b084      	sub	sp, #16
 8010020:	af00      	add	r7, sp, #0
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	60b9      	str	r1, [r7, #8]
 8010026:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801002e:	2b01      	cmp	r3, #1
 8010030:	d101      	bne.n	8010036 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8010032:	2302      	movs	r3, #2
 8010034:	e105      	b.n	8010242 <HAL_TIM_PWM_ConfigChannel+0x226>
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	2201      	movs	r2, #1
 801003a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2202      	movs	r2, #2
 8010042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2b14      	cmp	r3, #20
 801004a:	f200 80f0 	bhi.w	801022e <HAL_TIM_PWM_ConfigChannel+0x212>
 801004e:	a201      	add	r2, pc, #4	; (adr r2, 8010054 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8010050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010054:	080100a9 	.word	0x080100a9
 8010058:	0801022f 	.word	0x0801022f
 801005c:	0801022f 	.word	0x0801022f
 8010060:	0801022f 	.word	0x0801022f
 8010064:	080100e9 	.word	0x080100e9
 8010068:	0801022f 	.word	0x0801022f
 801006c:	0801022f 	.word	0x0801022f
 8010070:	0801022f 	.word	0x0801022f
 8010074:	0801012b 	.word	0x0801012b
 8010078:	0801022f 	.word	0x0801022f
 801007c:	0801022f 	.word	0x0801022f
 8010080:	0801022f 	.word	0x0801022f
 8010084:	0801016b 	.word	0x0801016b
 8010088:	0801022f 	.word	0x0801022f
 801008c:	0801022f 	.word	0x0801022f
 8010090:	0801022f 	.word	0x0801022f
 8010094:	080101ad 	.word	0x080101ad
 8010098:	0801022f 	.word	0x0801022f
 801009c:	0801022f 	.word	0x0801022f
 80100a0:	0801022f 	.word	0x0801022f
 80100a4:	080101ed 	.word	0x080101ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	68b9      	ldr	r1, [r7, #8]
 80100ae:	4618      	mov	r0, r3
 80100b0:	f000 fa4e 	bl	8010550 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	699a      	ldr	r2, [r3, #24]
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f042 0208 	orr.w	r2, r2, #8
 80100c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	699a      	ldr	r2, [r3, #24]
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	f022 0204 	bic.w	r2, r2, #4
 80100d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	6999      	ldr	r1, [r3, #24]
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	691a      	ldr	r2, [r3, #16]
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	430a      	orrs	r2, r1
 80100e4:	619a      	str	r2, [r3, #24]
      break;
 80100e6:	e0a3      	b.n	8010230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	68b9      	ldr	r1, [r7, #8]
 80100ee:	4618      	mov	r0, r3
 80100f0:	f000 faa0 	bl	8010634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	699a      	ldr	r2, [r3, #24]
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	699a      	ldr	r2, [r3, #24]
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	6999      	ldr	r1, [r3, #24]
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	691b      	ldr	r3, [r3, #16]
 801011e:	021a      	lsls	r2, r3, #8
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	430a      	orrs	r2, r1
 8010126:	619a      	str	r2, [r3, #24]
      break;
 8010128:	e082      	b.n	8010230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	68b9      	ldr	r1, [r7, #8]
 8010130:	4618      	mov	r0, r3
 8010132:	f000 faf7 	bl	8010724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	69da      	ldr	r2, [r3, #28]
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f042 0208 	orr.w	r2, r2, #8
 8010144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	69da      	ldr	r2, [r3, #28]
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	f022 0204 	bic.w	r2, r2, #4
 8010154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	69d9      	ldr	r1, [r3, #28]
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	691a      	ldr	r2, [r3, #16]
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	430a      	orrs	r2, r1
 8010166:	61da      	str	r2, [r3, #28]
      break;
 8010168:	e062      	b.n	8010230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	68b9      	ldr	r1, [r7, #8]
 8010170:	4618      	mov	r0, r3
 8010172:	f000 fb4d 	bl	8010810 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	69da      	ldr	r2, [r3, #28]
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	69da      	ldr	r2, [r3, #28]
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	69d9      	ldr	r1, [r3, #28]
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	691b      	ldr	r3, [r3, #16]
 80101a0:	021a      	lsls	r2, r3, #8
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	430a      	orrs	r2, r1
 80101a8:	61da      	str	r2, [r3, #28]
      break;
 80101aa:	e041      	b.n	8010230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	68b9      	ldr	r1, [r7, #8]
 80101b2:	4618      	mov	r0, r3
 80101b4:	f000 fb84 	bl	80108c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f042 0208 	orr.w	r2, r2, #8
 80101c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	f022 0204 	bic.w	r2, r2, #4
 80101d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	691a      	ldr	r2, [r3, #16]
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	430a      	orrs	r2, r1
 80101e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80101ea:	e021      	b.n	8010230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	68b9      	ldr	r1, [r7, #8]
 80101f2:	4618      	mov	r0, r3
 80101f4:	f000 fbb6 	bl	8010964 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010206:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010216:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	691b      	ldr	r3, [r3, #16]
 8010222:	021a      	lsls	r2, r3, #8
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	430a      	orrs	r2, r1
 801022a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801022c:	e000      	b.n	8010230 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 801022e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	2201      	movs	r2, #1
 8010234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	2200      	movs	r2, #0
 801023c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010240:	2300      	movs	r3, #0
}
 8010242:	4618      	mov	r0, r3
 8010244:	3710      	adds	r7, #16
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
 801024a:	bf00      	nop

0801024c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801025c:	2b01      	cmp	r3, #1
 801025e:	d101      	bne.n	8010264 <HAL_TIM_ConfigClockSource+0x18>
 8010260:	2302      	movs	r3, #2
 8010262:	e0a6      	b.n	80103b2 <HAL_TIM_ConfigClockSource+0x166>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2201      	movs	r2, #1
 8010268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2202      	movs	r2, #2
 8010270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	689b      	ldr	r3, [r3, #8]
 801027a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801027c:	68fa      	ldr	r2, [r7, #12]
 801027e:	4b4f      	ldr	r3, [pc, #316]	; (80103bc <HAL_TIM_ConfigClockSource+0x170>)
 8010280:	4013      	ands	r3, r2
 8010282:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801028a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	68fa      	ldr	r2, [r7, #12]
 8010292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	2b40      	cmp	r3, #64	; 0x40
 801029a:	d067      	beq.n	801036c <HAL_TIM_ConfigClockSource+0x120>
 801029c:	2b40      	cmp	r3, #64	; 0x40
 801029e:	d80b      	bhi.n	80102b8 <HAL_TIM_ConfigClockSource+0x6c>
 80102a0:	2b10      	cmp	r3, #16
 80102a2:	d073      	beq.n	801038c <HAL_TIM_ConfigClockSource+0x140>
 80102a4:	2b10      	cmp	r3, #16
 80102a6:	d802      	bhi.n	80102ae <HAL_TIM_ConfigClockSource+0x62>
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d06f      	beq.n	801038c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80102ac:	e078      	b.n	80103a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80102ae:	2b20      	cmp	r3, #32
 80102b0:	d06c      	beq.n	801038c <HAL_TIM_ConfigClockSource+0x140>
 80102b2:	2b30      	cmp	r3, #48	; 0x30
 80102b4:	d06a      	beq.n	801038c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80102b6:	e073      	b.n	80103a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80102b8:	2b70      	cmp	r3, #112	; 0x70
 80102ba:	d00d      	beq.n	80102d8 <HAL_TIM_ConfigClockSource+0x8c>
 80102bc:	2b70      	cmp	r3, #112	; 0x70
 80102be:	d804      	bhi.n	80102ca <HAL_TIM_ConfigClockSource+0x7e>
 80102c0:	2b50      	cmp	r3, #80	; 0x50
 80102c2:	d033      	beq.n	801032c <HAL_TIM_ConfigClockSource+0xe0>
 80102c4:	2b60      	cmp	r3, #96	; 0x60
 80102c6:	d041      	beq.n	801034c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80102c8:	e06a      	b.n	80103a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80102ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102ce:	d066      	beq.n	801039e <HAL_TIM_ConfigClockSource+0x152>
 80102d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80102d4:	d017      	beq.n	8010306 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80102d6:	e063      	b.n	80103a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6818      	ldr	r0, [r3, #0]
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	6899      	ldr	r1, [r3, #8]
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	685a      	ldr	r2, [r3, #4]
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	68db      	ldr	r3, [r3, #12]
 80102e8:	f000 fc0a 	bl	8010b00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	689b      	ldr	r3, [r3, #8]
 80102f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80102fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	68fa      	ldr	r2, [r7, #12]
 8010302:	609a      	str	r2, [r3, #8]
      break;
 8010304:	e04c      	b.n	80103a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6818      	ldr	r0, [r3, #0]
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	6899      	ldr	r1, [r3, #8]
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	685a      	ldr	r2, [r3, #4]
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	68db      	ldr	r3, [r3, #12]
 8010316:	f000 fbf3 	bl	8010b00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	689a      	ldr	r2, [r3, #8]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010328:	609a      	str	r2, [r3, #8]
      break;
 801032a:	e039      	b.n	80103a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6818      	ldr	r0, [r3, #0]
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	6859      	ldr	r1, [r3, #4]
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	68db      	ldr	r3, [r3, #12]
 8010338:	461a      	mov	r2, r3
 801033a:	f000 fb67 	bl	8010a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	2150      	movs	r1, #80	; 0x50
 8010344:	4618      	mov	r0, r3
 8010346:	f000 fbc0 	bl	8010aca <TIM_ITRx_SetConfig>
      break;
 801034a:	e029      	b.n	80103a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6818      	ldr	r0, [r3, #0]
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	6859      	ldr	r1, [r3, #4]
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	68db      	ldr	r3, [r3, #12]
 8010358:	461a      	mov	r2, r3
 801035a:	f000 fb86 	bl	8010a6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	2160      	movs	r1, #96	; 0x60
 8010364:	4618      	mov	r0, r3
 8010366:	f000 fbb0 	bl	8010aca <TIM_ITRx_SetConfig>
      break;
 801036a:	e019      	b.n	80103a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6818      	ldr	r0, [r3, #0]
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	6859      	ldr	r1, [r3, #4]
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	68db      	ldr	r3, [r3, #12]
 8010378:	461a      	mov	r2, r3
 801037a:	f000 fb47 	bl	8010a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	2140      	movs	r1, #64	; 0x40
 8010384:	4618      	mov	r0, r3
 8010386:	f000 fba0 	bl	8010aca <TIM_ITRx_SetConfig>
      break;
 801038a:	e009      	b.n	80103a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	4619      	mov	r1, r3
 8010396:	4610      	mov	r0, r2
 8010398:	f000 fb97 	bl	8010aca <TIM_ITRx_SetConfig>
      break;
 801039c:	e000      	b.n	80103a0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 801039e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2201      	movs	r2, #1
 80103a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2200      	movs	r2, #0
 80103ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80103b0:	2300      	movs	r3, #0
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3710      	adds	r7, #16
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
 80103ba:	bf00      	nop
 80103bc:	fffeff88 	.word	0xfffeff88

080103c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80103c0:	b480      	push	{r7}
 80103c2:	b083      	sub	sp, #12
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80103c8:	bf00      	nop
 80103ca:	370c      	adds	r7, #12
 80103cc:	46bd      	mov	sp, r7
 80103ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d2:	4770      	bx	lr

080103d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80103d4:	b480      	push	{r7}
 80103d6:	b083      	sub	sp, #12
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80103dc:	bf00      	nop
 80103de:	370c      	adds	r7, #12
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b083      	sub	sp, #12
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80103f0:	bf00      	nop
 80103f2:	370c      	adds	r7, #12
 80103f4:	46bd      	mov	sp, r7
 80103f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fa:	4770      	bx	lr

080103fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80103fc:	b480      	push	{r7}
 80103fe:	b083      	sub	sp, #12
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010404:	bf00      	nop
 8010406:	370c      	adds	r7, #12
 8010408:	46bd      	mov	sp, r7
 801040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040e:	4770      	bx	lr

08010410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010410:	b480      	push	{r7}
 8010412:	b085      	sub	sp, #20
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	4a40      	ldr	r2, [pc, #256]	; (8010524 <TIM_Base_SetConfig+0x114>)
 8010424:	4293      	cmp	r3, r2
 8010426:	d013      	beq.n	8010450 <TIM_Base_SetConfig+0x40>
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801042e:	d00f      	beq.n	8010450 <TIM_Base_SetConfig+0x40>
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	4a3d      	ldr	r2, [pc, #244]	; (8010528 <TIM_Base_SetConfig+0x118>)
 8010434:	4293      	cmp	r3, r2
 8010436:	d00b      	beq.n	8010450 <TIM_Base_SetConfig+0x40>
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	4a3c      	ldr	r2, [pc, #240]	; (801052c <TIM_Base_SetConfig+0x11c>)
 801043c:	4293      	cmp	r3, r2
 801043e:	d007      	beq.n	8010450 <TIM_Base_SetConfig+0x40>
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	4a3b      	ldr	r2, [pc, #236]	; (8010530 <TIM_Base_SetConfig+0x120>)
 8010444:	4293      	cmp	r3, r2
 8010446:	d003      	beq.n	8010450 <TIM_Base_SetConfig+0x40>
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	4a3a      	ldr	r2, [pc, #232]	; (8010534 <TIM_Base_SetConfig+0x124>)
 801044c:	4293      	cmp	r3, r2
 801044e:	d108      	bne.n	8010462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	685b      	ldr	r3, [r3, #4]
 801045c:	68fa      	ldr	r2, [r7, #12]
 801045e:	4313      	orrs	r3, r2
 8010460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	4a2f      	ldr	r2, [pc, #188]	; (8010524 <TIM_Base_SetConfig+0x114>)
 8010466:	4293      	cmp	r3, r2
 8010468:	d02b      	beq.n	80104c2 <TIM_Base_SetConfig+0xb2>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010470:	d027      	beq.n	80104c2 <TIM_Base_SetConfig+0xb2>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	4a2c      	ldr	r2, [pc, #176]	; (8010528 <TIM_Base_SetConfig+0x118>)
 8010476:	4293      	cmp	r3, r2
 8010478:	d023      	beq.n	80104c2 <TIM_Base_SetConfig+0xb2>
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	4a2b      	ldr	r2, [pc, #172]	; (801052c <TIM_Base_SetConfig+0x11c>)
 801047e:	4293      	cmp	r3, r2
 8010480:	d01f      	beq.n	80104c2 <TIM_Base_SetConfig+0xb2>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	4a2a      	ldr	r2, [pc, #168]	; (8010530 <TIM_Base_SetConfig+0x120>)
 8010486:	4293      	cmp	r3, r2
 8010488:	d01b      	beq.n	80104c2 <TIM_Base_SetConfig+0xb2>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	4a29      	ldr	r2, [pc, #164]	; (8010534 <TIM_Base_SetConfig+0x124>)
 801048e:	4293      	cmp	r3, r2
 8010490:	d017      	beq.n	80104c2 <TIM_Base_SetConfig+0xb2>
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	4a28      	ldr	r2, [pc, #160]	; (8010538 <TIM_Base_SetConfig+0x128>)
 8010496:	4293      	cmp	r3, r2
 8010498:	d013      	beq.n	80104c2 <TIM_Base_SetConfig+0xb2>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	4a27      	ldr	r2, [pc, #156]	; (801053c <TIM_Base_SetConfig+0x12c>)
 801049e:	4293      	cmp	r3, r2
 80104a0:	d00f      	beq.n	80104c2 <TIM_Base_SetConfig+0xb2>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	4a26      	ldr	r2, [pc, #152]	; (8010540 <TIM_Base_SetConfig+0x130>)
 80104a6:	4293      	cmp	r3, r2
 80104a8:	d00b      	beq.n	80104c2 <TIM_Base_SetConfig+0xb2>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	4a25      	ldr	r2, [pc, #148]	; (8010544 <TIM_Base_SetConfig+0x134>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d007      	beq.n	80104c2 <TIM_Base_SetConfig+0xb2>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	4a24      	ldr	r2, [pc, #144]	; (8010548 <TIM_Base_SetConfig+0x138>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d003      	beq.n	80104c2 <TIM_Base_SetConfig+0xb2>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	4a23      	ldr	r2, [pc, #140]	; (801054c <TIM_Base_SetConfig+0x13c>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d108      	bne.n	80104d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80104c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	68db      	ldr	r3, [r3, #12]
 80104ce:	68fa      	ldr	r2, [r7, #12]
 80104d0:	4313      	orrs	r3, r2
 80104d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	695b      	ldr	r3, [r3, #20]
 80104de:	4313      	orrs	r3, r2
 80104e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	68fa      	ldr	r2, [r7, #12]
 80104e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	689a      	ldr	r2, [r3, #8]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	4a0a      	ldr	r2, [pc, #40]	; (8010524 <TIM_Base_SetConfig+0x114>)
 80104fc:	4293      	cmp	r3, r2
 80104fe:	d003      	beq.n	8010508 <TIM_Base_SetConfig+0xf8>
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	4a0c      	ldr	r2, [pc, #48]	; (8010534 <TIM_Base_SetConfig+0x124>)
 8010504:	4293      	cmp	r3, r2
 8010506:	d103      	bne.n	8010510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	691a      	ldr	r2, [r3, #16]
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2201      	movs	r2, #1
 8010514:	615a      	str	r2, [r3, #20]
}
 8010516:	bf00      	nop
 8010518:	3714      	adds	r7, #20
 801051a:	46bd      	mov	sp, r7
 801051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010520:	4770      	bx	lr
 8010522:	bf00      	nop
 8010524:	40010000 	.word	0x40010000
 8010528:	40000400 	.word	0x40000400
 801052c:	40000800 	.word	0x40000800
 8010530:	40000c00 	.word	0x40000c00
 8010534:	40010400 	.word	0x40010400
 8010538:	40014000 	.word	0x40014000
 801053c:	40014400 	.word	0x40014400
 8010540:	40014800 	.word	0x40014800
 8010544:	40001800 	.word	0x40001800
 8010548:	40001c00 	.word	0x40001c00
 801054c:	40002000 	.word	0x40002000

08010550 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010550:	b480      	push	{r7}
 8010552:	b087      	sub	sp, #28
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6a1b      	ldr	r3, [r3, #32]
 801055e:	f023 0201 	bic.w	r2, r3, #1
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6a1b      	ldr	r3, [r3, #32]
 801056a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	699b      	ldr	r3, [r3, #24]
 8010576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010578:	68fa      	ldr	r2, [r7, #12]
 801057a:	4b2b      	ldr	r3, [pc, #172]	; (8010628 <TIM_OC1_SetConfig+0xd8>)
 801057c:	4013      	ands	r3, r2
 801057e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	f023 0303 	bic.w	r3, r3, #3
 8010586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	68fa      	ldr	r2, [r7, #12]
 801058e:	4313      	orrs	r3, r2
 8010590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	f023 0302 	bic.w	r3, r3, #2
 8010598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	689b      	ldr	r3, [r3, #8]
 801059e:	697a      	ldr	r2, [r7, #20]
 80105a0:	4313      	orrs	r3, r2
 80105a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4a21      	ldr	r2, [pc, #132]	; (801062c <TIM_OC1_SetConfig+0xdc>)
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d003      	beq.n	80105b4 <TIM_OC1_SetConfig+0x64>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	4a20      	ldr	r2, [pc, #128]	; (8010630 <TIM_OC1_SetConfig+0xe0>)
 80105b0:	4293      	cmp	r3, r2
 80105b2:	d10c      	bne.n	80105ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	f023 0308 	bic.w	r3, r3, #8
 80105ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	68db      	ldr	r3, [r3, #12]
 80105c0:	697a      	ldr	r2, [r7, #20]
 80105c2:	4313      	orrs	r3, r2
 80105c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	f023 0304 	bic.w	r3, r3, #4
 80105cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	4a16      	ldr	r2, [pc, #88]	; (801062c <TIM_OC1_SetConfig+0xdc>)
 80105d2:	4293      	cmp	r3, r2
 80105d4:	d003      	beq.n	80105de <TIM_OC1_SetConfig+0x8e>
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	4a15      	ldr	r2, [pc, #84]	; (8010630 <TIM_OC1_SetConfig+0xe0>)
 80105da:	4293      	cmp	r3, r2
 80105dc:	d111      	bne.n	8010602 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80105e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80105e6:	693b      	ldr	r3, [r7, #16]
 80105e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80105ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	695b      	ldr	r3, [r3, #20]
 80105f2:	693a      	ldr	r2, [r7, #16]
 80105f4:	4313      	orrs	r3, r2
 80105f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	699b      	ldr	r3, [r3, #24]
 80105fc:	693a      	ldr	r2, [r7, #16]
 80105fe:	4313      	orrs	r3, r2
 8010600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	693a      	ldr	r2, [r7, #16]
 8010606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	68fa      	ldr	r2, [r7, #12]
 801060c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	685a      	ldr	r2, [r3, #4]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	697a      	ldr	r2, [r7, #20]
 801061a:	621a      	str	r2, [r3, #32]
}
 801061c:	bf00      	nop
 801061e:	371c      	adds	r7, #28
 8010620:	46bd      	mov	sp, r7
 8010622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010626:	4770      	bx	lr
 8010628:	fffeff8f 	.word	0xfffeff8f
 801062c:	40010000 	.word	0x40010000
 8010630:	40010400 	.word	0x40010400

08010634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010634:	b480      	push	{r7}
 8010636:	b087      	sub	sp, #28
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6a1b      	ldr	r3, [r3, #32]
 8010642:	f023 0210 	bic.w	r2, r3, #16
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	6a1b      	ldr	r3, [r3, #32]
 801064e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	685b      	ldr	r3, [r3, #4]
 8010654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	699b      	ldr	r3, [r3, #24]
 801065a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801065c:	68fa      	ldr	r2, [r7, #12]
 801065e:	4b2e      	ldr	r3, [pc, #184]	; (8010718 <TIM_OC2_SetConfig+0xe4>)
 8010660:	4013      	ands	r3, r2
 8010662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801066a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	021b      	lsls	r3, r3, #8
 8010672:	68fa      	ldr	r2, [r7, #12]
 8010674:	4313      	orrs	r3, r2
 8010676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	f023 0320 	bic.w	r3, r3, #32
 801067e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	689b      	ldr	r3, [r3, #8]
 8010684:	011b      	lsls	r3, r3, #4
 8010686:	697a      	ldr	r2, [r7, #20]
 8010688:	4313      	orrs	r3, r2
 801068a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	4a23      	ldr	r2, [pc, #140]	; (801071c <TIM_OC2_SetConfig+0xe8>)
 8010690:	4293      	cmp	r3, r2
 8010692:	d003      	beq.n	801069c <TIM_OC2_SetConfig+0x68>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	4a22      	ldr	r2, [pc, #136]	; (8010720 <TIM_OC2_SetConfig+0xec>)
 8010698:	4293      	cmp	r3, r2
 801069a:	d10d      	bne.n	80106b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801069c:	697b      	ldr	r3, [r7, #20]
 801069e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80106a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	011b      	lsls	r3, r3, #4
 80106aa:	697a      	ldr	r2, [r7, #20]
 80106ac:	4313      	orrs	r3, r2
 80106ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	4a18      	ldr	r2, [pc, #96]	; (801071c <TIM_OC2_SetConfig+0xe8>)
 80106bc:	4293      	cmp	r3, r2
 80106be:	d003      	beq.n	80106c8 <TIM_OC2_SetConfig+0x94>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	4a17      	ldr	r2, [pc, #92]	; (8010720 <TIM_OC2_SetConfig+0xec>)
 80106c4:	4293      	cmp	r3, r2
 80106c6:	d113      	bne.n	80106f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80106ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80106d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	695b      	ldr	r3, [r3, #20]
 80106dc:	009b      	lsls	r3, r3, #2
 80106de:	693a      	ldr	r2, [r7, #16]
 80106e0:	4313      	orrs	r3, r2
 80106e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	699b      	ldr	r3, [r3, #24]
 80106e8:	009b      	lsls	r3, r3, #2
 80106ea:	693a      	ldr	r2, [r7, #16]
 80106ec:	4313      	orrs	r3, r2
 80106ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	693a      	ldr	r2, [r7, #16]
 80106f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	68fa      	ldr	r2, [r7, #12]
 80106fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	685a      	ldr	r2, [r3, #4]
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	697a      	ldr	r2, [r7, #20]
 8010708:	621a      	str	r2, [r3, #32]
}
 801070a:	bf00      	nop
 801070c:	371c      	adds	r7, #28
 801070e:	46bd      	mov	sp, r7
 8010710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010714:	4770      	bx	lr
 8010716:	bf00      	nop
 8010718:	feff8fff 	.word	0xfeff8fff
 801071c:	40010000 	.word	0x40010000
 8010720:	40010400 	.word	0x40010400

08010724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010724:	b480      	push	{r7}
 8010726:	b087      	sub	sp, #28
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6a1b      	ldr	r3, [r3, #32]
 8010732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6a1b      	ldr	r3, [r3, #32]
 801073e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	685b      	ldr	r3, [r3, #4]
 8010744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	69db      	ldr	r3, [r3, #28]
 801074a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801074c:	68fa      	ldr	r2, [r7, #12]
 801074e:	4b2d      	ldr	r3, [pc, #180]	; (8010804 <TIM_OC3_SetConfig+0xe0>)
 8010750:	4013      	ands	r3, r2
 8010752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	f023 0303 	bic.w	r3, r3, #3
 801075a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	68fa      	ldr	r2, [r7, #12]
 8010762:	4313      	orrs	r3, r2
 8010764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801076c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	689b      	ldr	r3, [r3, #8]
 8010772:	021b      	lsls	r3, r3, #8
 8010774:	697a      	ldr	r2, [r7, #20]
 8010776:	4313      	orrs	r3, r2
 8010778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	4a22      	ldr	r2, [pc, #136]	; (8010808 <TIM_OC3_SetConfig+0xe4>)
 801077e:	4293      	cmp	r3, r2
 8010780:	d003      	beq.n	801078a <TIM_OC3_SetConfig+0x66>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	4a21      	ldr	r2, [pc, #132]	; (801080c <TIM_OC3_SetConfig+0xe8>)
 8010786:	4293      	cmp	r3, r2
 8010788:	d10d      	bne.n	80107a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	68db      	ldr	r3, [r3, #12]
 8010796:	021b      	lsls	r3, r3, #8
 8010798:	697a      	ldr	r2, [r7, #20]
 801079a:	4313      	orrs	r3, r2
 801079c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80107a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	4a17      	ldr	r2, [pc, #92]	; (8010808 <TIM_OC3_SetConfig+0xe4>)
 80107aa:	4293      	cmp	r3, r2
 80107ac:	d003      	beq.n	80107b6 <TIM_OC3_SetConfig+0x92>
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	4a16      	ldr	r2, [pc, #88]	; (801080c <TIM_OC3_SetConfig+0xe8>)
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d113      	bne.n	80107de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80107b6:	693b      	ldr	r3, [r7, #16]
 80107b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80107bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80107be:	693b      	ldr	r3, [r7, #16]
 80107c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80107c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	695b      	ldr	r3, [r3, #20]
 80107ca:	011b      	lsls	r3, r3, #4
 80107cc:	693a      	ldr	r2, [r7, #16]
 80107ce:	4313      	orrs	r3, r2
 80107d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	699b      	ldr	r3, [r3, #24]
 80107d6:	011b      	lsls	r3, r3, #4
 80107d8:	693a      	ldr	r2, [r7, #16]
 80107da:	4313      	orrs	r3, r2
 80107dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	693a      	ldr	r2, [r7, #16]
 80107e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	68fa      	ldr	r2, [r7, #12]
 80107e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	685a      	ldr	r2, [r3, #4]
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	697a      	ldr	r2, [r7, #20]
 80107f6:	621a      	str	r2, [r3, #32]
}
 80107f8:	bf00      	nop
 80107fa:	371c      	adds	r7, #28
 80107fc:	46bd      	mov	sp, r7
 80107fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010802:	4770      	bx	lr
 8010804:	fffeff8f 	.word	0xfffeff8f
 8010808:	40010000 	.word	0x40010000
 801080c:	40010400 	.word	0x40010400

08010810 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010810:	b480      	push	{r7}
 8010812:	b087      	sub	sp, #28
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6a1b      	ldr	r3, [r3, #32]
 801081e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6a1b      	ldr	r3, [r3, #32]
 801082a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	685b      	ldr	r3, [r3, #4]
 8010830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	69db      	ldr	r3, [r3, #28]
 8010836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010838:	68fa      	ldr	r2, [r7, #12]
 801083a:	4b1e      	ldr	r3, [pc, #120]	; (80108b4 <TIM_OC4_SetConfig+0xa4>)
 801083c:	4013      	ands	r3, r2
 801083e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	021b      	lsls	r3, r3, #8
 801084e:	68fa      	ldr	r2, [r7, #12]
 8010850:	4313      	orrs	r3, r2
 8010852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801085a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	689b      	ldr	r3, [r3, #8]
 8010860:	031b      	lsls	r3, r3, #12
 8010862:	693a      	ldr	r2, [r7, #16]
 8010864:	4313      	orrs	r3, r2
 8010866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	4a13      	ldr	r2, [pc, #76]	; (80108b8 <TIM_OC4_SetConfig+0xa8>)
 801086c:	4293      	cmp	r3, r2
 801086e:	d003      	beq.n	8010878 <TIM_OC4_SetConfig+0x68>
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	4a12      	ldr	r2, [pc, #72]	; (80108bc <TIM_OC4_SetConfig+0xac>)
 8010874:	4293      	cmp	r3, r2
 8010876:	d109      	bne.n	801088c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801087e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	695b      	ldr	r3, [r3, #20]
 8010884:	019b      	lsls	r3, r3, #6
 8010886:	697a      	ldr	r2, [r7, #20]
 8010888:	4313      	orrs	r3, r2
 801088a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	697a      	ldr	r2, [r7, #20]
 8010890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	68fa      	ldr	r2, [r7, #12]
 8010896:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	685a      	ldr	r2, [r3, #4]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	693a      	ldr	r2, [r7, #16]
 80108a4:	621a      	str	r2, [r3, #32]
}
 80108a6:	bf00      	nop
 80108a8:	371c      	adds	r7, #28
 80108aa:	46bd      	mov	sp, r7
 80108ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b0:	4770      	bx	lr
 80108b2:	bf00      	nop
 80108b4:	feff8fff 	.word	0xfeff8fff
 80108b8:	40010000 	.word	0x40010000
 80108bc:	40010400 	.word	0x40010400

080108c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80108c0:	b480      	push	{r7}
 80108c2:	b087      	sub	sp, #28
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6a1b      	ldr	r3, [r3, #32]
 80108ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	6a1b      	ldr	r3, [r3, #32]
 80108da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	685b      	ldr	r3, [r3, #4]
 80108e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80108e8:	68fa      	ldr	r2, [r7, #12]
 80108ea:	4b1b      	ldr	r3, [pc, #108]	; (8010958 <TIM_OC5_SetConfig+0x98>)
 80108ec:	4013      	ands	r3, r2
 80108ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	68fa      	ldr	r2, [r7, #12]
 80108f6:	4313      	orrs	r3, r2
 80108f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010900:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	689b      	ldr	r3, [r3, #8]
 8010906:	041b      	lsls	r3, r3, #16
 8010908:	693a      	ldr	r2, [r7, #16]
 801090a:	4313      	orrs	r3, r2
 801090c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	4a12      	ldr	r2, [pc, #72]	; (801095c <TIM_OC5_SetConfig+0x9c>)
 8010912:	4293      	cmp	r3, r2
 8010914:	d003      	beq.n	801091e <TIM_OC5_SetConfig+0x5e>
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	4a11      	ldr	r2, [pc, #68]	; (8010960 <TIM_OC5_SetConfig+0xa0>)
 801091a:	4293      	cmp	r3, r2
 801091c:	d109      	bne.n	8010932 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010924:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	695b      	ldr	r3, [r3, #20]
 801092a:	021b      	lsls	r3, r3, #8
 801092c:	697a      	ldr	r2, [r7, #20]
 801092e:	4313      	orrs	r3, r2
 8010930:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	697a      	ldr	r2, [r7, #20]
 8010936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	68fa      	ldr	r2, [r7, #12]
 801093c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	685a      	ldr	r2, [r3, #4]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	693a      	ldr	r2, [r7, #16]
 801094a:	621a      	str	r2, [r3, #32]
}
 801094c:	bf00      	nop
 801094e:	371c      	adds	r7, #28
 8010950:	46bd      	mov	sp, r7
 8010952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010956:	4770      	bx	lr
 8010958:	fffeff8f 	.word	0xfffeff8f
 801095c:	40010000 	.word	0x40010000
 8010960:	40010400 	.word	0x40010400

08010964 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010964:	b480      	push	{r7}
 8010966:	b087      	sub	sp, #28
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
 801096c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6a1b      	ldr	r3, [r3, #32]
 8010972:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6a1b      	ldr	r3, [r3, #32]
 801097e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801098a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801098c:	68fa      	ldr	r2, [r7, #12]
 801098e:	4b1c      	ldr	r3, [pc, #112]	; (8010a00 <TIM_OC6_SetConfig+0x9c>)
 8010990:	4013      	ands	r3, r2
 8010992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	021b      	lsls	r3, r3, #8
 801099a:	68fa      	ldr	r2, [r7, #12]
 801099c:	4313      	orrs	r3, r2
 801099e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80109a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	689b      	ldr	r3, [r3, #8]
 80109ac:	051b      	lsls	r3, r3, #20
 80109ae:	693a      	ldr	r2, [r7, #16]
 80109b0:	4313      	orrs	r3, r2
 80109b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	4a13      	ldr	r2, [pc, #76]	; (8010a04 <TIM_OC6_SetConfig+0xa0>)
 80109b8:	4293      	cmp	r3, r2
 80109ba:	d003      	beq.n	80109c4 <TIM_OC6_SetConfig+0x60>
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	4a12      	ldr	r2, [pc, #72]	; (8010a08 <TIM_OC6_SetConfig+0xa4>)
 80109c0:	4293      	cmp	r3, r2
 80109c2:	d109      	bne.n	80109d8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80109ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	695b      	ldr	r3, [r3, #20]
 80109d0:	029b      	lsls	r3, r3, #10
 80109d2:	697a      	ldr	r2, [r7, #20]
 80109d4:	4313      	orrs	r3, r2
 80109d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	697a      	ldr	r2, [r7, #20]
 80109dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	68fa      	ldr	r2, [r7, #12]
 80109e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	685a      	ldr	r2, [r3, #4]
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	693a      	ldr	r2, [r7, #16]
 80109f0:	621a      	str	r2, [r3, #32]
}
 80109f2:	bf00      	nop
 80109f4:	371c      	adds	r7, #28
 80109f6:	46bd      	mov	sp, r7
 80109f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fc:	4770      	bx	lr
 80109fe:	bf00      	nop
 8010a00:	feff8fff 	.word	0xfeff8fff
 8010a04:	40010000 	.word	0x40010000
 8010a08:	40010400 	.word	0x40010400

08010a0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010a0c:	b480      	push	{r7}
 8010a0e:	b087      	sub	sp, #28
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	60f8      	str	r0, [r7, #12]
 8010a14:	60b9      	str	r1, [r7, #8]
 8010a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	6a1b      	ldr	r3, [r3, #32]
 8010a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	6a1b      	ldr	r3, [r3, #32]
 8010a22:	f023 0201 	bic.w	r2, r3, #1
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	699b      	ldr	r3, [r3, #24]
 8010a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010a30:	693b      	ldr	r3, [r7, #16]
 8010a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	011b      	lsls	r3, r3, #4
 8010a3c:	693a      	ldr	r2, [r7, #16]
 8010a3e:	4313      	orrs	r3, r2
 8010a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	f023 030a 	bic.w	r3, r3, #10
 8010a48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010a4a:	697a      	ldr	r2, [r7, #20]
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	4313      	orrs	r3, r2
 8010a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	693a      	ldr	r2, [r7, #16]
 8010a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	697a      	ldr	r2, [r7, #20]
 8010a5c:	621a      	str	r2, [r3, #32]
}
 8010a5e:	bf00      	nop
 8010a60:	371c      	adds	r7, #28
 8010a62:	46bd      	mov	sp, r7
 8010a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a68:	4770      	bx	lr

08010a6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010a6a:	b480      	push	{r7}
 8010a6c:	b087      	sub	sp, #28
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	60f8      	str	r0, [r7, #12]
 8010a72:	60b9      	str	r1, [r7, #8]
 8010a74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	6a1b      	ldr	r3, [r3, #32]
 8010a7a:	f023 0210 	bic.w	r2, r3, #16
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	699b      	ldr	r3, [r3, #24]
 8010a86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	6a1b      	ldr	r3, [r3, #32]
 8010a8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010a94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	031b      	lsls	r3, r3, #12
 8010a9a:	697a      	ldr	r2, [r7, #20]
 8010a9c:	4313      	orrs	r3, r2
 8010a9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010aa6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010aa8:	68bb      	ldr	r3, [r7, #8]
 8010aaa:	011b      	lsls	r3, r3, #4
 8010aac:	693a      	ldr	r2, [r7, #16]
 8010aae:	4313      	orrs	r3, r2
 8010ab0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	697a      	ldr	r2, [r7, #20]
 8010ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	693a      	ldr	r2, [r7, #16]
 8010abc:	621a      	str	r2, [r3, #32]
}
 8010abe:	bf00      	nop
 8010ac0:	371c      	adds	r7, #28
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr

08010aca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010aca:	b480      	push	{r7}
 8010acc:	b085      	sub	sp, #20
 8010ace:	af00      	add	r7, sp, #0
 8010ad0:	6078      	str	r0, [r7, #4]
 8010ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	689b      	ldr	r3, [r3, #8]
 8010ad8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ae0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010ae2:	683a      	ldr	r2, [r7, #0]
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	4313      	orrs	r3, r2
 8010ae8:	f043 0307 	orr.w	r3, r3, #7
 8010aec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	68fa      	ldr	r2, [r7, #12]
 8010af2:	609a      	str	r2, [r3, #8]
}
 8010af4:	bf00      	nop
 8010af6:	3714      	adds	r7, #20
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr

08010b00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010b00:	b480      	push	{r7}
 8010b02:	b087      	sub	sp, #28
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	60f8      	str	r0, [r7, #12]
 8010b08:	60b9      	str	r1, [r7, #8]
 8010b0a:	607a      	str	r2, [r7, #4]
 8010b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	689b      	ldr	r3, [r3, #8]
 8010b12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010b1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	021a      	lsls	r2, r3, #8
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	431a      	orrs	r2, r3
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	4313      	orrs	r3, r2
 8010b28:	697a      	ldr	r2, [r7, #20]
 8010b2a:	4313      	orrs	r3, r2
 8010b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	697a      	ldr	r2, [r7, #20]
 8010b32:	609a      	str	r2, [r3, #8]
}
 8010b34:	bf00      	nop
 8010b36:	371c      	adds	r7, #28
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3e:	4770      	bx	lr

08010b40 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b084      	sub	sp, #16
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
 8010b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	2204      	movs	r2, #4
 8010b50:	6839      	ldr	r1, [r7, #0]
 8010b52:	4618      	mov	r0, r3
 8010b54:	f000 f94e 	bl	8010df4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010b66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	689a      	ldr	r2, [r3, #8]
 8010b6e:	4b0b      	ldr	r3, [pc, #44]	; (8010b9c <HAL_TIMEx_PWMN_Start+0x5c>)
 8010b70:	4013      	ands	r3, r2
 8010b72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	2b06      	cmp	r3, #6
 8010b78:	d00b      	beq.n	8010b92 <HAL_TIMEx_PWMN_Start+0x52>
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b80:	d007      	beq.n	8010b92 <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	f042 0201 	orr.w	r2, r2, #1
 8010b90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010b92:	2300      	movs	r3, #0
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3710      	adds	r7, #16
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}
 8010b9c:	00010007 	.word	0x00010007

08010ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	b085      	sub	sp, #20
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	d101      	bne.n	8010bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010bb4:	2302      	movs	r3, #2
 8010bb6:	e06d      	b.n	8010c94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2201      	movs	r2, #1
 8010bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2202      	movs	r2, #2
 8010bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	685b      	ldr	r3, [r3, #4]
 8010bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	689b      	ldr	r3, [r3, #8]
 8010bd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	4a30      	ldr	r2, [pc, #192]	; (8010ca0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d004      	beq.n	8010bec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	4a2f      	ldr	r2, [pc, #188]	; (8010ca4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010be8:	4293      	cmp	r3, r2
 8010bea:	d108      	bne.n	8010bfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010bf2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	685b      	ldr	r3, [r3, #4]
 8010bf8:	68fa      	ldr	r2, [r7, #12]
 8010bfa:	4313      	orrs	r3, r2
 8010bfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	68fa      	ldr	r2, [r7, #12]
 8010c0c:	4313      	orrs	r3, r2
 8010c0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	68fa      	ldr	r2, [r7, #12]
 8010c16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	4a20      	ldr	r2, [pc, #128]	; (8010ca0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d022      	beq.n	8010c68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c2a:	d01d      	beq.n	8010c68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	4a1d      	ldr	r2, [pc, #116]	; (8010ca8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d018      	beq.n	8010c68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	4a1c      	ldr	r2, [pc, #112]	; (8010cac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010c3c:	4293      	cmp	r3, r2
 8010c3e:	d013      	beq.n	8010c68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	4a1a      	ldr	r2, [pc, #104]	; (8010cb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010c46:	4293      	cmp	r3, r2
 8010c48:	d00e      	beq.n	8010c68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	4a15      	ldr	r2, [pc, #84]	; (8010ca4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010c50:	4293      	cmp	r3, r2
 8010c52:	d009      	beq.n	8010c68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	4a16      	ldr	r2, [pc, #88]	; (8010cb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	d004      	beq.n	8010c68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	4a15      	ldr	r2, [pc, #84]	; (8010cb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010c64:	4293      	cmp	r3, r2
 8010c66:	d10c      	bne.n	8010c82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	689b      	ldr	r3, [r3, #8]
 8010c74:	68ba      	ldr	r2, [r7, #8]
 8010c76:	4313      	orrs	r3, r2
 8010c78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	68ba      	ldr	r2, [r7, #8]
 8010c80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2201      	movs	r2, #1
 8010c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010c92:	2300      	movs	r3, #0
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3714      	adds	r7, #20
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9e:	4770      	bx	lr
 8010ca0:	40010000 	.word	0x40010000
 8010ca4:	40010400 	.word	0x40010400
 8010ca8:	40000400 	.word	0x40000400
 8010cac:	40000800 	.word	0x40000800
 8010cb0:	40000c00 	.word	0x40000c00
 8010cb4:	40014000 	.word	0x40014000
 8010cb8:	40001800 	.word	0x40001800

08010cbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b085      	sub	sp, #20
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010cd0:	2b01      	cmp	r3, #1
 8010cd2:	d101      	bne.n	8010cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010cd4:	2302      	movs	r3, #2
 8010cd6:	e065      	b.n	8010da4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2201      	movs	r2, #1
 8010cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	68db      	ldr	r3, [r3, #12]
 8010cea:	4313      	orrs	r3, r2
 8010cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	689b      	ldr	r3, [r3, #8]
 8010cf8:	4313      	orrs	r3, r2
 8010cfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	4313      	orrs	r3, r2
 8010d08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	4313      	orrs	r3, r2
 8010d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	691b      	ldr	r3, [r3, #16]
 8010d22:	4313      	orrs	r3, r2
 8010d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	695b      	ldr	r3, [r3, #20]
 8010d30:	4313      	orrs	r3, r2
 8010d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d3e:	4313      	orrs	r3, r2
 8010d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	699b      	ldr	r3, [r3, #24]
 8010d4c:	041b      	lsls	r3, r3, #16
 8010d4e:	4313      	orrs	r3, r2
 8010d50:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	4a16      	ldr	r2, [pc, #88]	; (8010db0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010d58:	4293      	cmp	r3, r2
 8010d5a:	d004      	beq.n	8010d66 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	4a14      	ldr	r2, [pc, #80]	; (8010db4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010d62:	4293      	cmp	r3, r2
 8010d64:	d115      	bne.n	8010d92 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d70:	051b      	lsls	r3, r3, #20
 8010d72:	4313      	orrs	r3, r2
 8010d74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	69db      	ldr	r3, [r3, #28]
 8010d80:	4313      	orrs	r3, r2
 8010d82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	6a1b      	ldr	r3, [r3, #32]
 8010d8e:	4313      	orrs	r3, r2
 8010d90:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	68fa      	ldr	r2, [r7, #12]
 8010d98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010da2:	2300      	movs	r3, #0
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	3714      	adds	r7, #20
 8010da8:	46bd      	mov	sp, r7
 8010daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dae:	4770      	bx	lr
 8010db0:	40010000 	.word	0x40010000
 8010db4:	40010400 	.word	0x40010400

08010db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010dc0:	bf00      	nop
 8010dc2:	370c      	adds	r7, #12
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dca:	4770      	bx	lr

08010dcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010dcc:	b480      	push	{r7}
 8010dce:	b083      	sub	sp, #12
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010dd4:	bf00      	nop
 8010dd6:	370c      	adds	r7, #12
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dde:	4770      	bx	lr

08010de0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010de0:	b480      	push	{r7}
 8010de2:	b083      	sub	sp, #12
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010de8:	bf00      	nop
 8010dea:	370c      	adds	r7, #12
 8010dec:	46bd      	mov	sp, r7
 8010dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df2:	4770      	bx	lr

08010df4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8010df4:	b480      	push	{r7}
 8010df6:	b087      	sub	sp, #28
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	60f8      	str	r0, [r7, #12]
 8010dfc:	60b9      	str	r1, [r7, #8]
 8010dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	f003 031f 	and.w	r3, r3, #31
 8010e06:	2204      	movs	r2, #4
 8010e08:	fa02 f303 	lsl.w	r3, r2, r3
 8010e0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	6a1a      	ldr	r2, [r3, #32]
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	43db      	mvns	r3, r3
 8010e16:	401a      	ands	r2, r3
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	6a1a      	ldr	r2, [r3, #32]
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	f003 031f 	and.w	r3, r3, #31
 8010e26:	6879      	ldr	r1, [r7, #4]
 8010e28:	fa01 f303 	lsl.w	r3, r1, r3
 8010e2c:	431a      	orrs	r2, r3
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	621a      	str	r2, [r3, #32]
}
 8010e32:	bf00      	nop
 8010e34:	371c      	adds	r7, #28
 8010e36:	46bd      	mov	sp, r7
 8010e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3c:	4770      	bx	lr

08010e3e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010e3e:	b580      	push	{r7, lr}
 8010e40:	b082      	sub	sp, #8
 8010e42:	af00      	add	r7, sp, #0
 8010e44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d101      	bne.n	8010e50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	e040      	b.n	8010ed2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d106      	bne.n	8010e66 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f7f9 f9cb 	bl	800a1fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2224      	movs	r2, #36	; 0x24
 8010e6a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	681a      	ldr	r2, [r3, #0]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	f022 0201 	bic.w	r2, r2, #1
 8010e7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f000 fa7d 	bl	801137c <UART_SetConfig>
 8010e82:	4603      	mov	r3, r0
 8010e84:	2b01      	cmp	r3, #1
 8010e86:	d101      	bne.n	8010e8c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8010e88:	2301      	movs	r3, #1
 8010e8a:	e022      	b.n	8010ed2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d002      	beq.n	8010e9a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f000 fd1b 	bl	80118d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	685a      	ldr	r2, [r3, #4]
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010ea8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	689a      	ldr	r2, [r3, #8]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010eb8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	681a      	ldr	r2, [r3, #0]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	f042 0201 	orr.w	r2, r2, #1
 8010ec8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f000 fda2 	bl	8011a14 <UART_CheckIdleState>
 8010ed0:	4603      	mov	r3, r0
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3708      	adds	r7, #8
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
	...

08010edc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b084      	sub	sp, #16
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	60f8      	str	r0, [r7, #12]
 8010ee4:	60b9      	str	r1, [r7, #8]
 8010ee6:	4613      	mov	r3, r2
 8010ee8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010eee:	2b20      	cmp	r3, #32
 8010ef0:	d164      	bne.n	8010fbc <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d002      	beq.n	8010efe <HAL_UART_Transmit_DMA+0x22>
 8010ef8:	88fb      	ldrh	r3, [r7, #6]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d101      	bne.n	8010f02 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8010efe:	2301      	movs	r3, #1
 8010f00:	e05d      	b.n	8010fbe <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010f08:	2b01      	cmp	r3, #1
 8010f0a:	d101      	bne.n	8010f10 <HAL_UART_Transmit_DMA+0x34>
 8010f0c:	2302      	movs	r3, #2
 8010f0e:	e056      	b.n	8010fbe <HAL_UART_Transmit_DMA+0xe2>
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	2201      	movs	r2, #1
 8010f14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	68ba      	ldr	r2, [r7, #8]
 8010f1c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	88fa      	ldrh	r2, [r7, #6]
 8010f22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	88fa      	ldrh	r2, [r7, #6]
 8010f2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	2200      	movs	r2, #0
 8010f32:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	2221      	movs	r2, #33	; 0x21
 8010f38:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d02a      	beq.n	8010f98 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f46:	4a20      	ldr	r2, [pc, #128]	; (8010fc8 <HAL_UART_Transmit_DMA+0xec>)
 8010f48:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f4e:	4a1f      	ldr	r2, [pc, #124]	; (8010fcc <HAL_UART_Transmit_DMA+0xf0>)
 8010f50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f56:	4a1e      	ldr	r2, [pc, #120]	; (8010fd0 <HAL_UART_Transmit_DMA+0xf4>)
 8010f58:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f5e:	2200      	movs	r2, #0
 8010f60:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	3328      	adds	r3, #40	; 0x28
 8010f72:	461a      	mov	r2, r3
 8010f74:	88fb      	ldrh	r3, [r7, #6]
 8010f76:	f7fb fd07 	bl	800c988 <HAL_DMA_Start_IT>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d00b      	beq.n	8010f98 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	2210      	movs	r2, #16
 8010f84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2200      	movs	r2, #0
 8010f8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	2220      	movs	r2, #32
 8010f92:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8010f94:	2301      	movs	r3, #1
 8010f96:	e012      	b.n	8010fbe <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	2240      	movs	r2, #64	; 0x40
 8010f9e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	689a      	ldr	r2, [r3, #8]
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010fb6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	e000      	b.n	8010fbe <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8010fbc:	2302      	movs	r3, #2
  }
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3710      	adds	r7, #16
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}
 8010fc6:	bf00      	nop
 8010fc8:	08011bd3 	.word	0x08011bd3
 8010fcc:	08011c23 	.word	0x08011c23
 8010fd0:	08011cbf 	.word	0x08011cbf

08010fd4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b084      	sub	sp, #16
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	60f8      	str	r0, [r7, #12]
 8010fdc:	60b9      	str	r1, [r7, #8]
 8010fde:	4613      	mov	r3, r2
 8010fe0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fe6:	2b20      	cmp	r3, #32
 8010fe8:	d16c      	bne.n	80110c4 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d002      	beq.n	8010ff6 <HAL_UART_Receive_DMA+0x22>
 8010ff0:	88fb      	ldrh	r3, [r7, #6]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d101      	bne.n	8010ffa <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	e065      	b.n	80110c6 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8011000:	2b01      	cmp	r3, #1
 8011002:	d101      	bne.n	8011008 <HAL_UART_Receive_DMA+0x34>
 8011004:	2302      	movs	r3, #2
 8011006:	e05e      	b.n	80110c6 <HAL_UART_Receive_DMA+0xf2>
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	2201      	movs	r2, #1
 801100c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	68ba      	ldr	r2, [r7, #8]
 8011014:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	88fa      	ldrh	r2, [r7, #6]
 801101a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	2200      	movs	r2, #0
 8011022:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2222      	movs	r2, #34	; 0x22
 8011028:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801102e:	2b00      	cmp	r3, #0
 8011030:	d02a      	beq.n	8011088 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011036:	4a26      	ldr	r2, [pc, #152]	; (80110d0 <HAL_UART_Receive_DMA+0xfc>)
 8011038:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801103e:	4a25      	ldr	r2, [pc, #148]	; (80110d4 <HAL_UART_Receive_DMA+0x100>)
 8011040:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011046:	4a24      	ldr	r2, [pc, #144]	; (80110d8 <HAL_UART_Receive_DMA+0x104>)
 8011048:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801104e:	2200      	movs	r2, #0
 8011050:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	3324      	adds	r3, #36	; 0x24
 801105c:	4619      	mov	r1, r3
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011062:	461a      	mov	r2, r3
 8011064:	88fb      	ldrh	r3, [r7, #6]
 8011066:	f7fb fc8f 	bl	800c988 <HAL_DMA_Start_IT>
 801106a:	4603      	mov	r3, r0
 801106c:	2b00      	cmp	r3, #0
 801106e:	d00b      	beq.n	8011088 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	2210      	movs	r2, #16
 8011074:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	2200      	movs	r2, #0
 801107a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	2220      	movs	r2, #32
 8011082:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8011084:	2301      	movs	r3, #1
 8011086:	e01e      	b.n	80110c6 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	2200      	movs	r2, #0
 801108c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	681a      	ldr	r2, [r3, #0]
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801109e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	689a      	ldr	r2, [r3, #8]
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	f042 0201 	orr.w	r2, r2, #1
 80110ae:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	689a      	ldr	r2, [r3, #8]
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80110be:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80110c0:	2300      	movs	r3, #0
 80110c2:	e000      	b.n	80110c6 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80110c4:	2302      	movs	r3, #2
  }
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	3710      	adds	r7, #16
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
 80110ce:	bf00      	nop
 80110d0:	08011c3f 	.word	0x08011c3f
 80110d4:	08011ca3 	.word	0x08011ca3
 80110d8:	08011cbf 	.word	0x08011cbf

080110dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
inline void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b088      	sub	sp, #32
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	69db      	ldr	r3, [r3, #28]
 80110ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	689b      	ldr	r3, [r3, #8]
 80110fa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80110fc:	69fa      	ldr	r2, [r7, #28]
 80110fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8011102:	4013      	ands	r3, r2
 8011104:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8011106:	693b      	ldr	r3, [r7, #16]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d113      	bne.n	8011134 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	f003 0320 	and.w	r3, r3, #32
 8011112:	2b00      	cmp	r3, #0
 8011114:	d00e      	beq.n	8011134 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011116:	69bb      	ldr	r3, [r7, #24]
 8011118:	f003 0320 	and.w	r3, r3, #32
 801111c:	2b00      	cmp	r3, #0
 801111e:	d009      	beq.n	8011134 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011124:	2b00      	cmp	r3, #0
 8011126:	f000 8100 	beq.w	801132a <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	4798      	blx	r3
      }
      return;
 8011132:	e0fa      	b.n	801132a <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	2b00      	cmp	r3, #0
 8011138:	f000 80d5 	beq.w	80112e6 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801113c:	697b      	ldr	r3, [r7, #20]
 801113e:	f003 0301 	and.w	r3, r3, #1
 8011142:	2b00      	cmp	r3, #0
 8011144:	d105      	bne.n	8011152 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8011146:	69bb      	ldr	r3, [r7, #24]
 8011148:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801114c:	2b00      	cmp	r3, #0
 801114e:	f000 80ca 	beq.w	80112e6 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	f003 0301 	and.w	r3, r3, #1
 8011158:	2b00      	cmp	r3, #0
 801115a:	d00e      	beq.n	801117a <HAL_UART_IRQHandler+0x9e>
 801115c:	69bb      	ldr	r3, [r7, #24]
 801115e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011162:	2b00      	cmp	r3, #0
 8011164:	d009      	beq.n	801117a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	2201      	movs	r2, #1
 801116c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011172:	f043 0201 	orr.w	r2, r3, #1
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801117a:	69fb      	ldr	r3, [r7, #28]
 801117c:	f003 0302 	and.w	r3, r3, #2
 8011180:	2b00      	cmp	r3, #0
 8011182:	d00e      	beq.n	80111a2 <HAL_UART_IRQHandler+0xc6>
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	f003 0301 	and.w	r3, r3, #1
 801118a:	2b00      	cmp	r3, #0
 801118c:	d009      	beq.n	80111a2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	2202      	movs	r2, #2
 8011194:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801119a:	f043 0204 	orr.w	r2, r3, #4
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80111a2:	69fb      	ldr	r3, [r7, #28]
 80111a4:	f003 0304 	and.w	r3, r3, #4
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d00e      	beq.n	80111ca <HAL_UART_IRQHandler+0xee>
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	f003 0301 	and.w	r3, r3, #1
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d009      	beq.n	80111ca <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	2204      	movs	r2, #4
 80111bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111c2:	f043 0202 	orr.w	r2, r3, #2
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80111ca:	69fb      	ldr	r3, [r7, #28]
 80111cc:	f003 0308 	and.w	r3, r3, #8
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d013      	beq.n	80111fc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80111d4:	69bb      	ldr	r3, [r7, #24]
 80111d6:	f003 0320 	and.w	r3, r3, #32
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d104      	bne.n	80111e8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d009      	beq.n	80111fc <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	2208      	movs	r2, #8
 80111ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111f4:	f043 0208 	orr.w	r2, r3, #8
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80111fc:	69fb      	ldr	r3, [r7, #28]
 80111fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011202:	2b00      	cmp	r3, #0
 8011204:	d00f      	beq.n	8011226 <HAL_UART_IRQHandler+0x14a>
 8011206:	69bb      	ldr	r3, [r7, #24]
 8011208:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801120c:	2b00      	cmp	r3, #0
 801120e:	d00a      	beq.n	8011226 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011218:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801121e:	f043 0220 	orr.w	r2, r3, #32
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801122a:	2b00      	cmp	r3, #0
 801122c:	d07f      	beq.n	801132e <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801122e:	69fb      	ldr	r3, [r7, #28]
 8011230:	f003 0320 	and.w	r3, r3, #32
 8011234:	2b00      	cmp	r3, #0
 8011236:	d00c      	beq.n	8011252 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011238:	69bb      	ldr	r3, [r7, #24]
 801123a:	f003 0320 	and.w	r3, r3, #32
 801123e:	2b00      	cmp	r3, #0
 8011240:	d007      	beq.n	8011252 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011246:	2b00      	cmp	r3, #0
 8011248:	d003      	beq.n	8011252 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011256:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	689b      	ldr	r3, [r3, #8]
 801125e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011262:	2b40      	cmp	r3, #64	; 0x40
 8011264:	d004      	beq.n	8011270 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801126c:	2b00      	cmp	r3, #0
 801126e:	d031      	beq.n	80112d4 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	f000 fc8e 	bl	8011b92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	689b      	ldr	r3, [r3, #8]
 801127c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011280:	2b40      	cmp	r3, #64	; 0x40
 8011282:	d123      	bne.n	80112cc <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	689a      	ldr	r2, [r3, #8]
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011292:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011298:	2b00      	cmp	r3, #0
 801129a:	d013      	beq.n	80112c4 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112a0:	4a26      	ldr	r2, [pc, #152]	; (801133c <HAL_UART_IRQHandler+0x260>)
 80112a2:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7fb fbcd 	bl	800ca48 <HAL_DMA_Abort_IT>
 80112ae:	4603      	mov	r3, r0
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d016      	beq.n	80112e2 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112ba:	687a      	ldr	r2, [r7, #4]
 80112bc:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80112be:	4610      	mov	r0, r2
 80112c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112c2:	e00e      	b.n	80112e2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f7f7 f952 	bl	800856e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112ca:	e00a      	b.n	80112e2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f7f7 f94e 	bl	800856e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112d2:	e006      	b.n	80112e2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f7f7 f94a 	bl	800856e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2200      	movs	r2, #0
 80112de:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80112e0:	e025      	b.n	801132e <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112e2:	bf00      	nop
    return;
 80112e4:	e023      	b.n	801132e <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80112e6:	69fb      	ldr	r3, [r7, #28]
 80112e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d00d      	beq.n	801130c <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80112f0:	69bb      	ldr	r3, [r7, #24]
 80112f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d008      	beq.n	801130c <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d017      	beq.n	8011332 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	4798      	blx	r3
    }
    return;
 801130a:	e012      	b.n	8011332 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801130c:	69fb      	ldr	r3, [r7, #28]
 801130e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011312:	2b00      	cmp	r3, #0
 8011314:	d00e      	beq.n	8011334 <HAL_UART_IRQHandler+0x258>
 8011316:	69bb      	ldr	r3, [r7, #24]
 8011318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801131c:	2b00      	cmp	r3, #0
 801131e:	d009      	beq.n	8011334 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8011320:	6878      	ldr	r0, [r7, #4]
 8011322:	f000 fd1e 	bl	8011d62 <UART_EndTransmit_IT>
    return;
 8011326:	bf00      	nop
 8011328:	e004      	b.n	8011334 <HAL_UART_IRQHandler+0x258>
      return;
 801132a:	bf00      	nop
 801132c:	e002      	b.n	8011334 <HAL_UART_IRQHandler+0x258>
    return;
 801132e:	bf00      	nop
 8011330:	e000      	b.n	8011334 <HAL_UART_IRQHandler+0x258>
    return;
 8011332:	bf00      	nop
  }

}
 8011334:	3720      	adds	r7, #32
 8011336:	46bd      	mov	sp, r7
 8011338:	bd80      	pop	{r7, pc}
 801133a:	bf00      	nop
 801133c:	08011d37 	.word	0x08011d37

08011340 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011340:	b480      	push	{r7}
 8011342:	b083      	sub	sp, #12
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8011348:	bf00      	nop
 801134a:	370c      	adds	r7, #12
 801134c:	46bd      	mov	sp, r7
 801134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011352:	4770      	bx	lr

08011354 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8011354:	b480      	push	{r7}
 8011356:	b083      	sub	sp, #12
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801135c:	bf00      	nop
 801135e:	370c      	adds	r7, #12
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr

08011368 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011368:	b480      	push	{r7}
 801136a:	b083      	sub	sp, #12
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8011370:	bf00      	nop
 8011372:	370c      	adds	r7, #12
 8011374:	46bd      	mov	sp, r7
 8011376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137a:	4770      	bx	lr

0801137c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b088      	sub	sp, #32
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8011384:	2300      	movs	r3, #0
 8011386:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8011388:	2300      	movs	r3, #0
 801138a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	689a      	ldr	r2, [r3, #8]
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	691b      	ldr	r3, [r3, #16]
 8011394:	431a      	orrs	r2, r3
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	695b      	ldr	r3, [r3, #20]
 801139a:	431a      	orrs	r2, r3
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	69db      	ldr	r3, [r3, #28]
 80113a0:	4313      	orrs	r3, r2
 80113a2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	681a      	ldr	r2, [r3, #0]
 80113aa:	4bb1      	ldr	r3, [pc, #708]	; (8011670 <UART_SetConfig+0x2f4>)
 80113ac:	4013      	ands	r3, r2
 80113ae:	687a      	ldr	r2, [r7, #4]
 80113b0:	6812      	ldr	r2, [r2, #0]
 80113b2:	6939      	ldr	r1, [r7, #16]
 80113b4:	430b      	orrs	r3, r1
 80113b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	68da      	ldr	r2, [r3, #12]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	430a      	orrs	r2, r1
 80113cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	699b      	ldr	r3, [r3, #24]
 80113d2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	6a1b      	ldr	r3, [r3, #32]
 80113d8:	693a      	ldr	r2, [r7, #16]
 80113da:	4313      	orrs	r3, r2
 80113dc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	689b      	ldr	r3, [r3, #8]
 80113e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	693a      	ldr	r2, [r7, #16]
 80113ee:	430a      	orrs	r2, r1
 80113f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	4a9f      	ldr	r2, [pc, #636]	; (8011674 <UART_SetConfig+0x2f8>)
 80113f8:	4293      	cmp	r3, r2
 80113fa:	d121      	bne.n	8011440 <UART_SetConfig+0xc4>
 80113fc:	4b9e      	ldr	r3, [pc, #632]	; (8011678 <UART_SetConfig+0x2fc>)
 80113fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011402:	f003 0303 	and.w	r3, r3, #3
 8011406:	2b03      	cmp	r3, #3
 8011408:	d816      	bhi.n	8011438 <UART_SetConfig+0xbc>
 801140a:	a201      	add	r2, pc, #4	; (adr r2, 8011410 <UART_SetConfig+0x94>)
 801140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011410:	08011421 	.word	0x08011421
 8011414:	0801142d 	.word	0x0801142d
 8011418:	08011427 	.word	0x08011427
 801141c:	08011433 	.word	0x08011433
 8011420:	2301      	movs	r3, #1
 8011422:	77fb      	strb	r3, [r7, #31]
 8011424:	e151      	b.n	80116ca <UART_SetConfig+0x34e>
 8011426:	2302      	movs	r3, #2
 8011428:	77fb      	strb	r3, [r7, #31]
 801142a:	e14e      	b.n	80116ca <UART_SetConfig+0x34e>
 801142c:	2304      	movs	r3, #4
 801142e:	77fb      	strb	r3, [r7, #31]
 8011430:	e14b      	b.n	80116ca <UART_SetConfig+0x34e>
 8011432:	2308      	movs	r3, #8
 8011434:	77fb      	strb	r3, [r7, #31]
 8011436:	e148      	b.n	80116ca <UART_SetConfig+0x34e>
 8011438:	2310      	movs	r3, #16
 801143a:	77fb      	strb	r3, [r7, #31]
 801143c:	bf00      	nop
 801143e:	e144      	b.n	80116ca <UART_SetConfig+0x34e>
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	4a8d      	ldr	r2, [pc, #564]	; (801167c <UART_SetConfig+0x300>)
 8011446:	4293      	cmp	r3, r2
 8011448:	d134      	bne.n	80114b4 <UART_SetConfig+0x138>
 801144a:	4b8b      	ldr	r3, [pc, #556]	; (8011678 <UART_SetConfig+0x2fc>)
 801144c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011450:	f003 030c 	and.w	r3, r3, #12
 8011454:	2b0c      	cmp	r3, #12
 8011456:	d829      	bhi.n	80114ac <UART_SetConfig+0x130>
 8011458:	a201      	add	r2, pc, #4	; (adr r2, 8011460 <UART_SetConfig+0xe4>)
 801145a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801145e:	bf00      	nop
 8011460:	08011495 	.word	0x08011495
 8011464:	080114ad 	.word	0x080114ad
 8011468:	080114ad 	.word	0x080114ad
 801146c:	080114ad 	.word	0x080114ad
 8011470:	080114a1 	.word	0x080114a1
 8011474:	080114ad 	.word	0x080114ad
 8011478:	080114ad 	.word	0x080114ad
 801147c:	080114ad 	.word	0x080114ad
 8011480:	0801149b 	.word	0x0801149b
 8011484:	080114ad 	.word	0x080114ad
 8011488:	080114ad 	.word	0x080114ad
 801148c:	080114ad 	.word	0x080114ad
 8011490:	080114a7 	.word	0x080114a7
 8011494:	2300      	movs	r3, #0
 8011496:	77fb      	strb	r3, [r7, #31]
 8011498:	e117      	b.n	80116ca <UART_SetConfig+0x34e>
 801149a:	2302      	movs	r3, #2
 801149c:	77fb      	strb	r3, [r7, #31]
 801149e:	e114      	b.n	80116ca <UART_SetConfig+0x34e>
 80114a0:	2304      	movs	r3, #4
 80114a2:	77fb      	strb	r3, [r7, #31]
 80114a4:	e111      	b.n	80116ca <UART_SetConfig+0x34e>
 80114a6:	2308      	movs	r3, #8
 80114a8:	77fb      	strb	r3, [r7, #31]
 80114aa:	e10e      	b.n	80116ca <UART_SetConfig+0x34e>
 80114ac:	2310      	movs	r3, #16
 80114ae:	77fb      	strb	r3, [r7, #31]
 80114b0:	bf00      	nop
 80114b2:	e10a      	b.n	80116ca <UART_SetConfig+0x34e>
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	4a71      	ldr	r2, [pc, #452]	; (8011680 <UART_SetConfig+0x304>)
 80114ba:	4293      	cmp	r3, r2
 80114bc:	d120      	bne.n	8011500 <UART_SetConfig+0x184>
 80114be:	4b6e      	ldr	r3, [pc, #440]	; (8011678 <UART_SetConfig+0x2fc>)
 80114c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80114c8:	2b10      	cmp	r3, #16
 80114ca:	d00f      	beq.n	80114ec <UART_SetConfig+0x170>
 80114cc:	2b10      	cmp	r3, #16
 80114ce:	d802      	bhi.n	80114d6 <UART_SetConfig+0x15a>
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d005      	beq.n	80114e0 <UART_SetConfig+0x164>
 80114d4:	e010      	b.n	80114f8 <UART_SetConfig+0x17c>
 80114d6:	2b20      	cmp	r3, #32
 80114d8:	d005      	beq.n	80114e6 <UART_SetConfig+0x16a>
 80114da:	2b30      	cmp	r3, #48	; 0x30
 80114dc:	d009      	beq.n	80114f2 <UART_SetConfig+0x176>
 80114de:	e00b      	b.n	80114f8 <UART_SetConfig+0x17c>
 80114e0:	2300      	movs	r3, #0
 80114e2:	77fb      	strb	r3, [r7, #31]
 80114e4:	e0f1      	b.n	80116ca <UART_SetConfig+0x34e>
 80114e6:	2302      	movs	r3, #2
 80114e8:	77fb      	strb	r3, [r7, #31]
 80114ea:	e0ee      	b.n	80116ca <UART_SetConfig+0x34e>
 80114ec:	2304      	movs	r3, #4
 80114ee:	77fb      	strb	r3, [r7, #31]
 80114f0:	e0eb      	b.n	80116ca <UART_SetConfig+0x34e>
 80114f2:	2308      	movs	r3, #8
 80114f4:	77fb      	strb	r3, [r7, #31]
 80114f6:	e0e8      	b.n	80116ca <UART_SetConfig+0x34e>
 80114f8:	2310      	movs	r3, #16
 80114fa:	77fb      	strb	r3, [r7, #31]
 80114fc:	bf00      	nop
 80114fe:	e0e4      	b.n	80116ca <UART_SetConfig+0x34e>
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	4a5f      	ldr	r2, [pc, #380]	; (8011684 <UART_SetConfig+0x308>)
 8011506:	4293      	cmp	r3, r2
 8011508:	d120      	bne.n	801154c <UART_SetConfig+0x1d0>
 801150a:	4b5b      	ldr	r3, [pc, #364]	; (8011678 <UART_SetConfig+0x2fc>)
 801150c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011510:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011514:	2b40      	cmp	r3, #64	; 0x40
 8011516:	d00f      	beq.n	8011538 <UART_SetConfig+0x1bc>
 8011518:	2b40      	cmp	r3, #64	; 0x40
 801151a:	d802      	bhi.n	8011522 <UART_SetConfig+0x1a6>
 801151c:	2b00      	cmp	r3, #0
 801151e:	d005      	beq.n	801152c <UART_SetConfig+0x1b0>
 8011520:	e010      	b.n	8011544 <UART_SetConfig+0x1c8>
 8011522:	2b80      	cmp	r3, #128	; 0x80
 8011524:	d005      	beq.n	8011532 <UART_SetConfig+0x1b6>
 8011526:	2bc0      	cmp	r3, #192	; 0xc0
 8011528:	d009      	beq.n	801153e <UART_SetConfig+0x1c2>
 801152a:	e00b      	b.n	8011544 <UART_SetConfig+0x1c8>
 801152c:	2300      	movs	r3, #0
 801152e:	77fb      	strb	r3, [r7, #31]
 8011530:	e0cb      	b.n	80116ca <UART_SetConfig+0x34e>
 8011532:	2302      	movs	r3, #2
 8011534:	77fb      	strb	r3, [r7, #31]
 8011536:	e0c8      	b.n	80116ca <UART_SetConfig+0x34e>
 8011538:	2304      	movs	r3, #4
 801153a:	77fb      	strb	r3, [r7, #31]
 801153c:	e0c5      	b.n	80116ca <UART_SetConfig+0x34e>
 801153e:	2308      	movs	r3, #8
 8011540:	77fb      	strb	r3, [r7, #31]
 8011542:	e0c2      	b.n	80116ca <UART_SetConfig+0x34e>
 8011544:	2310      	movs	r3, #16
 8011546:	77fb      	strb	r3, [r7, #31]
 8011548:	bf00      	nop
 801154a:	e0be      	b.n	80116ca <UART_SetConfig+0x34e>
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	4a4d      	ldr	r2, [pc, #308]	; (8011688 <UART_SetConfig+0x30c>)
 8011552:	4293      	cmp	r3, r2
 8011554:	d124      	bne.n	80115a0 <UART_SetConfig+0x224>
 8011556:	4b48      	ldr	r3, [pc, #288]	; (8011678 <UART_SetConfig+0x2fc>)
 8011558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801155c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011564:	d012      	beq.n	801158c <UART_SetConfig+0x210>
 8011566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801156a:	d802      	bhi.n	8011572 <UART_SetConfig+0x1f6>
 801156c:	2b00      	cmp	r3, #0
 801156e:	d007      	beq.n	8011580 <UART_SetConfig+0x204>
 8011570:	e012      	b.n	8011598 <UART_SetConfig+0x21c>
 8011572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011576:	d006      	beq.n	8011586 <UART_SetConfig+0x20a>
 8011578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801157c:	d009      	beq.n	8011592 <UART_SetConfig+0x216>
 801157e:	e00b      	b.n	8011598 <UART_SetConfig+0x21c>
 8011580:	2300      	movs	r3, #0
 8011582:	77fb      	strb	r3, [r7, #31]
 8011584:	e0a1      	b.n	80116ca <UART_SetConfig+0x34e>
 8011586:	2302      	movs	r3, #2
 8011588:	77fb      	strb	r3, [r7, #31]
 801158a:	e09e      	b.n	80116ca <UART_SetConfig+0x34e>
 801158c:	2304      	movs	r3, #4
 801158e:	77fb      	strb	r3, [r7, #31]
 8011590:	e09b      	b.n	80116ca <UART_SetConfig+0x34e>
 8011592:	2308      	movs	r3, #8
 8011594:	77fb      	strb	r3, [r7, #31]
 8011596:	e098      	b.n	80116ca <UART_SetConfig+0x34e>
 8011598:	2310      	movs	r3, #16
 801159a:	77fb      	strb	r3, [r7, #31]
 801159c:	bf00      	nop
 801159e:	e094      	b.n	80116ca <UART_SetConfig+0x34e>
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	4a39      	ldr	r2, [pc, #228]	; (801168c <UART_SetConfig+0x310>)
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d124      	bne.n	80115f4 <UART_SetConfig+0x278>
 80115aa:	4b33      	ldr	r3, [pc, #204]	; (8011678 <UART_SetConfig+0x2fc>)
 80115ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80115b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80115b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80115b8:	d012      	beq.n	80115e0 <UART_SetConfig+0x264>
 80115ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80115be:	d802      	bhi.n	80115c6 <UART_SetConfig+0x24a>
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d007      	beq.n	80115d4 <UART_SetConfig+0x258>
 80115c4:	e012      	b.n	80115ec <UART_SetConfig+0x270>
 80115c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80115ca:	d006      	beq.n	80115da <UART_SetConfig+0x25e>
 80115cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80115d0:	d009      	beq.n	80115e6 <UART_SetConfig+0x26a>
 80115d2:	e00b      	b.n	80115ec <UART_SetConfig+0x270>
 80115d4:	2301      	movs	r3, #1
 80115d6:	77fb      	strb	r3, [r7, #31]
 80115d8:	e077      	b.n	80116ca <UART_SetConfig+0x34e>
 80115da:	2302      	movs	r3, #2
 80115dc:	77fb      	strb	r3, [r7, #31]
 80115de:	e074      	b.n	80116ca <UART_SetConfig+0x34e>
 80115e0:	2304      	movs	r3, #4
 80115e2:	77fb      	strb	r3, [r7, #31]
 80115e4:	e071      	b.n	80116ca <UART_SetConfig+0x34e>
 80115e6:	2308      	movs	r3, #8
 80115e8:	77fb      	strb	r3, [r7, #31]
 80115ea:	e06e      	b.n	80116ca <UART_SetConfig+0x34e>
 80115ec:	2310      	movs	r3, #16
 80115ee:	77fb      	strb	r3, [r7, #31]
 80115f0:	bf00      	nop
 80115f2:	e06a      	b.n	80116ca <UART_SetConfig+0x34e>
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	4a25      	ldr	r2, [pc, #148]	; (8011690 <UART_SetConfig+0x314>)
 80115fa:	4293      	cmp	r3, r2
 80115fc:	d124      	bne.n	8011648 <UART_SetConfig+0x2cc>
 80115fe:	4b1e      	ldr	r3, [pc, #120]	; (8011678 <UART_SetConfig+0x2fc>)
 8011600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011604:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8011608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801160c:	d012      	beq.n	8011634 <UART_SetConfig+0x2b8>
 801160e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011612:	d802      	bhi.n	801161a <UART_SetConfig+0x29e>
 8011614:	2b00      	cmp	r3, #0
 8011616:	d007      	beq.n	8011628 <UART_SetConfig+0x2ac>
 8011618:	e012      	b.n	8011640 <UART_SetConfig+0x2c4>
 801161a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801161e:	d006      	beq.n	801162e <UART_SetConfig+0x2b2>
 8011620:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011624:	d009      	beq.n	801163a <UART_SetConfig+0x2be>
 8011626:	e00b      	b.n	8011640 <UART_SetConfig+0x2c4>
 8011628:	2300      	movs	r3, #0
 801162a:	77fb      	strb	r3, [r7, #31]
 801162c:	e04d      	b.n	80116ca <UART_SetConfig+0x34e>
 801162e:	2302      	movs	r3, #2
 8011630:	77fb      	strb	r3, [r7, #31]
 8011632:	e04a      	b.n	80116ca <UART_SetConfig+0x34e>
 8011634:	2304      	movs	r3, #4
 8011636:	77fb      	strb	r3, [r7, #31]
 8011638:	e047      	b.n	80116ca <UART_SetConfig+0x34e>
 801163a:	2308      	movs	r3, #8
 801163c:	77fb      	strb	r3, [r7, #31]
 801163e:	e044      	b.n	80116ca <UART_SetConfig+0x34e>
 8011640:	2310      	movs	r3, #16
 8011642:	77fb      	strb	r3, [r7, #31]
 8011644:	bf00      	nop
 8011646:	e040      	b.n	80116ca <UART_SetConfig+0x34e>
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	4a11      	ldr	r2, [pc, #68]	; (8011694 <UART_SetConfig+0x318>)
 801164e:	4293      	cmp	r3, r2
 8011650:	d139      	bne.n	80116c6 <UART_SetConfig+0x34a>
 8011652:	4b09      	ldr	r3, [pc, #36]	; (8011678 <UART_SetConfig+0x2fc>)
 8011654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801165c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011660:	d027      	beq.n	80116b2 <UART_SetConfig+0x336>
 8011662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011666:	d817      	bhi.n	8011698 <UART_SetConfig+0x31c>
 8011668:	2b00      	cmp	r3, #0
 801166a:	d01c      	beq.n	80116a6 <UART_SetConfig+0x32a>
 801166c:	e027      	b.n	80116be <UART_SetConfig+0x342>
 801166e:	bf00      	nop
 8011670:	efff69f3 	.word	0xefff69f3
 8011674:	40011000 	.word	0x40011000
 8011678:	40023800 	.word	0x40023800
 801167c:	40004400 	.word	0x40004400
 8011680:	40004800 	.word	0x40004800
 8011684:	40004c00 	.word	0x40004c00
 8011688:	40005000 	.word	0x40005000
 801168c:	40011400 	.word	0x40011400
 8011690:	40007800 	.word	0x40007800
 8011694:	40007c00 	.word	0x40007c00
 8011698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801169c:	d006      	beq.n	80116ac <UART_SetConfig+0x330>
 801169e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80116a2:	d009      	beq.n	80116b8 <UART_SetConfig+0x33c>
 80116a4:	e00b      	b.n	80116be <UART_SetConfig+0x342>
 80116a6:	2300      	movs	r3, #0
 80116a8:	77fb      	strb	r3, [r7, #31]
 80116aa:	e00e      	b.n	80116ca <UART_SetConfig+0x34e>
 80116ac:	2302      	movs	r3, #2
 80116ae:	77fb      	strb	r3, [r7, #31]
 80116b0:	e00b      	b.n	80116ca <UART_SetConfig+0x34e>
 80116b2:	2304      	movs	r3, #4
 80116b4:	77fb      	strb	r3, [r7, #31]
 80116b6:	e008      	b.n	80116ca <UART_SetConfig+0x34e>
 80116b8:	2308      	movs	r3, #8
 80116ba:	77fb      	strb	r3, [r7, #31]
 80116bc:	e005      	b.n	80116ca <UART_SetConfig+0x34e>
 80116be:	2310      	movs	r3, #16
 80116c0:	77fb      	strb	r3, [r7, #31]
 80116c2:	bf00      	nop
 80116c4:	e001      	b.n	80116ca <UART_SetConfig+0x34e>
 80116c6:	2310      	movs	r3, #16
 80116c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	69db      	ldr	r3, [r3, #28]
 80116ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80116d2:	d17f      	bne.n	80117d4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80116d4:	7ffb      	ldrb	r3, [r7, #31]
 80116d6:	2b08      	cmp	r3, #8
 80116d8:	d85c      	bhi.n	8011794 <UART_SetConfig+0x418>
 80116da:	a201      	add	r2, pc, #4	; (adr r2, 80116e0 <UART_SetConfig+0x364>)
 80116dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116e0:	08011705 	.word	0x08011705
 80116e4:	08011725 	.word	0x08011725
 80116e8:	08011745 	.word	0x08011745
 80116ec:	08011795 	.word	0x08011795
 80116f0:	0801175d 	.word	0x0801175d
 80116f4:	08011795 	.word	0x08011795
 80116f8:	08011795 	.word	0x08011795
 80116fc:	08011795 	.word	0x08011795
 8011700:	0801177d 	.word	0x0801177d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011704:	f7fc fabc 	bl	800dc80 <HAL_RCC_GetPCLK1Freq>
 8011708:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	005a      	lsls	r2, r3, #1
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	685b      	ldr	r3, [r3, #4]
 8011712:	085b      	lsrs	r3, r3, #1
 8011714:	441a      	add	r2, r3
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	685b      	ldr	r3, [r3, #4]
 801171a:	fbb2 f3f3 	udiv	r3, r2, r3
 801171e:	b29b      	uxth	r3, r3
 8011720:	61bb      	str	r3, [r7, #24]
        break;
 8011722:	e03a      	b.n	801179a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011724:	f7fc fac0 	bl	800dca8 <HAL_RCC_GetPCLK2Freq>
 8011728:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	005a      	lsls	r2, r3, #1
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	685b      	ldr	r3, [r3, #4]
 8011732:	085b      	lsrs	r3, r3, #1
 8011734:	441a      	add	r2, r3
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	fbb2 f3f3 	udiv	r3, r2, r3
 801173e:	b29b      	uxth	r3, r3
 8011740:	61bb      	str	r3, [r7, #24]
        break;
 8011742:	e02a      	b.n	801179a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	685b      	ldr	r3, [r3, #4]
 8011748:	085a      	lsrs	r2, r3, #1
 801174a:	4b5f      	ldr	r3, [pc, #380]	; (80118c8 <UART_SetConfig+0x54c>)
 801174c:	4413      	add	r3, r2
 801174e:	687a      	ldr	r2, [r7, #4]
 8011750:	6852      	ldr	r2, [r2, #4]
 8011752:	fbb3 f3f2 	udiv	r3, r3, r2
 8011756:	b29b      	uxth	r3, r3
 8011758:	61bb      	str	r3, [r7, #24]
        break;
 801175a:	e01e      	b.n	801179a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801175c:	f7fc f9d2 	bl	800db04 <HAL_RCC_GetSysClockFreq>
 8011760:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	005a      	lsls	r2, r3, #1
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	685b      	ldr	r3, [r3, #4]
 801176a:	085b      	lsrs	r3, r3, #1
 801176c:	441a      	add	r2, r3
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	685b      	ldr	r3, [r3, #4]
 8011772:	fbb2 f3f3 	udiv	r3, r2, r3
 8011776:	b29b      	uxth	r3, r3
 8011778:	61bb      	str	r3, [r7, #24]
        break;
 801177a:	e00e      	b.n	801179a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	085b      	lsrs	r3, r3, #1
 8011782:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	685b      	ldr	r3, [r3, #4]
 801178a:	fbb2 f3f3 	udiv	r3, r2, r3
 801178e:	b29b      	uxth	r3, r3
 8011790:	61bb      	str	r3, [r7, #24]
        break;
 8011792:	e002      	b.n	801179a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8011794:	2301      	movs	r3, #1
 8011796:	75fb      	strb	r3, [r7, #23]
        break;
 8011798:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801179a:	69bb      	ldr	r3, [r7, #24]
 801179c:	2b0f      	cmp	r3, #15
 801179e:	d916      	bls.n	80117ce <UART_SetConfig+0x452>
 80117a0:	69bb      	ldr	r3, [r7, #24]
 80117a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117a6:	d212      	bcs.n	80117ce <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80117a8:	69bb      	ldr	r3, [r7, #24]
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	f023 030f 	bic.w	r3, r3, #15
 80117b0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80117b2:	69bb      	ldr	r3, [r7, #24]
 80117b4:	085b      	lsrs	r3, r3, #1
 80117b6:	b29b      	uxth	r3, r3
 80117b8:	f003 0307 	and.w	r3, r3, #7
 80117bc:	b29a      	uxth	r2, r3
 80117be:	897b      	ldrh	r3, [r7, #10]
 80117c0:	4313      	orrs	r3, r2
 80117c2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	897a      	ldrh	r2, [r7, #10]
 80117ca:	60da      	str	r2, [r3, #12]
 80117cc:	e070      	b.n	80118b0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80117ce:	2301      	movs	r3, #1
 80117d0:	75fb      	strb	r3, [r7, #23]
 80117d2:	e06d      	b.n	80118b0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80117d4:	7ffb      	ldrb	r3, [r7, #31]
 80117d6:	2b08      	cmp	r3, #8
 80117d8:	d859      	bhi.n	801188e <UART_SetConfig+0x512>
 80117da:	a201      	add	r2, pc, #4	; (adr r2, 80117e0 <UART_SetConfig+0x464>)
 80117dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117e0:	08011805 	.word	0x08011805
 80117e4:	08011823 	.word	0x08011823
 80117e8:	08011841 	.word	0x08011841
 80117ec:	0801188f 	.word	0x0801188f
 80117f0:	08011859 	.word	0x08011859
 80117f4:	0801188f 	.word	0x0801188f
 80117f8:	0801188f 	.word	0x0801188f
 80117fc:	0801188f 	.word	0x0801188f
 8011800:	08011877 	.word	0x08011877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011804:	f7fc fa3c 	bl	800dc80 <HAL_RCC_GetPCLK1Freq>
 8011808:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	685b      	ldr	r3, [r3, #4]
 801180e:	085a      	lsrs	r2, r3, #1
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	441a      	add	r2, r3
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	685b      	ldr	r3, [r3, #4]
 8011818:	fbb2 f3f3 	udiv	r3, r2, r3
 801181c:	b29b      	uxth	r3, r3
 801181e:	61bb      	str	r3, [r7, #24]
        break;
 8011820:	e038      	b.n	8011894 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011822:	f7fc fa41 	bl	800dca8 <HAL_RCC_GetPCLK2Freq>
 8011826:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	685b      	ldr	r3, [r3, #4]
 801182c:	085a      	lsrs	r2, r3, #1
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	441a      	add	r2, r3
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	685b      	ldr	r3, [r3, #4]
 8011836:	fbb2 f3f3 	udiv	r3, r2, r3
 801183a:	b29b      	uxth	r3, r3
 801183c:	61bb      	str	r3, [r7, #24]
        break;
 801183e:	e029      	b.n	8011894 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	685b      	ldr	r3, [r3, #4]
 8011844:	085a      	lsrs	r2, r3, #1
 8011846:	4b21      	ldr	r3, [pc, #132]	; (80118cc <UART_SetConfig+0x550>)
 8011848:	4413      	add	r3, r2
 801184a:	687a      	ldr	r2, [r7, #4]
 801184c:	6852      	ldr	r2, [r2, #4]
 801184e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011852:	b29b      	uxth	r3, r3
 8011854:	61bb      	str	r3, [r7, #24]
        break;
 8011856:	e01d      	b.n	8011894 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011858:	f7fc f954 	bl	800db04 <HAL_RCC_GetSysClockFreq>
 801185c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	685b      	ldr	r3, [r3, #4]
 8011862:	085a      	lsrs	r2, r3, #1
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	441a      	add	r2, r3
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	685b      	ldr	r3, [r3, #4]
 801186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011870:	b29b      	uxth	r3, r3
 8011872:	61bb      	str	r3, [r7, #24]
        break;
 8011874:	e00e      	b.n	8011894 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	085b      	lsrs	r3, r3, #1
 801187c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	685b      	ldr	r3, [r3, #4]
 8011884:	fbb2 f3f3 	udiv	r3, r2, r3
 8011888:	b29b      	uxth	r3, r3
 801188a:	61bb      	str	r3, [r7, #24]
        break;
 801188c:	e002      	b.n	8011894 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 801188e:	2301      	movs	r3, #1
 8011890:	75fb      	strb	r3, [r7, #23]
        break;
 8011892:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011894:	69bb      	ldr	r3, [r7, #24]
 8011896:	2b0f      	cmp	r3, #15
 8011898:	d908      	bls.n	80118ac <UART_SetConfig+0x530>
 801189a:	69bb      	ldr	r3, [r7, #24]
 801189c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118a0:	d204      	bcs.n	80118ac <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	69ba      	ldr	r2, [r7, #24]
 80118a8:	60da      	str	r2, [r3, #12]
 80118aa:	e001      	b.n	80118b0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80118ac:	2301      	movs	r3, #1
 80118ae:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2200      	movs	r2, #0
 80118b4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2200      	movs	r2, #0
 80118ba:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80118bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80118be:	4618      	mov	r0, r3
 80118c0:	3720      	adds	r7, #32
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}
 80118c6:	bf00      	nop
 80118c8:	01e84800 	.word	0x01e84800
 80118cc:	00f42400 	.word	0x00f42400

080118d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80118d0:	b480      	push	{r7}
 80118d2:	b083      	sub	sp, #12
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118dc:	f003 0301 	and.w	r3, r3, #1
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d00a      	beq.n	80118fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	685b      	ldr	r3, [r3, #4]
 80118ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	430a      	orrs	r2, r1
 80118f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118fe:	f003 0302 	and.w	r3, r3, #2
 8011902:	2b00      	cmp	r3, #0
 8011904:	d00a      	beq.n	801191c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	685b      	ldr	r3, [r3, #4]
 801190c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	430a      	orrs	r2, r1
 801191a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011920:	f003 0304 	and.w	r3, r3, #4
 8011924:	2b00      	cmp	r3, #0
 8011926:	d00a      	beq.n	801193e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	430a      	orrs	r2, r1
 801193c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011942:	f003 0308 	and.w	r3, r3, #8
 8011946:	2b00      	cmp	r3, #0
 8011948:	d00a      	beq.n	8011960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	430a      	orrs	r2, r1
 801195e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011964:	f003 0310 	and.w	r3, r3, #16
 8011968:	2b00      	cmp	r3, #0
 801196a:	d00a      	beq.n	8011982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	689b      	ldr	r3, [r3, #8]
 8011972:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	430a      	orrs	r2, r1
 8011980:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011986:	f003 0320 	and.w	r3, r3, #32
 801198a:	2b00      	cmp	r3, #0
 801198c:	d00a      	beq.n	80119a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	689b      	ldr	r3, [r3, #8]
 8011994:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	430a      	orrs	r2, r1
 80119a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d01a      	beq.n	80119e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	685b      	ldr	r3, [r3, #4]
 80119b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	430a      	orrs	r2, r1
 80119c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80119ce:	d10a      	bne.n	80119e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	430a      	orrs	r2, r1
 80119e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d00a      	beq.n	8011a08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	685b      	ldr	r3, [r3, #4]
 80119f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	430a      	orrs	r2, r1
 8011a06:	605a      	str	r2, [r3, #4]
  }
}
 8011a08:	bf00      	nop
 8011a0a:	370c      	adds	r7, #12
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a12:	4770      	bx	lr

08011a14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b086      	sub	sp, #24
 8011a18:	af02      	add	r7, sp, #8
 8011a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8011a22:	f7f9 ffe7 	bl	800b9f4 <HAL_GetTick>
 8011a26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f003 0308 	and.w	r3, r3, #8
 8011a32:	2b08      	cmp	r3, #8
 8011a34:	d10e      	bne.n	8011a54 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a3a:	9300      	str	r3, [sp, #0]
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	2200      	movs	r2, #0
 8011a40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f000 f814 	bl	8011a72 <UART_WaitOnFlagUntilTimeout>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d001      	beq.n	8011a54 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a50:	2303      	movs	r3, #3
 8011a52:	e00a      	b.n	8011a6a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2220      	movs	r2, #32
 8011a58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2220      	movs	r2, #32
 8011a5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2200      	movs	r2, #0
 8011a64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8011a68:	2300      	movs	r3, #0
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	3710      	adds	r7, #16
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}

08011a72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011a72:	b580      	push	{r7, lr}
 8011a74:	b084      	sub	sp, #16
 8011a76:	af00      	add	r7, sp, #0
 8011a78:	60f8      	str	r0, [r7, #12]
 8011a7a:	60b9      	str	r1, [r7, #8]
 8011a7c:	603b      	str	r3, [r7, #0]
 8011a7e:	4613      	mov	r3, r2
 8011a80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a82:	e05d      	b.n	8011b40 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011a84:	69bb      	ldr	r3, [r7, #24]
 8011a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a8a:	d059      	beq.n	8011b40 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011a8c:	f7f9 ffb2 	bl	800b9f4 <HAL_GetTick>
 8011a90:	4602      	mov	r2, r0
 8011a92:	683b      	ldr	r3, [r7, #0]
 8011a94:	1ad3      	subs	r3, r2, r3
 8011a96:	69ba      	ldr	r2, [r7, #24]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d302      	bcc.n	8011aa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8011a9c:	69bb      	ldr	r3, [r7, #24]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d11b      	bne.n	8011ada <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	681a      	ldr	r2, [r3, #0]
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011ab0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	689a      	ldr	r2, [r3, #8]
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	f022 0201 	bic.w	r2, r2, #1
 8011ac0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	2220      	movs	r2, #32
 8011ac6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	2220      	movs	r2, #32
 8011acc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8011ad6:	2303      	movs	r3, #3
 8011ad8:	e042      	b.n	8011b60 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	f003 0304 	and.w	r3, r3, #4
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d02b      	beq.n	8011b40 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	69db      	ldr	r3, [r3, #28]
 8011aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011af6:	d123      	bne.n	8011b40 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011b00:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	681a      	ldr	r2, [r3, #0]
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011b10:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	689a      	ldr	r2, [r3, #8]
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	f022 0201 	bic.w	r2, r2, #1
 8011b20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	2220      	movs	r2, #32
 8011b26:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2220      	movs	r2, #32
 8011b2c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	2220      	movs	r2, #32
 8011b32:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	2200      	movs	r2, #0
 8011b38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8011b3c:	2303      	movs	r3, #3
 8011b3e:	e00f      	b.n	8011b60 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	69da      	ldr	r2, [r3, #28]
 8011b46:	68bb      	ldr	r3, [r7, #8]
 8011b48:	4013      	ands	r3, r2
 8011b4a:	68ba      	ldr	r2, [r7, #8]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	bf0c      	ite	eq
 8011b50:	2301      	moveq	r3, #1
 8011b52:	2300      	movne	r3, #0
 8011b54:	b2db      	uxtb	r3, r3
 8011b56:	461a      	mov	r2, r3
 8011b58:	79fb      	ldrb	r3, [r7, #7]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d092      	beq.n	8011a84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011b5e:	2300      	movs	r3, #0
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3710      	adds	r7, #16
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011b68:	b480      	push	{r7}
 8011b6a:	b083      	sub	sp, #12
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	681a      	ldr	r2, [r3, #0]
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8011b7e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2220      	movs	r2, #32
 8011b84:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011b86:	bf00      	nop
 8011b88:	370c      	adds	r7, #12
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b90:	4770      	bx	lr

08011b92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011b92:	b480      	push	{r7}
 8011b94:	b083      	sub	sp, #12
 8011b96:	af00      	add	r7, sp, #0
 8011b98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	681a      	ldr	r2, [r3, #0]
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8011ba8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	689a      	ldr	r2, [r3, #8]
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	f022 0201 	bic.w	r2, r2, #1
 8011bb8:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2220      	movs	r2, #32
 8011bbe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	661a      	str	r2, [r3, #96]	; 0x60
}
 8011bc6:	bf00      	nop
 8011bc8:	370c      	adds	r7, #12
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd0:	4770      	bx	lr

08011bd2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011bd2:	b580      	push	{r7, lr}
 8011bd4:	b084      	sub	sp, #16
 8011bd6:	af00      	add	r7, sp, #0
 8011bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bde:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	69db      	ldr	r3, [r3, #28]
 8011be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011be8:	d014      	beq.n	8011c14 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	2200      	movs	r2, #0
 8011bee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	689a      	ldr	r2, [r3, #8]
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011c00:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	681a      	ldr	r2, [r3, #0]
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011c10:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011c12:	e002      	b.n	8011c1a <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8011c14:	68f8      	ldr	r0, [r7, #12]
 8011c16:	f7f6 fc9f 	bl	8008558 <HAL_UART_TxCpltCallback>
}
 8011c1a:	bf00      	nop
 8011c1c:	3710      	adds	r7, #16
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}

08011c22 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011c22:	b580      	push	{r7, lr}
 8011c24:	b084      	sub	sp, #16
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c2e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011c30:	68f8      	ldr	r0, [r7, #12]
 8011c32:	f7ff fb85 	bl	8011340 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011c36:	bf00      	nop
 8011c38:	3710      	adds	r7, #16
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b084      	sub	sp, #16
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c4a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	69db      	ldr	r3, [r3, #28]
 8011c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c54:	d01e      	beq.n	8011c94 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	2200      	movs	r2, #0
 8011c5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	681a      	ldr	r2, [r3, #0]
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011c6c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	689a      	ldr	r2, [r3, #8]
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	f022 0201 	bic.w	r2, r2, #1
 8011c7c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	689a      	ldr	r2, [r3, #8]
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011c8c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	2220      	movs	r2, #32
 8011c92:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8011c94:	68f8      	ldr	r0, [r7, #12]
 8011c96:	f7ff fb5d 	bl	8011354 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011c9a:	bf00      	nop
 8011c9c:	3710      	adds	r7, #16
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}

08011ca2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011ca2:	b580      	push	{r7, lr}
 8011ca4:	b084      	sub	sp, #16
 8011ca6:	af00      	add	r7, sp, #0
 8011ca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8011cb0:	68f8      	ldr	r0, [r7, #12]
 8011cb2:	f7ff fb59 	bl	8011368 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011cb6:	bf00      	nop
 8011cb8:	3710      	adds	r7, #16
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011cbe:	b580      	push	{r7, lr}
 8011cc0:	b086      	sub	sp, #24
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cd0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011cd6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	689b      	ldr	r3, [r3, #8]
 8011cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ce2:	2b80      	cmp	r3, #128	; 0x80
 8011ce4:	d109      	bne.n	8011cfa <UART_DMAError+0x3c>
 8011ce6:	693b      	ldr	r3, [r7, #16]
 8011ce8:	2b21      	cmp	r3, #33	; 0x21
 8011cea:	d106      	bne.n	8011cfa <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	2200      	movs	r2, #0
 8011cf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8011cf4:	6978      	ldr	r0, [r7, #20]
 8011cf6:	f7ff ff37 	bl	8011b68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	689b      	ldr	r3, [r3, #8]
 8011d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d04:	2b40      	cmp	r3, #64	; 0x40
 8011d06:	d109      	bne.n	8011d1c <UART_DMAError+0x5e>
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	2b22      	cmp	r3, #34	; 0x22
 8011d0c:	d106      	bne.n	8011d1c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	2200      	movs	r2, #0
 8011d12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8011d16:	6978      	ldr	r0, [r7, #20]
 8011d18:	f7ff ff3b 	bl	8011b92 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d20:	f043 0210 	orr.w	r2, r3, #16
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011d28:	6978      	ldr	r0, [r7, #20]
 8011d2a:	f7f6 fc20 	bl	800856e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d2e:	bf00      	nop
 8011d30:	3718      	adds	r7, #24
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}

08011d36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011d36:	b580      	push	{r7, lr}
 8011d38:	b084      	sub	sp, #16
 8011d3a:	af00      	add	r7, sp, #0
 8011d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	2200      	movs	r2, #0
 8011d48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	2200      	movs	r2, #0
 8011d50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011d54:	68f8      	ldr	r0, [r7, #12]
 8011d56:	f7f6 fc0a 	bl	800856e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d5a:	bf00      	nop
 8011d5c:	3710      	adds	r7, #16
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}

08011d62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011d62:	b580      	push	{r7, lr}
 8011d64:	b082      	sub	sp, #8
 8011d66:	af00      	add	r7, sp, #0
 8011d68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	681a      	ldr	r2, [r3, #0]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011d78:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2220      	movs	r2, #32
 8011d7e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2200      	movs	r2, #0
 8011d84:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f7f6 fbe6 	bl	8008558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d8c:	bf00      	nop
 8011d8e:	3708      	adds	r7, #8
 8011d90:	46bd      	mov	sp, r7
 8011d92:	bd80      	pop	{r7, pc}

08011d94 <__libc_init_array>:
 8011d94:	b570      	push	{r4, r5, r6, lr}
 8011d96:	4e0d      	ldr	r6, [pc, #52]	; (8011dcc <__libc_init_array+0x38>)
 8011d98:	4c0d      	ldr	r4, [pc, #52]	; (8011dd0 <__libc_init_array+0x3c>)
 8011d9a:	1ba4      	subs	r4, r4, r6
 8011d9c:	10a4      	asrs	r4, r4, #2
 8011d9e:	2500      	movs	r5, #0
 8011da0:	42a5      	cmp	r5, r4
 8011da2:	d109      	bne.n	8011db8 <__libc_init_array+0x24>
 8011da4:	4e0b      	ldr	r6, [pc, #44]	; (8011dd4 <__libc_init_array+0x40>)
 8011da6:	4c0c      	ldr	r4, [pc, #48]	; (8011dd8 <__libc_init_array+0x44>)
 8011da8:	f000 f834 	bl	8011e14 <_init>
 8011dac:	1ba4      	subs	r4, r4, r6
 8011dae:	10a4      	asrs	r4, r4, #2
 8011db0:	2500      	movs	r5, #0
 8011db2:	42a5      	cmp	r5, r4
 8011db4:	d105      	bne.n	8011dc2 <__libc_init_array+0x2e>
 8011db6:	bd70      	pop	{r4, r5, r6, pc}
 8011db8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011dbc:	4798      	blx	r3
 8011dbe:	3501      	adds	r5, #1
 8011dc0:	e7ee      	b.n	8011da0 <__libc_init_array+0xc>
 8011dc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011dc6:	4798      	blx	r3
 8011dc8:	3501      	adds	r5, #1
 8011dca:	e7f2      	b.n	8011db2 <__libc_init_array+0x1e>
 8011dcc:	08011f20 	.word	0x08011f20
 8011dd0:	08011f20 	.word	0x08011f20
 8011dd4:	08011f20 	.word	0x08011f20
 8011dd8:	08011f24 	.word	0x08011f24

08011ddc <memcpy>:
 8011ddc:	b510      	push	{r4, lr}
 8011dde:	1e43      	subs	r3, r0, #1
 8011de0:	440a      	add	r2, r1
 8011de2:	4291      	cmp	r1, r2
 8011de4:	d100      	bne.n	8011de8 <memcpy+0xc>
 8011de6:	bd10      	pop	{r4, pc}
 8011de8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011dec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011df0:	e7f7      	b.n	8011de2 <memcpy+0x6>

08011df2 <memset>:
 8011df2:	4402      	add	r2, r0
 8011df4:	4603      	mov	r3, r0
 8011df6:	4293      	cmp	r3, r2
 8011df8:	d100      	bne.n	8011dfc <memset+0xa>
 8011dfa:	4770      	bx	lr
 8011dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8011e00:	e7f9      	b.n	8011df6 <memset+0x4>

08011e02 <strcpy>:
 8011e02:	4603      	mov	r3, r0
 8011e04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e08:	f803 2b01 	strb.w	r2, [r3], #1
 8011e0c:	2a00      	cmp	r2, #0
 8011e0e:	d1f9      	bne.n	8011e04 <strcpy+0x2>
 8011e10:	4770      	bx	lr
	...

08011e14 <_init>:
 8011e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e16:	bf00      	nop
 8011e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e1a:	bc08      	pop	{r3}
 8011e1c:	469e      	mov	lr, r3
 8011e1e:	4770      	bx	lr

08011e20 <_fini>:
 8011e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e22:	bf00      	nop
 8011e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e26:	bc08      	pop	{r3}
 8011e28:	469e      	mov	lr, r3
 8011e2a:	4770      	bx	lr
