
ACIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f38  080001e0  080001e0  000101e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800a118  0800a118  0001a118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a138  0800a138  00021428  2**0
                  CONTENTS
  4 .ARM          00000008  0800a138  0800a138  0001a138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a140  0800a140  00021428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a140  0800a140  0001a140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a144  0800a144  0001a144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001428  20010000  0800a148  00020000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006d74  20011428  0800b570  00021428  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001819c  0800b570  0002819c  2**0
                  ALLOC
 11 .itcmram      00000000  20000000  20000000  00021428  2**0
                  CONTENTS
 12 .ARM.attributes 00000030  00000000  00000000  00021428  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001904b  00000000  00000000  00021458  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000037dc  00000000  00000000  0003a4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001568  00000000  00000000  0003dc80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000013b8  00000000  00000000  0003f1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00025975  00000000  00000000  000405a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000138ee  00000000  00000000  00065f15  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000e46a5  00000000  00000000  00079803  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0015dea8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005934  00000000  00000000  0015df24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20011428 	.word	0x20011428
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a100 	.word	0x0800a100

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2001142c 	.word	0x2001142c
 800021c:	0800a100 	.word	0x0800a100

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <acis_init>:
extern TIM_HandleTypeDef htim4;

static int8_t acis_send_command(eTransChannels xChaDst, void * msgBuf, uint32_t length);

void acis_init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  protInit(&fifoSendingQueue, buffSendingQueue, 1, SENDING_QUEUE_SIZE);
 8000d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d64:	2201      	movs	r2, #1
 8000d66:	4904      	ldr	r1, [pc, #16]	; (8000d78 <acis_init+0x1c>)
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <acis_init+0x20>)
 8000d6a:	f004 f9e7 	bl	800513c <protInit>
  HAL_TIM_Base_Start_IT(&htim4);
 8000d6e:	4804      	ldr	r0, [pc, #16]	; (8000d80 <acis_init+0x24>)
 8000d70:	f007 f918 	bl	8007fa4 <HAL_TIM_Base_Start_IT>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20011858 	.word	0x20011858
 8000d7c:	20011744 	.word	0x20011744
 8000d80:	20017d8c 	.word	0x20017d8c

08000d84 <acis_ignite_14>:

static inline void acis_ignite_14(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2180      	movs	r1, #128	; 0x80
 8000d8c:	4807      	ldr	r0, [pc, #28]	; (8000dac <acis_ignite_14+0x28>)
 8000d8e:	f005 fe89 	bl	8006aa4 <HAL_GPIO_WritePin>
  ign14_prev = ign14_time;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <acis_ignite_14+0x2c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <acis_ignite_14+0x30>)
 8000d98:	6013      	str	r3, [r2, #0]
  ign14_time = Delay_Tick;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <acis_ignite_14+0x34>)
 8000d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <acis_ignite_14+0x2c>)
 8000da0:	6013      	str	r3, [r2, #0]
  ign_ftime = 0;
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <acis_ignite_14+0x38>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40020400 	.word	0x40020400
 8000db0:	20011444 	.word	0x20011444
 8000db4:	2001144c 	.word	0x2001144c
 8000db8:	40000c00 	.word	0x40000c00
 8000dbc:	20010014 	.word	0x20010014

08000dc0 <acis_ignite_23>:

static inline void acis_ignite_23(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2140      	movs	r1, #64	; 0x40
 8000dc8:	4807      	ldr	r0, [pc, #28]	; (8000de8 <acis_ignite_23+0x28>)
 8000dca:	f005 fe6b 	bl	8006aa4 <HAL_GPIO_WritePin>
  ign23_prev = ign23_time;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <acis_ignite_23+0x2c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <acis_ignite_23+0x30>)
 8000dd4:	6013      	str	r3, [r2, #0]
  ign23_time = Delay_Tick;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <acis_ignite_23+0x34>)
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dda:	4a04      	ldr	r2, [pc, #16]	; (8000dec <acis_ignite_23+0x2c>)
 8000ddc:	6013      	str	r3, [r2, #0]
  ign_ftime = 0;
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <acis_ignite_23+0x38>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40020400 	.word	0x40020400
 8000dec:	20011448 	.word	0x20011448
 8000df0:	20011450 	.word	0x20011450
 8000df4:	40000c00 	.word	0x40000c00
 8000df8:	20010014 	.word	0x20010014

08000dfc <acis_saturate_14>:

static inline void acis_saturate_14(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2180      	movs	r1, #128	; 0x80
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <acis_saturate_14+0x18>)
 8000e06:	f005 fe4d 	bl	8006aa4 <HAL_GPIO_WritePin>
  ign_ftime = 0;
 8000e0a:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <acis_saturate_14+0x1c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40020400 	.word	0x40020400
 8000e18:	20010014 	.word	0x20010014

08000e1c <acis_saturate_23>:

static inline void acis_saturate_23(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2140      	movs	r1, #64	; 0x40
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <acis_saturate_23+0x18>)
 8000e26:	f005 fe3d 	bl	8006aa4 <HAL_GPIO_WritePin>
  ign_ftime = 0;
 8000e2a:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <acis_saturate_23+0x1c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40020400 	.word	0x40020400
 8000e38:	20010014 	.word	0x20010014

08000e3c <acis_ignite>:

static inline void acis_ignite(uint8_t index)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  if(index == 0)
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <acis_ignite+0x16>
    acis_ignite_14();
 8000e4c:	f7ff ff9a 	bl	8000d84 <acis_ignite_14>
  else if(index == 1)
    acis_ignite_23();
}
 8000e50:	e004      	b.n	8000e5c <acis_ignite+0x20>
  else if(index == 1)
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d101      	bne.n	8000e5c <acis_ignite+0x20>
    acis_ignite_23();
 8000e58:	f7ff ffb2 	bl	8000dc0 <acis_ignite_23>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <acis_saturate>:

static inline void acis_saturate(uint8_t index)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  if(index == 0)
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <acis_saturate+0x16>
    acis_saturate_14();
 8000e74:	f7ff ffc2 	bl	8000dfc <acis_saturate_14>
  else if(index == 1)
    acis_saturate_23();
}
 8000e78:	e004      	b.n	8000e84 <acis_saturate+0x20>
  else if(index == 1)
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d101      	bne.n	8000e84 <acis_saturate+0x20>
    acis_saturate_23();
 8000e80:	f7ff ffcc 	bl	8000e1c <acis_saturate_23>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <acis_ignition_loop>:

static inline void acis_ignition_loop(void)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
  uint32_t now = Delay_Tick;
 8000e92:	4b9f      	ldr	r3, [pc, #636]	; (8001110 <acis_ignition_loop+0x284>)
 8000e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e96:	60fb      	str	r3, [r7, #12]
  float rpm = csps_getrpm();
 8000e98:	f001 fc76 	bl	8002788 <csps_getrpm>
 8000e9c:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t rotates = csps_isrotates() || hall_rotates;
 8000ea0:	f001 fc9c 	bl	80027dc <csps_isrotates>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d104      	bne.n	8000eb4 <acis_ignition_loop+0x28>
 8000eaa:	4b9a      	ldr	r3, [pc, #616]	; (8001114 <acis_ignition_loop+0x288>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <acis_ignition_loop+0x2c>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e000      	b.n	8000eba <acis_ignition_loop+0x2e>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	71fb      	strb	r3, [r7, #7]
  if(!ign_ftime && rotates)
 8000ebc:	4b96      	ldr	r3, [pc, #600]	; (8001118 <acis_ignition_loop+0x28c>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f040 8114 	bne.w	80010ee <acis_ignition_loop+0x262>
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 8110 	beq.w	80010ee <acis_ignition_loop+0x262>
  {
    if(DelayDiff(now, ign14_time) >= IGN_OVER_TIME)
 8000ece:	4b93      	ldr	r3, [pc, #588]	; (800111c <acis_ignition_loop+0x290>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f001 fd6f 	bl	80029b8 <DelayDiff>
 8000eda:	4602      	mov	r2, r0
 8000edc:	4b90      	ldr	r3, [pc, #576]	; (8001120 <acis_ignition_loop+0x294>)
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d905      	bls.n	8000eee <acis_ignition_loop+0x62>
      HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	488f      	ldr	r0, [pc, #572]	; (8001124 <acis_ignition_loop+0x298>)
 8000ee8:	f005 fddc 	bl	8006aa4 <HAL_GPIO_WritePin>
 8000eec:	e071      	b.n	8000fd2 <acis_ignition_loop+0x146>
    else if(acis_config.params.isIgnitionByHall)
 8000eee:	4a8e      	ldr	r2, [pc, #568]	; (8001128 <acis_ignition_loop+0x29c>)
 8000ef0:	f645 3389 	movw	r3, #23433	; 0x5b89
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d06a      	beq.n	8000fd2 <acis_ignition_loop+0x146>
    {
      if(rpm < 300.0f)
 8000efc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f00:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800112c <acis_ignition_loop+0x2a0>
 8000f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0c:	d51c      	bpl.n	8000f48 <acis_ignition_loop+0xbc>
      {
        if(DelayDiff(now, ign14_time) >= DelayDiff(ign14_time, ign14_prev) * 96 / 128)
 8000f0e:	4b83      	ldr	r3, [pc, #524]	; (800111c <acis_ignition_loop+0x290>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4619      	mov	r1, r3
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f001 fd4f 	bl	80029b8 <DelayDiff>
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	4b7f      	ldr	r3, [pc, #508]	; (800111c <acis_ignition_loop+0x290>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b83      	ldr	r3, [pc, #524]	; (8001130 <acis_ignition_loop+0x2a4>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4610      	mov	r0, r2
 8000f28:	f001 fd46 	bl	80029b8 <DelayDiff>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	015b      	lsls	r3, r3, #5
 8000f36:	09db      	lsrs	r3, r3, #7
 8000f38:	429c      	cmp	r4, r3
 8000f3a:	d34a      	bcc.n	8000fd2 <acis_ignition_loop+0x146>
          HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	4878      	ldr	r0, [pc, #480]	; (8001124 <acis_ignition_loop+0x298>)
 8000f42:	f005 fdaf 	bl	8006aa4 <HAL_GPIO_WritePin>
 8000f46:	e044      	b.n	8000fd2 <acis_ignition_loop+0x146>
      }
      else if(DelayDiff(ign14_time, ign14_prev) > 15000)
 8000f48:	4b74      	ldr	r3, [pc, #464]	; (800111c <acis_ignition_loop+0x290>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b78      	ldr	r3, [pc, #480]	; (8001130 <acis_ignition_loop+0x2a4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	4610      	mov	r0, r2
 8000f54:	f001 fd30 	bl	80029b8 <DelayDiff>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d91b      	bls.n	8000f9a <acis_ignition_loop+0x10e>
      {
        if((int32_t)DelayDiff(ign14_time, ign14_prev) - (int32_t)DelayDiff(now, ign14_time) < 11719)
 8000f62:	4b6e      	ldr	r3, [pc, #440]	; (800111c <acis_ignition_loop+0x290>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	4b72      	ldr	r3, [pc, #456]	; (8001130 <acis_ignition_loop+0x2a4>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	f001 fd23 	bl	80029b8 <DelayDiff>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461c      	mov	r4, r3
 8000f76:	4b69      	ldr	r3, [pc, #420]	; (800111c <acis_ignition_loop+0x290>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f001 fd1b 	bl	80029b8 <DelayDiff>
 8000f82:	4603      	mov	r3, r0
 8000f84:	1ae3      	subs	r3, r4, r3
 8000f86:	f642 52c6 	movw	r2, #11718	; 0x2dc6
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	dc21      	bgt.n	8000fd2 <acis_ignition_loop+0x146>
        {
          HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2180      	movs	r1, #128	; 0x80
 8000f92:	4864      	ldr	r0, [pc, #400]	; (8001124 <acis_ignition_loop+0x298>)
 8000f94:	f005 fd86 	bl	8006aa4 <HAL_GPIO_WritePin>
 8000f98:	e01b      	b.n	8000fd2 <acis_ignition_loop+0x146>
        }
      }
      else if(DelayDiff(now, ign14_time) >= DelayDiff(ign14_time, ign14_prev) * 28 / 128)
 8000f9a:	4b60      	ldr	r3, [pc, #384]	; (800111c <acis_ignition_loop+0x290>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f001 fd09 	bl	80029b8 <DelayDiff>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	4b5c      	ldr	r3, [pc, #368]	; (800111c <acis_ignition_loop+0x290>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b60      	ldr	r3, [pc, #384]	; (8001130 <acis_ignition_loop+0x2a4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	f001 fd00 	bl	80029b8 <DelayDiff>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	4613      	mov	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	09db      	lsrs	r3, r3, #7
 8000fc4:	429c      	cmp	r4, r3
 8000fc6:	d304      	bcc.n	8000fd2 <acis_ignition_loop+0x146>
        HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	4855      	ldr	r0, [pc, #340]	; (8001124 <acis_ignition_loop+0x298>)
 8000fce:	f005 fd69 	bl	8006aa4 <HAL_GPIO_WritePin>
    }

    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 8000fd2:	4b58      	ldr	r3, [pc, #352]	; (8001134 <acis_ignition_loop+0x2a8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f001 fced 	bl	80029b8 <DelayDiff>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	4b4f      	ldr	r3, [pc, #316]	; (8001120 <acis_ignition_loop+0x294>)
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d905      	bls.n	8000ff2 <acis_ignition_loop+0x166>
      HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2140      	movs	r1, #64	; 0x40
 8000fea:	484e      	ldr	r0, [pc, #312]	; (8001124 <acis_ignition_loop+0x298>)
 8000fec:	f005 fd5a 	bl	8006aa4 <HAL_GPIO_WritePin>
    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 8000ff0:	e088      	b.n	8001104 <acis_ignition_loop+0x278>
    else if(acis_config.params.isIgnitionByHall)
 8000ff2:	4a4d      	ldr	r2, [pc, #308]	; (8001128 <acis_ignition_loop+0x29c>)
 8000ff4:	f645 3389 	movw	r3, #23433	; 0x5b89
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 8081 	beq.w	8001104 <acis_ignition_loop+0x278>
    {
      if(rpm < 300.0f)
 8001002:	edd7 7a02 	vldr	s15, [r7, #8]
 8001006:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800112c <acis_ignition_loop+0x2a0>
 800100a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001012:	d51c      	bpl.n	800104e <acis_ignition_loop+0x1c2>
      {
        if(DelayDiff(now, ign23_time) >= DelayDiff(ign23_time, ign23_prev) * 96 / 128)
 8001014:	4b47      	ldr	r3, [pc, #284]	; (8001134 <acis_ignition_loop+0x2a8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f001 fccc 	bl	80029b8 <DelayDiff>
 8001020:	4604      	mov	r4, r0
 8001022:	4b44      	ldr	r3, [pc, #272]	; (8001134 <acis_ignition_loop+0x2a8>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b44      	ldr	r3, [pc, #272]	; (8001138 <acis_ignition_loop+0x2ac>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4619      	mov	r1, r3
 800102c:	4610      	mov	r0, r2
 800102e:	f001 fcc3 	bl	80029b8 <DelayDiff>
 8001032:	4602      	mov	r2, r0
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	015b      	lsls	r3, r3, #5
 800103c:	09db      	lsrs	r3, r3, #7
 800103e:	429c      	cmp	r4, r3
 8001040:	d360      	bcc.n	8001104 <acis_ignition_loop+0x278>
          HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2140      	movs	r1, #64	; 0x40
 8001046:	4837      	ldr	r0, [pc, #220]	; (8001124 <acis_ignition_loop+0x298>)
 8001048:	f005 fd2c 	bl	8006aa4 <HAL_GPIO_WritePin>
    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 800104c:	e05a      	b.n	8001104 <acis_ignition_loop+0x278>
      }
      else if(rpm > 500.0f && DelayDiff(ign23_time, ign23_prev) > 15000)
 800104e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001052:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800113c <acis_ignition_loop+0x2b0>
 8001056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105e:	dd28      	ble.n	80010b2 <acis_ignition_loop+0x226>
 8001060:	4b34      	ldr	r3, [pc, #208]	; (8001134 <acis_ignition_loop+0x2a8>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b34      	ldr	r3, [pc, #208]	; (8001138 <acis_ignition_loop+0x2ac>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	4610      	mov	r0, r2
 800106c:	f001 fca4 	bl	80029b8 <DelayDiff>
 8001070:	4602      	mov	r2, r0
 8001072:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001076:	429a      	cmp	r2, r3
 8001078:	d91b      	bls.n	80010b2 <acis_ignition_loop+0x226>
      {
        if((int32_t)DelayDiff(ign23_time, ign23_prev) - (int32_t)DelayDiff(now, ign23_time) < 11719)
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <acis_ignition_loop+0x2a8>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <acis_ignition_loop+0x2ac>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4619      	mov	r1, r3
 8001084:	4610      	mov	r0, r2
 8001086:	f001 fc97 	bl	80029b8 <DelayDiff>
 800108a:	4603      	mov	r3, r0
 800108c:	461c      	mov	r4, r3
 800108e:	4b29      	ldr	r3, [pc, #164]	; (8001134 <acis_ignition_loop+0x2a8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4619      	mov	r1, r3
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f001 fc8f 	bl	80029b8 <DelayDiff>
 800109a:	4603      	mov	r3, r0
 800109c:	1ae3      	subs	r3, r4, r3
 800109e:	f642 52c6 	movw	r2, #11718	; 0x2dc6
 80010a2:	4293      	cmp	r3, r2
 80010a4:	dc22      	bgt.n	80010ec <acis_ignition_loop+0x260>
        {
          HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2140      	movs	r1, #64	; 0x40
 80010aa:	481e      	ldr	r0, [pc, #120]	; (8001124 <acis_ignition_loop+0x298>)
 80010ac:	f005 fcfa 	bl	8006aa4 <HAL_GPIO_WritePin>
        if((int32_t)DelayDiff(ign23_time, ign23_prev) - (int32_t)DelayDiff(now, ign23_time) < 11719)
 80010b0:	e01c      	b.n	80010ec <acis_ignition_loop+0x260>
        }
      }
      else if(DelayDiff(now, ign23_time) >= DelayDiff(ign23_time, ign23_prev) * 28 / 128)
 80010b2:	4b20      	ldr	r3, [pc, #128]	; (8001134 <acis_ignition_loop+0x2a8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4619      	mov	r1, r3
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f001 fc7d 	bl	80029b8 <DelayDiff>
 80010be:	4604      	mov	r4, r0
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <acis_ignition_loop+0x2a8>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <acis_ignition_loop+0x2ac>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4610      	mov	r0, r2
 80010cc:	f001 fc74 	bl	80029b8 <DelayDiff>
 80010d0:	4602      	mov	r2, r0
 80010d2:	4613      	mov	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	1a9b      	subs	r3, r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	09db      	lsrs	r3, r3, #7
 80010dc:	429c      	cmp	r4, r3
 80010de:	d311      	bcc.n	8001104 <acis_ignition_loop+0x278>
        HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	480f      	ldr	r0, [pc, #60]	; (8001124 <acis_ignition_loop+0x298>)
 80010e6:	f005 fcdd 	bl	8006aa4 <HAL_GPIO_WritePin>
    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 80010ea:	e00b      	b.n	8001104 <acis_ignition_loop+0x278>
 80010ec:	e00a      	b.n	8001104 <acis_ignition_loop+0x278>
    }
  }
  else
  {
    HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2180      	movs	r1, #128	; 0x80
 80010f2:	480c      	ldr	r0, [pc, #48]	; (8001124 <acis_ignition_loop+0x298>)
 80010f4:	f005 fcd6 	bl	8006aa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2140      	movs	r1, #64	; 0x40
 80010fc:	4809      	ldr	r0, [pc, #36]	; (8001124 <acis_ignition_loop+0x298>)
 80010fe:	f005 fcd1 	bl	8006aa4 <HAL_GPIO_WritePin>
  }
}
 8001102:	e000      	b.n	8001106 <acis_ignition_loop+0x27a>
    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	bf00      	nop
 8001110:	40000c00 	.word	0x40000c00
 8001114:	20011460 	.word	0x20011460
 8001118:	20010014 	.word	0x20010014
 800111c:	20011444 	.word	0x20011444
 8001120:	0007a11f 	.word	0x0007a11f
 8001124:	40020400 	.word	0x40020400
 8001128:	20011c58 	.word	0x20011c58
 800112c:	43960000 	.word	0x43960000
 8001130:	2001144c 	.word	0x2001144c
 8001134:	20011448 	.word	0x20011448
 8001138:	20011450 	.word	0x20011450
 800113c:	43fa0000 	.word	0x43fa0000

08001140 <acis_hall_exti>:

inline void acis_hall_exti(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
  uint32_t now = Delay_Tick;
 8001146:	4b42      	ldr	r3, [pc, #264]	; (8001250 <acis_hall_exti+0x110>)
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	617b      	str	r3, [r7, #20]
  uint8_t hall_cylinders = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	77fb      	strb	r3, [r7, #31]
  hall_prev = now;
 8001150:	4a40      	ldr	r2, [pc, #256]	; (8001254 <acis_hall_exti+0x114>)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	6013      	str	r3, [r2, #0]
  float angle = 0.0f;
 8001156:	f04f 0300 	mov.w	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  float angle14 = csps_getangle14();
 800115c:	f001 fa32 	bl	80025c4 <csps_getangle14>
 8001160:	ed87 0a04 	vstr	s0, [r7, #16]
  float rpm = csps_getrpm();
 8001164:	f001 fb10 	bl	8002788 <csps_getrpm>
 8001168:	ed87 0a03 	vstr	s0, [r7, #12]
  float pressure = map_getpressure();
 800116c:	f002 fb22 	bl	80037b4 <map_getpressure>
 8001170:	ed87 0a02 	vstr	s0, [r7, #8]
  float angle23 = csps_getangle23from14(angle14);
 8001174:	ed97 0a04 	vldr	s0, [r7, #16]
 8001178:	f001 fadc 	bl	8002734 <csps_getangle23from14>
 800117c:	ed87 0a01 	vstr	s0, [r7, #4]
  float cspsfound = csps_isfound();
 8001180:	f001 fb38 	bl	80027f4 <csps_isfound>
 8001184:	4603      	mov	r3, r0
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800118e:	edc7 7a00 	vstr	s15, [r7]

  if(angle23 > 90.0f || angle23 <= -90.0f)
 8001192:	edd7 7a01 	vldr	s15, [r7, #4]
 8001196:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001258 <acis_hall_exti+0x118>
 800119a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a2:	dc08      	bgt.n	80011b6 <acis_hall_exti+0x76>
 80011a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800125c <acis_hall_exti+0x11c>
 80011ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b4:	d803      	bhi.n	80011be <acis_hall_exti+0x7e>
  {
      hall_cylinders = 2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	77fb      	strb	r3, [r7, #31]
      angle = angle14;
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	61bb      	str	r3, [r7, #24]
  }
  if(angle14 > 90.0f || angle14 <= -90.0f)
 80011be:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001258 <acis_hall_exti+0x118>
 80011c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ce:	dc08      	bgt.n	80011e2 <acis_hall_exti+0xa2>
 80011d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80011d4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800125c <acis_hall_exti+0x11c>
 80011d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e0:	d813      	bhi.n	800120a <acis_hall_exti+0xca>
  {
    if(hall_cylinders == 0)
 80011e2:	7ffb      	ldrb	r3, [r7, #31]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d104      	bne.n	80011f2 <acis_hall_exti+0xb2>
    {
      hall_cylinders = 1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	77fb      	strb	r3, [r7, #31]
      angle = angle23;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	61bb      	str	r3, [r7, #24]
 80011f0:	e00b      	b.n	800120a <acis_hall_exti+0xca>
    }
    else
    {
      hall_cylinders = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	77fb      	strb	r3, [r7, #31]
      hall_error += 1.0f;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <acis_hall_exti+0x120>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001200:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <acis_hall_exti+0x120>)
 8001206:	edc3 7a00 	vstr	s15, [r3]
    }
  }
  hall_angle = angle;
 800120a:	4a16      	ldr	r2, [pc, #88]	; (8001264 <acis_hall_exti+0x124>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6013      	str	r3, [r2, #0]

  if(cspsfound && acis_config.params.isIgnitionByHall)
 8001210:	edd7 7a00 	vldr	s15, [r7]
 8001214:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	d011      	beq.n	8001242 <acis_hall_exti+0x102>
 800121e:	4a12      	ldr	r2, [pc, #72]	; (8001268 <acis_hall_exti+0x128>)
 8001220:	f645 3389 	movw	r3, #23433	; 0x5b89
 8001224:	4413      	add	r3, r2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00a      	beq.n	8001242 <acis_hall_exti+0x102>
  {
    if(hall_cylinders == 1)
 800122c:	7ffb      	ldrb	r3, [r7, #31]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d102      	bne.n	8001238 <acis_hall_exti+0xf8>
    {
      acis_ignite_14();
 8001232:	f7ff fda7 	bl	8000d84 <acis_ignite_14>
 8001236:	e004      	b.n	8001242 <acis_hall_exti+0x102>
    }
    else if(hall_cylinders == 2)
 8001238:	7ffb      	ldrb	r3, [r7, #31]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d101      	bne.n	8001242 <acis_hall_exti+0x102>
    {
      acis_ignite_23();
 800123e:	f7ff fdbf 	bl	8000dc0 <acis_ignite_23>
    }
  }
  hall_rotates = 1;
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <acis_hall_exti+0x12c>)
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
}
 8001248:	bf00      	nop
 800124a:	3720      	adds	r7, #32
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40000c00 	.word	0x40000c00
 8001254:	20011454 	.word	0x20011454
 8001258:	42b40000 	.word	0x42b40000
 800125c:	c2b40000 	.word	0xc2b40000
 8001260:	2001145c 	.word	0x2001145c
 8001264:	20011458 	.word	0x20011458
 8001268:	20011c58 	.word	0x20011c58
 800126c:	20011460 	.word	0x20011460

08001270 <acis_hall_loop>:

static inline void acis_hall_loop(void)
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
  static uint32_t last_error_null = 0;
  uint32_t prev = hall_prev;
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <acis_hall_loop+0x78>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	607b      	str	r3, [r7, #4]
  uint32_t now = Delay_Tick;
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <acis_hall_loop+0x7c>)
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	603b      	str	r3, [r7, #0]
  if(DelayDiff(now, last_error_null) > 100000)
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <acis_hall_loop+0x80>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4619      	mov	r1, r3
 8001288:	6838      	ldr	r0, [r7, #0]
 800128a:	f001 fb95 	bl	80029b8 <DelayDiff>
 800128e:	4602      	mov	r2, r0
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <acis_hall_loop+0x84>)
 8001292:	429a      	cmp	r2, r3
 8001294:	d915      	bls.n	80012c2 <acis_hall_loop+0x52>
  {
    hall_error *= 0.95;
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <acis_hall_loop+0x88>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f924 	bl	80004e8 <__aeabi_f2d>
 80012a0:	a30f      	add	r3, pc, #60	; (adr r3, 80012e0 <acis_hall_loop+0x70>)
 80012a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a6:	f7ff f977 	bl	8000598 <__aeabi_dmul>
 80012aa:	4603      	mov	r3, r0
 80012ac:	460c      	mov	r4, r1
 80012ae:	4618      	mov	r0, r3
 80012b0:	4621      	mov	r1, r4
 80012b2:	f7ff fb83 	bl	80009bc <__aeabi_d2f>
 80012b6:	4602      	mov	r2, r0
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <acis_hall_loop+0x88>)
 80012ba:	601a      	str	r2, [r3, #0]
    last_error_null = now;
 80012bc:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <acis_hall_loop+0x80>)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	6013      	str	r3, [r2, #0]
  }
  if(DelayDiff(now, prev) > 600000)
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	6838      	ldr	r0, [r7, #0]
 80012c6:	f001 fb77 	bl	80029b8 <DelayDiff>
 80012ca:	4602      	mov	r2, r0
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <acis_hall_loop+0x8c>)
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d902      	bls.n	80012d8 <acis_hall_loop+0x68>
  {
    hall_rotates = 0;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <acis_hall_loop+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
  }
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd90      	pop	{r4, r7, pc}
 80012e0:	66666666 	.word	0x66666666
 80012e4:	3fee6666 	.word	0x3fee6666
 80012e8:	20011454 	.word	0x20011454
 80012ec:	40000c00 	.word	0x40000c00
 80012f0:	20011478 	.word	0x20011478
 80012f4:	000186a0 	.word	0x000186a0
 80012f8:	2001145c 	.word	0x2001145c
 80012fc:	000927c0 	.word	0x000927c0
 8001300:	20011460 	.word	0x20011460

08001304 <CalculateIgnition>:

static float CalculateIgnition(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b0a4      	sub	sp, #144	; 0x90
 8001308:	af00      	add	r7, sp, #0
  float rpm = csps_getrpm();
 800130a:	f001 fa3d 	bl	8002788 <csps_getrpm>
 800130e:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
  float pressure = map_getpressure();
 8001312:	f002 fa4f 	bl	80037b4 <map_getpressure>
 8001316:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
  float temperature = 80.0f;
 800131a:	4bba      	ldr	r3, [pc, #744]	; (8001604 <CalculateIgnition+0x300>)
 800131c:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t isIdle = HAL_GPIO_ReadPin(SENS_ACC_GPIO_Port, SENS_ACC_Pin) == GPIO_PIN_SET;
 800131e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001322:	48b9      	ldr	r0, [pc, #740]	; (8001608 <CalculateIgnition+0x304>)
 8001324:	f005 fba6 	bl	8006a74 <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	2b01      	cmp	r3, #1
 800132c:	bf0c      	ite	eq
 800132e:	2301      	moveq	r3, #1
 8001330:	2300      	movne	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b


  static uint32_t lastRotated = 0x80000000;
  static uint8_t isInitial = 1;
  uint32_t now = Delay_Tick;
 8001338:	4bb4      	ldr	r3, [pc, #720]	; (800160c <CalculateIgnition+0x308>)
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	637b      	str	r3, [r7, #52]	; 0x34
  float angle = 0.0f;
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  float angle_1, angle_2;
  float mult, mult_rpm, mult_press,
      temprpm1 = 0.0f,temprpm2 = 0.0f,
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      temppress1 = 0.0f,temppress2 = 0.0f,
 8001356:	f04f 0300 	mov.w	r3, #0
 800135a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	67fb      	str	r3, [r7, #124]	; 0x7c
      temptemp1 = 0.0f,temptemp2 = 0.0f,
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	67bb      	str	r3, [r7, #120]	; 0x78
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	677b      	str	r3, [r7, #116]	; 0x74
      tempign1 = 0.0f, tempign2 = 0.0f,
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tempign11 = 0.0f, tempign12 = 0.0f,
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
      tempign21 = 0.0f, tempign22 = 0.0f;
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  uint32_t rpmindex1 = 0, rpmindex2 = 0,
 8001394:	2300      	movs	r3, #0
 8001396:	673b      	str	r3, [r7, #112]	; 0x70
 8001398:	2300      	movs	r3, #0
 800139a:	66fb      	str	r3, [r7, #108]	; 0x6c
      pressindex1 = 0, pressindex2 = 0,
 800139c:	2300      	movs	r3, #0
 800139e:	66bb      	str	r3, [r7, #104]	; 0x68
 80013a0:	2300      	movs	r3, #0
 80013a2:	667b      	str	r3, [r7, #100]	; 0x64
      tempindex1 = 0, tempindex2 = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	663b      	str	r3, [r7, #96]	; 0x60
 80013a8:	2300      	movs	r3, #0
 80013aa:	65fb      	str	r3, [r7, #92]	; 0x5c

  sAcisIgnTable * table = NULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	65bb      	str	r3, [r7, #88]	; 0x58
  int table_num = table_current;
 80013b0:	4b97      	ldr	r3, [pc, #604]	; (8001610 <CalculateIgnition+0x30c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	61bb      	str	r3, [r7, #24]

  if(table_num < acis_config.tables_count || table_num < TABLE_SETUPS_MAX)
 80013b8:	4b96      	ldr	r3, [pc, #600]	; (8001614 <CalculateIgnition+0x310>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d802      	bhi.n	80013c8 <CalculateIgnition+0xc4>
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	dc08      	bgt.n	80013da <CalculateIgnition+0xd6>
    table = &acis_config.tables[table_num];
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	f44f 52b7 	mov.w	r2, #5856	; 0x16e0
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	4a90      	ldr	r2, [pc, #576]	; (8001614 <CalculateIgnition+0x310>)
 80013d4:	4413      	add	r3, r2
 80013d6:	3304      	adds	r3, #4
 80013d8:	65bb      	str	r3, [r7, #88]	; 0x58

  if(rpm > 400.0f)
 80013da:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80013de:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001618 <CalculateIgnition+0x314>
 80013e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	dd06      	ble.n	80013fa <CalculateIgnition+0xf6>
  {
    isInitial = 0;
 80013ec:	4b8b      	ldr	r3, [pc, #556]	; (800161c <CalculateIgnition+0x318>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
    lastRotated = now;
 80013f2:	4a8b      	ldr	r2, [pc, #556]	; (8001620 <CalculateIgnition+0x31c>)
 80013f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	e015      	b.n	8001426 <CalculateIgnition+0x122>
  }
  else if(rpm < 10.0f)
 80013fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80013fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140a:	d50c      	bpl.n	8001426 <CalculateIgnition+0x122>
  {
    if(DelayDiff(now, lastRotated) < INITIAL_TIMEOUT)
 800140c:	4b84      	ldr	r3, [pc, #528]	; (8001620 <CalculateIgnition+0x31c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001414:	f001 fad0 	bl	80029b8 <DelayDiff>
 8001418:	4602      	mov	r2, r0
 800141a:	4b82      	ldr	r3, [pc, #520]	; (8001624 <CalculateIgnition+0x320>)
 800141c:	429a      	cmp	r2, r3
 800141e:	d802      	bhi.n	8001426 <CalculateIgnition+0x122>
    {
      isInitial = 1;
 8001420:	4b7e      	ldr	r3, [pc, #504]	; (800161c <CalculateIgnition+0x318>)
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]
    }
  }

  if(table)
 8001426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 83af 	beq.w	8001b8c <CalculateIgnition+0x888>
  {
    angle = table->initial_ignition;
 800142e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if(!isInitial && rpm > 10.0f)
 8001436:	4b79      	ldr	r3, [pc, #484]	; (800161c <CalculateIgnition+0x318>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	f040 839d 	bne.w	8001b7a <CalculateIgnition+0x876>
 8001440:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001444:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800144c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001450:	f340 8393 	ble.w	8001b7a <CalculateIgnition+0x876>
    {
      if(isIdle)
 8001454:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80e5 	beq.w	8001628 <CalculateIgnition+0x324>
      {
        if(table->idles_count == 0)
 800145e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001460:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8001464:	2b00      	cmp	r3, #0
 8001466:	d104      	bne.n	8001472 <CalculateIgnition+0x16e>
          angle = table->initial_ignition;
 8001468:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001470:	e2b1      	b.n	80019d6 <CalculateIgnition+0x6d2>
        else if(table->idles_count == 1)
 8001472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001474:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8001478:	2b01      	cmp	r3, #1
 800147a:	d105      	bne.n	8001488 <CalculateIgnition+0x184>
          angle = table->idle_ignitions[0];
 800147c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800147e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8001482:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001486:	e2a6      	b.n	80019d6 <CalculateIgnition+0x6d2>
        else
        {
          if(rpm <= table->idle_rotates[0])
 8001488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800148a:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 800148e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001492:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149a:	d805      	bhi.n	80014a8 <CalculateIgnition+0x1a4>
          {
            angle = table->idle_ignitions[0];
 800149c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800149e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80014a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80014a6:	e06d      	b.n	8001584 <CalculateIgnition+0x280>
          }
          else if(rpm >= table->idle_rotates[table->rotates_count-1])
 80014a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014ae:	3b01      	subs	r3, #1
 80014b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014b2:	3376      	adds	r3, #118	; 0x76
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	3304      	adds	r3, #4
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80014c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	db1c      	blt.n	8001506 <CalculateIgnition+0x202>
          {
            rpmindex1 = table->idles_count-2;
 80014cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014ce:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80014d2:	3b02      	subs	r3, #2
 80014d4:	673b      	str	r3, [r7, #112]	; 0x70
            rpmindex2 = table->idles_count-1;
 80014d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014d8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80014dc:	3b01      	subs	r3, #1
 80014de:	66fb      	str	r3, [r7, #108]	; 0x6c
            temprpm1 = table->idle_rotates[rpmindex1];
 80014e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014e4:	3376      	adds	r3, #118	; 0x76
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3304      	adds	r3, #4
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            temprpm2 = table->idle_rotates[rpmindex2];
 80014f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014f6:	3376      	adds	r3, #118	; 0x76
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	3304      	adds	r3, #4
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001504:	e03e      	b.n	8001584 <CalculateIgnition+0x280>
          }
          else
          {
            for(int i = 1; i < table->idles_count; i++)
 8001506:	2301      	movs	r3, #1
 8001508:	657b      	str	r3, [r7, #84]	; 0x54
 800150a:	e035      	b.n	8001578 <CalculateIgnition+0x274>
            {
              temprpm1 = table->idle_rotates[i-1];
 800150c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800150e:	3b01      	subs	r3, #1
 8001510:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001512:	3376      	adds	r3, #118	; 0x76
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	3304      	adds	r3, #4
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              temprpm2 = table->idle_rotates[i];
 8001520:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001524:	3376      	adds	r3, #118	; 0x76
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	3304      	adds	r3, #4
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              if(temprpm1 < rpm && temprpm2 > rpm)
 8001532:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001536:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800153a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001542:	d50e      	bpl.n	8001562 <CalculateIgnition+0x25e>
 8001544:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001548:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800154c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	dd05      	ble.n	8001562 <CalculateIgnition+0x25e>
              {
                rpmindex1 = i-1;
 8001556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001558:	3b01      	subs	r3, #1
 800155a:	673b      	str	r3, [r7, #112]	; 0x70
                rpmindex2 = i;
 800155c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800155e:	66fb      	str	r3, [r7, #108]	; 0x6c
                break;
 8001560:	e010      	b.n	8001584 <CalculateIgnition+0x280>
              }
              temprpm1 = 0.0f;
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              temprpm2 = 0.0f;
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            for(int i = 1; i < table->idles_count; i++)
 8001572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001574:	3301      	adds	r3, #1
 8001576:	657b      	str	r3, [r7, #84]	; 0x54
 8001578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800157a:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 800157e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001580:	429a      	cmp	r2, r3
 8001582:	d8c3      	bhi.n	800150c <CalculateIgnition+0x208>
            }
          }
          if(temprpm1 != 0.0f || temprpm2 != 0.0f)
 8001584:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001588:	eef5 7a40 	vcmp.f32	s15, #0.0
 800158c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001590:	d107      	bne.n	80015a2 <CalculateIgnition+0x29e>
 8001592:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001596:	eef5 7a40 	vcmp.f32	s15, #0.0
 800159a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159e:	f000 821a 	beq.w	80019d6 <CalculateIgnition+0x6d2>
          {
            tempign1 = table->idle_ignitions[rpmindex1];
 80015a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015a6:	3356      	adds	r3, #86	; 0x56
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	3304      	adds	r3, #4
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
            tempign2 = table->idle_ignitions[rpmindex2];
 80015b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015b6:	3356      	adds	r3, #86	; 0x56
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	3304      	adds	r3, #4
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
            mult = (rpm - temprpm1) / (temprpm2 - temprpm1);
 80015c2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80015c6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80015ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015ce:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80015d2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80015d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015de:	edc7 7a01 	vstr	s15, [r7, #4]
            angle = (tempign2 - tempign1) * mult + tempign1;
 80015e2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80015e6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80015ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80015fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fe:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8001602:	e1e8      	b.n	80019d6 <CalculateIgnition+0x6d2>
 8001604:	42a00000 	.word	0x42a00000
 8001608:	40020800 	.word	0x40020800
 800160c:	40000c00 	.word	0x40000c00
 8001610:	2001146c 	.word	0x2001146c
 8001614:	20011c58 	.word	0x20011c58
 8001618:	43c80000 	.word	0x43c80000
 800161c:	20010015 	.word	0x20010015
 8001620:	20010018 	.word	0x20010018
 8001624:	0001869f 	.word	0x0001869f

        }
      }
      else
      {
        if(table->pressures_count != 0 && table->rotates_count != 0)
 8001628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800162a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 81d2 	beq.w	80019d6 <CalculateIgnition+0x6d2>
 8001632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001634:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 81cc 	beq.w	80019d6 <CalculateIgnition+0x6d2>
        {
          if(table->pressures_count == 1)
 800163e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001642:	2b01      	cmp	r3, #1
 8001644:	d10b      	bne.n	800165e <CalculateIgnition+0x35a>
          {
            pressindex1 = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	66bb      	str	r3, [r7, #104]	; 0x68
            pressindex2 = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	667b      	str	r3, [r7, #100]	; 0x64
            temppress1 = table->pressures[0];
 800164e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            temppress2 = table->pressures[0];
 8001656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800165c:	e086      	b.n	800176c <CalculateIgnition+0x468>
          }
          else if(pressure >= table->pressures[0])
 800165e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001660:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001664:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	db15      	blt.n	800169e <CalculateIgnition+0x39a>
          {
            pressindex1 = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	66bb      	str	r3, [r7, #104]	; 0x68
            pressindex2 = 1;
 8001676:	2301      	movs	r3, #1
 8001678:	667b      	str	r3, [r7, #100]	; 0x64
            temppress1 = table->pressures[pressindex1];
 800167a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800167c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800167e:	3314      	adds	r3, #20
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	3304      	adds	r3, #4
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            temppress2 = table->pressures[pressindex2];
 800168c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800168e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001690:	3314      	adds	r3, #20
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	3304      	adds	r3, #4
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800169c:	e066      	b.n	800176c <CalculateIgnition+0x468>
          }
          else if(pressure <= table->pressures[table->pressures_count - 1])
 800169e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016a2:	3b01      	subs	r3, #1
 80016a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016a6:	3314      	adds	r3, #20
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3304      	adds	r3, #4
 80016ae:	edd3 7a00 	vldr	s15, [r3]
 80016b2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80016b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016be:	d819      	bhi.n	80016f4 <CalculateIgnition+0x3f0>
          {
            pressindex1 = table->pressures_count - 2;
 80016c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016c4:	3b02      	subs	r3, #2
 80016c6:	66bb      	str	r3, [r7, #104]	; 0x68
            pressindex2 = table->pressures_count - 1;
 80016c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016cc:	3b01      	subs	r3, #1
 80016ce:	667b      	str	r3, [r7, #100]	; 0x64
            temppress1 = table->pressures[pressindex1];
 80016d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016d4:	3314      	adds	r3, #20
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	3304      	adds	r3, #4
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            temppress2 = table->pressures[pressindex2];
 80016e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016e6:	3314      	adds	r3, #20
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	3304      	adds	r3, #4
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80016f2:	e03b      	b.n	800176c <CalculateIgnition+0x468>
          }
          else
          {
            for(int i = 1; i < table->pressures_count; i++)
 80016f4:	2301      	movs	r3, #1
 80016f6:	653b      	str	r3, [r7, #80]	; 0x50
 80016f8:	e033      	b.n	8001762 <CalculateIgnition+0x45e>
            {
              temppress1 = table->pressures[i-1];
 80016fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016fc:	3b01      	subs	r3, #1
 80016fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001700:	3314      	adds	r3, #20
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	3304      	adds	r3, #4
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
              temppress2 = table->pressures[i];
 800170e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001712:	3314      	adds	r3, #20
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	3304      	adds	r3, #4
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	67fb      	str	r3, [r7, #124]	; 0x7c
              if(temppress1 > pressure && temppress2 < pressure)
 800171e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001722:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001726:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172e:	dd0e      	ble.n	800174e <CalculateIgnition+0x44a>
 8001730:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001734:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001740:	d505      	bpl.n	800174e <CalculateIgnition+0x44a>
              {
                pressindex1 = i-1;
 8001742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001744:	3b01      	subs	r3, #1
 8001746:	66bb      	str	r3, [r7, #104]	; 0x68
                pressindex2 = i;
 8001748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800174a:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 800174c:	e00e      	b.n	800176c <CalculateIgnition+0x468>
              }
              temppress1 = 0.0f;
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
              temppress2 = 0.0f;
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	67fb      	str	r3, [r7, #124]	; 0x7c
            for(int i = 1; i < table->pressures_count; i++)
 800175c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800175e:	3301      	adds	r3, #1
 8001760:	653b      	str	r3, [r7, #80]	; 0x50
 8001762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001764:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001768:	429a      	cmp	r2, r3
 800176a:	d8c6      	bhi.n	80016fa <CalculateIgnition+0x3f6>
            }
          }

          if(table->rotates_count == 1)
 800176c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800176e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10e      	bne.n	8001794 <CalculateIgnition+0x490>
          {
            rpmindex1 = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	673b      	str	r3, [r7, #112]	; 0x70
            rpmindex2 = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	66fb      	str	r3, [r7, #108]	; 0x6c
            temprpm1 = table->rotates[0];
 800177e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001780:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            temprpm2 = table->rotates[0];
 8001788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800178a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800178e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001792:	e087      	b.n	80018a4 <CalculateIgnition+0x5a0>
          }
          else if(rpm <= table->rotates[0])
 8001794:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001796:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800179a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800179e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a6:	d814      	bhi.n	80017d2 <CalculateIgnition+0x4ce>
          {
            rpmindex1 = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	673b      	str	r3, [r7, #112]	; 0x70
            rpmindex2 = 1;
 80017ac:	2301      	movs	r3, #1
 80017ae:	66fb      	str	r3, [r7, #108]	; 0x6c
            temprpm1 = table->rotates[rpmindex1];
 80017b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80017b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017b4:	3336      	adds	r3, #54	; 0x36
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            temprpm2 = table->rotates[rpmindex2];
 80017c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80017c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017c4:	3336      	adds	r3, #54	; 0x36
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017d0:	e068      	b.n	80018a4 <CalculateIgnition+0x5a0>
          }
          else if(rpm >= table->rotates[table->rotates_count - 1])
 80017d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80017d8:	3b01      	subs	r3, #1
 80017da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80017dc:	3336      	adds	r3, #54	; 0x36
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80017ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f2:	db1a      	blt.n	800182a <CalculateIgnition+0x526>
          {
            rpmindex1 = table->rotates_count - 2;
 80017f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80017fa:	3b02      	subs	r3, #2
 80017fc:	673b      	str	r3, [r7, #112]	; 0x70
            rpmindex2 = table->rotates_count - 1;
 80017fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001800:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001804:	3b01      	subs	r3, #1
 8001806:	66fb      	str	r3, [r7, #108]	; 0x6c
            temprpm1 = table->rotates[rpmindex1];
 8001808:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800180a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800180c:	3336      	adds	r3, #54	; 0x36
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            temprpm2 = table->rotates[rpmindex2];
 8001818:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800181a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800181c:	3336      	adds	r3, #54	; 0x36
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001828:	e03c      	b.n	80018a4 <CalculateIgnition+0x5a0>
          }
          else
          {
            for(int i = 1; i < table->rotates_count; i++)
 800182a:	2301      	movs	r3, #1
 800182c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800182e:	e033      	b.n	8001898 <CalculateIgnition+0x594>
            {
              temprpm1 = table->rotates[i-1];
 8001830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001832:	3b01      	subs	r3, #1
 8001834:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001836:	3336      	adds	r3, #54	; 0x36
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              temprpm2 = table->rotates[i];
 8001842:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001846:	3336      	adds	r3, #54	; 0x36
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              if(temprpm1 < rpm && temprpm2 > rpm)
 8001852:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001856:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800185a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800185e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001862:	d50e      	bpl.n	8001882 <CalculateIgnition+0x57e>
 8001864:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001868:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800186c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001874:	dd05      	ble.n	8001882 <CalculateIgnition+0x57e>
              {
                rpmindex1 = i-1;
 8001876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001878:	3b01      	subs	r3, #1
 800187a:	673b      	str	r3, [r7, #112]	; 0x70
                rpmindex2 = i;
 800187c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800187e:	66fb      	str	r3, [r7, #108]	; 0x6c
                break;
 8001880:	e010      	b.n	80018a4 <CalculateIgnition+0x5a0>
              }
              temprpm1 = 0.0f;
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              temprpm2 = 0.0f;
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            for(int i = 1; i < table->rotates_count; i++)
 8001892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001894:	3301      	adds	r3, #1
 8001896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800189a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800189e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d8c5      	bhi.n	8001830 <CalculateIgnition+0x52c>
            }
          }

          if((temprpm1 != 0.0f || temprpm2 != 0.0f) && (temppress1 != 0.0f || temppress2 != 0.0f))
 80018a4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80018a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b0:	d107      	bne.n	80018c2 <CalculateIgnition+0x5be>
 80018b2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80018b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018be:	f000 808a 	beq.w	80019d6 <CalculateIgnition+0x6d2>
 80018c2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80018c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ce:	d106      	bne.n	80018de <CalculateIgnition+0x5da>
 80018d0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80018d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018dc:	d07b      	beq.n	80019d6 <CalculateIgnition+0x6d2>
          {
            tempign11 = table->ignitions[pressindex1][rpmindex1];
 80018de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80018e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018e2:	0159      	lsls	r1, r3, #5
 80018e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018e6:	440b      	add	r3, r1
 80018e8:	3396      	adds	r3, #150	; 0x96
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	3304      	adds	r3, #4
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
            tempign12 = table->ignitions[pressindex1][rpmindex2];
 80018f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80018f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018f8:	0159      	lsls	r1, r3, #5
 80018fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018fc:	440b      	add	r3, r1
 80018fe:	3396      	adds	r3, #150	; 0x96
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	3304      	adds	r3, #4
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
            tempign21 = table->ignitions[pressindex2][rpmindex1];
 800190a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800190c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800190e:	0159      	lsls	r1, r3, #5
 8001910:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001912:	440b      	add	r3, r1
 8001914:	3396      	adds	r3, #150	; 0x96
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	3304      	adds	r3, #4
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	623b      	str	r3, [r7, #32]
            tempign22 = table->ignitions[pressindex2][rpmindex2];
 8001920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001922:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001924:	0159      	lsls	r1, r3, #5
 8001926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001928:	440b      	add	r3, r1
 800192a:	3396      	adds	r3, #150	; 0x96
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	3304      	adds	r3, #4
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	61fb      	str	r3, [r7, #28]

            mult_rpm = (rpm - temprpm1) / (temprpm2 - temprpm1);
 8001936:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800193a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800193e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001942:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001946:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800194a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800194e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001952:	edc7 7a05 	vstr	s15, [r7, #20]
            mult_press = (pressure - temppress1) / (temppress2 - temppress1);
 8001956:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800195a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800195e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001962:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001966:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800196a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800196e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001972:	edc7 7a04 	vstr	s15, [r7, #16]

            angle_1 = (tempign12 - tempign11) * mult_rpm + tempign11;
 8001976:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800197a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800197e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001982:	edd7 7a05 	vldr	s15, [r7, #20]
 8001986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800198a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800198e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001992:	edc7 7a03 	vstr	s15, [r7, #12]
            angle_2 = (tempign22 - tempign21) * mult_rpm + tempign21;
 8001996:	ed97 7a07 	vldr	s14, [r7, #28]
 800199a:	edd7 7a08 	vldr	s15, [r7, #32]
 800199e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80019a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019aa:	ed97 7a08 	vldr	s14, [r7, #32]
 80019ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b2:	edc7 7a02 	vstr	s15, [r7, #8]

            angle = (angle_2 - angle_1) * mult_press + angle_1;
 80019b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80019ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80019be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80019c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80019ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c


        }
      }

      if(table->temperatures_count >= 2)
 80019d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019d8:	f241 239c 	movw	r3, #4764	; 0x129c
 80019dc:	4413      	add	r3, r2
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	f240 80ca 	bls.w	8001b7a <CalculateIgnition+0x876>
      {
        if(temperature <= table->temperatures[0])
 80019e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019e8:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80019f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fc:	d80b      	bhi.n	8001a16 <CalculateIgnition+0x712>
          angle += table->temperature_ignitions[0];
 80019fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a00:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a10:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8001a14:	e06f      	b.n	8001af6 <CalculateIgnition+0x7f2>
        else if(temperature >= table->temperatures[table->temperatures_count - 1])
 8001a16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a18:	f241 239c 	movw	r3, #4764	; 0x129c
 8001a1c:	4413      	add	r3, r2
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a24:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3c:	db1e      	blt.n	8001a7c <CalculateIgnition+0x778>
        {
          tempindex1 = table->temperatures_count-2;
 8001a3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a40:	f241 239c 	movw	r3, #4764	; 0x129c
 8001a44:	4413      	add	r3, r2
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3b02      	subs	r3, #2
 8001a4a:	663b      	str	r3, [r7, #96]	; 0x60
          tempindex2 = table->temperatures_count-1;
 8001a4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a4e:	f241 239c 	movw	r3, #4764	; 0x129c
 8001a52:	4413      	add	r3, r2
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	65fb      	str	r3, [r7, #92]	; 0x5c
          temptemp1 = table->temperatures[tempindex1];
 8001a5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a5e:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	67bb      	str	r3, [r7, #120]	; 0x78
          temptemp2 = table->temperatures[tempindex2];
 8001a6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a6e:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	677b      	str	r3, [r7, #116]	; 0x74
 8001a7a:	e03c      	b.n	8001af6 <CalculateIgnition+0x7f2>
        }
        else
        {
          for(int i = 1; i < table->temperatures_count; i++)
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a80:	e031      	b.n	8001ae6 <CalculateIgnition+0x7e2>
          {
            temptemp1 = table->temperatures[i-1];
 8001a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a84:	3b01      	subs	r3, #1
 8001a86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a88:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	67bb      	str	r3, [r7, #120]	; 0x78
            temptemp2 = table->temperatures[i];
 8001a94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a98:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	677b      	str	r3, [r7, #116]	; 0x74
            if(temptemp1 < temperature && temptemp2 > temperature)
 8001aa4:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001aa8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001aac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab4:	d50e      	bpl.n	8001ad4 <CalculateIgnition+0x7d0>
 8001ab6:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001aba:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001abe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac6:	dd05      	ble.n	8001ad4 <CalculateIgnition+0x7d0>
            {
              tempindex1 = i-1;
 8001ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aca:	3b01      	subs	r3, #1
 8001acc:	663b      	str	r3, [r7, #96]	; 0x60
              tempindex2 = i;
 8001ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
              break;
 8001ad2:	e010      	b.n	8001af6 <CalculateIgnition+0x7f2>
            }
            temptemp1 = 0.0f;
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	67bb      	str	r3, [r7, #120]	; 0x78
            temptemp2 = 0.0f;
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	677b      	str	r3, [r7, #116]	; 0x74
          for(int i = 1; i < table->temperatures_count; i++)
 8001ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ae6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ae8:	f241 239c 	movw	r3, #4764	; 0x129c
 8001aec:	4413      	add	r3, r2
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d8c5      	bhi.n	8001a82 <CalculateIgnition+0x77e>
          }
        }
        if(temptemp1 != 0.0f || temptemp2 != 0.0f)
 8001af6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001afa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b02:	d106      	bne.n	8001b12 <CalculateIgnition+0x80e>
 8001b04:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001b08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b10:	d033      	beq.n	8001b7a <CalculateIgnition+0x876>
        {
          tempign1 = table->temperature_ignitions[tempindex1];
 8001b12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b16:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
          tempign2 = table->temperature_ignitions[tempindex2];
 8001b22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b26:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
          mult = (temperature - temptemp1) / (temptemp2 - temptemp1);
 8001b32:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b36:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001b3a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b3e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001b42:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001b46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b4e:	edc7 7a01 	vstr	s15, [r7, #4]
          angle += (tempign2 - tempign1) * mult + tempign1;
 8001b52:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001b56:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b66:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b6e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b76:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
        }
      }
    }
    angle += table->octane_corrector;
 8001b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b7c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001b80:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b88:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
  }
  return angle;
 8001b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b90:	ee07 3a90 	vmov	s15, r3
}
 8001b94:	eeb0 0a67 	vmov.f32	s0, s15
 8001b98:	3790      	adds	r7, #144	; 0x90
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop

08001ba0 <acis_loop_irq>:
//uint8_t ffsat[2][2048];
//uint8_t ffign[2][2048];
//uint16_t ffcnt[2] = {0,0};

inline void acis_loop_irq(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	; 0x30
 8001ba4:	af00      	add	r7, sp, #0
  if(acis_config.params.isIgnitionByHall)
 8001ba6:	4aab      	ldr	r2, [pc, #684]	; (8001e54 <acis_loop_irq+0x2b4>)
 8001ba8:	f645 3389 	movw	r3, #23433	; 0x5b89
 8001bac:	4413      	add	r3, r2
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f040 814a 	bne.w	8001e4a <acis_loop_irq+0x2aa>
    return;

  static float oldanglesbeforeignite[2] = {0,0};
  static uint8_t saturated[2] = { 1,1 };
  static uint8_t ignited[2] = { 1,1 };
  float angle[2] = { 0.0f, 0.0f };
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
  float anglesbeforeignite[2];
  angle[0] = csps_getangle14();
 8001bc2:	f000 fcff 	bl	80025c4 <csps_getangle14>
 8001bc6:	eef0 7a40 	vmov.f32	s15, s0
 8001bca:	edc7 7a03 	vstr	s15, [r7, #12]
  angle[1] = csps_getangle23from14(angle[0]);
 8001bce:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd6:	f000 fdad 	bl	8002734 <csps_getangle23from14>
 8001bda:	eef0 7a40 	vmov.f32	s15, s0
 8001bde:	edc7 7a04 	vstr	s15, [r7, #16]


  float uspa = csps_getuspa();
 8001be2:	f000 fddf 	bl	80027a4 <csps_getuspa>
 8001be6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  float period = csps_getperiod();
 8001bea:	f000 fde9 	bl	80027c0 <csps_getperiod>
 8001bee:	ed87 0a08 	vstr	s0, [r7, #32]
  float time_sat = IGN_SATURATION;
 8001bf2:	4b99      	ldr	r3, [pc, #612]	; (8001e58 <acis_loop_irq+0x2b8>)
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  float ignite = 0;
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]

  float found = csps_isfound();
 8001bfc:	f000 fdfa 	bl	80027f4 <csps_isfound>
 8001c00:	4603      	mov	r3, r0
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c0a:	edc7 7a06 	vstr	s15, [r7, #24]



  if(period < IGN_SATURATION + IGN_PULSE)
 8001c0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c12:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001e5c <acis_loop_irq+0x2bc>
 8001c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	d507      	bpl.n	8001c30 <acis_loop_irq+0x90>
  {
    time_sat = period * ((float)IGN_SATURATION / (float)(IGN_SATURATION + IGN_PULSE));
 8001c20:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c24:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001e60 <acis_loop_irq+0x2c0>
 8001c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c2c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  }

  float saturate = time_sat / uspa;
 8001c30:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001c34:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c3c:	edc7 7a05 	vstr	s15, [r7, #20]

  ignite = angle_ignite;
 8001c40:	4b88      	ldr	r3, [pc, #544]	; (8001e64 <acis_loop_irq+0x2c4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	61fb      	str	r3, [r7, #28]
  angle_saturate = saturate;
 8001c46:	4a88      	ldr	r2, [pc, #544]	; (8001e68 <acis_loop_irq+0x2c8>)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	6013      	str	r3, [r2, #0]


  if(found)
 8001c4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c58:	f000 80ee 	beq.w	8001e38 <acis_loop_irq+0x298>
  {
    for(int i = 0; i < 2; i++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c60:	e0e5      	b.n	8001e2e <acis_loop_irq+0x28e>
    {


      if(angle[i] < -ignite)
 8001c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3b24      	subs	r3, #36	; 0x24
 8001c6e:	ed93 7a00 	vldr	s14, [r3]
 8001c72:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c76:	eef1 7a67 	vneg.f32	s15, s15
 8001c7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c82:	d516      	bpl.n	8001cb2 <acis_loop_irq+0x112>
        anglesbeforeignite[i] = -angle[i] - ignite;
 8001c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3b24      	subs	r3, #36	; 0x24
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	eeb1 7a67 	vneg.f32	s14, s15
 8001c98:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ca8:	4413      	add	r3, r2
 8001caa:	3b2c      	subs	r3, #44	; 0x2c
 8001cac:	edc3 7a00 	vstr	s15, [r3]
 8001cb0:	e017      	b.n	8001ce2 <acis_loop_irq+0x142>
      else
        anglesbeforeignite[i] = 360.0f - angle[i] - ignite;
 8001cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001cba:	4413      	add	r3, r2
 8001cbc:	3b24      	subs	r3, #36	; 0x24
 8001cbe:	edd3 7a00 	vldr	s15, [r3]
 8001cc2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001e6c <acis_loop_irq+0x2cc>
 8001cc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cca:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001cda:	4413      	add	r3, r2
 8001cdc:	3b2c      	subs	r3, #44	; 0x2c
 8001cde:	edc3 7a00 	vstr	s15, [r3]

      if(anglesbeforeignite[i] - oldanglesbeforeignite[i] > 0.0f && anglesbeforeignite[i] - oldanglesbeforeignite[i] < 180.0f)
 8001ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001cea:	4413      	add	r3, r2
 8001cec:	3b2c      	subs	r3, #44	; 0x2c
 8001cee:	ed93 7a00 	vldr	s14, [r3]
 8001cf2:	4a5f      	ldr	r2, [pc, #380]	; (8001e70 <acis_loop_irq+0x2d0>)
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	edd3 7a00 	vldr	s15, [r3]
 8001cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0a:	dd22      	ble.n	8001d52 <acis_loop_irq+0x1b2>
 8001d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d14:	4413      	add	r3, r2
 8001d16:	3b2c      	subs	r3, #44	; 0x2c
 8001d18:	ed93 7a00 	vldr	s14, [r3]
 8001d1c:	4a54      	ldr	r2, [pc, #336]	; (8001e70 <acis_loop_irq+0x2d0>)
 8001d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2c:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001e74 <acis_loop_irq+0x2d4>
 8001d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d38:	d50b      	bpl.n	8001d52 <acis_loop_irq+0x1b2>
        anglesbeforeignite[i] = oldanglesbeforeignite[i];
 8001d3a:	4a4d      	ldr	r2, [pc, #308]	; (8001e70 <acis_loop_irq+0x2d0>)
 8001d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3b2c      	subs	r3, #44	; 0x2c
 8001d50:	601a      	str	r2, [r3, #0]

      if(anglesbeforeignite[i] - saturate < 0.0f)
 8001d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3b2c      	subs	r3, #44	; 0x2c
 8001d5e:	ed93 7a00 	vldr	s14, [r3]
 8001d62:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	d515      	bpl.n	8001da0 <acis_loop_irq+0x200>
      {
        if(!saturated[i] && !ignited[i])
 8001d74:	4a40      	ldr	r2, [pc, #256]	; (8001e78 <acis_loop_irq+0x2d8>)
 8001d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d78:	4413      	add	r3, r2
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10f      	bne.n	8001da0 <acis_loop_irq+0x200>
 8001d80:	4a3e      	ldr	r2, [pc, #248]	; (8001e7c <acis_loop_irq+0x2dc>)
 8001d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d84:	4413      	add	r3, r2
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d109      	bne.n	8001da0 <acis_loop_irq+0x200>
        {
          saturated[i] = 1;
 8001d8c:	4a3a      	ldr	r2, [pc, #232]	; (8001e78 <acis_loop_irq+0x2d8>)
 8001d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d90:	4413      	add	r3, r2
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
          acis_saturate(i);
 8001d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff f862 	bl	8000e64 <acis_saturate>
        }
      }

      if(oldanglesbeforeignite[i] - anglesbeforeignite[i] < -1.0f)
 8001da0:	4a33      	ldr	r2, [pc, #204]	; (8001e70 <acis_loop_irq+0x2d0>)
 8001da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	ed93 7a00 	vldr	s14, [r3]
 8001dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001db4:	4413      	add	r3, r2
 8001db6:	3b2c      	subs	r3, #44	; 0x2c
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dcc:	d51b      	bpl.n	8001e06 <acis_loop_irq+0x266>
      {
        if(!ignited[i] && saturated[i])
 8001dce:	4a2b      	ldr	r2, [pc, #172]	; (8001e7c <acis_loop_irq+0x2dc>)
 8001dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd2:	4413      	add	r3, r2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d11a      	bne.n	8001e10 <acis_loop_irq+0x270>
 8001dda:	4a27      	ldr	r2, [pc, #156]	; (8001e78 <acis_loop_irq+0x2d8>)
 8001ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d014      	beq.n	8001e10 <acis_loop_irq+0x270>
        {
          ignited[i] = 1;
 8001de6:	4a25      	ldr	r2, [pc, #148]	; (8001e7c <acis_loop_irq+0x2dc>)
 8001de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dea:	4413      	add	r3, r2
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
          saturated[i] = 0;
 8001df0:	4a21      	ldr	r2, [pc, #132]	; (8001e78 <acis_loop_irq+0x2d8>)
 8001df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df4:	4413      	add	r3, r2
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
          acis_ignite(i);
 8001dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f81c 	bl	8000e3c <acis_ignite>
 8001e04:	e004      	b.n	8001e10 <acis_loop_irq+0x270>
        }
      }
      else ignited[i] = 0;
 8001e06:	4a1d      	ldr	r2, [pc, #116]	; (8001e7c <acis_loop_irq+0x2dc>)
 8001e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0a:	4413      	add	r3, r2
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
      //ffanglbi[i][ffcnt[i]] = anglesbeforeignite[i];
      //ffsat[i][ffcnt[i]] = saturated[i];
      //ffign[i][ffcnt[i]] = ignited[i];
      //if(++ffcnt[i] >= 2048) ffcnt[i] = 0;

      oldanglesbeforeignite[i] = anglesbeforeignite[i];
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e18:	4413      	add	r3, r2
 8001e1a:	3b2c      	subs	r3, #44	; 0x2c
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4914      	ldr	r1, [pc, #80]	; (8001e70 <acis_loop_irq+0x2d0>)
 8001e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 2; i++)
 8001e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	f77f af16 	ble.w	8001c62 <acis_loop_irq+0xc2>
 8001e36:	e003      	b.n	8001e40 <acis_loop_irq+0x2a0>
    }
  }
  else
  {
    angle_ignite = 0;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <acis_loop_irq+0x2c4>)
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
  }

  acis_hall_loop();
 8001e40:	f7ff fa16 	bl	8001270 <acis_hall_loop>

  acis_ignition_loop();
 8001e44:	f7ff f822 	bl	8000e8c <acis_ignition_loop>
 8001e48:	e000      	b.n	8001e4c <acis_loop_irq+0x2ac>
    return;
 8001e4a:	bf00      	nop
}
 8001e4c:	3730      	adds	r7, #48	; 0x30
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20011c58 	.word	0x20011c58
 8001e58:	463b8000 	.word	0x463b8000
 8001e5c:	46629000 	.word	0x46629000
 8001e60:	3f53dcb1 	.word	0x3f53dcb1
 8001e64:	20011464 	.word	0x20011464
 8001e68:	20011468 	.word	0x20011468
 8001e6c:	43b40000 	.word	0x43b40000
 8001e70:	20011470 	.word	0x20011470
 8001e74:	43340000 	.word	0x43340000
 8001e78:	2001001c 	.word	0x2001001c
 8001e7c:	20010020 	.word	0x20010020

08001e80 <acis_loop>:
inline void acis_loop(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
  static uint8_t destination = 0;
  static uint8_t size = 0;
  uint8_t * pnt;
  do
  {
    if(!sending && protGetSize(&fifoSendingQueue) > 4)
 8001e86:	4b31      	ldr	r3, [pc, #196]	; (8001f4c <acis_loop+0xcc>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d133      	bne.n	8001ef6 <acis_loop+0x76>
 8001e8e:	4830      	ldr	r0, [pc, #192]	; (8001f50 <acis_loop+0xd0>)
 8001e90:	f003 f944 	bl	800511c <protGetSize>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d92d      	bls.n	8001ef6 <acis_loop+0x76>
    {
      protLook(&fifoSendingQueue,1,&size);
 8001e9a:	4a2e      	ldr	r2, [pc, #184]	; (8001f54 <acis_loop+0xd4>)
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	482c      	ldr	r0, [pc, #176]	; (8001f50 <acis_loop+0xd0>)
 8001ea0:	f003 fa54 	bl	800534c <protLook>
      protLook(&fifoSendingQueue,2,&destination);
 8001ea4:	4a2c      	ldr	r2, [pc, #176]	; (8001f58 <acis_loop+0xd8>)
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	4829      	ldr	r0, [pc, #164]	; (8001f50 <acis_loop+0xd0>)
 8001eaa:	f003 fa4f 	bl	800534c <protLook>
      if(protGetSize(&fifoSendingQueue) >= size)
 8001eae:	4828      	ldr	r0, [pc, #160]	; (8001f50 <acis_loop+0xd0>)
 8001eb0:	f003 f934 	bl	800511c <protGetSize>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <acis_loop+0xd4>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d31b      	bcc.n	8001ef6 <acis_loop+0x76>
      {
        pnt = buffSendingBuffer;
 8001ebe:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <acis_loop+0xdc>)
 8001ec0:	607b      	str	r3, [r7, #4]
        for(int i = 0; i < size; i++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	e009      	b.n	8001edc <acis_loop+0x5c>
          protPull(&fifoSendingQueue, pnt++);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	481f      	ldr	r0, [pc, #124]	; (8001f50 <acis_loop+0xd0>)
 8001ed2:	f003 fa2c 	bl	800532e <protPull>
        for(int i = 0; i < size; i++)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <acis_loop+0xd4>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	dbef      	blt.n	8001ec8 <acis_loop+0x48>
        if(destination)
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <acis_loop+0xd8>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <acis_loop+0x76>
          sending = 1;
 8001ef0:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <acis_loop+0xcc>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
      }
    }
    if(sending)
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <acis_loop+0xcc>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00e      	beq.n	8001f1c <acis_loop+0x9c>
    {
      if(acis_send_command(destination, buffSendingBuffer, size) != 0)
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <acis_loop+0xd8>)
 8001f00:	7818      	ldrb	r0, [r3, #0]
 8001f02:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <acis_loop+0xd4>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	4914      	ldr	r1, [pc, #80]	; (8001f5c <acis_loop+0xdc>)
 8001f0a:	f000 f871 	bl	8001ff0 <acis_send_command>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <acis_loop+0x9c>
      {
        sending = 0;
 8001f14:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <acis_loop+0xcc>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
        continue;
 8001f1a:	bf00      	nop
      }
    }
  } while(0);

  if(!acis_config.params.isIgnitionByHall)
 8001f1c:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <acis_loop+0xe0>)
 8001f1e:	f645 3389 	movw	r3, #23433	; 0x5b89
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d107      	bne.n	8001f3a <acis_loop+0xba>
  {
    angle_ignite = CalculateIgnition();
 8001f2a:	f7ff f9eb 	bl	8001304 <CalculateIgnition>
 8001f2e:	eef0 7a40 	vmov.f32	s15, s0
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <acis_loop+0xe4>)
 8001f34:	edc3 7a00 	vstr	s15, [r3]
  }
  else angle_ignite = 0.0f;
}
 8001f38:	e003      	b.n	8001f42 <acis_loop+0xc2>
  else angle_ignite = 0.0f;
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <acis_loop+0xe4>)
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2001147c 	.word	0x2001147c
 8001f50:	20011744 	.word	0x20011744
 8001f54:	2001147d 	.word	0x2001147d
 8001f58:	2001147e 	.word	0x2001147e
 8001f5c:	20011758 	.word	0x20011758
 8001f60:	20011c58 	.word	0x20011c58
 8001f64:	20011464 	.word	0x20011464

08001f68 <acis_parse_command>:

void acis_parse_command(eTransChannels xChaSrc, uint8_t * msgBuf, uint32_t length)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	73fb      	strb	r3, [r7, #15]
  switch(msgBuf[0])
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d000      	beq.n	8001f80 <acis_parse_command+0x18>
      PK_GeneralStatusResponse.Load = map_getpressure() / 110000.0f * 100.0f;
      PK_GeneralStatusResponse.IgnitionAngle = angle_ignite;
      protPushSequence(&fifoSendingQueue, &PK_GeneralStatusResponse, sizeof(PK_GeneralStatusResponse));
      break;
    default:
      break;
 8001f7e:	e029      	b.n	8001fd4 <acis_parse_command+0x6c>
      PK_GeneralStatusResponse.Destination = xChaSrc;
 8001f80:	4a16      	ldr	r2, [pc, #88]	; (8001fdc <acis_parse_command+0x74>)
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	7093      	strb	r3, [r2, #2]
      PK_GeneralStatusResponse.RPM = csps_getrpm();
 8001f86:	f000 fbff 	bl	8002788 <csps_getrpm>
 8001f8a:	eef0 7a40 	vmov.f32	s15, s0
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <acis_parse_command+0x74>)
 8001f90:	edc3 7a01 	vstr	s15, [r3, #4]
      PK_GeneralStatusResponse.Pressure = map_getpressure();
 8001f94:	f001 fc0e 	bl	80037b4 <map_getpressure>
 8001f98:	eef0 7a40 	vmov.f32	s15, s0
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <acis_parse_command+0x74>)
 8001f9e:	edc3 7a02 	vstr	s15, [r3, #8]
      PK_GeneralStatusResponse.Load = map_getpressure() / 110000.0f * 100.0f;
 8001fa2:	f001 fc07 	bl	80037b4 <map_getpressure>
 8001fa6:	eef0 6a40 	vmov.f32	s13, s0
 8001faa:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001fe0 <acis_parse_command+0x78>
 8001fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001fe4 <acis_parse_command+0x7c>
 8001fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <acis_parse_command+0x74>)
 8001fbc:	edc3 7a03 	vstr	s15, [r3, #12]
      PK_GeneralStatusResponse.IgnitionAngle = angle_ignite;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <acis_parse_command+0x80>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <acis_parse_command+0x74>)
 8001fc6:	6113      	str	r3, [r2, #16]
      protPushSequence(&fifoSendingQueue, &PK_GeneralStatusResponse, sizeof(PK_GeneralStatusResponse));
 8001fc8:	2214      	movs	r2, #20
 8001fca:	4904      	ldr	r1, [pc, #16]	; (8001fdc <acis_parse_command+0x74>)
 8001fcc:	4807      	ldr	r0, [pc, #28]	; (8001fec <acis_parse_command+0x84>)
 8001fce:	f003 f98e 	bl	80052ee <protPushSequence>
      break;
 8001fd2:	bf00      	nop
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20010000 	.word	0x20010000
 8001fe0:	47d6d800 	.word	0x47d6d800
 8001fe4:	42c80000 	.word	0x42c80000
 8001fe8:	20011464 	.word	0x20011464
 8001fec:	20011744 	.word	0x20011744

08001ff0 <acis_send_command>:

inline int8_t acis_send_command(eTransChannels xChaDst, void * msgBuf, uint32_t length)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	73fb      	strb	r3, [r7, #15]
  return xSender(xChaDst, (uint8_t*)msgBuf, length);
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	4618      	mov	r0, r3
 8002006:	f002 fa61 	bl	80044cc <xSender>
 800200a:	4603      	mov	r3, r0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <CRC16_RegisterHardware>:
#elif defined(CRC_HW)

static CRC_HandleTypeDef * handle_crc;

void CRC16_RegisterHardware(CRC_HandleTypeDef * hcrc)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  handle_crc = hcrc;
 800201c:	4a04      	ldr	r2, [pc, #16]	; (8002030 <CRC16_RegisterHardware+0x1c>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6013      	str	r3, [r2, #0]
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20011480 	.word	0x20011480

08002034 <CRC16_Generate>:

inline uint16_t CRC16_Generate(uint8_t * input, uint32_t size)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	81fb      	strh	r3, [r7, #14]
  if(handle_crc != NULL)
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <CRC16_Generate+0x34>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d008      	beq.n	800205c <CRC16_Generate+0x28>
  {
      result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <CRC16_Generate+0x34>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4618      	mov	r0, r3
 8002054:	f003 fe44 	bl	8005ce0 <HAL_CRC_Calculate>
 8002058:	4603      	mov	r3, r0
 800205a:	81fb      	strh	r3, [r7, #14]
  }
  return result;
 800205c:	89fb      	ldrh	r3, [r7, #14]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20011480 	.word	0x20011480

0800206c <CRC8_Generate>:

inline uint8_t CRC8_Generate(uint8_t * input, uint32_t size)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	81fb      	strh	r3, [r7, #14]
  if(handle_crc != NULL)
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <CRC8_Generate+0x44>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <CRC8_Generate+0x28>
  {
    result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <CRC8_Generate+0x44>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4618      	mov	r0, r3
 800208c:	f003 fe28 	bl	8005ce0 <HAL_CRC_Calculate>
 8002090:	4603      	mov	r3, r0
 8002092:	81fb      	strh	r3, [r7, #14]

  }
  return (result & 0xFF) ^ (result >> 8);
 8002094:	89fb      	ldrh	r3, [r7, #14]
 8002096:	b25a      	sxtb	r2, r3
 8002098:	89fb      	ldrh	r3, [r7, #14]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	b29b      	uxth	r3, r3
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	4053      	eors	r3, r2
 80020a2:	b25b      	sxtb	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20011480 	.word	0x20011480

080020b4 <csps_exti>:
{

}

inline void csps_exti(void)
{
 80020b4:	b5b0      	push	{r4, r5, r7, lr}
 80020b6:	b092      	sub	sp, #72	; 0x48
 80020b8:	af00      	add	r7, sp, #0
  static uint32_t t1 = 0;
  static uint32_t t2 = 0;
  uint32_t i, ticks, cur, prev;
  sCspsData data;
  float cs14, cs23;
  float average = 0;
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	63fb      	str	r3, [r7, #60]	; 0x3c
  float diff = 0;
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	637b      	str	r3, [r7, #52]	; 0x34
  float rpm_koff = 1.0f / 60.0f;
 80020c6:	4baf      	ldr	r3, [pc, #700]	; (8002384 <csps_exti+0x2d0>)
 80020c8:	63bb      	str	r3, [r7, #56]	; 0x38
  float uspa_koff = 1.0f / 10.0f;
 80020ca:	4baf      	ldr	r3, [pc, #700]	; (8002388 <csps_exti+0x2d4>)
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30

  cur = Delay_Tick;
 80020ce:	4baf      	ldr	r3, [pc, #700]	; (800238c <csps_exti+0x2d8>)
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  csps_pulse_last = cur;
 80020d4:	4aae      	ldr	r2, [pc, #696]	; (8002390 <csps_exti+0x2dc>)
 80020d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d8:	6013      	str	r3, [r2, #0]
  for(i = 1; i < IRQ_SIZE; i++)
 80020da:	2301      	movs	r3, #1
 80020dc:	647b      	str	r3, [r7, #68]	; 0x44
 80020de:	e00b      	b.n	80020f8 <csps_exti+0x44>
    cspc_irq_data[i - 1] = cspc_irq_data[i];
 80020e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e2:	3b01      	subs	r3, #1
 80020e4:	49ab      	ldr	r1, [pc, #684]	; (8002394 <csps_exti+0x2e0>)
 80020e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80020ec:	49a9      	ldr	r1, [pc, #676]	; (8002394 <csps_exti+0x2e0>)
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(i = 1; i < IRQ_SIZE; i++)
 80020f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f4:	3301      	adds	r3, #1
 80020f6:	647b      	str	r3, [r7, #68]	; 0x44
 80020f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020fa:	2b07      	cmp	r3, #7
 80020fc:	d9f0      	bls.n	80020e0 <csps_exti+0x2c>
  cspc_irq_data[IRQ_SIZE - 1] = cur;
 80020fe:	4aa5      	ldr	r2, [pc, #660]	; (8002394 <csps_exti+0x2e0>)
 8002100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002102:	61d3      	str	r3, [r2, #28]
  if(cspc_irq_data[0] == 0)
 8002104:	4ba3      	ldr	r3, [pc, #652]	; (8002394 <csps_exti+0x2e0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 8239 	beq.w	8002580 <csps_exti+0x4cc>
    return;
  prev = cspc_irq_data[IRQ_SIZE - 2];
 800210e:	4ba1      	ldr	r3, [pc, #644]	; (8002394 <csps_exti+0x2e0>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	643b      	str	r3, [r7, #64]	; 0x40
  csps_rotates = 1;
 8002114:	4ba0      	ldr	r3, [pc, #640]	; (8002398 <csps_exti+0x2e4>)
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]

  t1++;
 800211a:	4ba0      	ldr	r3, [pc, #640]	; (800239c <csps_exti+0x2e8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	4a9e      	ldr	r2, [pc, #632]	; (800239c <csps_exti+0x2e8>)
 8002122:	6013      	str	r3, [r2, #0]

  for(i = 1; i < IRQ_SIZE; i++)
 8002124:	2301      	movs	r3, #1
 8002126:	647b      	str	r3, [r7, #68]	; 0x44
 8002128:	e018      	b.n	800215c <csps_exti+0xa8>
  {
    average += DelayDiff(cspc_irq_data[i], cspc_irq_data[i - 1]);;
 800212a:	4a9a      	ldr	r2, [pc, #616]	; (8002394 <csps_exti+0x2e0>)
 800212c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800212e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002134:	3b01      	subs	r3, #1
 8002136:	4a97      	ldr	r2, [pc, #604]	; (8002394 <csps_exti+0x2e0>)
 8002138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213c:	4619      	mov	r1, r3
 800213e:	f000 fc3b 	bl	80029b8 <DelayDiff>
 8002142:	ee07 0a90 	vmov	s15, r0
 8002146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800214a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800214e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002152:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  for(i = 1; i < IRQ_SIZE; i++)
 8002156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002158:	3301      	adds	r3, #1
 800215a:	647b      	str	r3, [r7, #68]	; 0x44
 800215c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800215e:	2b07      	cmp	r3, #7
 8002160:	d9e3      	bls.n	800212a <csps_exti+0x76>
  }
  average /= (float)(IRQ_SIZE - 1);
 8002162:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002166:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 800216a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  avg = average / average_prev;
 8002172:	4b8b      	ldr	r3, [pc, #556]	; (80023a0 <csps_exti+0x2ec>)
 8002174:	ed93 7a00 	vldr	s14, [r3]
 8002178:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800217c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002180:	4b88      	ldr	r3, [pc, #544]	; (80023a4 <csps_exti+0x2f0>)
 8002182:	edc3 7a00 	vstr	s15, [r3]

  if(average / average_prev > 1.0f + 1.0f / IRQ_SIZE)
 8002186:	4b86      	ldr	r3, [pc, #536]	; (80023a0 <csps_exti+0x2ec>)
 8002188:	ed93 7a00 	vldr	s14, [r3]
 800218c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002194:	eeb7 7a02 	vmov.f32	s14, #114	; 0x3f900000  1.125
 8002198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800219c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a0:	dd26      	ble.n	80021f0 <csps_exti+0x13c>
  {
    if(++t2 == 2)
 80021a2:	4b81      	ldr	r3, [pc, #516]	; (80023a8 <csps_exti+0x2f4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	3301      	adds	r3, #1
 80021a8:	4a7f      	ldr	r2, [pc, #508]	; (80023a8 <csps_exti+0x2f4>)
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b7e      	ldr	r3, [pc, #504]	; (80023a8 <csps_exti+0x2f4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d12e      	bne.n	8002212 <csps_exti+0x15e>
    {
      ticks = t1;
 80021b4:	4b79      	ldr	r3, [pc, #484]	; (800239c <csps_exti+0x2e8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
      t1 = 0;
 80021ba:	4b78      	ldr	r3, [pc, #480]	; (800239c <csps_exti+0x2e8>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
      t2 = 0;
 80021c0:	4b79      	ldr	r3, [pc, #484]	; (80023a8 <csps_exti+0x2f4>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
      if(ticks != 116)
 80021c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c8:	2b74      	cmp	r3, #116	; 0x74
 80021ca:	d00a      	beq.n	80021e2 <csps_exti+0x12e>
        csps_errors += 1.0f;
 80021cc:	4b77      	ldr	r3, [pc, #476]	; (80023ac <csps_exti+0x2f8>)
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021da:	4b74      	ldr	r3, [pc, #464]	; (80023ac <csps_exti+0x2f8>)
 80021dc:	edc3 7a00 	vstr	s15, [r3]
 80021e0:	e017      	b.n	8002212 <csps_exti+0x15e>
      else
      {
        csps_last = cur;
 80021e2:	4a73      	ldr	r2, [pc, #460]	; (80023b0 <csps_exti+0x2fc>)
 80021e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e6:	6013      	str	r3, [r2, #0]
        csps_found = 1;
 80021e8:	4b72      	ldr	r3, [pc, #456]	; (80023b4 <csps_exti+0x300>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	e010      	b.n	8002212 <csps_exti+0x15e>
      }
    }
  }
  else if(t1 >= 116)
 80021f0:	4b6a      	ldr	r3, [pc, #424]	; (800239c <csps_exti+0x2e8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b73      	cmp	r3, #115	; 0x73
 80021f6:	d90c      	bls.n	8002212 <csps_exti+0x15e>
  {
    t1 = 1;
 80021f8:	4b68      	ldr	r3, [pc, #416]	; (800239c <csps_exti+0x2e8>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
    csps_errors += 1.0f;
 80021fe:	4b6b      	ldr	r3, [pc, #428]	; (80023ac <csps_exti+0x2f8>)
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002208:	ee77 7a87 	vadd.f32	s15, s15, s14
 800220c:	4b67      	ldr	r3, [pc, #412]	; (80023ac <csps_exti+0x2f8>)
 800220e:	edc3 7a00 	vstr	s15, [r3]
  }

  average_prev = average;
 8002212:	4a63      	ldr	r2, [pc, #396]	; (80023a0 <csps_exti+0x2ec>)
 8002214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002216:	6013      	str	r3, [r2, #0]

  if(csps_found)
 8002218:	4b66      	ldr	r3, [pc, #408]	; (80023b4 <csps_exti+0x300>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8162 	beq.w	80024e8 <csps_exti+0x434>
  {
    switch(t1)
 8002224:	4b5d      	ldr	r3, [pc, #372]	; (800239c <csps_exti+0x2e8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <csps_exti+0x17e>
 800222c:	2b01      	cmp	r3, #1
 800222e:	d029      	beq.n	8002284 <csps_exti+0x1d0>
 8002230:	e036      	b.n	80022a0 <csps_exti+0x1ec>
    {
      case 0:
        csps_angle14 = ANGLE_INITIAL;
 8002232:	4b61      	ldr	r3, [pc, #388]	; (80023b8 <csps_exti+0x304>)
 8002234:	4a61      	ldr	r2, [pc, #388]	; (80023bc <csps_exti+0x308>)
 8002236:	601a      	str	r2, [r3, #0]
        if (ANGLE_INITIAL > 0)
          csps_angle23 = ANGLE_INITIAL - 180.0f;
        else
          csps_angle23 = ANGLE_INITIAL + 180.0f;
 8002238:	4b61      	ldr	r3, [pc, #388]	; (80023c0 <csps_exti+0x30c>)
 800223a:	4a62      	ldr	r2, [pc, #392]	; (80023c4 <csps_exti+0x310>)
 800223c:	601a      	str	r2, [r3, #0]
        cs14_p = csps_angle14 - 3.0f;
 800223e:	4b5e      	ldr	r3, [pc, #376]	; (80023b8 <csps_exti+0x304>)
 8002240:	edd3 7a00 	vldr	s15, [r3]
 8002244:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800224c:	4b5e      	ldr	r3, [pc, #376]	; (80023c8 <csps_exti+0x314>)
 800224e:	edc3 7a00 	vstr	s15, [r3]
        cs23_p = csps_angle23 - 3.0f;
 8002252:	4b5b      	ldr	r3, [pc, #364]	; (80023c0 <csps_exti+0x30c>)
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800225c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002260:	4b5a      	ldr	r3, [pc, #360]	; (80023cc <csps_exti+0x318>)
 8002262:	edc3 7a00 	vstr	s15, [r3]
        prev = DelayDiff(cur, (DelayDiff(cur, prev) / 3));
 8002266:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002268:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800226a:	f000 fba5 	bl	80029b8 <DelayDiff>
 800226e:	4602      	mov	r2, r0
 8002270:	4b57      	ldr	r3, [pc, #348]	; (80023d0 <csps_exti+0x31c>)
 8002272:	fba3 2302 	umull	r2, r3, r3, r2
 8002276:	085b      	lsrs	r3, r3, #1
 8002278:	4619      	mov	r1, r3
 800227a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800227c:	f000 fb9c 	bl	80029b8 <DelayDiff>
 8002280:	6438      	str	r0, [r7, #64]	; 0x40
        break;
 8002282:	e0b6      	b.n	80023f2 <csps_exti+0x33e>
      case 1:
        prev = DelayDiff(cur, (DelayDiff(cur, prev) / 3)); // @suppress("No break at end of case")
 8002284:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002288:	f000 fb96 	bl	80029b8 <DelayDiff>
 800228c:	4602      	mov	r2, r0
 800228e:	4b50      	ldr	r3, [pc, #320]	; (80023d0 <csps_exti+0x31c>)
 8002290:	fba3 2302 	umull	r2, r3, r3, r2
 8002294:	085b      	lsrs	r3, r3, #1
 8002296:	4619      	mov	r1, r3
 8002298:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800229a:	f000 fb8d 	bl	80029b8 <DelayDiff>
 800229e:	6438      	str	r0, [r7, #64]	; 0x40
      default:
        cs14 = csps_angle14 + 3.0f;
 80022a0:	4b45      	ldr	r3, [pc, #276]	; (80023b8 <csps_exti+0x304>)
 80022a2:	edd3 7a00 	vldr	s15, [r3]
 80022a6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80022aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        if(cs14 > 180.0f) csps_angle14 = cs14 - 360.0f;
 80022b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80022b6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80023d4 <csps_exti+0x320>
 80022ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c2:	dd09      	ble.n	80022d8 <csps_exti+0x224>
 80022c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80022c8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80023d8 <csps_exti+0x324>
 80022cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022d0:	4b39      	ldr	r3, [pc, #228]	; (80023b8 <csps_exti+0x304>)
 80022d2:	edc3 7a00 	vstr	s15, [r3]
 80022d6:	e002      	b.n	80022de <csps_exti+0x22a>
        else csps_angle14 = cs14;
 80022d8:	4a37      	ldr	r2, [pc, #220]	; (80023b8 <csps_exti+0x304>)
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	6013      	str	r3, [r2, #0]

        cs23 = csps_angle23 + 3.0f;
 80022de:	4b38      	ldr	r3, [pc, #224]	; (80023c0 <csps_exti+0x30c>)
 80022e0:	edd3 7a00 	vldr	s15, [r3]
 80022e4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80022e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022ec:	edc7 7a08 	vstr	s15, [r7, #32]
        if(cs23 > 180.0f) csps_angle23 = cs23 - 360.0f;
 80022f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80022f4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80023d4 <csps_exti+0x320>
 80022f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002300:	dd09      	ble.n	8002316 <csps_exti+0x262>
 8002302:	edd7 7a08 	vldr	s15, [r7, #32]
 8002306:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80023d8 <csps_exti+0x324>
 800230a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800230e:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <csps_exti+0x30c>)
 8002310:	edc3 7a00 	vstr	s15, [r3]
 8002314:	e002      	b.n	800231c <csps_exti+0x268>
        else csps_angle23 = cs23;
 8002316:	4a2a      	ldr	r2, [pc, #168]	; (80023c0 <csps_exti+0x30c>)
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	6013      	str	r3, [r2, #0]

        cs14_p += 3.0f;
 800231c:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <csps_exti+0x314>)
 800231e:	edd3 7a00 	vldr	s15, [r3]
 8002322:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002326:	ee77 7a87 	vadd.f32	s15, s15, s14
 800232a:	4b27      	ldr	r3, [pc, #156]	; (80023c8 <csps_exti+0x314>)
 800232c:	edc3 7a00 	vstr	s15, [r3]
        if(cs14_p > 180.0f)
 8002330:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <csps_exti+0x314>)
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80023d4 <csps_exti+0x320>
 800233a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800233e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002342:	dd09      	ble.n	8002358 <csps_exti+0x2a4>
          cs14_p -= 360.0f;
 8002344:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <csps_exti+0x314>)
 8002346:	edd3 7a00 	vldr	s15, [r3]
 800234a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80023d8 <csps_exti+0x324>
 800234e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <csps_exti+0x314>)
 8002354:	edc3 7a00 	vstr	s15, [r3]

        cs23_p += 3.0f;
 8002358:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <csps_exti+0x318>)
 800235a:	edd3 7a00 	vldr	s15, [r3]
 800235e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002362:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002366:	4b19      	ldr	r3, [pc, #100]	; (80023cc <csps_exti+0x318>)
 8002368:	edc3 7a00 	vstr	s15, [r3]
        if(cs23_p > 180.0f)
 800236c:	4b17      	ldr	r3, [pc, #92]	; (80023cc <csps_exti+0x318>)
 800236e:	edd3 7a00 	vldr	s15, [r3]
 8002372:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80023d4 <csps_exti+0x320>
 8002376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237e:	dc2d      	bgt.n	80023dc <csps_exti+0x328>
          cs23_p -= 360.0f;
        break;
 8002380:	e036      	b.n	80023f0 <csps_exti+0x33c>
 8002382:	bf00      	nop
 8002384:	3c888889 	.word	0x3c888889
 8002388:	3dcccccd 	.word	0x3dcccccd
 800238c:	40000c00 	.word	0x40000c00
 8002390:	200114a8 	.word	0x200114a8
 8002394:	20011484 	.word	0x20011484
 8002398:	200114a5 	.word	0x200114a5
 800239c:	200116c4 	.word	0x200116c4
 80023a0:	200116c8 	.word	0x200116c8
 80023a4:	200114c0 	.word	0x200114c0
 80023a8:	200116cc 	.word	0x200116cc
 80023ac:	200114b0 	.word	0x200114b0
 80023b0:	200114ac 	.word	0x200114ac
 80023b4:	200114a4 	.word	0x200114a4
 80023b8:	200116d0 	.word	0x200116d0
 80023bc:	c2e40000 	.word	0xc2e40000
 80023c0:	200116d4 	.word	0x200116d4
 80023c4:	42840000 	.word	0x42840000
 80023c8:	200116d8 	.word	0x200116d8
 80023cc:	200116dc 	.word	0x200116dc
 80023d0:	aaaaaaab 	.word	0xaaaaaaab
 80023d4:	43340000 	.word	0x43340000
 80023d8:	43b40000 	.word	0x43b40000
          cs23_p -= 360.0f;
 80023dc:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <csps_exti+0x4d4>)
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800258c <csps_exti+0x4d8>
 80023e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023ea:	4b67      	ldr	r3, [pc, #412]	; (8002588 <csps_exti+0x4d4>)
 80023ec:	edc3 7a00 	vstr	s15, [r3]
        break;
 80023f0:	bf00      	nop
    }

    if(csps_rpm == 0.0f)
 80023f2:	4b67      	ldr	r3, [pc, #412]	; (8002590 <csps_exti+0x4dc>)
 80023f4:	edd3 7a00 	vldr	s15, [r3]
 80023f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002400:	d102      	bne.n	8002408 <csps_exti+0x354>
      rpm_koff = 1.0f;
 8002402:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002406:	63bb      	str	r3, [r7, #56]	; 0x38

    diff = (float)DelayDiff(cur, prev);
 8002408:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800240a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800240c:	f000 fad4 	bl	80029b8 <DelayDiff>
 8002410:	ee07 0a90 	vmov	s15, r0
 8002414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002418:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    if(csps_period > 1000000.0f)
 800241c:	4b5d      	ldr	r3, [pc, #372]	; (8002594 <csps_exti+0x4e0>)
 800241e:	edd3 7a00 	vldr	s15, [r3]
 8002422:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002598 <csps_exti+0x4e4>
 8002426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800242a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242e:	dd02      	ble.n	8002436 <csps_exti+0x382>
      csps_period = 1000000.0f;
 8002430:	4b58      	ldr	r3, [pc, #352]	; (8002594 <csps_exti+0x4e0>)
 8002432:	4a5a      	ldr	r2, [pc, #360]	; (800259c <csps_exti+0x4e8>)
 8002434:	601a      	str	r2, [r3, #0]

    csps_period = csps_period * (1.0f - rpm_koff) + (diff * 120.0f) * rpm_koff;
 8002436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800243a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800243e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002442:	4b54      	ldr	r3, [pc, #336]	; (8002594 <csps_exti+0x4e0>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800244c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002450:	eddf 6a53 	vldr	s13, [pc, #332]	; 80025a0 <csps_exti+0x4ec>
 8002454:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002458:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800245c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002464:	4b4b      	ldr	r3, [pc, #300]	; (8002594 <csps_exti+0x4e0>)
 8002466:	edc3 7a00 	vstr	s15, [r3]
    csps_rpm = 1000000.0f / csps_period * 60.0f;
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <csps_exti+0x4e0>)
 800246c:	ed93 7a00 	vldr	s14, [r3]
 8002470:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002598 <csps_exti+0x4e4>
 8002474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002478:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80025a4 <csps_exti+0x4f0>
 800247c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002480:	4b43      	ldr	r3, [pc, #268]	; (8002590 <csps_exti+0x4dc>)
 8002482:	edc3 7a00 	vstr	s15, [r3]
    csps_uspa = csps_uspa * (1.0f - uspa_koff) + (diff / 3.0f) * uspa_koff;
 8002486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800248a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800248e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002492:	4b45      	ldr	r3, [pc, #276]	; (80025a8 <csps_exti+0x4f4>)
 8002494:	edd3 7a00 	vldr	s15, [r3]
 8002498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800249c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024a0:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 80024a4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80024a8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b4:	4b3c      	ldr	r3, [pc, #240]	; (80025a8 <csps_exti+0x4f4>)
 80024b6:	edc3 7a00 	vstr	s15, [r3]

    data.AngleCur14 = csps_angle14;
 80024ba:	4b3c      	ldr	r3, [pc, #240]	; (80025ac <csps_exti+0x4f8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60bb      	str	r3, [r7, #8]
    data.AngleCur23 = csps_angle23;
 80024c0:	4b3b      	ldr	r3, [pc, #236]	; (80025b0 <csps_exti+0x4fc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	613b      	str	r3, [r7, #16]
    data.AnglePrev14 = cs14_p;
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <csps_exti+0x500>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	60fb      	str	r3, [r7, #12]
    data.AnglePrev23 = cs23_p;
 80024cc:	4b2e      	ldr	r3, [pc, #184]	; (8002588 <csps_exti+0x4d4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	617b      	str	r3, [r7, #20]
    data.DelayPrev = prev;
 80024d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d4:	607b      	str	r3, [r7, #4]
    data.DelayCur = cur;
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	603b      	str	r3, [r7, #0]
    data.RPM = csps_rpm;
 80024da:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <csps_exti+0x4dc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	61bb      	str	r3, [r7, #24]
    data.uSPA = csps_uspa;
 80024e0:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <csps_exti+0x4f4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	e029      	b.n	800253c <csps_exti+0x488>

  }
  else
  {
    data.AngleCur14 = 0;
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
    data.AngleCur23 = 0;
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	613b      	str	r3, [r7, #16]
    data.AnglePrev14 = 0;
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
    data.AnglePrev23 = 0;
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
    data.DelayPrev = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	607b      	str	r3, [r7, #4]
    data.DelayCur = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	603b      	str	r3, [r7, #0]
    data.RPM = 0;
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
    csps_rpm = 0;
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <csps_exti+0x4dc>)
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
    data.uSPA = 1.0f / csps_rpm;
 8002516:	4b1e      	ldr	r3, [pc, #120]	; (8002590 <csps_exti+0x4dc>)
 8002518:	ed93 7a00 	vldr	s14, [r3]
 800251c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002524:	edc7 7a07 	vstr	s15, [r7, #28]
    csps_period = 1.0f / csps_rpm;
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <csps_exti+0x4dc>)
 800252a:	ed93 7a00 	vldr	s14, [r3]
 800252e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002536:	4b17      	ldr	r3, [pc, #92]	; (8002594 <csps_exti+0x4e0>)
 8002538:	edc3 7a00 	vstr	s15, [r3]
  }
  CspsData[dataindex] = data;
 800253c:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <csps_exti+0x504>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4a1e      	ldr	r2, [pc, #120]	; (80025bc <csps_exti+0x508>)
 8002542:	015b      	lsls	r3, r3, #5
 8002544:	4413      	add	r3, r2
 8002546:	461d      	mov	r5, r3
 8002548:	463c      	mov	r4, r7
 800254a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002552:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  CspsDataPtr = &CspsData[dataindex];
 8002556:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <csps_exti+0x504>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	015b      	lsls	r3, r3, #5
 800255c:	4a17      	ldr	r2, [pc, #92]	; (80025bc <csps_exti+0x508>)
 800255e:	4413      	add	r3, r2
 8002560:	4a17      	ldr	r2, [pc, #92]	; (80025c0 <csps_exti+0x50c>)
 8002562:	6013      	str	r3, [r2, #0]
  if(++dataindex >= DATA_SIZE)
 8002564:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <csps_exti+0x504>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	b2da      	uxtb	r2, r3
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <csps_exti+0x504>)
 800256e:	701a      	strb	r2, [r3, #0]
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <csps_exti+0x504>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b0f      	cmp	r3, #15
 8002576:	d904      	bls.n	8002582 <csps_exti+0x4ce>
    dataindex = 0;
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <csps_exti+0x504>)
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	e000      	b.n	8002582 <csps_exti+0x4ce>
    return;
 8002580:	bf00      	nop

}
 8002582:	3748      	adds	r7, #72	; 0x48
 8002584:	46bd      	mov	sp, r7
 8002586:	bdb0      	pop	{r4, r5, r7, pc}
 8002588:	200116dc 	.word	0x200116dc
 800258c:	43b40000 	.word	0x43b40000
 8002590:	200114b4 	.word	0x200114b4
 8002594:	200114bc 	.word	0x200114bc
 8002598:	49742400 	.word	0x49742400
 800259c:	49742400 	.word	0x49742400
 80025a0:	42f00000 	.word	0x42f00000
 80025a4:	42700000 	.word	0x42700000
 80025a8:	200114b8 	.word	0x200114b8
 80025ac:	200116d0 	.word	0x200116d0
 80025b0:	200116d4 	.word	0x200116d4
 80025b4:	200116d8 	.word	0x200116d8
 80025b8:	200116e0 	.word	0x200116e0
 80025bc:	200114c4 	.word	0x200114c4
 80025c0:	20010024 	.word	0x20010024

080025c4 <csps_getangle14>:
  else return 360 + a - b;
}
*/
volatile float rettttt;
inline float csps_getangle14(void)
{
 80025c4:	b5b0      	push	{r4, r5, r7, lr}
 80025c6:	b08e      	sub	sp, #56	; 0x38
 80025c8:	af00      	add	r7, sp, #0
  static float angle_prev = 0;
  float now = Delay_Tick;
 80025ca:	4b53      	ldr	r3, [pc, #332]	; (8002718 <csps_getangle14+0x154>)
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	ee07 3a90 	vmov	s15, r3
 80025d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025d6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float angle, acur, aprev, mult, cur;
  sCspsData data = *CspsDataPtr;
 80025da:	4b50      	ldr	r3, [pc, #320]	; (800271c <csps_getangle14+0x158>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	463c      	mov	r4, r7
 80025e0:	461d      	mov	r5, r3
 80025e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80025ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  cur = DelayDiff(data.DelayCur, data.DelayPrev);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 f9df 	bl	80029b8 <DelayDiff>
 80025fa:	ee07 0a90 	vmov	s15, r0
 80025fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002602:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  now = DelayDiff(now, data.DelayPrev);
 8002606:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800260a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4619      	mov	r1, r3
 8002612:	ee17 0a90 	vmov	r0, s15
 8002616:	f000 f9cf 	bl	80029b8 <DelayDiff>
 800261a:	ee07 0a90 	vmov	s15, r0
 800261e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002622:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

  acur = data.AngleCur14;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
  aprev = data.AnglePrev14;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	627b      	str	r3, [r7, #36]	; 0x24

  if(acur < aprev)
 800262e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002632:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002636:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263e:	d507      	bpl.n	8002650 <csps_getangle14+0x8c>
    acur += 360.0f;
 8002640:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002644:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002720 <csps_getangle14+0x15c>
 8002648:	ee77 7a87 	vadd.f32	s15, s15, s14
 800264c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

  angle = acur - aprev;
 8002650:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002654:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800265c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  mult = angle / cur;
 8002660:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002664:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800266c:	edc7 7a08 	vstr	s15, [r7, #32]
  angle = mult * now + aprev;
 8002670:	ed97 7a08 	vldr	s14, [r7, #32]
 8002674:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002684:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

  while(angle > 180.0f)
 8002688:	e007      	b.n	800269a <csps_getangle14+0xd6>
    angle -= 360.0f;
 800268a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800268e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002720 <csps_getangle14+0x15c>
 8002692:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002696:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  while(angle > 180.0f)
 800269a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800269e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002724 <csps_getangle14+0x160>
 80026a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026aa:	dcee      	bgt.n	800268a <csps_getangle14+0xc6>

  if((angle - angle_prev < 0.0f && angle - angle_prev > -90.0f) || angle - angle_prev > 90.0f)
 80026ac:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <csps_getangle14+0x164>)
 80026ae:	edd3 7a00 	vldr	s15, [r3]
 80026b2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80026b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c2:	d50d      	bpl.n	80026e0 <csps_getangle14+0x11c>
 80026c4:	4b18      	ldr	r3, [pc, #96]	; (8002728 <csps_getangle14+0x164>)
 80026c6:	edd3 7a00 	vldr	s15, [r3]
 80026ca:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80026ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800272c <csps_getangle14+0x168>
 80026d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026de:	dc0d      	bgt.n	80026fc <csps_getangle14+0x138>
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <csps_getangle14+0x164>)
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80026ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002730 <csps_getangle14+0x16c>
 80026f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fa:	dd02      	ble.n	8002702 <csps_getangle14+0x13e>
  {
    angle = angle_prev;
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <csps_getangle14+0x164>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	637b      	str	r3, [r7, #52]	; 0x34
  }
  angle_prev = angle;
 8002702:	4a09      	ldr	r2, [pc, #36]	; (8002728 <csps_getangle14+0x164>)
 8002704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002706:	6013      	str	r3, [r2, #0]

  return angle;
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	ee07 3a90 	vmov	s15, r3
}
 800270e:	eeb0 0a67 	vmov.f32	s0, s15
 8002712:	3738      	adds	r7, #56	; 0x38
 8002714:	46bd      	mov	sp, r7
 8002716:	bdb0      	pop	{r4, r5, r7, pc}
 8002718:	40000c00 	.word	0x40000c00
 800271c:	20010024 	.word	0x20010024
 8002720:	43b40000 	.word	0x43b40000
 8002724:	43340000 	.word	0x43340000
 8002728:	200116e4 	.word	0x200116e4
 800272c:	c2b40000 	.word	0xc2b40000
 8002730:	42b40000 	.word	0x42b40000

08002734 <csps_getangle23from14>:

  return angle;
}

inline float csps_getangle23from14(float angle)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	ed87 0a01 	vstr	s0, [r7, #4]
  if(angle > 0.0f) angle -= 180.0f;
 800273e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002742:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274a:	dd08      	ble.n	800275e <csps_getangle23from14+0x2a>
 800274c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002750:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002784 <csps_getangle23from14+0x50>
 8002754:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002758:	edc7 7a01 	vstr	s15, [r7, #4]
 800275c:	e007      	b.n	800276e <csps_getangle23from14+0x3a>
  else angle += 180.0f;
 800275e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002762:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002784 <csps_getangle23from14+0x50>
 8002766:	ee77 7a87 	vadd.f32	s15, s15, s14
 800276a:	edc7 7a01 	vstr	s15, [r7, #4]
  return angle;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	ee07 3a90 	vmov	s15, r3
}
 8002774:	eeb0 0a67 	vmov.f32	s0, s15
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	43340000 	.word	0x43340000

08002788 <csps_getrpm>:

inline float csps_getrpm(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return csps_rpm;
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <csps_getrpm+0x18>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	ee07 3a90 	vmov	s15, r3
}
 8002794:	eeb0 0a67 	vmov.f32	s0, s15
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	200114b4 	.word	0x200114b4

080027a4 <csps_getuspa>:

inline float csps_getuspa(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return csps_uspa;
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <csps_getuspa+0x18>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	ee07 3a90 	vmov	s15, r3
}
 80027b0:	eeb0 0a67 	vmov.f32	s0, s15
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	200114b8 	.word	0x200114b8

080027c0 <csps_getperiod>:

inline float csps_getperiod(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return csps_period;
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <csps_getperiod+0x18>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	ee07 3a90 	vmov	s15, r3
}
 80027cc:	eeb0 0a67 	vmov.f32	s0, s15
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	200114bc 	.word	0x200114bc

080027dc <csps_isrotates>:

inline uint8_t csps_isrotates(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return csps_rotates;
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <csps_isrotates+0x14>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	b2db      	uxtb	r3, r3
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	200114a5 	.word	0x200114a5

080027f4 <csps_isfound>:

inline uint8_t csps_isfound(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return csps_found;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <csps_isfound+0x14>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	b2db      	uxtb	r3, r3
}
 80027fe:	4618      	mov	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	200114a4 	.word	0x200114a4

0800280c <csps_loop>:
{
  return csps_errors > 3.0f;
}

inline void csps_loop(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
  static uint32_t last_error_null = 0;

  uint32_t pulse_last = csps_pulse_last;
 8002812:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <csps_loop+0xe4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60bb      	str	r3, [r7, #8]
  uint32_t last = csps_last;
 8002818:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <csps_loop+0xe8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	607b      	str	r3, [r7, #4]
  uint32_t now = Delay_Tick;
 800281e:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <csps_loop+0xec>)
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	603b      	str	r3, [r7, #0]

  if(DelayDiff(now, pulse_last) > 50000)
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	6838      	ldr	r0, [r7, #0]
 8002828:	f000 f8c6 	bl	80029b8 <DelayDiff>
 800282c:	4602      	mov	r2, r0
 800282e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002832:	429a      	cmp	r2, r3
 8002834:	d921      	bls.n	800287a <csps_loop+0x6e>
  {
    pulse_last = now;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	60bb      	str	r3, [r7, #8]
    for(int i = 0; i < IRQ_SIZE; i++)
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	e007      	b.n	8002850 <csps_loop+0x44>
      cspc_irq_data[i] = 0;
 8002840:	4a2e      	ldr	r2, [pc, #184]	; (80028fc <csps_loop+0xf0>)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2100      	movs	r1, #0
 8002846:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0; i < IRQ_SIZE; i++)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3301      	adds	r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b07      	cmp	r3, #7
 8002854:	ddf4      	ble.n	8002840 <csps_loop+0x34>
    csps_found = 0;
 8002856:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <csps_loop+0xf4>)
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
    csps_rpm = 0;
 800285c:	4b29      	ldr	r3, [pc, #164]	; (8002904 <csps_loop+0xf8>)
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
    csps_period = 1.0f / csps_rpm;
 8002864:	4b27      	ldr	r3, [pc, #156]	; (8002904 <csps_loop+0xf8>)
 8002866:	ed93 7a00 	vldr	s14, [r3]
 800286a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800286e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002872:	4b25      	ldr	r3, [pc, #148]	; (8002908 <csps_loop+0xfc>)
 8002874:	edc3 7a00 	vstr	s15, [r3]
 8002878:	e01d      	b.n	80028b6 <csps_loop+0xaa>
  }
  else if(DelayDiff(now, last) > 3000000)
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	6838      	ldr	r0, [r7, #0]
 800287e:	f000 f89b 	bl	80029b8 <DelayDiff>
 8002882:	4602      	mov	r2, r0
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <csps_loop+0x100>)
 8002886:	429a      	cmp	r2, r3
 8002888:	d915      	bls.n	80028b6 <csps_loop+0xaa>
  {
    last = now;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	607b      	str	r3, [r7, #4]
    csps_found = 0;
 800288e:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <csps_loop+0xf4>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
    csps_rpm = 0;
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <csps_loop+0xf8>)
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
    csps_rotates = 0;
 800289c:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <csps_loop+0x104>)
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
    csps_period = 1.0f / csps_rpm;
 80028a2:	4b18      	ldr	r3, [pc, #96]	; (8002904 <csps_loop+0xf8>)
 80028a4:	ed93 7a00 	vldr	s14, [r3]
 80028a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028b0:	4b15      	ldr	r3, [pc, #84]	; (8002908 <csps_loop+0xfc>)
 80028b2:	edc3 7a00 	vstr	s15, [r3]
  }

  if(DelayDiff(now, last_error_null) > 50000)
 80028b6:	4b17      	ldr	r3, [pc, #92]	; (8002914 <csps_loop+0x108>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4619      	mov	r1, r3
 80028bc:	6838      	ldr	r0, [r7, #0]
 80028be:	f000 f87b 	bl	80029b8 <DelayDiff>
 80028c2:	4602      	mov	r2, r0
 80028c4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d90c      	bls.n	80028e6 <csps_loop+0xda>
  {
    csps_errors *= 0.95f;
 80028cc:	4b12      	ldr	r3, [pc, #72]	; (8002918 <csps_loop+0x10c>)
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800291c <csps_loop+0x110>
 80028d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028da:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <csps_loop+0x10c>)
 80028dc:	edc3 7a00 	vstr	s15, [r3]
    last_error_null = now;
 80028e0:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <csps_loop+0x108>)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6013      	str	r3, [r2, #0]
  }

}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	200114a8 	.word	0x200114a8
 80028f4:	200114ac 	.word	0x200114ac
 80028f8:	40000c00 	.word	0x40000c00
 80028fc:	20011484 	.word	0x20011484
 8002900:	200114a4 	.word	0x200114a4
 8002904:	200114b4 	.word	0x200114b4
 8002908:	200114bc 	.word	0x200114bc
 800290c:	002dc6c0 	.word	0x002dc6c0
 8002910:	200114a5 	.word	0x200114a5
 8002914:	200116e8 	.word	0x200116e8
 8002918:	200114b0 	.word	0x200114b0
 800291c:	3f733333 	.word	0x3f733333

08002920 <DelayInit>:
static TIM_HandleTypeDef htim_delay;

volatile uint32_t DelStart[COUNTERS];

void DelayInit(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
  __DELAY_TIM_CLK_ENABLE();
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <DelayInit+0x88>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <DelayInit+0x88>)
 800292c:	f043 0308 	orr.w	r3, r3, #8
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <DelayInit+0x88>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig;
    TIM_MasterConfigTypeDef sMasterConfig;

    htim_delay.Instance = DelayTimer;
 800293e:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <DelayInit+0x8c>)
 8002940:	4a1b      	ldr	r2, [pc, #108]	; (80029b0 <DelayInit+0x90>)
 8002942:	601a      	str	r2, [r3, #0]
    htim_delay.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) - 1;
 8002944:	f004 fd8e 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
 8002948:	4603      	mov	r3, r0
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4a19      	ldr	r2, [pc, #100]	; (80029b4 <DelayInit+0x94>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0c9b      	lsrs	r3, r3, #18
 8002954:	3b01      	subs	r3, #1
 8002956:	4a15      	ldr	r2, [pc, #84]	; (80029ac <DelayInit+0x8c>)
 8002958:	6053      	str	r3, [r2, #4]
    htim_delay.Init.CounterMode = TIM_COUNTERMODE_UP;
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <DelayInit+0x8c>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
    htim_delay.Init.Period = 0xFFFFFFFF;
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <DelayInit+0x8c>)
 8002962:	f04f 32ff 	mov.w	r2, #4294967295
 8002966:	60da      	str	r2, [r3, #12]
    htim_delay.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002968:	4b10      	ldr	r3, [pc, #64]	; (80029ac <DelayInit+0x8c>)
 800296a:	2200      	movs	r2, #0
 800296c:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim_delay);
 800296e:	480f      	ldr	r0, [pc, #60]	; (80029ac <DelayInit+0x8c>)
 8002970:	f005 fac3 	bl	8007efa <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002978:	613b      	str	r3, [r7, #16]
    HAL_TIM_ConfigClockSource(&htim_delay, &sClockSourceConfig);
 800297a:	f107 0310 	add.w	r3, r7, #16
 800297e:	4619      	mov	r1, r3
 8002980:	480a      	ldr	r0, [pc, #40]	; (80029ac <DelayInit+0x8c>)
 8002982:	f005 fde1 	bl	8008548 <HAL_TIM_ConfigClockSource>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
    HAL_TIMEx_MasterConfigSynchronization(&htim_delay, &sMasterConfig);
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4806      	ldr	r0, [pc, #24]	; (80029ac <DelayInit+0x8c>)
 8002994:	f006 fa82 	bl	8008e9c <HAL_TIMEx_MasterConfigSynchronization>

    HAL_TIM_Base_Start(&htim_delay);
 8002998:	4804      	ldr	r0, [pc, #16]	; (80029ac <DelayInit+0x8c>)
 800299a:	f005 fad9 	bl	8007f50 <HAL_TIM_Base_Start>

}
 800299e:	bf00      	nop
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	200116ec 	.word	0x200116ec
 80029b0:	40000c00 	.word	0x40000c00
 80029b4:	431bde83 	.word	0x431bde83

080029b8 <DelayDiff>:
{
  DelayUs(val * 1000);
}

inline uint32_t DelayDiff(uint32_t a, uint32_t b)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  if(a >= b)
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d303      	bcc.n	80029d2 <DelayDiff+0x1a>
    return (a - b);
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	e003      	b.n	80029da <DelayDiff+0x22>
  return ((0xFFFFFFFF - b) + a);
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	3b01      	subs	r3, #1
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80029f0:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <SCB_EnableICache+0x3c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80029fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a00:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <SCB_EnableICache+0x3c>)
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	4a06      	ldr	r2, [pc, #24]	; (8002a24 <SCB_EnableICache+0x3c>)
 8002a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a0e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a14:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <SCB_EnableDCache+0x7c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002a36:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <SCB_EnableDCache+0x7c>)
 8002a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a40:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	0b5b      	lsrs	r3, r3, #13
 8002a46:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002a4a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	08db      	lsrs	r3, r3, #3
 8002a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a54:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002a5e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002a64:	490f      	ldr	r1, [pc, #60]	; (8002aa4 <SCB_EnableDCache+0x7c>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	1e5a      	subs	r2, r3, #1
 8002a70:	60ba      	str	r2, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1ef      	bne.n	8002a56 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1e5a      	subs	r2, r3, #1
 8002a7a:	60fa      	str	r2, [r7, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e5      	bne.n	8002a4c <SCB_EnableDCache+0x24>
 8002a80:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <SCB_EnableDCache+0x7c>)
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	4a06      	ldr	r2, [pc, #24]	; (8002aa4 <SCB_EnableDCache+0x7c>)
 8002a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8e:	6153      	str	r3, [r2, #20]
 8002a90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a94:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <HAL_GPIO_EXTI_Callback>:
static void MX_RNG_Init(void);
static void UpdateIWDG(void);
static void UpdateDebugger(void);

inline void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ab8:	d006      	beq.n	8002ac8 <HAL_GPIO_EXTI_Callback+0x20>
 8002aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002abe:	d006      	beq.n	8002ace <HAL_GPIO_EXTI_Callback+0x26>
 8002ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac4:	d006      	beq.n	8002ad4 <HAL_GPIO_EXTI_Callback+0x2c>
      break;
    case ADC_STATUS_Pin :
      HAL_TIM_Base_Start_IT(&htim7);
      break;
    default:
      break;
 8002ac6:	e009      	b.n	8002adc <HAL_GPIO_EXTI_Callback+0x34>
      csps_exti();
 8002ac8:	f7ff faf4 	bl	80020b4 <csps_exti>
      break;
 8002acc:	e006      	b.n	8002adc <HAL_GPIO_EXTI_Callback+0x34>
      acis_hall_exti();
 8002ace:	f7fe fb37 	bl	8001140 <acis_hall_exti>
      break;
 8002ad2:	e003      	b.n	8002adc <HAL_GPIO_EXTI_Callback+0x34>
      HAL_TIM_Base_Start_IT(&htim7);
 8002ad4:	4803      	ldr	r0, [pc, #12]	; (8002ae4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002ad6:	f005 fa65 	bl	8007fa4 <HAL_TIM_Base_Start_IT>
      break;
 8002ada:	bf00      	nop
  }
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20018158 	.word	0x20018158

08002ae8 <HAL_TIM_PeriodElapsedCallback>:

inline void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  static uint16_t ms_tim = 0;
  if(htim == &htim4)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d112      	bne.n	8002b1e <HAL_TIM_PeriodElapsedCallback+0x36>
  {
    acis_loop_irq();
 8002af8:	f7ff f852 	bl	8001ba0 <acis_loop_irq>
    if(++ms_tim >= 500)
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	3301      	adds	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002b06:	801a      	strh	r2, [r3, #0]
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b10:	d30b      	bcc.n	8002b2a <HAL_TIM_PeriodElapsedCallback+0x42>
    {
      csps_loop();
 8002b12:	f7ff fe7b 	bl	800280c <csps_loop>
      ms_tim = 0;
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	801a      	strh	r2, [r3, #0]
  }
  else if(htim == &htim7)
  {
    map_adc_read();
  }
}
 8002b1c:	e005      	b.n	8002b2a <HAL_TIM_PeriodElapsedCallback+0x42>
  else if(htim == &htim7)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a06      	ldr	r2, [pc, #24]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d101      	bne.n	8002b2a <HAL_TIM_PeriodElapsedCallback+0x42>
    map_adc_read();
 8002b26:	f000 fde5 	bl	80036f4 <map_adc_read>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20017d8c 	.word	0x20017d8c
 8002b38:	2001172c 	.word	0x2001172c
 8002b3c:	20018158 	.word	0x20018158

08002b40 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  xDmaTxIrqHandler(huart);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f002 f817 	bl	8004b7c <xDmaTxIrqHandler>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  xDmaErIrqHandler(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f002 f870 	bl	8004c44 <xDmaErIrqHandler>
}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <main>:

int main(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  SCB_EnableICache();
 8002b70:	f7ff ff3a 	bl	80029e8 <SCB_EnableICache>

  SCB_EnableDCache();
 8002b74:	f7ff ff58 	bl	8002a28 <SCB_EnableDCache>

  HAL_Init();
 8002b78:	f002 fc4e 	bl	8005418 <HAL_Init>

  SystemClock_Config();
 8002b7c:	f000 f8b2 	bl	8002ce4 <SystemClock_Config>

  MX_GPIO_Init();
 8002b80:	f000 fc46 	bl	8003410 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b84:	f000 fbf2 	bl	800336c <MX_DMA_Init>
  //MX_IWDG_Init();
  MX_USART1_UART_Init();  //Control Communication
 8002b88:	f000 fbb8 	bl	80032fc <MX_USART1_UART_Init>
  MX_SPI2_Init(); //SPI Flash
 8002b8c:	f000 f9e4 	bl	8002f58 <MX_SPI2_Init>
  MX_ADC1_Init(); //Temperature and battery sensor
 8002b90:	f000 f940 	bl	8002e14 <MX_ADC1_Init>
  MX_TIM3_Init(); //Servo PWM
 8002b94:	f000 fa1e 	bl	8002fd4 <MX_TIM3_Init>
  MX_TIM4_Init(); //ACIS common workout IT
 8002b98:	f000 fa8c 	bl	80030b4 <MX_TIM4_Init>
  MX_TIM7_Init(); //Wait timer for ADC670
 8002b9c:	f000 facc 	bl	8003138 <MX_TIM7_Init>
  MX_TIM8_Init(); //ADCs trigger strobe
 8002ba0:	f000 fb12 	bl	80031c8 <MX_TIM8_Init>
  MX_CRC_Init();
 8002ba4:	f000 f998 	bl	8002ed8 <MX_CRC_Init>
  MX_RNG_Init();
 8002ba8:	f000 f9c2 	bl	8002f30 <MX_RNG_Init>

  CRC16_RegisterHardware(&hcrc);
 8002bac:	480c      	ldr	r0, [pc, #48]	; (8002be0 <main+0x74>)
 8002bae:	f7ff fa31 	bl	8002014 <CRC16_RegisterHardware>

  xFifosInit();
 8002bb2:	f002 f881 	bl	8004cb8 <xFifosInit>
  xGetterInit();
 8002bb6:	f002 f8cf 	bl	8004d58 <xGetterInit>

  DelayInit();
 8002bba:	f7ff feb1 	bl	8002920 <DelayInit>


  map_init();
 8002bbe:	f000 fd75 	bl	80036ac <map_init>
  acis_init();
 8002bc2:	f7fe f8cb 	bl	8000d5c <acis_init>

  HAL_TIM_Base_Start(&htim8);
 8002bc6:	4807      	ldr	r0, [pc, #28]	; (8002be4 <main+0x78>)
 8002bc8:	f005 f9c2 	bl	8007f50 <HAL_TIM_Base_Start>

  while (1)
  {
    UpdateIWDG();
 8002bcc:	f000 f80c 	bl	8002be8 <UpdateIWDG>
    UpdateDebugger();
 8002bd0:	f000 f82c 	bl	8002c2c <UpdateDebugger>
    xGetterLoop();
 8002bd4:	f002 f8f6 	bl	8004dc4 <xGetterLoop>
    acis_loop();
 8002bd8:	f7ff f952 	bl	8001e80 <acis_loop>
    UpdateIWDG();
 8002bdc:	e7f6      	b.n	8002bcc <main+0x60>
 8002bde:	bf00      	nop
 8002be0:	20017e3c 	.word	0x20017e3c
 8002be4:	20017d4c 	.word	0x20017d4c

08002be8 <UpdateIWDG>:

  }
}

static inline void UpdateIWDG(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
  static uint32_t delay_old = 0;
  uint32_t delay = Delay_Tick;
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <UpdateIWDG+0x34>)
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	607b      	str	r3, [r7, #4]
  if(DelayDiff(delay, delay_old) > 1000000)
 8002bf4:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <UpdateIWDG+0x38>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff fedc 	bl	80029b8 <DelayDiff>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <UpdateIWDG+0x3c>)
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d905      	bls.n	8002c14 <UpdateIWDG+0x2c>
  {
    delay_old = delay;
 8002c08:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <UpdateIWDG+0x38>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6013      	str	r3, [r2, #0]
    HAL_IWDG_Refresh(&hiwdg);
 8002c0e:	4806      	ldr	r0, [pc, #24]	; (8002c28 <UpdateIWDG+0x40>)
 8002c10:	f003 ff7a 	bl	8006b08 <HAL_IWDG_Refresh>
  }
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40000c00 	.word	0x40000c00
 8002c20:	20011730 	.word	0x20011730
 8002c24:	000f4240 	.word	0x000f4240
 8002c28:	20017e2c 	.word	0x20017e2c

08002c2c <UpdateDebugger>:

static inline void UpdateDebugger(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
  static uint8_t was_attached = 0;
  uint8_t attached = IS_DEBUGGER_ATTACHED();
 8002c32:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <UpdateDebugger+0xb0>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	71fb      	strb	r3, [r7, #7]
  if(was_attached != attached)
 8002c3e:	4b28      	ldr	r3, [pc, #160]	; (8002ce0 <UpdateDebugger+0xb4>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	79fa      	ldrb	r2, [r7, #7]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d042      	beq.n	8002cce <UpdateDebugger+0xa2>
  {
    was_attached = attached;
 8002c48:	4a25      	ldr	r2, [pc, #148]	; (8002ce0 <UpdateDebugger+0xb4>)
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	7013      	strb	r3, [r2, #0]
    if(attached)
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01e      	beq.n	8002c92 <UpdateDebugger+0x66>
    {
      __HAL_DBGMCU_FREEZE_IWDG();
 8002c54:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <UpdateDebugger+0xb0>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4a20      	ldr	r2, [pc, #128]	; (8002cdc <UpdateDebugger+0xb0>)
 8002c5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c5e:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM4();
 8002c60:	4b1e      	ldr	r3, [pc, #120]	; (8002cdc <UpdateDebugger+0xb0>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	4a1d      	ldr	r2, [pc, #116]	; (8002cdc <UpdateDebugger+0xb0>)
 8002c66:	f043 0304 	orr.w	r3, r3, #4
 8002c6a:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM5();
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <UpdateDebugger+0xb0>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a1a      	ldr	r2, [pc, #104]	; (8002cdc <UpdateDebugger+0xb0>)
 8002c72:	f043 0308 	orr.w	r3, r3, #8
 8002c76:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM7();
 8002c78:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <UpdateDebugger+0xb0>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <UpdateDebugger+0xb0>)
 8002c7e:	f043 0320 	orr.w	r3, r3, #32
 8002c82:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM8();
 8002c84:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <UpdateDebugger+0xb0>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	4a14      	ldr	r2, [pc, #80]	; (8002cdc <UpdateDebugger+0xb0>)
 8002c8a:	f043 0302 	orr.w	r3, r3, #2
 8002c8e:	60d3      	str	r3, [r2, #12]
      __HAL_DBGMCU_UNFREEZE_TIM5();
      __HAL_DBGMCU_UNFREEZE_TIM7();
      __HAL_DBGMCU_UNFREEZE_TIM8();
    }
  }
}
 8002c90:	e01d      	b.n	8002cce <UpdateDebugger+0xa2>
      __HAL_DBGMCU_UNFREEZE_IWDG();
 8002c92:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <UpdateDebugger+0xb0>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	4a11      	ldr	r2, [pc, #68]	; (8002cdc <UpdateDebugger+0xb0>)
 8002c98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c9c:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM4();
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <UpdateDebugger+0xb0>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <UpdateDebugger+0xb0>)
 8002ca4:	f023 0304 	bic.w	r3, r3, #4
 8002ca8:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM5();
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <UpdateDebugger+0xb0>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	4a0b      	ldr	r2, [pc, #44]	; (8002cdc <UpdateDebugger+0xb0>)
 8002cb0:	f023 0308 	bic.w	r3, r3, #8
 8002cb4:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM7();
 8002cb6:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <UpdateDebugger+0xb0>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	4a08      	ldr	r2, [pc, #32]	; (8002cdc <UpdateDebugger+0xb0>)
 8002cbc:	f023 0320 	bic.w	r3, r3, #32
 8002cc0:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM8();
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <UpdateDebugger+0xb0>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	4a05      	ldr	r2, [pc, #20]	; (8002cdc <UpdateDebugger+0xb0>)
 8002cc8:	f023 0302 	bic.w	r3, r3, #2
 8002ccc:	60d3      	str	r3, [r2, #12]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e0042000 	.word	0xe0042000
 8002ce0:	20011734 	.word	0x20011734

08002ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b0b4      	sub	sp, #208	; 0xd0
 8002ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002cee:	2230      	movs	r2, #48	; 0x30
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f007 f9fb 	bl	800a0ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cf8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d08:	f107 030c 	add.w	r3, r7, #12
 8002d0c:	2280      	movs	r2, #128	; 0x80
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f007 f9ec 	bl	800a0ee <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	4b3c      	ldr	r3, [pc, #240]	; (8002e08 <SystemClock_Config+0x124>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	4a3b      	ldr	r2, [pc, #236]	; (8002e08 <SystemClock_Config+0x124>)
 8002d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d20:	6413      	str	r3, [r2, #64]	; 0x40
 8002d22:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <SystemClock_Config+0x124>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d2e:	4b37      	ldr	r3, [pc, #220]	; (8002e0c <SystemClock_Config+0x128>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a36      	ldr	r2, [pc, #216]	; (8002e0c <SystemClock_Config+0x128>)
 8002d34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	4b34      	ldr	r3, [pc, #208]	; (8002e0c <SystemClock_Config+0x128>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d42:	607b      	str	r3, [r7, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002d46:	230a      	movs	r3, #10
 8002d48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = 10;
 8002d52:	230a      	movs	r3, #10
 8002d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d6a:	2308      	movs	r3, #8
 8002d6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002d70:	23d8      	movs	r3, #216	; 0xd8
 8002d72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d76:	2302      	movs	r3, #2
 8002d78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002d7c:	2309      	movs	r3, #9
 8002d7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d82:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 ff1e 	bl	8006bc8 <HAL_RCC_OscConfig>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002d92:	f000 fc87 	bl	80036a4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002d96:	f003 fec7 	bl	8006b28 <HAL_PWREx_EnableOverDrive>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002da0:	f000 fc80 	bl	80036a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002da4:	230f      	movs	r3, #15
 8002da6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002daa:	2302      	movs	r3, #2
 8002dac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002db6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002dba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002dc6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002dca:	2107      	movs	r1, #7
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f004 f99f 	bl	8007110 <HAL_RCC_ClockConfig>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002dd8:	f000 fc64 	bl	80036a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_CLK48;
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <SystemClock_Config+0x12c>)
 8002dde:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002de0:	2300      	movs	r3, #0
 8002de2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dea:	f107 030c 	add.w	r3, r7, #12
 8002dee:	4618      	mov	r0, r3
 8002df0:	f004 fb60 	bl	80074b4 <HAL_RCCEx_PeriphCLKConfig>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8002dfa:	f000 fc53 	bl	80036a4 <Error_Handler>
  }
}
 8002dfe:	bf00      	nop
 8002e00:	37d0      	adds	r7, #208	; 0xd0
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40007000 	.word	0x40007000
 8002e10:	00200040 	.word	0x00200040

08002e14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e1a:	463b      	mov	r3, r7
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002e26:	4b2a      	ldr	r3, [pc, #168]	; (8002ed0 <MX_ADC1_Init+0xbc>)
 8002e28:	4a2a      	ldr	r2, [pc, #168]	; (8002ed4 <MX_ADC1_Init+0xc0>)
 8002e2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e2c:	4b28      	ldr	r3, [pc, #160]	; (8002ed0 <MX_ADC1_Init+0xbc>)
 8002e2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e34:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <MX_ADC1_Init+0xbc>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002e3a:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <MX_ADC1_Init+0xbc>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e40:	4b23      	ldr	r3, [pc, #140]	; (8002ed0 <MX_ADC1_Init+0xbc>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e46:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <MX_ADC1_Init+0xbc>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002e4e:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <MX_ADC1_Init+0xbc>)
 8002e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8002e56:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <MX_ADC1_Init+0xbc>)
 8002e58:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002e5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <MX_ADC1_Init+0xbc>)
 8002e60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e64:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002e66:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <MX_ADC1_Init+0xbc>)
 8002e68:	2202      	movs	r2, #2
 8002e6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002e6c:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <MX_ADC1_Init+0xbc>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002e74:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <MX_ADC1_Init+0xbc>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e7a:	4815      	ldr	r0, [pc, #84]	; (8002ed0 <MX_ADC1_Init+0xbc>)
 8002e7c:	f002 fb32 	bl	80054e4 <HAL_ADC_Init>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8002e86:	f000 fc0d 	bl	80036a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002e8a:	230c      	movs	r3, #12
 8002e8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e96:	463b      	mov	r3, r7
 8002e98:	4619      	mov	r1, r3
 8002e9a:	480d      	ldr	r0, [pc, #52]	; (8002ed0 <MX_ADC1_Init+0xbc>)
 8002e9c:	f002 fb66 	bl	800556c <HAL_ADC_ConfigChannel>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8002ea6:	f000 fbfd 	bl	80036a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002eaa:	230d      	movs	r3, #13
 8002eac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002eb2:	463b      	mov	r3, r7
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4806      	ldr	r0, [pc, #24]	; (8002ed0 <MX_ADC1_Init+0xbc>)
 8002eb8:	f002 fb58 	bl	800556c <HAL_ADC_ConfigChannel>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002ec2:	f000 fbef 	bl	80036a4 <Error_Handler>
  */
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20017f60 	.word	0x20017f60
 8002ed4:	40012000 	.word	0x40012000

08002ed8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002edc:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <MX_CRC_Init+0x50>)
 8002ede:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <MX_CRC_Init+0x54>)
 8002ee0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8002ee2:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <MX_CRC_Init+0x50>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <MX_CRC_Init+0x50>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = CRC_POLY;
 8002eee:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <MX_CRC_Init+0x50>)
 8002ef0:	f24a 0201 	movw	r2, #40961	; 0xa001
 8002ef4:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <MX_CRC_Init+0x50>)
 8002ef8:	2208      	movs	r2, #8
 8002efa:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8002efc:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <MX_CRC_Init+0x50>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <MX_CRC_Init+0x50>)
 8002f04:	2220      	movs	r2, #32
 8002f06:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8002f08:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <MX_CRC_Init+0x50>)
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <MX_CRC_Init+0x50>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002f14:	4804      	ldr	r0, [pc, #16]	; (8002f28 <MX_CRC_Init+0x50>)
 8002f16:	f002 fe7f 	bl	8005c18 <HAL_CRC_Init>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8002f20:	f000 fbc0 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002f24:	bf00      	nop
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20017e3c 	.word	0x20017e3c
 8002f2c:	40023000 	.word	0x40023000

08002f30 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <MX_RNG_Init+0x20>)
 8002f36:	4a07      	ldr	r2, [pc, #28]	; (8002f54 <MX_RNG_Init+0x24>)
 8002f38:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002f3a:	4805      	ldr	r0, [pc, #20]	; (8002f50 <MX_RNG_Init+0x20>)
 8002f3c:	f004 fe02 	bl	8007b44 <HAL_RNG_Init>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002f46:	f000 fbad 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	200180e8 	.word	0x200180e8
 8002f54:	50060800 	.word	0x50060800

08002f58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002f5c:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <MX_SPI2_Init+0x74>)
 8002f5e:	4a1c      	ldr	r2, [pc, #112]	; (8002fd0 <MX_SPI2_Init+0x78>)
 8002f60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002f62:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <MX_SPI2_Init+0x74>)
 8002f64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002f6a:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <MX_SPI2_Init+0x74>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f70:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <MX_SPI2_Init+0x74>)
 8002f72:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f76:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f78:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <MX_SPI2_Init+0x74>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f7e:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <MX_SPI2_Init+0x74>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <MX_SPI2_Init+0x74>)
 8002f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f8a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f8c:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <MX_SPI2_Init+0x74>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f92:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <MX_SPI2_Init+0x74>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <MX_SPI2_Init+0x74>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <MX_SPI2_Init+0x74>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002fa4:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <MX_SPI2_Init+0x74>)
 8002fa6:	2207      	movs	r2, #7
 8002fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <MX_SPI2_Init+0x74>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <MX_SPI2_Init+0x74>)
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002fb6:	4805      	ldr	r0, [pc, #20]	; (8002fcc <MX_SPI2_Init+0x74>)
 8002fb8:	f004 fdee 	bl	8007b98 <HAL_SPI_Init>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002fc2:	f000 fb6f 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20017ce8 	.word	0x20017ce8
 8002fd0:	40003800 	.word	0x40003800

08002fd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	; 0x28
 8002fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fda:	f107 031c 	add.w	r3, r7, #28
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fe6:	463b      	mov	r3, r7
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]
 8002ff4:	615a      	str	r2, [r3, #20]
 8002ff6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ff8:	4b2b      	ldr	r3, [pc, #172]	; (80030a8 <MX_TIM3_Init+0xd4>)
 8002ffa:	4a2c      	ldr	r2, [pc, #176]	; (80030ac <MX_TIM3_Init+0xd8>)
 8002ffc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 50 / 5120) - 1; //This is to set prescaler to 1 MHz
 8002ffe:	f004 fa31 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
 8003002:	4603      	mov	r3, r0
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4a2a      	ldr	r2, [pc, #168]	; (80030b0 <MX_TIM3_Init+0xdc>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	0b9b      	lsrs	r3, r3, #14
 800300e:	3b01      	subs	r3, #1
 8003010:	4a25      	ldr	r2, [pc, #148]	; (80030a8 <MX_TIM3_Init+0xd4>)
 8003012:	6053      	str	r3, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003014:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <MX_TIM3_Init+0xd4>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5119;
 800301a:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <MX_TIM3_Init+0xd4>)
 800301c:	f241 32ff 	movw	r2, #5119	; 0x13ff
 8003020:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003022:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <MX_TIM3_Init+0xd4>)
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003028:	4b1f      	ldr	r3, [pc, #124]	; (80030a8 <MX_TIM3_Init+0xd4>)
 800302a:	2200      	movs	r2, #0
 800302c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800302e:	481e      	ldr	r0, [pc, #120]	; (80030a8 <MX_TIM3_Init+0xd4>)
 8003030:	f004 ffe2 	bl	8007ff8 <HAL_TIM_PWM_Init>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800303a:	f000 fb33 	bl	80036a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003042:	2300      	movs	r3, #0
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003046:	f107 031c 	add.w	r3, r7, #28
 800304a:	4619      	mov	r1, r3
 800304c:	4816      	ldr	r0, [pc, #88]	; (80030a8 <MX_TIM3_Init+0xd4>)
 800304e:	f005 ff25 	bl	8008e9c <HAL_TIMEx_MasterConfigSynchronization>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8003058:	f000 fb24 	bl	80036a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800305c:	2360      	movs	r3, #96	; 0x60
 800305e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 256;
 8003060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003064:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800306a:	2300      	movs	r3, #0
 800306c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800306e:	463b      	mov	r3, r7
 8003070:	2208      	movs	r2, #8
 8003072:	4619      	mov	r1, r3
 8003074:	480c      	ldr	r0, [pc, #48]	; (80030a8 <MX_TIM3_Init+0xd4>)
 8003076:	f005 f94f 	bl	8008318 <HAL_TIM_PWM_ConfigChannel>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003080:	f000 fb10 	bl	80036a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003084:	463b      	mov	r3, r7
 8003086:	220c      	movs	r2, #12
 8003088:	4619      	mov	r1, r3
 800308a:	4807      	ldr	r0, [pc, #28]	; (80030a8 <MX_TIM3_Init+0xd4>)
 800308c:	f005 f944 	bl	8008318 <HAL_TIM_PWM_ConfigChannel>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8003096:	f000 fb05 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800309a:	4803      	ldr	r0, [pc, #12]	; (80030a8 <MX_TIM3_Init+0xd4>)
 800309c:	f000 fdd4 	bl	8003c48 <HAL_TIM_MspPostInit>

}
 80030a0:	bf00      	nop
 80030a2:	3728      	adds	r7, #40	; 0x28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20017ec0 	.word	0x20017ec0
 80030ac:	40000400 	.word	0x40000400
 80030b0:	10624dd3 	.word	0x10624dd3

080030b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ba:	463b      	mov	r3, r7
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80030c6:	4b19      	ldr	r3, [pc, #100]	; (800312c <MX_TIM4_Init+0x78>)
 80030c8:	4a19      	ldr	r2, [pc, #100]	; (8003130 <MX_TIM4_Init+0x7c>)
 80030ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) - 1; //This is to set prescaler to 1 MHz
 80030cc:	f004 f9ca 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
 80030d0:	4603      	mov	r3, r0
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4a17      	ldr	r2, [pc, #92]	; (8003134 <MX_TIM4_Init+0x80>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	0c9b      	lsrs	r3, r3, #18
 80030dc:	3b01      	subs	r3, #1
 80030de:	4a13      	ldr	r2, [pc, #76]	; (800312c <MX_TIM4_Init+0x78>)
 80030e0:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <MX_TIM4_Init+0x78>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 14;
 80030e8:	4b10      	ldr	r3, [pc, #64]	; (800312c <MX_TIM4_Init+0x78>)
 80030ea:	220e      	movs	r2, #14
 80030ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ee:	4b0f      	ldr	r3, [pc, #60]	; (800312c <MX_TIM4_Init+0x78>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030f4:	4b0d      	ldr	r3, [pc, #52]	; (800312c <MX_TIM4_Init+0x78>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80030fa:	480c      	ldr	r0, [pc, #48]	; (800312c <MX_TIM4_Init+0x78>)
 80030fc:	f004 fefd 	bl	8007efa <HAL_TIM_Base_Init>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8003106:	f000 facd 	bl	80036a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800310a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800310e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003110:	463b      	mov	r3, r7
 8003112:	4619      	mov	r1, r3
 8003114:	4805      	ldr	r0, [pc, #20]	; (800312c <MX_TIM4_Init+0x78>)
 8003116:	f005 fa17 	bl	8008548 <HAL_TIM_ConfigClockSource>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003120:	f000 fac0 	bl	80036a4 <Error_Handler>
  }

}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20017d8c 	.word	0x20017d8c
 8003130:	40000800 	.word	0x40000800
 8003134:	431bde83 	.word	0x431bde83

08003138 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003148:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <MX_TIM7_Init+0x84>)
 800314a:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <MX_TIM7_Init+0x88>)
 800314c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800314e:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <MX_TIM7_Init+0x84>)
 8003150:	2200      	movs	r2, #0
 8003152:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <MX_TIM7_Init+0x84>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) / 2 - 1; //This is to set period to 2 MHz;
 800315a:	f004 f983 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
 800315e:	4603      	mov	r3, r0
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4a18      	ldr	r2, [pc, #96]	; (80031c4 <MX_TIM7_Init+0x8c>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	0cdb      	lsrs	r3, r3, #19
 800316a:	3b01      	subs	r3, #1
 800316c:	4a13      	ldr	r2, [pc, #76]	; (80031bc <MX_TIM7_Init+0x84>)
 800316e:	60d3      	str	r3, [r2, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003170:	4b12      	ldr	r3, [pc, #72]	; (80031bc <MX_TIM7_Init+0x84>)
 8003172:	2200      	movs	r2, #0
 8003174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003176:	4811      	ldr	r0, [pc, #68]	; (80031bc <MX_TIM7_Init+0x84>)
 8003178:	f004 febf 	bl	8007efa <HAL_TIM_Base_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_TIM7_Init+0x4e>
  {
    Error_Handler();
 8003182:	f000 fa8f 	bl	80036a4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 8003186:	2108      	movs	r1, #8
 8003188:	480c      	ldr	r0, [pc, #48]	; (80031bc <MX_TIM7_Init+0x84>)
 800318a:	f004 ff60 	bl	800804e <HAL_TIM_OnePulse_Init>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <MX_TIM7_Init+0x60>
  {
    Error_Handler();
 8003194:	f000 fa86 	bl	80036a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003198:	2320      	movs	r3, #32
 800319a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	4619      	mov	r1, r3
 80031a4:	4805      	ldr	r0, [pc, #20]	; (80031bc <MX_TIM7_Init+0x84>)
 80031a6:	f005 fe79 	bl	8008e9c <HAL_TIMEx_MasterConfigSynchronization>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <MX_TIM7_Init+0x7c>
  {
    Error_Handler();
 80031b0:	f000 fa78 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80031b4:	bf00      	nop
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	20018158 	.word	0x20018158
 80031c0:	40001400 	.word	0x40001400
 80031c4:	431bde83 	.word	0x431bde83

080031c8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b096      	sub	sp, #88	; 0x58
 80031cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	605a      	str	r2, [r3, #4]
 80031d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	605a      	str	r2, [r3, #4]
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	60da      	str	r2, [r3, #12]
 80031e8:	611a      	str	r2, [r3, #16]
 80031ea:	615a      	str	r2, [r3, #20]
 80031ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	222c      	movs	r2, #44	; 0x2c
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f006 ff7a 	bl	800a0ee <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80031fa:	4b3d      	ldr	r3, [pc, #244]	; (80032f0 <MX_TIM8_Init+0x128>)
 80031fc:	4a3d      	ldr	r2, [pc, #244]	; (80032f4 <MX_TIM8_Init+0x12c>)
 80031fe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = (HAL_RCC_GetPCLK2Freq() * 2 / 1000000) - 1; //This is to set prescaler to 1 MHz
 8003200:	f004 f944 	bl	800748c <HAL_RCC_GetPCLK2Freq>
 8003204:	4603      	mov	r3, r0
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	4a3b      	ldr	r2, [pc, #236]	; (80032f8 <MX_TIM8_Init+0x130>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	0c9b      	lsrs	r3, r3, #18
 8003210:	3b01      	subs	r3, #1
 8003212:	4a37      	ldr	r2, [pc, #220]	; (80032f0 <MX_TIM8_Init+0x128>)
 8003214:	6053      	str	r3, [r2, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003216:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <MX_TIM8_Init+0x128>)
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 800321c:	4b34      	ldr	r3, [pc, #208]	; (80032f0 <MX_TIM8_Init+0x128>)
 800321e:	2231      	movs	r2, #49	; 0x31
 8003220:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003222:	4b33      	ldr	r3, [pc, #204]	; (80032f0 <MX_TIM8_Init+0x128>)
 8003224:	2200      	movs	r2, #0
 8003226:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003228:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <MX_TIM8_Init+0x128>)
 800322a:	2200      	movs	r2, #0
 800322c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800322e:	4b30      	ldr	r3, [pc, #192]	; (80032f0 <MX_TIM8_Init+0x128>)
 8003230:	2200      	movs	r2, #0
 8003232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003234:	482e      	ldr	r0, [pc, #184]	; (80032f0 <MX_TIM8_Init+0x128>)
 8003236:	f004 fedf 	bl	8007ff8 <HAL_TIM_PWM_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003240:	f000 fa30 	bl	80036a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003244:	2320      	movs	r3, #32
 8003246:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003248:	2300      	movs	r3, #0
 800324a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800324c:	2300      	movs	r3, #0
 800324e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003250:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003254:	4619      	mov	r1, r3
 8003256:	4826      	ldr	r0, [pc, #152]	; (80032f0 <MX_TIM8_Init+0x128>)
 8003258:	f005 fe20 	bl	8008e9c <HAL_TIMEx_MasterConfigSynchronization>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8003262:	f000 fa1f 	bl	80036a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003266:	2360      	movs	r3, #96	; 0x60
 8003268:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1;
 800326a:	2301      	movs	r3, #1
 800326c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800326e:	2300      	movs	r3, #0
 8003270:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8003272:	2308      	movs	r3, #8
 8003274:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800327a:	2300      	movs	r3, #0
 800327c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800327e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003282:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003284:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003288:	2208      	movs	r2, #8
 800328a:	4619      	mov	r1, r3
 800328c:	4818      	ldr	r0, [pc, #96]	; (80032f0 <MX_TIM8_Init+0x128>)
 800328e:	f005 f843 	bl	8008318 <HAL_TIM_PWM_ConfigChannel>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 8003298:	f000 fa04 	bl	80036a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800329c:	2300      	movs	r3, #0
 800329e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80032ba:	2300      	movs	r3, #0
 80032bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80032be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80032cc:	1d3b      	adds	r3, r7, #4
 80032ce:	4619      	mov	r1, r3
 80032d0:	4807      	ldr	r0, [pc, #28]	; (80032f0 <MX_TIM8_Init+0x128>)
 80032d2:	f005 fe71 	bl	8008fb8 <HAL_TIMEx_ConfigBreakDeadTime>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80032dc:	f000 f9e2 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80032e0:	4803      	ldr	r0, [pc, #12]	; (80032f0 <MX_TIM8_Init+0x128>)
 80032e2:	f000 fcb1 	bl	8003c48 <HAL_TIM_MspPostInit>

}
 80032e6:	bf00      	nop
 80032e8:	3758      	adds	r7, #88	; 0x58
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20017d4c 	.word	0x20017d4c
 80032f4:	40010400 	.word	0x40010400
 80032f8:	431bde83 	.word	0x431bde83

080032fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003300:	4b17      	ldr	r3, [pc, #92]	; (8003360 <MX_USART1_UART_Init+0x64>)
 8003302:	4a18      	ldr	r2, [pc, #96]	; (8003364 <MX_USART1_UART_Init+0x68>)
 8003304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3375000;
 8003306:	4b16      	ldr	r3, [pc, #88]	; (8003360 <MX_USART1_UART_Init+0x64>)
 8003308:	4a17      	ldr	r2, [pc, #92]	; (8003368 <MX_USART1_UART_Init+0x6c>)
 800330a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800330c:	4b14      	ldr	r3, [pc, #80]	; (8003360 <MX_USART1_UART_Init+0x64>)
 800330e:	2200      	movs	r2, #0
 8003310:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003312:	4b13      	ldr	r3, [pc, #76]	; (8003360 <MX_USART1_UART_Init+0x64>)
 8003314:	2200      	movs	r2, #0
 8003316:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <MX_USART1_UART_Init+0x64>)
 800331a:	2200      	movs	r2, #0
 800331c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800331e:	4b10      	ldr	r3, [pc, #64]	; (8003360 <MX_USART1_UART_Init+0x64>)
 8003320:	220c      	movs	r2, #12
 8003322:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <MX_USART1_UART_Init+0x64>)
 8003326:	2200      	movs	r2, #0
 8003328:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800332a:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <MX_USART1_UART_Init+0x64>)
 800332c:	2200      	movs	r2, #0
 800332e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <MX_USART1_UART_Init+0x64>)
 8003332:	2200      	movs	r2, #0
 8003334:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8003336:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <MX_USART1_UART_Init+0x64>)
 8003338:	2240      	movs	r2, #64	; 0x40
 800333a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <MX_USART1_UART_Init+0x64>)
 800333e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003342:	641a      	str	r2, [r3, #64]	; 0x40
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME;
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <MX_USART1_UART_Init+0x64>)
 8003346:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 800334a:	645a      	str	r2, [r3, #68]	; 0x44
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800334c:	4804      	ldr	r0, [pc, #16]	; (8003360 <MX_USART1_UART_Init+0x64>)
 800334e:	f005 fef4 	bl	800913a <HAL_UART_Init>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8003358:	f000 f9a4 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800335c:	bf00      	nop
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20018008 	.word	0x20018008
 8003364:	40011000 	.word	0x40011000
 8003368:	00337f98 	.word	0x00337f98

0800336c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003372:	4b26      	ldr	r3, [pc, #152]	; (800340c <MX_DMA_Init+0xa0>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	4a25      	ldr	r2, [pc, #148]	; (800340c <MX_DMA_Init+0xa0>)
 8003378:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800337c:	6313      	str	r3, [r2, #48]	; 0x30
 800337e:	4b23      	ldr	r3, [pc, #140]	; (800340c <MX_DMA_Init+0xa0>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800338a:	4b20      	ldr	r3, [pc, #128]	; (800340c <MX_DMA_Init+0xa0>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	4a1f      	ldr	r2, [pc, #124]	; (800340c <MX_DMA_Init+0xa0>)
 8003390:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003394:	6313      	str	r3, [r2, #48]	; 0x30
 8003396:	4b1d      	ldr	r3, [pc, #116]	; (800340c <MX_DMA_Init+0xa0>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0); //TIM7_UP
 80033a2:	2200      	movs	r2, #0
 80033a4:	2105      	movs	r1, #5
 80033a6:	200d      	movs	r0, #13
 80033a8:	f002 fbff 	bl	8005baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80033ac:	200d      	movs	r0, #13
 80033ae:	f002 fc18 	bl	8005be2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 15, 0); //SPI2_RX
 80033b2:	2200      	movs	r2, #0
 80033b4:	210f      	movs	r1, #15
 80033b6:	200e      	movs	r0, #14
 80033b8:	f002 fbf7 	bl	8005baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80033bc:	200e      	movs	r0, #14
 80033be:	f002 fc10 	bl	8005be2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 15, 0); //SPI2_TX
 80033c2:	2200      	movs	r2, #0
 80033c4:	210f      	movs	r1, #15
 80033c6:	200f      	movs	r0, #15
 80033c8:	f002 fbef 	bl	8005baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80033cc:	200f      	movs	r0, #15
 80033ce:	f002 fc08 	bl	8005be2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 7, 0); //ADC1
 80033d2:	2200      	movs	r2, #0
 80033d4:	2107      	movs	r1, #7
 80033d6:	2038      	movs	r0, #56	; 0x38
 80033d8:	f002 fbe7 	bl	8005baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80033dc:	2038      	movs	r0, #56	; 0x38
 80033de:	f002 fc00 	bl	8005be2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 8, 0); //USART1_RX
 80033e2:	2200      	movs	r2, #0
 80033e4:	2108      	movs	r1, #8
 80033e6:	203a      	movs	r0, #58	; 0x3a
 80033e8:	f002 fbdf 	bl	8005baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80033ec:	203a      	movs	r0, #58	; 0x3a
 80033ee:	f002 fbf8 	bl	8005be2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 8, 0); //USART1_TX
 80033f2:	2200      	movs	r2, #0
 80033f4:	2108      	movs	r1, #8
 80033f6:	2046      	movs	r0, #70	; 0x46
 80033f8:	f002 fbd7 	bl	8005baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80033fc:	2046      	movs	r0, #70	; 0x46
 80033fe:	f002 fbf0 	bl	8005be2 <HAL_NVIC_EnableIRQ>

}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800

08003410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003416:	f107 0314 	add.w	r3, r7, #20
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	609a      	str	r2, [r3, #8]
 8003422:	60da      	str	r2, [r3, #12]
 8003424:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003426:	4b97      	ldr	r3, [pc, #604]	; (8003684 <MX_GPIO_Init+0x274>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	4a96      	ldr	r2, [pc, #600]	; (8003684 <MX_GPIO_Init+0x274>)
 800342c:	f043 0304 	orr.w	r3, r3, #4
 8003430:	6313      	str	r3, [r2, #48]	; 0x30
 8003432:	4b94      	ldr	r3, [pc, #592]	; (8003684 <MX_GPIO_Init+0x274>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800343e:	4b91      	ldr	r3, [pc, #580]	; (8003684 <MX_GPIO_Init+0x274>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	4a90      	ldr	r2, [pc, #576]	; (8003684 <MX_GPIO_Init+0x274>)
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	6313      	str	r3, [r2, #48]	; 0x30
 800344a:	4b8e      	ldr	r3, [pc, #568]	; (8003684 <MX_GPIO_Init+0x274>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003456:	4b8b      	ldr	r3, [pc, #556]	; (8003684 <MX_GPIO_Init+0x274>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4a8a      	ldr	r2, [pc, #552]	; (8003684 <MX_GPIO_Init+0x274>)
 800345c:	f043 0302 	orr.w	r3, r3, #2
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
 8003462:	4b88      	ldr	r3, [pc, #544]	; (8003684 <MX_GPIO_Init+0x274>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	60bb      	str	r3, [r7, #8]
 800346c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800346e:	4b85      	ldr	r3, [pc, #532]	; (8003684 <MX_GPIO_Init+0x274>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	4a84      	ldr	r2, [pc, #528]	; (8003684 <MX_GPIO_Init+0x274>)
 8003474:	f043 0308 	orr.w	r3, r3, #8
 8003478:	6313      	str	r3, [r2, #48]	; 0x30
 800347a:	4b82      	ldr	r3, [pc, #520]	; (8003684 <MX_GPIO_Init+0x274>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VDD3V3EN_Pin|SPI2_WP_Pin|RELAY_IGN_Pin, GPIO_PIN_RESET);
 8003486:	2200      	movs	r2, #0
 8003488:	f240 4141 	movw	r1, #1089	; 0x441
 800348c:	487e      	ldr	r0, [pc, #504]	; (8003688 <MX_GPIO_Init+0x278>)
 800348e:	f003 fb09 	bl	8006aa4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, IGN_14_Pin|IGN_23_Pin, GPIO_PIN_SET);
 8003492:	2201      	movs	r2, #1
 8003494:	21c0      	movs	r1, #192	; 0xc0
 8003496:	487d      	ldr	r0, [pc, #500]	; (800368c <MX_GPIO_Init+0x27c>)
 8003498:	f003 fb04 	bl	8006aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_nCE_Pin|LED_CHECK_Pin, GPIO_PIN_SET);
 800349c:	2201      	movs	r2, #1
 800349e:	2190      	movs	r1, #144	; 0x90
 80034a0:	4879      	ldr	r0, [pc, #484]	; (8003688 <MX_GPIO_Init+0x278>)
 80034a2:	f003 faff 	bl	8006aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 80034a6:	2201      	movs	r2, #1
 80034a8:	2101      	movs	r1, #1
 80034aa:	4878      	ldr	r0, [pc, #480]	; (800368c <MX_GPIO_Init+0x27c>)
 80034ac:	f003 fafa 	bl	8006aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_FORMAT_Pin|ADC_BPO_Pin|SPI2_NSS_Pin|PROPANE_OUT_Pin
 80034b0:	2200      	movs	r2, #0
 80034b2:	f241 7104 	movw	r1, #5892	; 0x1704
 80034b6:	4875      	ldr	r0, [pc, #468]	; (800368c <MX_GPIO_Init+0x27c>)
 80034b8:	f003 faf4 	bl	8006aa4 <HAL_GPIO_WritePin>
                          |PETROL_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_START_GPIO_Port, RELAY_START_Pin, GPIO_PIN_RESET);
 80034bc:	2200      	movs	r2, #0
 80034be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034c2:	4873      	ldr	r0, [pc, #460]	; (8003690 <MX_GPIO_Init+0x280>)
 80034c4:	f003 faee 	bl	8006aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_RESET);
 80034c8:	2200      	movs	r2, #0
 80034ca:	2104      	movs	r1, #4
 80034cc:	4871      	ldr	r0, [pc, #452]	; (8003694 <MX_GPIO_Init+0x284>)
 80034ce:	f003 fae9 	bl	8006aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SENS_CSPS_Pin */
  GPIO_InitStruct.Pin = SENS_CSPS_Pin;
 80034d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80034d8:	4b6f      	ldr	r3, [pc, #444]	; (8003698 <MX_GPIO_Init+0x288>)
 80034da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034dc:	2302      	movs	r3, #2
 80034de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENS_CSPS_GPIO_Port, &GPIO_InitStruct);
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	4619      	mov	r1, r3
 80034e6:	4868      	ldr	r0, [pc, #416]	; (8003688 <MX_GPIO_Init+0x278>)
 80034e8:	f003 f92a 	bl	8006740 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_HALL_Pin */
  GPIO_InitStruct.Pin = SENS_HALL_Pin;
 80034ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034f2:	4b6a      	ldr	r3, [pc, #424]	; (800369c <MX_GPIO_Init+0x28c>)
 80034f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034f6:	2301      	movs	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034fa:	f107 0314 	add.w	r3, r7, #20
 80034fe:	4619      	mov	r1, r3
 8003500:	4861      	ldr	r0, [pc, #388]	; (8003688 <MX_GPIO_Init+0x278>)
 8003502:	f003 f91d 	bl	8006740 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_ACC_Pin */
  GPIO_InitStruct.Pin = SENS_ACC_Pin;
 8003506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800350a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800350c:	2300      	movs	r3, #0
 800350e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003510:	2301      	movs	r3, #1
 8003512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	4619      	mov	r1, r3
 800351a:	485b      	ldr	r0, [pc, #364]	; (8003688 <MX_GPIO_Init+0x278>)
 800351c:	f003 f910 	bl	8006740 <HAL_GPIO_Init>

  /*Configure GPIO pins : VDD3V3EN_Pin ADC_nCE_Pin LED_CHECK_Pin RELAY_IGN_Pin */
  GPIO_InitStruct.Pin = VDD3V3EN_Pin|ADC_nCE_Pin|LED_CHECK_Pin|RELAY_IGN_Pin;
 8003520:	f240 4391 	movw	r3, #1169	; 0x491
 8003524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003526:	2301      	movs	r3, #1
 8003528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352e:	2300      	movs	r3, #0
 8003530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003532:	f107 0314 	add.w	r3, r7, #20
 8003536:	4619      	mov	r1, r3
 8003538:	4853      	ldr	r0, [pc, #332]	; (8003688 <MX_GPIO_Init+0x278>)
 800353a:	f003 f901 	bl	8006740 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC0_Pin ADC1_Pin ADC2_Pin ADC3_Pin
                           ADC4_Pin ADC5_Pin ADC6_Pin ADC7_Pin */
  GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin
 800353e:	23ff      	movs	r3, #255	; 0xff
 8003540:	617b      	str	r3, [r7, #20]
                          |ADC4_Pin|ADC5_Pin|ADC6_Pin|ADC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003546:	2302      	movs	r3, #2
 8003548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354a:	f107 0314 	add.w	r3, r7, #20
 800354e:	4619      	mov	r1, r3
 8003550:	484f      	ldr	r0, [pc, #316]	; (8003690 <MX_GPIO_Init+0x280>)
 8003552:	f003 f8f5 	bl	8006740 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_nCS_Pin ADC_FORMAT_Pin ADC_BPO_Pin PROPANE_OUT_Pin
                           PETROL_OUT_Pin */
  GPIO_InitStruct.Pin = ADC_nCS_Pin|ADC_FORMAT_Pin|ADC_BPO_Pin|PROPANE_OUT_Pin
 8003556:	f240 7305 	movw	r3, #1797	; 0x705
 800355a:	617b      	str	r3, [r7, #20]
                          |PETROL_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800355c:	2301      	movs	r3, #1
 800355e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003564:	2303      	movs	r3, #3
 8003566:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003568:	f107 0314 	add.w	r3, r7, #20
 800356c:	4619      	mov	r1, r3
 800356e:	4847      	ldr	r0, [pc, #284]	; (800368c <MX_GPIO_Init+0x27c>)
 8003570:	f003 f8e6 	bl	8006740 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_STATUS_Pin */
  GPIO_InitStruct.Pin = ADC_STATUS_Pin;
 8003574:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800357a:	4b49      	ldr	r3, [pc, #292]	; (80036a0 <MX_GPIO_Init+0x290>)
 800357c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800357e:	2302      	movs	r3, #2
 8003580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADC_STATUS_GPIO_Port, &GPIO_InitStruct);
 8003582:	f107 0314 	add.w	r3, r7, #20
 8003586:	4619      	mov	r1, r3
 8003588:	4840      	ldr	r0, [pc, #256]	; (800368c <MX_GPIO_Init+0x27c>)
 800358a:	f003 f8d9 	bl	8006740 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 800358e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003594:	2301      	movs	r3, #1
 8003596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359c:	2303      	movs	r3, #3
 800359e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80035a0:	f107 0314 	add.w	r3, r7, #20
 80035a4:	4619      	mov	r1, r3
 80035a6:	4839      	ldr	r0, [pc, #228]	; (800368c <MX_GPIO_Init+0x27c>)
 80035a8:	f003 f8ca 	bl	8006740 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 80035ac:	2340      	movs	r3, #64	; 0x40
 80035ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035b0:	2301      	movs	r3, #1
 80035b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b8:	2303      	movs	r3, #3
 80035ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	4619      	mov	r1, r3
 80035c2:	4831      	ldr	r0, [pc, #196]	; (8003688 <MX_GPIO_Init+0x278>)
 80035c4:	f003 f8bc 	bl	8006740 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART1_COMM_Pin MCU_IGN_Pin */
  GPIO_InitStruct.Pin = USART1_COMM_Pin|MCU_IGN_Pin;
 80035c8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80035cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d6:	f107 0314 	add.w	r3, r7, #20
 80035da:	4619      	mov	r1, r3
 80035dc:	482c      	ldr	r0, [pc, #176]	; (8003690 <MX_GPIO_Init+0x280>)
 80035de:	f003 f8af 	bl	8006740 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_START_Pin */
  GPIO_InitStruct.Pin = RELAY_START_Pin;
 80035e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e8:	2301      	movs	r3, #1
 80035ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f0:	2300      	movs	r3, #0
 80035f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY_START_GPIO_Port, &GPIO_InitStruct);
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	4619      	mov	r1, r3
 80035fa:	4825      	ldr	r0, [pc, #148]	; (8003690 <MX_GPIO_Init+0x280>)
 80035fc:	f003 f8a0 	bl	8006740 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_PARK_Pin SENS_GEAR_Pin */
  GPIO_InitStruct.Pin = SENS_PARK_Pin|SENS_GEAR_Pin;
 8003600:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800360e:	f107 0314 	add.w	r3, r7, #20
 8003612:	4619      	mov	r1, r3
 8003614:	481c      	ldr	r0, [pc, #112]	; (8003688 <MX_GPIO_Init+0x278>)
 8003616:	f003 f893 	bl	8006740 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECON_Pin */
  GPIO_InitStruct.Pin = ECON_Pin;
 800361a:	2304      	movs	r3, #4
 800361c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800361e:	2301      	movs	r3, #1
 8003620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	2300      	movs	r3, #0
 8003624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003626:	2300      	movs	r3, #0
 8003628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ECON_GPIO_Port, &GPIO_InitStruct);
 800362a:	f107 0314 	add.w	r3, r7, #20
 800362e:	4619      	mov	r1, r3
 8003630:	4818      	ldr	r0, [pc, #96]	; (8003694 <MX_GPIO_Init+0x284>)
 8003632:	f003 f885 	bl	8006740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROPANE_IN_Pin PETROL_IN_Pin */
  GPIO_InitStruct.Pin = PROPANE_IN_Pin|PETROL_IN_Pin;
 8003636:	2330      	movs	r3, #48	; 0x30
 8003638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800363a:	2300      	movs	r3, #0
 800363c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800363e:	2301      	movs	r3, #1
 8003640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003642:	f107 0314 	add.w	r3, r7, #20
 8003646:	4619      	mov	r1, r3
 8003648:	4810      	ldr	r0, [pc, #64]	; (800368c <MX_GPIO_Init+0x27c>)
 800364a:	f003 f879 	bl	8006740 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = IGN_23_Pin|IGN_14_Pin;
 800364e:	23c0      	movs	r3, #192	; 0xc0
 8003650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003652:	2301      	movs	r3, #1
 8003654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365a:	2303      	movs	r3, #3
 800365c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365e:	f107 0314 	add.w	r3, r7, #20
 8003662:	4619      	mov	r1, r3
 8003664:	4809      	ldr	r0, [pc, #36]	; (800368c <MX_GPIO_Init+0x27c>)
 8003666:	f003 f86b 	bl	8006740 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800366a:	2200      	movs	r2, #0
 800366c:	2102      	movs	r1, #2
 800366e:	2028      	movs	r0, #40	; 0x28
 8003670:	f002 fa9b 	bl	8005baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003674:	2028      	movs	r0, #40	; 0x28
 8003676:	f002 fab4 	bl	8005be2 <HAL_NVIC_EnableIRQ>

}
 800367a:	bf00      	nop
 800367c:	3728      	adds	r7, #40	; 0x28
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800
 8003688:	40020800 	.word	0x40020800
 800368c:	40020400 	.word	0x40020400
 8003690:	40020000 	.word	0x40020000
 8003694:	40020c00 	.word	0x40020c00
 8003698:	10310000 	.word	0x10310000
 800369c:	10110000 	.word	0x10110000
 80036a0:	10210000 	.word	0x10210000

080036a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80036a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036aa:	e7fe      	b.n	80036aa <Error_Handler+0x6>

080036ac <map_init>:
#define REF_VOLTAGE 3.32f
#define RES_DIVIDER 1.467f


void map_init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ADC_FORMAT_GPIO_Port, ADC_FORMAT_Pin, GPIO_PIN_RESET);
 80036b0:	2200      	movs	r2, #0
 80036b2:	2104      	movs	r1, #4
 80036b4:	480c      	ldr	r0, [pc, #48]	; (80036e8 <map_init+0x3c>)
 80036b6:	f003 f9f5 	bl	8006aa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_BPO_GPIO_Port, ADC_BPO_Pin, GPIO_PIN_RESET);
 80036ba:	2200      	movs	r2, #0
 80036bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036c0:	4809      	ldr	r0, [pc, #36]	; (80036e8 <map_init+0x3c>)
 80036c2:	f003 f9ef 	bl	8006aa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nCE_GPIO_Port, ADC_nCE_Pin, GPIO_PIN_RESET);
 80036c6:	2200      	movs	r2, #0
 80036c8:	2110      	movs	r1, #16
 80036ca:	4808      	ldr	r0, [pc, #32]	; (80036ec <map_init+0x40>)
 80036cc:	f003 f9ea 	bl	8006aa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 80036d0:	2200      	movs	r2, #0
 80036d2:	2101      	movs	r1, #1
 80036d4:	4804      	ldr	r0, [pc, #16]	; (80036e8 <map_init+0x3c>)
 80036d6:	f003 f9e5 	bl	8006aa4 <HAL_GPIO_WritePin>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 80036da:	2108      	movs	r1, #8
 80036dc:	4804      	ldr	r0, [pc, #16]	; (80036f0 <map_init+0x44>)
 80036de:	f005 fbad 	bl	8008e3c <HAL_TIMEx_PWMN_Start>
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40020400 	.word	0x40020400
 80036ec:	40020800 	.word	0x40020800
 80036f0:	20017d4c 	.word	0x20017d4c

080036f4 <map_adc_read>:

inline void map_adc_read(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
  uint8_t portdata = GPIOA->IDR & 0xFF;
 80036fa:	4b26      	ldr	r3, [pc, #152]	; (8003794 <map_adc_read+0xa0>)
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	72fb      	strb	r3, [r7, #11]
  float voltage = portdata / 50.0f;
 8003700:	7afb      	ldrb	r3, [r7, #11]
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800370a:	eddf 6a23 	vldr	s13, [pc, #140]	; 8003798 <map_adc_read+0xa4>
 800370e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003712:	edc7 7a01 	vstr	s15, [r7, #4]
  if(voltage < 0.3f) map_error = 1;
 8003716:	edd7 7a01 	vldr	s15, [r7, #4]
 800371a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800379c <map_adc_read+0xa8>
 800371e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003726:	d503      	bpl.n	8003730 <map_adc_read+0x3c>
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <map_adc_read+0xac>)
 800372a:	2201      	movs	r2, #1
 800372c:	701a      	strb	r2, [r3, #0]
 800372e:	e002      	b.n	8003736 <map_adc_read+0x42>
  else map_error = 0;
 8003730:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <map_adc_read+0xac>)
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]
  float pressure = (voltage - 0.5f) * 25517.0f;
 8003736:	edd7 7a01 	vldr	s15, [r7, #4]
 800373a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800373e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003742:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80037a4 <map_adc_read+0xb0>
 8003746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800374a:	edc7 7a03 	vstr	s15, [r7, #12]
  if(pressure < 0.0f)
 800374e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003752:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375a:	d502      	bpl.n	8003762 <map_adc_read+0x6e>
    pressure = 0.0f;
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
  map_data = map_data * (1.0f - lowpass_koff) + pressure * lowpass_koff;
 8003762:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <map_adc_read+0xb4>)
 8003764:	edd3 7a00 	vldr	s15, [r3]
 8003768:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80037ac <map_adc_read+0xb8>
 800376c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003770:	edd7 7a03 	vldr	s15, [r7, #12]
 8003774:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80037b0 <map_adc_read+0xbc>
 8003778:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800377c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <map_adc_read+0xb4>)
 8003782:	edc3 7a00 	vstr	s15, [r3]
}
 8003786:	bf00      	nop
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40020000 	.word	0x40020000
 8003798:	42480000 	.word	0x42480000
 800379c:	3e99999a 	.word	0x3e99999a
 80037a0:	20011735 	.word	0x20011735
 80037a4:	46c75a00 	.word	0x46c75a00
 80037a8:	20010028 	.word	0x20010028
 80037ac:	3f733333 	.word	0x3f733333
 80037b0:	3d4ccccd 	.word	0x3d4ccccd

080037b4 <map_getpressure>:

inline float map_getpressure(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return map_data;
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <map_getpressure+0x18>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	ee07 3a90 	vmov	s15, r3
}
 80037c0:	eeb0 0a67 	vmov.f32	s0, s15
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	20010028 	.word	0x20010028

080037d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80037d6:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <HAL_MspInit+0x44>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	4a0e      	ldr	r2, [pc, #56]	; (8003814 <HAL_MspInit+0x44>)
 80037dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6413      	str	r3, [r2, #64]	; 0x40
 80037e2:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <HAL_MspInit+0x44>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ea:	607b      	str	r3, [r7, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ee:	4b09      	ldr	r3, [pc, #36]	; (8003814 <HAL_MspInit+0x44>)
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	4a08      	ldr	r2, [pc, #32]	; (8003814 <HAL_MspInit+0x44>)
 80037f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f8:	6453      	str	r3, [r2, #68]	; 0x44
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_MspInit+0x44>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800

08003818 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a33      	ldr	r2, [pc, #204]	; (8003904 <HAL_ADC_MspInit+0xec>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d15f      	bne.n	80038fa <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800383a:	4b33      	ldr	r3, [pc, #204]	; (8003908 <HAL_ADC_MspInit+0xf0>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	4a32      	ldr	r2, [pc, #200]	; (8003908 <HAL_ADC_MspInit+0xf0>)
 8003840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003844:	6453      	str	r3, [r2, #68]	; 0x44
 8003846:	4b30      	ldr	r3, [pc, #192]	; (8003908 <HAL_ADC_MspInit+0xf0>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003852:	4b2d      	ldr	r3, [pc, #180]	; (8003908 <HAL_ADC_MspInit+0xf0>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	4a2c      	ldr	r2, [pc, #176]	; (8003908 <HAL_ADC_MspInit+0xf0>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6313      	str	r3, [r2, #48]	; 0x30
 800385e:	4b2a      	ldr	r3, [pc, #168]	; (8003908 <HAL_ADC_MspInit+0xf0>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800386a:	4b27      	ldr	r3, [pc, #156]	; (8003908 <HAL_ADC_MspInit+0xf0>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	4a26      	ldr	r2, [pc, #152]	; (8003908 <HAL_ADC_MspInit+0xf0>)
 8003870:	f043 0304 	orr.w	r3, r3, #4
 8003874:	6313      	str	r3, [r2, #48]	; 0x30
 8003876:	4b24      	ldr	r3, [pc, #144]	; (8003908 <HAL_ADC_MspInit+0xf0>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_12_TEMP_Pin|ADC1_13_BAT_Pin;
 8003882:	230c      	movs	r3, #12
 8003884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003886:	2303      	movs	r3, #3
 8003888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800388e:	f107 0314 	add.w	r3, r7, #20
 8003892:	4619      	mov	r1, r3
 8003894:	481d      	ldr	r0, [pc, #116]	; (800390c <HAL_ADC_MspInit+0xf4>)
 8003896:	f002 ff53 	bl	8006740 <HAL_GPIO_Init>
    //GPIO_InitStruct.Pull = GPIO_NOPULL;
    //HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800389a:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <HAL_ADC_MspInit+0xf8>)
 800389c:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <HAL_ADC_MspInit+0xfc>)
 800389e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80038a0:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <HAL_ADC_MspInit+0xf8>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038a6:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <HAL_ADC_MspInit+0xf8>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80038ac:	4b18      	ldr	r3, [pc, #96]	; (8003910 <HAL_ADC_MspInit+0xf8>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80038b2:	4b17      	ldr	r3, [pc, #92]	; (8003910 <HAL_ADC_MspInit+0xf8>)
 80038b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <HAL_ADC_MspInit+0xf8>)
 80038bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80038c2:	4b13      	ldr	r3, [pc, #76]	; (8003910 <HAL_ADC_MspInit+0xf8>)
 80038c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <HAL_ADC_MspInit+0xf8>)
 80038cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038d0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80038d2:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <HAL_ADC_MspInit+0xf8>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038d8:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <HAL_ADC_MspInit+0xf8>)
 80038da:	2200      	movs	r2, #0
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80038de:	480c      	ldr	r0, [pc, #48]	; (8003910 <HAL_ADC_MspInit+0xf8>)
 80038e0:	f002 fb96 	bl	8006010 <HAL_DMA_Init>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 80038ea:	f7ff fedb 	bl	80036a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a07      	ldr	r2, [pc, #28]	; (8003910 <HAL_ADC_MspInit+0xf8>)
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
 80038f4:	4a06      	ldr	r2, [pc, #24]	; (8003910 <HAL_ADC_MspInit+0xf8>)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80038fa:	bf00      	nop
 80038fc:	3728      	adds	r7, #40	; 0x28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40012000 	.word	0x40012000
 8003908:	40023800 	.word	0x40023800
 800390c:	40020800 	.word	0x40020800
 8003910:	20018088 	.word	0x20018088
 8003914:	40026410 	.word	0x40026410

08003918 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <HAL_CRC_MspInit+0x38>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d10b      	bne.n	8003942 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800392a:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <HAL_CRC_MspInit+0x3c>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <HAL_CRC_MspInit+0x3c>)
 8003930:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003934:	6313      	str	r3, [r2, #48]	; 0x30
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <HAL_CRC_MspInit+0x3c>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40023000 	.word	0x40023000
 8003954:	40023800 	.word	0x40023800

08003958 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <HAL_RNG_MspInit+0x38>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d10b      	bne.n	8003982 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800396a:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <HAL_RNG_MspInit+0x3c>)
 800396c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396e:	4a09      	ldr	r2, [pc, #36]	; (8003994 <HAL_RNG_MspInit+0x3c>)
 8003970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003974:	6353      	str	r3, [r2, #52]	; 0x34
 8003976:	4b07      	ldr	r3, [pc, #28]	; (8003994 <HAL_RNG_MspInit+0x3c>)
 8003978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	50060800 	.word	0x50060800
 8003994:	40023800 	.word	0x40023800

08003998 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	; 0x28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a0:	f107 0314 	add.w	r3, r7, #20
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a49      	ldr	r2, [pc, #292]	; (8003adc <HAL_SPI_MspInit+0x144>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	f040 808b 	bne.w	8003ad2 <HAL_SPI_MspInit+0x13a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80039bc:	4b48      	ldr	r3, [pc, #288]	; (8003ae0 <HAL_SPI_MspInit+0x148>)
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	4a47      	ldr	r2, [pc, #284]	; (8003ae0 <HAL_SPI_MspInit+0x148>)
 80039c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c6:	6413      	str	r3, [r2, #64]	; 0x40
 80039c8:	4b45      	ldr	r3, [pc, #276]	; (8003ae0 <HAL_SPI_MspInit+0x148>)
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d4:	4b42      	ldr	r3, [pc, #264]	; (8003ae0 <HAL_SPI_MspInit+0x148>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	4a41      	ldr	r2, [pc, #260]	; (8003ae0 <HAL_SPI_MspInit+0x148>)
 80039da:	f043 0302 	orr.w	r3, r3, #2
 80039de:	6313      	str	r3, [r2, #48]	; 0x30
 80039e0:	4b3f      	ldr	r3, [pc, #252]	; (8003ae0 <HAL_SPI_MspInit+0x148>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80039ec:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80039f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f2:	2302      	movs	r3, #2
 80039f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039f6:	2301      	movs	r3, #1
 80039f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fa:	2303      	movs	r3, #3
 80039fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80039fe:	2305      	movs	r3, #5
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a02:	f107 0314 	add.w	r3, r7, #20
 8003a06:	4619      	mov	r1, r3
 8003a08:	4836      	ldr	r0, [pc, #216]	; (8003ae4 <HAL_SPI_MspInit+0x14c>)
 8003a0a:	f002 fe99 	bl	8006740 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003a0e:	4b36      	ldr	r3, [pc, #216]	; (8003ae8 <HAL_SPI_MspInit+0x150>)
 8003a10:	4a36      	ldr	r2, [pc, #216]	; (8003aec <HAL_SPI_MspInit+0x154>)
 8003a12:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003a14:	4b34      	ldr	r3, [pc, #208]	; (8003ae8 <HAL_SPI_MspInit+0x150>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a1a:	4b33      	ldr	r3, [pc, #204]	; (8003ae8 <HAL_SPI_MspInit+0x150>)
 8003a1c:	2240      	movs	r2, #64	; 0x40
 8003a1e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a20:	4b31      	ldr	r3, [pc, #196]	; (8003ae8 <HAL_SPI_MspInit+0x150>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a26:	4b30      	ldr	r3, [pc, #192]	; (8003ae8 <HAL_SPI_MspInit+0x150>)
 8003a28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a2c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a2e:	4b2e      	ldr	r3, [pc, #184]	; (8003ae8 <HAL_SPI_MspInit+0x150>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a34:	4b2c      	ldr	r3, [pc, #176]	; (8003ae8 <HAL_SPI_MspInit+0x150>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003a3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ae8 <HAL_SPI_MspInit+0x150>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a40:	4b29      	ldr	r3, [pc, #164]	; (8003ae8 <HAL_SPI_MspInit+0x150>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a46:	4b28      	ldr	r3, [pc, #160]	; (8003ae8 <HAL_SPI_MspInit+0x150>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003a4c:	4826      	ldr	r0, [pc, #152]	; (8003ae8 <HAL_SPI_MspInit+0x150>)
 8003a4e:	f002 fadf 	bl	8006010 <HAL_DMA_Init>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8003a58:	f7ff fe24 	bl	80036a4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a22      	ldr	r2, [pc, #136]	; (8003ae8 <HAL_SPI_MspInit+0x150>)
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54
 8003a62:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <HAL_SPI_MspInit+0x150>)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003a68:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <HAL_SPI_MspInit+0x158>)
 8003a6a:	4a22      	ldr	r2, [pc, #136]	; (8003af4 <HAL_SPI_MspInit+0x15c>)
 8003a6c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003a6e:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <HAL_SPI_MspInit+0x158>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a74:	4b1e      	ldr	r3, [pc, #120]	; (8003af0 <HAL_SPI_MspInit+0x158>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a7a:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <HAL_SPI_MspInit+0x158>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <HAL_SPI_MspInit+0x158>)
 8003a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a86:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a88:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <HAL_SPI_MspInit+0x158>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a8e:	4b18      	ldr	r3, [pc, #96]	; (8003af0 <HAL_SPI_MspInit+0x158>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003a94:	4b16      	ldr	r3, [pc, #88]	; (8003af0 <HAL_SPI_MspInit+0x158>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a9a:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <HAL_SPI_MspInit+0x158>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003aa0:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <HAL_SPI_MspInit+0x158>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003aa6:	4812      	ldr	r0, [pc, #72]	; (8003af0 <HAL_SPI_MspInit+0x158>)
 8003aa8:	f002 fab2 	bl	8006010 <HAL_DMA_Init>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_SPI_MspInit+0x11e>
    {
      Error_Handler();
 8003ab2:	f7ff fdf7 	bl	80036a4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a0d      	ldr	r2, [pc, #52]	; (8003af0 <HAL_SPI_MspInit+0x158>)
 8003aba:	659a      	str	r2, [r3, #88]	; 0x58
 8003abc:	4a0c      	ldr	r2, [pc, #48]	; (8003af0 <HAL_SPI_MspInit+0x158>)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 14, 0);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	210e      	movs	r1, #14
 8003ac6:	2024      	movs	r0, #36	; 0x24
 8003ac8:	f002 f86f 	bl	8005baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003acc:	2024      	movs	r0, #36	; 0x24
 8003ace:	f002 f888 	bl	8005be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003ad2:	bf00      	nop
 8003ad4:	3728      	adds	r7, #40	; 0x28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40003800 	.word	0x40003800
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40020400 	.word	0x40020400
 8003ae8:	200180f8 	.word	0x200180f8
 8003aec:	40026070 	.word	0x40026070
 8003af0:	20017e60 	.word	0x20017e60
 8003af4:	40026058 	.word	0x40026058

08003af8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a13      	ldr	r2, [pc, #76]	; (8003b54 <HAL_TIM_PWM_MspInit+0x5c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d10c      	bne.n	8003b24 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b0a:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <HAL_TIM_PWM_MspInit+0x60>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	4a12      	ldr	r2, [pc, #72]	; (8003b58 <HAL_TIM_PWM_MspInit+0x60>)
 8003b10:	f043 0302 	orr.w	r3, r3, #2
 8003b14:	6413      	str	r3, [r2, #64]	; 0x40
 8003b16:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <HAL_TIM_PWM_MspInit+0x60>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003b22:	e010      	b.n	8003b46 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a0c      	ldr	r2, [pc, #48]	; (8003b5c <HAL_TIM_PWM_MspInit+0x64>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d10b      	bne.n	8003b46 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <HAL_TIM_PWM_MspInit+0x60>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	4a09      	ldr	r2, [pc, #36]	; (8003b58 <HAL_TIM_PWM_MspInit+0x60>)
 8003b34:	f043 0302 	orr.w	r3, r3, #2
 8003b38:	6453      	str	r3, [r2, #68]	; 0x44
 8003b3a:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <HAL_TIM_PWM_MspInit+0x60>)
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]
}
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40000400 	.word	0x40000400
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40010400 	.word	0x40010400

08003b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a31      	ldr	r2, [pc, #196]	; (8003c34 <HAL_TIM_Base_MspInit+0xd4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d114      	bne.n	8003b9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b72:	4b31      	ldr	r3, [pc, #196]	; (8003c38 <HAL_TIM_Base_MspInit+0xd8>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	4a30      	ldr	r2, [pc, #192]	; (8003c38 <HAL_TIM_Base_MspInit+0xd8>)
 8003b78:	f043 0304 	orr.w	r3, r3, #4
 8003b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7e:	4b2e      	ldr	r3, [pc, #184]	; (8003c38 <HAL_TIM_Base_MspInit+0xd8>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2103      	movs	r1, #3
 8003b8e:	201e      	movs	r0, #30
 8003b90:	f002 f80b 	bl	8005baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b94:	201e      	movs	r0, #30
 8003b96:	f002 f824 	bl	8005be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003b9a:	e047      	b.n	8003c2c <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM7)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a26      	ldr	r2, [pc, #152]	; (8003c3c <HAL_TIM_Base_MspInit+0xdc>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d142      	bne.n	8003c2c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003ba6:	4b24      	ldr	r3, [pc, #144]	; (8003c38 <HAL_TIM_Base_MspInit+0xd8>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	4a23      	ldr	r2, [pc, #140]	; (8003c38 <HAL_TIM_Base_MspInit+0xd8>)
 8003bac:	f043 0320 	orr.w	r3, r3, #32
 8003bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb2:	4b21      	ldr	r3, [pc, #132]	; (8003c38 <HAL_TIM_Base_MspInit+0xd8>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
    hdma_tim7_up.Instance = DMA1_Stream2;
 8003bbe:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <HAL_TIM_Base_MspInit+0xe0>)
 8003bc0:	4a20      	ldr	r2, [pc, #128]	; (8003c44 <HAL_TIM_Base_MspInit+0xe4>)
 8003bc2:	601a      	str	r2, [r3, #0]
    hdma_tim7_up.Init.Channel = DMA_CHANNEL_1;
 8003bc4:	4b1e      	ldr	r3, [pc, #120]	; (8003c40 <HAL_TIM_Base_MspInit+0xe0>)
 8003bc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bca:	605a      	str	r2, [r3, #4]
    hdma_tim7_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bcc:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <HAL_TIM_Base_MspInit+0xe0>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	609a      	str	r2, [r3, #8]
    hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bd2:	4b1b      	ldr	r3, [pc, #108]	; (8003c40 <HAL_TIM_Base_MspInit+0xe0>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	60da      	str	r2, [r3, #12]
    hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 8003bd8:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <HAL_TIM_Base_MspInit+0xe0>)
 8003bda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bde:	611a      	str	r2, [r3, #16]
    hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003be0:	4b17      	ldr	r3, [pc, #92]	; (8003c40 <HAL_TIM_Base_MspInit+0xe0>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	615a      	str	r2, [r3, #20]
    hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003be6:	4b16      	ldr	r3, [pc, #88]	; (8003c40 <HAL_TIM_Base_MspInit+0xe0>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	619a      	str	r2, [r3, #24]
    hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 8003bec:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <HAL_TIM_Base_MspInit+0xe0>)
 8003bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bf2:	61da      	str	r2, [r3, #28]
    hdma_tim7_up.Init.Priority = DMA_PRIORITY_LOW;
 8003bf4:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <HAL_TIM_Base_MspInit+0xe0>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	621a      	str	r2, [r3, #32]
    hdma_tim7_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bfa:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <HAL_TIM_Base_MspInit+0xe0>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 8003c00:	480f      	ldr	r0, [pc, #60]	; (8003c40 <HAL_TIM_Base_MspInit+0xe0>)
 8003c02:	f002 fa05 	bl	8006010 <HAL_DMA_Init>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_TIM_Base_MspInit+0xb0>
      Error_Handler();
 8003c0c:	f7ff fd4a 	bl	80036a4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a0b      	ldr	r2, [pc, #44]	; (8003c40 <HAL_TIM_Base_MspInit+0xe0>)
 8003c14:	621a      	str	r2, [r3, #32]
 8003c16:	4a0a      	ldr	r2, [pc, #40]	; (8003c40 <HAL_TIM_Base_MspInit+0xe0>)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2105      	movs	r1, #5
 8003c20:	2037      	movs	r0, #55	; 0x37
 8003c22:	f001 ffc2 	bl	8005baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003c26:	2037      	movs	r0, #55	; 0x37
 8003c28:	f001 ffdb 	bl	8005be2 <HAL_NVIC_EnableIRQ>
}
 8003c2c:	bf00      	nop
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40000800 	.word	0x40000800
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40001400 	.word	0x40001400
 8003c40:	20017dcc 	.word	0x20017dcc
 8003c44:	40026040 	.word	0x40026040

08003c48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	; 0x28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c50:	f107 0314 	add.w	r3, r7, #20
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	60da      	str	r2, [r3, #12]
 8003c5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a22      	ldr	r2, [pc, #136]	; (8003cf0 <HAL_TIM_MspPostInit+0xa8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d11d      	bne.n	8003ca6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6a:	4b22      	ldr	r3, [pc, #136]	; (8003cf4 <HAL_TIM_MspPostInit+0xac>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	4a21      	ldr	r2, [pc, #132]	; (8003cf4 <HAL_TIM_MspPostInit+0xac>)
 8003c70:	f043 0304 	orr.w	r3, r3, #4
 8003c74:	6313      	str	r3, [r2, #48]	; 0x30
 8003c76:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <HAL_TIM_MspPostInit+0xac>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH3_CHOKE_Pin|TIM3_CH4_ACC_Pin;
 8003c82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c90:	2303      	movs	r3, #3
 8003c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c94:	2302      	movs	r3, #2
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c98:	f107 0314 	add.w	r3, r7, #20
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4816      	ldr	r0, [pc, #88]	; (8003cf8 <HAL_TIM_MspPostInit+0xb0>)
 8003ca0:	f002 fd4e 	bl	8006740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003ca4:	e020      	b.n	8003ce8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a14      	ldr	r2, [pc, #80]	; (8003cfc <HAL_TIM_MspPostInit+0xb4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d11b      	bne.n	8003ce8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <HAL_TIM_MspPostInit+0xac>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	4a0f      	ldr	r2, [pc, #60]	; (8003cf4 <HAL_TIM_MspPostInit+0xac>)
 8003cb6:	f043 0302 	orr.w	r3, r3, #2
 8003cba:	6313      	str	r3, [r2, #48]	; 0x30
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <HAL_TIM_MspPostInit+0xac>)
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH3N_ADC_RW_Pin;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM8_CH3N_ADC_RW_GPIO_Port, &GPIO_InitStruct);
 8003cdc:	f107 0314 	add.w	r3, r7, #20
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4807      	ldr	r0, [pc, #28]	; (8003d00 <HAL_TIM_MspPostInit+0xb8>)
 8003ce4:	f002 fd2c 	bl	8006740 <HAL_GPIO_Init>
}
 8003ce8:	bf00      	nop
 8003cea:	3728      	adds	r7, #40	; 0x28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	40020800 	.word	0x40020800
 8003cfc:	40010400 	.word	0x40010400
 8003d00:	40020400 	.word	0x40020400

08003d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	; 0x28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d0c:	f107 0314 	add.w	r3, r7, #20
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	609a      	str	r2, [r3, #8]
 8003d18:	60da      	str	r2, [r3, #12]
 8003d1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a4a      	ldr	r2, [pc, #296]	; (8003e4c <HAL_UART_MspInit+0x148>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	f040 808e 	bne.w	8003e44 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d28:	4b49      	ldr	r3, [pc, #292]	; (8003e50 <HAL_UART_MspInit+0x14c>)
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2c:	4a48      	ldr	r2, [pc, #288]	; (8003e50 <HAL_UART_MspInit+0x14c>)
 8003d2e:	f043 0310 	orr.w	r3, r3, #16
 8003d32:	6453      	str	r3, [r2, #68]	; 0x44
 8003d34:	4b46      	ldr	r3, [pc, #280]	; (8003e50 <HAL_UART_MspInit+0x14c>)
 8003d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d40:	4b43      	ldr	r3, [pc, #268]	; (8003e50 <HAL_UART_MspInit+0x14c>)
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	4a42      	ldr	r2, [pc, #264]	; (8003e50 <HAL_UART_MspInit+0x14c>)
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4c:	4b40      	ldr	r3, [pc, #256]	; (8003e50 <HAL_UART_MspInit+0x14c>)
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d58:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d62:	2301      	movs	r3, #1
 8003d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d66:	2303      	movs	r3, #3
 8003d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d6a:	2307      	movs	r3, #7
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d6e:	f107 0314 	add.w	r3, r7, #20
 8003d72:	4619      	mov	r1, r3
 8003d74:	4837      	ldr	r0, [pc, #220]	; (8003e54 <HAL_UART_MspInit+0x150>)
 8003d76:	f002 fce3 	bl	8006740 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003d7a:	4b37      	ldr	r3, [pc, #220]	; (8003e58 <HAL_UART_MspInit+0x154>)
 8003d7c:	4a37      	ldr	r2, [pc, #220]	; (8003e5c <HAL_UART_MspInit+0x158>)
 8003d7e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003d80:	4b35      	ldr	r3, [pc, #212]	; (8003e58 <HAL_UART_MspInit+0x154>)
 8003d82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d86:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d88:	4b33      	ldr	r3, [pc, #204]	; (8003e58 <HAL_UART_MspInit+0x154>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d8e:	4b32      	ldr	r3, [pc, #200]	; (8003e58 <HAL_UART_MspInit+0x154>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d94:	4b30      	ldr	r3, [pc, #192]	; (8003e58 <HAL_UART_MspInit+0x154>)
 8003d96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d9a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d9c:	4b2e      	ldr	r3, [pc, #184]	; (8003e58 <HAL_UART_MspInit+0x154>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003da2:	4b2d      	ldr	r3, [pc, #180]	; (8003e58 <HAL_UART_MspInit+0x154>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003da8:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <HAL_UART_MspInit+0x154>)
 8003daa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dae:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003db0:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <HAL_UART_MspInit+0x154>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003db6:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <HAL_UART_MspInit+0x154>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003dbc:	4826      	ldr	r0, [pc, #152]	; (8003e58 <HAL_UART_MspInit+0x154>)
 8003dbe:	f002 f927 	bl	8006010 <HAL_DMA_Init>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8003dc8:	f7ff fc6c 	bl	80036a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a22      	ldr	r2, [pc, #136]	; (8003e58 <HAL_UART_MspInit+0x154>)
 8003dd0:	66da      	str	r2, [r3, #108]	; 0x6c
 8003dd2:	4a21      	ldr	r2, [pc, #132]	; (8003e58 <HAL_UART_MspInit+0x154>)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003dd8:	4b21      	ldr	r3, [pc, #132]	; (8003e60 <HAL_UART_MspInit+0x15c>)
 8003dda:	4a22      	ldr	r2, [pc, #136]	; (8003e64 <HAL_UART_MspInit+0x160>)
 8003ddc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003dde:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <HAL_UART_MspInit+0x15c>)
 8003de0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003de4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003de6:	4b1e      	ldr	r3, [pc, #120]	; (8003e60 <HAL_UART_MspInit+0x15c>)
 8003de8:	2240      	movs	r2, #64	; 0x40
 8003dea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dec:	4b1c      	ldr	r3, [pc, #112]	; (8003e60 <HAL_UART_MspInit+0x15c>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003df2:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <HAL_UART_MspInit+0x15c>)
 8003df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003df8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dfa:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <HAL_UART_MspInit+0x15c>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e00:	4b17      	ldr	r3, [pc, #92]	; (8003e60 <HAL_UART_MspInit+0x15c>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003e06:	4b16      	ldr	r3, [pc, #88]	; (8003e60 <HAL_UART_MspInit+0x15c>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e0c:	4b14      	ldr	r3, [pc, #80]	; (8003e60 <HAL_UART_MspInit+0x15c>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e12:	4b13      	ldr	r3, [pc, #76]	; (8003e60 <HAL_UART_MspInit+0x15c>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003e18:	4811      	ldr	r0, [pc, #68]	; (8003e60 <HAL_UART_MspInit+0x15c>)
 8003e1a:	f002 f8f9 	bl	8006010 <HAL_DMA_Init>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8003e24:	f7ff fc3e 	bl	80036a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a0d      	ldr	r2, [pc, #52]	; (8003e60 <HAL_UART_MspInit+0x15c>)
 8003e2c:	669a      	str	r2, [r3, #104]	; 0x68
 8003e2e:	4a0c      	ldr	r2, [pc, #48]	; (8003e60 <HAL_UART_MspInit+0x15c>)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 9, 0);
 8003e34:	2200      	movs	r2, #0
 8003e36:	2109      	movs	r1, #9
 8003e38:	2025      	movs	r0, #37	; 0x25
 8003e3a:	f001 feb6 	bl	8005baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e3e:	2025      	movs	r0, #37	; 0x25
 8003e40:	f001 fecf 	bl	8005be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003e44:	bf00      	nop
 8003e46:	3728      	adds	r7, #40	; 0x28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40011000 	.word	0x40011000
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40020000 	.word	0x40020000
 8003e58:	20017fa8 	.word	0x20017fa8
 8003e5c:	40026440 	.word	0x40026440
 8003e60:	20017f00 	.word	0x20017f00
 8003e64:	400264b8 	.word	0x400264b8

08003e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e6c:	e7fe      	b.n	8003e6c <NMI_Handler+0x4>

08003e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e72:	e7fe      	b.n	8003e72 <HardFault_Handler+0x4>

08003e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e78:	e7fe      	b.n	8003e78 <MemManage_Handler+0x4>

08003e7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e7e:	e7fe      	b.n	8003e7e <BusFault_Handler+0x4>

08003e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e84:	e7fe      	b.n	8003e84 <UsageFault_Handler+0x4>

08003e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e86:	b480      	push	{r7}
 8003e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eb4:	f001 faf6 	bl	80054a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eb8:	bf00      	nop
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim7_up);
 8003ec0:	4802      	ldr	r0, [pc, #8]	; (8003ecc <DMA1_Stream2_IRQHandler+0x10>)
 8003ec2:	f002 f9d5 	bl	8006270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20017dcc 	.word	0x20017dcc

08003ed0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003ed4:	4802      	ldr	r0, [pc, #8]	; (8003ee0 <DMA1_Stream3_IRQHandler+0x10>)
 8003ed6:	f002 f9cb 	bl	8006270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20017e60 	.word	0x20017e60

08003ee4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003ee8:	4802      	ldr	r0, [pc, #8]	; (8003ef4 <DMA1_Stream4_IRQHandler+0x10>)
 8003eea:	f002 f9c1 	bl	8006270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	200180f8 	.word	0x200180f8

08003ef8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003efc:	4802      	ldr	r0, [pc, #8]	; (8003f08 <SPI2_IRQHandler+0x10>)
 8003efe:	f003 fedd 	bl	8007cbc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20017ce8 	.word	0x20017ce8

08003f0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f10:	4802      	ldr	r0, [pc, #8]	; (8003f1c <USART1_IRQHandler+0x10>)
 8003f12:	f005 fa61 	bl	80093d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20018008 	.word	0x20018008

08003f20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003f24:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f28:	f002 fdd6 	bl	8006ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003f2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003f30:	f002 fdd2 	bl	8006ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003f34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003f38:	f002 fdce 	bl	8006ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003f3c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003f40:	f002 fdca 	bl	8006ad8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f44:	bf00      	nop
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f4c:	4802      	ldr	r0, [pc, #8]	; (8003f58 <TIM4_IRQHandler+0x10>)
 8003f4e:	f004 f8c4 	bl	80080da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f52:	bf00      	nop
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20017d8c 	.word	0x20017d8c

08003f5c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003f60:	4802      	ldr	r0, [pc, #8]	; (8003f6c <TIM7_IRQHandler+0x10>)
 8003f62:	f004 f8ba 	bl	80080da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20018158 	.word	0x20018158

08003f70 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f74:	4802      	ldr	r0, [pc, #8]	; (8003f80 <DMA2_Stream0_IRQHandler+0x10>)
 8003f76:	f002 f97b 	bl	8006270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20018088 	.word	0x20018088

08003f84 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003f88:	4802      	ldr	r0, [pc, #8]	; (8003f94 <DMA2_Stream2_IRQHandler+0x10>)
 8003f8a:	f002 f971 	bl	8006270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003f8e:	bf00      	nop
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20017fa8 	.word	0x20017fa8

08003f98 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003f9c:	4802      	ldr	r0, [pc, #8]	; (8003fa8 <DMA2_Stream7_IRQHandler+0x10>)
 8003f9e:	f002 f967 	bl	8006270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20017f00 	.word	0x20017f00

08003fac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fb0:	4b08      	ldr	r3, [pc, #32]	; (8003fd4 <SystemInit+0x28>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb6:	4a07      	ldr	r2, [pc, #28]	; (8003fd4 <SystemInit+0x28>)
 8003fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <SystemInit+0x28>)
 8003fc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fc6:	609a      	str	r2, [r3, #8]
#endif
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8003fea:	2320      	movs	r3, #32
 8003fec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fee:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8003ff2:	e00b      	b.n	800400c <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 8003ff4:	4a0c      	ldr	r2, [pc, #48]	; (8004028 <SCB_InvalidateDCache_by_Addr+0x50>)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4413      	add	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2b00      	cmp	r3, #0
 8004010:	dcf0      	bgt.n	8003ff4 <SCB_InvalidateDCache_by_Addr+0x1c>
 8004012:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004016:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800401a:	bf00      	nop
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	e000ed00 	.word	0xe000ed00

0800402c <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800403e:	2320      	movs	r3, #32
 8004040:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004042:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8004046:	e00b      	b.n	8004060 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 8004048:	4a0c      	ldr	r2, [pc, #48]	; (800407c <SCB_CleanDCache_by_Addr+0x50>)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4413      	add	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	dcf0      	bgt.n	8004048 <SCB_CleanDCache_by_Addr+0x1c>
 8004066:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800406a:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	e000ed00 	.word	0xe000ed00

08004080 <entercritical>:

#ifndef taskENTER_CRITICAL
#define configMAX_SYSCALL_INTERRUPT_PRIORITY 5
#define taskENTER_CRITICAL entercritical
static inline void entercritical(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
    " dsb                           \n" \
    " cpsie i                         \n" \
    :"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
  );
  */
}
 8004084:	bf00      	nop
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <exitcritical>:
#endif

#ifndef taskEXIT_CRITICAL
#define taskEXIT_CRITICAL exitcritical
static inline void exitcritical(void)
{
 800408e:	b480      	push	{r7}
 8004090:	af00      	add	r7, sp, #0
  __asm volatile
  (
    " msr basepri, %0 " :: "r" ( 0 ) : "memory"
  );
  */
}
 8004092:	bf00      	nop
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <Msg_GetSrc>:

static sGetterHandle xHandles[] = {
    {{0},{0},{0},{0},{0},{0}, &huart1, {etrCTRL,etrPC,etrNone} },
};

static inline int Msg_GetSrc(uint8_t xValue) { return (xValue & 7); }
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	71fb      	strb	r3, [r7, #7]
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	4618      	mov	r0, r3
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <Msg_GetDest>:
static inline int Msg_GetDest(uint8_t xValue) { return ((xValue >> 3) & 7); }
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	4603      	mov	r3, r0
 80040c0:	71fb      	strb	r3, [r7, #7]
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	08db      	lsrs	r3, r3, #3
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <CacheInvalidate>:

static inline void CacheInvalidate(void * buffer, uint32_t size)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d105      	bne.n	80040fc <CacheInvalidate+0x24>
    SCB_InvalidateDCache_by_Addr((uint32_t*)buffer, size);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	4619      	mov	r1, r3
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ff6f 	bl	8003fd8 <SCB_InvalidateDCache_by_Addr>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 80040fa:	e009      	b.n	8004110 <CacheInvalidate+0x38>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	4618      	mov	r0, r3
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4413      	add	r3, r2
 800410a:	4619      	mov	r1, r3
 800410c:	f7ff ff64 	bl	8003fd8 <SCB_InvalidateDCache_by_Addr>
}
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <CacheClean>:

static inline void CacheClean(void * buffer, uint32_t size)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d105      	bne.n	800413c <CacheClean+0x24>
    SCB_CleanDCache_by_Addr((uint32_t*)buffer, size);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	4619      	mov	r1, r3
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff ff79 	bl	800402c <SCB_CleanDCache_by_Addr>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 800413a:	e009      	b.n	8004150 <CacheClean+0x38>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	4618      	mov	r0, r3
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	4413      	add	r3, r2
 800414a:	4619      	mov	r1, r3
 800414c:	f7ff ff6e 	bl	800402c <SCB_CleanDCache_by_Addr>
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <calculatePacketId>:

static inline uint16_t calculatePacketId(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
  static uint16_t counter = 0;
  uint16_t returnvalue;
  do
  {
    counter++;
 800415e:	4b19      	ldr	r3, [pc, #100]	; (80041c4 <calculatePacketId+0x6c>)
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	3301      	adds	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	4b17      	ldr	r3, [pc, #92]	; (80041c4 <calculatePacketId+0x6c>)
 8004168:	801a      	strh	r2, [r3, #0]
    uint16_t localcounter = counter;
 800416a:	4b16      	ldr	r3, [pc, #88]	; (80041c4 <calculatePacketId+0x6c>)
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	81fb      	strh	r3, [r7, #14]
    uint32_t now = Delay_Tick;
 8004170:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <calculatePacketId+0x70>)
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	60bb      	str	r3, [r7, #8]
    uint8_t crcdata[6] = {(localcounter >> 8) & 0xFF,localcounter & 0xFF, (now >> 24) & 0xFF, (now >> 16) & 0xFF, (now >> 8) & 0xFF, now & 0xFF } ;
 8004176:	89fb      	ldrh	r3, [r7, #14]
 8004178:	0a1b      	lsrs	r3, r3, #8
 800417a:	b29b      	uxth	r3, r3
 800417c:	b2db      	uxtb	r3, r3
 800417e:	703b      	strb	r3, [r7, #0]
 8004180:	89fb      	ldrh	r3, [r7, #14]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	707b      	strb	r3, [r7, #1]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	0e1b      	lsrs	r3, r3, #24
 800418a:	b2db      	uxtb	r3, r3
 800418c:	70bb      	strb	r3, [r7, #2]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	b2db      	uxtb	r3, r3
 8004194:	70fb      	strb	r3, [r7, #3]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	0a1b      	lsrs	r3, r3, #8
 800419a:	b2db      	uxtb	r3, r3
 800419c:	713b      	strb	r3, [r7, #4]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	717b      	strb	r3, [r7, #5]
    returnvalue = CRC16_Generate(crcdata, sizeof(crcdata));
 80041a4:	463b      	mov	r3, r7
 80041a6:	2106      	movs	r1, #6
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fd ff43 	bl	8002034 <CRC16_Generate>
 80041ae:	4603      	mov	r3, r0
 80041b0:	80fb      	strh	r3, [r7, #6]
  } while(returnvalue == 0);
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0d2      	beq.n	800415e <calculatePacketId+0x6>
  return returnvalue;
 80041b8:	88fb      	ldrh	r3, [r7, #6]

}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20011740 	.word	0x20011740
 80041c8:	40000c00 	.word	0x40000c00

080041cc <packager>:

static inline void packager(sGetterHandle* xHandle, uint8_t* xMsgPtr, uint16_t xMsgLen, eTransChannels xChaDest, uint16_t aPacketId) {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	4611      	mov	r1, r2
 80041d8:	461a      	mov	r2, r3
 80041da:	460b      	mov	r3, r1
 80041dc:	80fb      	strh	r3, [r7, #6]
 80041de:	4613      	mov	r3, r2
 80041e0:	717b      	strb	r3, [r7, #5]

    if (xHandle && xMsgLen<MAX_PACK_LEN)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80ed 	beq.w	80043c4 <packager+0x1f8>
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80041f0:	f080 80e8 	bcs.w	80043c4 <packager+0x1f8>
    {
        uint16_t aCrc15 = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	823b      	strh	r3, [r7, #16]
        uint16_t aTotLen = xMsgLen ? xMsgLen + 10 : 8;
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <packager+0x3a>
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	330a      	adds	r3, #10
 8004202:	b29b      	uxth	r3, r3
 8004204:	e000      	b.n	8004208 <packager+0x3c>
 8004206:	2308      	movs	r3, #8
 8004208:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = etrACIS | ( xChaDest << 3 );
 800420a:	797b      	ldrb	r3, [r7, #5]
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	b25b      	sxtb	r3, r3
 8004210:	f043 0302 	orr.w	r3, r3, #2
 8004214:	b25b      	sxtb	r3, r3
 8004216:	74fb      	strb	r3, [r7, #19]


        xHandle->BufSender[0] = 0x55;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800421e:	2255      	movs	r2, #85	; 0x55
 8004220:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[1] = 0x55;
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	f241 0381 	movw	r3, #4225	; 0x1081
 8004228:	4413      	add	r3, r2
 800422a:	2255      	movs	r2, #85	; 0x55
 800422c:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[2] = aHeadByte;
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	f241 0382 	movw	r3, #4226	; 0x1082
 8004234:	4413      	add	r3, r2
 8004236:	7cfa      	ldrb	r2, [r7, #19]
 8004238:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[3] = aTotLen & 0xFF;
 800423a:	8abb      	ldrh	r3, [r7, #20]
 800423c:	b2d9      	uxtb	r1, r3
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	f241 0383 	movw	r3, #4227	; 0x1083
 8004244:	4413      	add	r3, r2
 8004246:	460a      	mov	r2, r1
 8004248:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[4] = (aTotLen >> 8) & 0xFF;
 800424a:	8abb      	ldrh	r3, [r7, #20]
 800424c:	0a1b      	lsrs	r3, r3, #8
 800424e:	b29b      	uxth	r3, r3
 8004250:	b2d9      	uxtb	r1, r3
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	f241 0384 	movw	r3, #4228	; 0x1084
 8004258:	4413      	add	r3, r2
 800425a:	460a      	mov	r2, r1
 800425c:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[5] = aPacketId & 0xFF;
 800425e:	8c3b      	ldrh	r3, [r7, #32]
 8004260:	b2d9      	uxtb	r1, r3
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	f241 0385 	movw	r3, #4229	; 0x1085
 8004268:	4413      	add	r3, r2
 800426a:	460a      	mov	r2, r1
 800426c:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[6] = (aPacketId >> 8) & 0xFF;
 800426e:	8c3b      	ldrh	r3, [r7, #32]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	b29b      	uxth	r3, r3
 8004274:	b2d9      	uxtb	r1, r3
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	f241 0386 	movw	r3, #4230	; 0x1086
 800427c:	4413      	add	r3, r2
 800427e:	460a      	mov	r2, r1
 8004280:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[7] = CRC8_Generate(xHandle->BufSender, 7);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8004288:	2107      	movs	r1, #7
 800428a:	4618      	mov	r0, r3
 800428c:	f7fd feee 	bl	800206c <CRC8_Generate>
 8004290:	4603      	mov	r3, r0
 8004292:	4619      	mov	r1, r3
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	f241 0387 	movw	r3, #4231	; 0x1087
 800429a:	4413      	add	r3, r2
 800429c:	460a      	mov	r2, r1
 800429e:	701a      	strb	r2, [r3, #0]


        if (xMsgLen)
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d013      	beq.n	80042ce <packager+0x102>
        {
          memcpy(&xHandle->BufSender[8], xMsgPtr, xMsgLen);
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	f241 0388 	movw	r3, #4232	; 0x1088
 80042ac:	4413      	add	r3, r2
 80042ae:	88fa      	ldrh	r2, [r7, #6]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f005 ff10 	bl	800a0d8 <memcpy>
          aCrc15 = CRC16_Generate(xHandle->BufSender, xMsgLen + 8);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	3308      	adds	r3, #8
 80042c2:	4619      	mov	r1, r3
 80042c4:	4610      	mov	r0, r2
 80042c6:	f7fd feb5 	bl	8002034 <CRC16_Generate>
 80042ca:	4603      	mov	r3, r0
 80042cc:	823b      	strh	r3, [r7, #16]
        }

        uint8_t handled = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	75fb      	strb	r3, [r7, #23]

        if(!protIsSome(&xHandle->xTxFifo))
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80042d8:	4413      	add	r3, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f001 f85f 	bl	800539e <protIsSome>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d147      	bne.n	8004376 <packager+0x1aa>
        {
          taskENTER_CRITICAL();
 80042e6:	f7ff fecb 	bl	8004080 <entercritical>
          if(!xHandle->TxBusy)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d13c      	bne.n	8004372 <packager+0x1a6>
          {
            xHandle->TxBusy = 1;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
            handled = 1;
 8004302:	2301      	movs	r3, #1
 8004304:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 8004306:	f7ff fec2 	bl	800408e <exitcritical>

            memcpy(&xHandle->BufTx[0],xHandle->BufSender,8);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f503 7040 	add.w	r0, r3, #768	; 0x300
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8004316:	2208      	movs	r2, #8
 8004318:	4619      	mov	r1, r3
 800431a:	f005 fedd 	bl	800a0d8 <memcpy>
            if (xMsgLen) {
 800431e:	88fb      	ldrh	r3, [r7, #6]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d012      	beq.n	800434a <packager+0x17e>
              memcpy(&xHandle->BufTx[8], &xHandle->BufSender[8],xMsgLen);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f503 7042 	add.w	r0, r3, #776	; 0x308
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	f241 0388 	movw	r3, #4232	; 0x1088
 8004330:	4413      	add	r3, r2
 8004332:	88fa      	ldrh	r2, [r7, #6]
 8004334:	4619      	mov	r1, r3
 8004336:	f005 fecf 	bl	800a0d8 <memcpy>
              memcpy(&xHandle->BufTx[xMsgLen+8], &aCrc15,2);
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	3308      	adds	r3, #8
 800433e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4413      	add	r3, r2
 8004346:	8a3a      	ldrh	r2, [r7, #16]
 8004348:	801a      	strh	r2, [r3, #0]
            }

            CacheClean(xHandle->BufTx, aTotLen);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004350:	8aba      	ldrh	r2, [r7, #20]
 8004352:	4611      	mov	r1, r2
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff fedf 	bl	8004118 <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, aTotLen);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004368:	8aba      	ldrh	r2, [r7, #20]
 800436a:	4619      	mov	r1, r3
 800436c:	f004 ff34 	bl	80091d8 <HAL_UART_Transmit_DMA>
 8004370:	e001      	b.n	8004376 <packager+0x1aa>
          }
          else taskEXIT_CRITICAL();
 8004372:	f7ff fe8c 	bl	800408e <exitcritical>
        }

        if(!handled)
 8004376:	7dfb      	ldrb	r3, [r7, #23]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d123      	bne.n	80043c4 <packager+0x1f8>
        {
          protPushSequence(&xHandle->xTxFifo,xHandle->BufSender,8);
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004382:	4413      	add	r3, r2
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	f502 5184 	add.w	r1, r2, #4224	; 0x1080
 800438a:	2208      	movs	r2, #8
 800438c:	4618      	mov	r0, r3
 800438e:	f000 ffae 	bl	80052ee <protPushSequence>
          if (xMsgLen) {
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d015      	beq.n	80043c4 <packager+0x1f8>
              protPushSequence(&xHandle->xTxFifo,&xHandle->BufSender[8],xMsgLen);
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	f241 3388 	movw	r3, #5000	; 0x1388
 800439e:	4413      	add	r3, r2
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	f241 0188 	movw	r1, #4232	; 0x1088
 80043a6:	4411      	add	r1, r2
 80043a8:	88fa      	ldrh	r2, [r7, #6]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 ff9f 	bl	80052ee <protPushSequence>
              protPushSequence(&xHandle->xTxFifo,&aCrc15,2);
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80043b6:	4413      	add	r3, r2
 80043b8:	f107 0110 	add.w	r1, r7, #16
 80043bc:	2202      	movs	r2, #2
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 ff95 	bl	80052ee <protPushSequence>
          }
        }
    }
}
 80043c4:	bf00      	nop
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <acker>:

static inline void acker(sGetterHandle* xHandle, uint16_t aPacketId, eTransChannels xChaDest) {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	807b      	strh	r3, [r7, #2]
 80043d8:	4613      	mov	r3, r2
 80043da:	707b      	strb	r3, [r7, #1]

    if (xHandle)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d06f      	beq.n	80044c2 <acker+0xf6>
    {
        uint16_t aTotLen = 8;
 80043e2:	2308      	movs	r3, #8
 80043e4:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = (( etrACIS | ( xChaDest << 3 ) ) | HEADER_ACK_BIT);
 80043e6:	787b      	ldrb	r3, [r7, #1]
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	b25b      	sxtb	r3, r3
 80043ec:	f063 037d 	orn	r3, r3, #125	; 0x7d
 80043f0:	b25b      	sxtb	r3, r3
 80043f2:	74fb      	strb	r3, [r7, #19]
        uint8_t header[8];

        header[0] = 0x55;
 80043f4:	2355      	movs	r3, #85	; 0x55
 80043f6:	723b      	strb	r3, [r7, #8]
        header[1] = 0x55;
 80043f8:	2355      	movs	r3, #85	; 0x55
 80043fa:	727b      	strb	r3, [r7, #9]
        header[2] = aHeadByte;
 80043fc:	7cfb      	ldrb	r3, [r7, #19]
 80043fe:	72bb      	strb	r3, [r7, #10]
        header[3] = aTotLen & 0xFF;
 8004400:	8abb      	ldrh	r3, [r7, #20]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	72fb      	strb	r3, [r7, #11]
        header[4] = (aTotLen >> 8) & 0xFF;
 8004406:	8abb      	ldrh	r3, [r7, #20]
 8004408:	0a1b      	lsrs	r3, r3, #8
 800440a:	b29b      	uxth	r3, r3
 800440c:	b2db      	uxtb	r3, r3
 800440e:	733b      	strb	r3, [r7, #12]
        header[5] = aPacketId & 0xFF;
 8004410:	887b      	ldrh	r3, [r7, #2]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	737b      	strb	r3, [r7, #13]
        header[6] = (aPacketId >> 8) & 0xFF;
 8004416:	887b      	ldrh	r3, [r7, #2]
 8004418:	0a1b      	lsrs	r3, r3, #8
 800441a:	b29b      	uxth	r3, r3
 800441c:	b2db      	uxtb	r3, r3
 800441e:	73bb      	strb	r3, [r7, #14]
        header[7] = CRC8_Generate(header, 7);
 8004420:	f107 0308 	add.w	r3, r7, #8
 8004424:	2107      	movs	r1, #7
 8004426:	4618      	mov	r0, r3
 8004428:	f7fd fe20 	bl	800206c <CRC8_Generate>
 800442c:	4603      	mov	r3, r0
 800442e:	73fb      	strb	r3, [r7, #15]

        uint8_t handled = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	75fb      	strb	r3, [r7, #23]
        if(!protIsSome(&xHandle->xTxFifo))
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	f241 3388 	movw	r3, #5000	; 0x1388
 800443a:	4413      	add	r3, r2
 800443c:	4618      	mov	r0, r3
 800443e:	f000 ffae 	bl	800539e <protIsSome>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d12f      	bne.n	80044a8 <acker+0xdc>
        {
          taskENTER_CRITICAL();
 8004448:	f7ff fe1a 	bl	8004080 <entercritical>
          if(!xHandle->TxBusy)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d124      	bne.n	80044a4 <acker+0xd8>
          {
            xHandle->TxBusy = 1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8004460:	2201      	movs	r2, #1
 8004462:	701a      	strb	r2, [r3, #0]
            handled = 1;
 8004464:	2301      	movs	r3, #1
 8004466:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 8004468:	f7ff fe11 	bl	800408e <exitcritical>
            memcpy(xHandle->BufTx,header,8);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004472:	461a      	mov	r2, r3
 8004474:	f107 0308 	add.w	r3, r7, #8
 8004478:	cb03      	ldmia	r3!, {r0, r1}
 800447a:	6010      	str	r0, [r2, #0]
 800447c:	6051      	str	r1, [r2, #4]
            CacheClean(xHandle->BufTx, 8);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004484:	2108      	movs	r1, #8
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fe46 	bl	8004118 <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, 8);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800449a:	2208      	movs	r2, #8
 800449c:	4619      	mov	r1, r3
 800449e:	f004 fe9b 	bl	80091d8 <HAL_UART_Transmit_DMA>
 80044a2:	e001      	b.n	80044a8 <acker+0xdc>
          }
          else taskEXIT_CRITICAL();
 80044a4:	f7ff fdf3 	bl	800408e <exitcritical>
        }

        if(!handled)
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d109      	bne.n	80044c2 <acker+0xf6>
        {
          protPushSequence(&xHandle->xTxFifo,header,8);
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80044b4:	4413      	add	r3, r2
 80044b6:	f107 0108 	add.w	r1, r7, #8
 80044ba:	2208      	movs	r2, #8
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 ff16 	bl	80052ee <protPushSequence>
        }
    }
}
 80044c2:	bf00      	nop
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <xSender>:


int8_t xSender(eTransChannels xChaDest, uint8_t* xMsgPtr, uint32_t xMsgLen)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	4603      	mov	r3, r0
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	73fb      	strb	r3, [r7, #15]
  uint32_t now = Delay_Tick;
 80044da:	4b3d      	ldr	r3, [pc, #244]	; (80045d0 <xSender+0x104>)
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	617b      	str	r3, [r7, #20]

  sGetterHandle * handle = &xHandles[0];
 80044e0:	4b3c      	ldr	r3, [pc, #240]	; (80045d4 <xSender+0x108>)
 80044e2:	613b      	str	r3, [r7, #16]
    if(handle)
      break;
  }
  */

  if(handle)
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d06c      	beq.n	80045c4 <xSender+0xf8>
  {
    taskENTER_CRITICAL();
 80044ea:	f7ff fdc9 	bl	8004080 <entercritical>
    if(NeedAckPacket)
 80044ee:	4b3a      	ldr	r3, [pc, #232]	; (80045d8 <xSender+0x10c>)
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d045      	beq.n	8004584 <xSender+0xb8>
    {
      if(ReceivedAckPacket)
 80044f8:	4b38      	ldr	r3, [pc, #224]	; (80045dc <xSender+0x110>)
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <xSender+0x4a>
      {
        NeedAckPacket = 0;
 8004502:	4b35      	ldr	r3, [pc, #212]	; (80045d8 <xSender+0x10c>)
 8004504:	2200      	movs	r2, #0
 8004506:	801a      	strh	r2, [r3, #0]
        NeededAckPacketId = 0;
 8004508:	4b35      	ldr	r3, [pc, #212]	; (80045e0 <xSender+0x114>)
 800450a:	2200      	movs	r2, #0
 800450c:	801a      	strh	r2, [r3, #0]
        taskEXIT_CRITICAL();
 800450e:	f7ff fdbe 	bl	800408e <exitcritical>
        return 1;
 8004512:	2301      	movs	r3, #1
 8004514:	e057      	b.n	80045c6 <xSender+0xfa>
      }
      else
      {
        if(DelayDiff(now, LastNotAckedTime) > RETRIES_TIMEOUT)
 8004516:	4b33      	ldr	r3, [pc, #204]	; (80045e4 <xSender+0x118>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4619      	mov	r1, r3
 800451c:	6978      	ldr	r0, [r7, #20]
 800451e:	f7fe fa4b 	bl	80029b8 <DelayDiff>
 8004522:	4602      	mov	r2, r0
 8004524:	f241 3388 	movw	r3, #5000	; 0x1388
 8004528:	429a      	cmp	r2, r3
 800452a:	d928      	bls.n	800457e <xSender+0xb2>
        {
          if(RetriesPacket > RETRIES_MAX)
 800452c:	4b2e      	ldr	r3, [pc, #184]	; (80045e8 <xSender+0x11c>)
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b14      	cmp	r3, #20
 8004534:	d90a      	bls.n	800454c <xSender+0x80>
          {
            NeedAckPacket = 0;
 8004536:	4b28      	ldr	r3, [pc, #160]	; (80045d8 <xSender+0x10c>)
 8004538:	2200      	movs	r2, #0
 800453a:	801a      	strh	r2, [r3, #0]
            NeededAckPacketId = 0;
 800453c:	4b28      	ldr	r3, [pc, #160]	; (80045e0 <xSender+0x114>)
 800453e:	2200      	movs	r2, #0
 8004540:	801a      	strh	r2, [r3, #0]
            taskEXIT_CRITICAL();
 8004542:	f7ff fda4 	bl	800408e <exitcritical>
            return -1;
 8004546:	f04f 33ff 	mov.w	r3, #4294967295
 800454a:	e03c      	b.n	80045c6 <xSender+0xfa>
          }
          LastNotAckedTime = now;
 800454c:	4a25      	ldr	r2, [pc, #148]	; (80045e4 <xSender+0x118>)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	6013      	str	r3, [r2, #0]
          RetriesPacket++;
 8004552:	4b25      	ldr	r3, [pc, #148]	; (80045e8 <xSender+0x11c>)
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b29b      	uxth	r3, r3
 8004558:	3301      	adds	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	4b22      	ldr	r3, [pc, #136]	; (80045e8 <xSender+0x11c>)
 800455e:	801a      	strh	r2, [r3, #0]
          taskEXIT_CRITICAL();
 8004560:	f7ff fd95 	bl	800408e <exitcritical>
          packager(handle, xMsgPtr, xMsgLen, xChaDest, NeededAckPacketId);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	b29a      	uxth	r2, r3
 8004568:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <xSender+0x114>)
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	7bf9      	ldrb	r1, [r7, #15]
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	460b      	mov	r3, r1
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	6938      	ldr	r0, [r7, #16]
 8004578:	f7ff fe28 	bl	80041cc <packager>
 800457c:	e022      	b.n	80045c4 <xSender+0xf8>
        }
        else taskEXIT_CRITICAL();
 800457e:	f7ff fd86 	bl	800408e <exitcritical>
 8004582:	e01f      	b.n	80045c4 <xSender+0xf8>
      }
    }
    else
    {
      ReceivedAckPacket = 0;
 8004584:	4b15      	ldr	r3, [pc, #84]	; (80045dc <xSender+0x110>)
 8004586:	2200      	movs	r2, #0
 8004588:	801a      	strh	r2, [r3, #0]
      NeedAckPacket = 1;
 800458a:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <xSender+0x10c>)
 800458c:	2201      	movs	r2, #1
 800458e:	801a      	strh	r2, [r3, #0]
      LastNotAckedTime = now;
 8004590:	4a14      	ldr	r2, [pc, #80]	; (80045e4 <xSender+0x118>)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	6013      	str	r3, [r2, #0]
      RetriesPacket = 0;
 8004596:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <xSender+0x11c>)
 8004598:	2200      	movs	r2, #0
 800459a:	801a      	strh	r2, [r3, #0]
      taskEXIT_CRITICAL();
 800459c:	f7ff fd77 	bl	800408e <exitcritical>
      NeededAckPacketId = calculatePacketId();
 80045a0:	f7ff fdda 	bl	8004158 <calculatePacketId>
 80045a4:	4603      	mov	r3, r0
 80045a6:	461a      	mov	r2, r3
 80045a8:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <xSender+0x114>)
 80045aa:	801a      	strh	r2, [r3, #0]
      packager(handle, xMsgPtr, xMsgLen, xChaDest, NeededAckPacketId);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <xSender+0x114>)
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	7bf9      	ldrb	r1, [r7, #15]
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	460b      	mov	r3, r1
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	6938      	ldr	r0, [r7, #16]
 80045c0:	f7ff fe04 	bl	80041cc <packager>
    }
  }
  return 0;
 80045c4:	2300      	movs	r3, #0

}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	20010040 	.word	0x20010040
 80045d8:	20011738 	.word	0x20011738
 80045dc:	20010030 	.word	0x20010030
 80045e0:	2001173a 	.word	0x2001173a
 80045e4:	2001173c 	.word	0x2001173c
 80045e8:	20011736 	.word	0x20011736

080045ec <parser>:

static inline void parser(sProFIFO* xFifo, uint32_t xPacketId, uint32_t xDataLen, eTransChannels xChaSrc, eTransChannels xChaDest) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08e      	sub	sp, #56	; 0x38
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	70fb      	strb	r3, [r7, #3]

  uint32_t aCount;
  uint8_t data;
  uint8_t sCount;
  sGetterHandle * hDest = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t header[8];
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 80045fe:	2300      	movs	r3, #0
 8004600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004602:	e027      	b.n	8004654 <parser+0x68>
  {
    for(int j = 0; j < sizeof(xHandles[j].xChannels) / sizeof(xHandles[j].xChannels[0]); j++)
 8004604:	2300      	movs	r3, #0
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28
 8004608:	e01b      	b.n	8004642 <parser+0x56>
    {
      if(xHandles[i].xChannels[j] == xChaSrc)
 800460a:	4aa7      	ldr	r2, [pc, #668]	; (80048a8 <parser+0x2bc>)
 800460c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460e:	f241 31c4 	movw	r1, #5060	; 0x13c4
 8004612:	fb01 f303 	mul.w	r3, r1, r3
 8004616:	441a      	add	r2, r3
 8004618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461a:	441a      	add	r2, r3
 800461c:	f241 3384 	movw	r3, #4996	; 0x1384
 8004620:	4413      	add	r3, r2
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	78fa      	ldrb	r2, [r7, #3]
 8004626:	429a      	cmp	r2, r3
 8004628:	d108      	bne.n	800463c <parser+0x50>
      {
        hDest = &xHandles[i];
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8004630:	fb02 f303 	mul.w	r3, r2, r3
 8004634:	4a9c      	ldr	r2, [pc, #624]	; (80048a8 <parser+0x2bc>)
 8004636:	4413      	add	r3, r2
 8004638:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800463a:	e005      	b.n	8004648 <parser+0x5c>
    for(int j = 0; j < sizeof(xHandles[j].xChannels) / sizeof(xHandles[j].xChannels[0]); j++)
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	3301      	adds	r3, #1
 8004640:	62bb      	str	r3, [r7, #40]	; 0x28
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004644:	2b03      	cmp	r3, #3
 8004646:	d9e0      	bls.n	800460a <parser+0x1e>
      }
    }
    if(hDest)
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <parser+0x70>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004650:	3301      	adds	r3, #1
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0d4      	beq.n	8004604 <parser+0x18>
 800465a:	e000      	b.n	800465e <parser+0x72>
      break;
 800465c:	bf00      	nop
  }


  switch (xChaDest)
 800465e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004662:	2b02      	cmp	r3, #2
 8004664:	d006      	beq.n	8004674 <parser+0x88>
 8004666:	2b03      	cmp	r3, #3
 8004668:	f000 808f 	beq.w	800478a <parser+0x19e>
 800466c:	2b01      	cmp	r3, #1
 800466e:	f000 808c 	beq.w	800478a <parser+0x19e>
 8004672:	e0fb      	b.n	800486c <parser+0x280>
  {

      case etrACIS:
      {
          if (xDataLen)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d04f      	beq.n	800471a <parser+0x12e>
          {
              for(int i = 0; i < 8; i++)
 800467a:	2300      	movs	r3, #0
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
 800467e:	e00a      	b.n	8004696 <parser+0xaa>
                protPull(xFifo, &header[i]);
 8004680:	f107 0214 	add.w	r2, r7, #20
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	4413      	add	r3, r2
 8004688:	4619      	mov	r1, r3
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 fe4f 	bl	800532e <protPull>
              for(int i = 0; i < 8; i++)
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	3301      	adds	r3, #1
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	2b07      	cmp	r3, #7
 800469a:	ddf1      	ble.n	8004680 <parser+0x94>

              for (aCount = 0; aCount < xDataLen - 10; aCount++)
 800469c:	2300      	movs	r3, #0
 800469e:	637b      	str	r3, [r7, #52]	; 0x34
 80046a0:	e010      	b.n	80046c4 <parser+0xd8>
              {
                protPull(xFifo, &data);
 80046a2:	f107 031d 	add.w	r3, r7, #29
 80046a6:	4619      	mov	r1, r3
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fe40 	bl	800532e <protPull>
                hDest->BufParser[aCount]=data;
 80046ae:	7f79      	ldrb	r1, [r7, #29]
 80046b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80046ba:	460a      	mov	r2, r1
 80046bc:	701a      	strb	r2, [r3, #0]
              for (aCount = 0; aCount < xDataLen - 10; aCount++)
 80046be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c0:	3301      	adds	r3, #1
 80046c2:	637b      	str	r3, [r7, #52]	; 0x34
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3b0a      	subs	r3, #10
 80046c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d3e9      	bcc.n	80046a2 <parser+0xb6>
              }
              protPull(xFifo, &data);
 80046ce:	f107 031d 	add.w	r3, r7, #29
 80046d2:	4619      	mov	r1, r3
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 fe2a 	bl	800532e <protPull>
              protPull(xFifo, &data);
 80046da:	f107 031d 	add.w	r3, r7, #29
 80046de:	4619      	mov	r1, r3
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fe24 	bl	800532e <protPull>

              hDest->BufParser[aCount]=0;
 80046e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80046f0:	2200      	movs	r2, #0
 80046f2:	701a      	strb	r2, [r3, #0]

              if(hDest) acker(hDest,xPacketId,xChaSrc);
 80046f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d006      	beq.n	8004708 <parser+0x11c>
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	78fa      	ldrb	r2, [r7, #3]
 8004700:	4619      	mov	r1, r3
 8004702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004704:	f7ff fe62 	bl	80043cc <acker>

              acis_parse_command(xChaSrc, hDest->BufParser, aCount);
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	f503 5190 	add.w	r1, r3, #4608	; 0x1200
 800470e:	78fb      	ldrb	r3, [r7, #3]
 8004710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004712:	4618      	mov	r0, r3
 8004714:	f7fd fc28 	bl	8001f68 <acis_parse_command>
              }
              taskEXIT_CRITICAL();

          }

          break;
 8004718:	e0c2      	b.n	80048a0 <parser+0x2b4>
              for (aCount = 0; aCount < 8; aCount++)
 800471a:	2300      	movs	r3, #0
 800471c:	637b      	str	r3, [r7, #52]	; 0x34
 800471e:	e013      	b.n	8004748 <parser+0x15c>
                for(int i = 0; i < 8; i++)
 8004720:	2300      	movs	r3, #0
 8004722:	623b      	str	r3, [r7, #32]
 8004724:	e00a      	b.n	800473c <parser+0x150>
                  protPull(xFifo, &header[i]);
 8004726:	f107 0214 	add.w	r2, r7, #20
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	4413      	add	r3, r2
 800472e:	4619      	mov	r1, r3
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fdfc 	bl	800532e <protPull>
                for(int i = 0; i < 8; i++)
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	3301      	adds	r3, #1
 800473a:	623b      	str	r3, [r7, #32]
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	2b07      	cmp	r3, #7
 8004740:	ddf1      	ble.n	8004726 <parser+0x13a>
              for (aCount = 0; aCount < 8; aCount++)
 8004742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004744:	3301      	adds	r3, #1
 8004746:	637b      	str	r3, [r7, #52]	; 0x34
 8004748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474a:	2b07      	cmp	r3, #7
 800474c:	d9e8      	bls.n	8004720 <parser+0x134>
              taskENTER_CRITICAL();
 800474e:	f7ff fc97 	bl	8004080 <entercritical>
              if(NeedAckPacket && NeededAckPacketId != 0 && NeededAckPacketId == xPacketId && !ReceivedAckPacket)
 8004752:	4b56      	ldr	r3, [pc, #344]	; (80048ac <parser+0x2c0>)
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d013      	beq.n	8004784 <parser+0x198>
 800475c:	4b54      	ldr	r3, [pc, #336]	; (80048b0 <parser+0x2c4>)
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00e      	beq.n	8004784 <parser+0x198>
 8004766:	4b52      	ldr	r3, [pc, #328]	; (80048b0 <parser+0x2c4>)
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4293      	cmp	r3, r2
 8004772:	d107      	bne.n	8004784 <parser+0x198>
 8004774:	4b4f      	ldr	r3, [pc, #316]	; (80048b4 <parser+0x2c8>)
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d102      	bne.n	8004784 <parser+0x198>
                ReceivedAckPacket = 1;
 800477e:	4b4d      	ldr	r3, [pc, #308]	; (80048b4 <parser+0x2c8>)
 8004780:	2201      	movs	r2, #1
 8004782:	801a      	strh	r2, [r3, #0]
              taskEXIT_CRITICAL();
 8004784:	f7ff fc83 	bl	800408e <exitcritical>
          break;
 8004788:	e08a      	b.n	80048a0 <parser+0x2b4>
      }

      case etrCTRL:
      case etrPC:
      {
        sCount = (xDataLen > 10) ? xDataLen : 8;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b0a      	cmp	r3, #10
 800478e:	d902      	bls.n	8004796 <parser+0x1aa>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	e000      	b.n	8004798 <parser+0x1ac>
 8004796:	2308      	movs	r3, #8
 8004798:	77bb      	strb	r3, [r7, #30]

        if(hDest)
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	2b00      	cmp	r3, #0
 800479e:	d065      	beq.n	800486c <parser+0x280>
        {

          uint8_t handled = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	77fb      	strb	r3, [r7, #31]
          if(!protIsSome(&hDest->xTxFifo))
 80047a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80047aa:	4413      	add	r3, r2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fdf6 	bl	800539e <protIsSome>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d13b      	bne.n	8004830 <parser+0x244>
          {
            taskENTER_CRITICAL();
 80047b8:	f7ff fc62 	bl	8004080 <entercritical>
            if(!hDest->TxBusy)
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d130      	bne.n	800482c <parser+0x240>
            {
              hDest->TxBusy = 1;
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80047d0:	2201      	movs	r2, #1
 80047d2:	701a      	strb	r2, [r3, #0]
              handled = 1;
 80047d4:	2301      	movs	r3, #1
 80047d6:	77fb      	strb	r3, [r7, #31]
              taskEXIT_CRITICAL();
 80047d8:	f7ff fc59 	bl	800408e <exitcritical>

              for (aCount = 0; aCount < sCount; aCount++)
 80047dc:	2300      	movs	r3, #0
 80047de:	637b      	str	r3, [r7, #52]	; 0x34
 80047e0:	e00b      	b.n	80047fa <parser+0x20e>
              {
                protPull(xFifo, &hDest->BufTx[aCount]);
 80047e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80047e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ea:	4413      	add	r3, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 fd9d 	bl	800532e <protPull>
              for (aCount = 0; aCount < sCount; aCount++)
 80047f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f6:	3301      	adds	r3, #1
 80047f8:	637b      	str	r3, [r7, #52]	; 0x34
 80047fa:	7fbb      	ldrb	r3, [r7, #30]
 80047fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047fe:	429a      	cmp	r2, r3
 8004800:	d3ef      	bcc.n	80047e2 <parser+0x1f6>
              }

              CacheClean(hDest->BufTx, sCount);
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004808:	7fba      	ldrb	r2, [r7, #30]
 800480a:	4611      	mov	r1, r2
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fc83 	bl	8004118 <CacheClean>
              HAL_UART_Transmit_DMA(hDest->xUart, hDest->BufTx, sCount);
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004820:	7fba      	ldrb	r2, [r7, #30]
 8004822:	b292      	uxth	r2, r2
 8004824:	4619      	mov	r1, r3
 8004826:	f004 fcd7 	bl	80091d8 <HAL_UART_Transmit_DMA>
 800482a:	e001      	b.n	8004830 <parser+0x244>
            }
            else taskEXIT_CRITICAL();
 800482c:	f7ff fc2f 	bl	800408e <exitcritical>
          }

          if(!handled)
 8004830:	7ffb      	ldrb	r3, [r7, #31]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d133      	bne.n	800489e <parser+0x2b2>
          {
            for (aCount = 0; aCount < sCount; aCount++)
 8004836:	2300      	movs	r3, #0
 8004838:	637b      	str	r3, [r7, #52]	; 0x34
 800483a:	e012      	b.n	8004862 <parser+0x276>
            {
              protPull(xFifo, &data);
 800483c:	f107 031d 	add.w	r3, r7, #29
 8004840:	4619      	mov	r1, r3
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 fd73 	bl	800532e <protPull>
              protPush(&hDest->xTxFifo, &data);
 8004848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800484a:	f241 3388 	movw	r3, #5000	; 0x1388
 800484e:	4413      	add	r3, r2
 8004850:	f107 021d 	add.w	r2, r7, #29
 8004854:	4611      	mov	r1, r2
 8004856:	4618      	mov	r0, r3
 8004858:	f000 fd5a 	bl	8005310 <protPush>
            for (aCount = 0; aCount < sCount; aCount++)
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	3301      	adds	r3, #1
 8004860:	637b      	str	r3, [r7, #52]	; 0x34
 8004862:	7fbb      	ldrb	r3, [r7, #30]
 8004864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004866:	429a      	cmp	r2, r3
 8004868:	d3e8      	bcc.n	800483c <parser+0x250>
            }
          }

          break;
 800486a:	e018      	b.n	800489e <parser+0x2b2>
      }
      /* no break */

      default:
      {
        sCount = (xDataLen > 10) ? xDataLen : 8;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b0a      	cmp	r3, #10
 8004870:	d902      	bls.n	8004878 <parser+0x28c>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	e000      	b.n	800487a <parser+0x28e>
 8004878:	2308      	movs	r3, #8
 800487a:	77bb      	strb	r3, [r7, #30]
        for (aCount = 0; aCount < sCount; aCount++)
 800487c:	2300      	movs	r3, #0
 800487e:	637b      	str	r3, [r7, #52]	; 0x34
 8004880:	e008      	b.n	8004894 <parser+0x2a8>
        {
          protPull(xFifo, &data);
 8004882:	f107 031d 	add.w	r3, r7, #29
 8004886:	4619      	mov	r1, r3
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fd50 	bl	800532e <protPull>
        for (aCount = 0; aCount < sCount; aCount++)
 800488e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004890:	3301      	adds	r3, #1
 8004892:	637b      	str	r3, [r7, #52]	; 0x34
 8004894:	7fbb      	ldrb	r3, [r7, #30]
 8004896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004898:	429a      	cmp	r2, r3
 800489a:	d3f2      	bcc.n	8004882 <parser+0x296>
        }
        break;
 800489c:	e000      	b.n	80048a0 <parser+0x2b4>
          break;
 800489e:	bf00      	nop
      }
  }
}
 80048a0:	bf00      	nop
 80048a2:	3738      	adds	r7, #56	; 0x38
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20010040 	.word	0x20010040
 80048ac:	20011738 	.word	0x20011738
 80048b0:	2001173a 	.word	0x2001173a
 80048b4:	20010030 	.word	0x20010030

080048b8 <lookByte>:

static inline uint8_t lookByte(sProFIFO* xFifo, uint32_t xOffset) { uint8_t aByte; protLook(xFifo,xOffset,&aByte); return aByte; }
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
 80048c2:	f107 030f 	add.w	r3, r7, #15
 80048c6:	461a      	mov	r2, r3
 80048c8:	6839      	ldr	r1, [r7, #0]
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fd3e 	bl	800534c <protLook>
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <countCRC8>:

static inline uint8_t countCRC8(sGetterHandle * handle) {
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
    uint32_t i; uint8_t aCrc8 = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	72fb      	strb	r3, [r7, #11]
    for (i=0; i<7; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	e013      	b.n	8004914 <countCRC8+0x3a>
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	f241 339c 	movw	r3, #5020	; 0x139c
 80048f2:	4413      	add	r3, r2
 80048f4:	68f9      	ldr	r1, [r7, #12]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff ffde 	bl	80048b8 <lookByte>
 80048fc:	4603      	mov	r3, r0
 80048fe:	4619      	mov	r1, r3
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4413      	add	r3, r2
 8004906:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800490a:	460a      	mov	r2, r1
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3301      	adds	r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b06      	cmp	r3, #6
 8004918:	d9e8      	bls.n	80048ec <countCRC8+0x12>
    aCrc8 = CRC8_Generate(handle->BufParser, 7);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004920:	2107      	movs	r1, #7
 8004922:	4618      	mov	r0, r3
 8004924:	f7fd fba2 	bl	800206c <CRC8_Generate>
 8004928:	4603      	mov	r3, r0
 800492a:	72fb      	strb	r3, [r7, #11]
    return aCrc8;
 800492c:	7afb      	ldrb	r3, [r7, #11]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <countCRC16>:

static inline int32_t countCRC16(sGetterHandle * handle, uint32_t xLen) {
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
    uint32_t i; int32_t aCrc16 = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	60bb      	str	r3, [r7, #8]
    for (i=0; i<xLen-2; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e013      	b.n	8004972 <countCRC16+0x3c>
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	f241 339c 	movw	r3, #5020	; 0x139c
 8004950:	4413      	add	r3, r2
 8004952:	68f9      	ldr	r1, [r7, #12]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ffaf 	bl	80048b8 <lookByte>
 800495a:	4603      	mov	r3, r0
 800495c:	4619      	mov	r1, r3
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004968:	460a      	mov	r2, r1
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3301      	adds	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	3b02      	subs	r3, #2
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	429a      	cmp	r2, r3
 800497a:	d3e6      	bcc.n	800494a <countCRC16+0x14>
    aCrc16 = CRC16_Generate(handle->BufParser, xLen-2);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	3b02      	subs	r3, #2
 8004986:	4619      	mov	r1, r3
 8004988:	4610      	mov	r0, r2
 800498a:	f7fd fb53 	bl	8002034 <CRC16_Generate>
 800498e:	4603      	mov	r3, r0
 8004990:	60bb      	str	r3, [r7, #8]
    return aCrc16;
 8004992:	68bb      	ldr	r3, [r7, #8]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <Getter>:

static void Getter(sGetterHandle * handle)
{
 800499c:	b5b0      	push	{r4, r5, r7, lr}
 800499e:	b08c      	sub	sp, #48	; 0x30
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t dataSkip = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
  sProFIFO* xFifo = &handle->xRxFifo;
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	f241 339c 	movw	r3, #5020	; 0x139c
 80049ae:	4413      	add	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]
  uint32_t * pDataReceiving = &handle->dataReceiving;
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80049b8:	4413      	add	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
  uint32_t * pDataLen = &handle->dataLen;
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	f241 33b4 	movw	r3, #5044	; 0x13b4
 80049c2:	4413      	add	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
  uint16_t * pPacketId = &handle->packetId;
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80049cc:	4413      	add	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]

  uint16_t packetId = *pPacketId;
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t dataLen = *pDataLen;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	61fb      	str	r3, [r7, #28]
  uint32_t dataReceiving = *pDataReceiving;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	61bb      	str	r3, [r7, #24]
  if(dataReceiving)
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d043      	beq.n	8004a70 <Getter+0xd4>
  {
    // Check if we got a data
    if (protGetSize(xFifo) >= dataLen)
 80049e8:	6978      	ldr	r0, [r7, #20]
 80049ea:	f000 fb97 	bl	800511c <protGetSize>
 80049ee:	4602      	mov	r2, r0
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	4293      	cmp	r3, r2
 80049f4:	f200 80ad 	bhi.w	8004b52 <Getter+0x1b6>
    {
        if (countCRC16(handle,dataLen) == lookByte(xFifo,dataLen-2) + (lookByte(xFifo,dataLen-1) << 8))
 80049f8:	69f9      	ldr	r1, [r7, #28]
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff ff9b 	bl	8004936 <countCRC16>
 8004a00:	4604      	mov	r4, r0
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	3b02      	subs	r3, #2
 8004a06:	4619      	mov	r1, r3
 8004a08:	6978      	ldr	r0, [r7, #20]
 8004a0a:	f7ff ff55 	bl	80048b8 <lookByte>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	461d      	mov	r5, r3
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	4619      	mov	r1, r3
 8004a18:	6978      	ldr	r0, [r7, #20]
 8004a1a:	f7ff ff4d 	bl	80048b8 <lookByte>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	021b      	lsls	r3, r3, #8
 8004a22:	442b      	add	r3, r5
 8004a24:	429c      	cmp	r4, r3
 8004a26:	d11c      	bne.n	8004a62 <Getter+0xc6>
        {
            // Got True package
            parser(xFifo,packetId,dataLen,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 8004a28:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8004a2a:	2102      	movs	r1, #2
 8004a2c:	6978      	ldr	r0, [r7, #20]
 8004a2e:	f7ff ff43 	bl	80048b8 <lookByte>
 8004a32:	4603      	mov	r3, r0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fb31 	bl	800409c <Msg_GetSrc>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	b2dd      	uxtb	r5, r3
 8004a3e:	2102      	movs	r1, #2
 8004a40:	6978      	ldr	r0, [r7, #20]
 8004a42:	f7ff ff39 	bl	80048b8 <lookByte>
 8004a46:	4603      	mov	r3, r0
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff fb35 	bl	80040b8 <Msg_GetDest>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	462b      	mov	r3, r5
 8004a56:	69fa      	ldr	r2, [r7, #28]
 8004a58:	4621      	mov	r1, r4
 8004a5a:	6978      	ldr	r0, [r7, #20]
 8004a5c:	f7ff fdc6 	bl	80045ec <parser>
 8004a60:	e001      	b.n	8004a66 <Getter+0xca>
        }
        else { dataSkip=1; } // Wrong CRC16, so skip 1 byte
 8004a62:	2301      	movs	r3, #1
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
        dataReceiving = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61bb      	str	r3, [r7, #24]
        dataLen = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	e070      	b.n	8004b52 <Getter+0x1b6>
    }
  }
  else
  {
    if (protGetSize(xFifo) > 7)
 8004a70:	6978      	ldr	r0, [r7, #20]
 8004a72:	f000 fb53 	bl	800511c <protGetSize>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b07      	cmp	r3, #7
 8004a7a:	d96a      	bls.n	8004b52 <Getter+0x1b6>
    {
      if(lookByte(xFifo,0) == 0x55 && lookByte(xFifo,1) == 0x55)
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	6978      	ldr	r0, [r7, #20]
 8004a80:	f7ff ff1a 	bl	80048b8 <lookByte>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b55      	cmp	r3, #85	; 0x55
 8004a88:	d161      	bne.n	8004b4e <Getter+0x1b2>
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	6978      	ldr	r0, [r7, #20]
 8004a8e:	f7ff ff13 	bl	80048b8 <lookByte>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b55      	cmp	r3, #85	; 0x55
 8004a96:	d15a      	bne.n	8004b4e <Getter+0x1b2>
      {
        if (countCRC8(handle) == lookByte(xFifo,7))
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7ff ff1e 	bl	80048da <countCRC8>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	461c      	mov	r4, r3
 8004aa2:	2107      	movs	r1, #7
 8004aa4:	6978      	ldr	r0, [r7, #20]
 8004aa6:	f7ff ff07 	bl	80048b8 <lookByte>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	429c      	cmp	r4, r3
 8004aae:	d14a      	bne.n	8004b46 <Getter+0x1aa>
        {
          dataLen = lookByte(xFifo,3) + (lookByte(xFifo,4) << 8);
 8004ab0:	2103      	movs	r1, #3
 8004ab2:	6978      	ldr	r0, [r7, #20]
 8004ab4:	f7ff ff00 	bl	80048b8 <lookByte>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	461c      	mov	r4, r3
 8004abc:	2104      	movs	r1, #4
 8004abe:	6978      	ldr	r0, [r7, #20]
 8004ac0:	f7ff fefa 	bl	80048b8 <lookByte>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	4423      	add	r3, r4
 8004aca:	61fb      	str	r3, [r7, #28]
          packetId = lookByte(xFifo,5) + (lookByte(xFifo,6) << 8);
 8004acc:	2105      	movs	r1, #5
 8004ace:	6978      	ldr	r0, [r7, #20]
 8004ad0:	f7ff fef2 	bl	80048b8 <lookByte>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	b29c      	uxth	r4, r3
 8004ad8:	2106      	movs	r1, #6
 8004ada:	6978      	ldr	r0, [r7, #20]
 8004adc:	f7ff feec 	bl	80048b8 <lookByte>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	021b      	lsls	r3, r3, #8
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	4423      	add	r3, r4
 8004aea:	847b      	strh	r3, [r7, #34]	; 0x22
          if (packetId > 0 && dataLen < MAX_PACK_LEN)
 8004aec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d026      	beq.n	8004b40 <Getter+0x1a4>
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004af8:	d222      	bcs.n	8004b40 <Getter+0x1a4>
          {
              if (dataLen>10)
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	2b0a      	cmp	r3, #10
 8004afe:	d902      	bls.n	8004b06 <Getter+0x16a>
              {
                dataReceiving = 1;
 8004b00:	2301      	movs	r3, #1
 8004b02:	61bb      	str	r3, [r7, #24]
              if (dataLen>10)
 8004b04:	e022      	b.n	8004b4c <Getter+0x1b0>
              }
              else
              {
                  // Got ShortPackage (Header Only)
                  parser(xFifo,packetId,0,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 8004b06:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8004b08:	2102      	movs	r1, #2
 8004b0a:	6978      	ldr	r0, [r7, #20]
 8004b0c:	f7ff fed4 	bl	80048b8 <lookByte>
 8004b10:	4603      	mov	r3, r0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff fac2 	bl	800409c <Msg_GetSrc>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	b2dd      	uxtb	r5, r3
 8004b1c:	2102      	movs	r1, #2
 8004b1e:	6978      	ldr	r0, [r7, #20]
 8004b20:	f7ff feca 	bl	80048b8 <lookByte>
 8004b24:	4603      	mov	r3, r0
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff fac6 	bl	80040b8 <Msg_GetDest>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	462b      	mov	r3, r5
 8004b34:	2200      	movs	r2, #0
 8004b36:	4621      	mov	r1, r4
 8004b38:	6978      	ldr	r0, [r7, #20]
 8004b3a:	f7ff fd57 	bl	80045ec <parser>
              if (dataLen>10)
 8004b3e:	e005      	b.n	8004b4c <Getter+0x1b0>
              }
          }
          else { dataSkip=1; } // Wrong data length or packet id, so skip 1 byte
 8004b40:	2301      	movs	r3, #1
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 8004b44:	e005      	b.n	8004b52 <Getter+0x1b6>
        }
        else { dataSkip=1; } // Wrong CRC8, so skip 1 byte
 8004b46:	2301      	movs	r3, #1
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 8004b4a:	e002      	b.n	8004b52 <Getter+0x1b6>
 8004b4c:	e001      	b.n	8004b52 <Getter+0x1b6>
      }
      else { dataSkip=1; } // Wrong sync bytes
 8004b4e:	2301      	movs	r3, #1
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (dataSkip)
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <Getter+0x1c4>
  {
    protMoveRead(xFifo,dataSkip);
 8004b58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b5a:	6978      	ldr	r0, [r7, #20]
 8004b5c:	f000 fc0e 	bl	800537c <protMoveRead>
  }

  *pDataReceiving = dataReceiving;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	601a      	str	r2, [r3, #0]
  *pDataLen = dataLen;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	601a      	str	r2, [r3, #0]
  *pPacketId = packetId;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004b70:	801a      	strh	r2, [r3, #0]
}
 8004b72:	bf00      	nop
 8004b74:	3728      	adds	r7, #40	; 0x28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004b7c <xDmaTxIrqHandler>:



inline void xDmaTxIrqHandler(UART_HandleTypeDef *huart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8004b84:	2300      	movs	r3, #0
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	e053      	b.n	8004c32 <xDmaTxIrqHandler+0xb6>
  {
    handle = &xHandles[i];
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8004b90:	fb02 f303 	mul.w	r3, r2, r3
 8004b94:	4a2a      	ldr	r2, [pc, #168]	; (8004c40 <xDmaTxIrqHandler+0xc4>)
 8004b96:	4413      	add	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
    uint32_t length = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	613b      	str	r3, [r7, #16]
    if(huart == handle->xUart)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d13f      	bne.n	8004c2c <xDmaTxIrqHandler+0xb0>
    {
      if(protIsSome(&handle->xTxFifo))
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	f241 3388 	movw	r3, #5000	; 0x1388
 8004bb2:	4413      	add	r3, r2
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fbf2 	bl	800539e <protIsSome>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d02f      	beq.n	8004c20 <xDmaTxIrqHandler+0xa4>
      {
        handle->TxBusy = 1;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]
        while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 8004bca:	bf00      	nop
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	f241 3388 	movw	r3, #5000	; 0x1388
 8004bd2:	4413      	add	r3, r2
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	1c51      	adds	r1, r2, #1
 8004bd8:	6139      	str	r1, [r7, #16]
 8004bda:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8004bde:	68f9      	ldr	r1, [r7, #12]
 8004be0:	440a      	add	r2, r1
 8004be2:	4611      	mov	r1, r2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fba2 	bl	800532e <protPull>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <xDmaTxIrqHandler+0x7c>
            && length < MAX_PACK_LEN);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004bf6:	d3e9      	bcc.n	8004bcc <xDmaTxIrqHandler+0x50>
        CacheClean(handle->BufTx, length);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004bfe:	6939      	ldr	r1, [r7, #16]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff fa89 	bl	8004118 <CacheClean>
        HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	b292      	uxth	r2, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f004 fadd 	bl	80091d8 <HAL_UART_Transmit_DMA>
      }
      else handle->TxBusy = 0;
      break;
 8004c1e:	e00b      	b.n	8004c38 <xDmaTxIrqHandler+0xbc>
      else handle->TxBusy = 0;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8004c26:	2200      	movs	r2, #0
 8004c28:	701a      	strb	r2, [r3, #0]
      break;
 8004c2a:	e005      	b.n	8004c38 <xDmaTxIrqHandler+0xbc>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0a8      	beq.n	8004b8a <xDmaTxIrqHandler+0xe>
    }
  }
}
 8004c38:	bf00      	nop
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20010040 	.word	0x20010040

08004c44 <xDmaErIrqHandler>:

inline void xDmaErIrqHandler(UART_HandleTypeDef *huart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	e028      	b.n	8004ca4 <xDmaErIrqHandler+0x60>
  {
    handle = &xHandles[i];
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8004c58:	fb02 f303 	mul.w	r3, r2, r3
 8004c5c:	4a15      	ldr	r2, [pc, #84]	; (8004cb4 <xDmaErIrqHandler+0x70>)
 8004c5e:	4413      	add	r3, r2
 8004c60:	60bb      	str	r3, [r7, #8]
    if(huart == handle->xUart)
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d116      	bne.n	8004c9e <xDmaErIrqHandler+0x5a>
    {
      HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68b9      	ldr	r1, [r7, #8]
 8004c7a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f004 fb26 	bl	80092d0 <HAL_UART_Receive_DMA>
      handle->RxPointer = handle->xUart->RxXferSize;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c90:	4619      	mov	r1, r3
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8004c98:	4413      	add	r3, r2
 8004c9a:	6019      	str	r1, [r3, #0]
      break;
 8004c9c:	e005      	b.n	8004caa <xDmaErIrqHandler+0x66>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0d3      	beq.n	8004c52 <xDmaErIrqHandler+0xe>
    }
  }
}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20010040 	.word	0x20010040

08004cb8 <xFifosInit>:


void xFifosInit(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	e040      	b.n	8004d46 <xFifosInit+0x8e>
  {
    protInit(&xHandles[i].xTxFifo,xHandles[i].xTxFifoBuf,1,MAX_PACK_LEN*4);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8004cca:	fb02 f203 	mul.w	r2, r2, r3
 8004cce:	f241 3388 	movw	r3, #5000	; 0x1388
 8004cd2:	4413      	add	r3, r2
 8004cd4:	4a1f      	ldr	r2, [pc, #124]	; (8004d54 <xFifosInit+0x9c>)
 8004cd6:	1898      	adds	r0, r3, r2
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8004cde:	fb02 f303 	mul.w	r3, r2, r3
 8004ce2:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8004ce6:	4a1b      	ldr	r2, [pc, #108]	; (8004d54 <xFifosInit+0x9c>)
 8004ce8:	1899      	adds	r1, r3, r2
 8004cea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f000 fa24 	bl	800513c <protInit>
    protInit(&xHandles[i].xRxFifo,xHandles[i].xRxFifoBuf,1,MAX_PACK_LEN*4);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8004cfa:	fb02 f203 	mul.w	r2, r2, r3
 8004cfe:	f241 3398 	movw	r3, #5016	; 0x1398
 8004d02:	4413      	add	r3, r2
 8004d04:	4a13      	ldr	r2, [pc, #76]	; (8004d54 <xFifosInit+0x9c>)
 8004d06:	4413      	add	r3, r2
 8004d08:	1d18      	adds	r0, r3, #4
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8004d10:	fb02 f303 	mul.w	r3, r2, r3
 8004d14:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8004d18:	4a0e      	ldr	r2, [pc, #56]	; (8004d54 <xFifosInit+0x9c>)
 8004d1a:	1899      	adds	r1, r3, r2
 8004d1c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004d20:	2201      	movs	r2, #1
 8004d22:	f000 fa0b 	bl	800513c <protInit>
    xHandles[i].RxPointer = 0xFFFFFFFF;
 8004d26:	4a0b      	ldr	r2, [pc, #44]	; (8004d54 <xFifosInit+0x9c>)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f241 31c4 	movw	r1, #5060	; 0x13c4
 8004d2e:	fb01 f303 	mul.w	r3, r1, r3
 8004d32:	441a      	add	r2, r3
 8004d34:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8004d38:	4413      	add	r3, r2
 8004d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d3e:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3301      	adds	r3, #1
 8004d44:	607b      	str	r3, [r7, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0bb      	beq.n	8004cc4 <xFifosInit+0xc>
  }
}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20010040 	.word	0x20010040

08004d58 <xGetterInit>:

void xGetterInit(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
  sGetterHandle * handle;

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8004d5e:	2300      	movs	r3, #0
 8004d60:	607b      	str	r3, [r7, #4]
 8004d62:	e026      	b.n	8004db2 <xGetterInit+0x5a>
  {
    handle = &xHandles[i];
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8004d6a:	fb02 f303 	mul.w	r3, r2, r3
 8004d6e:	4a14      	ldr	r2, [pc, #80]	; (8004dc0 <xGetterInit+0x68>)
 8004d70:	4413      	add	r3, r2
 8004d72:	603b      	str	r3, [r7, #0]
    CacheClean(handle->BufRx, UART_DMA_BUFFER);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff f9cc 	bl	8004118 <CacheClean>
    HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6839      	ldr	r1, [r7, #0]
 8004d8a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f004 fa9e 	bl	80092d0 <HAL_UART_Receive_DMA>
    handle->RxPointer = handle->xUart->RxXferSize;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004da0:	4619      	mov	r1, r3
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8004da8:	4413      	add	r3, r2
 8004daa:	6019      	str	r1, [r3, #0]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3301      	adds	r3, #1
 8004db0:	607b      	str	r3, [r7, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0d5      	beq.n	8004d64 <xGetterInit+0xc>
  }
}
 8004db8:	bf00      	nop
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20010040 	.word	0x20010040

08004dc4 <xGetterLoop>:

void xGetterLoop(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b0e6      	sub	sp, #408	; 0x198
 8004dc8:	af00      	add	r7, sp, #0
  uint32_t dmacnt;
  uint32_t length;
  uint32_t dmasize;
  uint8_t tempbuffer[MAX_PACK_LEN];

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004dd0:	e11f      	b.n	8005012 <xGetterLoop+0x24e>
  {
    handle = &xHandles[i];
 8004dd2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004dd6:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8004dda:	fb02 f303 	mul.w	r3, r2, r3
 8004dde:	4a92      	ldr	r2, [pc, #584]	; (8005028 <xGetterLoop+0x264>)
 8004de0:	4413      	add	r3, r2
 8004de2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    do
    {
      dmacnt = handle->xUart->hdmarx->Instance->NDTR;
 8004de6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004dea:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
      dmasize = handle->xUart->RxXferSize;
 8004dfa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004dfe:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e08:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
      if(handle->RxPointer == 0xFFFFFFFF) handle->RxPointer = dmacnt;
 8004e0c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004e10:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8004e14:	4413      	add	r3, r2
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1c:	d107      	bne.n	8004e2e <xGetterLoop+0x6a>
 8004e1e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004e22:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8004e26:	4413      	add	r3, r2
 8004e28:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8004e2c:	601a      	str	r2, [r3, #0]
      if(dmacnt > handle->RxPointer)
 8004e2e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004e32:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8004e36:	4413      	add	r3, r2
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d90e      	bls.n	8004e60 <xGetterLoop+0x9c>
        length = (dmasize-dmacnt)+handle->RxPointer;
 8004e42:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8004e46:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004e4a:	1ad2      	subs	r2, r2, r3
 8004e4c:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 8004e50:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8004e54:	440b      	add	r3, r1
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8004e5e:	e00a      	b.n	8004e76 <xGetterLoop+0xb2>
      else length = handle->RxPointer-dmacnt;
 8004e60:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004e64:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8004e68:	4413      	add	r3, r2
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

      if(length > MAX_PACK_LEN) length = MAX_PACK_LEN;
 8004e76:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004e7a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004e7e:	d903      	bls.n	8004e88 <xGetterLoop+0xc4>
 8004e80:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004e84:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
      if(length > 0)
 8004e88:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d050      	beq.n	8004f32 <xGetterLoop+0x16e>
      {
        CacheInvalidate(handle->BufRx, UART_DMA_BUFFER);
 8004e90:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004e94:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff f91d 	bl	80040d8 <CacheInvalidate>
        for(i=0;i<length;i++)
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004ea4:	e034      	b.n	8004f10 <xGetterLoop+0x14c>
        {
          tempbuffer[i] = handle->BufRx[dmasize-handle->RxPointer];
 8004ea6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004eaa:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8004eae:	4413      	add	r3, r2
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004ebc:	5cd1      	ldrb	r1, [r2, r3]
 8004ebe:	1d3a      	adds	r2, r7, #4
 8004ec0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004ec4:	4413      	add	r3, r2
 8004ec6:	460a      	mov	r2, r1
 8004ec8:	701a      	strb	r2, [r3, #0]
          if(handle->RxPointer == 1) handle->RxPointer = dmasize;
 8004eca:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004ece:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8004ed2:	4413      	add	r3, r2
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d108      	bne.n	8004eec <xGetterLoop+0x128>
 8004eda:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004ede:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	e00c      	b.n	8004f06 <xGetterLoop+0x142>
          else handle->RxPointer--;
 8004eec:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004ef0:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8004ef4:	4413      	add	r3, r2
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	1e5a      	subs	r2, r3, #1
 8004efa:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 8004efe:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8004f02:	440b      	add	r3, r1
 8004f04:	601a      	str	r2, [r3, #0]
        for(i=0;i<length;i++)
 8004f06:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004f10:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004f14:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d8c4      	bhi.n	8004ea6 <xGetterLoop+0xe2>
        }

        protPushSequence(&handle->xRxFifo, tempbuffer, length);
 8004f1c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004f20:	f241 339c 	movw	r3, #5020	; 0x139c
 8004f24:	4413      	add	r3, r2
 8004f26:	1d39      	adds	r1, r7, #4
 8004f28:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 f9de 	bl	80052ee <protPushSequence>
      }
    } while(length > 0);
 8004f32:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f47f af55 	bne.w	8004de6 <xGetterLoop+0x22>

    if(protIsSome(&handle->xRxFifo))
 8004f3c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004f40:	f241 339c 	movw	r3, #5020	; 0x139c
 8004f44:	4413      	add	r3, r2
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fa29 	bl	800539e <protIsSome>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <xGetterLoop+0x196>
    {
      Getter(handle);
 8004f52:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8004f56:	f7ff fd21 	bl	800499c <Getter>
    }

    taskENTER_CRITICAL();
 8004f5a:	f7ff f891 	bl	8004080 <entercritical>
    if(!handle->TxBusy && protIsSome(&handle->xTxFifo))
 8004f5e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004f62:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d14a      	bne.n	8005004 <xGetterLoop+0x240>
 8004f6e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004f72:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f76:	4413      	add	r3, r2
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fa10 	bl	800539e <protIsSome>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d03f      	beq.n	8005004 <xGetterLoop+0x240>
    {
      length = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
      handle->TxBusy = 1;
 8004f8a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004f8e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8004f92:	2201      	movs	r2, #1
 8004f94:	701a      	strb	r2, [r3, #0]
      taskEXIT_CRITICAL();
 8004f96:	f7ff f87a 	bl	800408e <exitcritical>
      while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 8004f9a:	bf00      	nop
 8004f9c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004fa0:	f241 3388 	movw	r3, #5000	; 0x1388
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004faa:	1c51      	adds	r1, r2, #1
 8004fac:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 8004fb0:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8004fb4:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 8004fb8:	440a      	add	r2, r1
 8004fba:	4611      	mov	r1, r2
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 f9b6 	bl	800532e <protPull>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d004      	beq.n	8004fd2 <xGetterLoop+0x20e>
          && length < MAX_PACK_LEN);
 8004fc8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004fcc:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004fd0:	d3e4      	bcc.n	8004f9c <xGetterLoop+0x1d8>
      CacheClean(handle->BufTx, length);
 8004fd2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004fd6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004fda:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff f89a 	bl	8004118 <CacheClean>
      HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 8004fe4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004fe8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004ff2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004ff6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004ffa:	b292      	uxth	r2, r2
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	f004 f8eb 	bl	80091d8 <HAL_UART_Transmit_DMA>
 8005002:	e001      	b.n	8005008 <xGetterLoop+0x244>
    }
    else taskEXIT_CRITICAL();
 8005004:	f7ff f843 	bl	800408e <exitcritical>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8005008:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800500c:	3301      	adds	r3, #1
 800500e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8005012:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005016:	2b00      	cmp	r3, #0
 8005018:	f43f aedb 	beq.w	8004dd2 <xGetterLoop+0xe>
  }
}
 800501c:	bf00      	nop
 800501e:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20010040 	.word	0x20010040

0800502c <infoGetSize>:

#include "xProFIFO.h"
#include <string.h>


static inline int infoGetSize(sProInfo* info) {
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
    if(info->write >= info->read) return (info->write - info->read);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	429a      	cmp	r2, r3
 800503e:	d305      	bcc.n	800504c <infoGetSize+0x20>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	e007      	b.n	800505c <infoGetSize+0x30>
    else return (info->capacity - info->read + info->write);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	1ad2      	subs	r2, r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	4413      	add	r3, r2
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <infoGetAvail>:

static uint32_t infoGetAvail(sProInfo* info) { return info->capacity-infoGetSize(info); }
 8005068:	b590      	push	{r4, r7, lr}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681c      	ldr	r4, [r3, #0]
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff ffd9 	bl	800502c <infoGetSize>
 800507a:	4603      	mov	r3, r0
 800507c:	1ae3      	subs	r3, r4, r3
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	bd90      	pop	{r4, r7, pc}

08005086 <infoCorrect>:
static inline uint32_t infoCorrect(sProInfo* info, uint32_t* param, uint32_t move) { return ((*param + move) % info->capacity); }
 8005086:	b480      	push	{r7}
 8005088:	b085      	sub	sp, #20
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4413      	add	r3, r2
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	6812      	ldr	r2, [r2, #0]
 800509e:	fbb3 f1f2 	udiv	r1, r3, r2
 80050a2:	fb02 f201 	mul.w	r2, r2, r1
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <infoMovePar>:
static inline void infoMovePar(sProInfo* info, uint32_t* param, uint32_t move) { *param = (uint32_t)infoCorrect(info,param,move); }
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7ff ffde 	bl	8005086 <infoCorrect>
 80050ca:	4602      	mov	r2, r0
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	bf00      	nop
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <infoIsSome>:
static uint8_t infoIsSome(sProInfo* info) { return info->read != info->write; }
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	bf14      	ite	ne
 80050ec:	2301      	movne	r3, #1
 80050ee:	2300      	moveq	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	4618      	mov	r0, r3
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <protMovePar>:

static void protMovePar(sProInfo* info, uint32_t* param, uint32_t move) {
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]
        infoMovePar(info,param,move);
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff ffd0 	bl	80050b4 <infoMovePar>
}
 8005114:	bf00      	nop
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <protGetSize>:


uint32_t protGetSize(sProFIFO* fifo) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
    uint32_t value;
        value = infoGetSize(&fifo->info);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3304      	adds	r3, #4
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff ff7f 	bl	800502c <infoGetSize>
 800512e:	4603      	mov	r3, r0
 8005130:	60fb      	str	r3, [r7, #12]
    return value;
 8005132:	68fb      	ldr	r3, [r7, #12]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <protInit>:
    uint32_t value;
        value = infoGetAvail(&fifo->info);
    return value;
}

void protInit(sProFIFO* fifo, void* xBuffer, uint8_t xElemSize, int xCapacity) {
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	4613      	mov	r3, r2
 800514a:	71fb      	strb	r3, [r7, #7]
    fifo->buffer = xBuffer;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	601a      	str	r2, [r3, #0]
    fifo->info.capacity = xCapacity;
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	605a      	str	r2, [r3, #4]
    fifo->info.read = 0;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	609a      	str	r2, [r3, #8]
    fifo->info.write = 0;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	60da      	str	r2, [r3, #12]
    fifo->info.overflow = 0;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	745a      	strb	r2, [r3, #17]
    fifo->info.elemsize = xElemSize;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	79fa      	ldrb	r2, [r7, #7]
 800516e:	741a      	strb	r2, [r3, #16]
}
 8005170:	bf00      	nop
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <interPut>:
        fifo->info.read = 0;
        fifo->info.write = 0;
        fifo->info.overflow = 0;
}

static inline void interPut(sProFIFO* fifo, void* xData) {
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)((uint32_t)fifo->buffer + fifo->info.write * fifo->info.elemsize), (uint8_t*)xData, fifo->info.elemsize);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4619      	mov	r1, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	7c12      	ldrb	r2, [r2, #16]
 8005194:	fb02 f303 	mul.w	r3, r2, r3
 8005198:	440b      	add	r3, r1
 800519a:	4618      	mov	r0, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	7c1b      	ldrb	r3, [r3, #16]
 80051a0:	461a      	mov	r2, r3
 80051a2:	6839      	ldr	r1, [r7, #0]
 80051a4:	f004 ff98 	bl	800a0d8 <memcpy>
}
 80051a8:	bf00      	nop
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <interGet>:

static inline void interGet(sProFIFO* fifo, void* xData) {
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + fifo->info.read * fifo->info.elemsize), fifo->info.elemsize);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4619      	mov	r1, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	7c12      	ldrb	r2, [r2, #16]
 80051c8:	fb02 f303 	mul.w	r3, r2, r3
 80051cc:	440b      	add	r3, r1
 80051ce:	4619      	mov	r1, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	7c1b      	ldrb	r3, [r3, #16]
 80051d4:	461a      	mov	r2, r3
 80051d6:	6838      	ldr	r0, [r7, #0]
 80051d8:	f004 ff7e 	bl	800a0d8 <memcpy>
}
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <interLook>:

static inline void interLook(sProFIFO* fifo, uint32_t xIndex, void* xData) {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + xIndex * fifo->info.elemsize), fifo->info.elemsize);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	461a      	mov	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	7c1b      	ldrb	r3, [r3, #16]
 80051fa:	4619      	mov	r1, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	fb03 f301 	mul.w	r3, r3, r1
 8005202:	4413      	add	r3, r2
 8005204:	4619      	mov	r1, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	7c1b      	ldrb	r3, [r3, #16]
 800520a:	461a      	mov	r2, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f004 ff63 	bl	800a0d8 <memcpy>
}
 8005212:	bf00      	nop
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <interPush>:

static inline uint32_t interPush(sProFIFO* fifo, void* xData) {
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    if ((retval = infoGetAvail(&fifo->info))) {
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3304      	adds	r3, #4
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff ff1d 	bl	8005068 <infoGetAvail>
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00c      	beq.n	8005250 <interPush+0x36>
        interPut(fifo,xData);
 8005236:	6839      	ldr	r1, [r7, #0]
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff ff9f 	bl	800517c <interPut>
        infoMovePar(&fifo->info, &fifo->info.write, 1);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	1d18      	adds	r0, r3, #4
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	330c      	adds	r3, #12
 8005246:	2201      	movs	r2, #1
 8005248:	4619      	mov	r1, r3
 800524a:	f7ff ff33 	bl	80050b4 <infoMovePar>
 800524e:	e002      	b.n	8005256 <interPush+0x3c>
    } else { fifo->info.overflow=1; }
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	745a      	strb	r2, [r3, #17]
    return retval;
 8005256:	68fb      	ldr	r3, [r7, #12]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <interPull>:

static inline uint32_t interPull(sProFIFO* fifo, void* xDest) {
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    if ((retval = infoIsSome(&fifo->info))) {
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3304      	adds	r3, #4
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff ff32 	bl	80050d8 <infoIsSome>
 8005274:	4603      	mov	r3, r0
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00b      	beq.n	8005296 <interPull+0x36>
        interGet(fifo,xDest);
 800527e:	6839      	ldr	r1, [r7, #0]
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff ff95 	bl	80051b0 <interGet>
        infoMovePar(&fifo->info, &fifo->info.read, 1);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	1d18      	adds	r0, r3, #4
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3308      	adds	r3, #8
 800528e:	2201      	movs	r2, #1
 8005290:	4619      	mov	r1, r3
 8005292:	f7ff ff0f 	bl	80050b4 <infoMovePar>
    }
    return retval;
 8005296:	68fb      	ldr	r3, [r7, #12]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <interPushSequence>:

static inline uint32_t interPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
    uint32_t retval; uint32_t i;
    for (i=0; i<xCount; i++) {
 80052ac:	2300      	movs	r3, #0
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	e012      	b.n	80052d8 <interPushSequence+0x38>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	7c1b      	ldrb	r3, [r3, #16]
 80052b6:	461a      	mov	r2, r3
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	fb03 f202 	mul.w	r2, r3, r2
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	4413      	add	r3, r2
 80052c2:	4619      	mov	r1, r3
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff ffa8 	bl	800521a <interPush>
 80052ca:	6178      	str	r0, [r7, #20]
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d007      	beq.n	80052e2 <interPushSequence+0x42>
    for (i=0; i<xCount; i++) {
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	3301      	adds	r3, #1
 80052d6:	613b      	str	r3, [r7, #16]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d3e8      	bcc.n	80052b2 <interPushSequence+0x12>
 80052e0:	e000      	b.n	80052e4 <interPushSequence+0x44>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 80052e2:	bf00      	nop
    }
    return retval;
 80052e4:	697b      	ldr	r3, [r7, #20]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <protPushSequence>:

uint32_t protPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b086      	sub	sp, #24
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	607a      	str	r2, [r7, #4]
    uint32_t retval;
        retval=interPushSequence(fifo,xData,xCount);
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f7ff ffce 	bl	80052a0 <interPushSequence>
 8005304:	6178      	str	r0, [r7, #20]
    return retval;
 8005306:	697b      	ldr	r3, [r7, #20]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <protPush>:

uint32_t protPush(sProFIFO* fifo, void* xData) {
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
    uint32_t retval;
        retval=interPush(fifo,xData);
 800531a:	6839      	ldr	r1, [r7, #0]
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff ff7c 	bl	800521a <interPush>
 8005322:	60f8      	str	r0, [r7, #12]
    return retval;
 8005324:	68fb      	ldr	r3, [r7, #12]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <protPull>:

uint32_t protPull(sProFIFO* fifo, void* xDest) {
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	6039      	str	r1, [r7, #0]
    uint32_t retval;
        retval=interPull(fifo,xDest);
 8005338:	6839      	ldr	r1, [r7, #0]
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff ff90 	bl	8005260 <interPull>
 8005340:	60f8      	str	r0, [r7, #12]
    return retval;
 8005342:	68fb      	ldr	r3, [r7, #12]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <protLook>:

void protLook(sProFIFO* fifo, uint32_t xOffset, void* xDest) {
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
        uint32_t aIndex = infoCorrect(&fifo->info, &fifo->info.read, xOffset);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	1d18      	adds	r0, r3, #4
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	3308      	adds	r3, #8
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	4619      	mov	r1, r3
 8005364:	f7ff fe8f 	bl	8005086 <infoCorrect>
 8005368:	6178      	str	r0, [r7, #20]
        interLook(fifo,aIndex,xDest);
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6979      	ldr	r1, [r7, #20]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f7ff ff38 	bl	80051e4 <interLook>
}
 8005374:	bf00      	nop
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <protMoveRead>:

void protMoveWrite(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.write, amove); }
void protMoveRead(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.read, amove); }
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	1d18      	adds	r0, r3, #4
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3308      	adds	r3, #8
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	4619      	mov	r1, r3
 8005392:	f7ff feb4 	bl	80050fe <protMovePar>
 8005396:	bf00      	nop
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <protIsSome>:

uint8_t protIsSome(sProFIFO* fifo) { return fifo->info.read != fifo->info.write; }
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	bf14      	ite	ne
 80053b2:	2301      	movne	r3, #1
 80053b4:	2300      	moveq	r3, #0
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80053c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80053c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80053ca:	e003      	b.n	80053d4 <LoopCopyDataInit>

080053cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80053cc:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80053ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80053d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80053d2:	3104      	adds	r1, #4

080053d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80053d4:	480b      	ldr	r0, [pc, #44]	; (8005404 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80053d6:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80053d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80053da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80053dc:	d3f6      	bcc.n	80053cc <CopyDataInit>
  ldr  r2, =_sbss
 80053de:	4a0b      	ldr	r2, [pc, #44]	; (800540c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80053e0:	e002      	b.n	80053e8 <LoopFillZerobss>

080053e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80053e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80053e4:	f842 3b04 	str.w	r3, [r2], #4

080053e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80053e8:	4b09      	ldr	r3, [pc, #36]	; (8005410 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80053ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80053ec:	d3f9      	bcc.n	80053e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80053ee:	f7fe fddd 	bl	8003fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053f2:	f004 fe4d 	bl	800a090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053f6:	f7fd fbb9 	bl	8002b6c <main>
  bx  lr    
 80053fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80053fc:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8005400:	0800a148 	.word	0x0800a148
  ldr  r0, =_sdata
 8005404:	20010000 	.word	0x20010000
  ldr  r3, =_edata
 8005408:	20011428 	.word	0x20011428
  ldr  r2, =_sbss
 800540c:	20011428 	.word	0x20011428
  ldr  r3, = _ebss
 8005410:	2001819c 	.word	0x2001819c

08005414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005414:	e7fe      	b.n	8005414 <ADC_IRQHandler>
	...

08005418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800541c:	4b08      	ldr	r3, [pc, #32]	; (8005440 <HAL_Init+0x28>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a07      	ldr	r2, [pc, #28]	; (8005440 <HAL_Init+0x28>)
 8005422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005426:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005428:	2003      	movs	r0, #3
 800542a:	f000 fbb3 	bl	8005b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800542e:	2000      	movs	r0, #0
 8005430:	f000 f808 	bl	8005444 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005434:	f7fe f9cc 	bl	80037d0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	40023c00 	.word	0x40023c00

08005444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800544c:	4b12      	ldr	r3, [pc, #72]	; (8005498 <HAL_InitTick+0x54>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4b12      	ldr	r3, [pc, #72]	; (800549c <HAL_InitTick+0x58>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	4619      	mov	r1, r3
 8005456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800545a:	fbb3 f3f1 	udiv	r3, r3, r1
 800545e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fbcb 	bl	8005bfe <HAL_SYSTICK_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e00e      	b.n	8005490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b0f      	cmp	r3, #15
 8005476:	d80a      	bhi.n	800548e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005478:	2200      	movs	r2, #0
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
 8005480:	f000 fb93 	bl	8005baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005484:	4a06      	ldr	r2, [pc, #24]	; (80054a0 <HAL_InitTick+0x5c>)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	e000      	b.n	8005490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	2001002c 	.word	0x2001002c
 800549c:	20011424 	.word	0x20011424
 80054a0:	20011420 	.word	0x20011420

080054a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054a8:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <HAL_IncTick+0x20>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <HAL_IncTick+0x24>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4413      	add	r3, r2
 80054b4:	4a04      	ldr	r2, [pc, #16]	; (80054c8 <HAL_IncTick+0x24>)
 80054b6:	6013      	str	r3, [r2, #0]
}
 80054b8:	bf00      	nop
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20011424 	.word	0x20011424
 80054c8:	20018198 	.word	0x20018198

080054cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
  return uwTick;
 80054d0:	4b03      	ldr	r3, [pc, #12]	; (80054e0 <HAL_GetTick+0x14>)
 80054d2:	681b      	ldr	r3, [r3, #0]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20018198 	.word	0x20018198

080054e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e031      	b.n	800555e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d109      	bne.n	8005516 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fe f988 	bl	8003818 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	2b00      	cmp	r3, #0
 8005520:	d116      	bne.n	8005550 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005526:	4b10      	ldr	r3, [pc, #64]	; (8005568 <HAL_ADC_Init+0x84>)
 8005528:	4013      	ands	r3, r2
 800552a:	f043 0202 	orr.w	r2, r3, #2
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f964 	bl	8005800 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	f023 0303 	bic.w	r3, r3, #3
 8005546:	f043 0201 	orr.w	r2, r3, #1
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
 800554e:	e001      	b.n	8005554 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	ffffeefd 	.word	0xffffeefd

0800556c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_ADC_ConfigChannel+0x1c>
 8005584:	2302      	movs	r3, #2
 8005586:	e12a      	b.n	80057de <HAL_ADC_ConfigChannel+0x272>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b09      	cmp	r3, #9
 8005596:	d93a      	bls.n	800560e <HAL_ADC_ConfigChannel+0xa2>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055a0:	d035      	beq.n	800560e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68d9      	ldr	r1, [r3, #12]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	4613      	mov	r3, r2
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	4413      	add	r3, r2
 80055b6:	3b1e      	subs	r3, #30
 80055b8:	2207      	movs	r2, #7
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	43da      	mvns	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	400a      	ands	r2, r1
 80055c6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a87      	ldr	r2, [pc, #540]	; (80057ec <HAL_ADC_ConfigChannel+0x280>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d10a      	bne.n	80055e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68d9      	ldr	r1, [r3, #12]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	061a      	lsls	r2, r3, #24
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80055e6:	e035      	b.n	8005654 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68d9      	ldr	r1, [r3, #12]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	4618      	mov	r0, r3
 80055fa:	4603      	mov	r3, r0
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	4403      	add	r3, r0
 8005600:	3b1e      	subs	r3, #30
 8005602:	409a      	lsls	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800560c:	e022      	b.n	8005654 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6919      	ldr	r1, [r3, #16]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	b29b      	uxth	r3, r3
 800561a:	461a      	mov	r2, r3
 800561c:	4613      	mov	r3, r2
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	4413      	add	r3, r2
 8005622:	2207      	movs	r2, #7
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	43da      	mvns	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	400a      	ands	r2, r1
 8005630:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6919      	ldr	r1, [r3, #16]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	4618      	mov	r0, r3
 8005644:	4603      	mov	r3, r0
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	4403      	add	r3, r0
 800564a:	409a      	lsls	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2b06      	cmp	r3, #6
 800565a:	d824      	bhi.n	80056a6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	3b05      	subs	r3, #5
 800566e:	221f      	movs	r2, #31
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	43da      	mvns	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	400a      	ands	r2, r1
 800567c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	b29b      	uxth	r3, r3
 800568a:	4618      	mov	r0, r3
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	3b05      	subs	r3, #5
 8005698:	fa00 f203 	lsl.w	r2, r0, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	635a      	str	r2, [r3, #52]	; 0x34
 80056a4:	e04c      	b.n	8005740 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b0c      	cmp	r3, #12
 80056ac:	d824      	bhi.n	80056f8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	3b23      	subs	r3, #35	; 0x23
 80056c0:	221f      	movs	r2, #31
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	43da      	mvns	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	400a      	ands	r2, r1
 80056ce:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	4618      	mov	r0, r3
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	3b23      	subs	r3, #35	; 0x23
 80056ea:	fa00 f203 	lsl.w	r2, r0, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	631a      	str	r2, [r3, #48]	; 0x30
 80056f6:	e023      	b.n	8005740 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	3b41      	subs	r3, #65	; 0x41
 800570a:	221f      	movs	r2, #31
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	43da      	mvns	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	400a      	ands	r2, r1
 8005718:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	b29b      	uxth	r3, r3
 8005726:	4618      	mov	r0, r3
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	3b41      	subs	r3, #65	; 0x41
 8005734:	fa00 f203 	lsl.w	r2, r0, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a2a      	ldr	r2, [pc, #168]	; (80057f0 <HAL_ADC_ConfigChannel+0x284>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d10a      	bne.n	8005760 <HAL_ADC_ConfigChannel+0x1f4>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005752:	d105      	bne.n	8005760 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005754:	4b27      	ldr	r3, [pc, #156]	; (80057f4 <HAL_ADC_ConfigChannel+0x288>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	4a26      	ldr	r2, [pc, #152]	; (80057f4 <HAL_ADC_ConfigChannel+0x288>)
 800575a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800575e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a22      	ldr	r2, [pc, #136]	; (80057f0 <HAL_ADC_ConfigChannel+0x284>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d109      	bne.n	800577e <HAL_ADC_ConfigChannel+0x212>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b12      	cmp	r3, #18
 8005770:	d105      	bne.n	800577e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005772:	4b20      	ldr	r3, [pc, #128]	; (80057f4 <HAL_ADC_ConfigChannel+0x288>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	4a1f      	ldr	r2, [pc, #124]	; (80057f4 <HAL_ADC_ConfigChannel+0x288>)
 8005778:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800577c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1b      	ldr	r2, [pc, #108]	; (80057f0 <HAL_ADC_ConfigChannel+0x284>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d125      	bne.n	80057d4 <HAL_ADC_ConfigChannel+0x268>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a17      	ldr	r2, [pc, #92]	; (80057ec <HAL_ADC_ConfigChannel+0x280>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d003      	beq.n	800579a <HAL_ADC_ConfigChannel+0x22e>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b11      	cmp	r3, #17
 8005798:	d11c      	bne.n	80057d4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800579a:	4b16      	ldr	r3, [pc, #88]	; (80057f4 <HAL_ADC_ConfigChannel+0x288>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	4a15      	ldr	r2, [pc, #84]	; (80057f4 <HAL_ADC_ConfigChannel+0x288>)
 80057a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a10      	ldr	r2, [pc, #64]	; (80057ec <HAL_ADC_ConfigChannel+0x280>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d111      	bne.n	80057d4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80057b0:	4b11      	ldr	r3, [pc, #68]	; (80057f8 <HAL_ADC_ConfigChannel+0x28c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a11      	ldr	r2, [pc, #68]	; (80057fc <HAL_ADC_ConfigChannel+0x290>)
 80057b6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ba:	0c9a      	lsrs	r2, r3, #18
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80057c6:	e002      	b.n	80057ce <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1f9      	bne.n	80057c8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	10000012 	.word	0x10000012
 80057f0:	40012000 	.word	0x40012000
 80057f4:	40012300 	.word	0x40012300
 80057f8:	2001002c 	.word	0x2001002c
 80057fc:	431bde83 	.word	0x431bde83

08005800 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005808:	4b78      	ldr	r3, [pc, #480]	; (80059ec <ADC_Init+0x1ec>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	4a77      	ldr	r2, [pc, #476]	; (80059ec <ADC_Init+0x1ec>)
 800580e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005812:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005814:	4b75      	ldr	r3, [pc, #468]	; (80059ec <ADC_Init+0x1ec>)
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	4973      	ldr	r1, [pc, #460]	; (80059ec <ADC_Init+0x1ec>)
 800581e:	4313      	orrs	r3, r2
 8005820:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005830:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6859      	ldr	r1, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	021a      	lsls	r2, r3, #8
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005854:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6859      	ldr	r1, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689a      	ldr	r2, [r3, #8]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005876:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6899      	ldr	r1, [r3, #8]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588e:	4a58      	ldr	r2, [pc, #352]	; (80059f0 <ADC_Init+0x1f0>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d022      	beq.n	80058da <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689a      	ldr	r2, [r3, #8]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6899      	ldr	r1, [r3, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80058c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6899      	ldr	r1, [r3, #8]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	609a      	str	r2, [r3, #8]
 80058d8:	e00f      	b.n	80058fa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80058f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0202 	bic.w	r2, r2, #2
 8005908:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6899      	ldr	r1, [r3, #8]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	005a      	lsls	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01b      	beq.n	8005960 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005936:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005946:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6859      	ldr	r1, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	3b01      	subs	r3, #1
 8005954:	035a      	lsls	r2, r3, #13
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	605a      	str	r2, [r3, #4]
 800595e:	e007      	b.n	8005970 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800596e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800597e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	3b01      	subs	r3, #1
 800598c:	051a      	lsls	r2, r3, #20
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80059a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6899      	ldr	r1, [r3, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059b2:	025a      	lsls	r2, r3, #9
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6899      	ldr	r1, [r3, #8]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	029a      	lsls	r2, r3, #10
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	609a      	str	r2, [r3, #8]
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	40012300 	.word	0x40012300
 80059f0:	0f000001 	.word	0x0f000001

080059f4 <__NVIC_SetPriorityGrouping>:
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a04:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <__NVIC_SetPriorityGrouping+0x40>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a10:	4013      	ands	r3, r2
 8005a12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a1c:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <__NVIC_SetPriorityGrouping+0x44>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a22:	4a04      	ldr	r2, [pc, #16]	; (8005a34 <__NVIC_SetPriorityGrouping+0x40>)
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	60d3      	str	r3, [r2, #12]
}
 8005a28:	bf00      	nop
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	e000ed00 	.word	0xe000ed00
 8005a38:	05fa0000 	.word	0x05fa0000

08005a3c <__NVIC_GetPriorityGrouping>:
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a40:	4b04      	ldr	r3, [pc, #16]	; (8005a54 <__NVIC_GetPriorityGrouping+0x18>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	0a1b      	lsrs	r3, r3, #8
 8005a46:	f003 0307 	and.w	r3, r3, #7
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	e000ed00 	.word	0xe000ed00

08005a58 <__NVIC_EnableIRQ>:
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	db0b      	blt.n	8005a82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	f003 021f 	and.w	r2, r3, #31
 8005a70:	4907      	ldr	r1, [pc, #28]	; (8005a90 <__NVIC_EnableIRQ+0x38>)
 8005a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	2001      	movs	r0, #1
 8005a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	e000e100 	.word	0xe000e100

08005a94 <__NVIC_SetPriority>:
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	6039      	str	r1, [r7, #0]
 8005a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	db0a      	blt.n	8005abe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	490c      	ldr	r1, [pc, #48]	; (8005ae0 <__NVIC_SetPriority+0x4c>)
 8005aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab2:	0112      	lsls	r2, r2, #4
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	440b      	add	r3, r1
 8005ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005abc:	e00a      	b.n	8005ad4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	4908      	ldr	r1, [pc, #32]	; (8005ae4 <__NVIC_SetPriority+0x50>)
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	3b04      	subs	r3, #4
 8005acc:	0112      	lsls	r2, r2, #4
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	761a      	strb	r2, [r3, #24]
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	e000e100 	.word	0xe000e100
 8005ae4:	e000ed00 	.word	0xe000ed00

08005ae8 <NVIC_EncodePriority>:
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b089      	sub	sp, #36	; 0x24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f003 0307 	and.w	r3, r3, #7
 8005afa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f1c3 0307 	rsb	r3, r3, #7
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	bf28      	it	cs
 8005b06:	2304      	movcs	r3, #4
 8005b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	2b06      	cmp	r3, #6
 8005b10:	d902      	bls.n	8005b18 <NVIC_EncodePriority+0x30>
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	3b03      	subs	r3, #3
 8005b16:	e000      	b.n	8005b1a <NVIC_EncodePriority+0x32>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	43da      	mvns	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	401a      	ands	r2, r3
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b30:	f04f 31ff 	mov.w	r1, #4294967295
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3a:	43d9      	mvns	r1, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b40:	4313      	orrs	r3, r2
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3724      	adds	r7, #36	; 0x24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
	...

08005b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b60:	d301      	bcc.n	8005b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b62:	2301      	movs	r3, #1
 8005b64:	e00f      	b.n	8005b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b66:	4a0a      	ldr	r2, [pc, #40]	; (8005b90 <SysTick_Config+0x40>)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b6e:	210f      	movs	r1, #15
 8005b70:	f04f 30ff 	mov.w	r0, #4294967295
 8005b74:	f7ff ff8e 	bl	8005a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b78:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <SysTick_Config+0x40>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b7e:	4b04      	ldr	r3, [pc, #16]	; (8005b90 <SysTick_Config+0x40>)
 8005b80:	2207      	movs	r2, #7
 8005b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	e000e010 	.word	0xe000e010

08005b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff ff29 	bl	80059f4 <__NVIC_SetPriorityGrouping>
}
 8005ba2:	bf00      	nop
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b086      	sub	sp, #24
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	607a      	str	r2, [r7, #4]
 8005bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bbc:	f7ff ff3e 	bl	8005a3c <__NVIC_GetPriorityGrouping>
 8005bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	6978      	ldr	r0, [r7, #20]
 8005bc8:	f7ff ff8e 	bl	8005ae8 <NVIC_EncodePriority>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff ff5d 	bl	8005a94 <__NVIC_SetPriority>
}
 8005bda:	bf00      	nop
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b082      	sub	sp, #8
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	4603      	mov	r3, r0
 8005bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff ff31 	bl	8005a58 <__NVIC_EnableIRQ>
}
 8005bf6:	bf00      	nop
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff ffa2 	bl	8005b50 <SysTick_Config>
 8005c0c:	4603      	mov	r3, r0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e054      	b.n	8005cd4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	7f5b      	ldrb	r3, [r3, #29]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d105      	bne.n	8005c40 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fd fe6c 	bl	8003918 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	791b      	ldrb	r3, [r3, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10c      	bne.n	8005c68 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a22      	ldr	r2, [pc, #136]	; (8005cdc <HAL_CRC_Init+0xc4>)
 8005c54:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0218 	bic.w	r2, r2, #24
 8005c64:	609a      	str	r2, [r3, #8]
 8005c66:	e00c      	b.n	8005c82 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6899      	ldr	r1, [r3, #8]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	461a      	mov	r2, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f946 	bl	8005f04 <HAL_CRCEx_Polynomial_Set>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e028      	b.n	8005cd4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	795b      	ldrb	r3, [r3, #5]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d105      	bne.n	8005c96 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c92:	611a      	str	r2, [r3, #16]
 8005c94:	e004      	b.n	8005ca0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6912      	ldr	r2, [r2, #16]
 8005c9e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	699a      	ldr	r2, [r3, #24]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	04c11db7 	.word	0x04c11db7

08005ce0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005cec:	2300      	movs	r3, #0
 8005cee:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f042 0201 	orr.w	r2, r2, #1
 8005d04:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d022      	beq.n	8005d54 <HAL_CRC_Calculate+0x74>
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d002      	beq.n	8005d18 <HAL_CRC_Calculate+0x38>
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d017      	beq.n	8005d46 <HAL_CRC_Calculate+0x66>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8005d16:	e024      	b.n	8005d62 <HAL_CRC_Calculate+0x82>
      for (index = 0U; index < BufferLength; index++)
 8005d18:	2300      	movs	r3, #0
 8005d1a:	617b      	str	r3, [r7, #20]
 8005d1c:	e00a      	b.n	8005d34 <HAL_CRC_Calculate+0x54>
        hcrc->Instance->DR = pBuffer[index];
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	441a      	add	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6812      	ldr	r2, [r2, #0]
 8005d2c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	3301      	adds	r3, #1
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d3f0      	bcc.n	8005d1e <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	613b      	str	r3, [r7, #16]
      break;
 8005d44:	e00d      	b.n	8005d62 <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	68b9      	ldr	r1, [r7, #8]
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 f811 	bl	8005d72 <CRC_Handle_8>
 8005d50:	6138      	str	r0, [r7, #16]
      break;
 8005d52:	e006      	b.n	8005d62 <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	68b9      	ldr	r1, [r7, #8]
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 f898 	bl	8005e8e <CRC_Handle_16>
 8005d5e:	6138      	str	r0, [r7, #16]
      break;
 8005d60:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2201      	movs	r2, #1
 8005d66:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8005d68:	693b      	ldr	r3, [r7, #16]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b089      	sub	sp, #36	; 0x24
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	60f8      	str	r0, [r7, #12]
 8005d7a:	60b9      	str	r1, [r7, #8]
 8005d7c:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	e023      	b.n	8005dcc <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	3301      	adds	r3, #1
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	440b      	add	r3, r1
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005d9e:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	3302      	adds	r3, #2
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	440b      	add	r3, r1
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005dae:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	3303      	adds	r3, #3
 8005db6:	68b9      	ldr	r1, [r7, #8]
 8005db8:	440b      	add	r3, r1
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005dc2:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005dc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	61fb      	str	r3, [r7, #28]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	089b      	lsrs	r3, r3, #2
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d3d6      	bcc.n	8005d84 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f003 0303 	and.w	r3, r3, #3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d04d      	beq.n	8005e7c <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f003 0303 	and.w	r3, r3, #3
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d107      	bne.n	8005dfa <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	4413      	add	r3, r2
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	6812      	ldr	r2, [r2, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f003 0303 	and.w	r3, r3, #3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d116      	bne.n	8005e32 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	021b      	lsls	r3, r3, #8
 8005e10:	b21a      	sxth	r2, r3
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	3301      	adds	r3, #1
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	440b      	add	r3, r1
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	b21b      	sxth	r3, r3
 8005e20:	4313      	orrs	r3, r2
 8005e22:	b21b      	sxth	r3, r3
 8005e24:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	8b7a      	ldrh	r2, [r7, #26]
 8005e30:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f003 0303 	and.w	r3, r3, #3
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d11f      	bne.n	8005e7c <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	4413      	add	r3, r2
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	b21a      	sxth	r2, r3
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	3301      	adds	r3, #1
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	440b      	add	r3, r1
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	b21b      	sxth	r3, r3
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	b21b      	sxth	r3, r3
 8005e5c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	8b7a      	ldrh	r2, [r7, #26]
 8005e68:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	3302      	adds	r3, #2
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	4413      	add	r3, r2
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	6812      	ldr	r2, [r2, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3724      	adds	r7, #36	; 0x24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b087      	sub	sp, #28
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	e013      	b.n	8005ec8 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	041a      	lsls	r2, r3, #16
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	3302      	adds	r3, #2
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	440b      	add	r3, r1
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	085b      	lsrs	r3, r3, #1
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d3e6      	bcc.n	8005ea0 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d009      	beq.n	8005ef0 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	4413      	add	r3, r2
 8005eea:	881a      	ldrh	r2, [r3, #0]
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005f14:	231f      	movs	r3, #31
 8005f16:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005f18:	bf00      	nop
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1e5a      	subs	r2, r3, #1
 8005f1e:	613a      	str	r2, [r7, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d009      	beq.n	8005f38 <HAL_CRCEx_Polynomial_Set+0x34>
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f003 031f 	and.w	r3, r3, #31
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0f0      	beq.n	8005f1a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b18      	cmp	r3, #24
 8005f3c:	d846      	bhi.n	8005fcc <HAL_CRCEx_Polynomial_Set+0xc8>
 8005f3e:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005fd3 	.word	0x08005fd3
 8005f48:	08005fcd 	.word	0x08005fcd
 8005f4c:	08005fcd 	.word	0x08005fcd
 8005f50:	08005fcd 	.word	0x08005fcd
 8005f54:	08005fcd 	.word	0x08005fcd
 8005f58:	08005fcd 	.word	0x08005fcd
 8005f5c:	08005fcd 	.word	0x08005fcd
 8005f60:	08005fcd 	.word	0x08005fcd
 8005f64:	08005fc1 	.word	0x08005fc1
 8005f68:	08005fcd 	.word	0x08005fcd
 8005f6c:	08005fcd 	.word	0x08005fcd
 8005f70:	08005fcd 	.word	0x08005fcd
 8005f74:	08005fcd 	.word	0x08005fcd
 8005f78:	08005fcd 	.word	0x08005fcd
 8005f7c:	08005fcd 	.word	0x08005fcd
 8005f80:	08005fcd 	.word	0x08005fcd
 8005f84:	08005fb5 	.word	0x08005fb5
 8005f88:	08005fcd 	.word	0x08005fcd
 8005f8c:	08005fcd 	.word	0x08005fcd
 8005f90:	08005fcd 	.word	0x08005fcd
 8005f94:	08005fcd 	.word	0x08005fcd
 8005f98:	08005fcd 	.word	0x08005fcd
 8005f9c:	08005fcd 	.word	0x08005fcd
 8005fa0:	08005fcd 	.word	0x08005fcd
 8005fa4:	08005fa9 	.word	0x08005fa9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	2b06      	cmp	r3, #6
 8005fac:	d913      	bls.n	8005fd6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005fb2:	e010      	b.n	8005fd6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b07      	cmp	r3, #7
 8005fb8:	d90f      	bls.n	8005fda <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005fbe:	e00c      	b.n	8005fda <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2b0f      	cmp	r3, #15
 8005fc4:	d90b      	bls.n	8005fde <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005fca:	e008      	b.n	8005fde <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd0:	e006      	b.n	8005fe0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005fd2:	bf00      	nop
 8005fd4:	e004      	b.n	8005fe0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005fd6:	bf00      	nop
 8005fd8:	e002      	b.n	8005fe0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005fda:	bf00      	nop
 8005fdc:	e000      	b.n	8005fe0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005fde:	bf00      	nop
  }
  if (status == HAL_OK)
 8005fe0:	7dfb      	ldrb	r3, [r7, #23]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10d      	bne.n	8006002 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f023 0118 	bic.w	r1, r3, #24
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006002:	7dfb      	ldrb	r3, [r7, #23]
}
 8006004:	4618      	mov	r0, r3
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800601c:	f7ff fa56 	bl	80054cc <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e099      	b.n	8006160 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0201 	bic.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800604c:	e00f      	b.n	800606e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800604e:	f7ff fa3d 	bl	80054cc <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b05      	cmp	r3, #5
 800605a:	d908      	bls.n	800606e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2203      	movs	r2, #3
 8006066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e078      	b.n	8006160 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1e8      	bne.n	800604e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	4b38      	ldr	r3, [pc, #224]	; (8006168 <HAL_DMA_Init+0x158>)
 8006088:	4013      	ands	r3, r2
 800608a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800609a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d107      	bne.n	80060d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d0:	4313      	orrs	r3, r2
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f023 0307 	bic.w	r3, r3, #7
 80060ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d117      	bne.n	8006132 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00e      	beq.n	8006132 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fa99 	bl	800664c <DMA_CheckFifoParam>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d008      	beq.n	8006132 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2240      	movs	r2, #64	; 0x40
 8006124:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800612e:	2301      	movs	r3, #1
 8006130:	e016      	b.n	8006160 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fa50 	bl	80065e0 <DMA_CalcBaseAndBitshift>
 8006140:	4603      	mov	r3, r0
 8006142:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006148:	223f      	movs	r2, #63	; 0x3f
 800614a:	409a      	lsls	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	e010803f 	.word	0xe010803f

0800616c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006182:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800618a:	2b01      	cmp	r3, #1
 800618c:	d101      	bne.n	8006192 <HAL_DMA_Start_IT+0x26>
 800618e:	2302      	movs	r3, #2
 8006190:	e048      	b.n	8006224 <HAL_DMA_Start_IT+0xb8>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d137      	bne.n	8006216 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2202      	movs	r2, #2
 80061aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	68b9      	ldr	r1, [r7, #8]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f9e2 	bl	8006584 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c4:	223f      	movs	r2, #63	; 0x3f
 80061c6:	409a      	lsls	r2, r3
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 0216 	orr.w	r2, r2, #22
 80061da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695a      	ldr	r2, [r3, #20]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061ea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d007      	beq.n	8006204 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0208 	orr.w	r2, r2, #8
 8006202:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	e005      	b.n	8006222 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800621e:	2302      	movs	r3, #2
 8006220:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006222:	7dfb      	ldrb	r3, [r7, #23]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d004      	beq.n	800624a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2280      	movs	r2, #128	; 0x80
 8006244:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e00c      	b.n	8006264 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2205      	movs	r2, #5
 800624e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0201 	bic.w	r2, r2, #1
 8006260:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
inline void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800627c:	4b92      	ldr	r3, [pc, #584]	; (80064c8 <HAL_DMA_IRQHandler+0x258>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a92      	ldr	r2, [pc, #584]	; (80064cc <HAL_DMA_IRQHandler+0x25c>)
 8006282:	fba2 2303 	umull	r2, r3, r2, r3
 8006286:	0a9b      	lsrs	r3, r3, #10
 8006288:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800629a:	2208      	movs	r2, #8
 800629c:	409a      	lsls	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4013      	ands	r3, r2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d01a      	beq.n	80062dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d013      	beq.n	80062dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0204 	bic.w	r2, r2, #4
 80062c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c8:	2208      	movs	r2, #8
 80062ca:	409a      	lsls	r2, r3
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d4:	f043 0201 	orr.w	r2, r3, #1
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e0:	2201      	movs	r2, #1
 80062e2:	409a      	lsls	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4013      	ands	r3, r2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d012      	beq.n	8006312 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00b      	beq.n	8006312 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062fe:	2201      	movs	r2, #1
 8006300:	409a      	lsls	r2, r3
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630a:	f043 0202 	orr.w	r2, r3, #2
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006316:	2204      	movs	r2, #4
 8006318:	409a      	lsls	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4013      	ands	r3, r2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d012      	beq.n	8006348 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00b      	beq.n	8006348 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006334:	2204      	movs	r2, #4
 8006336:	409a      	lsls	r2, r3
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006340:	f043 0204 	orr.w	r2, r3, #4
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800634c:	2210      	movs	r2, #16
 800634e:	409a      	lsls	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4013      	ands	r3, r2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d043      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d03c      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800636a:	2210      	movs	r2, #16
 800636c:	409a      	lsls	r2, r3
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d018      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d108      	bne.n	80063a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	2b00      	cmp	r3, #0
 8006394:	d024      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	4798      	blx	r3
 800639e:	e01f      	b.n	80063e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d01b      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	4798      	blx	r3
 80063b0:	e016      	b.n	80063e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d107      	bne.n	80063d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 0208 	bic.w	r2, r2, #8
 80063ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e4:	2220      	movs	r2, #32
 80063e6:	409a      	lsls	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4013      	ands	r3, r2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 808e 	beq.w	800650e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0310 	and.w	r3, r3, #16
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 8086 	beq.w	800650e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006406:	2220      	movs	r2, #32
 8006408:	409a      	lsls	r2, r3
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b05      	cmp	r3, #5
 8006418:	d136      	bne.n	8006488 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0216 	bic.w	r2, r2, #22
 8006428:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	695a      	ldr	r2, [r3, #20]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006438:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	d103      	bne.n	800644a <HAL_DMA_IRQHandler+0x1da>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006446:	2b00      	cmp	r3, #0
 8006448:	d007      	beq.n	800645a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0208 	bic.w	r2, r2, #8
 8006458:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645e:	223f      	movs	r2, #63	; 0x3f
 8006460:	409a      	lsls	r2, r3
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647a:	2b00      	cmp	r3, #0
 800647c:	d07d      	beq.n	800657a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	4798      	blx	r3
        }
        return;
 8006486:	e078      	b.n	800657a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d01c      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d108      	bne.n	80064b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d030      	beq.n	800650e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	4798      	blx	r3
 80064b4:	e02b      	b.n	800650e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d027      	beq.n	800650e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	4798      	blx	r3
 80064c6:	e022      	b.n	800650e <HAL_DMA_IRQHandler+0x29e>
 80064c8:	2001002c 	.word	0x2001002c
 80064cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10f      	bne.n	80064fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0210 	bic.w	r2, r2, #16
 80064ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006512:	2b00      	cmp	r3, #0
 8006514:	d032      	beq.n	800657c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d022      	beq.n	8006568 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2205      	movs	r2, #5
 8006526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0201 	bic.w	r2, r2, #1
 8006538:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	3301      	adds	r3, #1
 800653e:	60bb      	str	r3, [r7, #8]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	429a      	cmp	r2, r3
 8006544:	d307      	bcc.n	8006556 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1f2      	bne.n	800653a <HAL_DMA_IRQHandler+0x2ca>
 8006554:	e000      	b.n	8006558 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006556:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656c:	2b00      	cmp	r3, #0
 800656e:	d005      	beq.n	800657c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4798      	blx	r3
 8006578:	e000      	b.n	800657c <HAL_DMA_IRQHandler+0x30c>
        return;
 800657a:	bf00      	nop
    }
  }
}
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop

08006584 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	2b40      	cmp	r3, #64	; 0x40
 80065b0:	d108      	bne.n	80065c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80065c2:	e007      	b.n	80065d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	60da      	str	r2, [r3, #12]
}
 80065d4:	bf00      	nop
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	3b10      	subs	r3, #16
 80065f0:	4a13      	ldr	r2, [pc, #76]	; (8006640 <DMA_CalcBaseAndBitshift+0x60>)
 80065f2:	fba2 2303 	umull	r2, r3, r2, r3
 80065f6:	091b      	lsrs	r3, r3, #4
 80065f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80065fa:	4a12      	ldr	r2, [pc, #72]	; (8006644 <DMA_CalcBaseAndBitshift+0x64>)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2b03      	cmp	r3, #3
 800660c:	d908      	bls.n	8006620 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <DMA_CalcBaseAndBitshift+0x68>)
 8006616:	4013      	ands	r3, r2
 8006618:	1d1a      	adds	r2, r3, #4
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	659a      	str	r2, [r3, #88]	; 0x58
 800661e:	e006      	b.n	800662e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	461a      	mov	r2, r3
 8006626:	4b08      	ldr	r3, [pc, #32]	; (8006648 <DMA_CalcBaseAndBitshift+0x68>)
 8006628:	4013      	ands	r3, r2
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	aaaaaaab 	.word	0xaaaaaaab
 8006644:	0800a130 	.word	0x0800a130
 8006648:	fffffc00 	.word	0xfffffc00

0800664c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006654:	2300      	movs	r3, #0
 8006656:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d11f      	bne.n	80066a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b03      	cmp	r3, #3
 800666a:	d855      	bhi.n	8006718 <DMA_CheckFifoParam+0xcc>
 800666c:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <DMA_CheckFifoParam+0x28>)
 800666e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006672:	bf00      	nop
 8006674:	08006685 	.word	0x08006685
 8006678:	08006697 	.word	0x08006697
 800667c:	08006685 	.word	0x08006685
 8006680:	08006719 	.word	0x08006719
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d045      	beq.n	800671c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006694:	e042      	b.n	800671c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800669e:	d13f      	bne.n	8006720 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066a4:	e03c      	b.n	8006720 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ae:	d121      	bne.n	80066f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	d836      	bhi.n	8006724 <DMA_CheckFifoParam+0xd8>
 80066b6:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <DMA_CheckFifoParam+0x70>)
 80066b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066bc:	080066cd 	.word	0x080066cd
 80066c0:	080066d3 	.word	0x080066d3
 80066c4:	080066cd 	.word	0x080066cd
 80066c8:	080066e5 	.word	0x080066e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	73fb      	strb	r3, [r7, #15]
      break;
 80066d0:	e02f      	b.n	8006732 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d024      	beq.n	8006728 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066e2:	e021      	b.n	8006728 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80066ec:	d11e      	bne.n	800672c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80066f2:	e01b      	b.n	800672c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d902      	bls.n	8006700 <DMA_CheckFifoParam+0xb4>
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d003      	beq.n	8006706 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80066fe:	e018      	b.n	8006732 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	73fb      	strb	r3, [r7, #15]
      break;
 8006704:	e015      	b.n	8006732 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00e      	beq.n	8006730 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	73fb      	strb	r3, [r7, #15]
      break;
 8006716:	e00b      	b.n	8006730 <DMA_CheckFifoParam+0xe4>
      break;
 8006718:	bf00      	nop
 800671a:	e00a      	b.n	8006732 <DMA_CheckFifoParam+0xe6>
      break;
 800671c:	bf00      	nop
 800671e:	e008      	b.n	8006732 <DMA_CheckFifoParam+0xe6>
      break;
 8006720:	bf00      	nop
 8006722:	e006      	b.n	8006732 <DMA_CheckFifoParam+0xe6>
      break;
 8006724:	bf00      	nop
 8006726:	e004      	b.n	8006732 <DMA_CheckFifoParam+0xe6>
      break;
 8006728:	bf00      	nop
 800672a:	e002      	b.n	8006732 <DMA_CheckFifoParam+0xe6>
      break;   
 800672c:	bf00      	nop
 800672e:	e000      	b.n	8006732 <DMA_CheckFifoParam+0xe6>
      break;
 8006730:	bf00      	nop
    }
  } 
  
  return status; 
 8006732:	7bfb      	ldrb	r3, [r7, #15]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006740:	b480      	push	{r7}
 8006742:	b089      	sub	sp, #36	; 0x24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800674a:	2300      	movs	r3, #0
 800674c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800674e:	2300      	movs	r3, #0
 8006750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006752:	2300      	movs	r3, #0
 8006754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006756:	2300      	movs	r3, #0
 8006758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800675a:	2300      	movs	r3, #0
 800675c:	61fb      	str	r3, [r7, #28]
 800675e:	e169      	b.n	8006a34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006760:	2201      	movs	r2, #1
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	fa02 f303 	lsl.w	r3, r2, r3
 8006768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4013      	ands	r3, r2
 8006772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	429a      	cmp	r2, r3
 800677a:	f040 8158 	bne.w	8006a2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d00b      	beq.n	800679e <HAL_GPIO_Init+0x5e>
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b02      	cmp	r3, #2
 800678c:	d007      	beq.n	800679e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006792:	2b11      	cmp	r3, #17
 8006794:	d003      	beq.n	800679e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b12      	cmp	r3, #18
 800679c:	d130      	bne.n	8006800 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	2203      	movs	r2, #3
 80067aa:	fa02 f303 	lsl.w	r3, r2, r3
 80067ae:	43db      	mvns	r3, r3
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	4013      	ands	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	fa02 f303 	lsl.w	r3, r2, r3
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80067d4:	2201      	movs	r2, #1
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	fa02 f303 	lsl.w	r3, r2, r3
 80067dc:	43db      	mvns	r3, r3
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	4013      	ands	r3, r2
 80067e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	091b      	lsrs	r3, r3, #4
 80067ea:	f003 0201 	and.w	r2, r3, #1
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	fa02 f303 	lsl.w	r3, r2, r3
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	2203      	movs	r2, #3
 800680c:	fa02 f303 	lsl.w	r3, r2, r3
 8006810:	43db      	mvns	r3, r3
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	4013      	ands	r3, r2
 8006816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	fa02 f303 	lsl.w	r3, r2, r3
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	4313      	orrs	r3, r2
 8006828:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b02      	cmp	r3, #2
 8006836:	d003      	beq.n	8006840 <HAL_GPIO_Init+0x100>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b12      	cmp	r3, #18
 800683e:	d123      	bne.n	8006888 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	08da      	lsrs	r2, r3, #3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3208      	adds	r2, #8
 8006848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	220f      	movs	r2, #15
 8006858:	fa02 f303 	lsl.w	r3, r2, r3
 800685c:	43db      	mvns	r3, r3
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	4013      	ands	r3, r2
 8006862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	fa02 f303 	lsl.w	r3, r2, r3
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	4313      	orrs	r3, r2
 8006878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	08da      	lsrs	r2, r3, #3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3208      	adds	r2, #8
 8006882:	69b9      	ldr	r1, [r7, #24]
 8006884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	2203      	movs	r2, #3
 8006894:	fa02 f303 	lsl.w	r3, r2, r3
 8006898:	43db      	mvns	r3, r3
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	4013      	ands	r3, r2
 800689e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f003 0203 	and.w	r2, r3, #3
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	fa02 f303 	lsl.w	r3, r2, r3
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 80b2 	beq.w	8006a2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068ca:	4b5f      	ldr	r3, [pc, #380]	; (8006a48 <HAL_GPIO_Init+0x308>)
 80068cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ce:	4a5e      	ldr	r2, [pc, #376]	; (8006a48 <HAL_GPIO_Init+0x308>)
 80068d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068d4:	6453      	str	r3, [r2, #68]	; 0x44
 80068d6:	4b5c      	ldr	r3, [pc, #368]	; (8006a48 <HAL_GPIO_Init+0x308>)
 80068d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80068e2:	4a5a      	ldr	r2, [pc, #360]	; (8006a4c <HAL_GPIO_Init+0x30c>)
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	089b      	lsrs	r3, r3, #2
 80068e8:	3302      	adds	r3, #2
 80068ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	220f      	movs	r2, #15
 80068fa:	fa02 f303 	lsl.w	r3, r2, r3
 80068fe:	43db      	mvns	r3, r3
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	4013      	ands	r3, r2
 8006904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a51      	ldr	r2, [pc, #324]	; (8006a50 <HAL_GPIO_Init+0x310>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d02b      	beq.n	8006966 <HAL_GPIO_Init+0x226>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a50      	ldr	r2, [pc, #320]	; (8006a54 <HAL_GPIO_Init+0x314>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d025      	beq.n	8006962 <HAL_GPIO_Init+0x222>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a4f      	ldr	r2, [pc, #316]	; (8006a58 <HAL_GPIO_Init+0x318>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d01f      	beq.n	800695e <HAL_GPIO_Init+0x21e>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a4e      	ldr	r2, [pc, #312]	; (8006a5c <HAL_GPIO_Init+0x31c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d019      	beq.n	800695a <HAL_GPIO_Init+0x21a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a4d      	ldr	r2, [pc, #308]	; (8006a60 <HAL_GPIO_Init+0x320>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d013      	beq.n	8006956 <HAL_GPIO_Init+0x216>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a4c      	ldr	r2, [pc, #304]	; (8006a64 <HAL_GPIO_Init+0x324>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00d      	beq.n	8006952 <HAL_GPIO_Init+0x212>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a4b      	ldr	r2, [pc, #300]	; (8006a68 <HAL_GPIO_Init+0x328>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d007      	beq.n	800694e <HAL_GPIO_Init+0x20e>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a4a      	ldr	r2, [pc, #296]	; (8006a6c <HAL_GPIO_Init+0x32c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d101      	bne.n	800694a <HAL_GPIO_Init+0x20a>
 8006946:	2307      	movs	r3, #7
 8006948:	e00e      	b.n	8006968 <HAL_GPIO_Init+0x228>
 800694a:	2308      	movs	r3, #8
 800694c:	e00c      	b.n	8006968 <HAL_GPIO_Init+0x228>
 800694e:	2306      	movs	r3, #6
 8006950:	e00a      	b.n	8006968 <HAL_GPIO_Init+0x228>
 8006952:	2305      	movs	r3, #5
 8006954:	e008      	b.n	8006968 <HAL_GPIO_Init+0x228>
 8006956:	2304      	movs	r3, #4
 8006958:	e006      	b.n	8006968 <HAL_GPIO_Init+0x228>
 800695a:	2303      	movs	r3, #3
 800695c:	e004      	b.n	8006968 <HAL_GPIO_Init+0x228>
 800695e:	2302      	movs	r3, #2
 8006960:	e002      	b.n	8006968 <HAL_GPIO_Init+0x228>
 8006962:	2301      	movs	r3, #1
 8006964:	e000      	b.n	8006968 <HAL_GPIO_Init+0x228>
 8006966:	2300      	movs	r3, #0
 8006968:	69fa      	ldr	r2, [r7, #28]
 800696a:	f002 0203 	and.w	r2, r2, #3
 800696e:	0092      	lsls	r2, r2, #2
 8006970:	4093      	lsls	r3, r2
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	4313      	orrs	r3, r2
 8006976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006978:	4934      	ldr	r1, [pc, #208]	; (8006a4c <HAL_GPIO_Init+0x30c>)
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	089b      	lsrs	r3, r3, #2
 800697e:	3302      	adds	r3, #2
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006986:	4b3a      	ldr	r3, [pc, #232]	; (8006a70 <HAL_GPIO_Init+0x330>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	43db      	mvns	r3, r3
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	4013      	ands	r3, r2
 8006994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80069aa:	4a31      	ldr	r2, [pc, #196]	; (8006a70 <HAL_GPIO_Init+0x330>)
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80069b0:	4b2f      	ldr	r3, [pc, #188]	; (8006a70 <HAL_GPIO_Init+0x330>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	43db      	mvns	r3, r3
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	4013      	ands	r3, r2
 80069be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80069d4:	4a26      	ldr	r2, [pc, #152]	; (8006a70 <HAL_GPIO_Init+0x330>)
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80069da:	4b25      	ldr	r3, [pc, #148]	; (8006a70 <HAL_GPIO_Init+0x330>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	43db      	mvns	r3, r3
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	4013      	ands	r3, r2
 80069e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80069fe:	4a1c      	ldr	r2, [pc, #112]	; (8006a70 <HAL_GPIO_Init+0x330>)
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a04:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <HAL_GPIO_Init+0x330>)
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	43db      	mvns	r3, r3
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	4013      	ands	r3, r2
 8006a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d003      	beq.n	8006a28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006a28:	4a11      	ldr	r2, [pc, #68]	; (8006a70 <HAL_GPIO_Init+0x330>)
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	3301      	adds	r3, #1
 8006a32:	61fb      	str	r3, [r7, #28]
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	2b0f      	cmp	r3, #15
 8006a38:	f67f ae92 	bls.w	8006760 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006a3c:	bf00      	nop
 8006a3e:	3724      	adds	r7, #36	; 0x24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	40013800 	.word	0x40013800
 8006a50:	40020000 	.word	0x40020000
 8006a54:	40020400 	.word	0x40020400
 8006a58:	40020800 	.word	0x40020800
 8006a5c:	40020c00 	.word	0x40020c00
 8006a60:	40021000 	.word	0x40021000
 8006a64:	40021400 	.word	0x40021400
 8006a68:	40021800 	.word	0x40021800
 8006a6c:	40021c00 	.word	0x40021c00
 8006a70:	40013c00 	.word	0x40013c00

08006a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
inline GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691a      	ldr	r2, [r3, #16]
 8006a84:	887b      	ldrh	r3, [r7, #2]
 8006a86:	4013      	ands	r3, r2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	73fb      	strb	r3, [r7, #15]
 8006a90:	e001      	b.n	8006a96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
inline void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	807b      	strh	r3, [r7, #2]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ab4:	787b      	ldrb	r3, [r7, #1]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006aba:	887a      	ldrh	r2, [r7, #2]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006ac0:	e003      	b.n	8006aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006ac2:	887b      	ldrh	r3, [r7, #2]
 8006ac4:	041a      	lsls	r2, r3, #16
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	619a      	str	r2, [r3, #24]
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
	...

08006ad8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
inline void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	4603      	mov	r3, r0
 8006ae0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006ae2:	4b08      	ldr	r3, [pc, #32]	; (8006b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ae4:	695a      	ldr	r2, [r3, #20]
 8006ae6:	88fb      	ldrh	r3, [r7, #6]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d006      	beq.n	8006afc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006aee:	4a05      	ldr	r2, [pc, #20]	; (8006b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006af0:	88fb      	ldrh	r3, [r7, #6]
 8006af2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006af4:	88fb      	ldrh	r3, [r7, #6]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fb ffd6 	bl	8002aa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006afc:	bf00      	nop
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	40013c00 	.word	0x40013c00

08006b08 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006b18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006b32:	4b23      	ldr	r3, [pc, #140]	; (8006bc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	4a22      	ldr	r2, [pc, #136]	; (8006bc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b3e:	4b20      	ldr	r3, [pc, #128]	; (8006bc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006b4a:	4b1e      	ldr	r3, [pc, #120]	; (8006bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a1d      	ldr	r2, [pc, #116]	; (8006bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b54:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b56:	f7fe fcb9 	bl	80054cc <HAL_GetTick>
 8006b5a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b5c:	e009      	b.n	8006b72 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b5e:	f7fe fcb5 	bl	80054cc <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b6c:	d901      	bls.n	8006b72 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e022      	b.n	8006bb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b72:	4b14      	ldr	r3, [pc, #80]	; (8006bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b7e:	d1ee      	bne.n	8006b5e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006b80:	4b10      	ldr	r3, [pc, #64]	; (8006bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a0f      	ldr	r2, [pc, #60]	; (8006bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b8c:	f7fe fc9e 	bl	80054cc <HAL_GetTick>
 8006b90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b92:	e009      	b.n	8006ba8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b94:	f7fe fc9a 	bl	80054cc <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ba2:	d901      	bls.n	8006ba8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e007      	b.n	8006bb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006ba8:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bb4:	d1ee      	bne.n	8006b94 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	40023800 	.word	0x40023800
 8006bc4:	40007000 	.word	0x40007000

08006bc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e291      	b.n	8007102 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 8087 	beq.w	8006cfa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006bec:	4b96      	ldr	r3, [pc, #600]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f003 030c 	and.w	r3, r3, #12
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d00c      	beq.n	8006c12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bf8:	4b93      	ldr	r3, [pc, #588]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f003 030c 	and.w	r3, r3, #12
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d112      	bne.n	8006c2a <HAL_RCC_OscConfig+0x62>
 8006c04:	4b90      	ldr	r3, [pc, #576]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c10:	d10b      	bne.n	8006c2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c12:	4b8d      	ldr	r3, [pc, #564]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d06c      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x130>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d168      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e26b      	b.n	8007102 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c32:	d106      	bne.n	8006c42 <HAL_RCC_OscConfig+0x7a>
 8006c34:	4b84      	ldr	r3, [pc, #528]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a83      	ldr	r2, [pc, #524]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	e02e      	b.n	8006ca0 <HAL_RCC_OscConfig+0xd8>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10c      	bne.n	8006c64 <HAL_RCC_OscConfig+0x9c>
 8006c4a:	4b7f      	ldr	r3, [pc, #508]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a7e      	ldr	r2, [pc, #504]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	4b7c      	ldr	r3, [pc, #496]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a7b      	ldr	r2, [pc, #492]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	e01d      	b.n	8006ca0 <HAL_RCC_OscConfig+0xd8>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c6c:	d10c      	bne.n	8006c88 <HAL_RCC_OscConfig+0xc0>
 8006c6e:	4b76      	ldr	r3, [pc, #472]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a75      	ldr	r2, [pc, #468]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	4b73      	ldr	r3, [pc, #460]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a72      	ldr	r2, [pc, #456]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	e00b      	b.n	8006ca0 <HAL_RCC_OscConfig+0xd8>
 8006c88:	4b6f      	ldr	r3, [pc, #444]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a6e      	ldr	r2, [pc, #440]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	4b6c      	ldr	r3, [pc, #432]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a6b      	ldr	r2, [pc, #428]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d013      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca8:	f7fe fc10 	bl	80054cc <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cb0:	f7fe fc0c 	bl	80054cc <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b64      	cmp	r3, #100	; 0x64
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e21f      	b.n	8007102 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cc2:	4b61      	ldr	r3, [pc, #388]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0f0      	beq.n	8006cb0 <HAL_RCC_OscConfig+0xe8>
 8006cce:	e014      	b.n	8006cfa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd0:	f7fe fbfc 	bl	80054cc <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cd8:	f7fe fbf8 	bl	80054cc <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b64      	cmp	r3, #100	; 0x64
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e20b      	b.n	8007102 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cea:	4b57      	ldr	r3, [pc, #348]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1f0      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x110>
 8006cf6:	e000      	b.n	8006cfa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d069      	beq.n	8006dda <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d06:	4b50      	ldr	r3, [pc, #320]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 030c 	and.w	r3, r3, #12
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00b      	beq.n	8006d2a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d12:	4b4d      	ldr	r3, [pc, #308]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f003 030c 	and.w	r3, r3, #12
 8006d1a:	2b08      	cmp	r3, #8
 8006d1c:	d11c      	bne.n	8006d58 <HAL_RCC_OscConfig+0x190>
 8006d1e:	4b4a      	ldr	r3, [pc, #296]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d116      	bne.n	8006d58 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d2a:	4b47      	ldr	r3, [pc, #284]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d005      	beq.n	8006d42 <HAL_RCC_OscConfig+0x17a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d001      	beq.n	8006d42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e1df      	b.n	8007102 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d42:	4b41      	ldr	r3, [pc, #260]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	493d      	ldr	r1, [pc, #244]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d56:	e040      	b.n	8006dda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d023      	beq.n	8006da8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d60:	4b39      	ldr	r3, [pc, #228]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a38      	ldr	r2, [pc, #224]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006d66:	f043 0301 	orr.w	r3, r3, #1
 8006d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d6c:	f7fe fbae 	bl	80054cc <HAL_GetTick>
 8006d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d72:	e008      	b.n	8006d86 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d74:	f7fe fbaa 	bl	80054cc <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d901      	bls.n	8006d86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e1bd      	b.n	8007102 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d86:	4b30      	ldr	r3, [pc, #192]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0f0      	beq.n	8006d74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d92:	4b2d      	ldr	r3, [pc, #180]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	4929      	ldr	r1, [pc, #164]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	600b      	str	r3, [r1, #0]
 8006da6:	e018      	b.n	8006dda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006da8:	4b27      	ldr	r3, [pc, #156]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a26      	ldr	r2, [pc, #152]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db4:	f7fe fb8a 	bl	80054cc <HAL_GetTick>
 8006db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dba:	e008      	b.n	8006dce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dbc:	f7fe fb86 	bl	80054cc <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e199      	b.n	8007102 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dce:	4b1e      	ldr	r3, [pc, #120]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1f0      	bne.n	8006dbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0308 	and.w	r3, r3, #8
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d038      	beq.n	8006e58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d019      	beq.n	8006e22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dee:	4b16      	ldr	r3, [pc, #88]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006df2:	4a15      	ldr	r2, [pc, #84]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006df4:	f043 0301 	orr.w	r3, r3, #1
 8006df8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dfa:	f7fe fb67 	bl	80054cc <HAL_GetTick>
 8006dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e00:	e008      	b.n	8006e14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e02:	f7fe fb63 	bl	80054cc <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d901      	bls.n	8006e14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e176      	b.n	8007102 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e14:	4b0c      	ldr	r3, [pc, #48]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d0f0      	beq.n	8006e02 <HAL_RCC_OscConfig+0x23a>
 8006e20:	e01a      	b.n	8006e58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e22:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e26:	4a08      	ldr	r2, [pc, #32]	; (8006e48 <HAL_RCC_OscConfig+0x280>)
 8006e28:	f023 0301 	bic.w	r3, r3, #1
 8006e2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e2e:	f7fe fb4d 	bl	80054cc <HAL_GetTick>
 8006e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e34:	e00a      	b.n	8006e4c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e36:	f7fe fb49 	bl	80054cc <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d903      	bls.n	8006e4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e15c      	b.n	8007102 <HAL_RCC_OscConfig+0x53a>
 8006e48:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e4c:	4b91      	ldr	r3, [pc, #580]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1ee      	bne.n	8006e36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 80a4 	beq.w	8006fae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e66:	4b8b      	ldr	r3, [pc, #556]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10d      	bne.n	8006e8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e72:	4b88      	ldr	r3, [pc, #544]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	4a87      	ldr	r2, [pc, #540]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e7e:	4b85      	ldr	r3, [pc, #532]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e86:	60bb      	str	r3, [r7, #8]
 8006e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e8e:	4b82      	ldr	r3, [pc, #520]	; (8007098 <HAL_RCC_OscConfig+0x4d0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d118      	bne.n	8006ecc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006e9a:	4b7f      	ldr	r3, [pc, #508]	; (8007098 <HAL_RCC_OscConfig+0x4d0>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a7e      	ldr	r2, [pc, #504]	; (8007098 <HAL_RCC_OscConfig+0x4d0>)
 8006ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ea6:	f7fe fb11 	bl	80054cc <HAL_GetTick>
 8006eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006eac:	e008      	b.n	8006ec0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eae:	f7fe fb0d 	bl	80054cc <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	2b64      	cmp	r3, #100	; 0x64
 8006eba:	d901      	bls.n	8006ec0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e120      	b.n	8007102 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ec0:	4b75      	ldr	r3, [pc, #468]	; (8007098 <HAL_RCC_OscConfig+0x4d0>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0f0      	beq.n	8006eae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d106      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x31a>
 8006ed4:	4b6f      	ldr	r3, [pc, #444]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed8:	4a6e      	ldr	r2, [pc, #440]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006eda:	f043 0301 	orr.w	r3, r3, #1
 8006ede:	6713      	str	r3, [r2, #112]	; 0x70
 8006ee0:	e02d      	b.n	8006f3e <HAL_RCC_OscConfig+0x376>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10c      	bne.n	8006f04 <HAL_RCC_OscConfig+0x33c>
 8006eea:	4b6a      	ldr	r3, [pc, #424]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eee:	4a69      	ldr	r2, [pc, #420]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006ef0:	f023 0301 	bic.w	r3, r3, #1
 8006ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ef6:	4b67      	ldr	r3, [pc, #412]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efa:	4a66      	ldr	r2, [pc, #408]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006efc:	f023 0304 	bic.w	r3, r3, #4
 8006f00:	6713      	str	r3, [r2, #112]	; 0x70
 8006f02:	e01c      	b.n	8006f3e <HAL_RCC_OscConfig+0x376>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	2b05      	cmp	r3, #5
 8006f0a:	d10c      	bne.n	8006f26 <HAL_RCC_OscConfig+0x35e>
 8006f0c:	4b61      	ldr	r3, [pc, #388]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f10:	4a60      	ldr	r2, [pc, #384]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006f12:	f043 0304 	orr.w	r3, r3, #4
 8006f16:	6713      	str	r3, [r2, #112]	; 0x70
 8006f18:	4b5e      	ldr	r3, [pc, #376]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1c:	4a5d      	ldr	r2, [pc, #372]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006f1e:	f043 0301 	orr.w	r3, r3, #1
 8006f22:	6713      	str	r3, [r2, #112]	; 0x70
 8006f24:	e00b      	b.n	8006f3e <HAL_RCC_OscConfig+0x376>
 8006f26:	4b5b      	ldr	r3, [pc, #364]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2a:	4a5a      	ldr	r2, [pc, #360]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006f2c:	f023 0301 	bic.w	r3, r3, #1
 8006f30:	6713      	str	r3, [r2, #112]	; 0x70
 8006f32:	4b58      	ldr	r3, [pc, #352]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f36:	4a57      	ldr	r2, [pc, #348]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006f38:	f023 0304 	bic.w	r3, r3, #4
 8006f3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d015      	beq.n	8006f72 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f46:	f7fe fac1 	bl	80054cc <HAL_GetTick>
 8006f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f4c:	e00a      	b.n	8006f64 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f4e:	f7fe fabd 	bl	80054cc <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d901      	bls.n	8006f64 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e0ce      	b.n	8007102 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f64:	4b4b      	ldr	r3, [pc, #300]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f68:	f003 0302 	and.w	r3, r3, #2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d0ee      	beq.n	8006f4e <HAL_RCC_OscConfig+0x386>
 8006f70:	e014      	b.n	8006f9c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f72:	f7fe faab 	bl	80054cc <HAL_GetTick>
 8006f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f78:	e00a      	b.n	8006f90 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f7a:	f7fe faa7 	bl	80054cc <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d901      	bls.n	8006f90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e0b8      	b.n	8007102 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f90:	4b40      	ldr	r3, [pc, #256]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1ee      	bne.n	8006f7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f9c:	7dfb      	ldrb	r3, [r7, #23]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d105      	bne.n	8006fae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fa2:	4b3c      	ldr	r3, [pc, #240]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	4a3b      	ldr	r2, [pc, #236]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 80a4 	beq.w	8007100 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fb8:	4b36      	ldr	r3, [pc, #216]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f003 030c 	and.w	r3, r3, #12
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	d06b      	beq.n	800709c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d149      	bne.n	8007060 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fcc:	4b31      	ldr	r3, [pc, #196]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a30      	ldr	r2, [pc, #192]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd8:	f7fe fa78 	bl	80054cc <HAL_GetTick>
 8006fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fde:	e008      	b.n	8006ff2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fe0:	f7fe fa74 	bl	80054cc <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d901      	bls.n	8006ff2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e087      	b.n	8007102 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ff2:	4b28      	ldr	r3, [pc, #160]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1f0      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	69da      	ldr	r2, [r3, #28]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	431a      	orrs	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	019b      	lsls	r3, r3, #6
 800700e:	431a      	orrs	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007014:	085b      	lsrs	r3, r3, #1
 8007016:	3b01      	subs	r3, #1
 8007018:	041b      	lsls	r3, r3, #16
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	061b      	lsls	r3, r3, #24
 8007022:	4313      	orrs	r3, r2
 8007024:	4a1b      	ldr	r2, [pc, #108]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8007026:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800702a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800702c:	4b19      	ldr	r3, [pc, #100]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a18      	ldr	r2, [pc, #96]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8007032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007038:	f7fe fa48 	bl	80054cc <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800703e:	e008      	b.n	8007052 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007040:	f7fe fa44 	bl	80054cc <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b02      	cmp	r3, #2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e057      	b.n	8007102 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007052:	4b10      	ldr	r3, [pc, #64]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0f0      	beq.n	8007040 <HAL_RCC_OscConfig+0x478>
 800705e:	e04f      	b.n	8007100 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007060:	4b0c      	ldr	r3, [pc, #48]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a0b      	ldr	r2, [pc, #44]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8007066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800706a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706c:	f7fe fa2e 	bl	80054cc <HAL_GetTick>
 8007070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007072:	e008      	b.n	8007086 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007074:	f7fe fa2a 	bl	80054cc <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b02      	cmp	r3, #2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e03d      	b.n	8007102 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007086:	4b03      	ldr	r3, [pc, #12]	; (8007094 <HAL_RCC_OscConfig+0x4cc>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1f0      	bne.n	8007074 <HAL_RCC_OscConfig+0x4ac>
 8007092:	e035      	b.n	8007100 <HAL_RCC_OscConfig+0x538>
 8007094:	40023800 	.word	0x40023800
 8007098:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800709c:	4b1b      	ldr	r3, [pc, #108]	; (800710c <HAL_RCC_OscConfig+0x544>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d028      	beq.n	80070fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d121      	bne.n	80070fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d11a      	bne.n	80070fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80070cc:	4013      	ands	r3, r2
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d111      	bne.n	80070fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e2:	085b      	lsrs	r3, r3, #1
 80070e4:	3b01      	subs	r3, #1
 80070e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d107      	bne.n	80070fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d001      	beq.n	8007100 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e000      	b.n	8007102 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3718      	adds	r7, #24
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	40023800 	.word	0x40023800

08007110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800711a:	2300      	movs	r3, #0
 800711c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e0d0      	b.n	80072ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007128:	4b6a      	ldr	r3, [pc, #424]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 030f 	and.w	r3, r3, #15
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d910      	bls.n	8007158 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007136:	4b67      	ldr	r3, [pc, #412]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f023 020f 	bic.w	r2, r3, #15
 800713e:	4965      	ldr	r1, [pc, #404]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	4313      	orrs	r3, r2
 8007144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007146:	4b63      	ldr	r3, [pc, #396]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d001      	beq.n	8007158 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e0b8      	b.n	80072ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d020      	beq.n	80071a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0304 	and.w	r3, r3, #4
 800716c:	2b00      	cmp	r3, #0
 800716e:	d005      	beq.n	800717c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007170:	4b59      	ldr	r3, [pc, #356]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	4a58      	ldr	r2, [pc, #352]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 8007176:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800717a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0308 	and.w	r3, r3, #8
 8007184:	2b00      	cmp	r3, #0
 8007186:	d005      	beq.n	8007194 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007188:	4b53      	ldr	r3, [pc, #332]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	4a52      	ldr	r2, [pc, #328]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 800718e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007192:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007194:	4b50      	ldr	r3, [pc, #320]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	494d      	ldr	r1, [pc, #308]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d040      	beq.n	8007234 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d107      	bne.n	80071ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ba:	4b47      	ldr	r3, [pc, #284]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d115      	bne.n	80071f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e07f      	b.n	80072ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d107      	bne.n	80071e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071d2:	4b41      	ldr	r3, [pc, #260]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d109      	bne.n	80071f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e073      	b.n	80072ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071e2:	4b3d      	ldr	r3, [pc, #244]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e06b      	b.n	80072ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071f2:	4b39      	ldr	r3, [pc, #228]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f023 0203 	bic.w	r2, r3, #3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	4936      	ldr	r1, [pc, #216]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 8007200:	4313      	orrs	r3, r2
 8007202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007204:	f7fe f962 	bl	80054cc <HAL_GetTick>
 8007208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800720a:	e00a      	b.n	8007222 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800720c:	f7fe f95e 	bl	80054cc <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	f241 3288 	movw	r2, #5000	; 0x1388
 800721a:	4293      	cmp	r3, r2
 800721c:	d901      	bls.n	8007222 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e053      	b.n	80072ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007222:	4b2d      	ldr	r3, [pc, #180]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f003 020c 	and.w	r2, r3, #12
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	429a      	cmp	r2, r3
 8007232:	d1eb      	bne.n	800720c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007234:	4b27      	ldr	r3, [pc, #156]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 030f 	and.w	r3, r3, #15
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	d210      	bcs.n	8007264 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007242:	4b24      	ldr	r3, [pc, #144]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f023 020f 	bic.w	r2, r3, #15
 800724a:	4922      	ldr	r1, [pc, #136]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	4313      	orrs	r3, r2
 8007250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007252:	4b20      	ldr	r3, [pc, #128]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d001      	beq.n	8007264 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e032      	b.n	80072ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b00      	cmp	r3, #0
 800726e:	d008      	beq.n	8007282 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007270:	4b19      	ldr	r3, [pc, #100]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	4916      	ldr	r1, [pc, #88]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 800727e:	4313      	orrs	r3, r2
 8007280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	d009      	beq.n	80072a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800728e:	4b12      	ldr	r3, [pc, #72]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	490e      	ldr	r1, [pc, #56]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072a2:	f000 f821 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 80072a6:	4601      	mov	r1, r0
 80072a8:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	091b      	lsrs	r3, r3, #4
 80072ae:	f003 030f 	and.w	r3, r3, #15
 80072b2:	4a0a      	ldr	r2, [pc, #40]	; (80072dc <HAL_RCC_ClockConfig+0x1cc>)
 80072b4:	5cd3      	ldrb	r3, [r2, r3]
 80072b6:	fa21 f303 	lsr.w	r3, r1, r3
 80072ba:	4a09      	ldr	r2, [pc, #36]	; (80072e0 <HAL_RCC_ClockConfig+0x1d0>)
 80072bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80072be:	4b09      	ldr	r3, [pc, #36]	; (80072e4 <HAL_RCC_ClockConfig+0x1d4>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe f8be 	bl	8005444 <HAL_InitTick>

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	40023c00 	.word	0x40023c00
 80072d8:	40023800 	.word	0x40023800
 80072dc:	0800a118 	.word	0x0800a118
 80072e0:	2001002c 	.word	0x2001002c
 80072e4:	20011420 	.word	0x20011420

080072e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	607b      	str	r3, [r7, #4]
 80072f2:	2300      	movs	r3, #0
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	2300      	movs	r3, #0
 80072f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072fe:	4b50      	ldr	r3, [pc, #320]	; (8007440 <HAL_RCC_GetSysClockFreq+0x158>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f003 030c 	and.w	r3, r3, #12
 8007306:	2b04      	cmp	r3, #4
 8007308:	d007      	beq.n	800731a <HAL_RCC_GetSysClockFreq+0x32>
 800730a:	2b08      	cmp	r3, #8
 800730c:	d008      	beq.n	8007320 <HAL_RCC_GetSysClockFreq+0x38>
 800730e:	2b00      	cmp	r3, #0
 8007310:	f040 808d 	bne.w	800742e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007314:	4b4b      	ldr	r3, [pc, #300]	; (8007444 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007316:	60bb      	str	r3, [r7, #8]
      break;
 8007318:	e08c      	b.n	8007434 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800731a:	4b4b      	ldr	r3, [pc, #300]	; (8007448 <HAL_RCC_GetSysClockFreq+0x160>)
 800731c:	60bb      	str	r3, [r7, #8]
      break;
 800731e:	e089      	b.n	8007434 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007320:	4b47      	ldr	r3, [pc, #284]	; (8007440 <HAL_RCC_GetSysClockFreq+0x158>)
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007328:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800732a:	4b45      	ldr	r3, [pc, #276]	; (8007440 <HAL_RCC_GetSysClockFreq+0x158>)
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d023      	beq.n	800737e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007336:	4b42      	ldr	r3, [pc, #264]	; (8007440 <HAL_RCC_GetSysClockFreq+0x158>)
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	099b      	lsrs	r3, r3, #6
 800733c:	f04f 0400 	mov.w	r4, #0
 8007340:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007344:	f04f 0200 	mov.w	r2, #0
 8007348:	ea03 0501 	and.w	r5, r3, r1
 800734c:	ea04 0602 	and.w	r6, r4, r2
 8007350:	4a3d      	ldr	r2, [pc, #244]	; (8007448 <HAL_RCC_GetSysClockFreq+0x160>)
 8007352:	fb02 f106 	mul.w	r1, r2, r6
 8007356:	2200      	movs	r2, #0
 8007358:	fb02 f205 	mul.w	r2, r2, r5
 800735c:	440a      	add	r2, r1
 800735e:	493a      	ldr	r1, [pc, #232]	; (8007448 <HAL_RCC_GetSysClockFreq+0x160>)
 8007360:	fba5 0101 	umull	r0, r1, r5, r1
 8007364:	1853      	adds	r3, r2, r1
 8007366:	4619      	mov	r1, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f04f 0400 	mov.w	r4, #0
 800736e:	461a      	mov	r2, r3
 8007370:	4623      	mov	r3, r4
 8007372:	f7f9 fb73 	bl	8000a5c <__aeabi_uldivmod>
 8007376:	4603      	mov	r3, r0
 8007378:	460c      	mov	r4, r1
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	e049      	b.n	8007412 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800737e:	4b30      	ldr	r3, [pc, #192]	; (8007440 <HAL_RCC_GetSysClockFreq+0x158>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	099b      	lsrs	r3, r3, #6
 8007384:	f04f 0400 	mov.w	r4, #0
 8007388:	f240 11ff 	movw	r1, #511	; 0x1ff
 800738c:	f04f 0200 	mov.w	r2, #0
 8007390:	ea03 0501 	and.w	r5, r3, r1
 8007394:	ea04 0602 	and.w	r6, r4, r2
 8007398:	4629      	mov	r1, r5
 800739a:	4632      	mov	r2, r6
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	f04f 0400 	mov.w	r4, #0
 80073a4:	0154      	lsls	r4, r2, #5
 80073a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80073aa:	014b      	lsls	r3, r1, #5
 80073ac:	4619      	mov	r1, r3
 80073ae:	4622      	mov	r2, r4
 80073b0:	1b49      	subs	r1, r1, r5
 80073b2:	eb62 0206 	sbc.w	r2, r2, r6
 80073b6:	f04f 0300 	mov.w	r3, #0
 80073ba:	f04f 0400 	mov.w	r4, #0
 80073be:	0194      	lsls	r4, r2, #6
 80073c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80073c4:	018b      	lsls	r3, r1, #6
 80073c6:	1a5b      	subs	r3, r3, r1
 80073c8:	eb64 0402 	sbc.w	r4, r4, r2
 80073cc:	f04f 0100 	mov.w	r1, #0
 80073d0:	f04f 0200 	mov.w	r2, #0
 80073d4:	00e2      	lsls	r2, r4, #3
 80073d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80073da:	00d9      	lsls	r1, r3, #3
 80073dc:	460b      	mov	r3, r1
 80073de:	4614      	mov	r4, r2
 80073e0:	195b      	adds	r3, r3, r5
 80073e2:	eb44 0406 	adc.w	r4, r4, r6
 80073e6:	f04f 0100 	mov.w	r1, #0
 80073ea:	f04f 0200 	mov.w	r2, #0
 80073ee:	02a2      	lsls	r2, r4, #10
 80073f0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80073f4:	0299      	lsls	r1, r3, #10
 80073f6:	460b      	mov	r3, r1
 80073f8:	4614      	mov	r4, r2
 80073fa:	4618      	mov	r0, r3
 80073fc:	4621      	mov	r1, r4
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f04f 0400 	mov.w	r4, #0
 8007404:	461a      	mov	r2, r3
 8007406:	4623      	mov	r3, r4
 8007408:	f7f9 fb28 	bl	8000a5c <__aeabi_uldivmod>
 800740c:	4603      	mov	r3, r0
 800740e:	460c      	mov	r4, r1
 8007410:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007412:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <HAL_RCC_GetSysClockFreq+0x158>)
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	0c1b      	lsrs	r3, r3, #16
 8007418:	f003 0303 	and.w	r3, r3, #3
 800741c:	3301      	adds	r3, #1
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	fbb2 f3f3 	udiv	r3, r2, r3
 800742a:	60bb      	str	r3, [r7, #8]
      break;
 800742c:	e002      	b.n	8007434 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800742e:	4b05      	ldr	r3, [pc, #20]	; (8007444 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007430:	60bb      	str	r3, [r7, #8]
      break;
 8007432:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007434:	68bb      	ldr	r3, [r7, #8]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800743e:	bf00      	nop
 8007440:	40023800 	.word	0x40023800
 8007444:	00f42400 	.word	0x00f42400
 8007448:	017d7840 	.word	0x017d7840

0800744c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007450:	4b03      	ldr	r3, [pc, #12]	; (8007460 <HAL_RCC_GetHCLKFreq+0x14>)
 8007452:	681b      	ldr	r3, [r3, #0]
}
 8007454:	4618      	mov	r0, r3
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	2001002c 	.word	0x2001002c

08007464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007468:	f7ff fff0 	bl	800744c <HAL_RCC_GetHCLKFreq>
 800746c:	4601      	mov	r1, r0
 800746e:	4b05      	ldr	r3, [pc, #20]	; (8007484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	0a9b      	lsrs	r3, r3, #10
 8007474:	f003 0307 	and.w	r3, r3, #7
 8007478:	4a03      	ldr	r2, [pc, #12]	; (8007488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800747a:	5cd3      	ldrb	r3, [r2, r3]
 800747c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007480:	4618      	mov	r0, r3
 8007482:	bd80      	pop	{r7, pc}
 8007484:	40023800 	.word	0x40023800
 8007488:	0800a128 	.word	0x0800a128

0800748c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007490:	f7ff ffdc 	bl	800744c <HAL_RCC_GetHCLKFreq>
 8007494:	4601      	mov	r1, r0
 8007496:	4b05      	ldr	r3, [pc, #20]	; (80074ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	0b5b      	lsrs	r3, r3, #13
 800749c:	f003 0307 	and.w	r3, r3, #7
 80074a0:	4a03      	ldr	r2, [pc, #12]	; (80074b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074a2:	5cd3      	ldrb	r3, [r2, r3]
 80074a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	40023800 	.word	0x40023800
 80074b0:	0800a128 	.word	0x0800a128

080074b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b088      	sub	sp, #32
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80074bc:	2300      	movs	r3, #0
 80074be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80074c0:	2300      	movs	r3, #0
 80074c2:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80074c8:	2300      	movs	r3, #0
 80074ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d012      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80074d8:	4b65      	ldr	r3, [pc, #404]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	4a64      	ldr	r2, [pc, #400]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80074de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80074e2:	6093      	str	r3, [r2, #8]
 80074e4:	4b62      	ldr	r3, [pc, #392]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	4960      	ldr	r1, [pc, #384]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d101      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80074fa:	2301      	movs	r3, #1
 80074fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d017      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800750a:	4b59      	ldr	r3, [pc, #356]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800750c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007510:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007518:	4955      	ldr	r1, [pc, #340]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800751a:	4313      	orrs	r3, r2
 800751c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007528:	d101      	bne.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800752a:	2301      	movs	r3, #1
 800752c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8007536:	2301      	movs	r3, #1
 8007538:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d017      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007546:	4b4a      	ldr	r3, [pc, #296]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800754c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	4946      	ldr	r1, [pc, #280]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007556:	4313      	orrs	r3, r2
 8007558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007564:	d101      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8007566:	2301      	movs	r3, #1
 8007568:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8007572:	2301      	movs	r3, #1
 8007574:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0320 	and.w	r3, r3, #32
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 808b 	beq.w	800769a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007584:	4b3a      	ldr	r3, [pc, #232]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	4a39      	ldr	r2, [pc, #228]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800758a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800758e:	6413      	str	r3, [r2, #64]	; 0x40
 8007590:	4b37      	ldr	r3, [pc, #220]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007598:	60fb      	str	r3, [r7, #12]
 800759a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800759c:	4b35      	ldr	r3, [pc, #212]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a34      	ldr	r2, [pc, #208]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80075a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075a8:	f7fd ff90 	bl	80054cc <HAL_GetTick>
 80075ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80075ae:	e008      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075b0:	f7fd ff8c 	bl	80054cc <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	2b64      	cmp	r3, #100	; 0x64
 80075bc:	d901      	bls.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e2ba      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80075c2:	4b2c      	ldr	r3, [pc, #176]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0f0      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80075ce:	4b28      	ldr	r3, [pc, #160]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d035      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d02e      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075ec:	4b20      	ldr	r3, [pc, #128]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075f6:	4b1e      	ldr	r3, [pc, #120]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fa:	4a1d      	ldr	r2, [pc, #116]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007600:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007602:	4b1b      	ldr	r3, [pc, #108]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007606:	4a1a      	ldr	r2, [pc, #104]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800760c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800760e:	4a18      	ldr	r2, [pc, #96]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007614:	4b16      	ldr	r3, [pc, #88]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b01      	cmp	r3, #1
 800761e:	d114      	bne.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007620:	f7fd ff54 	bl	80054cc <HAL_GetTick>
 8007624:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007626:	e00a      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007628:	f7fd ff50 	bl	80054cc <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	f241 3288 	movw	r2, #5000	; 0x1388
 8007636:	4293      	cmp	r3, r2
 8007638:	d901      	bls.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e27c      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800763e:	4b0c      	ldr	r3, [pc, #48]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0ee      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007656:	d111      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8007658:	4b05      	ldr	r3, [pc, #20]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007664:	4b04      	ldr	r3, [pc, #16]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007666:	400b      	ands	r3, r1
 8007668:	4901      	ldr	r1, [pc, #4]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800766a:	4313      	orrs	r3, r2
 800766c:	608b      	str	r3, [r1, #8]
 800766e:	e00b      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007670:	40023800 	.word	0x40023800
 8007674:	40007000 	.word	0x40007000
 8007678:	0ffffcff 	.word	0x0ffffcff
 800767c:	4ba3      	ldr	r3, [pc, #652]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	4aa2      	ldr	r2, [pc, #648]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007682:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007686:	6093      	str	r3, [r2, #8]
 8007688:	4ba0      	ldr	r3, [pc, #640]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800768a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007694:	499d      	ldr	r1, [pc, #628]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007696:	4313      	orrs	r3, r2
 8007698:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0310 	and.w	r3, r3, #16
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d010      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076a6:	4b99      	ldr	r3, [pc, #612]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80076a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ac:	4a97      	ldr	r2, [pc, #604]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80076ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80076b6:	4b95      	ldr	r3, [pc, #596]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80076b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c0:	4992      	ldr	r1, [pc, #584]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00a      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80076d4:	4b8d      	ldr	r3, [pc, #564]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80076d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076e2:	498a      	ldr	r1, [pc, #552]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80076f6:	4b85      	ldr	r3, [pc, #532]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80076f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007704:	4981      	ldr	r1, [pc, #516]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007706:	4313      	orrs	r3, r2
 8007708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00a      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007718:	4b7c      	ldr	r3, [pc, #496]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800771a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800771e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007726:	4979      	ldr	r1, [pc, #484]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007728:	4313      	orrs	r3, r2
 800772a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800773a:	4b74      	ldr	r3, [pc, #464]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800773c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007740:	f023 0203 	bic.w	r2, r3, #3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007748:	4970      	ldr	r1, [pc, #448]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800774a:	4313      	orrs	r3, r2
 800774c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00a      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800775c:	4b6b      	ldr	r3, [pc, #428]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800775e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007762:	f023 020c 	bic.w	r2, r3, #12
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	4968      	ldr	r1, [pc, #416]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800776c:	4313      	orrs	r3, r2
 800776e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800777e:	4b63      	ldr	r3, [pc, #396]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007784:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778c:	495f      	ldr	r1, [pc, #380]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800778e:	4313      	orrs	r3, r2
 8007790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00a      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80077a0:	4b5a      	ldr	r3, [pc, #360]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80077a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ae:	4957      	ldr	r1, [pc, #348]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00a      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80077c2:	4b52      	ldr	r3, [pc, #328]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80077c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077d0:	494e      	ldr	r1, [pc, #312]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00a      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80077e4:	4b49      	ldr	r3, [pc, #292]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80077e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f2:	4946      	ldr	r1, [pc, #280]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007806:	4b41      	ldr	r3, [pc, #260]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800780c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007814:	493d      	ldr	r1, [pc, #244]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007816:	4313      	orrs	r3, r2
 8007818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00a      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007828:	4b38      	ldr	r3, [pc, #224]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800782a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800782e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007836:	4935      	ldr	r1, [pc, #212]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007838:	4313      	orrs	r3, r2
 800783a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d011      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800784a:	4b30      	ldr	r3, [pc, #192]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800784c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007850:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007858:	492c      	ldr	r1, [pc, #176]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800785a:	4313      	orrs	r3, r2
 800785c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007868:	d101      	bne.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800786a:	2301      	movs	r3, #1
 800786c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00a      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800787a:	4b24      	ldr	r3, [pc, #144]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800787c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007880:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007888:	4920      	ldr	r1, [pc, #128]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800788a:	4313      	orrs	r3, r2
 800788c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00a      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800789c:	4b1b      	ldr	r3, [pc, #108]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800789e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078aa:	4918      	ldr	r1, [pc, #96]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00a      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80078be:	4b13      	ldr	r3, [pc, #76]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80078c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078cc:	490f      	ldr	r1, [pc, #60]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d005      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078e2:	f040 809c 	bne.w	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80078e6:	4b09      	ldr	r3, [pc, #36]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a08      	ldr	r2, [pc, #32]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80078ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078f2:	f7fd fdeb 	bl	80054cc <HAL_GetTick>
 80078f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078f8:	e00a      	b.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80078fa:	f7fd fde7 	bl	80054cc <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	2b64      	cmp	r3, #100	; 0x64
 8007906:	d903      	bls.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e115      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800790c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007910:	4b8b      	ldr	r3, [pc, #556]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1ee      	bne.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d017      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d113      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007930:	4b83      	ldr	r3, [pc, #524]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007936:	0e1b      	lsrs	r3, r3, #24
 8007938:	f003 030f 	and.w	r3, r3, #15
 800793c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	019a      	lsls	r2, r3, #6
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	061b      	lsls	r3, r3, #24
 8007948:	431a      	orrs	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	071b      	lsls	r3, r3, #28
 8007950:	497b      	ldr	r1, [pc, #492]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007952:	4313      	orrs	r3, r2
 8007954:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d004      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007968:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800796c:	d00a      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007976:	2b00      	cmp	r3, #0
 8007978:	d024      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007982:	d11f      	bne.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007984:	4b6e      	ldr	r3, [pc, #440]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800798a:	0f1b      	lsrs	r3, r3, #28
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	019a      	lsls	r2, r3, #6
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	061b      	lsls	r3, r3, #24
 800799e:	431a      	orrs	r2, r3
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	071b      	lsls	r3, r3, #28
 80079a4:	4966      	ldr	r1, [pc, #408]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80079ac:	4b64      	ldr	r3, [pc, #400]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80079ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079b2:	f023 021f 	bic.w	r2, r3, #31
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	4960      	ldr	r1, [pc, #384]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00d      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	019a      	lsls	r2, r3, #6
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	061b      	lsls	r3, r3, #24
 80079dc:	431a      	orrs	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	071b      	lsls	r3, r3, #28
 80079e4:	4956      	ldr	r1, [pc, #344]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80079ec:	4b54      	ldr	r3, [pc, #336]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a53      	ldr	r2, [pc, #332]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80079f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f8:	f7fd fd68 	bl	80054cc <HAL_GetTick>
 80079fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079fe:	e008      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007a00:	f7fd fd64 	bl	80054cc <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b64      	cmp	r3, #100	; 0x64
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e092      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a12:	4b4b      	ldr	r3, [pc, #300]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0f0      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	f040 8088 	bne.w	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007a26:	4b46      	ldr	r3, [pc, #280]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a45      	ldr	r2, [pc, #276]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a32:	f7fd fd4b 	bl	80054cc <HAL_GetTick>
 8007a36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a38:	e008      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007a3a:	f7fd fd47 	bl	80054cc <HAL_GetTick>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	2b64      	cmp	r3, #100	; 0x64
 8007a46:	d901      	bls.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e075      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a4c:	4b3c      	ldr	r3, [pc, #240]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a58:	d0ef      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d009      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d024      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d120      	bne.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a82:	4b2f      	ldr	r3, [pc, #188]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a88:	0c1b      	lsrs	r3, r3, #16
 8007a8a:	f003 0303 	and.w	r3, r3, #3
 8007a8e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	019a      	lsls	r2, r3, #6
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	041b      	lsls	r3, r3, #16
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	061b      	lsls	r3, r3, #24
 8007aa2:	4927      	ldr	r1, [pc, #156]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007aaa:	4b25      	ldr	r3, [pc, #148]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	021b      	lsls	r3, r3, #8
 8007abc:	4920      	ldr	r1, [pc, #128]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d018      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ad8:	d113      	bne.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007ada:	4b19      	ldr	r3, [pc, #100]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae0:	0e1b      	lsrs	r3, r3, #24
 8007ae2:	f003 030f 	and.w	r3, r3, #15
 8007ae6:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	019a      	lsls	r2, r3, #6
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	041b      	lsls	r3, r3, #16
 8007af4:	431a      	orrs	r2, r3
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	061b      	lsls	r3, r3, #24
 8007afa:	4911      	ldr	r1, [pc, #68]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007afc:	4313      	orrs	r3, r2
 8007afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007b02:	4b0f      	ldr	r3, [pc, #60]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a0e      	ldr	r2, [pc, #56]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b0e:	f7fd fcdd 	bl	80054cc <HAL_GetTick>
 8007b12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b14:	e008      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007b16:	f7fd fcd9 	bl	80054cc <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	2b64      	cmp	r3, #100	; 0x64
 8007b22:	d901      	bls.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e007      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b28:	4b05      	ldr	r3, [pc, #20]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b34:	d1ef      	bne.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3720      	adds	r7, #32
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	40023800 	.word	0x40023800

08007b44 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e01c      	b.n	8007b90 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	795b      	ldrb	r3, [r3, #5]
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d105      	bne.n	8007b6c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7fb fef6 	bl	8003958 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f042 0204 	orr.w	r2, r2, #4
 8007b80:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e084      	b.n	8007cb4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d106      	bne.n	8007bca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7fb fee7 	bl	8003998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2202      	movs	r2, #2
 8007bce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007be0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bea:	d902      	bls.n	8007bf2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007bec:	2300      	movs	r3, #0
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	e002      	b.n	8007bf8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bf6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007c00:	d007      	beq.n	8007c12 <HAL_SPI_Init+0x7a>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c0a:	d002      	beq.n	8007c12 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10b      	bne.n	8007c32 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c22:	d903      	bls.n	8007c2c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	631a      	str	r2, [r3, #48]	; 0x30
 8007c2a:	e002      	b.n	8007c32 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	431a      	orrs	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	431a      	orrs	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c50:	431a      	orrs	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	431a      	orrs	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	ea42 0103 	orr.w	r1, r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	0c1b      	lsrs	r3, r3, #16
 8007c72:	f003 0204 	and.w	r2, r3, #4
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c80:	431a      	orrs	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	ea42 0103 	orr.w	r1, r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	69da      	ldr	r2, [r3, #28]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ca2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
inline void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b088      	sub	sp, #32
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	099b      	lsrs	r3, r3, #6
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10f      	bne.n	8007d00 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	099b      	lsrs	r3, r3, #6
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d004      	beq.n	8007d00 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	4798      	blx	r3
    return;
 8007cfe:	e0d8      	b.n	8007eb2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	085b      	lsrs	r3, r3, #1
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00a      	beq.n	8007d22 <HAL_SPI_IRQHandler+0x66>
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	09db      	lsrs	r3, r3, #7
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d004      	beq.n	8007d22 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	4798      	blx	r3
    return;
 8007d20:	e0c7      	b.n	8007eb2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	095b      	lsrs	r3, r3, #5
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10c      	bne.n	8007d48 <HAL_SPI_IRQHandler+0x8c>
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	099b      	lsrs	r3, r3, #6
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d106      	bne.n	8007d48 <HAL_SPI_IRQHandler+0x8c>
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	0a1b      	lsrs	r3, r3, #8
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f000 80b5 	beq.w	8007eb2 <HAL_SPI_IRQHandler+0x1f6>
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	095b      	lsrs	r3, r3, #5
 8007d4c:	f003 0301 	and.w	r3, r3, #1
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 80ae 	beq.w	8007eb2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	099b      	lsrs	r3, r3, #6
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d023      	beq.n	8007daa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d011      	beq.n	8007d92 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d72:	f043 0204 	orr.w	r2, r3, #4
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	617b      	str	r3, [r7, #20]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	617b      	str	r3, [r7, #20]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	617b      	str	r3, [r7, #20]
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	e00b      	b.n	8007daa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d92:	2300      	movs	r3, #0
 8007d94:	613b      	str	r3, [r7, #16]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	613b      	str	r3, [r7, #16]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	613b      	str	r3, [r7, #16]
 8007da6:	693b      	ldr	r3, [r7, #16]
        return;
 8007da8:	e083      	b.n	8007eb2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	095b      	lsrs	r3, r3, #5
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d014      	beq.n	8007de0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dba:	f043 0201 	orr.w	r2, r3, #1
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	0a1b      	lsrs	r3, r3, #8
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00c      	beq.n	8007e06 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df0:	f043 0208 	orr.w	r2, r3, #8
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007df8:	2300      	movs	r3, #0
 8007dfa:	60bb      	str	r3, [r7, #8]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	60bb      	str	r3, [r7, #8]
 8007e04:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d050      	beq.n	8007eb0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e1c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	f003 0302 	and.w	r3, r3, #2
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d104      	bne.n	8007e3a <HAL_SPI_IRQHandler+0x17e>
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d034      	beq.n	8007ea4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f022 0203 	bic.w	r2, r2, #3
 8007e48:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d011      	beq.n	8007e76 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e56:	4a18      	ldr	r2, [pc, #96]	; (8007eb8 <HAL_SPI_IRQHandler+0x1fc>)
 8007e58:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fe f9e4 	bl	800622c <HAL_DMA_Abort_IT>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d005      	beq.n	8007e76 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d016      	beq.n	8007eac <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e82:	4a0d      	ldr	r2, [pc, #52]	; (8007eb8 <HAL_SPI_IRQHandler+0x1fc>)
 8007e84:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fe f9ce 	bl	800622c <HAL_DMA_Abort_IT>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007ea2:	e003      	b.n	8007eac <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f809 	bl	8007ebc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007eaa:	e000      	b.n	8007eae <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007eac:	bf00      	nop
    return;
 8007eae:	bf00      	nop
 8007eb0:	bf00      	nop
  }
}
 8007eb2:	3720      	adds	r7, #32
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	08007ed1 	.word	0x08007ed1

08007ebc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007edc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f7ff ffe5 	bl	8007ebc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ef2:	bf00      	nop
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e01d      	b.n	8007f48 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d106      	bne.n	8007f26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7fb fe1d 	bl	8003b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2202      	movs	r2, #2
 8007f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3304      	adds	r3, #4
 8007f36:	4619      	mov	r1, r3
 8007f38:	4610      	mov	r0, r2
 8007f3a:	f000 fbe7 	bl	800870c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689a      	ldr	r2, [r3, #8]
 8007f66:	4b0e      	ldr	r3, [pc, #56]	; (8007fa0 <HAL_TIM_Base_Start+0x50>)
 8007f68:	4013      	ands	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2b06      	cmp	r3, #6
 8007f70:	d00b      	beq.n	8007f8a <HAL_TIM_Base_Start+0x3a>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f78:	d007      	beq.n	8007f8a <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f042 0201 	orr.w	r2, r2, #1
 8007f88:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	00010007 	.word	0x00010007

08007fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68da      	ldr	r2, [r3, #12]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f042 0201 	orr.w	r2, r2, #1
 8007fba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689a      	ldr	r2, [r3, #8]
 8007fc2:	4b0c      	ldr	r3, [pc, #48]	; (8007ff4 <HAL_TIM_Base_Start_IT+0x50>)
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2b06      	cmp	r3, #6
 8007fcc:	d00b      	beq.n	8007fe6 <HAL_TIM_Base_Start_IT+0x42>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fd4:	d007      	beq.n	8007fe6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f042 0201 	orr.w	r2, r2, #1
 8007fe4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	00010007 	.word	0x00010007

08007ff8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d101      	bne.n	800800a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e01d      	b.n	8008046 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d106      	bne.n	8008024 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7fb fd6a 	bl	8003af8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3304      	adds	r3, #4
 8008034:	4619      	mov	r1, r3
 8008036:	4610      	mov	r0, r2
 8008038:	f000 fb68 	bl	800870c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e02d      	b.n	80080be <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d106      	bne.n	800807c <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f825 	bl	80080c6 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3304      	adds	r3, #4
 800808c:	4619      	mov	r1, r3
 800808e:	4610      	mov	r0, r2
 8008090:	f000 fb3c 	bl	800870c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f022 0208 	bic.w	r2, r2, #8
 80080a2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6819      	ldr	r1, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80080ce:	bf00      	nop
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
inline void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d122      	bne.n	8008136 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d11b      	bne.n	8008136 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f06f 0202 	mvn.w	r2, #2
 8008106:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	f003 0303 	and.w	r3, r3, #3
 8008118:	2b00      	cmp	r3, #0
 800811a:	d003      	beq.n	8008124 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fad7 	bl	80086d0 <HAL_TIM_IC_CaptureCallback>
 8008122:	e005      	b.n	8008130 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fac9 	bl	80086bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fada 	bl	80086e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b04      	cmp	r3, #4
 8008142:	d122      	bne.n	800818a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f003 0304 	and.w	r3, r3, #4
 800814e:	2b04      	cmp	r3, #4
 8008150:	d11b      	bne.n	800818a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f06f 0204 	mvn.w	r2, #4
 800815a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2202      	movs	r2, #2
 8008160:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 faad 	bl	80086d0 <HAL_TIM_IC_CaptureCallback>
 8008176:	e005      	b.n	8008184 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fa9f 	bl	80086bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fab0 	bl	80086e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	f003 0308 	and.w	r3, r3, #8
 8008194:	2b08      	cmp	r3, #8
 8008196:	d122      	bne.n	80081de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f003 0308 	and.w	r3, r3, #8
 80081a2:	2b08      	cmp	r3, #8
 80081a4:	d11b      	bne.n	80081de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f06f 0208 	mvn.w	r2, #8
 80081ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2204      	movs	r2, #4
 80081b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	69db      	ldr	r3, [r3, #28]
 80081bc:	f003 0303 	and.w	r3, r3, #3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fa83 	bl	80086d0 <HAL_TIM_IC_CaptureCallback>
 80081ca:	e005      	b.n	80081d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fa75 	bl	80086bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fa86 	bl	80086e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	f003 0310 	and.w	r3, r3, #16
 80081e8:	2b10      	cmp	r3, #16
 80081ea:	d122      	bne.n	8008232 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	f003 0310 	and.w	r3, r3, #16
 80081f6:	2b10      	cmp	r3, #16
 80081f8:	d11b      	bne.n	8008232 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f06f 0210 	mvn.w	r2, #16
 8008202:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2208      	movs	r2, #8
 8008208:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fa59 	bl	80086d0 <HAL_TIM_IC_CaptureCallback>
 800821e:	e005      	b.n	800822c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fa4b 	bl	80086bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fa5c 	bl	80086e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	2b01      	cmp	r3, #1
 800823e:	d10e      	bne.n	800825e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b01      	cmp	r3, #1
 800824c:	d107      	bne.n	800825e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f06f 0201 	mvn.w	r2, #1
 8008256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7fa fc45 	bl	8002ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008268:	2b80      	cmp	r3, #128	; 0x80
 800826a:	d10e      	bne.n	800828a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008276:	2b80      	cmp	r3, #128	; 0x80
 8008278:	d107      	bne.n	800828a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 ff1f 	bl	80090c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008298:	d10e      	bne.n	80082b8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a4:	2b80      	cmp	r3, #128	; 0x80
 80082a6:	d107      	bne.n	80082b8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80082b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 ff12 	bl	80090dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c2:	2b40      	cmp	r3, #64	; 0x40
 80082c4:	d10e      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d0:	2b40      	cmp	r3, #64	; 0x40
 80082d2:	d107      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fa0a 	bl	80086f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b20      	cmp	r3, #32
 80082f0:	d10e      	bne.n	8008310 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f003 0320 	and.w	r3, r3, #32
 80082fc:	2b20      	cmp	r3, #32
 80082fe:	d107      	bne.n	8008310 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f06f 0220 	mvn.w	r2, #32
 8008308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fed2 	bl	80090b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800832a:	2b01      	cmp	r3, #1
 800832c:	d101      	bne.n	8008332 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800832e:	2302      	movs	r3, #2
 8008330:	e105      	b.n	800853e <HAL_TIM_PWM_ConfigChannel+0x226>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2202      	movs	r2, #2
 800833e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b14      	cmp	r3, #20
 8008346:	f200 80f0 	bhi.w	800852a <HAL_TIM_PWM_ConfigChannel+0x212>
 800834a:	a201      	add	r2, pc, #4	; (adr r2, 8008350 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800834c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008350:	080083a5 	.word	0x080083a5
 8008354:	0800852b 	.word	0x0800852b
 8008358:	0800852b 	.word	0x0800852b
 800835c:	0800852b 	.word	0x0800852b
 8008360:	080083e5 	.word	0x080083e5
 8008364:	0800852b 	.word	0x0800852b
 8008368:	0800852b 	.word	0x0800852b
 800836c:	0800852b 	.word	0x0800852b
 8008370:	08008427 	.word	0x08008427
 8008374:	0800852b 	.word	0x0800852b
 8008378:	0800852b 	.word	0x0800852b
 800837c:	0800852b 	.word	0x0800852b
 8008380:	08008467 	.word	0x08008467
 8008384:	0800852b 	.word	0x0800852b
 8008388:	0800852b 	.word	0x0800852b
 800838c:	0800852b 	.word	0x0800852b
 8008390:	080084a9 	.word	0x080084a9
 8008394:	0800852b 	.word	0x0800852b
 8008398:	0800852b 	.word	0x0800852b
 800839c:	0800852b 	.word	0x0800852b
 80083a0:	080084e9 	.word	0x080084e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68b9      	ldr	r1, [r7, #8]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 fa4e 	bl	800884c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0208 	orr.w	r2, r2, #8
 80083be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	699a      	ldr	r2, [r3, #24]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 0204 	bic.w	r2, r2, #4
 80083ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6999      	ldr	r1, [r3, #24]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	691a      	ldr	r2, [r3, #16]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	430a      	orrs	r2, r1
 80083e0:	619a      	str	r2, [r3, #24]
      break;
 80083e2:	e0a3      	b.n	800852c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68b9      	ldr	r1, [r7, #8]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 faa0 	bl	8008930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	699a      	ldr	r2, [r3, #24]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	699a      	ldr	r2, [r3, #24]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800840e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6999      	ldr	r1, [r3, #24]
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	021a      	lsls	r2, r3, #8
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	430a      	orrs	r2, r1
 8008422:	619a      	str	r2, [r3, #24]
      break;
 8008424:	e082      	b.n	800852c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68b9      	ldr	r1, [r7, #8]
 800842c:	4618      	mov	r0, r3
 800842e:	f000 faf7 	bl	8008a20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69da      	ldr	r2, [r3, #28]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f042 0208 	orr.w	r2, r2, #8
 8008440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69da      	ldr	r2, [r3, #28]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 0204 	bic.w	r2, r2, #4
 8008450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69d9      	ldr	r1, [r3, #28]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	691a      	ldr	r2, [r3, #16]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	61da      	str	r2, [r3, #28]
      break;
 8008464:	e062      	b.n	800852c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68b9      	ldr	r1, [r7, #8]
 800846c:	4618      	mov	r0, r3
 800846e:	f000 fb4d 	bl	8008b0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69da      	ldr	r2, [r3, #28]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	69da      	ldr	r2, [r3, #28]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	69d9      	ldr	r1, [r3, #28]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	021a      	lsls	r2, r3, #8
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	61da      	str	r2, [r3, #28]
      break;
 80084a6:	e041      	b.n	800852c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68b9      	ldr	r1, [r7, #8]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 fb84 	bl	8008bbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f042 0208 	orr.w	r2, r2, #8
 80084c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f022 0204 	bic.w	r2, r2, #4
 80084d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	691a      	ldr	r2, [r3, #16]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80084e6:	e021      	b.n	800852c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fbb6 	bl	8008c60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008502:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008512:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	021a      	lsls	r2, r3, #8
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008528:	e000      	b.n	800852c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800852a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop

08008548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008558:	2b01      	cmp	r3, #1
 800855a:	d101      	bne.n	8008560 <HAL_TIM_ConfigClockSource+0x18>
 800855c:	2302      	movs	r3, #2
 800855e:	e0a6      	b.n	80086ae <HAL_TIM_ConfigClockSource+0x166>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2202      	movs	r2, #2
 800856c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	4b4f      	ldr	r3, [pc, #316]	; (80086b8 <HAL_TIM_ConfigClockSource+0x170>)
 800857c:	4013      	ands	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008586:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b40      	cmp	r3, #64	; 0x40
 8008596:	d067      	beq.n	8008668 <HAL_TIM_ConfigClockSource+0x120>
 8008598:	2b40      	cmp	r3, #64	; 0x40
 800859a:	d80b      	bhi.n	80085b4 <HAL_TIM_ConfigClockSource+0x6c>
 800859c:	2b10      	cmp	r3, #16
 800859e:	d073      	beq.n	8008688 <HAL_TIM_ConfigClockSource+0x140>
 80085a0:	2b10      	cmp	r3, #16
 80085a2:	d802      	bhi.n	80085aa <HAL_TIM_ConfigClockSource+0x62>
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d06f      	beq.n	8008688 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80085a8:	e078      	b.n	800869c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80085aa:	2b20      	cmp	r3, #32
 80085ac:	d06c      	beq.n	8008688 <HAL_TIM_ConfigClockSource+0x140>
 80085ae:	2b30      	cmp	r3, #48	; 0x30
 80085b0:	d06a      	beq.n	8008688 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80085b2:	e073      	b.n	800869c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80085b4:	2b70      	cmp	r3, #112	; 0x70
 80085b6:	d00d      	beq.n	80085d4 <HAL_TIM_ConfigClockSource+0x8c>
 80085b8:	2b70      	cmp	r3, #112	; 0x70
 80085ba:	d804      	bhi.n	80085c6 <HAL_TIM_ConfigClockSource+0x7e>
 80085bc:	2b50      	cmp	r3, #80	; 0x50
 80085be:	d033      	beq.n	8008628 <HAL_TIM_ConfigClockSource+0xe0>
 80085c0:	2b60      	cmp	r3, #96	; 0x60
 80085c2:	d041      	beq.n	8008648 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80085c4:	e06a      	b.n	800869c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80085c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ca:	d066      	beq.n	800869a <HAL_TIM_ConfigClockSource+0x152>
 80085cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d0:	d017      	beq.n	8008602 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80085d2:	e063      	b.n	800869c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6818      	ldr	r0, [r3, #0]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	6899      	ldr	r1, [r3, #8]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	f000 fc0a 	bl	8008dfc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	609a      	str	r2, [r3, #8]
      break;
 8008600:	e04c      	b.n	800869c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	6899      	ldr	r1, [r3, #8]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	f000 fbf3 	bl	8008dfc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	689a      	ldr	r2, [r3, #8]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008624:	609a      	str	r2, [r3, #8]
      break;
 8008626:	e039      	b.n	800869c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6818      	ldr	r0, [r3, #0]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	6859      	ldr	r1, [r3, #4]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	461a      	mov	r2, r3
 8008636:	f000 fb67 	bl	8008d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2150      	movs	r1, #80	; 0x50
 8008640:	4618      	mov	r0, r3
 8008642:	f000 fbc0 	bl	8008dc6 <TIM_ITRx_SetConfig>
      break;
 8008646:	e029      	b.n	800869c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6818      	ldr	r0, [r3, #0]
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	6859      	ldr	r1, [r3, #4]
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	461a      	mov	r2, r3
 8008656:	f000 fb86 	bl	8008d66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2160      	movs	r1, #96	; 0x60
 8008660:	4618      	mov	r0, r3
 8008662:	f000 fbb0 	bl	8008dc6 <TIM_ITRx_SetConfig>
      break;
 8008666:	e019      	b.n	800869c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6818      	ldr	r0, [r3, #0]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	6859      	ldr	r1, [r3, #4]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	461a      	mov	r2, r3
 8008676:	f000 fb47 	bl	8008d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2140      	movs	r1, #64	; 0x40
 8008680:	4618      	mov	r0, r3
 8008682:	f000 fba0 	bl	8008dc6 <TIM_ITRx_SetConfig>
      break;
 8008686:	e009      	b.n	800869c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4619      	mov	r1, r3
 8008692:	4610      	mov	r0, r2
 8008694:	f000 fb97 	bl	8008dc6 <TIM_ITRx_SetConfig>
      break;
 8008698:	e000      	b.n	800869c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800869a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	fffeff88 	.word	0xfffeff88

080086bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a40      	ldr	r2, [pc, #256]	; (8008820 <TIM_Base_SetConfig+0x114>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d013      	beq.n	800874c <TIM_Base_SetConfig+0x40>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800872a:	d00f      	beq.n	800874c <TIM_Base_SetConfig+0x40>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a3d      	ldr	r2, [pc, #244]	; (8008824 <TIM_Base_SetConfig+0x118>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00b      	beq.n	800874c <TIM_Base_SetConfig+0x40>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a3c      	ldr	r2, [pc, #240]	; (8008828 <TIM_Base_SetConfig+0x11c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d007      	beq.n	800874c <TIM_Base_SetConfig+0x40>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a3b      	ldr	r2, [pc, #236]	; (800882c <TIM_Base_SetConfig+0x120>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d003      	beq.n	800874c <TIM_Base_SetConfig+0x40>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a3a      	ldr	r2, [pc, #232]	; (8008830 <TIM_Base_SetConfig+0x124>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d108      	bne.n	800875e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	4313      	orrs	r3, r2
 800875c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a2f      	ldr	r2, [pc, #188]	; (8008820 <TIM_Base_SetConfig+0x114>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d02b      	beq.n	80087be <TIM_Base_SetConfig+0xb2>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800876c:	d027      	beq.n	80087be <TIM_Base_SetConfig+0xb2>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a2c      	ldr	r2, [pc, #176]	; (8008824 <TIM_Base_SetConfig+0x118>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d023      	beq.n	80087be <TIM_Base_SetConfig+0xb2>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a2b      	ldr	r2, [pc, #172]	; (8008828 <TIM_Base_SetConfig+0x11c>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d01f      	beq.n	80087be <TIM_Base_SetConfig+0xb2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a2a      	ldr	r2, [pc, #168]	; (800882c <TIM_Base_SetConfig+0x120>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d01b      	beq.n	80087be <TIM_Base_SetConfig+0xb2>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a29      	ldr	r2, [pc, #164]	; (8008830 <TIM_Base_SetConfig+0x124>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d017      	beq.n	80087be <TIM_Base_SetConfig+0xb2>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a28      	ldr	r2, [pc, #160]	; (8008834 <TIM_Base_SetConfig+0x128>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d013      	beq.n	80087be <TIM_Base_SetConfig+0xb2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a27      	ldr	r2, [pc, #156]	; (8008838 <TIM_Base_SetConfig+0x12c>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d00f      	beq.n	80087be <TIM_Base_SetConfig+0xb2>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a26      	ldr	r2, [pc, #152]	; (800883c <TIM_Base_SetConfig+0x130>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d00b      	beq.n	80087be <TIM_Base_SetConfig+0xb2>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a25      	ldr	r2, [pc, #148]	; (8008840 <TIM_Base_SetConfig+0x134>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d007      	beq.n	80087be <TIM_Base_SetConfig+0xb2>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a24      	ldr	r2, [pc, #144]	; (8008844 <TIM_Base_SetConfig+0x138>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d003      	beq.n	80087be <TIM_Base_SetConfig+0xb2>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a23      	ldr	r2, [pc, #140]	; (8008848 <TIM_Base_SetConfig+0x13c>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d108      	bne.n	80087d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	4313      	orrs	r3, r2
 80087dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	689a      	ldr	r2, [r3, #8]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a0a      	ldr	r2, [pc, #40]	; (8008820 <TIM_Base_SetConfig+0x114>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d003      	beq.n	8008804 <TIM_Base_SetConfig+0xf8>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a0c      	ldr	r2, [pc, #48]	; (8008830 <TIM_Base_SetConfig+0x124>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d103      	bne.n	800880c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	691a      	ldr	r2, [r3, #16]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	615a      	str	r2, [r3, #20]
}
 8008812:	bf00      	nop
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	40010000 	.word	0x40010000
 8008824:	40000400 	.word	0x40000400
 8008828:	40000800 	.word	0x40000800
 800882c:	40000c00 	.word	0x40000c00
 8008830:	40010400 	.word	0x40010400
 8008834:	40014000 	.word	0x40014000
 8008838:	40014400 	.word	0x40014400
 800883c:	40014800 	.word	0x40014800
 8008840:	40001800 	.word	0x40001800
 8008844:	40001c00 	.word	0x40001c00
 8008848:	40002000 	.word	0x40002000

0800884c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	f023 0201 	bic.w	r2, r3, #1
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	4b2b      	ldr	r3, [pc, #172]	; (8008924 <TIM_OC1_SetConfig+0xd8>)
 8008878:	4013      	ands	r3, r2
 800887a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f023 0303 	bic.w	r3, r3, #3
 8008882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	4313      	orrs	r3, r2
 800888c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f023 0302 	bic.w	r3, r3, #2
 8008894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	4313      	orrs	r3, r2
 800889e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a21      	ldr	r2, [pc, #132]	; (8008928 <TIM_OC1_SetConfig+0xdc>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d003      	beq.n	80088b0 <TIM_OC1_SetConfig+0x64>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a20      	ldr	r2, [pc, #128]	; (800892c <TIM_OC1_SetConfig+0xe0>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d10c      	bne.n	80088ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	f023 0308 	bic.w	r3, r3, #8
 80088b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	4313      	orrs	r3, r2
 80088c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f023 0304 	bic.w	r3, r3, #4
 80088c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a16      	ldr	r2, [pc, #88]	; (8008928 <TIM_OC1_SetConfig+0xdc>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d003      	beq.n	80088da <TIM_OC1_SetConfig+0x8e>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a15      	ldr	r2, [pc, #84]	; (800892c <TIM_OC1_SetConfig+0xe0>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d111      	bne.n	80088fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	621a      	str	r2, [r3, #32]
}
 8008918:	bf00      	nop
 800891a:	371c      	adds	r7, #28
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr
 8008924:	fffeff8f 	.word	0xfffeff8f
 8008928:	40010000 	.word	0x40010000
 800892c:	40010400 	.word	0x40010400

08008930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008930:	b480      	push	{r7}
 8008932:	b087      	sub	sp, #28
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	f023 0210 	bic.w	r2, r3, #16
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	4b2e      	ldr	r3, [pc, #184]	; (8008a14 <TIM_OC2_SetConfig+0xe4>)
 800895c:	4013      	ands	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	021b      	lsls	r3, r3, #8
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	4313      	orrs	r3, r2
 8008972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f023 0320 	bic.w	r3, r3, #32
 800897a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	011b      	lsls	r3, r3, #4
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	4313      	orrs	r3, r2
 8008986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a23      	ldr	r2, [pc, #140]	; (8008a18 <TIM_OC2_SetConfig+0xe8>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d003      	beq.n	8008998 <TIM_OC2_SetConfig+0x68>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a22      	ldr	r2, [pc, #136]	; (8008a1c <TIM_OC2_SetConfig+0xec>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d10d      	bne.n	80089b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800899e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	011b      	lsls	r3, r3, #4
 80089a6:	697a      	ldr	r2, [r7, #20]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a18      	ldr	r2, [pc, #96]	; (8008a18 <TIM_OC2_SetConfig+0xe8>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d003      	beq.n	80089c4 <TIM_OC2_SetConfig+0x94>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a17      	ldr	r2, [pc, #92]	; (8008a1c <TIM_OC2_SetConfig+0xec>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d113      	bne.n	80089ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	4313      	orrs	r3, r2
 80089de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	621a      	str	r2, [r3, #32]
}
 8008a06:	bf00      	nop
 8008a08:	371c      	adds	r7, #28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	feff8fff 	.word	0xfeff8fff
 8008a18:	40010000 	.word	0x40010000
 8008a1c:	40010400 	.word	0x40010400

08008a20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	69db      	ldr	r3, [r3, #28]
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	4b2d      	ldr	r3, [pc, #180]	; (8008b00 <TIM_OC3_SetConfig+0xe0>)
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f023 0303 	bic.w	r3, r3, #3
 8008a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	021b      	lsls	r3, r3, #8
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a22      	ldr	r2, [pc, #136]	; (8008b04 <TIM_OC3_SetConfig+0xe4>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d003      	beq.n	8008a86 <TIM_OC3_SetConfig+0x66>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a21      	ldr	r2, [pc, #132]	; (8008b08 <TIM_OC3_SetConfig+0xe8>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d10d      	bne.n	8008aa2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	021b      	lsls	r3, r3, #8
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a17      	ldr	r2, [pc, #92]	; (8008b04 <TIM_OC3_SetConfig+0xe4>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d003      	beq.n	8008ab2 <TIM_OC3_SetConfig+0x92>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a16      	ldr	r2, [pc, #88]	; (8008b08 <TIM_OC3_SetConfig+0xe8>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d113      	bne.n	8008ada <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	011b      	lsls	r3, r3, #4
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	011b      	lsls	r3, r3, #4
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	621a      	str	r2, [r3, #32]
}
 8008af4:	bf00      	nop
 8008af6:	371c      	adds	r7, #28
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	fffeff8f 	.word	0xfffeff8f
 8008b04:	40010000 	.word	0x40010000
 8008b08:	40010400 	.word	0x40010400

08008b0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4b1e      	ldr	r3, [pc, #120]	; (8008bb0 <TIM_OC4_SetConfig+0xa4>)
 8008b38:	4013      	ands	r3, r2
 8008b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	021b      	lsls	r3, r3, #8
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	031b      	lsls	r3, r3, #12
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a13      	ldr	r2, [pc, #76]	; (8008bb4 <TIM_OC4_SetConfig+0xa8>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d003      	beq.n	8008b74 <TIM_OC4_SetConfig+0x68>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a12      	ldr	r2, [pc, #72]	; (8008bb8 <TIM_OC4_SetConfig+0xac>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d109      	bne.n	8008b88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	019b      	lsls	r3, r3, #6
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	621a      	str	r2, [r3, #32]
}
 8008ba2:	bf00      	nop
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	feff8fff 	.word	0xfeff8fff
 8008bb4:	40010000 	.word	0x40010000
 8008bb8:	40010400 	.word	0x40010400

08008bbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b087      	sub	sp, #28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	4b1b      	ldr	r3, [pc, #108]	; (8008c54 <TIM_OC5_SetConfig+0x98>)
 8008be8:	4013      	ands	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008bfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	041b      	lsls	r3, r3, #16
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a12      	ldr	r2, [pc, #72]	; (8008c58 <TIM_OC5_SetConfig+0x9c>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d003      	beq.n	8008c1a <TIM_OC5_SetConfig+0x5e>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a11      	ldr	r2, [pc, #68]	; (8008c5c <TIM_OC5_SetConfig+0xa0>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d109      	bne.n	8008c2e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	021b      	lsls	r3, r3, #8
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	697a      	ldr	r2, [r7, #20]
 8008c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	685a      	ldr	r2, [r3, #4]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	621a      	str	r2, [r3, #32]
}
 8008c48:	bf00      	nop
 8008c4a:	371c      	adds	r7, #28
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	fffeff8f 	.word	0xfffeff8f
 8008c58:	40010000 	.word	0x40010000
 8008c5c:	40010400 	.word	0x40010400

08008c60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	4b1c      	ldr	r3, [pc, #112]	; (8008cfc <TIM_OC6_SetConfig+0x9c>)
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	021b      	lsls	r3, r3, #8
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	051b      	lsls	r3, r3, #20
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a13      	ldr	r2, [pc, #76]	; (8008d00 <TIM_OC6_SetConfig+0xa0>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d003      	beq.n	8008cc0 <TIM_OC6_SetConfig+0x60>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a12      	ldr	r2, [pc, #72]	; (8008d04 <TIM_OC6_SetConfig+0xa4>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d109      	bne.n	8008cd4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	029b      	lsls	r3, r3, #10
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	685a      	ldr	r2, [r3, #4]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	621a      	str	r2, [r3, #32]
}
 8008cee:	bf00      	nop
 8008cf0:	371c      	adds	r7, #28
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	feff8fff 	.word	0xfeff8fff
 8008d00:	40010000 	.word	0x40010000
 8008d04:	40010400 	.word	0x40010400

08008d08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6a1b      	ldr	r3, [r3, #32]
 8008d18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	f023 0201 	bic.w	r2, r3, #1
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	011b      	lsls	r3, r3, #4
 8008d38:	693a      	ldr	r2, [r7, #16]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f023 030a 	bic.w	r3, r3, #10
 8008d44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	621a      	str	r2, [r3, #32]
}
 8008d5a:	bf00      	nop
 8008d5c:	371c      	adds	r7, #28
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b087      	sub	sp, #28
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	60f8      	str	r0, [r7, #12]
 8008d6e:	60b9      	str	r1, [r7, #8]
 8008d70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	f023 0210 	bic.w	r2, r3, #16
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6a1b      	ldr	r3, [r3, #32]
 8008d88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	031b      	lsls	r3, r3, #12
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008da2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	011b      	lsls	r3, r3, #4
 8008da8:	693a      	ldr	r2, [r7, #16]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	693a      	ldr	r2, [r7, #16]
 8008db8:	621a      	str	r2, [r3, #32]
}
 8008dba:	bf00      	nop
 8008dbc:	371c      	adds	r7, #28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b085      	sub	sp, #20
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ddc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	f043 0307 	orr.w	r3, r3, #7
 8008de8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	609a      	str	r2, [r3, #8]
}
 8008df0:	bf00      	nop
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b087      	sub	sp, #28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
 8008e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	021a      	lsls	r2, r3, #8
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	609a      	str	r2, [r3, #8]
}
 8008e30:	bf00      	nop
 8008e32:	371c      	adds	r7, #28
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2204      	movs	r2, #4
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 f94e 	bl	80090f0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	689a      	ldr	r2, [r3, #8]
 8008e6a:	4b0b      	ldr	r3, [pc, #44]	; (8008e98 <HAL_TIMEx_PWMN_Start+0x5c>)
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2b06      	cmp	r3, #6
 8008e74:	d00b      	beq.n	8008e8e <HAL_TIMEx_PWMN_Start+0x52>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e7c:	d007      	beq.n	8008e8e <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f042 0201 	orr.w	r2, r2, #1
 8008e8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	00010007 	.word	0x00010007

08008e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d101      	bne.n	8008eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	e06d      	b.n	8008f90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a30      	ldr	r2, [pc, #192]	; (8008f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d004      	beq.n	8008ee8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a2f      	ldr	r2, [pc, #188]	; (8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d108      	bne.n	8008efa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008eee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a20      	ldr	r2, [pc, #128]	; (8008f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d022      	beq.n	8008f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f26:	d01d      	beq.n	8008f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a1d      	ldr	r2, [pc, #116]	; (8008fa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d018      	beq.n	8008f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a1c      	ldr	r2, [pc, #112]	; (8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d013      	beq.n	8008f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a1a      	ldr	r2, [pc, #104]	; (8008fac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d00e      	beq.n	8008f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a15      	ldr	r2, [pc, #84]	; (8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d009      	beq.n	8008f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a16      	ldr	r2, [pc, #88]	; (8008fb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d004      	beq.n	8008f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a15      	ldr	r2, [pc, #84]	; (8008fb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d10c      	bne.n	8008f7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3714      	adds	r7, #20
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	40010000 	.word	0x40010000
 8008fa0:	40010400 	.word	0x40010400
 8008fa4:	40000400 	.word	0x40000400
 8008fa8:	40000800 	.word	0x40000800
 8008fac:	40000c00 	.word	0x40000c00
 8008fb0:	40014000 	.word	0x40014000
 8008fb4:	40001800 	.word	0x40001800

08008fb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d101      	bne.n	8008fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e065      	b.n	80090a0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	4313      	orrs	r3, r2
 8009004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4313      	orrs	r3, r2
 8009012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	4313      	orrs	r3, r2
 8009020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	695b      	ldr	r3, [r3, #20]
 800902c:	4313      	orrs	r3, r2
 800902e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903a:	4313      	orrs	r3, r2
 800903c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	041b      	lsls	r3, r3, #16
 800904a:	4313      	orrs	r3, r2
 800904c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a16      	ldr	r2, [pc, #88]	; (80090ac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d004      	beq.n	8009062 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a14      	ldr	r2, [pc, #80]	; (80090b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d115      	bne.n	800908e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906c:	051b      	lsls	r3, r3, #20
 800906e:	4313      	orrs	r3, r2
 8009070:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	69db      	ldr	r3, [r3, #28]
 800907c:	4313      	orrs	r3, r2
 800907e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	4313      	orrs	r3, r2
 800908c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	40010000 	.word	0x40010000
 80090b0:	40010400 	.word	0x40010400

080090b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f003 031f 	and.w	r3, r3, #31
 8009102:	2204      	movs	r2, #4
 8009104:	fa02 f303 	lsl.w	r3, r2, r3
 8009108:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6a1a      	ldr	r2, [r3, #32]
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	43db      	mvns	r3, r3
 8009112:	401a      	ands	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6a1a      	ldr	r2, [r3, #32]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f003 031f 	and.w	r3, r3, #31
 8009122:	6879      	ldr	r1, [r7, #4]
 8009124:	fa01 f303 	lsl.w	r3, r1, r3
 8009128:	431a      	orrs	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	621a      	str	r2, [r3, #32]
}
 800912e:	bf00      	nop
 8009130:	371c      	adds	r7, #28
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b082      	sub	sp, #8
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d101      	bne.n	800914c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e040      	b.n	80091ce <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009150:	2b00      	cmp	r3, #0
 8009152:	d106      	bne.n	8009162 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7fa fdd1 	bl	8003d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2224      	movs	r2, #36	; 0x24
 8009166:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f022 0201 	bic.w	r2, r2, #1
 8009176:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fa7d 	bl	8009678 <UART_SetConfig>
 800917e:	4603      	mov	r3, r0
 8009180:	2b01      	cmp	r3, #1
 8009182:	d101      	bne.n	8009188 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e022      	b.n	80091ce <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fd1b 	bl	8009bcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	689a      	ldr	r2, [r3, #8]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f042 0201 	orr.w	r2, r2, #1
 80091c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fda2 	bl	8009d10 <UART_CheckIdleState>
 80091cc:	4603      	mov	r3, r0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
	...

080091d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	4613      	mov	r3, r2
 80091e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ea:	2b20      	cmp	r3, #32
 80091ec:	d164      	bne.n	80092b8 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <HAL_UART_Transmit_DMA+0x22>
 80091f4:	88fb      	ldrh	r3, [r7, #6]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e05d      	b.n	80092ba <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009204:	2b01      	cmp	r3, #1
 8009206:	d101      	bne.n	800920c <HAL_UART_Transmit_DMA+0x34>
 8009208:	2302      	movs	r3, #2
 800920a:	e056      	b.n	80092ba <HAL_UART_Transmit_DMA+0xe2>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	88fa      	ldrh	r2, [r7, #6]
 800921e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	88fa      	ldrh	r2, [r7, #6]
 8009226:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2221      	movs	r2, #33	; 0x21
 8009234:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800923a:	2b00      	cmp	r3, #0
 800923c:	d02a      	beq.n	8009294 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009242:	4a20      	ldr	r2, [pc, #128]	; (80092c4 <HAL_UART_Transmit_DMA+0xec>)
 8009244:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800924a:	4a1f      	ldr	r2, [pc, #124]	; (80092c8 <HAL_UART_Transmit_DMA+0xf0>)
 800924c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009252:	4a1e      	ldr	r2, [pc, #120]	; (80092cc <HAL_UART_Transmit_DMA+0xf4>)
 8009254:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800925a:	2200      	movs	r2, #0
 800925c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009266:	4619      	mov	r1, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3328      	adds	r3, #40	; 0x28
 800926e:	461a      	mov	r2, r3
 8009270:	88fb      	ldrh	r3, [r7, #6]
 8009272:	f7fc ff7b 	bl	800616c <HAL_DMA_Start_IT>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00b      	beq.n	8009294 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2210      	movs	r2, #16
 8009280:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2220      	movs	r2, #32
 800928e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e012      	b.n	80092ba <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2240      	movs	r2, #64	; 0x40
 800929a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689a      	ldr	r2, [r3, #8]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80092b2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	e000      	b.n	80092ba <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80092b8:	2302      	movs	r3, #2
  }
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	08009ecf 	.word	0x08009ecf
 80092c8:	08009f1f 	.word	0x08009f1f
 80092cc:	08009fbb 	.word	0x08009fbb

080092d0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	4613      	mov	r3, r2
 80092dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092e2:	2b20      	cmp	r3, #32
 80092e4:	d16c      	bne.n	80093c0 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <HAL_UART_Receive_DMA+0x22>
 80092ec:	88fb      	ldrh	r3, [r7, #6]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d101      	bne.n	80092f6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e065      	b.n	80093c2 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d101      	bne.n	8009304 <HAL_UART_Receive_DMA+0x34>
 8009300:	2302      	movs	r3, #2
 8009302:	e05e      	b.n	80093c2 <HAL_UART_Receive_DMA+0xf2>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	88fa      	ldrh	r2, [r7, #6]
 8009316:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2222      	movs	r2, #34	; 0x22
 8009324:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800932a:	2b00      	cmp	r3, #0
 800932c:	d02a      	beq.n	8009384 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009332:	4a26      	ldr	r2, [pc, #152]	; (80093cc <HAL_UART_Receive_DMA+0xfc>)
 8009334:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800933a:	4a25      	ldr	r2, [pc, #148]	; (80093d0 <HAL_UART_Receive_DMA+0x100>)
 800933c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009342:	4a24      	ldr	r2, [pc, #144]	; (80093d4 <HAL_UART_Receive_DMA+0x104>)
 8009344:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800934a:	2200      	movs	r2, #0
 800934c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	3324      	adds	r3, #36	; 0x24
 8009358:	4619      	mov	r1, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800935e:	461a      	mov	r2, r3
 8009360:	88fb      	ldrh	r3, [r7, #6]
 8009362:	f7fc ff03 	bl	800616c <HAL_DMA_Start_IT>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00b      	beq.n	8009384 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2210      	movs	r2, #16
 8009370:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2220      	movs	r2, #32
 800937e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e01e      	b.n	80093c2 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800939a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689a      	ldr	r2, [r3, #8]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f042 0201 	orr.w	r2, r2, #1
 80093aa:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689a      	ldr	r2, [r3, #8]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093ba:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	e000      	b.n	80093c2 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80093c0:	2302      	movs	r3, #2
  }
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	08009f3b 	.word	0x08009f3b
 80093d0:	08009f9f 	.word	0x08009f9f
 80093d4:	08009fbb 	.word	0x08009fbb

080093d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
inline void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b088      	sub	sp, #32
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80093f8:	69fa      	ldr	r2, [r7, #28]
 80093fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80093fe:	4013      	ands	r3, r2
 8009400:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d113      	bne.n	8009430 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	f003 0320 	and.w	r3, r3, #32
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00e      	beq.n	8009430 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	f003 0320 	and.w	r3, r3, #32
 8009418:	2b00      	cmp	r3, #0
 800941a:	d009      	beq.n	8009430 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009420:	2b00      	cmp	r3, #0
 8009422:	f000 8100 	beq.w	8009626 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	4798      	blx	r3
      }
      return;
 800942e:	e0fa      	b.n	8009626 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	f000 80d5 	beq.w	80095e2 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b00      	cmp	r3, #0
 8009440:	d105      	bne.n	800944e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 80ca 	beq.w	80095e2 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	f003 0301 	and.w	r3, r3, #1
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00e      	beq.n	8009476 <HAL_UART_IRQHandler+0x9e>
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800945e:	2b00      	cmp	r3, #0
 8009460:	d009      	beq.n	8009476 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2201      	movs	r2, #1
 8009468:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800946e:	f043 0201 	orr.w	r2, r3, #1
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	f003 0302 	and.w	r3, r3, #2
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00e      	beq.n	800949e <HAL_UART_IRQHandler+0xc6>
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	2b00      	cmp	r3, #0
 8009488:	d009      	beq.n	800949e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2202      	movs	r2, #2
 8009490:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009496:	f043 0204 	orr.w	r2, r3, #4
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00e      	beq.n	80094c6 <HAL_UART_IRQHandler+0xee>
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d009      	beq.n	80094c6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2204      	movs	r2, #4
 80094b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094be:	f043 0202 	orr.w	r2, r3, #2
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	f003 0308 	and.w	r3, r3, #8
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d013      	beq.n	80094f8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	f003 0320 	and.w	r3, r3, #32
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d104      	bne.n	80094e4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d009      	beq.n	80094f8 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2208      	movs	r2, #8
 80094ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094f0:	f043 0208 	orr.w	r2, r3, #8
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00f      	beq.n	8009522 <HAL_UART_IRQHandler+0x14a>
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00a      	beq.n	8009522 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009514:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800951a:	f043 0220 	orr.w	r2, r3, #32
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d07f      	beq.n	800962a <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	f003 0320 	and.w	r3, r3, #32
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00c      	beq.n	800954e <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	f003 0320 	and.w	r3, r3, #32
 800953a:	2b00      	cmp	r3, #0
 800953c:	d007      	beq.n	800954e <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009542:	2b00      	cmp	r3, #0
 8009544:	d003      	beq.n	800954e <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009552:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800955e:	2b40      	cmp	r3, #64	; 0x40
 8009560:	d004      	beq.n	800956c <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009568:	2b00      	cmp	r3, #0
 800956a:	d031      	beq.n	80095d0 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fc8e 	bl	8009e8e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800957c:	2b40      	cmp	r3, #64	; 0x40
 800957e:	d123      	bne.n	80095c8 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689a      	ldr	r2, [r3, #8]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800958e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009594:	2b00      	cmp	r3, #0
 8009596:	d013      	beq.n	80095c0 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800959c:	4a26      	ldr	r2, [pc, #152]	; (8009638 <HAL_UART_IRQHandler+0x260>)
 800959e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fc fe41 	bl	800622c <HAL_DMA_Abort_IT>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d016      	beq.n	80095de <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80095ba:	4610      	mov	r0, r2
 80095bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095be:	e00e      	b.n	80095de <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7f9 fac8 	bl	8002b56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095c6:	e00a      	b.n	80095de <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f7f9 fac4 	bl	8002b56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ce:	e006      	b.n	80095de <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f7f9 fac0 	bl	8002b56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80095dc:	e025      	b.n	800962a <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095de:	bf00      	nop
    return;
 80095e0:	e023      	b.n	800962a <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00d      	beq.n	8009608 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d008      	beq.n	8009608 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d017      	beq.n	800962e <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	4798      	blx	r3
    }
    return;
 8009606:	e012      	b.n	800962e <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00e      	beq.n	8009630 <HAL_UART_IRQHandler+0x258>
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009618:	2b00      	cmp	r3, #0
 800961a:	d009      	beq.n	8009630 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 fd1e 	bl	800a05e <UART_EndTransmit_IT>
    return;
 8009622:	bf00      	nop
 8009624:	e004      	b.n	8009630 <HAL_UART_IRQHandler+0x258>
      return;
 8009626:	bf00      	nop
 8009628:	e002      	b.n	8009630 <HAL_UART_IRQHandler+0x258>
    return;
 800962a:	bf00      	nop
 800962c:	e000      	b.n	8009630 <HAL_UART_IRQHandler+0x258>
    return;
 800962e:	bf00      	nop
  }

}
 8009630:	3720      	adds	r7, #32
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	0800a033 	.word	0x0800a033

0800963c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009680:	2300      	movs	r3, #0
 8009682:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	689a      	ldr	r2, [r3, #8]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	431a      	orrs	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	431a      	orrs	r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	69db      	ldr	r3, [r3, #28]
 800969c:	4313      	orrs	r3, r2
 800969e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	4bb1      	ldr	r3, [pc, #708]	; (800996c <UART_SetConfig+0x2f4>)
 80096a8:	4013      	ands	r3, r2
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	6812      	ldr	r2, [r2, #0]
 80096ae:	6939      	ldr	r1, [r7, #16]
 80096b0:	430b      	orrs	r3, r1
 80096b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68da      	ldr	r2, [r3, #12]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	430a      	orrs	r2, r1
 80096c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	699b      	ldr	r3, [r3, #24]
 80096ce:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a1b      	ldr	r3, [r3, #32]
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	430a      	orrs	r2, r1
 80096ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a9f      	ldr	r2, [pc, #636]	; (8009970 <UART_SetConfig+0x2f8>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d121      	bne.n	800973c <UART_SetConfig+0xc4>
 80096f8:	4b9e      	ldr	r3, [pc, #632]	; (8009974 <UART_SetConfig+0x2fc>)
 80096fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096fe:	f003 0303 	and.w	r3, r3, #3
 8009702:	2b03      	cmp	r3, #3
 8009704:	d816      	bhi.n	8009734 <UART_SetConfig+0xbc>
 8009706:	a201      	add	r2, pc, #4	; (adr r2, 800970c <UART_SetConfig+0x94>)
 8009708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970c:	0800971d 	.word	0x0800971d
 8009710:	08009729 	.word	0x08009729
 8009714:	08009723 	.word	0x08009723
 8009718:	0800972f 	.word	0x0800972f
 800971c:	2301      	movs	r3, #1
 800971e:	77fb      	strb	r3, [r7, #31]
 8009720:	e151      	b.n	80099c6 <UART_SetConfig+0x34e>
 8009722:	2302      	movs	r3, #2
 8009724:	77fb      	strb	r3, [r7, #31]
 8009726:	e14e      	b.n	80099c6 <UART_SetConfig+0x34e>
 8009728:	2304      	movs	r3, #4
 800972a:	77fb      	strb	r3, [r7, #31]
 800972c:	e14b      	b.n	80099c6 <UART_SetConfig+0x34e>
 800972e:	2308      	movs	r3, #8
 8009730:	77fb      	strb	r3, [r7, #31]
 8009732:	e148      	b.n	80099c6 <UART_SetConfig+0x34e>
 8009734:	2310      	movs	r3, #16
 8009736:	77fb      	strb	r3, [r7, #31]
 8009738:	bf00      	nop
 800973a:	e144      	b.n	80099c6 <UART_SetConfig+0x34e>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a8d      	ldr	r2, [pc, #564]	; (8009978 <UART_SetConfig+0x300>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d134      	bne.n	80097b0 <UART_SetConfig+0x138>
 8009746:	4b8b      	ldr	r3, [pc, #556]	; (8009974 <UART_SetConfig+0x2fc>)
 8009748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800974c:	f003 030c 	and.w	r3, r3, #12
 8009750:	2b0c      	cmp	r3, #12
 8009752:	d829      	bhi.n	80097a8 <UART_SetConfig+0x130>
 8009754:	a201      	add	r2, pc, #4	; (adr r2, 800975c <UART_SetConfig+0xe4>)
 8009756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975a:	bf00      	nop
 800975c:	08009791 	.word	0x08009791
 8009760:	080097a9 	.word	0x080097a9
 8009764:	080097a9 	.word	0x080097a9
 8009768:	080097a9 	.word	0x080097a9
 800976c:	0800979d 	.word	0x0800979d
 8009770:	080097a9 	.word	0x080097a9
 8009774:	080097a9 	.word	0x080097a9
 8009778:	080097a9 	.word	0x080097a9
 800977c:	08009797 	.word	0x08009797
 8009780:	080097a9 	.word	0x080097a9
 8009784:	080097a9 	.word	0x080097a9
 8009788:	080097a9 	.word	0x080097a9
 800978c:	080097a3 	.word	0x080097a3
 8009790:	2300      	movs	r3, #0
 8009792:	77fb      	strb	r3, [r7, #31]
 8009794:	e117      	b.n	80099c6 <UART_SetConfig+0x34e>
 8009796:	2302      	movs	r3, #2
 8009798:	77fb      	strb	r3, [r7, #31]
 800979a:	e114      	b.n	80099c6 <UART_SetConfig+0x34e>
 800979c:	2304      	movs	r3, #4
 800979e:	77fb      	strb	r3, [r7, #31]
 80097a0:	e111      	b.n	80099c6 <UART_SetConfig+0x34e>
 80097a2:	2308      	movs	r3, #8
 80097a4:	77fb      	strb	r3, [r7, #31]
 80097a6:	e10e      	b.n	80099c6 <UART_SetConfig+0x34e>
 80097a8:	2310      	movs	r3, #16
 80097aa:	77fb      	strb	r3, [r7, #31]
 80097ac:	bf00      	nop
 80097ae:	e10a      	b.n	80099c6 <UART_SetConfig+0x34e>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a71      	ldr	r2, [pc, #452]	; (800997c <UART_SetConfig+0x304>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d120      	bne.n	80097fc <UART_SetConfig+0x184>
 80097ba:	4b6e      	ldr	r3, [pc, #440]	; (8009974 <UART_SetConfig+0x2fc>)
 80097bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80097c4:	2b10      	cmp	r3, #16
 80097c6:	d00f      	beq.n	80097e8 <UART_SetConfig+0x170>
 80097c8:	2b10      	cmp	r3, #16
 80097ca:	d802      	bhi.n	80097d2 <UART_SetConfig+0x15a>
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d005      	beq.n	80097dc <UART_SetConfig+0x164>
 80097d0:	e010      	b.n	80097f4 <UART_SetConfig+0x17c>
 80097d2:	2b20      	cmp	r3, #32
 80097d4:	d005      	beq.n	80097e2 <UART_SetConfig+0x16a>
 80097d6:	2b30      	cmp	r3, #48	; 0x30
 80097d8:	d009      	beq.n	80097ee <UART_SetConfig+0x176>
 80097da:	e00b      	b.n	80097f4 <UART_SetConfig+0x17c>
 80097dc:	2300      	movs	r3, #0
 80097de:	77fb      	strb	r3, [r7, #31]
 80097e0:	e0f1      	b.n	80099c6 <UART_SetConfig+0x34e>
 80097e2:	2302      	movs	r3, #2
 80097e4:	77fb      	strb	r3, [r7, #31]
 80097e6:	e0ee      	b.n	80099c6 <UART_SetConfig+0x34e>
 80097e8:	2304      	movs	r3, #4
 80097ea:	77fb      	strb	r3, [r7, #31]
 80097ec:	e0eb      	b.n	80099c6 <UART_SetConfig+0x34e>
 80097ee:	2308      	movs	r3, #8
 80097f0:	77fb      	strb	r3, [r7, #31]
 80097f2:	e0e8      	b.n	80099c6 <UART_SetConfig+0x34e>
 80097f4:	2310      	movs	r3, #16
 80097f6:	77fb      	strb	r3, [r7, #31]
 80097f8:	bf00      	nop
 80097fa:	e0e4      	b.n	80099c6 <UART_SetConfig+0x34e>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a5f      	ldr	r2, [pc, #380]	; (8009980 <UART_SetConfig+0x308>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d120      	bne.n	8009848 <UART_SetConfig+0x1d0>
 8009806:	4b5b      	ldr	r3, [pc, #364]	; (8009974 <UART_SetConfig+0x2fc>)
 8009808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800980c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009810:	2b40      	cmp	r3, #64	; 0x40
 8009812:	d00f      	beq.n	8009834 <UART_SetConfig+0x1bc>
 8009814:	2b40      	cmp	r3, #64	; 0x40
 8009816:	d802      	bhi.n	800981e <UART_SetConfig+0x1a6>
 8009818:	2b00      	cmp	r3, #0
 800981a:	d005      	beq.n	8009828 <UART_SetConfig+0x1b0>
 800981c:	e010      	b.n	8009840 <UART_SetConfig+0x1c8>
 800981e:	2b80      	cmp	r3, #128	; 0x80
 8009820:	d005      	beq.n	800982e <UART_SetConfig+0x1b6>
 8009822:	2bc0      	cmp	r3, #192	; 0xc0
 8009824:	d009      	beq.n	800983a <UART_SetConfig+0x1c2>
 8009826:	e00b      	b.n	8009840 <UART_SetConfig+0x1c8>
 8009828:	2300      	movs	r3, #0
 800982a:	77fb      	strb	r3, [r7, #31]
 800982c:	e0cb      	b.n	80099c6 <UART_SetConfig+0x34e>
 800982e:	2302      	movs	r3, #2
 8009830:	77fb      	strb	r3, [r7, #31]
 8009832:	e0c8      	b.n	80099c6 <UART_SetConfig+0x34e>
 8009834:	2304      	movs	r3, #4
 8009836:	77fb      	strb	r3, [r7, #31]
 8009838:	e0c5      	b.n	80099c6 <UART_SetConfig+0x34e>
 800983a:	2308      	movs	r3, #8
 800983c:	77fb      	strb	r3, [r7, #31]
 800983e:	e0c2      	b.n	80099c6 <UART_SetConfig+0x34e>
 8009840:	2310      	movs	r3, #16
 8009842:	77fb      	strb	r3, [r7, #31]
 8009844:	bf00      	nop
 8009846:	e0be      	b.n	80099c6 <UART_SetConfig+0x34e>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a4d      	ldr	r2, [pc, #308]	; (8009984 <UART_SetConfig+0x30c>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d124      	bne.n	800989c <UART_SetConfig+0x224>
 8009852:	4b48      	ldr	r3, [pc, #288]	; (8009974 <UART_SetConfig+0x2fc>)
 8009854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800985c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009860:	d012      	beq.n	8009888 <UART_SetConfig+0x210>
 8009862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009866:	d802      	bhi.n	800986e <UART_SetConfig+0x1f6>
 8009868:	2b00      	cmp	r3, #0
 800986a:	d007      	beq.n	800987c <UART_SetConfig+0x204>
 800986c:	e012      	b.n	8009894 <UART_SetConfig+0x21c>
 800986e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009872:	d006      	beq.n	8009882 <UART_SetConfig+0x20a>
 8009874:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009878:	d009      	beq.n	800988e <UART_SetConfig+0x216>
 800987a:	e00b      	b.n	8009894 <UART_SetConfig+0x21c>
 800987c:	2300      	movs	r3, #0
 800987e:	77fb      	strb	r3, [r7, #31]
 8009880:	e0a1      	b.n	80099c6 <UART_SetConfig+0x34e>
 8009882:	2302      	movs	r3, #2
 8009884:	77fb      	strb	r3, [r7, #31]
 8009886:	e09e      	b.n	80099c6 <UART_SetConfig+0x34e>
 8009888:	2304      	movs	r3, #4
 800988a:	77fb      	strb	r3, [r7, #31]
 800988c:	e09b      	b.n	80099c6 <UART_SetConfig+0x34e>
 800988e:	2308      	movs	r3, #8
 8009890:	77fb      	strb	r3, [r7, #31]
 8009892:	e098      	b.n	80099c6 <UART_SetConfig+0x34e>
 8009894:	2310      	movs	r3, #16
 8009896:	77fb      	strb	r3, [r7, #31]
 8009898:	bf00      	nop
 800989a:	e094      	b.n	80099c6 <UART_SetConfig+0x34e>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a39      	ldr	r2, [pc, #228]	; (8009988 <UART_SetConfig+0x310>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d124      	bne.n	80098f0 <UART_SetConfig+0x278>
 80098a6:	4b33      	ldr	r3, [pc, #204]	; (8009974 <UART_SetConfig+0x2fc>)
 80098a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80098b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098b4:	d012      	beq.n	80098dc <UART_SetConfig+0x264>
 80098b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098ba:	d802      	bhi.n	80098c2 <UART_SetConfig+0x24a>
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d007      	beq.n	80098d0 <UART_SetConfig+0x258>
 80098c0:	e012      	b.n	80098e8 <UART_SetConfig+0x270>
 80098c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098c6:	d006      	beq.n	80098d6 <UART_SetConfig+0x25e>
 80098c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098cc:	d009      	beq.n	80098e2 <UART_SetConfig+0x26a>
 80098ce:	e00b      	b.n	80098e8 <UART_SetConfig+0x270>
 80098d0:	2301      	movs	r3, #1
 80098d2:	77fb      	strb	r3, [r7, #31]
 80098d4:	e077      	b.n	80099c6 <UART_SetConfig+0x34e>
 80098d6:	2302      	movs	r3, #2
 80098d8:	77fb      	strb	r3, [r7, #31]
 80098da:	e074      	b.n	80099c6 <UART_SetConfig+0x34e>
 80098dc:	2304      	movs	r3, #4
 80098de:	77fb      	strb	r3, [r7, #31]
 80098e0:	e071      	b.n	80099c6 <UART_SetConfig+0x34e>
 80098e2:	2308      	movs	r3, #8
 80098e4:	77fb      	strb	r3, [r7, #31]
 80098e6:	e06e      	b.n	80099c6 <UART_SetConfig+0x34e>
 80098e8:	2310      	movs	r3, #16
 80098ea:	77fb      	strb	r3, [r7, #31]
 80098ec:	bf00      	nop
 80098ee:	e06a      	b.n	80099c6 <UART_SetConfig+0x34e>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a25      	ldr	r2, [pc, #148]	; (800998c <UART_SetConfig+0x314>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d124      	bne.n	8009944 <UART_SetConfig+0x2cc>
 80098fa:	4b1e      	ldr	r3, [pc, #120]	; (8009974 <UART_SetConfig+0x2fc>)
 80098fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009900:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009908:	d012      	beq.n	8009930 <UART_SetConfig+0x2b8>
 800990a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800990e:	d802      	bhi.n	8009916 <UART_SetConfig+0x29e>
 8009910:	2b00      	cmp	r3, #0
 8009912:	d007      	beq.n	8009924 <UART_SetConfig+0x2ac>
 8009914:	e012      	b.n	800993c <UART_SetConfig+0x2c4>
 8009916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800991a:	d006      	beq.n	800992a <UART_SetConfig+0x2b2>
 800991c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009920:	d009      	beq.n	8009936 <UART_SetConfig+0x2be>
 8009922:	e00b      	b.n	800993c <UART_SetConfig+0x2c4>
 8009924:	2300      	movs	r3, #0
 8009926:	77fb      	strb	r3, [r7, #31]
 8009928:	e04d      	b.n	80099c6 <UART_SetConfig+0x34e>
 800992a:	2302      	movs	r3, #2
 800992c:	77fb      	strb	r3, [r7, #31]
 800992e:	e04a      	b.n	80099c6 <UART_SetConfig+0x34e>
 8009930:	2304      	movs	r3, #4
 8009932:	77fb      	strb	r3, [r7, #31]
 8009934:	e047      	b.n	80099c6 <UART_SetConfig+0x34e>
 8009936:	2308      	movs	r3, #8
 8009938:	77fb      	strb	r3, [r7, #31]
 800993a:	e044      	b.n	80099c6 <UART_SetConfig+0x34e>
 800993c:	2310      	movs	r3, #16
 800993e:	77fb      	strb	r3, [r7, #31]
 8009940:	bf00      	nop
 8009942:	e040      	b.n	80099c6 <UART_SetConfig+0x34e>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a11      	ldr	r2, [pc, #68]	; (8009990 <UART_SetConfig+0x318>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d139      	bne.n	80099c2 <UART_SetConfig+0x34a>
 800994e:	4b09      	ldr	r3, [pc, #36]	; (8009974 <UART_SetConfig+0x2fc>)
 8009950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009954:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009958:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800995c:	d027      	beq.n	80099ae <UART_SetConfig+0x336>
 800995e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009962:	d817      	bhi.n	8009994 <UART_SetConfig+0x31c>
 8009964:	2b00      	cmp	r3, #0
 8009966:	d01c      	beq.n	80099a2 <UART_SetConfig+0x32a>
 8009968:	e027      	b.n	80099ba <UART_SetConfig+0x342>
 800996a:	bf00      	nop
 800996c:	efff69f3 	.word	0xefff69f3
 8009970:	40011000 	.word	0x40011000
 8009974:	40023800 	.word	0x40023800
 8009978:	40004400 	.word	0x40004400
 800997c:	40004800 	.word	0x40004800
 8009980:	40004c00 	.word	0x40004c00
 8009984:	40005000 	.word	0x40005000
 8009988:	40011400 	.word	0x40011400
 800998c:	40007800 	.word	0x40007800
 8009990:	40007c00 	.word	0x40007c00
 8009994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009998:	d006      	beq.n	80099a8 <UART_SetConfig+0x330>
 800999a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800999e:	d009      	beq.n	80099b4 <UART_SetConfig+0x33c>
 80099a0:	e00b      	b.n	80099ba <UART_SetConfig+0x342>
 80099a2:	2300      	movs	r3, #0
 80099a4:	77fb      	strb	r3, [r7, #31]
 80099a6:	e00e      	b.n	80099c6 <UART_SetConfig+0x34e>
 80099a8:	2302      	movs	r3, #2
 80099aa:	77fb      	strb	r3, [r7, #31]
 80099ac:	e00b      	b.n	80099c6 <UART_SetConfig+0x34e>
 80099ae:	2304      	movs	r3, #4
 80099b0:	77fb      	strb	r3, [r7, #31]
 80099b2:	e008      	b.n	80099c6 <UART_SetConfig+0x34e>
 80099b4:	2308      	movs	r3, #8
 80099b6:	77fb      	strb	r3, [r7, #31]
 80099b8:	e005      	b.n	80099c6 <UART_SetConfig+0x34e>
 80099ba:	2310      	movs	r3, #16
 80099bc:	77fb      	strb	r3, [r7, #31]
 80099be:	bf00      	nop
 80099c0:	e001      	b.n	80099c6 <UART_SetConfig+0x34e>
 80099c2:	2310      	movs	r3, #16
 80099c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	69db      	ldr	r3, [r3, #28]
 80099ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099ce:	d17f      	bne.n	8009ad0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80099d0:	7ffb      	ldrb	r3, [r7, #31]
 80099d2:	2b08      	cmp	r3, #8
 80099d4:	d85c      	bhi.n	8009a90 <UART_SetConfig+0x418>
 80099d6:	a201      	add	r2, pc, #4	; (adr r2, 80099dc <UART_SetConfig+0x364>)
 80099d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099dc:	08009a01 	.word	0x08009a01
 80099e0:	08009a21 	.word	0x08009a21
 80099e4:	08009a41 	.word	0x08009a41
 80099e8:	08009a91 	.word	0x08009a91
 80099ec:	08009a59 	.word	0x08009a59
 80099f0:	08009a91 	.word	0x08009a91
 80099f4:	08009a91 	.word	0x08009a91
 80099f8:	08009a91 	.word	0x08009a91
 80099fc:	08009a79 	.word	0x08009a79
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a00:	f7fd fd30 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
 8009a04:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	005a      	lsls	r2, r3, #1
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	085b      	lsrs	r3, r3, #1
 8009a10:	441a      	add	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	61bb      	str	r3, [r7, #24]
        break;
 8009a1e:	e03a      	b.n	8009a96 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a20:	f7fd fd34 	bl	800748c <HAL_RCC_GetPCLK2Freq>
 8009a24:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	005a      	lsls	r2, r3, #1
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	085b      	lsrs	r3, r3, #1
 8009a30:	441a      	add	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	61bb      	str	r3, [r7, #24]
        break;
 8009a3e:	e02a      	b.n	8009a96 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	085a      	lsrs	r2, r3, #1
 8009a46:	4b5f      	ldr	r3, [pc, #380]	; (8009bc4 <UART_SetConfig+0x54c>)
 8009a48:	4413      	add	r3, r2
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	6852      	ldr	r2, [r2, #4]
 8009a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	61bb      	str	r3, [r7, #24]
        break;
 8009a56:	e01e      	b.n	8009a96 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a58:	f7fd fc46 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 8009a5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	005a      	lsls	r2, r3, #1
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	085b      	lsrs	r3, r3, #1
 8009a68:	441a      	add	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	61bb      	str	r3, [r7, #24]
        break;
 8009a76:	e00e      	b.n	8009a96 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	085b      	lsrs	r3, r3, #1
 8009a7e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	61bb      	str	r3, [r7, #24]
        break;
 8009a8e:	e002      	b.n	8009a96 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	75fb      	strb	r3, [r7, #23]
        break;
 8009a94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	2b0f      	cmp	r3, #15
 8009a9a:	d916      	bls.n	8009aca <UART_SetConfig+0x452>
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aa2:	d212      	bcs.n	8009aca <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	f023 030f 	bic.w	r3, r3, #15
 8009aac:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	085b      	lsrs	r3, r3, #1
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	f003 0307 	and.w	r3, r3, #7
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	897b      	ldrh	r3, [r7, #10]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	897a      	ldrh	r2, [r7, #10]
 8009ac6:	60da      	str	r2, [r3, #12]
 8009ac8:	e070      	b.n	8009bac <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	75fb      	strb	r3, [r7, #23]
 8009ace:	e06d      	b.n	8009bac <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8009ad0:	7ffb      	ldrb	r3, [r7, #31]
 8009ad2:	2b08      	cmp	r3, #8
 8009ad4:	d859      	bhi.n	8009b8a <UART_SetConfig+0x512>
 8009ad6:	a201      	add	r2, pc, #4	; (adr r2, 8009adc <UART_SetConfig+0x464>)
 8009ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009adc:	08009b01 	.word	0x08009b01
 8009ae0:	08009b1f 	.word	0x08009b1f
 8009ae4:	08009b3d 	.word	0x08009b3d
 8009ae8:	08009b8b 	.word	0x08009b8b
 8009aec:	08009b55 	.word	0x08009b55
 8009af0:	08009b8b 	.word	0x08009b8b
 8009af4:	08009b8b 	.word	0x08009b8b
 8009af8:	08009b8b 	.word	0x08009b8b
 8009afc:	08009b73 	.word	0x08009b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b00:	f7fd fcb0 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
 8009b04:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	085a      	lsrs	r2, r3, #1
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	441a      	add	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	61bb      	str	r3, [r7, #24]
        break;
 8009b1c:	e038      	b.n	8009b90 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b1e:	f7fd fcb5 	bl	800748c <HAL_RCC_GetPCLK2Freq>
 8009b22:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	085a      	lsrs	r2, r3, #1
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	441a      	add	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	61bb      	str	r3, [r7, #24]
        break;
 8009b3a:	e029      	b.n	8009b90 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	085a      	lsrs	r2, r3, #1
 8009b42:	4b21      	ldr	r3, [pc, #132]	; (8009bc8 <UART_SetConfig+0x550>)
 8009b44:	4413      	add	r3, r2
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	6852      	ldr	r2, [r2, #4]
 8009b4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	61bb      	str	r3, [r7, #24]
        break;
 8009b52:	e01d      	b.n	8009b90 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b54:	f7fd fbc8 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 8009b58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	085a      	lsrs	r2, r3, #1
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	441a      	add	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	61bb      	str	r3, [r7, #24]
        break;
 8009b70:	e00e      	b.n	8009b90 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	085b      	lsrs	r3, r3, #1
 8009b78:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	61bb      	str	r3, [r7, #24]
        break;
 8009b88:	e002      	b.n	8009b90 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	75fb      	strb	r3, [r7, #23]
        break;
 8009b8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	2b0f      	cmp	r3, #15
 8009b94:	d908      	bls.n	8009ba8 <UART_SetConfig+0x530>
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b9c:	d204      	bcs.n	8009ba8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	69ba      	ldr	r2, [r7, #24]
 8009ba4:	60da      	str	r2, [r3, #12]
 8009ba6:	e001      	b.n	8009bac <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3720      	adds	r7, #32
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	01e84800 	.word	0x01e84800
 8009bc8:	00f42400 	.word	0x00f42400

08009bcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd8:	f003 0301 	and.w	r3, r3, #1
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00a      	beq.n	8009bf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfa:	f003 0302 	and.w	r3, r3, #2
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00a      	beq.n	8009c18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	430a      	orrs	r2, r1
 8009c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1c:	f003 0304 	and.w	r3, r3, #4
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00a      	beq.n	8009c3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	430a      	orrs	r2, r1
 8009c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3e:	f003 0308 	and.w	r3, r3, #8
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00a      	beq.n	8009c5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	430a      	orrs	r2, r1
 8009c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c60:	f003 0310 	and.w	r3, r3, #16
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00a      	beq.n	8009c7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	430a      	orrs	r2, r1
 8009c7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c82:	f003 0320 	and.w	r3, r3, #32
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00a      	beq.n	8009ca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	430a      	orrs	r2, r1
 8009c9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d01a      	beq.n	8009ce2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	430a      	orrs	r2, r1
 8009cc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cca:	d10a      	bne.n	8009ce2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00a      	beq.n	8009d04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	430a      	orrs	r2, r1
 8009d02:	605a      	str	r2, [r3, #4]
  }
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af02      	add	r7, sp, #8
 8009d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009d1e:	f7fb fbd5 	bl	80054cc <HAL_GetTick>
 8009d22:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0308 	and.w	r3, r3, #8
 8009d2e:	2b08      	cmp	r3, #8
 8009d30:	d10e      	bne.n	8009d50 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 f814 	bl	8009d6e <UART_WaitOnFlagUntilTimeout>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e00a      	b.n	8009d66 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2220      	movs	r2, #32
 8009d54:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2220      	movs	r2, #32
 8009d5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	60f8      	str	r0, [r7, #12]
 8009d76:	60b9      	str	r1, [r7, #8]
 8009d78:	603b      	str	r3, [r7, #0]
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d7e:	e05d      	b.n	8009e3c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d86:	d059      	beq.n	8009e3c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d88:	f7fb fba0 	bl	80054cc <HAL_GetTick>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	69ba      	ldr	r2, [r7, #24]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d302      	bcc.n	8009d9e <UART_WaitOnFlagUntilTimeout+0x30>
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d11b      	bne.n	8009dd6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009dac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	689a      	ldr	r2, [r3, #8]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f022 0201 	bic.w	r2, r2, #1
 8009dbc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2220      	movs	r2, #32
 8009dc2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	e042      	b.n	8009e5c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 0304 	and.w	r3, r3, #4
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d02b      	beq.n	8009e3c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	69db      	ldr	r3, [r3, #28]
 8009dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009df2:	d123      	bne.n	8009e3c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009dfc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009e0c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689a      	ldr	r2, [r3, #8]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f022 0201 	bic.w	r2, r2, #1
 8009e1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2220      	movs	r2, #32
 8009e22:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2220      	movs	r2, #32
 8009e28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2220      	movs	r2, #32
 8009e2e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e00f      	b.n	8009e5c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	69da      	ldr	r2, [r3, #28]
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	4013      	ands	r3, r2
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	bf0c      	ite	eq
 8009e4c:	2301      	moveq	r3, #1
 8009e4e:	2300      	movne	r3, #0
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	461a      	mov	r2, r3
 8009e54:	79fb      	ldrb	r3, [r7, #7]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d092      	beq.n	8009d80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009e7a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2220      	movs	r2, #32
 8009e80:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009e82:	bf00      	nop
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009ea4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	689a      	ldr	r2, [r3, #8]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f022 0201 	bic.w	r2, r2, #1
 8009eb4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2220      	movs	r2, #32
 8009eba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009ec2:	bf00      	nop
 8009ec4:	370c      	adds	r7, #12
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eda:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	69db      	ldr	r3, [r3, #28]
 8009ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ee4:	d014      	beq.n	8009f10 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	689a      	ldr	r2, [r3, #8]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009efc:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f0c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f0e:	e002      	b.n	8009f16 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f7f8 fe15 	bl	8002b40 <HAL_UART_TxCpltCallback>
}
 8009f16:	bf00      	nop
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b084      	sub	sp, #16
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f7ff fb85 	bl	800963c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f32:	bf00      	nop
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b084      	sub	sp, #16
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f46:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	69db      	ldr	r3, [r3, #28]
 8009f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f50:	d01e      	beq.n	8009f90 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f68:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	689a      	ldr	r2, [r3, #8]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f022 0201 	bic.w	r2, r2, #1
 8009f78:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	689a      	ldr	r2, [r3, #8]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f88:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f7ff fb5d 	bl	8009650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f96:	bf00      	nop
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b084      	sub	sp, #16
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009faa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f7ff fb59 	bl	8009664 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fb2:	bf00      	nop
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b086      	sub	sp, #24
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fcc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fd2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fde:	2b80      	cmp	r3, #128	; 0x80
 8009fe0:	d109      	bne.n	8009ff6 <UART_DMAError+0x3c>
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	2b21      	cmp	r3, #33	; 0x21
 8009fe6:	d106      	bne.n	8009ff6 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009ff0:	6978      	ldr	r0, [r7, #20]
 8009ff2:	f7ff ff37 	bl	8009e64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a000:	2b40      	cmp	r3, #64	; 0x40
 800a002:	d109      	bne.n	800a018 <UART_DMAError+0x5e>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2b22      	cmp	r3, #34	; 0x22
 800a008:	d106      	bne.n	800a018 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a012:	6978      	ldr	r0, [r7, #20]
 800a014:	f7ff ff3b 	bl	8009e8e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a01c:	f043 0210 	orr.w	r2, r3, #16
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a024:	6978      	ldr	r0, [r7, #20]
 800a026:	f7f8 fd96 	bl	8002b56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a02a:	bf00      	nop
 800a02c:	3718      	adds	r7, #24
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b084      	sub	sp, #16
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f7f8 fd80 	bl	8002b56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a056:	bf00      	nop
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b082      	sub	sp, #8
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a074:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2220      	movs	r2, #32
 800a07a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f7f8 fd5c 	bl	8002b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a088:	bf00      	nop
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <__libc_init_array>:
 800a090:	b570      	push	{r4, r5, r6, lr}
 800a092:	4e0d      	ldr	r6, [pc, #52]	; (800a0c8 <__libc_init_array+0x38>)
 800a094:	4c0d      	ldr	r4, [pc, #52]	; (800a0cc <__libc_init_array+0x3c>)
 800a096:	1ba4      	subs	r4, r4, r6
 800a098:	10a4      	asrs	r4, r4, #2
 800a09a:	2500      	movs	r5, #0
 800a09c:	42a5      	cmp	r5, r4
 800a09e:	d109      	bne.n	800a0b4 <__libc_init_array+0x24>
 800a0a0:	4e0b      	ldr	r6, [pc, #44]	; (800a0d0 <__libc_init_array+0x40>)
 800a0a2:	4c0c      	ldr	r4, [pc, #48]	; (800a0d4 <__libc_init_array+0x44>)
 800a0a4:	f000 f82c 	bl	800a100 <_init>
 800a0a8:	1ba4      	subs	r4, r4, r6
 800a0aa:	10a4      	asrs	r4, r4, #2
 800a0ac:	2500      	movs	r5, #0
 800a0ae:	42a5      	cmp	r5, r4
 800a0b0:	d105      	bne.n	800a0be <__libc_init_array+0x2e>
 800a0b2:	bd70      	pop	{r4, r5, r6, pc}
 800a0b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0b8:	4798      	blx	r3
 800a0ba:	3501      	adds	r5, #1
 800a0bc:	e7ee      	b.n	800a09c <__libc_init_array+0xc>
 800a0be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0c2:	4798      	blx	r3
 800a0c4:	3501      	adds	r5, #1
 800a0c6:	e7f2      	b.n	800a0ae <__libc_init_array+0x1e>
 800a0c8:	0800a140 	.word	0x0800a140
 800a0cc:	0800a140 	.word	0x0800a140
 800a0d0:	0800a140 	.word	0x0800a140
 800a0d4:	0800a144 	.word	0x0800a144

0800a0d8 <memcpy>:
 800a0d8:	b510      	push	{r4, lr}
 800a0da:	1e43      	subs	r3, r0, #1
 800a0dc:	440a      	add	r2, r1
 800a0de:	4291      	cmp	r1, r2
 800a0e0:	d100      	bne.n	800a0e4 <memcpy+0xc>
 800a0e2:	bd10      	pop	{r4, pc}
 800a0e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0ec:	e7f7      	b.n	800a0de <memcpy+0x6>

0800a0ee <memset>:
 800a0ee:	4402      	add	r2, r0
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d100      	bne.n	800a0f8 <memset+0xa>
 800a0f6:	4770      	bx	lr
 800a0f8:	f803 1b01 	strb.w	r1, [r3], #1
 800a0fc:	e7f9      	b.n	800a0f2 <memset+0x4>
	...

0800a100 <_init>:
 800a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a102:	bf00      	nop
 800a104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a106:	bc08      	pop	{r3}
 800a108:	469e      	mov	lr, r3
 800a10a:	4770      	bx	lr

0800a10c <_fini>:
 800a10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10e:	bf00      	nop
 800a110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a112:	bc08      	pop	{r3}
 800a114:	469e      	mov	lr, r3
 800a116:	4770      	bx	lr
