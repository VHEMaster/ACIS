
ACIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007888  080001e0  080001e0  000101e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007a68  08007a68  00017a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a88  08007a88  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08007a88  08007a88  00017a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a90  08007a90  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a94  08007a94  00017a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20010000  08007a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065d0  20010020  08007ab8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200165f0  08007ab8  000265f0  2**0
                  ALLOC
 11 .itcmram      00000000  20000000  20000000  00020020  2**0
                  CONTENTS
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015596  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002f83  00000000  00000000  000355e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001340  00000000  00000000  00038570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000011b8  00000000  00000000  000398b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00024c80  00000000  00000000  0003aa68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00010df0  00000000  00000000  0005f6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000e3c64  00000000  00000000  000704d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0015413c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005088  00000000  00000000  001541b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20010020 	.word	0x20010020
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007a50 	.word	0x08007a50

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20010024 	.word	0x20010024
 800021c:	08007a50 	.word	0x08007a50

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <acis_init>:
sAcisConfig acis_config;// __attribute__((section(".ItcmRamSection")));

extern TIM_HandleTypeDef htim4;

void acis_init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim4);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <acis_init+0x10>)
 8000d62:	f004 ffa3 	bl	8005cac <HAL_TIM_Base_Start_IT>
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200161e0 	.word	0x200161e0

08000d70 <acis_ignite_14>:
static volatile float angle_ignite = 0;
static volatile float angle_saturate = 0;
static volatile uint8_t table_current = 0;

static inline void acis_ignite_14(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2180      	movs	r1, #128	; 0x80
 8000d78:	4807      	ldr	r0, [pc, #28]	; (8000d98 <acis_ignite_14+0x28>)
 8000d7a:	f003 fd17 	bl	80047ac <HAL_GPIO_WritePin>
  ign14_prev = ign14_time;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <acis_ignite_14+0x2c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <acis_ignite_14+0x30>)
 8000d84:	6013      	str	r3, [r2, #0]
  ign14_time = Delay_Tick;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <acis_ignite_14+0x34>)
 8000d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <acis_ignite_14+0x2c>)
 8000d8c:	6013      	str	r3, [r2, #0]
  ign_ftime = 0;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <acis_ignite_14+0x38>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40020400 	.word	0x40020400
 8000d9c:	2001003c 	.word	0x2001003c
 8000da0:	20010044 	.word	0x20010044
 8000da4:	40000c00 	.word	0x40000c00
 8000da8:	20010000 	.word	0x20010000

08000dac <acis_ignite_23>:

static inline void acis_ignite_23(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <acis_ignite_23+0x28>)
 8000db6:	f003 fcf9 	bl	80047ac <HAL_GPIO_WritePin>
  ign23_prev = ign23_time;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <acis_ignite_23+0x2c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <acis_ignite_23+0x30>)
 8000dc0:	6013      	str	r3, [r2, #0]
  ign23_time = Delay_Tick;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <acis_ignite_23+0x34>)
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <acis_ignite_23+0x2c>)
 8000dc8:	6013      	str	r3, [r2, #0]
  ign_ftime = 0;
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <acis_ignite_23+0x38>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	20010040 	.word	0x20010040
 8000ddc:	20010048 	.word	0x20010048
 8000de0:	40000c00 	.word	0x40000c00
 8000de4:	20010000 	.word	0x20010000

08000de8 <acis_saturate_14>:

static inline void acis_saturate_14(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <acis_saturate_14+0x18>)
 8000df2:	f003 fcdb 	bl	80047ac <HAL_GPIO_WritePin>
  ign_ftime = 0;
 8000df6:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <acis_saturate_14+0x1c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40020400 	.word	0x40020400
 8000e04:	20010000 	.word	0x20010000

08000e08 <acis_saturate_23>:

static inline void acis_saturate_23(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2140      	movs	r1, #64	; 0x40
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <acis_saturate_23+0x18>)
 8000e12:	f003 fccb 	bl	80047ac <HAL_GPIO_WritePin>
  ign_ftime = 0;
 8000e16:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <acis_saturate_23+0x1c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40020400 	.word	0x40020400
 8000e24:	20010000 	.word	0x20010000

08000e28 <acis_ignite>:

static inline void acis_ignite(uint8_t index)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if(index == 0)
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <acis_ignite+0x16>
    acis_ignite_14();
 8000e38:	f7ff ff9a 	bl	8000d70 <acis_ignite_14>
  else if(index == 1)
    acis_ignite_23();
}
 8000e3c:	e004      	b.n	8000e48 <acis_ignite+0x20>
  else if(index == 1)
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d101      	bne.n	8000e48 <acis_ignite+0x20>
    acis_ignite_23();
 8000e44:	f7ff ffb2 	bl	8000dac <acis_ignite_23>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <acis_saturate>:

static inline void acis_saturate(uint8_t index)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  if(index == 0)
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <acis_saturate+0x16>
    acis_saturate_14();
 8000e60:	f7ff ffc2 	bl	8000de8 <acis_saturate_14>
  else if(index == 1)
    acis_saturate_23();
}
 8000e64:	e004      	b.n	8000e70 <acis_saturate+0x20>
  else if(index == 1)
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d101      	bne.n	8000e70 <acis_saturate+0x20>
    acis_saturate_23();
 8000e6c:	f7ff ffcc 	bl	8000e08 <acis_saturate_23>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <acis_ignition_loop>:

static inline void acis_ignition_loop(void)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
  uint32_t now = Delay_Tick;
 8000e7e:	4b9f      	ldr	r3, [pc, #636]	; (80010fc <acis_ignition_loop+0x284>)
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	60fb      	str	r3, [r7, #12]
  float rpm = csps_getrpm();
 8000e84:	f000 feea 	bl	8001c5c <csps_getrpm>
 8000e88:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t rotates = csps_isrotates() || hall_rotates;
 8000e8c:	f000 ff10 	bl	8001cb0 <csps_isrotates>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d104      	bne.n	8000ea0 <acis_ignition_loop+0x28>
 8000e96:	4b9a      	ldr	r3, [pc, #616]	; (8001100 <acis_ignition_loop+0x288>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <acis_ignition_loop+0x2c>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <acis_ignition_loop+0x2e>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if(!ign_ftime && rotates)
 8000ea8:	4b96      	ldr	r3, [pc, #600]	; (8001104 <acis_ignition_loop+0x28c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f040 8114 	bne.w	80010da <acis_ignition_loop+0x262>
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 8110 	beq.w	80010da <acis_ignition_loop+0x262>
  {
    if(DelayDiff(now, ign14_time) >= IGN_OVER_TIME)
 8000eba:	4b93      	ldr	r3, [pc, #588]	; (8001108 <acis_ignition_loop+0x290>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f000 ffe3 	bl	8001e8c <DelayDiff>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	4b90      	ldr	r3, [pc, #576]	; (800110c <acis_ignition_loop+0x294>)
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d905      	bls.n	8000eda <acis_ignition_loop+0x62>
      HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2180      	movs	r1, #128	; 0x80
 8000ed2:	488f      	ldr	r0, [pc, #572]	; (8001110 <acis_ignition_loop+0x298>)
 8000ed4:	f003 fc6a 	bl	80047ac <HAL_GPIO_WritePin>
 8000ed8:	e071      	b.n	8000fbe <acis_ignition_loop+0x146>
    else if(acis_config.params.isIgnitionByHall)
 8000eda:	4a8e      	ldr	r2, [pc, #568]	; (8001114 <acis_ignition_loop+0x29c>)
 8000edc:	f645 1309 	movw	r3, #22793	; 0x5909
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d06a      	beq.n	8000fbe <acis_ignition_loop+0x146>
    {
      if(rpm < 300.0f)
 8000ee8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eec:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001118 <acis_ignition_loop+0x2a0>
 8000ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef8:	d51c      	bpl.n	8000f34 <acis_ignition_loop+0xbc>
      {
        if(DelayDiff(now, ign14_time) >= DelayDiff(ign14_time, ign14_prev) * 96 / 128)
 8000efa:	4b83      	ldr	r3, [pc, #524]	; (8001108 <acis_ignition_loop+0x290>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4619      	mov	r1, r3
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f000 ffc3 	bl	8001e8c <DelayDiff>
 8000f06:	4604      	mov	r4, r0
 8000f08:	4b7f      	ldr	r3, [pc, #508]	; (8001108 <acis_ignition_loop+0x290>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b83      	ldr	r3, [pc, #524]	; (800111c <acis_ignition_loop+0x2a4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	4610      	mov	r0, r2
 8000f14:	f000 ffba 	bl	8001e8c <DelayDiff>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	015b      	lsls	r3, r3, #5
 8000f22:	09db      	lsrs	r3, r3, #7
 8000f24:	429c      	cmp	r4, r3
 8000f26:	d34a      	bcc.n	8000fbe <acis_ignition_loop+0x146>
          HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	4878      	ldr	r0, [pc, #480]	; (8001110 <acis_ignition_loop+0x298>)
 8000f2e:	f003 fc3d 	bl	80047ac <HAL_GPIO_WritePin>
 8000f32:	e044      	b.n	8000fbe <acis_ignition_loop+0x146>
      }
      else if(DelayDiff(ign14_time, ign14_prev) > 15000)
 8000f34:	4b74      	ldr	r3, [pc, #464]	; (8001108 <acis_ignition_loop+0x290>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b78      	ldr	r3, [pc, #480]	; (800111c <acis_ignition_loop+0x2a4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4610      	mov	r0, r2
 8000f40:	f000 ffa4 	bl	8001e8c <DelayDiff>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d91b      	bls.n	8000f86 <acis_ignition_loop+0x10e>
      {
        if((int32_t)DelayDiff(ign14_time, ign14_prev) - (int32_t)DelayDiff(now, ign14_time) < 11719)
 8000f4e:	4b6e      	ldr	r3, [pc, #440]	; (8001108 <acis_ignition_loop+0x290>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4b72      	ldr	r3, [pc, #456]	; (800111c <acis_ignition_loop+0x2a4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4619      	mov	r1, r3
 8000f58:	4610      	mov	r0, r2
 8000f5a:	f000 ff97 	bl	8001e8c <DelayDiff>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461c      	mov	r4, r3
 8000f62:	4b69      	ldr	r3, [pc, #420]	; (8001108 <acis_ignition_loop+0x290>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4619      	mov	r1, r3
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 ff8f 	bl	8001e8c <DelayDiff>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	1ae3      	subs	r3, r4, r3
 8000f72:	f642 52c6 	movw	r2, #11718	; 0x2dc6
 8000f76:	4293      	cmp	r3, r2
 8000f78:	dc21      	bgt.n	8000fbe <acis_ignition_loop+0x146>
        {
          HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	4864      	ldr	r0, [pc, #400]	; (8001110 <acis_ignition_loop+0x298>)
 8000f80:	f003 fc14 	bl	80047ac <HAL_GPIO_WritePin>
 8000f84:	e01b      	b.n	8000fbe <acis_ignition_loop+0x146>
        }
      }
      else if(DelayDiff(now, ign14_time) >= DelayDiff(ign14_time, ign14_prev) * 28 / 128)
 8000f86:	4b60      	ldr	r3, [pc, #384]	; (8001108 <acis_ignition_loop+0x290>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	68f8      	ldr	r0, [r7, #12]
 8000f8e:	f000 ff7d 	bl	8001e8c <DelayDiff>
 8000f92:	4604      	mov	r4, r0
 8000f94:	4b5c      	ldr	r3, [pc, #368]	; (8001108 <acis_ignition_loop+0x290>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b60      	ldr	r3, [pc, #384]	; (800111c <acis_ignition_loop+0x2a4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f000 ff74 	bl	8001e8c <DelayDiff>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	1a9b      	subs	r3, r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	09db      	lsrs	r3, r3, #7
 8000fb0:	429c      	cmp	r4, r3
 8000fb2:	d304      	bcc.n	8000fbe <acis_ignition_loop+0x146>
        HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	4855      	ldr	r0, [pc, #340]	; (8001110 <acis_ignition_loop+0x298>)
 8000fba:	f003 fbf7 	bl	80047ac <HAL_GPIO_WritePin>
    }

    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 8000fbe:	4b58      	ldr	r3, [pc, #352]	; (8001120 <acis_ignition_loop+0x2a8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f000 ff61 	bl	8001e8c <DelayDiff>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	4b4f      	ldr	r3, [pc, #316]	; (800110c <acis_ignition_loop+0x294>)
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d905      	bls.n	8000fde <acis_ignition_loop+0x166>
      HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	484e      	ldr	r0, [pc, #312]	; (8001110 <acis_ignition_loop+0x298>)
 8000fd8:	f003 fbe8 	bl	80047ac <HAL_GPIO_WritePin>
    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 8000fdc:	e088      	b.n	80010f0 <acis_ignition_loop+0x278>
    else if(acis_config.params.isIgnitionByHall)
 8000fde:	4a4d      	ldr	r2, [pc, #308]	; (8001114 <acis_ignition_loop+0x29c>)
 8000fe0:	f645 1309 	movw	r3, #22793	; 0x5909
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 8081 	beq.w	80010f0 <acis_ignition_loop+0x278>
    {
      if(rpm < 300.0f)
 8000fee:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ff2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001118 <acis_ignition_loop+0x2a0>
 8000ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffe:	d51c      	bpl.n	800103a <acis_ignition_loop+0x1c2>
      {
        if(DelayDiff(now, ign23_time) >= DelayDiff(ign23_time, ign23_prev) * 96 / 128)
 8001000:	4b47      	ldr	r3, [pc, #284]	; (8001120 <acis_ignition_loop+0x2a8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f000 ff40 	bl	8001e8c <DelayDiff>
 800100c:	4604      	mov	r4, r0
 800100e:	4b44      	ldr	r3, [pc, #272]	; (8001120 <acis_ignition_loop+0x2a8>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b44      	ldr	r3, [pc, #272]	; (8001124 <acis_ignition_loop+0x2ac>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4619      	mov	r1, r3
 8001018:	4610      	mov	r0, r2
 800101a:	f000 ff37 	bl	8001e8c <DelayDiff>
 800101e:	4602      	mov	r2, r0
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	015b      	lsls	r3, r3, #5
 8001028:	09db      	lsrs	r3, r3, #7
 800102a:	429c      	cmp	r4, r3
 800102c:	d360      	bcc.n	80010f0 <acis_ignition_loop+0x278>
          HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2140      	movs	r1, #64	; 0x40
 8001032:	4837      	ldr	r0, [pc, #220]	; (8001110 <acis_ignition_loop+0x298>)
 8001034:	f003 fbba 	bl	80047ac <HAL_GPIO_WritePin>
    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 8001038:	e05a      	b.n	80010f0 <acis_ignition_loop+0x278>
      }
      else if(rpm > 500.0f && DelayDiff(ign23_time, ign23_prev) > 15000)
 800103a:	edd7 7a02 	vldr	s15, [r7, #8]
 800103e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001128 <acis_ignition_loop+0x2b0>
 8001042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	dd28      	ble.n	800109e <acis_ignition_loop+0x226>
 800104c:	4b34      	ldr	r3, [pc, #208]	; (8001120 <acis_ignition_loop+0x2a8>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b34      	ldr	r3, [pc, #208]	; (8001124 <acis_ignition_loop+0x2ac>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	4610      	mov	r0, r2
 8001058:	f000 ff18 	bl	8001e8c <DelayDiff>
 800105c:	4602      	mov	r2, r0
 800105e:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001062:	429a      	cmp	r2, r3
 8001064:	d91b      	bls.n	800109e <acis_ignition_loop+0x226>
      {
        if((int32_t)DelayDiff(ign23_time, ign23_prev) - (int32_t)DelayDiff(now, ign23_time) < 11719)
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <acis_ignition_loop+0x2a8>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <acis_ignition_loop+0x2ac>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	4610      	mov	r0, r2
 8001072:	f000 ff0b 	bl	8001e8c <DelayDiff>
 8001076:	4603      	mov	r3, r0
 8001078:	461c      	mov	r4, r3
 800107a:	4b29      	ldr	r3, [pc, #164]	; (8001120 <acis_ignition_loop+0x2a8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4619      	mov	r1, r3
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f000 ff03 	bl	8001e8c <DelayDiff>
 8001086:	4603      	mov	r3, r0
 8001088:	1ae3      	subs	r3, r4, r3
 800108a:	f642 52c6 	movw	r2, #11718	; 0x2dc6
 800108e:	4293      	cmp	r3, r2
 8001090:	dc22      	bgt.n	80010d8 <acis_ignition_loop+0x260>
        {
          HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2140      	movs	r1, #64	; 0x40
 8001096:	481e      	ldr	r0, [pc, #120]	; (8001110 <acis_ignition_loop+0x298>)
 8001098:	f003 fb88 	bl	80047ac <HAL_GPIO_WritePin>
        if((int32_t)DelayDiff(ign23_time, ign23_prev) - (int32_t)DelayDiff(now, ign23_time) < 11719)
 800109c:	e01c      	b.n	80010d8 <acis_ignition_loop+0x260>
        }
      }
      else if(DelayDiff(now, ign23_time) >= DelayDiff(ign23_time, ign23_prev) * 28 / 128)
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <acis_ignition_loop+0x2a8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4619      	mov	r1, r3
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f000 fef1 	bl	8001e8c <DelayDiff>
 80010aa:	4604      	mov	r4, r0
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <acis_ignition_loop+0x2a8>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <acis_ignition_loop+0x2ac>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	4610      	mov	r0, r2
 80010b8:	f000 fee8 	bl	8001e8c <DelayDiff>
 80010bc:	4602      	mov	r2, r0
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	1a9b      	subs	r3, r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	09db      	lsrs	r3, r3, #7
 80010c8:	429c      	cmp	r4, r3
 80010ca:	d311      	bcc.n	80010f0 <acis_ignition_loop+0x278>
        HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2140      	movs	r1, #64	; 0x40
 80010d0:	480f      	ldr	r0, [pc, #60]	; (8001110 <acis_ignition_loop+0x298>)
 80010d2:	f003 fb6b 	bl	80047ac <HAL_GPIO_WritePin>
    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 80010d6:	e00b      	b.n	80010f0 <acis_ignition_loop+0x278>
 80010d8:	e00a      	b.n	80010f0 <acis_ignition_loop+0x278>
    }
  }
  else
  {
    HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	480c      	ldr	r0, [pc, #48]	; (8001110 <acis_ignition_loop+0x298>)
 80010e0:	f003 fb64 	bl	80047ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2140      	movs	r1, #64	; 0x40
 80010e8:	4809      	ldr	r0, [pc, #36]	; (8001110 <acis_ignition_loop+0x298>)
 80010ea:	f003 fb5f 	bl	80047ac <HAL_GPIO_WritePin>
  }
}
 80010ee:	e000      	b.n	80010f2 <acis_ignition_loop+0x27a>
    if(DelayDiff(now, ign23_time) >= IGN_OVER_TIME)
 80010f0:	bf00      	nop
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40000c00 	.word	0x40000c00
 8001100:	20010058 	.word	0x20010058
 8001104:	20010000 	.word	0x20010000
 8001108:	2001003c 	.word	0x2001003c
 800110c:	0007a11f 	.word	0x0007a11f
 8001110:	40020400 	.word	0x40020400
 8001114:	2001032c 	.word	0x2001032c
 8001118:	43960000 	.word	0x43960000
 800111c:	20010044 	.word	0x20010044
 8001120:	20010040 	.word	0x20010040
 8001124:	20010048 	.word	0x20010048
 8001128:	43fa0000 	.word	0x43fa0000

0800112c <acis_hall_exti>:

inline void acis_hall_exti(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
  uint32_t now = Delay_Tick;
 8001132:	4b42      	ldr	r3, [pc, #264]	; (800123c <acis_hall_exti+0x110>)
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	617b      	str	r3, [r7, #20]
  uint8_t hall_cylinders = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	77fb      	strb	r3, [r7, #31]
  hall_prev = now;
 800113c:	4a40      	ldr	r2, [pc, #256]	; (8001240 <acis_hall_exti+0x114>)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	6013      	str	r3, [r2, #0]
  float angle = 0.0f;
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
  float angle14 = csps_getangle14();
 8001148:	f000 fca6 	bl	8001a98 <csps_getangle14>
 800114c:	ed87 0a04 	vstr	s0, [r7, #16]
  float rpm = csps_getrpm();
 8001150:	f000 fd84 	bl	8001c5c <csps_getrpm>
 8001154:	ed87 0a03 	vstr	s0, [r7, #12]
  float pressure = map_getpressure();
 8001158:	f001 fd5e 	bl	8002c18 <map_getpressure>
 800115c:	ed87 0a02 	vstr	s0, [r7, #8]
  float angle23 = csps_getangle23from14(angle14);
 8001160:	ed97 0a04 	vldr	s0, [r7, #16]
 8001164:	f000 fd50 	bl	8001c08 <csps_getangle23from14>
 8001168:	ed87 0a01 	vstr	s0, [r7, #4]
  float cspsfound = csps_isfound();
 800116c:	f000 fdac 	bl	8001cc8 <csps_isfound>
 8001170:	4603      	mov	r3, r0
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800117a:	edc7 7a00 	vstr	s15, [r7]

  if(angle23 > 90.0f || angle23 <= -90.0f)
 800117e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001182:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001244 <acis_hall_exti+0x118>
 8001186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118e:	dc08      	bgt.n	80011a2 <acis_hall_exti+0x76>
 8001190:	edd7 7a01 	vldr	s15, [r7, #4]
 8001194:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001248 <acis_hall_exti+0x11c>
 8001198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a0:	d803      	bhi.n	80011aa <acis_hall_exti+0x7e>
  {
      hall_cylinders = 2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	77fb      	strb	r3, [r7, #31]
      angle = angle14;
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	61bb      	str	r3, [r7, #24]
  }
  if(angle14 > 90.0f || angle14 <= -90.0f)
 80011aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80011ae:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001244 <acis_hall_exti+0x118>
 80011b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	dc08      	bgt.n	80011ce <acis_hall_exti+0xa2>
 80011bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001248 <acis_hall_exti+0x11c>
 80011c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011cc:	d813      	bhi.n	80011f6 <acis_hall_exti+0xca>
  {
    if(hall_cylinders == 0)
 80011ce:	7ffb      	ldrb	r3, [r7, #31]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d104      	bne.n	80011de <acis_hall_exti+0xb2>
    {
      hall_cylinders = 1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	77fb      	strb	r3, [r7, #31]
      angle = angle23;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	61bb      	str	r3, [r7, #24]
 80011dc:	e00b      	b.n	80011f6 <acis_hall_exti+0xca>
    }
    else
    {
      hall_cylinders = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	77fb      	strb	r3, [r7, #31]
      hall_error += 1.0f;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <acis_hall_exti+0x120>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <acis_hall_exti+0x120>)
 80011f2:	edc3 7a00 	vstr	s15, [r3]
    }
  }
  hall_angle = angle;
 80011f6:	4a16      	ldr	r2, [pc, #88]	; (8001250 <acis_hall_exti+0x124>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6013      	str	r3, [r2, #0]

  if(cspsfound && acis_config.params.isIgnitionByHall)
 80011fc:	edd7 7a00 	vldr	s15, [r7]
 8001200:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001208:	d011      	beq.n	800122e <acis_hall_exti+0x102>
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <acis_hall_exti+0x128>)
 800120c:	f645 1309 	movw	r3, #22793	; 0x5909
 8001210:	4413      	add	r3, r2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00a      	beq.n	800122e <acis_hall_exti+0x102>
  {
    if(hall_cylinders == 1)
 8001218:	7ffb      	ldrb	r3, [r7, #31]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d102      	bne.n	8001224 <acis_hall_exti+0xf8>
    {
      acis_ignite_14();
 800121e:	f7ff fda7 	bl	8000d70 <acis_ignite_14>
 8001222:	e004      	b.n	800122e <acis_hall_exti+0x102>
    }
    else if(hall_cylinders == 2)
 8001224:	7ffb      	ldrb	r3, [r7, #31]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d101      	bne.n	800122e <acis_hall_exti+0x102>
    {
      acis_ignite_23();
 800122a:	f7ff fdbf 	bl	8000dac <acis_ignite_23>
    }
  }
  hall_rotates = 1;
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <acis_hall_exti+0x12c>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40000c00 	.word	0x40000c00
 8001240:	2001004c 	.word	0x2001004c
 8001244:	42b40000 	.word	0x42b40000
 8001248:	c2b40000 	.word	0xc2b40000
 800124c:	20010054 	.word	0x20010054
 8001250:	20010050 	.word	0x20010050
 8001254:	2001032c 	.word	0x2001032c
 8001258:	20010058 	.word	0x20010058
 800125c:	00000000 	.word	0x00000000

08001260 <acis_hall_loop>:

static inline void acis_hall_loop(void)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
  static uint32_t last_error_null = 0;
  uint32_t prev = hall_prev;
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <acis_hall_loop+0x78>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	607b      	str	r3, [r7, #4]
  uint32_t now = Delay_Tick;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <acis_hall_loop+0x7c>)
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	603b      	str	r3, [r7, #0]
  if(DelayDiff(now, last_error_null) > 100000)
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <acis_hall_loop+0x80>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4619      	mov	r1, r3
 8001278:	6838      	ldr	r0, [r7, #0]
 800127a:	f000 fe07 	bl	8001e8c <DelayDiff>
 800127e:	4602      	mov	r2, r0
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <acis_hall_loop+0x84>)
 8001282:	429a      	cmp	r2, r3
 8001284:	d915      	bls.n	80012b2 <acis_hall_loop+0x52>
  {
    hall_error *= 0.95;
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <acis_hall_loop+0x88>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f92c 	bl	80004e8 <__aeabi_f2d>
 8001290:	a30f      	add	r3, pc, #60	; (adr r3, 80012d0 <acis_hall_loop+0x70>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	f7ff f97f 	bl	8000598 <__aeabi_dmul>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	4618      	mov	r0, r3
 80012a0:	4621      	mov	r1, r4
 80012a2:	f7ff fb8b 	bl	80009bc <__aeabi_d2f>
 80012a6:	4602      	mov	r2, r0
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <acis_hall_loop+0x88>)
 80012aa:	601a      	str	r2, [r3, #0]
    last_error_null = now;
 80012ac:	4a0c      	ldr	r2, [pc, #48]	; (80012e0 <acis_hall_loop+0x80>)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	6013      	str	r3, [r2, #0]
  }
  if(DelayDiff(now, prev) > 600000)
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	6838      	ldr	r0, [r7, #0]
 80012b6:	f000 fde9 	bl	8001e8c <DelayDiff>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <acis_hall_loop+0x8c>)
 80012be:	429a      	cmp	r2, r3
 80012c0:	d902      	bls.n	80012c8 <acis_hall_loop+0x68>
  {
    hall_rotates = 0;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <acis_hall_loop+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
  }
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	66666666 	.word	0x66666666
 80012d4:	3fee6666 	.word	0x3fee6666
 80012d8:	2001004c 	.word	0x2001004c
 80012dc:	40000c00 	.word	0x40000c00
 80012e0:	20010074 	.word	0x20010074
 80012e4:	000186a0 	.word	0x000186a0
 80012e8:	20010054 	.word	0x20010054
 80012ec:	000927c0 	.word	0x000927c0
 80012f0:	20010058 	.word	0x20010058

080012f4 <acis_loop>:

inline void acis_loop(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b090      	sub	sp, #64	; 0x40
 80012f8:	af00      	add	r7, sp, #0
  static float oldanglesbeforeignite[2] = {0,0};
  static uint8_t saturated[2] = { 1,1 };
  static uint8_t ignited[2] = { 1,1 };
  float angle[2] = { 0.0f, 0.0f };
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  float anglesbeforeignite[2];
  static float oldsaturate = 0;
  angle[0] = csps_getangle14();
 8001306:	f000 fbc7 	bl	8001a98 <csps_getangle14>
 800130a:	eef0 7a40 	vmov.f32	s15, s0
 800130e:	edc7 7a02 	vstr	s15, [r7, #8]
  angle[1] = csps_getangle23from14(angle[0]);
 8001312:	edd7 7a02 	vldr	s15, [r7, #8]
 8001316:	eeb0 0a67 	vmov.f32	s0, s15
 800131a:	f000 fc75 	bl	8001c08 <csps_getangle23from14>
 800131e:	eef0 7a40 	vmov.f32	s15, s0
 8001322:	edc7 7a03 	vstr	s15, [r7, #12]
  sAcisIgnTable * table = NULL;
 8001326:	2300      	movs	r3, #0
 8001328:	637b      	str	r3, [r7, #52]	; 0x34

  float rpm = csps_getrpm();
 800132a:	f000 fc97 	bl	8001c5c <csps_getrpm>
 800132e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  float uspa = csps_getuspa();
 8001332:	f000 fca1 	bl	8001c78 <csps_getuspa>
 8001336:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  float period = csps_getperiod();
 800133a:	f000 fcab 	bl	8001c94 <csps_getperiod>
 800133e:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
  float pressure = map_getpressure();
 8001342:	f001 fc69 	bl	8002c18 <map_getpressure>
 8001346:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  float time_sat = IGN_SATURATION;
 800134a:	4b82      	ldr	r3, [pc, #520]	; (8001554 <acis_loop+0x260>)
 800134c:	63fb      	str	r3, [r7, #60]	; 0x3c

  float found = csps_isfound();
 800134e:	f000 fcbb 	bl	8001cc8 <csps_isfound>
 8001352:	4603      	mov	r3, r0
 8001354:	ee07 3a90 	vmov	s15, r3
 8001358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800135c:	edc7 7a08 	vstr	s15, [r7, #32]
  uint32_t now = Delay_Tick;
 8001360:	4b7d      	ldr	r3, [pc, #500]	; (8001558 <acis_loop+0x264>)
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	61fb      	str	r3, [r7, #28]

  int table_num = table_current;
 8001366:	4b7d      	ldr	r3, [pc, #500]	; (800155c <acis_loop+0x268>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	61bb      	str	r3, [r7, #24]

  if(table_num < acis_config.tables_count || table_num < TABLE_SETUPS_MAX)
 800136e:	4b7c      	ldr	r3, [pc, #496]	; (8001560 <acis_loop+0x26c>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	429a      	cmp	r2, r3
 8001376:	d802      	bhi.n	800137e <acis_loop+0x8a>
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b03      	cmp	r3, #3
 800137c:	dc08      	bgt.n	8001390 <acis_loop+0x9c>
    table = &acis_config.tables[table_num];
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	f44f 52b2 	mov.w	r2, #5696	; 0x1640
 8001384:	fb02 f303 	mul.w	r3, r2, r3
 8001388:	4a75      	ldr	r2, [pc, #468]	; (8001560 <acis_loop+0x26c>)
 800138a:	4413      	add	r3, r2
 800138c:	3304      	adds	r3, #4
 800138e:	637b      	str	r3, [r7, #52]	; 0x34


  float ignite = 0.0f;
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	617b      	str	r3, [r7, #20]

  if(period < IGN_SATURATION + IGN_PULSE)
 8001396:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800139a:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001564 <acis_loop+0x270>
 800139e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a6:	d507      	bpl.n	80013b8 <acis_loop+0xc4>
  {
    time_sat = period * ((float)IGN_SATURATION / (float)(IGN_SATURATION + IGN_PULSE));
 80013a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80013ac:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001568 <acis_loop+0x274>
 80013b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  if(table)
  {

  }

  float saturate = time_sat / uspa;
 80013b8:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80013bc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80013c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c4:	edc7 7a04 	vstr	s15, [r7, #16]

  angle_ignite = ignite;
 80013c8:	4a68      	ldr	r2, [pc, #416]	; (800156c <acis_loop+0x278>)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	6013      	str	r3, [r2, #0]
  angle_saturate = saturate;
 80013ce:	4a68      	ldr	r2, [pc, #416]	; (8001570 <acis_loop+0x27c>)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	6013      	str	r3, [r2, #0]


  if(found)
 80013d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80013d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e0:	f000 80a9 	beq.w	8001536 <acis_loop+0x242>
  {
    for(int i = 0; i < 2; i++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80013e8:	e0a0      	b.n	800152c <acis_loop+0x238>
    {

      if(angle[i] < -ignite)
 80013ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80013f2:	4413      	add	r3, r2
 80013f4:	3b38      	subs	r3, #56	; 0x38
 80013f6:	ed93 7a00 	vldr	s14, [r3]
 80013fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80013fe:	eef1 7a67 	vneg.f32	s15, s15
 8001402:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140a:	d516      	bpl.n	800143a <acis_loop+0x146>
        anglesbeforeignite[i] = -angle[i] - ignite;
 800140c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001414:	4413      	add	r3, r2
 8001416:	3b38      	subs	r3, #56	; 0x38
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	eeb1 7a67 	vneg.f32	s14, s15
 8001420:	edd7 7a05 	vldr	s15, [r7, #20]
 8001424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001430:	4413      	add	r3, r2
 8001432:	3b40      	subs	r3, #64	; 0x40
 8001434:	edc3 7a00 	vstr	s15, [r3]
 8001438:	e017      	b.n	800146a <acis_loop+0x176>
      else
        anglesbeforeignite[i] = 360.0f - angle[i] - ignite;
 800143a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001442:	4413      	add	r3, r2
 8001444:	3b38      	subs	r3, #56	; 0x38
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001574 <acis_loop+0x280>
 800144e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001452:	edd7 7a05 	vldr	s15, [r7, #20]
 8001456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001462:	4413      	add	r3, r2
 8001464:	3b40      	subs	r3, #64	; 0x40
 8001466:	edc3 7a00 	vstr	s15, [r3]

      if(anglesbeforeignite[i] - saturate < 0.0f)
 800146a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001472:	4413      	add	r3, r2
 8001474:	3b40      	subs	r3, #64	; 0x40
 8001476:	ed93 7a00 	vldr	s14, [r3]
 800147a:	edd7 7a04 	vldr	s15, [r7, #16]
 800147e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001482:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148a:	d510      	bpl.n	80014ae <acis_loop+0x1ba>
      {
        if(!saturated[i])
 800148c:	4a3a      	ldr	r2, [pc, #232]	; (8001578 <acis_loop+0x284>)
 800148e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001490:	4413      	add	r3, r2
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10f      	bne.n	80014b8 <acis_loop+0x1c4>
        {
          saturated[i] = 1;
 8001498:	4a37      	ldr	r2, [pc, #220]	; (8001578 <acis_loop+0x284>)
 800149a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800149c:	4413      	add	r3, r2
 800149e:	2201      	movs	r2, #1
 80014a0:	701a      	strb	r2, [r3, #0]
          acis_saturate(i);
 80014a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fcd2 	bl	8000e50 <acis_saturate>
 80014ac:	e004      	b.n	80014b8 <acis_loop+0x1c4>
        }
      }
      else saturated[i] = 0;
 80014ae:	4a32      	ldr	r2, [pc, #200]	; (8001578 <acis_loop+0x284>)
 80014b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b2:	4413      	add	r3, r2
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]

      if(oldanglesbeforeignite[i] - anglesbeforeignite[i] < 0.0f)
 80014b8:	4a30      	ldr	r2, [pc, #192]	; (800157c <acis_loop+0x288>)
 80014ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	ed93 7a00 	vldr	s14, [r3]
 80014c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80014cc:	4413      	add	r3, r2
 80014ce:	3b40      	subs	r3, #64	; 0x40
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e0:	d510      	bpl.n	8001504 <acis_loop+0x210>
      {
        if(!ignited[i])
 80014e2:	4a27      	ldr	r2, [pc, #156]	; (8001580 <acis_loop+0x28c>)
 80014e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014e6:	4413      	add	r3, r2
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10f      	bne.n	800150e <acis_loop+0x21a>
        {
          ignited[i] = 1;
 80014ee:	4a24      	ldr	r2, [pc, #144]	; (8001580 <acis_loop+0x28c>)
 80014f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f2:	4413      	add	r3, r2
 80014f4:	2201      	movs	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]
          acis_ignite(i);
 80014f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fc93 	bl	8000e28 <acis_ignite>
 8001502:	e004      	b.n	800150e <acis_loop+0x21a>
        }
      }
      else ignited[i] = 0;
 8001504:	4a1e      	ldr	r2, [pc, #120]	; (8001580 <acis_loop+0x28c>)
 8001506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001508:	4413      	add	r3, r2
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]

      oldanglesbeforeignite[i] = anglesbeforeignite[i];
 800150e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001516:	4413      	add	r3, r2
 8001518:	3b40      	subs	r3, #64	; 0x40
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4917      	ldr	r1, [pc, #92]	; (800157c <acis_loop+0x288>)
 800151e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	440b      	add	r3, r1
 8001524:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 2; i++)
 8001526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001528:	3301      	adds	r3, #1
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
 800152c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800152e:	2b01      	cmp	r3, #1
 8001530:	f77f af5b 	ble.w	80013ea <acis_loop+0xf6>
 8001534:	e003      	b.n	800153e <acis_loop+0x24a>

    }
  }
  else
  {
    angle_ignite = 0;
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <acis_loop+0x278>)
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
  }

  oldsaturate = saturate;
 800153e:	4a11      	ldr	r2, [pc, #68]	; (8001584 <acis_loop+0x290>)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	6013      	str	r3, [r2, #0]

  acis_hall_loop();
 8001544:	f7ff fe8c 	bl	8001260 <acis_hall_loop>

  acis_ignition_loop();
 8001548:	f7ff fc96 	bl	8000e78 <acis_ignition_loop>
}
 800154c:	bf00      	nop
 800154e:	3740      	adds	r7, #64	; 0x40
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	463b8000 	.word	0x463b8000
 8001558:	40000c00 	.word	0x40000c00
 800155c:	20010064 	.word	0x20010064
 8001560:	2001032c 	.word	0x2001032c
 8001564:	465ac000 	.word	0x465ac000
 8001568:	3f5b6db7 	.word	0x3f5b6db7
 800156c:	2001005c 	.word	0x2001005c
 8001570:	20010060 	.word	0x20010060
 8001574:	43b40000 	.word	0x43b40000
 8001578:	20010004 	.word	0x20010004
 800157c:	20010068 	.word	0x20010068
 8001580:	20010008 	.word	0x20010008
 8001584:	20010070 	.word	0x20010070

08001588 <csps_exti>:
{

}

inline void csps_exti(void)
{
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b092      	sub	sp, #72	; 0x48
 800158c:	af00      	add	r7, sp, #0
  static uint32_t t1 = 0;
  static uint32_t t2 = 0;
  uint32_t i, ticks, cur, prev;
  sCspsData data;
  float cs14, cs23;
  float average = 0;
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	63fb      	str	r3, [r7, #60]	; 0x3c
  float diff = 0;
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
  float rpm_koff = 1.0f / 60.0f;
 800159a:	4baf      	ldr	r3, [pc, #700]	; (8001858 <csps_exti+0x2d0>)
 800159c:	63bb      	str	r3, [r7, #56]	; 0x38
  float uspa_koff = 1.0f / 10.0f;
 800159e:	4baf      	ldr	r3, [pc, #700]	; (800185c <csps_exti+0x2d4>)
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30

  cur = Delay_Tick;
 80015a2:	4baf      	ldr	r3, [pc, #700]	; (8001860 <csps_exti+0x2d8>)
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  csps_pulse_last = cur;
 80015a8:	4aae      	ldr	r2, [pc, #696]	; (8001864 <csps_exti+0x2dc>)
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	6013      	str	r3, [r2, #0]
  for(i = 1; i < IRQ_SIZE; i++)
 80015ae:	2301      	movs	r3, #1
 80015b0:	647b      	str	r3, [r7, #68]	; 0x44
 80015b2:	e00b      	b.n	80015cc <csps_exti+0x44>
    cspc_irq_data[i - 1] = cspc_irq_data[i];
 80015b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015b6:	3b01      	subs	r3, #1
 80015b8:	49ab      	ldr	r1, [pc, #684]	; (8001868 <csps_exti+0x2e0>)
 80015ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80015c0:	49a9      	ldr	r1, [pc, #676]	; (8001868 <csps_exti+0x2e0>)
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(i = 1; i < IRQ_SIZE; i++)
 80015c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015c8:	3301      	adds	r3, #1
 80015ca:	647b      	str	r3, [r7, #68]	; 0x44
 80015cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ce:	2b07      	cmp	r3, #7
 80015d0:	d9f0      	bls.n	80015b4 <csps_exti+0x2c>
  cspc_irq_data[IRQ_SIZE - 1] = cur;
 80015d2:	4aa5      	ldr	r2, [pc, #660]	; (8001868 <csps_exti+0x2e0>)
 80015d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d6:	61d3      	str	r3, [r2, #28]
  if(cspc_irq_data[0] == 0)
 80015d8:	4ba3      	ldr	r3, [pc, #652]	; (8001868 <csps_exti+0x2e0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8239 	beq.w	8001a54 <csps_exti+0x4cc>
    return;
  prev = cspc_irq_data[IRQ_SIZE - 2];
 80015e2:	4ba1      	ldr	r3, [pc, #644]	; (8001868 <csps_exti+0x2e0>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	643b      	str	r3, [r7, #64]	; 0x40
  csps_rotates = 1;
 80015e8:	4ba0      	ldr	r3, [pc, #640]	; (800186c <csps_exti+0x2e4>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]

  t1++;
 80015ee:	4ba0      	ldr	r3, [pc, #640]	; (8001870 <csps_exti+0x2e8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	4a9e      	ldr	r2, [pc, #632]	; (8001870 <csps_exti+0x2e8>)
 80015f6:	6013      	str	r3, [r2, #0]

  for(i = 1; i < IRQ_SIZE; i++)
 80015f8:	2301      	movs	r3, #1
 80015fa:	647b      	str	r3, [r7, #68]	; 0x44
 80015fc:	e018      	b.n	8001630 <csps_exti+0xa8>
  {
    average += DelayDiff(cspc_irq_data[i], cspc_irq_data[i - 1]);;
 80015fe:	4a9a      	ldr	r2, [pc, #616]	; (8001868 <csps_exti+0x2e0>)
 8001600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001602:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001608:	3b01      	subs	r3, #1
 800160a:	4a97      	ldr	r2, [pc, #604]	; (8001868 <csps_exti+0x2e0>)
 800160c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001610:	4619      	mov	r1, r3
 8001612:	f000 fc3b 	bl	8001e8c <DelayDiff>
 8001616:	ee07 0a90 	vmov	s15, r0
 800161a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800161e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001626:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  for(i = 1; i < IRQ_SIZE; i++)
 800162a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800162c:	3301      	adds	r3, #1
 800162e:	647b      	str	r3, [r7, #68]	; 0x44
 8001630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001632:	2b07      	cmp	r3, #7
 8001634:	d9e3      	bls.n	80015fe <csps_exti+0x76>
  }
  average /= (float)(IRQ_SIZE - 1);
 8001636:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800163a:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 800163e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001642:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  avg = average / average_prev;
 8001646:	4b8b      	ldr	r3, [pc, #556]	; (8001874 <csps_exti+0x2ec>)
 8001648:	ed93 7a00 	vldr	s14, [r3]
 800164c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001654:	4b88      	ldr	r3, [pc, #544]	; (8001878 <csps_exti+0x2f0>)
 8001656:	edc3 7a00 	vstr	s15, [r3]

  if(average / average_prev > 1.0f + 1.0f / IRQ_SIZE)
 800165a:	4b86      	ldr	r3, [pc, #536]	; (8001874 <csps_exti+0x2ec>)
 800165c:	ed93 7a00 	vldr	s14, [r3]
 8001660:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001668:	eeb7 7a02 	vmov.f32	s14, #114	; 0x3f900000  1.125
 800166c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001674:	dd26      	ble.n	80016c4 <csps_exti+0x13c>
  {
    if(++t2 == 2)
 8001676:	4b81      	ldr	r3, [pc, #516]	; (800187c <csps_exti+0x2f4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	4a7f      	ldr	r2, [pc, #508]	; (800187c <csps_exti+0x2f4>)
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b7e      	ldr	r3, [pc, #504]	; (800187c <csps_exti+0x2f4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d12e      	bne.n	80016e6 <csps_exti+0x15e>
    {
      ticks = t1;
 8001688:	4b79      	ldr	r3, [pc, #484]	; (8001870 <csps_exti+0x2e8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
      t1 = 0;
 800168e:	4b78      	ldr	r3, [pc, #480]	; (8001870 <csps_exti+0x2e8>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
      t2 = 0;
 8001694:	4b79      	ldr	r3, [pc, #484]	; (800187c <csps_exti+0x2f4>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
      if(ticks != 116)
 800169a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169c:	2b74      	cmp	r3, #116	; 0x74
 800169e:	d00a      	beq.n	80016b6 <csps_exti+0x12e>
        csps_errors += 1.0f;
 80016a0:	4b77      	ldr	r3, [pc, #476]	; (8001880 <csps_exti+0x2f8>)
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016ae:	4b74      	ldr	r3, [pc, #464]	; (8001880 <csps_exti+0x2f8>)
 80016b0:	edc3 7a00 	vstr	s15, [r3]
 80016b4:	e017      	b.n	80016e6 <csps_exti+0x15e>
      else
      {
        csps_last = cur;
 80016b6:	4a73      	ldr	r2, [pc, #460]	; (8001884 <csps_exti+0x2fc>)
 80016b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ba:	6013      	str	r3, [r2, #0]
        csps_found = 1;
 80016bc:	4b72      	ldr	r3, [pc, #456]	; (8001888 <csps_exti+0x300>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e010      	b.n	80016e6 <csps_exti+0x15e>
      }
    }
  }
  else if(t1 >= 116)
 80016c4:	4b6a      	ldr	r3, [pc, #424]	; (8001870 <csps_exti+0x2e8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b73      	cmp	r3, #115	; 0x73
 80016ca:	d90c      	bls.n	80016e6 <csps_exti+0x15e>
  {
    t1 = 1;
 80016cc:	4b68      	ldr	r3, [pc, #416]	; (8001870 <csps_exti+0x2e8>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]
    csps_errors += 1.0f;
 80016d2:	4b6b      	ldr	r3, [pc, #428]	; (8001880 <csps_exti+0x2f8>)
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016e0:	4b67      	ldr	r3, [pc, #412]	; (8001880 <csps_exti+0x2f8>)
 80016e2:	edc3 7a00 	vstr	s15, [r3]
  }

  average_prev = average;
 80016e6:	4a63      	ldr	r2, [pc, #396]	; (8001874 <csps_exti+0x2ec>)
 80016e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016ea:	6013      	str	r3, [r2, #0]

  if(csps_found)
 80016ec:	4b66      	ldr	r3, [pc, #408]	; (8001888 <csps_exti+0x300>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8162 	beq.w	80019bc <csps_exti+0x434>
  {
    switch(t1)
 80016f8:	4b5d      	ldr	r3, [pc, #372]	; (8001870 <csps_exti+0x2e8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d002      	beq.n	8001706 <csps_exti+0x17e>
 8001700:	2b01      	cmp	r3, #1
 8001702:	d029      	beq.n	8001758 <csps_exti+0x1d0>
 8001704:	e036      	b.n	8001774 <csps_exti+0x1ec>
    {
      case 0:
        csps_angle14 = ANGLE_INITIAL;
 8001706:	4b61      	ldr	r3, [pc, #388]	; (800188c <csps_exti+0x304>)
 8001708:	4a61      	ldr	r2, [pc, #388]	; (8001890 <csps_exti+0x308>)
 800170a:	601a      	str	r2, [r3, #0]
        if (ANGLE_INITIAL > 0)
          csps_angle23 = ANGLE_INITIAL - 180.0f;
        else
          csps_angle23 = ANGLE_INITIAL + 180.0f;
 800170c:	4b61      	ldr	r3, [pc, #388]	; (8001894 <csps_exti+0x30c>)
 800170e:	4a62      	ldr	r2, [pc, #392]	; (8001898 <csps_exti+0x310>)
 8001710:	601a      	str	r2, [r3, #0]
        cs14_p = csps_angle14 - 3.0f;
 8001712:	4b5e      	ldr	r3, [pc, #376]	; (800188c <csps_exti+0x304>)
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800171c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001720:	4b5e      	ldr	r3, [pc, #376]	; (800189c <csps_exti+0x314>)
 8001722:	edc3 7a00 	vstr	s15, [r3]
        cs23_p = csps_angle23 - 3.0f;
 8001726:	4b5b      	ldr	r3, [pc, #364]	; (8001894 <csps_exti+0x30c>)
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001730:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001734:	4b5a      	ldr	r3, [pc, #360]	; (80018a0 <csps_exti+0x318>)
 8001736:	edc3 7a00 	vstr	s15, [r3]
        prev = DelayDiff(cur, (DelayDiff(cur, prev) / 3));
 800173a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800173c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800173e:	f000 fba5 	bl	8001e8c <DelayDiff>
 8001742:	4602      	mov	r2, r0
 8001744:	4b57      	ldr	r3, [pc, #348]	; (80018a4 <csps_exti+0x31c>)
 8001746:	fba3 2302 	umull	r2, r3, r3, r2
 800174a:	085b      	lsrs	r3, r3, #1
 800174c:	4619      	mov	r1, r3
 800174e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001750:	f000 fb9c 	bl	8001e8c <DelayDiff>
 8001754:	6438      	str	r0, [r7, #64]	; 0x40
        break;
 8001756:	e0b6      	b.n	80018c6 <csps_exti+0x33e>
      case 1:
        prev = DelayDiff(cur, (DelayDiff(cur, prev) / 3)); // @suppress("No break at end of case")
 8001758:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800175a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800175c:	f000 fb96 	bl	8001e8c <DelayDiff>
 8001760:	4602      	mov	r2, r0
 8001762:	4b50      	ldr	r3, [pc, #320]	; (80018a4 <csps_exti+0x31c>)
 8001764:	fba3 2302 	umull	r2, r3, r3, r2
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	4619      	mov	r1, r3
 800176c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800176e:	f000 fb8d 	bl	8001e8c <DelayDiff>
 8001772:	6438      	str	r0, [r7, #64]	; 0x40
      default:
        cs14 = csps_angle14 + 3.0f;
 8001774:	4b45      	ldr	r3, [pc, #276]	; (800188c <csps_exti+0x304>)
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800177e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001782:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        if(cs14 > 180.0f) csps_angle14 = cs14 - 360.0f;
 8001786:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800178a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80018a8 <csps_exti+0x320>
 800178e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001796:	dd09      	ble.n	80017ac <csps_exti+0x224>
 8001798:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800179c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80018ac <csps_exti+0x324>
 80017a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017a4:	4b39      	ldr	r3, [pc, #228]	; (800188c <csps_exti+0x304>)
 80017a6:	edc3 7a00 	vstr	s15, [r3]
 80017aa:	e002      	b.n	80017b2 <csps_exti+0x22a>
        else csps_angle14 = cs14;
 80017ac:	4a37      	ldr	r2, [pc, #220]	; (800188c <csps_exti+0x304>)
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	6013      	str	r3, [r2, #0]

        cs23 = csps_angle23 + 3.0f;
 80017b2:	4b38      	ldr	r3, [pc, #224]	; (8001894 <csps_exti+0x30c>)
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80017bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017c0:	edc7 7a08 	vstr	s15, [r7, #32]
        if(cs23 > 180.0f) csps_angle23 = cs23 - 360.0f;
 80017c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80017c8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80018a8 <csps_exti+0x320>
 80017cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d4:	dd09      	ble.n	80017ea <csps_exti+0x262>
 80017d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80017da:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80018ac <csps_exti+0x324>
 80017de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017e2:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <csps_exti+0x30c>)
 80017e4:	edc3 7a00 	vstr	s15, [r3]
 80017e8:	e002      	b.n	80017f0 <csps_exti+0x268>
        else csps_angle23 = cs23;
 80017ea:	4a2a      	ldr	r2, [pc, #168]	; (8001894 <csps_exti+0x30c>)
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	6013      	str	r3, [r2, #0]

        cs14_p += 3.0f;
 80017f0:	4b2a      	ldr	r3, [pc, #168]	; (800189c <csps_exti+0x314>)
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80017fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017fe:	4b27      	ldr	r3, [pc, #156]	; (800189c <csps_exti+0x314>)
 8001800:	edc3 7a00 	vstr	s15, [r3]
        if(cs14_p > 180.0f)
 8001804:	4b25      	ldr	r3, [pc, #148]	; (800189c <csps_exti+0x314>)
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80018a8 <csps_exti+0x320>
 800180e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	dd09      	ble.n	800182c <csps_exti+0x2a4>
          cs14_p -= 360.0f;
 8001818:	4b20      	ldr	r3, [pc, #128]	; (800189c <csps_exti+0x314>)
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80018ac <csps_exti+0x324>
 8001822:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001826:	4b1d      	ldr	r3, [pc, #116]	; (800189c <csps_exti+0x314>)
 8001828:	edc3 7a00 	vstr	s15, [r3]

        cs23_p += 3.0f;
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <csps_exti+0x318>)
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001836:	ee77 7a87 	vadd.f32	s15, s15, s14
 800183a:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <csps_exti+0x318>)
 800183c:	edc3 7a00 	vstr	s15, [r3]
        if(cs23_p > 180.0f)
 8001840:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <csps_exti+0x318>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80018a8 <csps_exti+0x320>
 800184a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	dc2d      	bgt.n	80018b0 <csps_exti+0x328>
          cs23_p -= 360.0f;
        break;
 8001854:	e036      	b.n	80018c4 <csps_exti+0x33c>
 8001856:	bf00      	nop
 8001858:	3c888889 	.word	0x3c888889
 800185c:	3dcccccd 	.word	0x3dcccccd
 8001860:	40000c00 	.word	0x40000c00
 8001864:	2001009c 	.word	0x2001009c
 8001868:	20010078 	.word	0x20010078
 800186c:	20010099 	.word	0x20010099
 8001870:	200102b8 	.word	0x200102b8
 8001874:	200102bc 	.word	0x200102bc
 8001878:	200100b4 	.word	0x200100b4
 800187c:	200102c0 	.word	0x200102c0
 8001880:	200100a4 	.word	0x200100a4
 8001884:	200100a0 	.word	0x200100a0
 8001888:	20010098 	.word	0x20010098
 800188c:	200102c4 	.word	0x200102c4
 8001890:	c2e40000 	.word	0xc2e40000
 8001894:	200102c8 	.word	0x200102c8
 8001898:	42840000 	.word	0x42840000
 800189c:	200102cc 	.word	0x200102cc
 80018a0:	200102d0 	.word	0x200102d0
 80018a4:	aaaaaaab 	.word	0xaaaaaaab
 80018a8:	43340000 	.word	0x43340000
 80018ac:	43b40000 	.word	0x43b40000
          cs23_p -= 360.0f;
 80018b0:	4b6a      	ldr	r3, [pc, #424]	; (8001a5c <csps_exti+0x4d4>)
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001a60 <csps_exti+0x4d8>
 80018ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018be:	4b67      	ldr	r3, [pc, #412]	; (8001a5c <csps_exti+0x4d4>)
 80018c0:	edc3 7a00 	vstr	s15, [r3]
        break;
 80018c4:	bf00      	nop
    }

    if(csps_rpm == 0.0f)
 80018c6:	4b67      	ldr	r3, [pc, #412]	; (8001a64 <csps_exti+0x4dc>)
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d4:	d102      	bne.n	80018dc <csps_exti+0x354>
      rpm_koff = 1.0f;
 80018d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80018da:	63bb      	str	r3, [r7, #56]	; 0x38

    diff = (float)DelayDiff(cur, prev);
 80018dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80018de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018e0:	f000 fad4 	bl	8001e8c <DelayDiff>
 80018e4:	ee07 0a90 	vmov	s15, r0
 80018e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ec:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    if(csps_period > 1000000.0f)
 80018f0:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <csps_exti+0x4e0>)
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001a6c <csps_exti+0x4e4>
 80018fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001902:	dd02      	ble.n	800190a <csps_exti+0x382>
      csps_period = 1000000.0f;
 8001904:	4b58      	ldr	r3, [pc, #352]	; (8001a68 <csps_exti+0x4e0>)
 8001906:	4a5a      	ldr	r2, [pc, #360]	; (8001a70 <csps_exti+0x4e8>)
 8001908:	601a      	str	r2, [r3, #0]

    csps_period = csps_period * (1.0f - rpm_koff) + (diff * 120.0f) * rpm_koff;
 800190a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800190e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001912:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001916:	4b54      	ldr	r3, [pc, #336]	; (8001a68 <csps_exti+0x4e0>)
 8001918:	edd3 7a00 	vldr	s15, [r3]
 800191c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001920:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001924:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001a74 <csps_exti+0x4ec>
 8001928:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800192c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001938:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <csps_exti+0x4e0>)
 800193a:	edc3 7a00 	vstr	s15, [r3]
    csps_rpm = 1000000.0f / csps_period * 60.0f;
 800193e:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <csps_exti+0x4e0>)
 8001940:	ed93 7a00 	vldr	s14, [r3]
 8001944:	eddf 6a49 	vldr	s13, [pc, #292]	; 8001a6c <csps_exti+0x4e4>
 8001948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800194c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001a78 <csps_exti+0x4f0>
 8001950:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001954:	4b43      	ldr	r3, [pc, #268]	; (8001a64 <csps_exti+0x4dc>)
 8001956:	edc3 7a00 	vstr	s15, [r3]
    csps_uspa = csps_uspa * (1.0f - uspa_koff) + (diff / 3.0f) * uspa_koff;
 800195a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800195e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001962:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001966:	4b45      	ldr	r3, [pc, #276]	; (8001a7c <csps_exti+0x4f4>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001970:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001974:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8001978:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800197c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001988:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <csps_exti+0x4f4>)
 800198a:	edc3 7a00 	vstr	s15, [r3]

    data.AngleCur14 = csps_angle14;
 800198e:	4b3c      	ldr	r3, [pc, #240]	; (8001a80 <csps_exti+0x4f8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	60bb      	str	r3, [r7, #8]
    data.AngleCur23 = csps_angle23;
 8001994:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <csps_exti+0x4fc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	613b      	str	r3, [r7, #16]
    data.AnglePrev14 = cs14_p;
 800199a:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <csps_exti+0x500>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	60fb      	str	r3, [r7, #12]
    data.AnglePrev23 = cs23_p;
 80019a0:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <csps_exti+0x4d4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	617b      	str	r3, [r7, #20]
    data.DelayPrev = prev;
 80019a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a8:	607b      	str	r3, [r7, #4]
    data.DelayCur = cur;
 80019aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ac:	603b      	str	r3, [r7, #0]
    data.RPM = csps_rpm;
 80019ae:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <csps_exti+0x4dc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	61bb      	str	r3, [r7, #24]
    data.uSPA = csps_uspa;
 80019b4:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <csps_exti+0x4f4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	e029      	b.n	8001a10 <csps_exti+0x488>

  }
  else
  {
    data.AngleCur14 = 0;
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
    data.AngleCur23 = 0;
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
    data.AnglePrev14 = 0;
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
    data.AnglePrev23 = 0;
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
    data.DelayPrev = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
    data.DelayCur = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	603b      	str	r3, [r7, #0]
    data.RPM = 0;
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
    csps_rpm = 0;
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <csps_exti+0x4dc>)
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
    data.uSPA = 1.0f / csps_rpm;
 80019ea:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <csps_exti+0x4dc>)
 80019ec:	ed93 7a00 	vldr	s14, [r3]
 80019f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f8:	edc7 7a07 	vstr	s15, [r7, #28]
    csps_period = 1.0f / csps_rpm;
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <csps_exti+0x4dc>)
 80019fe:	ed93 7a00 	vldr	s14, [r3]
 8001a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <csps_exti+0x4e0>)
 8001a0c:	edc3 7a00 	vstr	s15, [r3]
  }
  CspsData[dataindex] = data;
 8001a10:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <csps_exti+0x504>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <csps_exti+0x508>)
 8001a16:	015b      	lsls	r3, r3, #5
 8001a18:	4413      	add	r3, r2
 8001a1a:	461d      	mov	r5, r3
 8001a1c:	463c      	mov	r4, r7
 8001a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a26:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  CspsDataPtr = &CspsData[dataindex];
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <csps_exti+0x504>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	015b      	lsls	r3, r3, #5
 8001a30:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <csps_exti+0x508>)
 8001a32:	4413      	add	r3, r2
 8001a34:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <csps_exti+0x50c>)
 8001a36:	6013      	str	r3, [r2, #0]
  if(++dataindex >= DATA_SIZE)
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <csps_exti+0x504>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <csps_exti+0x504>)
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <csps_exti+0x504>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	d904      	bls.n	8001a56 <csps_exti+0x4ce>
    dataindex = 0;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <csps_exti+0x504>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
 8001a52:	e000      	b.n	8001a56 <csps_exti+0x4ce>
    return;
 8001a54:	bf00      	nop

}
 8001a56:	3748      	adds	r7, #72	; 0x48
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5c:	200102d0 	.word	0x200102d0
 8001a60:	43b40000 	.word	0x43b40000
 8001a64:	200100a8 	.word	0x200100a8
 8001a68:	200100b0 	.word	0x200100b0
 8001a6c:	49742400 	.word	0x49742400
 8001a70:	49742400 	.word	0x49742400
 8001a74:	42f00000 	.word	0x42f00000
 8001a78:	42700000 	.word	0x42700000
 8001a7c:	200100ac 	.word	0x200100ac
 8001a80:	200102c4 	.word	0x200102c4
 8001a84:	200102c8 	.word	0x200102c8
 8001a88:	200102cc 	.word	0x200102cc
 8001a8c:	200102d4 	.word	0x200102d4
 8001a90:	200100b8 	.word	0x200100b8
 8001a94:	2001000c 	.word	0x2001000c

08001a98 <csps_getangle14>:
  else return 360 + a - b;
}
*/
volatile float rettttt;
inline float csps_getangle14(void)
{
 8001a98:	b5b0      	push	{r4, r5, r7, lr}
 8001a9a:	b08e      	sub	sp, #56	; 0x38
 8001a9c:	af00      	add	r7, sp, #0
  static float angle_prev = 0;
  float now = Delay_Tick;
 8001a9e:	4b53      	ldr	r3, [pc, #332]	; (8001bec <csps_getangle14+0x154>)
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aaa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float angle, acur, aprev, mult, cur;
  sCspsData data = *CspsDataPtr;
 8001aae:	4b50      	ldr	r3, [pc, #320]	; (8001bf0 <csps_getangle14+0x158>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	463c      	mov	r4, r7
 8001ab4:	461d      	mov	r5, r3
 8001ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001abe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  cur = DelayDiff(data.DelayCur, data.DelayPrev);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 f9df 	bl	8001e8c <DelayDiff>
 8001ace:	ee07 0a90 	vmov	s15, r0
 8001ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  now = DelayDiff(now, data.DelayPrev);
 8001ada:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	ee17 0a90 	vmov	r0, s15
 8001aea:	f000 f9cf 	bl	8001e8c <DelayDiff>
 8001aee:	ee07 0a90 	vmov	s15, r0
 8001af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

  acur = data.AngleCur14;
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	633b      	str	r3, [r7, #48]	; 0x30
  aprev = data.AnglePrev14;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24

  if(acur < aprev)
 8001b02:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001b06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b12:	d507      	bpl.n	8001b24 <csps_getangle14+0x8c>
    acur += 360.0f;
 8001b14:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b18:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001bf4 <csps_getangle14+0x15c>
 8001b1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b20:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

  angle = acur - aprev;
 8001b24:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001b28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b30:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  mult = angle / cur;
 8001b34:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001b38:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b40:	edc7 7a08 	vstr	s15, [r7, #32]
  angle = mult * now + aprev;
 8001b44:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b48:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b50:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b58:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

  while(angle > 180.0f)
 8001b5c:	e007      	b.n	8001b6e <csps_getangle14+0xd6>
    angle -= 360.0f;
 8001b5e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b62:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001bf4 <csps_getangle14+0x15c>
 8001b66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b6a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  while(angle > 180.0f)
 8001b6e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b72:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001bf8 <csps_getangle14+0x160>
 8001b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7e:	dcee      	bgt.n	8001b5e <csps_getangle14+0xc6>

  if((angle - angle_prev < 0.0f && angle - angle_prev > -90.0f) || angle - angle_prev > 90.0f)
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <csps_getangle14+0x164>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b96:	d50d      	bpl.n	8001bb4 <csps_getangle14+0x11c>
 8001b98:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <csps_getangle14+0x164>)
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001c00 <csps_getangle14+0x168>
 8001baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	dc0d      	bgt.n	8001bd0 <csps_getangle14+0x138>
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <csps_getangle14+0x164>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001c04 <csps_getangle14+0x16c>
 8001bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bce:	dd02      	ble.n	8001bd6 <csps_getangle14+0x13e>
  {
    angle = angle_prev;
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <csps_getangle14+0x164>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  angle_prev = angle;
 8001bd6:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <csps_getangle14+0x164>)
 8001bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bda:	6013      	str	r3, [r2, #0]

  return angle;
 8001bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bde:	ee07 3a90 	vmov	s15, r3
}
 8001be2:	eeb0 0a67 	vmov.f32	s0, s15
 8001be6:	3738      	adds	r7, #56	; 0x38
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bdb0      	pop	{r4, r5, r7, pc}
 8001bec:	40000c00 	.word	0x40000c00
 8001bf0:	2001000c 	.word	0x2001000c
 8001bf4:	43b40000 	.word	0x43b40000
 8001bf8:	43340000 	.word	0x43340000
 8001bfc:	200102d8 	.word	0x200102d8
 8001c00:	c2b40000 	.word	0xc2b40000
 8001c04:	42b40000 	.word	0x42b40000

08001c08 <csps_getangle23from14>:

  return angle;
}

inline float csps_getangle23from14(float angle)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	ed87 0a01 	vstr	s0, [r7, #4]
  if(angle > 0.0f) angle -= 180.0f;
 8001c12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	dd08      	ble.n	8001c32 <csps_getangle23from14+0x2a>
 8001c20:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c24:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001c58 <csps_getangle23from14+0x50>
 8001c28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c2c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c30:	e007      	b.n	8001c42 <csps_getangle23from14+0x3a>
  else angle += 180.0f;
 8001c32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c36:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001c58 <csps_getangle23from14+0x50>
 8001c3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c3e:	edc7 7a01 	vstr	s15, [r7, #4]
  return angle;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	ee07 3a90 	vmov	s15, r3
}
 8001c48:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	43340000 	.word	0x43340000

08001c5c <csps_getrpm>:

inline float csps_getrpm(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return csps_rpm;
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <csps_getrpm+0x18>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	ee07 3a90 	vmov	s15, r3
}
 8001c68:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	200100a8 	.word	0x200100a8

08001c78 <csps_getuspa>:

inline float csps_getuspa(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return csps_uspa;
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <csps_getuspa+0x18>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	ee07 3a90 	vmov	s15, r3
}
 8001c84:	eeb0 0a67 	vmov.f32	s0, s15
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	200100ac 	.word	0x200100ac

08001c94 <csps_getperiod>:

inline float csps_getperiod(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return csps_period;
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <csps_getperiod+0x18>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	ee07 3a90 	vmov	s15, r3
}
 8001ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	200100b0 	.word	0x200100b0

08001cb0 <csps_isrotates>:

inline uint8_t csps_isrotates(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return csps_rotates;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <csps_isrotates+0x14>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2db      	uxtb	r3, r3
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	20010099 	.word	0x20010099

08001cc8 <csps_isfound>:

inline uint8_t csps_isfound(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return csps_found;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <csps_isfound+0x14>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	b2db      	uxtb	r3, r3
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	20010098 	.word	0x20010098

08001ce0 <csps_loop>:
{
  return csps_errors > 3.0f;
}

inline void csps_loop(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
  static uint32_t last_error_null = 0;

  uint32_t pulse_last = csps_pulse_last;
 8001ce6:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <csps_loop+0xe4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60bb      	str	r3, [r7, #8]
  uint32_t last = csps_last;
 8001cec:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <csps_loop+0xe8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	607b      	str	r3, [r7, #4]
  uint32_t now = Delay_Tick;
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <csps_loop+0xec>)
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	603b      	str	r3, [r7, #0]

  if(DelayDiff(now, pulse_last) > 50000)
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6838      	ldr	r0, [r7, #0]
 8001cfc:	f000 f8c6 	bl	8001e8c <DelayDiff>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d921      	bls.n	8001d4e <csps_loop+0x6e>
  {
    pulse_last = now;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	60bb      	str	r3, [r7, #8]
    for(int i = 0; i < IRQ_SIZE; i++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	e007      	b.n	8001d24 <csps_loop+0x44>
      cspc_irq_data[i] = 0;
 8001d14:	4a2e      	ldr	r2, [pc, #184]	; (8001dd0 <csps_loop+0xf0>)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2100      	movs	r1, #0
 8001d1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0; i < IRQ_SIZE; i++)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3301      	adds	r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b07      	cmp	r3, #7
 8001d28:	ddf4      	ble.n	8001d14 <csps_loop+0x34>
    csps_found = 0;
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <csps_loop+0xf4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
    csps_rpm = 0;
 8001d30:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <csps_loop+0xf8>)
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
    csps_period = 1.0f / csps_rpm;
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <csps_loop+0xf8>)
 8001d3a:	ed93 7a00 	vldr	s14, [r3]
 8001d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d46:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <csps_loop+0xfc>)
 8001d48:	edc3 7a00 	vstr	s15, [r3]
 8001d4c:	e01d      	b.n	8001d8a <csps_loop+0xaa>
  }
  else if(DelayDiff(now, last) > 3000000)
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	6838      	ldr	r0, [r7, #0]
 8001d52:	f000 f89b 	bl	8001e8c <DelayDiff>
 8001d56:	4602      	mov	r2, r0
 8001d58:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <csps_loop+0x100>)
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d915      	bls.n	8001d8a <csps_loop+0xaa>
  {
    last = now;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	607b      	str	r3, [r7, #4]
    csps_found = 0;
 8001d62:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <csps_loop+0xf4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
    csps_rpm = 0;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <csps_loop+0xf8>)
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
    csps_rotates = 0;
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <csps_loop+0x104>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
    csps_period = 1.0f / csps_rpm;
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <csps_loop+0xf8>)
 8001d78:	ed93 7a00 	vldr	s14, [r3]
 8001d7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d84:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <csps_loop+0xfc>)
 8001d86:	edc3 7a00 	vstr	s15, [r3]
  }

  if(DelayDiff(now, last_error_null) > 50000)
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <csps_loop+0x108>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6838      	ldr	r0, [r7, #0]
 8001d92:	f000 f87b 	bl	8001e8c <DelayDiff>
 8001d96:	4602      	mov	r2, r0
 8001d98:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d90c      	bls.n	8001dba <csps_loop+0xda>
  {
    csps_errors *= 0.95f;
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <csps_loop+0x10c>)
 8001da2:	edd3 7a00 	vldr	s15, [r3]
 8001da6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001df0 <csps_loop+0x110>
 8001daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dae:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <csps_loop+0x10c>)
 8001db0:	edc3 7a00 	vstr	s15, [r3]
    last_error_null = now;
 8001db4:	4a0c      	ldr	r2, [pc, #48]	; (8001de8 <csps_loop+0x108>)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	6013      	str	r3, [r2, #0]
  }

}
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2001009c 	.word	0x2001009c
 8001dc8:	200100a0 	.word	0x200100a0
 8001dcc:	40000c00 	.word	0x40000c00
 8001dd0:	20010078 	.word	0x20010078
 8001dd4:	20010098 	.word	0x20010098
 8001dd8:	200100a8 	.word	0x200100a8
 8001ddc:	200100b0 	.word	0x200100b0
 8001de0:	002dc6c0 	.word	0x002dc6c0
 8001de4:	20010099 	.word	0x20010099
 8001de8:	200102dc 	.word	0x200102dc
 8001dec:	200100a4 	.word	0x200100a4
 8001df0:	3f733333 	.word	0x3f733333

08001df4 <DelayInit>:
static TIM_HandleTypeDef htim_delay;

volatile uint32_t DelStart[COUNTERS];

void DelayInit(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
  __DELAY_TIM_CLK_ENABLE();
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <DelayInit+0x88>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <DelayInit+0x88>)
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <DelayInit+0x88>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig;
    TIM_MasterConfigTypeDef sMasterConfig;

    htim_delay.Instance = DelayTimer;
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <DelayInit+0x8c>)
 8001e14:	4a1b      	ldr	r2, [pc, #108]	; (8001e84 <DelayInit+0x90>)
 8001e16:	601a      	str	r2, [r3, #0]

    htim_delay.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) - 1; //This is to set prescaler to 1 MHz
 8001e18:	f003 f9a8 	bl	800516c <HAL_RCC_GetPCLK1Freq>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <DelayInit+0x94>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	0c9b      	lsrs	r3, r3, #18
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	4a15      	ldr	r2, [pc, #84]	; (8001e80 <DelayInit+0x8c>)
 8001e2c:	6053      	str	r3, [r2, #4]
    htim_delay.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2e:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <DelayInit+0x8c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
    htim_delay.Init.Period = 0xFFFFFFFF;
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <DelayInit+0x8c>)
 8001e36:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3a:	60da      	str	r2, [r3, #12]
    htim_delay.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <DelayInit+0x8c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim_delay);
 8001e42:	480f      	ldr	r0, [pc, #60]	; (8001e80 <DelayInit+0x8c>)
 8001e44:	f003 fedd 	bl	8005c02 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e4c:	613b      	str	r3, [r7, #16]
    HAL_TIM_ConfigClockSource(&htim_delay, &sClockSourceConfig);
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	4619      	mov	r1, r3
 8001e54:	480a      	ldr	r0, [pc, #40]	; (8001e80 <DelayInit+0x8c>)
 8001e56:	f004 f9fb 	bl	8006250 <HAL_TIM_ConfigClockSource>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
    HAL_TIMEx_MasterConfigSynchronization(&htim_delay, &sMasterConfig);
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	4619      	mov	r1, r3
 8001e66:	4806      	ldr	r0, [pc, #24]	; (8001e80 <DelayInit+0x8c>)
 8001e68:	f004 fe9c 	bl	8006ba4 <HAL_TIMEx_MasterConfigSynchronization>

    HAL_TIM_Base_Start(&htim_delay);
 8001e6c:	4804      	ldr	r0, [pc, #16]	; (8001e80 <DelayInit+0x8c>)
 8001e6e:	f003 fef3 	bl	8005c58 <HAL_TIM_Base_Start>

}
 8001e72:	bf00      	nop
 8001e74:	3720      	adds	r7, #32
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	200102e0 	.word	0x200102e0
 8001e84:	40000c00 	.word	0x40000c00
 8001e88:	431bde83 	.word	0x431bde83

08001e8c <DelayDiff>:
{
  DelayUs(val * 1000);
}

inline uint32_t DelayDiff(uint32_t a, uint32_t b)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
	if(a >= b)
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d303      	bcc.n	8001ea6 <DelayDiff+0x1a>
		return a - b;
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	e003      	b.n	8001eae <DelayDiff+0x22>
	return (0xFFFFFFFF - b) + a;
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	3b01      	subs	r3, #1
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ec4:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <SCB_EnableICache+0x3c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ed4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <SCB_EnableICache+0x3c>)
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <SCB_EnableICache+0x3c>)
 8001ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ee4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ee8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001f02:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <SCB_EnableDCache+0x7c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001f0a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <SCB_EnableDCache+0x7c>)
 8001f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f14:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	0b5b      	lsrs	r3, r3, #13
 8001f1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f1e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	08db      	lsrs	r3, r3, #3
 8001f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f28:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001f32:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f38:	490f      	ldr	r1, [pc, #60]	; (8001f78 <SCB_EnableDCache+0x7c>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	1e5a      	subs	r2, r3, #1
 8001f44:	60ba      	str	r2, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1ef      	bne.n	8001f2a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1e5a      	subs	r2, r3, #1
 8001f4e:	60fa      	str	r2, [r7, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1e5      	bne.n	8001f20 <SCB_EnableDCache+0x24>
 8001f54:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001f58:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <SCB_EnableDCache+0x7c>)
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	4a06      	ldr	r2, [pc, #24]	; (8001f78 <SCB_EnableDCache+0x7c>)
 8001f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f62:	6153      	str	r3, [r2, #20]
 8001f64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f68:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <HAL_GPIO_EXTI_Callback>:
static void MX_RNG_Init(void);
static void UpdateIWDG(void);
static void UpdateDebugger(void);

inline void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	80fb      	strh	r3, [r7, #6]
  uint32_t now;
  switch(GPIO_Pin)
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f8c:	d006      	beq.n	8001f9c <HAL_GPIO_EXTI_Callback+0x20>
 8001f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f92:	d006      	beq.n	8001fa2 <HAL_GPIO_EXTI_Callback+0x26>
 8001f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f98:	d006      	beq.n	8001fa8 <HAL_GPIO_EXTI_Callback+0x2c>
      break;
    case ADC_STATUS_Pin :
      HAL_TIM_Base_Start_IT(&htim7);
      break;
    default:
      break;
 8001f9a:	e009      	b.n	8001fb0 <HAL_GPIO_EXTI_Callback+0x34>
      csps_exti();
 8001f9c:	f7ff faf4 	bl	8001588 <csps_exti>
      break;
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_EXTI_Callback+0x34>
      acis_hall_exti();
 8001fa2:	f7ff f8c3 	bl	800112c <acis_hall_exti>
      break;
 8001fa6:	e003      	b.n	8001fb0 <HAL_GPIO_EXTI_Callback+0x34>
      HAL_TIM_Base_Start_IT(&htim7);
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001faa:	f003 fe7f 	bl	8005cac <HAL_TIM_Base_Start_IT>
      break;
 8001fae:	bf00      	nop
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200165ac 	.word	0x200165ac

08001fbc <HAL_TIM_PeriodElapsedCallback>:

inline void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  static uint16_t ms_tim = 0;
  if(htim == &htim4)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a10      	ldr	r2, [pc, #64]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d112      	bne.n	8001ff2 <HAL_TIM_PeriodElapsedCallback+0x36>
  {
    acis_loop();
 8001fcc:	f7ff f992 	bl	80012f4 <acis_loop>
    if(++ms_tim >= 500)
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001fda:	801a      	strh	r2, [r3, #0]
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fe4:	d30b      	bcc.n	8001ffe <HAL_TIM_PeriodElapsedCallback+0x42>
    {
      csps_loop();
 8001fe6:	f7ff fe7b 	bl	8001ce0 <csps_loop>
      ms_tim = 0;
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	801a      	strh	r2, [r3, #0]
  }
  else if(htim == &htim7)
  {
    map_adc_read();
  }
}
 8001ff0:	e005      	b.n	8001ffe <HAL_TIM_PeriodElapsedCallback+0x42>
  else if(htim == &htim7)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a06      	ldr	r2, [pc, #24]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_TIM_PeriodElapsedCallback+0x42>
    map_adc_read();
 8001ffa:	f000 fdc1 	bl	8002b80 <map_adc_read>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200161e0 	.word	0x200161e0
 800200c:	20010320 	.word	0x20010320
 8002010:	200165ac 	.word	0x200165ac

08002014 <main>:


int main(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  SCB_EnableICache();
 8002018:	f7ff ff50 	bl	8001ebc <SCB_EnableICache>

  SCB_EnableDCache();
 800201c:	f7ff ff6e 	bl	8001efc <SCB_EnableDCache>

  HAL_Init();
 8002020:	f001 fa36 	bl	8003490 <HAL_Init>

  SystemClock_Config();
 8002024:	f000 f8a4 	bl	8002170 <SystemClock_Config>

  MX_GPIO_Init();
 8002028:	f000 fc38 	bl	800289c <MX_GPIO_Init>
  MX_DMA_Init();
 800202c:	f000 fbe4 	bl	80027f8 <MX_DMA_Init>
  //MX_IWDG_Init();
  MX_USART1_UART_Init();  //Control Communication
 8002030:	f000 fbaa 	bl	8002788 <MX_USART1_UART_Init>
  MX_SPI2_Init(); //SPI Flash
 8002034:	f000 f9d6 	bl	80023e4 <MX_SPI2_Init>
  MX_ADC1_Init(); //Temperature and battery sensor
 8002038:	f000 f932 	bl	80022a0 <MX_ADC1_Init>
  MX_TIM3_Init(); //Servo PWM
 800203c:	f000 fa10 	bl	8002460 <MX_TIM3_Init>
  MX_TIM4_Init(); //ACIS common workout IT
 8002040:	f000 fa7e 	bl	8002540 <MX_TIM4_Init>
  MX_TIM7_Init(); //Wait timer for ADC670
 8002044:	f000 fabe 	bl	80025c4 <MX_TIM7_Init>
  MX_TIM8_Init(); //ADCs trigger strobe
 8002048:	f000 fb04 	bl	8002654 <MX_TIM8_Init>
  MX_CRC_Init();
 800204c:	f000 f98a 	bl	8002364 <MX_CRC_Init>
  MX_RNG_Init();
 8002050:	f000 f9b4 	bl	80023bc <MX_RNG_Init>

  DelayInit();
 8002054:	f7ff fece 	bl	8001df4 <DelayInit>


  map_init();
 8002058:	f000 fd6e 	bl	8002b38 <map_init>
  acis_init();
 800205c:	f7fe fe7e 	bl	8000d5c <acis_init>

  HAL_TIM_Base_Start(&htim8);
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <main+0x5c>)
 8002062:	f003 fdf9 	bl	8005c58 <HAL_TIM_Base_Start>

  while (1)
  {
    UpdateIWDG();
 8002066:	f000 f805 	bl	8002074 <UpdateIWDG>
    UpdateDebugger();
 800206a:	f000 f825 	bl	80020b8 <UpdateDebugger>
    UpdateIWDG();
 800206e:	e7fa      	b.n	8002066 <main+0x52>
 8002070:	200161a0 	.word	0x200161a0

08002074 <UpdateIWDG>:

  }
}

static inline void UpdateIWDG(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
  static uint32_t delay_old = 0;
  uint32_t delay = Delay_Tick;
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <UpdateIWDG+0x34>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	607b      	str	r3, [r7, #4]
  if(DelayDiff(delay, delay_old) > 1000000)
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <UpdateIWDG+0x38>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ff00 	bl	8001e8c <DelayDiff>
 800208c:	4602      	mov	r2, r0
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <UpdateIWDG+0x3c>)
 8002090:	429a      	cmp	r2, r3
 8002092:	d905      	bls.n	80020a0 <UpdateIWDG+0x2c>
  {
    delay_old = delay;
 8002094:	4a05      	ldr	r2, [pc, #20]	; (80020ac <UpdateIWDG+0x38>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6013      	str	r3, [r2, #0]
    HAL_IWDG_Refresh(&hiwdg);
 800209a:	4806      	ldr	r0, [pc, #24]	; (80020b4 <UpdateIWDG+0x40>)
 800209c:	f002 fbb8 	bl	8004810 <HAL_IWDG_Refresh>
  }
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40000c00 	.word	0x40000c00
 80020ac:	20010324 	.word	0x20010324
 80020b0:	000f4240 	.word	0x000f4240
 80020b4:	20016280 	.word	0x20016280

080020b8 <UpdateDebugger>:

static inline void UpdateDebugger(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
  static uint8_t was_attached = 0;
  uint8_t attached = IS_DEBUGGER_ATTACHED();
 80020be:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <UpdateDebugger+0xb0>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	71fb      	strb	r3, [r7, #7]
  if(was_attached != attached)
 80020ca:	4b28      	ldr	r3, [pc, #160]	; (800216c <UpdateDebugger+0xb4>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	79fa      	ldrb	r2, [r7, #7]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d042      	beq.n	800215a <UpdateDebugger+0xa2>
  {
    was_attached = attached;
 80020d4:	4a25      	ldr	r2, [pc, #148]	; (800216c <UpdateDebugger+0xb4>)
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	7013      	strb	r3, [r2, #0]
    if(attached)
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d01e      	beq.n	800211e <UpdateDebugger+0x66>
    {
      __HAL_DBGMCU_FREEZE_IWDG();
 80020e0:	4b21      	ldr	r3, [pc, #132]	; (8002168 <UpdateDebugger+0xb0>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a20      	ldr	r2, [pc, #128]	; (8002168 <UpdateDebugger+0xb0>)
 80020e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020ea:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM4();
 80020ec:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <UpdateDebugger+0xb0>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	4a1d      	ldr	r2, [pc, #116]	; (8002168 <UpdateDebugger+0xb0>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM5();
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <UpdateDebugger+0xb0>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a1a      	ldr	r2, [pc, #104]	; (8002168 <UpdateDebugger+0xb0>)
 80020fe:	f043 0308 	orr.w	r3, r3, #8
 8002102:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM7();
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <UpdateDebugger+0xb0>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4a17      	ldr	r2, [pc, #92]	; (8002168 <UpdateDebugger+0xb0>)
 800210a:	f043 0320 	orr.w	r3, r3, #32
 800210e:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM8();
 8002110:	4b15      	ldr	r3, [pc, #84]	; (8002168 <UpdateDebugger+0xb0>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4a14      	ldr	r2, [pc, #80]	; (8002168 <UpdateDebugger+0xb0>)
 8002116:	f043 0302 	orr.w	r3, r3, #2
 800211a:	60d3      	str	r3, [r2, #12]
      __HAL_DBGMCU_UNFREEZE_TIM5();
      __HAL_DBGMCU_UNFREEZE_TIM7();
      __HAL_DBGMCU_UNFREEZE_TIM8();
    }
  }
}
 800211c:	e01d      	b.n	800215a <UpdateDebugger+0xa2>
      __HAL_DBGMCU_UNFREEZE_IWDG();
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <UpdateDebugger+0xb0>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	4a11      	ldr	r2, [pc, #68]	; (8002168 <UpdateDebugger+0xb0>)
 8002124:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002128:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM4();
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <UpdateDebugger+0xb0>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <UpdateDebugger+0xb0>)
 8002130:	f023 0304 	bic.w	r3, r3, #4
 8002134:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM5();
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <UpdateDebugger+0xb0>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <UpdateDebugger+0xb0>)
 800213c:	f023 0308 	bic.w	r3, r3, #8
 8002140:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM7();
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <UpdateDebugger+0xb0>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	4a08      	ldr	r2, [pc, #32]	; (8002168 <UpdateDebugger+0xb0>)
 8002148:	f023 0320 	bic.w	r3, r3, #32
 800214c:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM8();
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <UpdateDebugger+0xb0>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <UpdateDebugger+0xb0>)
 8002154:	f023 0302 	bic.w	r3, r3, #2
 8002158:	60d3      	str	r3, [r2, #12]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e0042000 	.word	0xe0042000
 800216c:	20010328 	.word	0x20010328

08002170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b0b4      	sub	sp, #208	; 0xd0
 8002174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002176:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800217a:	2230      	movs	r2, #48	; 0x30
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f005 fc5e 	bl	8007a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002184:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	2280      	movs	r2, #128	; 0x80
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f005 fc4f 	bl	8007a40 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a2:	4b3c      	ldr	r3, [pc, #240]	; (8002294 <SystemClock_Config+0x124>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	4a3b      	ldr	r2, [pc, #236]	; (8002294 <SystemClock_Config+0x124>)
 80021a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ac:	6413      	str	r3, [r2, #64]	; 0x40
 80021ae:	4b39      	ldr	r3, [pc, #228]	; (8002294 <SystemClock_Config+0x124>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ba:	4b37      	ldr	r3, [pc, #220]	; (8002298 <SystemClock_Config+0x128>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a36      	ldr	r2, [pc, #216]	; (8002298 <SystemClock_Config+0x128>)
 80021c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b34      	ldr	r3, [pc, #208]	; (8002298 <SystemClock_Config+0x128>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80021d2:	230a      	movs	r3, #10
 80021d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021d8:	2301      	movs	r3, #1
 80021da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = 10;
 80021de:	230a      	movs	r3, #10
 80021e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80021e4:	2301      	movs	r3, #1
 80021e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ea:	2302      	movs	r3, #2
 80021ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021f6:	2308      	movs	r3, #8
 80021f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80021fc:	23d8      	movs	r3, #216	; 0xd8
 80021fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002202:	2302      	movs	r3, #2
 8002204:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002208:	2309      	movs	r3, #9
 800220a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800220e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002212:	4618      	mov	r0, r3
 8002214:	f002 fb5c 	bl	80048d0 <HAL_RCC_OscConfig>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800221e:	f000 fc87 	bl	8002b30 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002222:	f002 fb05 	bl	8004830 <HAL_PWREx_EnableOverDrive>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800222c:	f000 fc80 	bl	8002b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002230:	230f      	movs	r3, #15
 8002232:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002236:	2302      	movs	r3, #2
 8002238:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002242:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002246:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800224a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002252:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002256:	2107      	movs	r1, #7
 8002258:	4618      	mov	r0, r3
 800225a:	f002 fddd 	bl	8004e18 <HAL_RCC_ClockConfig>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002264:	f000 fc64 	bl	8002b30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_CLK48;
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <SystemClock_Config+0x12c>)
 800226a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800226c:	2300      	movs	r3, #0
 800226e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002276:	f107 030c 	add.w	r3, r7, #12
 800227a:	4618      	mov	r0, r3
 800227c:	f002 ff9e 	bl	80051bc <HAL_RCCEx_PeriphCLKConfig>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8002286:	f000 fc53 	bl	8002b30 <Error_Handler>
  }
}
 800228a:	bf00      	nop
 800228c:	37d0      	adds	r7, #208	; 0xd0
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800
 8002298:	40007000 	.word	0x40007000
 800229c:	00200040 	.word	0x00200040

080022a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022a6:	463b      	mov	r3, r7
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022b2:	4b2a      	ldr	r3, [pc, #168]	; (800235c <MX_ADC1_Init+0xbc>)
 80022b4:	4a2a      	ldr	r2, [pc, #168]	; (8002360 <MX_ADC1_Init+0xc0>)
 80022b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022b8:	4b28      	ldr	r3, [pc, #160]	; (800235c <MX_ADC1_Init+0xbc>)
 80022ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022c0:	4b26      	ldr	r3, [pc, #152]	; (800235c <MX_ADC1_Init+0xbc>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022c6:	4b25      	ldr	r3, [pc, #148]	; (800235c <MX_ADC1_Init+0xbc>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022cc:	4b23      	ldr	r3, [pc, #140]	; (800235c <MX_ADC1_Init+0xbc>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022d2:	4b22      	ldr	r3, [pc, #136]	; (800235c <MX_ADC1_Init+0xbc>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <MX_ADC1_Init+0xbc>)
 80022dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80022e2:	4b1e      	ldr	r3, [pc, #120]	; (800235c <MX_ADC1_Init+0xbc>)
 80022e4:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80022e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80022ea:	4b1c      	ldr	r3, [pc, #112]	; (800235c <MX_ADC1_Init+0xbc>)
 80022ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80022f2:	4b1a      	ldr	r3, [pc, #104]	; (800235c <MX_ADC1_Init+0xbc>)
 80022f4:	2202      	movs	r2, #2
 80022f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80022f8:	4b18      	ldr	r3, [pc, #96]	; (800235c <MX_ADC1_Init+0xbc>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002300:	4b16      	ldr	r3, [pc, #88]	; (800235c <MX_ADC1_Init+0xbc>)
 8002302:	2200      	movs	r2, #0
 8002304:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002306:	4815      	ldr	r0, [pc, #84]	; (800235c <MX_ADC1_Init+0xbc>)
 8002308:	f001 f928 	bl	800355c <HAL_ADC_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8002312:	f000 fc0d 	bl	8002b30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002316:	230c      	movs	r3, #12
 8002318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800231a:	2301      	movs	r3, #1
 800231c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002322:	463b      	mov	r3, r7
 8002324:	4619      	mov	r1, r3
 8002326:	480d      	ldr	r0, [pc, #52]	; (800235c <MX_ADC1_Init+0xbc>)
 8002328:	f001 f95c 	bl	80035e4 <HAL_ADC_ConfigChannel>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8002332:	f000 fbfd 	bl	8002b30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002336:	230d      	movs	r3, #13
 8002338:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800233a:	2302      	movs	r3, #2
 800233c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800233e:	463b      	mov	r3, r7
 8002340:	4619      	mov	r1, r3
 8002342:	4806      	ldr	r0, [pc, #24]	; (800235c <MX_ADC1_Init+0xbc>)
 8002344:	f001 f94e 	bl	80035e4 <HAL_ADC_ConfigChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800234e:	f000 fbef 	bl	8002b30 <Error_Handler>
  */
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200163b4 	.word	0x200163b4
 8002360:	40012000 	.word	0x40012000

08002364 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <MX_CRC_Init+0x50>)
 800236a:	4a13      	ldr	r2, [pc, #76]	; (80023b8 <MX_CRC_Init+0x54>)
 800236c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <MX_CRC_Init+0x50>)
 8002370:	2201      	movs	r2, #1
 8002372:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <MX_CRC_Init+0x50>)
 8002376:	2201      	movs	r2, #1
 8002378:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = CRC_POLY;
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <MX_CRC_Init+0x50>)
 800237c:	f24a 0201 	movw	r2, #40961	; 0xa001
 8002380:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <MX_CRC_Init+0x50>)
 8002384:	2208      	movs	r2, #8
 8002386:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <MX_CRC_Init+0x50>)
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <MX_CRC_Init+0x50>)
 8002390:	2220      	movs	r2, #32
 8002392:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8002394:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <MX_CRC_Init+0x50>)
 8002396:	2280      	movs	r2, #128	; 0x80
 8002398:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <MX_CRC_Init+0x50>)
 800239c:	2201      	movs	r2, #1
 800239e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80023a0:	4804      	ldr	r0, [pc, #16]	; (80023b4 <MX_CRC_Init+0x50>)
 80023a2:	f001 fc75 	bl	8003c90 <HAL_CRC_Init>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 80023ac:	f000 fbc0 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20016290 	.word	0x20016290
 80023b8:	40023000 	.word	0x40023000

080023bc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <MX_RNG_Init+0x20>)
 80023c2:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <MX_RNG_Init+0x24>)
 80023c4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_RNG_Init+0x20>)
 80023c8:	f003 fa40 	bl	800584c <HAL_RNG_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80023d2:	f000 fbad 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	2001653c 	.word	0x2001653c
 80023e0:	50060800 	.word	0x50060800

080023e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80023e8:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <MX_SPI2_Init+0x74>)
 80023ea:	4a1c      	ldr	r2, [pc, #112]	; (800245c <MX_SPI2_Init+0x78>)
 80023ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <MX_SPI2_Init+0x74>)
 80023f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023f6:	4b18      	ldr	r3, [pc, #96]	; (8002458 <MX_SPI2_Init+0x74>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023fc:	4b16      	ldr	r3, [pc, #88]	; (8002458 <MX_SPI2_Init+0x74>)
 80023fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002402:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <MX_SPI2_Init+0x74>)
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800240a:	4b13      	ldr	r3, [pc, #76]	; (8002458 <MX_SPI2_Init+0x74>)
 800240c:	2200      	movs	r2, #0
 800240e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <MX_SPI2_Init+0x74>)
 8002412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002416:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <MX_SPI2_Init+0x74>)
 800241a:	2200      	movs	r2, #0
 800241c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <MX_SPI2_Init+0x74>)
 8002420:	2200      	movs	r2, #0
 8002422:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <MX_SPI2_Init+0x74>)
 8002426:	2200      	movs	r2, #0
 8002428:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <MX_SPI2_Init+0x74>)
 800242c:	2200      	movs	r2, #0
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <MX_SPI2_Init+0x74>)
 8002432:	2207      	movs	r2, #7
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <MX_SPI2_Init+0x74>)
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <MX_SPI2_Init+0x74>)
 800243e:	2208      	movs	r2, #8
 8002440:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <MX_SPI2_Init+0x74>)
 8002444:	f003 fa2c 	bl	80058a0 <HAL_SPI_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800244e:	f000 fb6f 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	2001613c 	.word	0x2001613c
 800245c:	40003800 	.word	0x40003800

08002460 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	; 0x28
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002466:	f107 031c 	add.w	r3, r7, #28
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002472:	463b      	mov	r3, r7
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
 8002480:	615a      	str	r2, [r3, #20]
 8002482:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002484:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <MX_TIM3_Init+0xd4>)
 8002486:	4a2c      	ldr	r2, [pc, #176]	; (8002538 <MX_TIM3_Init+0xd8>)
 8002488:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 50 / 5120) - 1; //This is to set prescaler to 1 MHz
 800248a:	f002 fe6f 	bl	800516c <HAL_RCC_GetPCLK1Freq>
 800248e:	4603      	mov	r3, r0
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4a2a      	ldr	r2, [pc, #168]	; (800253c <MX_TIM3_Init+0xdc>)
 8002494:	fba2 2303 	umull	r2, r3, r2, r3
 8002498:	0b9b      	lsrs	r3, r3, #14
 800249a:	3b01      	subs	r3, #1
 800249c:	4a25      	ldr	r2, [pc, #148]	; (8002534 <MX_TIM3_Init+0xd4>)
 800249e:	6053      	str	r3, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <MX_TIM3_Init+0xd4>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5119;
 80024a6:	4b23      	ldr	r3, [pc, #140]	; (8002534 <MX_TIM3_Init+0xd4>)
 80024a8:	f241 32ff 	movw	r2, #5119	; 0x13ff
 80024ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ae:	4b21      	ldr	r3, [pc, #132]	; (8002534 <MX_TIM3_Init+0xd4>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <MX_TIM3_Init+0xd4>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024ba:	481e      	ldr	r0, [pc, #120]	; (8002534 <MX_TIM3_Init+0xd4>)
 80024bc:	f003 fc20 	bl	8005d00 <HAL_TIM_PWM_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80024c6:	f000 fb33 	bl	8002b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024d2:	f107 031c 	add.w	r3, r7, #28
 80024d6:	4619      	mov	r1, r3
 80024d8:	4816      	ldr	r0, [pc, #88]	; (8002534 <MX_TIM3_Init+0xd4>)
 80024da:	f004 fb63 	bl	8006ba4 <HAL_TIMEx_MasterConfigSynchronization>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80024e4:	f000 fb24 	bl	8002b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024e8:	2360      	movs	r3, #96	; 0x60
 80024ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 256;
 80024ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024fa:	463b      	mov	r3, r7
 80024fc:	2208      	movs	r2, #8
 80024fe:	4619      	mov	r1, r3
 8002500:	480c      	ldr	r0, [pc, #48]	; (8002534 <MX_TIM3_Init+0xd4>)
 8002502:	f003 fd8d 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800250c:	f000 fb10 	bl	8002b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002510:	463b      	mov	r3, r7
 8002512:	220c      	movs	r2, #12
 8002514:	4619      	mov	r1, r3
 8002516:	4807      	ldr	r0, [pc, #28]	; (8002534 <MX_TIM3_Init+0xd4>)
 8002518:	f003 fd82 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8002522:	f000 fb05 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002526:	4803      	ldr	r0, [pc, #12]	; (8002534 <MX_TIM3_Init+0xd4>)
 8002528:	f000 fdc0 	bl	80030ac <HAL_TIM_MspPostInit>

}
 800252c:	bf00      	nop
 800252e:	3728      	adds	r7, #40	; 0x28
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20016314 	.word	0x20016314
 8002538:	40000400 	.word	0x40000400
 800253c:	10624dd3 	.word	0x10624dd3

08002540 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002546:	463b      	mov	r3, r7
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002552:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <MX_TIM4_Init+0x78>)
 8002554:	4a19      	ldr	r2, [pc, #100]	; (80025bc <MX_TIM4_Init+0x7c>)
 8002556:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) - 1; //This is to set prescaler to 1 MHz
 8002558:	f002 fe08 	bl	800516c <HAL_RCC_GetPCLK1Freq>
 800255c:	4603      	mov	r3, r0
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4a17      	ldr	r2, [pc, #92]	; (80025c0 <MX_TIM4_Init+0x80>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	0c9b      	lsrs	r3, r3, #18
 8002568:	3b01      	subs	r3, #1
 800256a:	4a13      	ldr	r2, [pc, #76]	; (80025b8 <MX_TIM4_Init+0x78>)
 800256c:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <MX_TIM4_Init+0x78>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 14;
 8002574:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <MX_TIM4_Init+0x78>)
 8002576:	220e      	movs	r2, #14
 8002578:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257a:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <MX_TIM4_Init+0x78>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002580:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <MX_TIM4_Init+0x78>)
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002586:	480c      	ldr	r0, [pc, #48]	; (80025b8 <MX_TIM4_Init+0x78>)
 8002588:	f003 fb3b 	bl	8005c02 <HAL_TIM_Base_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002592:	f000 facd 	bl	8002b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800259a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800259c:	463b      	mov	r3, r7
 800259e:	4619      	mov	r1, r3
 80025a0:	4805      	ldr	r0, [pc, #20]	; (80025b8 <MX_TIM4_Init+0x78>)
 80025a2:	f003 fe55 	bl	8006250 <HAL_TIM_ConfigClockSource>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80025ac:	f000 fac0 	bl	8002b30 <Error_Handler>
  }

}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	200161e0 	.word	0x200161e0
 80025bc:	40000800 	.word	0x40000800
 80025c0:	431bde83 	.word	0x431bde83

080025c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80025d4:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <MX_TIM7_Init+0x84>)
 80025d6:	4a1d      	ldr	r2, [pc, #116]	; (800264c <MX_TIM7_Init+0x88>)
 80025d8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80025da:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <MX_TIM7_Init+0x84>)
 80025dc:	2200      	movs	r2, #0
 80025de:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <MX_TIM7_Init+0x84>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) / 2 - 1; //This is to set period to 2 MHz;
 80025e6:	f002 fdc1 	bl	800516c <HAL_RCC_GetPCLK1Freq>
 80025ea:	4603      	mov	r3, r0
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4a18      	ldr	r2, [pc, #96]	; (8002650 <MX_TIM7_Init+0x8c>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	0cdb      	lsrs	r3, r3, #19
 80025f6:	3b01      	subs	r3, #1
 80025f8:	4a13      	ldr	r2, [pc, #76]	; (8002648 <MX_TIM7_Init+0x84>)
 80025fa:	60d3      	str	r3, [r2, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <MX_TIM7_Init+0x84>)
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002602:	4811      	ldr	r0, [pc, #68]	; (8002648 <MX_TIM7_Init+0x84>)
 8002604:	f003 fafd 	bl	8005c02 <HAL_TIM_Base_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM7_Init+0x4e>
  {
    Error_Handler();
 800260e:	f000 fa8f 	bl	8002b30 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 8002612:	2108      	movs	r1, #8
 8002614:	480c      	ldr	r0, [pc, #48]	; (8002648 <MX_TIM7_Init+0x84>)
 8002616:	f003 fb9e 	bl	8005d56 <HAL_TIM_OnePulse_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM7_Init+0x60>
  {
    Error_Handler();
 8002620:	f000 fa86 	bl	8002b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002624:	2320      	movs	r3, #32
 8002626:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	4619      	mov	r1, r3
 8002630:	4805      	ldr	r0, [pc, #20]	; (8002648 <MX_TIM7_Init+0x84>)
 8002632:	f004 fab7 	bl	8006ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM7_Init+0x7c>
  {
    Error_Handler();
 800263c:	f000 fa78 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002640:	bf00      	nop
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	200165ac 	.word	0x200165ac
 800264c:	40001400 	.word	0x40001400
 8002650:	431bde83 	.word	0x431bde83

08002654 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b096      	sub	sp, #88	; 0x58
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	605a      	str	r2, [r3, #4]
 8002664:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	60da      	str	r2, [r3, #12]
 8002674:	611a      	str	r2, [r3, #16]
 8002676:	615a      	str	r2, [r3, #20]
 8002678:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	222c      	movs	r2, #44	; 0x2c
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f005 f9dd 	bl	8007a40 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002686:	4b3d      	ldr	r3, [pc, #244]	; (800277c <MX_TIM8_Init+0x128>)
 8002688:	4a3d      	ldr	r2, [pc, #244]	; (8002780 <MX_TIM8_Init+0x12c>)
 800268a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = (HAL_RCC_GetPCLK2Freq() * 2 / 1000000) - 1; //This is to set prescaler to 1 MHz
 800268c:	f002 fd82 	bl	8005194 <HAL_RCC_GetPCLK2Freq>
 8002690:	4603      	mov	r3, r0
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4a3b      	ldr	r2, [pc, #236]	; (8002784 <MX_TIM8_Init+0x130>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	0c9b      	lsrs	r3, r3, #18
 800269c:	3b01      	subs	r3, #1
 800269e:	4a37      	ldr	r2, [pc, #220]	; (800277c <MX_TIM8_Init+0x128>)
 80026a0:	6053      	str	r3, [r2, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a2:	4b36      	ldr	r3, [pc, #216]	; (800277c <MX_TIM8_Init+0x128>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 80026a8:	4b34      	ldr	r3, [pc, #208]	; (800277c <MX_TIM8_Init+0x128>)
 80026aa:	2231      	movs	r2, #49	; 0x31
 80026ac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ae:	4b33      	ldr	r3, [pc, #204]	; (800277c <MX_TIM8_Init+0x128>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026b4:	4b31      	ldr	r3, [pc, #196]	; (800277c <MX_TIM8_Init+0x128>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ba:	4b30      	ldr	r3, [pc, #192]	; (800277c <MX_TIM8_Init+0x128>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80026c0:	482e      	ldr	r0, [pc, #184]	; (800277c <MX_TIM8_Init+0x128>)
 80026c2:	f003 fb1d 	bl	8005d00 <HAL_TIM_PWM_Init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80026cc:	f000 fa30 	bl	8002b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026d0:	2320      	movs	r3, #32
 80026d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026d4:	2300      	movs	r3, #0
 80026d6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d8:	2300      	movs	r3, #0
 80026da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026e0:	4619      	mov	r1, r3
 80026e2:	4826      	ldr	r0, [pc, #152]	; (800277c <MX_TIM8_Init+0x128>)
 80026e4:	f004 fa5e 	bl	8006ba4 <HAL_TIMEx_MasterConfigSynchronization>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80026ee:	f000 fa1f 	bl	8002b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026f2:	2360      	movs	r3, #96	; 0x60
 80026f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1;
 80026f6:	2301      	movs	r3, #1
 80026f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026fa:	2300      	movs	r3, #0
 80026fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80026fe:	2308      	movs	r3, #8
 8002700:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800270a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800270e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002710:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002714:	2208      	movs	r2, #8
 8002716:	4619      	mov	r1, r3
 8002718:	4818      	ldr	r0, [pc, #96]	; (800277c <MX_TIM8_Init+0x128>)
 800271a:	f003 fc81 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 8002724:	f000 fa04 	bl	8002b30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800273c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002740:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800274a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002754:	2300      	movs	r3, #0
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	4619      	mov	r1, r3
 800275c:	4807      	ldr	r0, [pc, #28]	; (800277c <MX_TIM8_Init+0x128>)
 800275e:	f004 faaf 	bl	8006cc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8002768:	f000 f9e2 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800276c:	4803      	ldr	r0, [pc, #12]	; (800277c <MX_TIM8_Init+0x128>)
 800276e:	f000 fc9d 	bl	80030ac <HAL_TIM_MspPostInit>

}
 8002772:	bf00      	nop
 8002774:	3758      	adds	r7, #88	; 0x58
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200161a0 	.word	0x200161a0
 8002780:	40010400 	.word	0x40010400
 8002784:	431bde83 	.word	0x431bde83

08002788 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800278c:	4b17      	ldr	r3, [pc, #92]	; (80027ec <MX_USART1_UART_Init+0x64>)
 800278e:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <MX_USART1_UART_Init+0x68>)
 8002790:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3375000;
 8002792:	4b16      	ldr	r3, [pc, #88]	; (80027ec <MX_USART1_UART_Init+0x64>)
 8002794:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <MX_USART1_UART_Init+0x6c>)
 8002796:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <MX_USART1_UART_Init+0x64>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <MX_USART1_UART_Init+0x64>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <MX_USART1_UART_Init+0x64>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <MX_USART1_UART_Init+0x64>)
 80027ac:	220c      	movs	r2, #12
 80027ae:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <MX_USART1_UART_Init+0x64>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b6:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <MX_USART1_UART_Init+0x64>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <MX_USART1_UART_Init+0x64>)
 80027be:	2200      	movs	r2, #0
 80027c0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <MX_USART1_UART_Init+0x64>)
 80027c4:	2240      	movs	r2, #64	; 0x40
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <MX_USART1_UART_Init+0x64>)
 80027ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME;
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <MX_USART1_UART_Init+0x64>)
 80027d2:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80027d6:	645a      	str	r2, [r3, #68]	; 0x44
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027d8:	4804      	ldr	r0, [pc, #16]	; (80027ec <MX_USART1_UART_Init+0x64>)
 80027da:	f004 fb32 	bl	8006e42 <HAL_UART_Init>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 80027e4:	f000 f9a4 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	2001645c 	.word	0x2001645c
 80027f0:	40011000 	.word	0x40011000
 80027f4:	00337f98 	.word	0x00337f98

080027f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027fe:	4b26      	ldr	r3, [pc, #152]	; (8002898 <MX_DMA_Init+0xa0>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a25      	ldr	r2, [pc, #148]	; (8002898 <MX_DMA_Init+0xa0>)
 8002804:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b23      	ldr	r3, [pc, #140]	; (8002898 <MX_DMA_Init+0xa0>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <MX_DMA_Init+0xa0>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <MX_DMA_Init+0xa0>)
 800281c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <MX_DMA_Init+0xa0>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0); //TIM7_UP
 800282e:	2200      	movs	r2, #0
 8002830:	2105      	movs	r1, #5
 8002832:	200d      	movs	r0, #13
 8002834:	f001 f9f5 	bl	8003c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002838:	200d      	movs	r0, #13
 800283a:	f001 fa0e 	bl	8003c5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 15, 0); //SPI2_RX
 800283e:	2200      	movs	r2, #0
 8002840:	210f      	movs	r1, #15
 8002842:	200e      	movs	r0, #14
 8002844:	f001 f9ed 	bl	8003c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002848:	200e      	movs	r0, #14
 800284a:	f001 fa06 	bl	8003c5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 15, 0); //SPI2_TX
 800284e:	2200      	movs	r2, #0
 8002850:	210f      	movs	r1, #15
 8002852:	200f      	movs	r0, #15
 8002854:	f001 f9e5 	bl	8003c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002858:	200f      	movs	r0, #15
 800285a:	f001 f9fe 	bl	8003c5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 6, 0); //ADC1
 800285e:	2200      	movs	r2, #0
 8002860:	2106      	movs	r1, #6
 8002862:	2038      	movs	r0, #56	; 0x38
 8002864:	f001 f9dd 	bl	8003c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002868:	2038      	movs	r0, #56	; 0x38
 800286a:	f001 f9f6 	bl	8003c5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 8, 0); //USART1_RX
 800286e:	2200      	movs	r2, #0
 8002870:	2108      	movs	r1, #8
 8002872:	203a      	movs	r0, #58	; 0x3a
 8002874:	f001 f9d5 	bl	8003c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002878:	203a      	movs	r0, #58	; 0x3a
 800287a:	f001 f9ee 	bl	8003c5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 9, 0); //USART1_TX
 800287e:	2200      	movs	r2, #0
 8002880:	2109      	movs	r1, #9
 8002882:	2046      	movs	r0, #70	; 0x46
 8002884:	f001 f9cd 	bl	8003c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002888:	2046      	movs	r0, #70	; 0x46
 800288a:	f001 f9e6 	bl	8003c5a <HAL_NVIC_EnableIRQ>

}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800

0800289c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	609a      	str	r2, [r3, #8]
 80028ae:	60da      	str	r2, [r3, #12]
 80028b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b2:	4b97      	ldr	r3, [pc, #604]	; (8002b10 <MX_GPIO_Init+0x274>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a96      	ldr	r2, [pc, #600]	; (8002b10 <MX_GPIO_Init+0x274>)
 80028b8:	f043 0304 	orr.w	r3, r3, #4
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b94      	ldr	r3, [pc, #592]	; (8002b10 <MX_GPIO_Init+0x274>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ca:	4b91      	ldr	r3, [pc, #580]	; (8002b10 <MX_GPIO_Init+0x274>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a90      	ldr	r2, [pc, #576]	; (8002b10 <MX_GPIO_Init+0x274>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b8e      	ldr	r3, [pc, #568]	; (8002b10 <MX_GPIO_Init+0x274>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	4b8b      	ldr	r3, [pc, #556]	; (8002b10 <MX_GPIO_Init+0x274>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a8a      	ldr	r2, [pc, #552]	; (8002b10 <MX_GPIO_Init+0x274>)
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b88      	ldr	r3, [pc, #544]	; (8002b10 <MX_GPIO_Init+0x274>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028fa:	4b85      	ldr	r3, [pc, #532]	; (8002b10 <MX_GPIO_Init+0x274>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a84      	ldr	r2, [pc, #528]	; (8002b10 <MX_GPIO_Init+0x274>)
 8002900:	f043 0308 	orr.w	r3, r3, #8
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b82      	ldr	r3, [pc, #520]	; (8002b10 <MX_GPIO_Init+0x274>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VDD3V3EN_Pin|SPI2_WP_Pin|RELAY_IGN_Pin, GPIO_PIN_RESET);
 8002912:	2200      	movs	r2, #0
 8002914:	f240 4141 	movw	r1, #1089	; 0x441
 8002918:	487e      	ldr	r0, [pc, #504]	; (8002b14 <MX_GPIO_Init+0x278>)
 800291a:	f001 ff47 	bl	80047ac <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, IGN_14_Pin|IGN_23_Pin, GPIO_PIN_SET);
 800291e:	2201      	movs	r2, #1
 8002920:	21c0      	movs	r1, #192	; 0xc0
 8002922:	487d      	ldr	r0, [pc, #500]	; (8002b18 <MX_GPIO_Init+0x27c>)
 8002924:	f001 ff42 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_nCE_Pin|LED_CHECK_Pin, GPIO_PIN_SET);
 8002928:	2201      	movs	r2, #1
 800292a:	2190      	movs	r1, #144	; 0x90
 800292c:	4879      	ldr	r0, [pc, #484]	; (8002b14 <MX_GPIO_Init+0x278>)
 800292e:	f001 ff3d 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8002932:	2201      	movs	r2, #1
 8002934:	2101      	movs	r1, #1
 8002936:	4878      	ldr	r0, [pc, #480]	; (8002b18 <MX_GPIO_Init+0x27c>)
 8002938:	f001 ff38 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_FORMAT_Pin|ADC_BPO_Pin|SPI2_NSS_Pin|PROPANE_OUT_Pin
 800293c:	2200      	movs	r2, #0
 800293e:	f241 7104 	movw	r1, #5892	; 0x1704
 8002942:	4875      	ldr	r0, [pc, #468]	; (8002b18 <MX_GPIO_Init+0x27c>)
 8002944:	f001 ff32 	bl	80047ac <HAL_GPIO_WritePin>
                          |PETROL_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_START_GPIO_Port, RELAY_START_Pin, GPIO_PIN_RESET);
 8002948:	2200      	movs	r2, #0
 800294a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800294e:	4873      	ldr	r0, [pc, #460]	; (8002b1c <MX_GPIO_Init+0x280>)
 8002950:	f001 ff2c 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_RESET);
 8002954:	2200      	movs	r2, #0
 8002956:	2104      	movs	r1, #4
 8002958:	4871      	ldr	r0, [pc, #452]	; (8002b20 <MX_GPIO_Init+0x284>)
 800295a:	f001 ff27 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SENS_CSPS_Pin */
  GPIO_InitStruct.Pin = SENS_CSPS_Pin;
 800295e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002964:	4b6f      	ldr	r3, [pc, #444]	; (8002b24 <MX_GPIO_Init+0x288>)
 8002966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002968:	2302      	movs	r3, #2
 800296a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENS_CSPS_GPIO_Port, &GPIO_InitStruct);
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	4619      	mov	r1, r3
 8002972:	4868      	ldr	r0, [pc, #416]	; (8002b14 <MX_GPIO_Init+0x278>)
 8002974:	f001 fd80 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_HALL_Pin */
  GPIO_InitStruct.Pin = SENS_HALL_Pin;
 8002978:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800297c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800297e:	4b6a      	ldr	r3, [pc, #424]	; (8002b28 <MX_GPIO_Init+0x28c>)
 8002980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002982:	2301      	movs	r3, #1
 8002984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002986:	f107 0314 	add.w	r3, r7, #20
 800298a:	4619      	mov	r1, r3
 800298c:	4861      	ldr	r0, [pc, #388]	; (8002b14 <MX_GPIO_Init+0x278>)
 800298e:	f001 fd73 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_ACC_Pin */
  GPIO_InitStruct.Pin = SENS_ACC_Pin;
 8002992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002998:	2300      	movs	r3, #0
 800299a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800299c:	2301      	movs	r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	4619      	mov	r1, r3
 80029a6:	485b      	ldr	r0, [pc, #364]	; (8002b14 <MX_GPIO_Init+0x278>)
 80029a8:	f001 fd66 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : VDD3V3EN_Pin ADC_nCE_Pin LED_CHECK_Pin RELAY_IGN_Pin */
  GPIO_InitStruct.Pin = VDD3V3EN_Pin|ADC_nCE_Pin|LED_CHECK_Pin|RELAY_IGN_Pin;
 80029ac:	f240 4391 	movw	r3, #1169	; 0x491
 80029b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b2:	2301      	movs	r3, #1
 80029b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	2300      	movs	r3, #0
 80029bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029be:	f107 0314 	add.w	r3, r7, #20
 80029c2:	4619      	mov	r1, r3
 80029c4:	4853      	ldr	r0, [pc, #332]	; (8002b14 <MX_GPIO_Init+0x278>)
 80029c6:	f001 fd57 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC0_Pin ADC1_Pin ADC2_Pin ADC3_Pin
                           ADC4_Pin ADC5_Pin ADC6_Pin ADC7_Pin */
  GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin
 80029ca:	23ff      	movs	r3, #255	; 0xff
 80029cc:	617b      	str	r3, [r7, #20]
                          |ADC4_Pin|ADC5_Pin|ADC6_Pin|ADC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029d2:	2302      	movs	r3, #2
 80029d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d6:	f107 0314 	add.w	r3, r7, #20
 80029da:	4619      	mov	r1, r3
 80029dc:	484f      	ldr	r0, [pc, #316]	; (8002b1c <MX_GPIO_Init+0x280>)
 80029de:	f001 fd4b 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_nCS_Pin ADC_FORMAT_Pin ADC_BPO_Pin PROPANE_OUT_Pin
                           PETROL_OUT_Pin */
  GPIO_InitStruct.Pin = ADC_nCS_Pin|ADC_FORMAT_Pin|ADC_BPO_Pin|PROPANE_OUT_Pin
 80029e2:	f240 7305 	movw	r3, #1797	; 0x705
 80029e6:	617b      	str	r3, [r7, #20]
                          |PETROL_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e8:	2301      	movs	r3, #1
 80029ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f0:	2303      	movs	r3, #3
 80029f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4619      	mov	r1, r3
 80029fa:	4847      	ldr	r0, [pc, #284]	; (8002b18 <MX_GPIO_Init+0x27c>)
 80029fc:	f001 fd3c 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_STATUS_Pin */
  GPIO_InitStruct.Pin = ADC_STATUS_Pin;
 8002a00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a06:	4b49      	ldr	r3, [pc, #292]	; (8002b2c <MX_GPIO_Init+0x290>)
 8002a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADC_STATUS_GPIO_Port, &GPIO_InitStruct);
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	4619      	mov	r1, r3
 8002a14:	4840      	ldr	r0, [pc, #256]	; (8002b18 <MX_GPIO_Init+0x27c>)
 8002a16:	f001 fd2f 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8002a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a20:	2301      	movs	r3, #1
 8002a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	4619      	mov	r1, r3
 8002a32:	4839      	ldr	r0, [pc, #228]	; (8002b18 <MX_GPIO_Init+0x27c>)
 8002a34:	f001 fd20 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 8002a38:	2340      	movs	r3, #64	; 0x40
 8002a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a44:	2303      	movs	r3, #3
 8002a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4831      	ldr	r0, [pc, #196]	; (8002b14 <MX_GPIO_Init+0x278>)
 8002a50:	f001 fd12 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART1_COMM_Pin MCU_IGN_Pin */
  GPIO_InitStruct.Pin = USART1_COMM_Pin|MCU_IGN_Pin;
 8002a54:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a62:	f107 0314 	add.w	r3, r7, #20
 8002a66:	4619      	mov	r1, r3
 8002a68:	482c      	ldr	r0, [pc, #176]	; (8002b1c <MX_GPIO_Init+0x280>)
 8002a6a:	f001 fd05 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_START_Pin */
  GPIO_InitStruct.Pin = RELAY_START_Pin;
 8002a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a74:	2301      	movs	r3, #1
 8002a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY_START_GPIO_Port, &GPIO_InitStruct);
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	4619      	mov	r1, r3
 8002a86:	4825      	ldr	r0, [pc, #148]	; (8002b1c <MX_GPIO_Init+0x280>)
 8002a88:	f001 fcf6 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_PARK_Pin SENS_GEAR_Pin */
  GPIO_InitStruct.Pin = SENS_PARK_Pin|SENS_GEAR_Pin;
 8002a8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a9a:	f107 0314 	add.w	r3, r7, #20
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	481c      	ldr	r0, [pc, #112]	; (8002b14 <MX_GPIO_Init+0x278>)
 8002aa2:	f001 fce9 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECON_Pin */
  GPIO_InitStruct.Pin = ECON_Pin;
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ECON_GPIO_Port, &GPIO_InitStruct);
 8002ab6:	f107 0314 	add.w	r3, r7, #20
 8002aba:	4619      	mov	r1, r3
 8002abc:	4818      	ldr	r0, [pc, #96]	; (8002b20 <MX_GPIO_Init+0x284>)
 8002abe:	f001 fcdb 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROPANE_IN_Pin PETROL_IN_Pin */
  GPIO_InitStruct.Pin = PROPANE_IN_Pin|PETROL_IN_Pin;
 8002ac2:	2330      	movs	r3, #48	; 0x30
 8002ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aca:	2301      	movs	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 0314 	add.w	r3, r7, #20
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4810      	ldr	r0, [pc, #64]	; (8002b18 <MX_GPIO_Init+0x27c>)
 8002ad6:	f001 fccf 	bl	8004478 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = IGN_23_Pin|IGN_14_Pin;
 8002ada:	23c0      	movs	r3, #192	; 0xc0
 8002adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aea:	f107 0314 	add.w	r3, r7, #20
 8002aee:	4619      	mov	r1, r3
 8002af0:	4809      	ldr	r0, [pc, #36]	; (8002b18 <MX_GPIO_Init+0x27c>)
 8002af2:	f001 fcc1 	bl	8004478 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2102      	movs	r1, #2
 8002afa:	2028      	movs	r0, #40	; 0x28
 8002afc:	f001 f891 	bl	8003c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b00:	2028      	movs	r0, #40	; 0x28
 8002b02:	f001 f8aa 	bl	8003c5a <HAL_NVIC_EnableIRQ>

}
 8002b06:	bf00      	nop
 8002b08:	3728      	adds	r7, #40	; 0x28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40020800 	.word	0x40020800
 8002b18:	40020400 	.word	0x40020400
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	40020c00 	.word	0x40020c00
 8002b24:	10310000 	.word	0x10310000
 8002b28:	10110000 	.word	0x10110000
 8002b2c:	10210000 	.word	0x10210000

08002b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b34:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b36:	e7fe      	b.n	8002b36 <Error_Handler+0x6>

08002b38 <map_init>:
#define REF_VOLTAGE 3.32f
#define RES_DIVIDER 1.467f


void map_init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ADC_FORMAT_GPIO_Port, ADC_FORMAT_Pin, GPIO_PIN_RESET);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2104      	movs	r1, #4
 8002b40:	480c      	ldr	r0, [pc, #48]	; (8002b74 <map_init+0x3c>)
 8002b42:	f001 fe33 	bl	80047ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_BPO_GPIO_Port, ADC_BPO_Pin, GPIO_PIN_RESET);
 8002b46:	2200      	movs	r2, #0
 8002b48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b4c:	4809      	ldr	r0, [pc, #36]	; (8002b74 <map_init+0x3c>)
 8002b4e:	f001 fe2d 	bl	80047ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nCE_GPIO_Port, ADC_nCE_Pin, GPIO_PIN_RESET);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2110      	movs	r1, #16
 8002b56:	4808      	ldr	r0, [pc, #32]	; (8002b78 <map_init+0x40>)
 8002b58:	f001 fe28 	bl	80047ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4804      	ldr	r0, [pc, #16]	; (8002b74 <map_init+0x3c>)
 8002b62:	f001 fe23 	bl	80047ac <HAL_GPIO_WritePin>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8002b66:	2108      	movs	r1, #8
 8002b68:	4804      	ldr	r0, [pc, #16]	; (8002b7c <map_init+0x44>)
 8002b6a:	f003 ffeb 	bl	8006b44 <HAL_TIMEx_PWMN_Start>
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40020400 	.word	0x40020400
 8002b78:	40020800 	.word	0x40020800
 8002b7c:	200161a0 	.word	0x200161a0

08002b80 <map_adc_read>:

inline void map_adc_read(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
  uint8_t portdata = GPIOA->IDR & 0xFF;
 8002b86:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <map_adc_read+0x80>)
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	72fb      	strb	r3, [r7, #11]
  float voltage = portdata / 50.0f;
 8002b8c:	7afb      	ldrb	r3, [r7, #11]
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b96:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002c04 <map_adc_read+0x84>
 8002b9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b9e:	edc7 7a01 	vstr	s15, [r7, #4]
  float pressure = (voltage - 0.5f) * 25517.0f;
 8002ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ba6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002baa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bae:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002c08 <map_adc_read+0x88>
 8002bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb6:	edc7 7a03 	vstr	s15, [r7, #12]
  if(pressure < 0.0f)
 8002bba:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc6:	d502      	bpl.n	8002bce <map_adc_read+0x4e>
    pressure = 0.0f;
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
  map_data = map_data * (1.0f - lowpass_koff) + pressure * lowpass_koff;
 8002bce:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <map_adc_read+0x8c>)
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002c10 <map_adc_read+0x90>
 8002bd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002be0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002c14 <map_adc_read+0x94>
 8002be4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <map_adc_read+0x8c>)
 8002bee:	edc3 7a00 	vstr	s15, [r3]
}
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40020000 	.word	0x40020000
 8002c04:	42480000 	.word	0x42480000
 8002c08:	46c75a00 	.word	0x46c75a00
 8002c0c:	20010010 	.word	0x20010010
 8002c10:	3f733333 	.word	0x3f733333
 8002c14:	3d4ccccd 	.word	0x3d4ccccd

08002c18 <map_getpressure>:


inline float map_getpressure(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return map_data;
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <map_getpressure+0x18>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	ee07 3a90 	vmov	s15, r3
}
 8002c24:	eeb0 0a67 	vmov.f32	s0, s15
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	20010010 	.word	0x20010010

08002c34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <HAL_MspInit+0x44>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <HAL_MspInit+0x44>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c44:	6413      	str	r3, [r2, #64]	; 0x40
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <HAL_MspInit+0x44>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	607b      	str	r3, [r7, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <HAL_MspInit+0x44>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	4a08      	ldr	r2, [pc, #32]	; (8002c78 <HAL_MspInit+0x44>)
 8002c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_MspInit+0x44>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800

08002c7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	; 0x28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a33      	ldr	r2, [pc, #204]	; (8002d68 <HAL_ADC_MspInit+0xec>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d15f      	bne.n	8002d5e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c9e:	4b33      	ldr	r3, [pc, #204]	; (8002d6c <HAL_ADC_MspInit+0xf0>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	4a32      	ldr	r2, [pc, #200]	; (8002d6c <HAL_ADC_MspInit+0xf0>)
 8002ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8002caa:	4b30      	ldr	r3, [pc, #192]	; (8002d6c <HAL_ADC_MspInit+0xf0>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb6:	4b2d      	ldr	r3, [pc, #180]	; (8002d6c <HAL_ADC_MspInit+0xf0>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	4a2c      	ldr	r2, [pc, #176]	; (8002d6c <HAL_ADC_MspInit+0xf0>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc2:	4b2a      	ldr	r3, [pc, #168]	; (8002d6c <HAL_ADC_MspInit+0xf0>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cce:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <HAL_ADC_MspInit+0xf0>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4a26      	ldr	r2, [pc, #152]	; (8002d6c <HAL_ADC_MspInit+0xf0>)
 8002cd4:	f043 0304 	orr.w	r3, r3, #4
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <HAL_ADC_MspInit+0xf0>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_12_TEMP_Pin|ADC1_13_BAT_Pin;
 8002ce6:	230c      	movs	r3, #12
 8002ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cea:	2303      	movs	r3, #3
 8002cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	481d      	ldr	r0, [pc, #116]	; (8002d70 <HAL_ADC_MspInit+0xf4>)
 8002cfa:	f001 fbbd 	bl	8004478 <HAL_GPIO_Init>
    //GPIO_InitStruct.Pull = GPIO_NOPULL;
    //HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d00:	4a1d      	ldr	r2, [pc, #116]	; (8002d78 <HAL_ADC_MspInit+0xfc>)
 8002d02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d0a:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d16:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d26:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d36:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d3c:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d42:	480c      	ldr	r0, [pc, #48]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d44:	f001 f88e 	bl	8003e64 <HAL_DMA_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8002d4e:	f7ff feef 	bl	8002b30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a07      	ldr	r2, [pc, #28]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d56:	639a      	str	r2, [r3, #56]	; 0x38
 8002d58:	4a06      	ldr	r2, [pc, #24]	; (8002d74 <HAL_ADC_MspInit+0xf8>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d5e:	bf00      	nop
 8002d60:	3728      	adds	r7, #40	; 0x28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40012000 	.word	0x40012000
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40020800 	.word	0x40020800
 8002d74:	200164dc 	.word	0x200164dc
 8002d78:	40026410 	.word	0x40026410

08002d7c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <HAL_CRC_MspInit+0x38>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d10b      	bne.n	8002da6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <HAL_CRC_MspInit+0x3c>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <HAL_CRC_MspInit+0x3c>)
 8002d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <HAL_CRC_MspInit+0x3c>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40023000 	.word	0x40023000
 8002db8:	40023800 	.word	0x40023800

08002dbc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <HAL_RNG_MspInit+0x38>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d10b      	bne.n	8002de6 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_RNG_MspInit+0x3c>)
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd2:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <HAL_RNG_MspInit+0x3c>)
 8002dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd8:	6353      	str	r3, [r2, #52]	; 0x34
 8002dda:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <HAL_RNG_MspInit+0x3c>)
 8002ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	50060800 	.word	0x50060800
 8002df8:	40023800 	.word	0x40023800

08002dfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a49      	ldr	r2, [pc, #292]	; (8002f40 <HAL_SPI_MspInit+0x144>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	f040 808b 	bne.w	8002f36 <HAL_SPI_MspInit+0x13a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e20:	4b48      	ldr	r3, [pc, #288]	; (8002f44 <HAL_SPI_MspInit+0x148>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	4a47      	ldr	r2, [pc, #284]	; (8002f44 <HAL_SPI_MspInit+0x148>)
 8002e26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2c:	4b45      	ldr	r3, [pc, #276]	; (8002f44 <HAL_SPI_MspInit+0x148>)
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e38:	4b42      	ldr	r3, [pc, #264]	; (8002f44 <HAL_SPI_MspInit+0x148>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	4a41      	ldr	r2, [pc, #260]	; (8002f44 <HAL_SPI_MspInit+0x148>)
 8002e3e:	f043 0302 	orr.w	r3, r3, #2
 8002e42:	6313      	str	r3, [r2, #48]	; 0x30
 8002e44:	4b3f      	ldr	r3, [pc, #252]	; (8002f44 <HAL_SPI_MspInit+0x148>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002e50:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e56:	2302      	movs	r3, #2
 8002e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e62:	2305      	movs	r3, #5
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e66:	f107 0314 	add.w	r3, r7, #20
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4836      	ldr	r0, [pc, #216]	; (8002f48 <HAL_SPI_MspInit+0x14c>)
 8002e6e:	f001 fb03 	bl	8004478 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002e72:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <HAL_SPI_MspInit+0x150>)
 8002e74:	4a36      	ldr	r2, [pc, #216]	; (8002f50 <HAL_SPI_MspInit+0x154>)
 8002e76:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002e78:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <HAL_SPI_MspInit+0x150>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e7e:	4b33      	ldr	r3, [pc, #204]	; (8002f4c <HAL_SPI_MspInit+0x150>)
 8002e80:	2240      	movs	r2, #64	; 0x40
 8002e82:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e84:	4b31      	ldr	r3, [pc, #196]	; (8002f4c <HAL_SPI_MspInit+0x150>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e8a:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <HAL_SPI_MspInit+0x150>)
 8002e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e90:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e92:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <HAL_SPI_MspInit+0x150>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e98:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <HAL_SPI_MspInit+0x150>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002e9e:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <HAL_SPI_MspInit+0x150>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ea4:	4b29      	ldr	r3, [pc, #164]	; (8002f4c <HAL_SPI_MspInit+0x150>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eaa:	4b28      	ldr	r3, [pc, #160]	; (8002f4c <HAL_SPI_MspInit+0x150>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002eb0:	4826      	ldr	r0, [pc, #152]	; (8002f4c <HAL_SPI_MspInit+0x150>)
 8002eb2:	f000 ffd7 	bl	8003e64 <HAL_DMA_Init>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8002ebc:	f7ff fe38 	bl	8002b30 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a22      	ldr	r2, [pc, #136]	; (8002f4c <HAL_SPI_MspInit+0x150>)
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
 8002ec6:	4a21      	ldr	r2, [pc, #132]	; (8002f4c <HAL_SPI_MspInit+0x150>)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002ecc:	4b21      	ldr	r3, [pc, #132]	; (8002f54 <HAL_SPI_MspInit+0x158>)
 8002ece:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <HAL_SPI_MspInit+0x15c>)
 8002ed0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <HAL_SPI_MspInit+0x158>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ed8:	4b1e      	ldr	r3, [pc, #120]	; (8002f54 <HAL_SPI_MspInit+0x158>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ede:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <HAL_SPI_MspInit+0x158>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <HAL_SPI_MspInit+0x158>)
 8002ee6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eea:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <HAL_SPI_MspInit+0x158>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ef2:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <HAL_SPI_MspInit+0x158>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002ef8:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <HAL_SPI_MspInit+0x158>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002efe:	4b15      	ldr	r3, [pc, #84]	; (8002f54 <HAL_SPI_MspInit+0x158>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f04:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <HAL_SPI_MspInit+0x158>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002f0a:	4812      	ldr	r0, [pc, #72]	; (8002f54 <HAL_SPI_MspInit+0x158>)
 8002f0c:	f000 ffaa 	bl	8003e64 <HAL_DMA_Init>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_SPI_MspInit+0x11e>
    {
      Error_Handler();
 8002f16:	f7ff fe0b 	bl	8002b30 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a0d      	ldr	r2, [pc, #52]	; (8002f54 <HAL_SPI_MspInit+0x158>)
 8002f1e:	659a      	str	r2, [r3, #88]	; 0x58
 8002f20:	4a0c      	ldr	r2, [pc, #48]	; (8002f54 <HAL_SPI_MspInit+0x158>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 14, 0);
 8002f26:	2200      	movs	r2, #0
 8002f28:	210e      	movs	r1, #14
 8002f2a:	2024      	movs	r0, #36	; 0x24
 8002f2c:	f000 fe79 	bl	8003c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002f30:	2024      	movs	r0, #36	; 0x24
 8002f32:	f000 fe92 	bl	8003c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f36:	bf00      	nop
 8002f38:	3728      	adds	r7, #40	; 0x28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40003800 	.word	0x40003800
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40020400 	.word	0x40020400
 8002f4c:	2001654c 	.word	0x2001654c
 8002f50:	40026070 	.word	0x40026070
 8002f54:	200162b4 	.word	0x200162b4
 8002f58:	40026058 	.word	0x40026058

08002f5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <HAL_TIM_PWM_MspInit+0x5c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10c      	bne.n	8002f88 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <HAL_TIM_PWM_MspInit+0x60>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <HAL_TIM_PWM_MspInit+0x60>)
 8002f74:	f043 0302 	orr.w	r3, r3, #2
 8002f78:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <HAL_TIM_PWM_MspInit+0x60>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f86:	e010      	b.n	8002faa <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0c      	ldr	r2, [pc, #48]	; (8002fc0 <HAL_TIM_PWM_MspInit+0x64>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d10b      	bne.n	8002faa <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_TIM_PWM_MspInit+0x60>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <HAL_TIM_PWM_MspInit+0x60>)
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f9e:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <HAL_TIM_PWM_MspInit+0x60>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
}
 8002faa:	bf00      	nop
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40000400 	.word	0x40000400
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40010400 	.word	0x40010400

08002fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a31      	ldr	r2, [pc, #196]	; (8003098 <HAL_TIM_Base_MspInit+0xd4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d114      	bne.n	8003000 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fd6:	4b31      	ldr	r3, [pc, #196]	; (800309c <HAL_TIM_Base_MspInit+0xd8>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	4a30      	ldr	r2, [pc, #192]	; (800309c <HAL_TIM_Base_MspInit+0xd8>)
 8002fdc:	f043 0304 	orr.w	r3, r3, #4
 8002fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe2:	4b2e      	ldr	r3, [pc, #184]	; (800309c <HAL_TIM_Base_MspInit+0xd8>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2103      	movs	r1, #3
 8002ff2:	201e      	movs	r0, #30
 8002ff4:	f000 fe15 	bl	8003c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ff8:	201e      	movs	r0, #30
 8002ffa:	f000 fe2e 	bl	8003c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002ffe:	e047      	b.n	8003090 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM7)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a26      	ldr	r2, [pc, #152]	; (80030a0 <HAL_TIM_Base_MspInit+0xdc>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d142      	bne.n	8003090 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800300a:	4b24      	ldr	r3, [pc, #144]	; (800309c <HAL_TIM_Base_MspInit+0xd8>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	4a23      	ldr	r2, [pc, #140]	; (800309c <HAL_TIM_Base_MspInit+0xd8>)
 8003010:	f043 0320 	orr.w	r3, r3, #32
 8003014:	6413      	str	r3, [r2, #64]	; 0x40
 8003016:	4b21      	ldr	r3, [pc, #132]	; (800309c <HAL_TIM_Base_MspInit+0xd8>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
    hdma_tim7_up.Instance = DMA1_Stream2;
 8003022:	4b20      	ldr	r3, [pc, #128]	; (80030a4 <HAL_TIM_Base_MspInit+0xe0>)
 8003024:	4a20      	ldr	r2, [pc, #128]	; (80030a8 <HAL_TIM_Base_MspInit+0xe4>)
 8003026:	601a      	str	r2, [r3, #0]
    hdma_tim7_up.Init.Channel = DMA_CHANNEL_1;
 8003028:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <HAL_TIM_Base_MspInit+0xe0>)
 800302a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800302e:	605a      	str	r2, [r3, #4]
    hdma_tim7_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003030:	4b1c      	ldr	r3, [pc, #112]	; (80030a4 <HAL_TIM_Base_MspInit+0xe0>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
    hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003036:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_TIM_Base_MspInit+0xe0>)
 8003038:	2200      	movs	r2, #0
 800303a:	60da      	str	r2, [r3, #12]
    hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 800303c:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <HAL_TIM_Base_MspInit+0xe0>)
 800303e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003042:	611a      	str	r2, [r3, #16]
    hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003044:	4b17      	ldr	r3, [pc, #92]	; (80030a4 <HAL_TIM_Base_MspInit+0xe0>)
 8003046:	2200      	movs	r2, #0
 8003048:	615a      	str	r2, [r3, #20]
    hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800304a:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <HAL_TIM_Base_MspInit+0xe0>)
 800304c:	2200      	movs	r2, #0
 800304e:	619a      	str	r2, [r3, #24]
    hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 8003050:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <HAL_TIM_Base_MspInit+0xe0>)
 8003052:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003056:	61da      	str	r2, [r3, #28]
    hdma_tim7_up.Init.Priority = DMA_PRIORITY_LOW;
 8003058:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <HAL_TIM_Base_MspInit+0xe0>)
 800305a:	2200      	movs	r2, #0
 800305c:	621a      	str	r2, [r3, #32]
    hdma_tim7_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800305e:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <HAL_TIM_Base_MspInit+0xe0>)
 8003060:	2200      	movs	r2, #0
 8003062:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 8003064:	480f      	ldr	r0, [pc, #60]	; (80030a4 <HAL_TIM_Base_MspInit+0xe0>)
 8003066:	f000 fefd 	bl	8003e64 <HAL_DMA_Init>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_TIM_Base_MspInit+0xb0>
      Error_Handler();
 8003070:	f7ff fd5e 	bl	8002b30 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <HAL_TIM_Base_MspInit+0xe0>)
 8003078:	621a      	str	r2, [r3, #32]
 800307a:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <HAL_TIM_Base_MspInit+0xe0>)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003080:	2200      	movs	r2, #0
 8003082:	2105      	movs	r1, #5
 8003084:	2037      	movs	r0, #55	; 0x37
 8003086:	f000 fdcc 	bl	8003c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800308a:	2037      	movs	r0, #55	; 0x37
 800308c:	f000 fde5 	bl	8003c5a <HAL_NVIC_EnableIRQ>
}
 8003090:	bf00      	nop
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40000800 	.word	0x40000800
 800309c:	40023800 	.word	0x40023800
 80030a0:	40001400 	.word	0x40001400
 80030a4:	20016220 	.word	0x20016220
 80030a8:	40026040 	.word	0x40026040

080030ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a22      	ldr	r2, [pc, #136]	; (8003154 <HAL_TIM_MspPostInit+0xa8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d11d      	bne.n	800310a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ce:	4b22      	ldr	r3, [pc, #136]	; (8003158 <HAL_TIM_MspPostInit+0xac>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a21      	ldr	r2, [pc, #132]	; (8003158 <HAL_TIM_MspPostInit+0xac>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b1f      	ldr	r3, [pc, #124]	; (8003158 <HAL_TIM_MspPostInit+0xac>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH3_CHOKE_Pin|TIM3_CH4_ACC_Pin;
 80030e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ec:	2302      	movs	r3, #2
 80030ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030f0:	2302      	movs	r3, #2
 80030f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f4:	2303      	movs	r3, #3
 80030f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030f8:	2302      	movs	r3, #2
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030fc:	f107 0314 	add.w	r3, r7, #20
 8003100:	4619      	mov	r1, r3
 8003102:	4816      	ldr	r0, [pc, #88]	; (800315c <HAL_TIM_MspPostInit+0xb0>)
 8003104:	f001 f9b8 	bl	8004478 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003108:	e020      	b.n	800314c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a14      	ldr	r2, [pc, #80]	; (8003160 <HAL_TIM_MspPostInit+0xb4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d11b      	bne.n	800314c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003114:	4b10      	ldr	r3, [pc, #64]	; (8003158 <HAL_TIM_MspPostInit+0xac>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	4a0f      	ldr	r2, [pc, #60]	; (8003158 <HAL_TIM_MspPostInit+0xac>)
 800311a:	f043 0302 	orr.w	r3, r3, #2
 800311e:	6313      	str	r3, [r2, #48]	; 0x30
 8003120:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <HAL_TIM_MspPostInit+0xac>)
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH3N_ADC_RW_Pin;
 800312c:	2302      	movs	r3, #2
 800312e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003130:	2302      	movs	r3, #2
 8003132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003134:	2301      	movs	r3, #1
 8003136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003138:	2303      	movs	r3, #3
 800313a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800313c:	2303      	movs	r3, #3
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM8_CH3N_ADC_RW_GPIO_Port, &GPIO_InitStruct);
 8003140:	f107 0314 	add.w	r3, r7, #20
 8003144:	4619      	mov	r1, r3
 8003146:	4807      	ldr	r0, [pc, #28]	; (8003164 <HAL_TIM_MspPostInit+0xb8>)
 8003148:	f001 f996 	bl	8004478 <HAL_GPIO_Init>
}
 800314c:	bf00      	nop
 800314e:	3728      	adds	r7, #40	; 0x28
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40000400 	.word	0x40000400
 8003158:	40023800 	.word	0x40023800
 800315c:	40020800 	.word	0x40020800
 8003160:	40010400 	.word	0x40010400
 8003164:	40020400 	.word	0x40020400

08003168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08a      	sub	sp, #40	; 0x28
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	60da      	str	r2, [r3, #12]
 800317e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a4a      	ldr	r2, [pc, #296]	; (80032b0 <HAL_UART_MspInit+0x148>)
 8003186:	4293      	cmp	r3, r2
 8003188:	f040 808d 	bne.w	80032a6 <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800318c:	4b49      	ldr	r3, [pc, #292]	; (80032b4 <HAL_UART_MspInit+0x14c>)
 800318e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003190:	4a48      	ldr	r2, [pc, #288]	; (80032b4 <HAL_UART_MspInit+0x14c>)
 8003192:	f043 0310 	orr.w	r3, r3, #16
 8003196:	6453      	str	r3, [r2, #68]	; 0x44
 8003198:	4b46      	ldr	r3, [pc, #280]	; (80032b4 <HAL_UART_MspInit+0x14c>)
 800319a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a4:	4b43      	ldr	r3, [pc, #268]	; (80032b4 <HAL_UART_MspInit+0x14c>)
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	4a42      	ldr	r2, [pc, #264]	; (80032b4 <HAL_UART_MspInit+0x14c>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	6313      	str	r3, [r2, #48]	; 0x30
 80031b0:	4b40      	ldr	r3, [pc, #256]	; (80032b4 <HAL_UART_MspInit+0x14c>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031c6:	2301      	movs	r3, #1
 80031c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ca:	2303      	movs	r3, #3
 80031cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031ce:	2307      	movs	r3, #7
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	4619      	mov	r1, r3
 80031d8:	4837      	ldr	r0, [pc, #220]	; (80032b8 <HAL_UART_MspInit+0x150>)
 80031da:	f001 f94d 	bl	8004478 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80031de:	4b37      	ldr	r3, [pc, #220]	; (80032bc <HAL_UART_MspInit+0x154>)
 80031e0:	4a37      	ldr	r2, [pc, #220]	; (80032c0 <HAL_UART_MspInit+0x158>)
 80031e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80031e4:	4b35      	ldr	r3, [pc, #212]	; (80032bc <HAL_UART_MspInit+0x154>)
 80031e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ec:	4b33      	ldr	r3, [pc, #204]	; (80032bc <HAL_UART_MspInit+0x154>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f2:	4b32      	ldr	r3, [pc, #200]	; (80032bc <HAL_UART_MspInit+0x154>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031f8:	4b30      	ldr	r3, [pc, #192]	; (80032bc <HAL_UART_MspInit+0x154>)
 80031fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003200:	4b2e      	ldr	r3, [pc, #184]	; (80032bc <HAL_UART_MspInit+0x154>)
 8003202:	2200      	movs	r2, #0
 8003204:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003206:	4b2d      	ldr	r3, [pc, #180]	; (80032bc <HAL_UART_MspInit+0x154>)
 8003208:	2200      	movs	r2, #0
 800320a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800320c:	4b2b      	ldr	r3, [pc, #172]	; (80032bc <HAL_UART_MspInit+0x154>)
 800320e:	2200      	movs	r2, #0
 8003210:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003212:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <HAL_UART_MspInit+0x154>)
 8003214:	2200      	movs	r2, #0
 8003216:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003218:	4b28      	ldr	r3, [pc, #160]	; (80032bc <HAL_UART_MspInit+0x154>)
 800321a:	2200      	movs	r2, #0
 800321c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800321e:	4827      	ldr	r0, [pc, #156]	; (80032bc <HAL_UART_MspInit+0x154>)
 8003220:	f000 fe20 	bl	8003e64 <HAL_DMA_Init>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800322a:	f7ff fc81 	bl	8002b30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a22      	ldr	r2, [pc, #136]	; (80032bc <HAL_UART_MspInit+0x154>)
 8003232:	66da      	str	r2, [r3, #108]	; 0x6c
 8003234:	4a21      	ldr	r2, [pc, #132]	; (80032bc <HAL_UART_MspInit+0x154>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800323a:	4b22      	ldr	r3, [pc, #136]	; (80032c4 <HAL_UART_MspInit+0x15c>)
 800323c:	4a22      	ldr	r2, [pc, #136]	; (80032c8 <HAL_UART_MspInit+0x160>)
 800323e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003240:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <HAL_UART_MspInit+0x15c>)
 8003242:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003246:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003248:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <HAL_UART_MspInit+0x15c>)
 800324a:	2240      	movs	r2, #64	; 0x40
 800324c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800324e:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_UART_MspInit+0x15c>)
 8003250:	2200      	movs	r2, #0
 8003252:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003254:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <HAL_UART_MspInit+0x15c>)
 8003256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800325a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800325c:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <HAL_UART_MspInit+0x15c>)
 800325e:	2200      	movs	r2, #0
 8003260:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003262:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <HAL_UART_MspInit+0x15c>)
 8003264:	2200      	movs	r2, #0
 8003266:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003268:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <HAL_UART_MspInit+0x15c>)
 800326a:	2200      	movs	r2, #0
 800326c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <HAL_UART_MspInit+0x15c>)
 8003270:	2200      	movs	r2, #0
 8003272:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003274:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <HAL_UART_MspInit+0x15c>)
 8003276:	2200      	movs	r2, #0
 8003278:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800327a:	4812      	ldr	r0, [pc, #72]	; (80032c4 <HAL_UART_MspInit+0x15c>)
 800327c:	f000 fdf2 	bl	8003e64 <HAL_DMA_Init>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 8003286:	f7ff fc53 	bl	8002b30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a0d      	ldr	r2, [pc, #52]	; (80032c4 <HAL_UART_MspInit+0x15c>)
 800328e:	669a      	str	r2, [r3, #104]	; 0x68
 8003290:	4a0c      	ldr	r2, [pc, #48]	; (80032c4 <HAL_UART_MspInit+0x15c>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8003296:	2200      	movs	r2, #0
 8003298:	2107      	movs	r1, #7
 800329a:	2025      	movs	r0, #37	; 0x25
 800329c:	f000 fcc1 	bl	8003c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032a0:	2025      	movs	r0, #37	; 0x25
 80032a2:	f000 fcda 	bl	8003c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80032a6:	bf00      	nop
 80032a8:	3728      	adds	r7, #40	; 0x28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40011000 	.word	0x40011000
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40020000 	.word	0x40020000
 80032bc:	200163fc 	.word	0x200163fc
 80032c0:	40026440 	.word	0x40026440
 80032c4:	20016354 	.word	0x20016354
 80032c8:	400264b8 	.word	0x400264b8

080032cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032d0:	e7fe      	b.n	80032d0 <NMI_Handler+0x4>

080032d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032d2:	b480      	push	{r7}
 80032d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032d6:	e7fe      	b.n	80032d6 <HardFault_Handler+0x4>

080032d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032dc:	e7fe      	b.n	80032dc <MemManage_Handler+0x4>

080032de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032e2:	e7fe      	b.n	80032e2 <BusFault_Handler+0x4>

080032e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032e8:	e7fe      	b.n	80032e8 <UsageFault_Handler+0x4>

080032ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032ea:	b480      	push	{r7}
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003318:	f000 f900 	bl	800351c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800331c:	bf00      	nop
 800331e:	bd80      	pop	{r7, pc}

08003320 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim7_up);
 8003324:	4802      	ldr	r0, [pc, #8]	; (8003330 <DMA1_Stream2_IRQHandler+0x10>)
 8003326:	f000 fe6d 	bl	8004004 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20016220 	.word	0x20016220

08003334 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003338:	4802      	ldr	r0, [pc, #8]	; (8003344 <DMA1_Stream3_IRQHandler+0x10>)
 800333a:	f000 fe63 	bl	8004004 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	200162b4 	.word	0x200162b4

08003348 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800334c:	4802      	ldr	r0, [pc, #8]	; (8003358 <DMA1_Stream4_IRQHandler+0x10>)
 800334e:	f000 fe59 	bl	8004004 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	2001654c 	.word	0x2001654c

0800335c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003360:	4802      	ldr	r0, [pc, #8]	; (800336c <SPI2_IRQHandler+0x10>)
 8003362:	f002 fb2f 	bl	80059c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	2001613c 	.word	0x2001613c

08003370 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003374:	4802      	ldr	r0, [pc, #8]	; (8003380 <USART1_IRQHandler+0x10>)
 8003376:	f003 fdb3 	bl	8006ee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	2001645c 	.word	0x2001645c

08003384 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003388:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800338c:	f001 fa28 	bl	80047e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003390:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003394:	f001 fa24 	bl	80047e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003398:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800339c:	f001 fa20 	bl	80047e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80033a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80033a4:	f001 fa1c 	bl	80047e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033a8:	bf00      	nop
 80033aa:	bd80      	pop	{r7, pc}

080033ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80033b0:	4802      	ldr	r0, [pc, #8]	; (80033bc <TIM4_IRQHandler+0x10>)
 80033b2:	f002 fd16 	bl	8005de2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	200161e0 	.word	0x200161e0

080033c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80033c4:	4802      	ldr	r0, [pc, #8]	; (80033d0 <TIM7_IRQHandler+0x10>)
 80033c6:	f002 fd0c 	bl	8005de2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	200165ac 	.word	0x200165ac

080033d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033d8:	4802      	ldr	r0, [pc, #8]	; (80033e4 <DMA2_Stream0_IRQHandler+0x10>)
 80033da:	f000 fe13 	bl	8004004 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	200164dc 	.word	0x200164dc

080033e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <DMA2_Stream2_IRQHandler+0x10>)
 80033ee:	f000 fe09 	bl	8004004 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200163fc 	.word	0x200163fc

080033fc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <DMA2_Stream7_IRQHandler+0x10>)
 8003402:	f000 fdff 	bl	8004004 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20016354 	.word	0x20016354

08003410 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <SystemInit+0x28>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341a:	4a07      	ldr	r2, [pc, #28]	; (8003438 <SystemInit+0x28>)
 800341c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <SystemInit+0x28>)
 8003426:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800342a:	609a      	str	r2, [r3, #8]
#endif
}
 800342c:	bf00      	nop
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800343c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003474 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003440:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003442:	e003      	b.n	800344c <LoopCopyDataInit>

08003444 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003446:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003448:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800344a:	3104      	adds	r1, #4

0800344c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800344c:	480b      	ldr	r0, [pc, #44]	; (800347c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800344e:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003450:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003452:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003454:	d3f6      	bcc.n	8003444 <CopyDataInit>
  ldr  r2, =_sbss
 8003456:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003458:	e002      	b.n	8003460 <LoopFillZerobss>

0800345a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800345a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800345c:	f842 3b04 	str.w	r3, [r2], #4

08003460 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003460:	4b09      	ldr	r3, [pc, #36]	; (8003488 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003462:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003464:	d3f9      	bcc.n	800345a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003466:	f7ff ffd3 	bl	8003410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800346a:	f004 fac5 	bl	80079f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800346e:	f7fe fdd1 	bl	8002014 <main>
  bx  lr    
 8003472:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003474:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8003478:	08007a98 	.word	0x08007a98
  ldr  r0, =_sdata
 800347c:	20010000 	.word	0x20010000
  ldr  r3, =_edata
 8003480:	20010020 	.word	0x20010020
  ldr  r2, =_sbss
 8003484:	20010020 	.word	0x20010020
  ldr  r3, = _ebss
 8003488:	200165f0 	.word	0x200165f0

0800348c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800348c:	e7fe      	b.n	800348c <ADC_IRQHandler>
	...

08003490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8003494:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <HAL_Init+0x28>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a07      	ldr	r2, [pc, #28]	; (80034b8 <HAL_Init+0x28>)
 800349a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800349e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034a0:	2003      	movs	r0, #3
 80034a2:	f000 fbb3 	bl	8003c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034a6:	2000      	movs	r0, #0
 80034a8:	f000 f808 	bl	80034bc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80034ac:	f7ff fbc2 	bl	8002c34 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40023c00 	.word	0x40023c00

080034bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034c4:	4b12      	ldr	r3, [pc, #72]	; (8003510 <HAL_InitTick+0x54>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4b12      	ldr	r3, [pc, #72]	; (8003514 <HAL_InitTick+0x58>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	4619      	mov	r1, r3
 80034ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80034d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fbcb 	bl	8003c76 <HAL_SYSTICK_Config>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e00e      	b.n	8003508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b0f      	cmp	r3, #15
 80034ee:	d80a      	bhi.n	8003506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034f0:	2200      	movs	r2, #0
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295
 80034f8:	f000 fb93 	bl	8003c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034fc:	4a06      	ldr	r2, [pc, #24]	; (8003518 <HAL_InitTick+0x5c>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	e000      	b.n	8003508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
}
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	20010014 	.word	0x20010014
 8003514:	2001001c 	.word	0x2001001c
 8003518:	20010018 	.word	0x20010018

0800351c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_IncTick+0x20>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_IncTick+0x24>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4413      	add	r3, r2
 800352c:	4a04      	ldr	r2, [pc, #16]	; (8003540 <HAL_IncTick+0x24>)
 800352e:	6013      	str	r3, [r2, #0]
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	2001001c 	.word	0x2001001c
 8003540:	200165ec 	.word	0x200165ec

08003544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return uwTick;
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <HAL_GetTick+0x14>)
 800354a:	681b      	ldr	r3, [r3, #0]
}
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	200165ec 	.word	0x200165ec

0800355c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e031      	b.n	80035d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff fb7e 	bl	8002c7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	2b00      	cmp	r3, #0
 8003598:	d116      	bne.n	80035c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800359e:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <HAL_ADC_Init+0x84>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	f043 0202 	orr.w	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f964 	bl	8003878 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	f043 0201 	orr.w	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
 80035c6:	e001      	b.n	80035cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	ffffeefd 	.word	0xffffeefd

080035e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x1c>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e12a      	b.n	8003856 <HAL_ADC_ConfigChannel+0x272>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b09      	cmp	r3, #9
 800360e:	d93a      	bls.n	8003686 <HAL_ADC_ConfigChannel+0xa2>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003618:	d035      	beq.n	8003686 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68d9      	ldr	r1, [r3, #12]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	b29b      	uxth	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	4613      	mov	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	3b1e      	subs	r3, #30
 8003630:	2207      	movs	r2, #7
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43da      	mvns	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	400a      	ands	r2, r1
 800363e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a87      	ldr	r2, [pc, #540]	; (8003864 <HAL_ADC_ConfigChannel+0x280>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d10a      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68d9      	ldr	r1, [r3, #12]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	061a      	lsls	r2, r3, #24
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800365e:	e035      	b.n	80036cc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68d9      	ldr	r1, [r3, #12]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	4618      	mov	r0, r3
 8003672:	4603      	mov	r3, r0
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	4403      	add	r3, r0
 8003678:	3b1e      	subs	r3, #30
 800367a:	409a      	lsls	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003684:	e022      	b.n	80036cc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6919      	ldr	r1, [r3, #16]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	b29b      	uxth	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	4613      	mov	r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4413      	add	r3, r2
 800369a:	2207      	movs	r2, #7
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43da      	mvns	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	400a      	ands	r2, r1
 80036a8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6919      	ldr	r1, [r3, #16]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	4618      	mov	r0, r3
 80036bc:	4603      	mov	r3, r0
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	4403      	add	r3, r0
 80036c2:	409a      	lsls	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b06      	cmp	r3, #6
 80036d2:	d824      	bhi.n	800371e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	3b05      	subs	r3, #5
 80036e6:	221f      	movs	r2, #31
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43da      	mvns	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	400a      	ands	r2, r1
 80036f4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	b29b      	uxth	r3, r3
 8003702:	4618      	mov	r0, r3
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	3b05      	subs	r3, #5
 8003710:	fa00 f203 	lsl.w	r2, r0, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	635a      	str	r2, [r3, #52]	; 0x34
 800371c:	e04c      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b0c      	cmp	r3, #12
 8003724:	d824      	bhi.n	8003770 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	3b23      	subs	r3, #35	; 0x23
 8003738:	221f      	movs	r2, #31
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43da      	mvns	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	400a      	ands	r2, r1
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	4618      	mov	r0, r3
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	3b23      	subs	r3, #35	; 0x23
 8003762:	fa00 f203 	lsl.w	r2, r0, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	631a      	str	r2, [r3, #48]	; 0x30
 800376e:	e023      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	3b41      	subs	r3, #65	; 0x41
 8003782:	221f      	movs	r2, #31
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43da      	mvns	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	400a      	ands	r2, r1
 8003790:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	b29b      	uxth	r3, r3
 800379e:	4618      	mov	r0, r3
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	3b41      	subs	r3, #65	; 0x41
 80037ac:	fa00 f203 	lsl.w	r2, r0, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a2a      	ldr	r2, [pc, #168]	; (8003868 <HAL_ADC_ConfigChannel+0x284>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d10a      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x1f4>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037ca:	d105      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80037cc:	4b27      	ldr	r3, [pc, #156]	; (800386c <HAL_ADC_ConfigChannel+0x288>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	4a26      	ldr	r2, [pc, #152]	; (800386c <HAL_ADC_ConfigChannel+0x288>)
 80037d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80037d6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a22      	ldr	r2, [pc, #136]	; (8003868 <HAL_ADC_ConfigChannel+0x284>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d109      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x212>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b12      	cmp	r3, #18
 80037e8:	d105      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <HAL_ADC_ConfigChannel+0x288>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4a1f      	ldr	r2, [pc, #124]	; (800386c <HAL_ADC_ConfigChannel+0x288>)
 80037f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037f4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <HAL_ADC_ConfigChannel+0x284>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d125      	bne.n	800384c <HAL_ADC_ConfigChannel+0x268>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a17      	ldr	r2, [pc, #92]	; (8003864 <HAL_ADC_ConfigChannel+0x280>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d003      	beq.n	8003812 <HAL_ADC_ConfigChannel+0x22e>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b11      	cmp	r3, #17
 8003810:	d11c      	bne.n	800384c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003812:	4b16      	ldr	r3, [pc, #88]	; (800386c <HAL_ADC_ConfigChannel+0x288>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	4a15      	ldr	r2, [pc, #84]	; (800386c <HAL_ADC_ConfigChannel+0x288>)
 8003818:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800381c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a10      	ldr	r2, [pc, #64]	; (8003864 <HAL_ADC_ConfigChannel+0x280>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d111      	bne.n	800384c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <HAL_ADC_ConfigChannel+0x28c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a11      	ldr	r2, [pc, #68]	; (8003874 <HAL_ADC_ConfigChannel+0x290>)
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	0c9a      	lsrs	r2, r3, #18
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800383e:	e002      	b.n	8003846 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	3b01      	subs	r3, #1
 8003844:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f9      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	10000012 	.word	0x10000012
 8003868:	40012000 	.word	0x40012000
 800386c:	40012300 	.word	0x40012300
 8003870:	20010014 	.word	0x20010014
 8003874:	431bde83 	.word	0x431bde83

08003878 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003880:	4b78      	ldr	r3, [pc, #480]	; (8003a64 <ADC_Init+0x1ec>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4a77      	ldr	r2, [pc, #476]	; (8003a64 <ADC_Init+0x1ec>)
 8003886:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800388a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800388c:	4b75      	ldr	r3, [pc, #468]	; (8003a64 <ADC_Init+0x1ec>)
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4973      	ldr	r1, [pc, #460]	; (8003a64 <ADC_Init+0x1ec>)
 8003896:	4313      	orrs	r3, r2
 8003898:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	021a      	lsls	r2, r3, #8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6899      	ldr	r1, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	4a58      	ldr	r2, [pc, #352]	; (8003a68 <ADC_Init+0x1f0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d022      	beq.n	8003952 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800391a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6899      	ldr	r1, [r3, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800393c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6899      	ldr	r1, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	609a      	str	r2, [r3, #8]
 8003950:	e00f      	b.n	8003972 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003960:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003970:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0202 	bic.w	r2, r2, #2
 8003980:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6899      	ldr	r1, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	005a      	lsls	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01b      	beq.n	80039d8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6859      	ldr	r1, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	3b01      	subs	r3, #1
 80039cc:	035a      	lsls	r2, r3, #13
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	e007      	b.n	80039e8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	051a      	lsls	r2, r3, #20
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6899      	ldr	r1, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a2a:	025a      	lsls	r2, r3, #9
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6899      	ldr	r1, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	029a      	lsls	r2, r3, #10
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	609a      	str	r2, [r3, #8]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	40012300 	.word	0x40012300
 8003a68:	0f000001 	.word	0x0f000001

08003a6c <__NVIC_SetPriorityGrouping>:
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <__NVIC_SetPriorityGrouping+0x40>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a88:	4013      	ands	r3, r2
 8003a8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a9a:	4a04      	ldr	r2, [pc, #16]	; (8003aac <__NVIC_SetPriorityGrouping+0x40>)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	60d3      	str	r3, [r2, #12]
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	e000ed00 	.word	0xe000ed00
 8003ab0:	05fa0000 	.word	0x05fa0000

08003ab4 <__NVIC_GetPriorityGrouping>:
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ab8:	4b04      	ldr	r3, [pc, #16]	; (8003acc <__NVIC_GetPriorityGrouping+0x18>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	0a1b      	lsrs	r3, r3, #8
 8003abe:	f003 0307 	and.w	r3, r3, #7
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <__NVIC_EnableIRQ>:
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	db0b      	blt.n	8003afa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	f003 021f 	and.w	r2, r3, #31
 8003ae8:	4907      	ldr	r1, [pc, #28]	; (8003b08 <__NVIC_EnableIRQ+0x38>)
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	2001      	movs	r0, #1
 8003af2:	fa00 f202 	lsl.w	r2, r0, r2
 8003af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	e000e100 	.word	0xe000e100

08003b0c <__NVIC_SetPriority>:
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	6039      	str	r1, [r7, #0]
 8003b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	db0a      	blt.n	8003b36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	490c      	ldr	r1, [pc, #48]	; (8003b58 <__NVIC_SetPriority+0x4c>)
 8003b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2a:	0112      	lsls	r2, r2, #4
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	440b      	add	r3, r1
 8003b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b34:	e00a      	b.n	8003b4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	4908      	ldr	r1, [pc, #32]	; (8003b5c <__NVIC_SetPriority+0x50>)
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	3b04      	subs	r3, #4
 8003b44:	0112      	lsls	r2, r2, #4
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	440b      	add	r3, r1
 8003b4a:	761a      	strb	r2, [r3, #24]
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	e000e100 	.word	0xe000e100
 8003b5c:	e000ed00 	.word	0xe000ed00

08003b60 <NVIC_EncodePriority>:
{
 8003b60:	b480      	push	{r7}
 8003b62:	b089      	sub	sp, #36	; 0x24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f1c3 0307 	rsb	r3, r3, #7
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	bf28      	it	cs
 8003b7e:	2304      	movcs	r3, #4
 8003b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3304      	adds	r3, #4
 8003b86:	2b06      	cmp	r3, #6
 8003b88:	d902      	bls.n	8003b90 <NVIC_EncodePriority+0x30>
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	3b03      	subs	r3, #3
 8003b8e:	e000      	b.n	8003b92 <NVIC_EncodePriority+0x32>
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b94:	f04f 32ff 	mov.w	r2, #4294967295
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	43da      	mvns	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb2:	43d9      	mvns	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb8:	4313      	orrs	r3, r2
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3724      	adds	r7, #36	; 0x24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bd8:	d301      	bcc.n	8003bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e00f      	b.n	8003bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bde:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <SysTick_Config+0x40>)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003be6:	210f      	movs	r1, #15
 8003be8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bec:	f7ff ff8e 	bl	8003b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <SysTick_Config+0x40>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bf6:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <SysTick_Config+0x40>)
 8003bf8:	2207      	movs	r2, #7
 8003bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	e000e010 	.word	0xe000e010

08003c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ff29 	bl	8003a6c <__NVIC_SetPriorityGrouping>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b086      	sub	sp, #24
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	4603      	mov	r3, r0
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	607a      	str	r2, [r7, #4]
 8003c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c34:	f7ff ff3e 	bl	8003ab4 <__NVIC_GetPriorityGrouping>
 8003c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	6978      	ldr	r0, [r7, #20]
 8003c40:	f7ff ff8e 	bl	8003b60 <NVIC_EncodePriority>
 8003c44:	4602      	mov	r2, r0
 8003c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff ff5d 	bl	8003b0c <__NVIC_SetPriority>
}
 8003c52:	bf00      	nop
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	4603      	mov	r3, r0
 8003c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ff31 	bl	8003ad0 <__NVIC_EnableIRQ>
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff ffa2 	bl	8003bc8 <SysTick_Config>
 8003c84:	4603      	mov	r3, r0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e054      	b.n	8003d4c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	7f5b      	ldrb	r3, [r3, #29]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff f862 	bl	8002d7c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	791b      	ldrb	r3, [r3, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a22      	ldr	r2, [pc, #136]	; (8003d54 <HAL_CRC_Init+0xc4>)
 8003ccc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0218 	bic.w	r2, r2, #24
 8003cdc:	609a      	str	r2, [r3, #8]
 8003cde:	e00c      	b.n	8003cfa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6899      	ldr	r1, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f834 	bl	8003d58 <HAL_CRCEx_Polynomial_Set>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e028      	b.n	8003d4c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	795b      	ldrb	r3, [r3, #5]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d105      	bne.n	8003d0e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0a:	611a      	str	r2, [r3, #16]
 8003d0c:	e004      	b.n	8003d18 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6912      	ldr	r2, [r2, #16]
 8003d16:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699a      	ldr	r2, [r3, #24]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	04c11db7 	.word	0x04c11db7

08003d58 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003d68:	231f      	movs	r3, #31
 8003d6a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003d6c:	bf00      	nop
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1e5a      	subs	r2, r3, #1
 8003d72:	613a      	str	r2, [r7, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d009      	beq.n	8003d8c <HAL_CRCEx_Polynomial_Set+0x34>
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b18      	cmp	r3, #24
 8003d90:	d846      	bhi.n	8003e20 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003d92:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d98:	08003e27 	.word	0x08003e27
 8003d9c:	08003e21 	.word	0x08003e21
 8003da0:	08003e21 	.word	0x08003e21
 8003da4:	08003e21 	.word	0x08003e21
 8003da8:	08003e21 	.word	0x08003e21
 8003dac:	08003e21 	.word	0x08003e21
 8003db0:	08003e21 	.word	0x08003e21
 8003db4:	08003e21 	.word	0x08003e21
 8003db8:	08003e15 	.word	0x08003e15
 8003dbc:	08003e21 	.word	0x08003e21
 8003dc0:	08003e21 	.word	0x08003e21
 8003dc4:	08003e21 	.word	0x08003e21
 8003dc8:	08003e21 	.word	0x08003e21
 8003dcc:	08003e21 	.word	0x08003e21
 8003dd0:	08003e21 	.word	0x08003e21
 8003dd4:	08003e21 	.word	0x08003e21
 8003dd8:	08003e09 	.word	0x08003e09
 8003ddc:	08003e21 	.word	0x08003e21
 8003de0:	08003e21 	.word	0x08003e21
 8003de4:	08003e21 	.word	0x08003e21
 8003de8:	08003e21 	.word	0x08003e21
 8003dec:	08003e21 	.word	0x08003e21
 8003df0:	08003e21 	.word	0x08003e21
 8003df4:	08003e21 	.word	0x08003e21
 8003df8:	08003dfd 	.word	0x08003dfd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b06      	cmp	r3, #6
 8003e00:	d913      	bls.n	8003e2a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e06:	e010      	b.n	8003e2a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b07      	cmp	r3, #7
 8003e0c:	d90f      	bls.n	8003e2e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e12:	e00c      	b.n	8003e2e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b0f      	cmp	r3, #15
 8003e18:	d90b      	bls.n	8003e32 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e1e:	e008      	b.n	8003e32 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	75fb      	strb	r3, [r7, #23]
      break;
 8003e24:	e006      	b.n	8003e34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e26:	bf00      	nop
 8003e28:	e004      	b.n	8003e34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e002      	b.n	8003e34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e000      	b.n	8003e34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e32:	bf00      	nop
  }
  if (status == HAL_OK)
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10d      	bne.n	8003e56 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f023 0118 	bic.w	r1, r3, #24
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e70:	f7ff fb68 	bl	8003544 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e099      	b.n	8003fb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0201 	bic.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ea0:	e00f      	b.n	8003ec2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ea2:	f7ff fb4f 	bl	8003544 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b05      	cmp	r3, #5
 8003eae:	d908      	bls.n	8003ec2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2203      	movs	r2, #3
 8003eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e078      	b.n	8003fb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e8      	bne.n	8003ea2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4b38      	ldr	r3, [pc, #224]	; (8003fbc <HAL_DMA_Init+0x158>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d107      	bne.n	8003f2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	4313      	orrs	r3, r2
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f023 0307 	bic.w	r3, r3, #7
 8003f42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d117      	bne.n	8003f86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00e      	beq.n	8003f86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fa0b 	bl	8004384 <DMA_CheckFifoParam>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2240      	movs	r2, #64	; 0x40
 8003f78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f82:	2301      	movs	r3, #1
 8003f84:	e016      	b.n	8003fb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f9c2 	bl	8004318 <DMA_CalcBaseAndBitshift>
 8003f94:	4603      	mov	r3, r0
 8003f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9c:	223f      	movs	r2, #63	; 0x3f
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	e010803f 	.word	0xe010803f

08003fc0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d004      	beq.n	8003fde <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2280      	movs	r2, #128	; 0x80
 8003fd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e00c      	b.n	8003ff8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2205      	movs	r2, #5
 8003fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
inline void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004010:	4b92      	ldr	r3, [pc, #584]	; (800425c <HAL_DMA_IRQHandler+0x258>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a92      	ldr	r2, [pc, #584]	; (8004260 <HAL_DMA_IRQHandler+0x25c>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	0a9b      	lsrs	r3, r3, #10
 800401c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004022:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402e:	2208      	movs	r2, #8
 8004030:	409a      	lsls	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4013      	ands	r3, r2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01a      	beq.n	8004070 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d013      	beq.n	8004070 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0204 	bic.w	r2, r2, #4
 8004056:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405c:	2208      	movs	r2, #8
 800405e:	409a      	lsls	r2, r3
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004068:	f043 0201 	orr.w	r2, r3, #1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	2201      	movs	r2, #1
 8004076:	409a      	lsls	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d012      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004092:	2201      	movs	r2, #1
 8004094:	409a      	lsls	r2, r3
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	f043 0202 	orr.w	r2, r3, #2
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040aa:	2204      	movs	r2, #4
 80040ac:	409a      	lsls	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d012      	beq.n	80040dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00b      	beq.n	80040dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c8:	2204      	movs	r2, #4
 80040ca:	409a      	lsls	r2, r3
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d4:	f043 0204 	orr.w	r2, r3, #4
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e0:	2210      	movs	r2, #16
 80040e2:	409a      	lsls	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d043      	beq.n	8004174 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d03c      	beq.n	8004174 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fe:	2210      	movs	r2, #16
 8004100:	409a      	lsls	r2, r3
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d018      	beq.n	8004146 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d108      	bne.n	8004134 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d024      	beq.n	8004174 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	4798      	blx	r3
 8004132:	e01f      	b.n	8004174 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01b      	beq.n	8004174 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	4798      	blx	r3
 8004144:	e016      	b.n	8004174 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d107      	bne.n	8004164 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0208 	bic.w	r2, r2, #8
 8004162:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004178:	2220      	movs	r2, #32
 800417a:	409a      	lsls	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 808e 	beq.w	80042a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8086 	beq.w	80042a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419a:	2220      	movs	r2, #32
 800419c:	409a      	lsls	r2, r3
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b05      	cmp	r3, #5
 80041ac:	d136      	bne.n	800421c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0216 	bic.w	r2, r2, #22
 80041bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d103      	bne.n	80041de <HAL_DMA_IRQHandler+0x1da>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0208 	bic.w	r2, r2, #8
 80041ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f2:	223f      	movs	r2, #63	; 0x3f
 80041f4:	409a      	lsls	r2, r3
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420e:	2b00      	cmp	r3, #0
 8004210:	d07d      	beq.n	800430e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	4798      	blx	r3
        }
        return;
 800421a:	e078      	b.n	800430e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d01c      	beq.n	8004264 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d108      	bne.n	800424a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	2b00      	cmp	r3, #0
 800423e:	d030      	beq.n	80042a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	4798      	blx	r3
 8004248:	e02b      	b.n	80042a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424e:	2b00      	cmp	r3, #0
 8004250:	d027      	beq.n	80042a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	4798      	blx	r3
 800425a:	e022      	b.n	80042a2 <HAL_DMA_IRQHandler+0x29e>
 800425c:	20010014 	.word	0x20010014
 8004260:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10f      	bne.n	8004292 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0210 	bic.w	r2, r2, #16
 8004280:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d032      	beq.n	8004310 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d022      	beq.n	80042fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2205      	movs	r2, #5
 80042ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	3301      	adds	r3, #1
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d307      	bcc.n	80042ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f2      	bne.n	80042ce <HAL_DMA_IRQHandler+0x2ca>
 80042e8:	e000      	b.n	80042ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80042ea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4798      	blx	r3
 800430c:	e000      	b.n	8004310 <HAL_DMA_IRQHandler+0x30c>
        return;
 800430e:	bf00      	nop
    }
  }
}
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop

08004318 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	3b10      	subs	r3, #16
 8004328:	4a13      	ldr	r2, [pc, #76]	; (8004378 <DMA_CalcBaseAndBitshift+0x60>)
 800432a:	fba2 2303 	umull	r2, r3, r2, r3
 800432e:	091b      	lsrs	r3, r3, #4
 8004330:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004332:	4a12      	ldr	r2, [pc, #72]	; (800437c <DMA_CalcBaseAndBitshift+0x64>)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b03      	cmp	r3, #3
 8004344:	d908      	bls.n	8004358 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <DMA_CalcBaseAndBitshift+0x68>)
 800434e:	4013      	ands	r3, r2
 8004350:	1d1a      	adds	r2, r3, #4
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	659a      	str	r2, [r3, #88]	; 0x58
 8004356:	e006      	b.n	8004366 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	4b08      	ldr	r3, [pc, #32]	; (8004380 <DMA_CalcBaseAndBitshift+0x68>)
 8004360:	4013      	ands	r3, r2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	aaaaaaab 	.word	0xaaaaaaab
 800437c:	08007a80 	.word	0x08007a80
 8004380:	fffffc00 	.word	0xfffffc00

08004384 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d11f      	bne.n	80043de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d855      	bhi.n	8004450 <DMA_CheckFifoParam+0xcc>
 80043a4:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <DMA_CheckFifoParam+0x28>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043bd 	.word	0x080043bd
 80043b0:	080043cf 	.word	0x080043cf
 80043b4:	080043bd 	.word	0x080043bd
 80043b8:	08004451 	.word	0x08004451
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d045      	beq.n	8004454 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043cc:	e042      	b.n	8004454 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043d6:	d13f      	bne.n	8004458 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043dc:	e03c      	b.n	8004458 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e6:	d121      	bne.n	800442c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d836      	bhi.n	800445c <DMA_CheckFifoParam+0xd8>
 80043ee:	a201      	add	r2, pc, #4	; (adr r2, 80043f4 <DMA_CheckFifoParam+0x70>)
 80043f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f4:	08004405 	.word	0x08004405
 80043f8:	0800440b 	.word	0x0800440b
 80043fc:	08004405 	.word	0x08004405
 8004400:	0800441d 	.word	0x0800441d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
      break;
 8004408:	e02f      	b.n	800446a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d024      	beq.n	8004460 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800441a:	e021      	b.n	8004460 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004424:	d11e      	bne.n	8004464 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800442a:	e01b      	b.n	8004464 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d902      	bls.n	8004438 <DMA_CheckFifoParam+0xb4>
 8004432:	2b03      	cmp	r3, #3
 8004434:	d003      	beq.n	800443e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004436:	e018      	b.n	800446a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	73fb      	strb	r3, [r7, #15]
      break;
 800443c:	e015      	b.n	800446a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00e      	beq.n	8004468 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
      break;
 800444e:	e00b      	b.n	8004468 <DMA_CheckFifoParam+0xe4>
      break;
 8004450:	bf00      	nop
 8004452:	e00a      	b.n	800446a <DMA_CheckFifoParam+0xe6>
      break;
 8004454:	bf00      	nop
 8004456:	e008      	b.n	800446a <DMA_CheckFifoParam+0xe6>
      break;
 8004458:	bf00      	nop
 800445a:	e006      	b.n	800446a <DMA_CheckFifoParam+0xe6>
      break;
 800445c:	bf00      	nop
 800445e:	e004      	b.n	800446a <DMA_CheckFifoParam+0xe6>
      break;
 8004460:	bf00      	nop
 8004462:	e002      	b.n	800446a <DMA_CheckFifoParam+0xe6>
      break;   
 8004464:	bf00      	nop
 8004466:	e000      	b.n	800446a <DMA_CheckFifoParam+0xe6>
      break;
 8004468:	bf00      	nop
    }
  } 
  
  return status; 
 800446a:	7bfb      	ldrb	r3, [r7, #15]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004478:	b480      	push	{r7}
 800447a:	b089      	sub	sp, #36	; 0x24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800448a:	2300      	movs	r3, #0
 800448c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800448e:	2300      	movs	r3, #0
 8004490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004492:	2300      	movs	r3, #0
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	e169      	b.n	800476c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004498:	2201      	movs	r2, #1
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4013      	ands	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	f040 8158 	bne.w	8004766 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d00b      	beq.n	80044d6 <HAL_GPIO_Init+0x5e>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d007      	beq.n	80044d6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044ca:	2b11      	cmp	r3, #17
 80044cc:	d003      	beq.n	80044d6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b12      	cmp	r3, #18
 80044d4:	d130      	bne.n	8004538 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	2203      	movs	r2, #3
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	43db      	mvns	r3, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4013      	ands	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800450c:	2201      	movs	r2, #1
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	43db      	mvns	r3, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4013      	ands	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 0201 	and.w	r2, r3, #1
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4313      	orrs	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	2203      	movs	r2, #3
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	43db      	mvns	r3, r3
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4013      	ands	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4313      	orrs	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d003      	beq.n	8004578 <HAL_GPIO_Init+0x100>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b12      	cmp	r3, #18
 8004576:	d123      	bne.n	80045c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	08da      	lsrs	r2, r3, #3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3208      	adds	r2, #8
 8004580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	220f      	movs	r2, #15
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	08da      	lsrs	r2, r3, #3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3208      	adds	r2, #8
 80045ba:	69b9      	ldr	r1, [r7, #24]
 80045bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	2203      	movs	r2, #3
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	43db      	mvns	r3, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4013      	ands	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 0203 	and.w	r2, r3, #3
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 80b2 	beq.w	8004766 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004602:	4b5f      	ldr	r3, [pc, #380]	; (8004780 <HAL_GPIO_Init+0x308>)
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	4a5e      	ldr	r2, [pc, #376]	; (8004780 <HAL_GPIO_Init+0x308>)
 8004608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800460c:	6453      	str	r3, [r2, #68]	; 0x44
 800460e:	4b5c      	ldr	r3, [pc, #368]	; (8004780 <HAL_GPIO_Init+0x308>)
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800461a:	4a5a      	ldr	r2, [pc, #360]	; (8004784 <HAL_GPIO_Init+0x30c>)
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	089b      	lsrs	r3, r3, #2
 8004620:	3302      	adds	r3, #2
 8004622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004626:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	220f      	movs	r2, #15
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4013      	ands	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a51      	ldr	r2, [pc, #324]	; (8004788 <HAL_GPIO_Init+0x310>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d02b      	beq.n	800469e <HAL_GPIO_Init+0x226>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a50      	ldr	r2, [pc, #320]	; (800478c <HAL_GPIO_Init+0x314>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d025      	beq.n	800469a <HAL_GPIO_Init+0x222>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a4f      	ldr	r2, [pc, #316]	; (8004790 <HAL_GPIO_Init+0x318>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d01f      	beq.n	8004696 <HAL_GPIO_Init+0x21e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a4e      	ldr	r2, [pc, #312]	; (8004794 <HAL_GPIO_Init+0x31c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d019      	beq.n	8004692 <HAL_GPIO_Init+0x21a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a4d      	ldr	r2, [pc, #308]	; (8004798 <HAL_GPIO_Init+0x320>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d013      	beq.n	800468e <HAL_GPIO_Init+0x216>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a4c      	ldr	r2, [pc, #304]	; (800479c <HAL_GPIO_Init+0x324>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00d      	beq.n	800468a <HAL_GPIO_Init+0x212>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a4b      	ldr	r2, [pc, #300]	; (80047a0 <HAL_GPIO_Init+0x328>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d007      	beq.n	8004686 <HAL_GPIO_Init+0x20e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a4a      	ldr	r2, [pc, #296]	; (80047a4 <HAL_GPIO_Init+0x32c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d101      	bne.n	8004682 <HAL_GPIO_Init+0x20a>
 800467e:	2307      	movs	r3, #7
 8004680:	e00e      	b.n	80046a0 <HAL_GPIO_Init+0x228>
 8004682:	2308      	movs	r3, #8
 8004684:	e00c      	b.n	80046a0 <HAL_GPIO_Init+0x228>
 8004686:	2306      	movs	r3, #6
 8004688:	e00a      	b.n	80046a0 <HAL_GPIO_Init+0x228>
 800468a:	2305      	movs	r3, #5
 800468c:	e008      	b.n	80046a0 <HAL_GPIO_Init+0x228>
 800468e:	2304      	movs	r3, #4
 8004690:	e006      	b.n	80046a0 <HAL_GPIO_Init+0x228>
 8004692:	2303      	movs	r3, #3
 8004694:	e004      	b.n	80046a0 <HAL_GPIO_Init+0x228>
 8004696:	2302      	movs	r3, #2
 8004698:	e002      	b.n	80046a0 <HAL_GPIO_Init+0x228>
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <HAL_GPIO_Init+0x228>
 800469e:	2300      	movs	r3, #0
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	f002 0203 	and.w	r2, r2, #3
 80046a6:	0092      	lsls	r2, r2, #2
 80046a8:	4093      	lsls	r3, r2
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80046b0:	4934      	ldr	r1, [pc, #208]	; (8004784 <HAL_GPIO_Init+0x30c>)
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	089b      	lsrs	r3, r3, #2
 80046b6:	3302      	adds	r3, #2
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046be:	4b3a      	ldr	r3, [pc, #232]	; (80047a8 <HAL_GPIO_Init+0x330>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	43db      	mvns	r3, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4013      	ands	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046e2:	4a31      	ldr	r2, [pc, #196]	; (80047a8 <HAL_GPIO_Init+0x330>)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046e8:	4b2f      	ldr	r3, [pc, #188]	; (80047a8 <HAL_GPIO_Init+0x330>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	43db      	mvns	r3, r3
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4013      	ands	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800470c:	4a26      	ldr	r2, [pc, #152]	; (80047a8 <HAL_GPIO_Init+0x330>)
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004712:	4b25      	ldr	r3, [pc, #148]	; (80047a8 <HAL_GPIO_Init+0x330>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	43db      	mvns	r3, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4013      	ands	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004736:	4a1c      	ldr	r2, [pc, #112]	; (80047a8 <HAL_GPIO_Init+0x330>)
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800473c:	4b1a      	ldr	r3, [pc, #104]	; (80047a8 <HAL_GPIO_Init+0x330>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	43db      	mvns	r3, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4013      	ands	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004760:	4a11      	ldr	r2, [pc, #68]	; (80047a8 <HAL_GPIO_Init+0x330>)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3301      	adds	r3, #1
 800476a:	61fb      	str	r3, [r7, #28]
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	2b0f      	cmp	r3, #15
 8004770:	f67f ae92 	bls.w	8004498 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004774:	bf00      	nop
 8004776:	3724      	adds	r7, #36	; 0x24
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	40023800 	.word	0x40023800
 8004784:	40013800 	.word	0x40013800
 8004788:	40020000 	.word	0x40020000
 800478c:	40020400 	.word	0x40020400
 8004790:	40020800 	.word	0x40020800
 8004794:	40020c00 	.word	0x40020c00
 8004798:	40021000 	.word	0x40021000
 800479c:	40021400 	.word	0x40021400
 80047a0:	40021800 	.word	0x40021800
 80047a4:	40021c00 	.word	0x40021c00
 80047a8:	40013c00 	.word	0x40013c00

080047ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
inline void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	807b      	strh	r3, [r7, #2]
 80047b8:	4613      	mov	r3, r2
 80047ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047bc:	787b      	ldrb	r3, [r7, #1]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047c2:	887a      	ldrh	r2, [r7, #2]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80047c8:	e003      	b.n	80047d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80047ca:	887b      	ldrh	r3, [r7, #2]
 80047cc:	041a      	lsls	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	619a      	str	r2, [r3, #24]
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
inline void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047ea:	4b08      	ldr	r3, [pc, #32]	; (800480c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	4013      	ands	r3, r2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d006      	beq.n	8004804 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047f6:	4a05      	ldr	r2, [pc, #20]	; (800480c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fd fbbc 	bl	8001f7c <HAL_GPIO_EXTI_Callback>
  }
}
 8004804:	bf00      	nop
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40013c00 	.word	0x40013c00

08004810 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004820:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800483a:	4b23      	ldr	r3, [pc, #140]	; (80048c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	4a22      	ldr	r2, [pc, #136]	; (80048c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004844:	6413      	str	r3, [r2, #64]	; 0x40
 8004846:	4b20      	ldr	r3, [pc, #128]	; (80048c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004852:	4b1e      	ldr	r3, [pc, #120]	; (80048cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1d      	ldr	r2, [pc, #116]	; (80048cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800485c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800485e:	f7fe fe71 	bl	8003544 <HAL_GetTick>
 8004862:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004864:	e009      	b.n	800487a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004866:	f7fe fe6d 	bl	8003544 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004874:	d901      	bls.n	800487a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e022      	b.n	80048c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800487a:	4b14      	ldr	r3, [pc, #80]	; (80048cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004886:	d1ee      	bne.n	8004866 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004888:	4b10      	ldr	r3, [pc, #64]	; (80048cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a0f      	ldr	r2, [pc, #60]	; (80048cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800488e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004892:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004894:	f7fe fe56 	bl	8003544 <HAL_GetTick>
 8004898:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800489a:	e009      	b.n	80048b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800489c:	f7fe fe52 	bl	8003544 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048aa:	d901      	bls.n	80048b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e007      	b.n	80048c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048bc:	d1ee      	bne.n	800489c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40007000 	.word	0x40007000

080048d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80048d8:	2300      	movs	r3, #0
 80048da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e291      	b.n	8004e0a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 8087 	beq.w	8004a02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048f4:	4b96      	ldr	r3, [pc, #600]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 030c 	and.w	r3, r3, #12
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d00c      	beq.n	800491a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004900:	4b93      	ldr	r3, [pc, #588]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 030c 	and.w	r3, r3, #12
 8004908:	2b08      	cmp	r3, #8
 800490a:	d112      	bne.n	8004932 <HAL_RCC_OscConfig+0x62>
 800490c:	4b90      	ldr	r3, [pc, #576]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004918:	d10b      	bne.n	8004932 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800491a:	4b8d      	ldr	r3, [pc, #564]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d06c      	beq.n	8004a00 <HAL_RCC_OscConfig+0x130>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d168      	bne.n	8004a00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e26b      	b.n	8004e0a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800493a:	d106      	bne.n	800494a <HAL_RCC_OscConfig+0x7a>
 800493c:	4b84      	ldr	r3, [pc, #528]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a83      	ldr	r2, [pc, #524]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	e02e      	b.n	80049a8 <HAL_RCC_OscConfig+0xd8>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10c      	bne.n	800496c <HAL_RCC_OscConfig+0x9c>
 8004952:	4b7f      	ldr	r3, [pc, #508]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a7e      	ldr	r2, [pc, #504]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	4b7c      	ldr	r3, [pc, #496]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a7b      	ldr	r2, [pc, #492]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	e01d      	b.n	80049a8 <HAL_RCC_OscConfig+0xd8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004974:	d10c      	bne.n	8004990 <HAL_RCC_OscConfig+0xc0>
 8004976:	4b76      	ldr	r3, [pc, #472]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a75      	ldr	r2, [pc, #468]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 800497c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	4b73      	ldr	r3, [pc, #460]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a72      	ldr	r2, [pc, #456]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	e00b      	b.n	80049a8 <HAL_RCC_OscConfig+0xd8>
 8004990:	4b6f      	ldr	r3, [pc, #444]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a6e      	ldr	r2, [pc, #440]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	4b6c      	ldr	r3, [pc, #432]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a6b      	ldr	r2, [pc, #428]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 80049a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d013      	beq.n	80049d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b0:	f7fe fdc8 	bl	8003544 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b8:	f7fe fdc4 	bl	8003544 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b64      	cmp	r3, #100	; 0x64
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e21f      	b.n	8004e0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ca:	4b61      	ldr	r3, [pc, #388]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f0      	beq.n	80049b8 <HAL_RCC_OscConfig+0xe8>
 80049d6:	e014      	b.n	8004a02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fe fdb4 	bl	8003544 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049e0:	f7fe fdb0 	bl	8003544 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b64      	cmp	r3, #100	; 0x64
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e20b      	b.n	8004e0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f2:	4b57      	ldr	r3, [pc, #348]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f0      	bne.n	80049e0 <HAL_RCC_OscConfig+0x110>
 80049fe:	e000      	b.n	8004a02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d069      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a0e:	4b50      	ldr	r3, [pc, #320]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00b      	beq.n	8004a32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a1a:	4b4d      	ldr	r3, [pc, #308]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 030c 	and.w	r3, r3, #12
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d11c      	bne.n	8004a60 <HAL_RCC_OscConfig+0x190>
 8004a26:	4b4a      	ldr	r3, [pc, #296]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d116      	bne.n	8004a60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a32:	4b47      	ldr	r3, [pc, #284]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_RCC_OscConfig+0x17a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d001      	beq.n	8004a4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e1df      	b.n	8004e0a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a4a:	4b41      	ldr	r3, [pc, #260]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	493d      	ldr	r1, [pc, #244]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a5e:	e040      	b.n	8004ae2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d023      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a68:	4b39      	ldr	r3, [pc, #228]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a38      	ldr	r2, [pc, #224]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a6e:	f043 0301 	orr.w	r3, r3, #1
 8004a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a74:	f7fe fd66 	bl	8003544 <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a7c:	f7fe fd62 	bl	8003544 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e1bd      	b.n	8004e0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8e:	4b30      	ldr	r3, [pc, #192]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9a:	4b2d      	ldr	r3, [pc, #180]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4929      	ldr	r1, [pc, #164]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]
 8004aae:	e018      	b.n	8004ae2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ab0:	4b27      	ldr	r3, [pc, #156]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a26      	ldr	r2, [pc, #152]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004ab6:	f023 0301 	bic.w	r3, r3, #1
 8004aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fe fd42 	bl	8003544 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ac4:	f7fe fd3e 	bl	8003544 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e199      	b.n	8004e0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ad6:	4b1e      	ldr	r3, [pc, #120]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d038      	beq.n	8004b60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d019      	beq.n	8004b2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004af6:	4b16      	ldr	r3, [pc, #88]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afa:	4a15      	ldr	r2, [pc, #84]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004afc:	f043 0301 	orr.w	r3, r3, #1
 8004b00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b02:	f7fe fd1f 	bl	8003544 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b0a:	f7fe fd1b 	bl	8003544 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e176      	b.n	8004e0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1c:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x23a>
 8004b28:	e01a      	b.n	8004b60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b2a:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2e:	4a08      	ldr	r2, [pc, #32]	; (8004b50 <HAL_RCC_OscConfig+0x280>)
 8004b30:	f023 0301 	bic.w	r3, r3, #1
 8004b34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b36:	f7fe fd05 	bl	8003544 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b3c:	e00a      	b.n	8004b54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b3e:	f7fe fd01 	bl	8003544 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d903      	bls.n	8004b54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e15c      	b.n	8004e0a <HAL_RCC_OscConfig+0x53a>
 8004b50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b54:	4b91      	ldr	r3, [pc, #580]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1ee      	bne.n	8004b3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 80a4 	beq.w	8004cb6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b6e:	4b8b      	ldr	r3, [pc, #556]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10d      	bne.n	8004b96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7a:	4b88      	ldr	r3, [pc, #544]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	4a87      	ldr	r2, [pc, #540]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b84:	6413      	str	r3, [r2, #64]	; 0x40
 8004b86:	4b85      	ldr	r3, [pc, #532]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8e:	60bb      	str	r3, [r7, #8]
 8004b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b92:	2301      	movs	r3, #1
 8004b94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b96:	4b82      	ldr	r3, [pc, #520]	; (8004da0 <HAL_RCC_OscConfig+0x4d0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d118      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004ba2:	4b7f      	ldr	r3, [pc, #508]	; (8004da0 <HAL_RCC_OscConfig+0x4d0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a7e      	ldr	r2, [pc, #504]	; (8004da0 <HAL_RCC_OscConfig+0x4d0>)
 8004ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bae:	f7fe fcc9 	bl	8003544 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb6:	f7fe fcc5 	bl	8003544 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b64      	cmp	r3, #100	; 0x64
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e120      	b.n	8004e0a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bc8:	4b75      	ldr	r3, [pc, #468]	; (8004da0 <HAL_RCC_OscConfig+0x4d0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0f0      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d106      	bne.n	8004bea <HAL_RCC_OscConfig+0x31a>
 8004bdc:	4b6f      	ldr	r3, [pc, #444]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	4a6e      	ldr	r2, [pc, #440]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	6713      	str	r3, [r2, #112]	; 0x70
 8004be8:	e02d      	b.n	8004c46 <HAL_RCC_OscConfig+0x376>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10c      	bne.n	8004c0c <HAL_RCC_OscConfig+0x33c>
 8004bf2:	4b6a      	ldr	r3, [pc, #424]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf6:	4a69      	ldr	r2, [pc, #420]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004bf8:	f023 0301 	bic.w	r3, r3, #1
 8004bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bfe:	4b67      	ldr	r3, [pc, #412]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	4a66      	ldr	r2, [pc, #408]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004c04:	f023 0304 	bic.w	r3, r3, #4
 8004c08:	6713      	str	r3, [r2, #112]	; 0x70
 8004c0a:	e01c      	b.n	8004c46 <HAL_RCC_OscConfig+0x376>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	2b05      	cmp	r3, #5
 8004c12:	d10c      	bne.n	8004c2e <HAL_RCC_OscConfig+0x35e>
 8004c14:	4b61      	ldr	r3, [pc, #388]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	4a60      	ldr	r2, [pc, #384]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004c1a:	f043 0304 	orr.w	r3, r3, #4
 8004c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c20:	4b5e      	ldr	r3, [pc, #376]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	4a5d      	ldr	r2, [pc, #372]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2c:	e00b      	b.n	8004c46 <HAL_RCC_OscConfig+0x376>
 8004c2e:	4b5b      	ldr	r3, [pc, #364]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c32:	4a5a      	ldr	r2, [pc, #360]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	6713      	str	r3, [r2, #112]	; 0x70
 8004c3a:	4b58      	ldr	r3, [pc, #352]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3e:	4a57      	ldr	r2, [pc, #348]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004c40:	f023 0304 	bic.w	r3, r3, #4
 8004c44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d015      	beq.n	8004c7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4e:	f7fe fc79 	bl	8003544 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c54:	e00a      	b.n	8004c6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c56:	f7fe fc75 	bl	8003544 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e0ce      	b.n	8004e0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6c:	4b4b      	ldr	r3, [pc, #300]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0ee      	beq.n	8004c56 <HAL_RCC_OscConfig+0x386>
 8004c78:	e014      	b.n	8004ca4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7a:	f7fe fc63 	bl	8003544 <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c80:	e00a      	b.n	8004c98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c82:	f7fe fc5f 	bl	8003544 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e0b8      	b.n	8004e0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c98:	4b40      	ldr	r3, [pc, #256]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ee      	bne.n	8004c82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ca4:	7dfb      	ldrb	r3, [r7, #23]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d105      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004caa:	4b3c      	ldr	r3, [pc, #240]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	4a3b      	ldr	r2, [pc, #236]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 80a4 	beq.w	8004e08 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cc0:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 030c 	and.w	r3, r3, #12
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d06b      	beq.n	8004da4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d149      	bne.n	8004d68 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd4:	4b31      	ldr	r3, [pc, #196]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a30      	ldr	r2, [pc, #192]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce0:	f7fe fc30 	bl	8003544 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce8:	f7fe fc2c 	bl	8003544 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e087      	b.n	8004e0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfa:	4b28      	ldr	r3, [pc, #160]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f0      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69da      	ldr	r2, [r3, #28]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	019b      	lsls	r3, r3, #6
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	085b      	lsrs	r3, r3, #1
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	041b      	lsls	r3, r3, #16
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d28:	061b      	lsls	r3, r3, #24
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	4a1b      	ldr	r2, [pc, #108]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004d2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d32:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d34:	4b19      	ldr	r3, [pc, #100]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a18      	ldr	r2, [pc, #96]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fe fc00 	bl	8003544 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d48:	f7fe fbfc 	bl	8003544 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e057      	b.n	8004e0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d5a:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0x478>
 8004d66:	e04f      	b.n	8004e08 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d68:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a0b      	ldr	r2, [pc, #44]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fe fbe6 	bl	8003544 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d7c:	f7fe fbe2 	bl	8003544 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e03d      	b.n	8004e0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8e:	4b03      	ldr	r3, [pc, #12]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x4ac>
 8004d9a:	e035      	b.n	8004e08 <HAL_RCC_OscConfig+0x538>
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004da4:	4b1b      	ldr	r3, [pc, #108]	; (8004e14 <HAL_RCC_OscConfig+0x544>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d028      	beq.n	8004e04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d121      	bne.n	8004e04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d11a      	bne.n	8004e04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dda:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d111      	bne.n	8004e04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	085b      	lsrs	r3, r3, #1
 8004dec:	3b01      	subs	r3, #1
 8004dee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d107      	bne.n	8004e04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d001      	beq.n	8004e08 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	40023800 	.word	0x40023800

08004e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0d0      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e30:	4b6a      	ldr	r3, [pc, #424]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d910      	bls.n	8004e60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3e:	4b67      	ldr	r3, [pc, #412]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f023 020f 	bic.w	r2, r3, #15
 8004e46:	4965      	ldr	r1, [pc, #404]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4e:	4b63      	ldr	r3, [pc, #396]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d001      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e0b8      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d020      	beq.n	8004eae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e78:	4b59      	ldr	r3, [pc, #356]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	4a58      	ldr	r2, [pc, #352]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e90:	4b53      	ldr	r3, [pc, #332]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	4a52      	ldr	r2, [pc, #328]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e9c:	4b50      	ldr	r3, [pc, #320]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	494d      	ldr	r1, [pc, #308]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d040      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d107      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec2:	4b47      	ldr	r3, [pc, #284]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d115      	bne.n	8004efa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e07f      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d107      	bne.n	8004eea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eda:	4b41      	ldr	r3, [pc, #260]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e073      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eea:	4b3d      	ldr	r3, [pc, #244]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e06b      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004efa:	4b39      	ldr	r3, [pc, #228]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f023 0203 	bic.w	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	4936      	ldr	r1, [pc, #216]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0c:	f7fe fb1a 	bl	8003544 <HAL_GetTick>
 8004f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f12:	e00a      	b.n	8004f2a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f14:	f7fe fb16 	bl	8003544 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e053      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2a:	4b2d      	ldr	r3, [pc, #180]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 020c 	and.w	r2, r3, #12
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d1eb      	bne.n	8004f14 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f3c:	4b27      	ldr	r3, [pc, #156]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d210      	bcs.n	8004f6c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f4a:	4b24      	ldr	r3, [pc, #144]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f023 020f 	bic.w	r2, r3, #15
 8004f52:	4922      	ldr	r1, [pc, #136]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5a:	4b20      	ldr	r3, [pc, #128]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e032      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f78:	4b19      	ldr	r3, [pc, #100]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4916      	ldr	r1, [pc, #88]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f96:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	490e      	ldr	r1, [pc, #56]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004faa:	f000 f821 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 8004fae:	4601      	mov	r1, r0
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	4a0a      	ldr	r2, [pc, #40]	; (8004fe4 <HAL_RCC_ClockConfig+0x1cc>)
 8004fbc:	5cd3      	ldrb	r3, [r2, r3]
 8004fbe:	fa21 f303 	lsr.w	r3, r1, r3
 8004fc2:	4a09      	ldr	r2, [pc, #36]	; (8004fe8 <HAL_RCC_ClockConfig+0x1d0>)
 8004fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004fc6:	4b09      	ldr	r3, [pc, #36]	; (8004fec <HAL_RCC_ClockConfig+0x1d4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fe fa76 	bl	80034bc <HAL_InitTick>

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40023c00 	.word	0x40023c00
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	08007a68 	.word	0x08007a68
 8004fe8:	20010014 	.word	0x20010014
 8004fec:	20010018 	.word	0x20010018

08004ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	607b      	str	r3, [r7, #4]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	2300      	movs	r3, #0
 8005000:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005006:	4b50      	ldr	r3, [pc, #320]	; (8005148 <HAL_RCC_GetSysClockFreq+0x158>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 030c 	and.w	r3, r3, #12
 800500e:	2b04      	cmp	r3, #4
 8005010:	d007      	beq.n	8005022 <HAL_RCC_GetSysClockFreq+0x32>
 8005012:	2b08      	cmp	r3, #8
 8005014:	d008      	beq.n	8005028 <HAL_RCC_GetSysClockFreq+0x38>
 8005016:	2b00      	cmp	r3, #0
 8005018:	f040 808d 	bne.w	8005136 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800501c:	4b4b      	ldr	r3, [pc, #300]	; (800514c <HAL_RCC_GetSysClockFreq+0x15c>)
 800501e:	60bb      	str	r3, [r7, #8]
      break;
 8005020:	e08c      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005022:	4b4b      	ldr	r3, [pc, #300]	; (8005150 <HAL_RCC_GetSysClockFreq+0x160>)
 8005024:	60bb      	str	r3, [r7, #8]
      break;
 8005026:	e089      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005028:	4b47      	ldr	r3, [pc, #284]	; (8005148 <HAL_RCC_GetSysClockFreq+0x158>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005030:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005032:	4b45      	ldr	r3, [pc, #276]	; (8005148 <HAL_RCC_GetSysClockFreq+0x158>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d023      	beq.n	8005086 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800503e:	4b42      	ldr	r3, [pc, #264]	; (8005148 <HAL_RCC_GetSysClockFreq+0x158>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	099b      	lsrs	r3, r3, #6
 8005044:	f04f 0400 	mov.w	r4, #0
 8005048:	f240 11ff 	movw	r1, #511	; 0x1ff
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	ea03 0501 	and.w	r5, r3, r1
 8005054:	ea04 0602 	and.w	r6, r4, r2
 8005058:	4a3d      	ldr	r2, [pc, #244]	; (8005150 <HAL_RCC_GetSysClockFreq+0x160>)
 800505a:	fb02 f106 	mul.w	r1, r2, r6
 800505e:	2200      	movs	r2, #0
 8005060:	fb02 f205 	mul.w	r2, r2, r5
 8005064:	440a      	add	r2, r1
 8005066:	493a      	ldr	r1, [pc, #232]	; (8005150 <HAL_RCC_GetSysClockFreq+0x160>)
 8005068:	fba5 0101 	umull	r0, r1, r5, r1
 800506c:	1853      	adds	r3, r2, r1
 800506e:	4619      	mov	r1, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f04f 0400 	mov.w	r4, #0
 8005076:	461a      	mov	r2, r3
 8005078:	4623      	mov	r3, r4
 800507a:	f7fb fcef 	bl	8000a5c <__aeabi_uldivmod>
 800507e:	4603      	mov	r3, r0
 8005080:	460c      	mov	r4, r1
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e049      	b.n	800511a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005086:	4b30      	ldr	r3, [pc, #192]	; (8005148 <HAL_RCC_GetSysClockFreq+0x158>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	099b      	lsrs	r3, r3, #6
 800508c:	f04f 0400 	mov.w	r4, #0
 8005090:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	ea03 0501 	and.w	r5, r3, r1
 800509c:	ea04 0602 	and.w	r6, r4, r2
 80050a0:	4629      	mov	r1, r5
 80050a2:	4632      	mov	r2, r6
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	f04f 0400 	mov.w	r4, #0
 80050ac:	0154      	lsls	r4, r2, #5
 80050ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050b2:	014b      	lsls	r3, r1, #5
 80050b4:	4619      	mov	r1, r3
 80050b6:	4622      	mov	r2, r4
 80050b8:	1b49      	subs	r1, r1, r5
 80050ba:	eb62 0206 	sbc.w	r2, r2, r6
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	f04f 0400 	mov.w	r4, #0
 80050c6:	0194      	lsls	r4, r2, #6
 80050c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80050cc:	018b      	lsls	r3, r1, #6
 80050ce:	1a5b      	subs	r3, r3, r1
 80050d0:	eb64 0402 	sbc.w	r4, r4, r2
 80050d4:	f04f 0100 	mov.w	r1, #0
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	00e2      	lsls	r2, r4, #3
 80050de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050e2:	00d9      	lsls	r1, r3, #3
 80050e4:	460b      	mov	r3, r1
 80050e6:	4614      	mov	r4, r2
 80050e8:	195b      	adds	r3, r3, r5
 80050ea:	eb44 0406 	adc.w	r4, r4, r6
 80050ee:	f04f 0100 	mov.w	r1, #0
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	02a2      	lsls	r2, r4, #10
 80050f8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80050fc:	0299      	lsls	r1, r3, #10
 80050fe:	460b      	mov	r3, r1
 8005100:	4614      	mov	r4, r2
 8005102:	4618      	mov	r0, r3
 8005104:	4621      	mov	r1, r4
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f04f 0400 	mov.w	r4, #0
 800510c:	461a      	mov	r2, r3
 800510e:	4623      	mov	r3, r4
 8005110:	f7fb fca4 	bl	8000a5c <__aeabi_uldivmod>
 8005114:	4603      	mov	r3, r0
 8005116:	460c      	mov	r4, r1
 8005118:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800511a:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <HAL_RCC_GetSysClockFreq+0x158>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	0c1b      	lsrs	r3, r3, #16
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	3301      	adds	r3, #1
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005132:	60bb      	str	r3, [r7, #8]
      break;
 8005134:	e002      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005138:	60bb      	str	r3, [r7, #8]
      break;
 800513a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800513c:	68bb      	ldr	r3, [r7, #8]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005146:	bf00      	nop
 8005148:	40023800 	.word	0x40023800
 800514c:	00f42400 	.word	0x00f42400
 8005150:	017d7840 	.word	0x017d7840

08005154 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005158:	4b03      	ldr	r3, [pc, #12]	; (8005168 <HAL_RCC_GetHCLKFreq+0x14>)
 800515a:	681b      	ldr	r3, [r3, #0]
}
 800515c:	4618      	mov	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	20010014 	.word	0x20010014

0800516c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005170:	f7ff fff0 	bl	8005154 <HAL_RCC_GetHCLKFreq>
 8005174:	4601      	mov	r1, r0
 8005176:	4b05      	ldr	r3, [pc, #20]	; (800518c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	0a9b      	lsrs	r3, r3, #10
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	4a03      	ldr	r2, [pc, #12]	; (8005190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005182:	5cd3      	ldrb	r3, [r2, r3]
 8005184:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005188:	4618      	mov	r0, r3
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40023800 	.word	0x40023800
 8005190:	08007a78 	.word	0x08007a78

08005194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005198:	f7ff ffdc 	bl	8005154 <HAL_RCC_GetHCLKFreq>
 800519c:	4601      	mov	r1, r0
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	0b5b      	lsrs	r3, r3, #13
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	4a03      	ldr	r2, [pc, #12]	; (80051b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051aa:	5cd3      	ldrb	r3, [r2, r3]
 80051ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40023800 	.word	0x40023800
 80051b8:	08007a78 	.word	0x08007a78

080051bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80051cc:	2300      	movs	r3, #0
 80051ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d012      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051e0:	4b65      	ldr	r3, [pc, #404]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	4a64      	ldr	r2, [pc, #400]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80051ea:	6093      	str	r3, [r2, #8]
 80051ec:	4b62      	ldr	r3, [pc, #392]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	4960      	ldr	r1, [pc, #384]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8005202:	2301      	movs	r3, #1
 8005204:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d017      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005212:	4b59      	ldr	r3, [pc, #356]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005218:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005220:	4955      	ldr	r1, [pc, #340]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005230:	d101      	bne.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8005232:	2301      	movs	r3, #1
 8005234:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800523e:	2301      	movs	r3, #1
 8005240:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d017      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800524e:	4b4a      	ldr	r3, [pc, #296]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005254:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	4946      	ldr	r1, [pc, #280]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800526c:	d101      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800526e:	2301      	movs	r3, #1
 8005270:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800527a:	2301      	movs	r3, #1
 800527c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 808b 	beq.w	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800528c:	4b3a      	ldr	r3, [pc, #232]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	4a39      	ldr	r2, [pc, #228]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005296:	6413      	str	r3, [r2, #64]	; 0x40
 8005298:	4b37      	ldr	r3, [pc, #220]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80052a4:	4b35      	ldr	r3, [pc, #212]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a34      	ldr	r2, [pc, #208]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b0:	f7fe f948 	bl	8003544 <HAL_GetTick>
 80052b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b8:	f7fe f944 	bl	8003544 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b64      	cmp	r3, #100	; 0x64
 80052c4:	d901      	bls.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e2ba      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052ca:	4b2c      	ldr	r3, [pc, #176]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052d6:	4b28      	ldr	r3, [pc, #160]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d035      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d02e      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052f4:	4b20      	ldr	r3, [pc, #128]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052fe:	4b1e      	ldr	r3, [pc, #120]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	4a1d      	ldr	r2, [pc, #116]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005308:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800530a:	4b1b      	ldr	r3, [pc, #108]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530e:	4a1a      	ldr	r2, [pc, #104]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005314:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005316:	4a18      	ldr	r2, [pc, #96]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800531c:	4b16      	ldr	r3, [pc, #88]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800531e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b01      	cmp	r3, #1
 8005326:	d114      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005328:	f7fe f90c 	bl	8003544 <HAL_GetTick>
 800532c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532e:	e00a      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005330:	f7fe f908 	bl	8003544 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	f241 3288 	movw	r2, #5000	; 0x1388
 800533e:	4293      	cmp	r3, r2
 8005340:	d901      	bls.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e27c      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005346:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0ee      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800535e:	d111      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800536c:	4b04      	ldr	r3, [pc, #16]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800536e:	400b      	ands	r3, r1
 8005370:	4901      	ldr	r1, [pc, #4]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005372:	4313      	orrs	r3, r2
 8005374:	608b      	str	r3, [r1, #8]
 8005376:	e00b      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005378:	40023800 	.word	0x40023800
 800537c:	40007000 	.word	0x40007000
 8005380:	0ffffcff 	.word	0x0ffffcff
 8005384:	4ba3      	ldr	r3, [pc, #652]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	4aa2      	ldr	r2, [pc, #648]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800538a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800538e:	6093      	str	r3, [r2, #8]
 8005390:	4ba0      	ldr	r3, [pc, #640]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005392:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800539c:	499d      	ldr	r1, [pc, #628]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0310 	and.w	r3, r3, #16
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d010      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053ae:	4b99      	ldr	r3, [pc, #612]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80053b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053b4:	4a97      	ldr	r2, [pc, #604]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80053b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80053be:	4b95      	ldr	r3, [pc, #596]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80053c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	4992      	ldr	r1, [pc, #584]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053dc:	4b8d      	ldr	r3, [pc, #564]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80053de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ea:	498a      	ldr	r1, [pc, #552]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053fe:	4b85      	ldr	r3, [pc, #532]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005404:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540c:	4981      	ldr	r1, [pc, #516]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005420:	4b7c      	ldr	r3, [pc, #496]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800542e:	4979      	ldr	r1, [pc, #484]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005442:	4b74      	ldr	r3, [pc, #464]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005448:	f023 0203 	bic.w	r2, r3, #3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005450:	4970      	ldr	r1, [pc, #448]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005464:	4b6b      	ldr	r3, [pc, #428]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546a:	f023 020c 	bic.w	r2, r3, #12
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	4968      	ldr	r1, [pc, #416]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005486:	4b63      	ldr	r3, [pc, #396]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005494:	495f      	ldr	r1, [pc, #380]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054a8:	4b5a      	ldr	r3, [pc, #360]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80054aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b6:	4957      	ldr	r1, [pc, #348]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054ca:	4b52      	ldr	r3, [pc, #328]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80054cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d8:	494e      	ldr	r1, [pc, #312]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80054ec:	4b49      	ldr	r3, [pc, #292]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fa:	4946      	ldr	r1, [pc, #280]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800550e:	4b41      	ldr	r3, [pc, #260]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005514:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551c:	493d      	ldr	r1, [pc, #244]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800551e:	4313      	orrs	r3, r2
 8005520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005530:	4b38      	ldr	r3, [pc, #224]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005536:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553e:	4935      	ldr	r1, [pc, #212]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d011      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005552:	4b30      	ldr	r3, [pc, #192]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005558:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005560:	492c      	ldr	r1, [pc, #176]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800556c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005570:	d101      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8005572:	2301      	movs	r3, #1
 8005574:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005582:	4b24      	ldr	r3, [pc, #144]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005588:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005590:	4920      	ldr	r1, [pc, #128]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055a4:	4b1b      	ldr	r3, [pc, #108]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055b2:	4918      	ldr	r1, [pc, #96]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80055c6:	4b13      	ldr	r3, [pc, #76]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80055c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055cc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055d4:	490f      	ldr	r1, [pc, #60]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d005      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x432>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055ea:	f040 809c 	bne.w	8005726 <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055ee:	4b09      	ldr	r3, [pc, #36]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a08      	ldr	r2, [pc, #32]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80055f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055fa:	f7fd ffa3 	bl	8003544 <HAL_GetTick>
 80055fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005600:	e00a      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005602:	f7fd ff9f 	bl	8003544 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b64      	cmp	r3, #100	; 0x64
 800560e:	d903      	bls.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e115      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005614:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005618:	4b8b      	ldr	r3, [pc, #556]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1ee      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d017      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d113      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005638:	4b83      	ldr	r3, [pc, #524]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800563a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800563e:	0e1b      	lsrs	r3, r3, #24
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	019a      	lsls	r2, r3, #6
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	061b      	lsls	r3, r3, #24
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	071b      	lsls	r3, r3, #28
 8005658:	497b      	ldr	r1, [pc, #492]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d004      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005674:	d00a      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800567e:	2b00      	cmp	r3, #0
 8005680:	d024      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800568a:	d11f      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800568c:	4b6e      	ldr	r3, [pc, #440]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800568e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005692:	0f1b      	lsrs	r3, r3, #28
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	019a      	lsls	r2, r3, #6
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	061b      	lsls	r3, r3, #24
 80056a6:	431a      	orrs	r2, r3
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	071b      	lsls	r3, r3, #28
 80056ac:	4966      	ldr	r1, [pc, #408]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056b4:	4b64      	ldr	r3, [pc, #400]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80056b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056ba:	f023 021f 	bic.w	r2, r3, #31
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	4960      	ldr	r1, [pc, #384]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00d      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	019a      	lsls	r2, r3, #6
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	061b      	lsls	r3, r3, #24
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	071b      	lsls	r3, r3, #28
 80056ec:	4956      	ldr	r1, [pc, #344]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056f4:	4b54      	ldr	r3, [pc, #336]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a53      	ldr	r2, [pc, #332]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80056fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005700:	f7fd ff20 	bl	8003544 <HAL_GetTick>
 8005704:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005706:	e008      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005708:	f7fd ff1c 	bl	8003544 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b64      	cmp	r3, #100	; 0x64
 8005714:	d901      	bls.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e092      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800571a:	4b4b      	ldr	r3, [pc, #300]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0f0      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b01      	cmp	r3, #1
 800572a:	f040 8088 	bne.w	800583e <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800572e:	4b46      	ldr	r3, [pc, #280]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a45      	ldr	r2, [pc, #276]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800573a:	f7fd ff03 	bl	8003544 <HAL_GetTick>
 800573e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005740:	e008      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005742:	f7fd feff 	bl	8003544 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b64      	cmp	r3, #100	; 0x64
 800574e:	d901      	bls.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e075      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005754:	4b3c      	ldr	r3, [pc, #240]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800575c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005760:	d0ef      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005772:	2b00      	cmp	r3, #0
 8005774:	d009      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800577e:	2b00      	cmp	r3, #0
 8005780:	d024      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	2b00      	cmp	r3, #0
 8005788:	d120      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800578a:	4b2f      	ldr	r3, [pc, #188]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005790:	0c1b      	lsrs	r3, r3, #16
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	019a      	lsls	r2, r3, #6
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	041b      	lsls	r3, r3, #16
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	061b      	lsls	r3, r3, #24
 80057aa:	4927      	ldr	r1, [pc, #156]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057b2:	4b25      	ldr	r3, [pc, #148]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80057b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	4920      	ldr	r1, [pc, #128]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d018      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057e0:	d113      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057e2:	4b19      	ldr	r3, [pc, #100]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e8:	0e1b      	lsrs	r3, r3, #24
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	019a      	lsls	r2, r3, #6
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	041b      	lsls	r3, r3, #16
 80057fc:	431a      	orrs	r2, r3
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	061b      	lsls	r3, r3, #24
 8005802:	4911      	ldr	r1, [pc, #68]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800580a:	4b0f      	ldr	r3, [pc, #60]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a0e      	ldr	r2, [pc, #56]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005816:	f7fd fe95 	bl	8003544 <HAL_GetTick>
 800581a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800581c:	e008      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800581e:	f7fd fe91 	bl	8003544 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b64      	cmp	r3, #100	; 0x64
 800582a:	d901      	bls.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e007      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005830:	4b05      	ldr	r3, [pc, #20]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800583c:	d1ef      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3720      	adds	r7, #32
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40023800 	.word	0x40023800

0800584c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e01c      	b.n	8005898 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	795b      	ldrb	r3, [r3, #5]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d105      	bne.n	8005874 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7fd faa4 	bl	8002dbc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0204 	orr.w	r2, r2, #4
 8005888:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e084      	b.n	80059bc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d106      	bne.n	80058d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7fd fa95 	bl	8002dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058f2:	d902      	bls.n	80058fa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	e002      	b.n	8005900 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005908:	d007      	beq.n	800591a <HAL_SPI_Init+0x7a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005912:	d002      	beq.n	800591a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10b      	bne.n	800593a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800592a:	d903      	bls.n	8005934 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	631a      	str	r2, [r3, #48]	; 0x30
 8005932:	e002      	b.n	800593a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	ea42 0103 	orr.w	r1, r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	0c1b      	lsrs	r3, r3, #16
 800597a:	f003 0204 	and.w	r2, r3, #4
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	ea42 0103 	orr.w	r1, r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69da      	ldr	r2, [r3, #28]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
inline void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	099b      	lsrs	r3, r3, #6
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10f      	bne.n	8005a08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	099b      	lsrs	r3, r3, #6
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d004      	beq.n	8005a08 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
    return;
 8005a06:	e0d8      	b.n	8005bba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	085b      	lsrs	r3, r3, #1
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <HAL_SPI_IRQHandler+0x66>
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	09db      	lsrs	r3, r3, #7
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d004      	beq.n	8005a2a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	4798      	blx	r3
    return;
 8005a28:	e0c7      	b.n	8005bba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10c      	bne.n	8005a50 <HAL_SPI_IRQHandler+0x8c>
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	099b      	lsrs	r3, r3, #6
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <HAL_SPI_IRQHandler+0x8c>
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	0a1b      	lsrs	r3, r3, #8
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 80b5 	beq.w	8005bba <HAL_SPI_IRQHandler+0x1f6>
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80ae 	beq.w	8005bba <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	099b      	lsrs	r3, r3, #6
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d023      	beq.n	8005ab2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	d011      	beq.n	8005a9a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7a:	f043 0204 	orr.w	r2, r3, #4
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	617b      	str	r3, [r7, #20]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	e00b      	b.n	8005ab2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	693b      	ldr	r3, [r7, #16]
        return;
 8005ab0:	e083      	b.n	8005bba <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d014      	beq.n	8005ae8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac2:	f043 0201 	orr.w	r2, r3, #1
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00c      	beq.n	8005b0e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af8:	f043 0208 	orr.w	r2, r3, #8
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b00:	2300      	movs	r3, #0
 8005b02:	60bb      	str	r3, [r7, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	60bb      	str	r3, [r7, #8]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d050      	beq.n	8005bb8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b24:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d104      	bne.n	8005b42 <HAL_SPI_IRQHandler+0x17e>
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d034      	beq.n	8005bac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0203 	bic.w	r2, r2, #3
 8005b50:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d011      	beq.n	8005b7e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5e:	4a18      	ldr	r2, [pc, #96]	; (8005bc0 <HAL_SPI_IRQHandler+0x1fc>)
 8005b60:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fe fa2a 	bl	8003fc0 <HAL_DMA_Abort_IT>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d016      	beq.n	8005bb4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8a:	4a0d      	ldr	r2, [pc, #52]	; (8005bc0 <HAL_SPI_IRQHandler+0x1fc>)
 8005b8c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fe fa14 	bl	8003fc0 <HAL_DMA_Abort_IT>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005baa:	e003      	b.n	8005bb4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f809 	bl	8005bc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005bb2:	e000      	b.n	8005bb6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005bb4:	bf00      	nop
    return;
 8005bb6:	bf00      	nop
 8005bb8:	bf00      	nop
  }
}
 8005bba:	3720      	adds	r7, #32
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	08005bd9 	.word	0x08005bd9

08005bc4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f7ff ffe5 	bl	8005bc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005bfa:	bf00      	nop
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e01d      	b.n	8005c50 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d106      	bne.n	8005c2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7fd f9cb 	bl	8002fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2202      	movs	r2, #2
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4610      	mov	r0, r2
 8005c42:	f000 fbe7 	bl	8006414 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ca8 <HAL_TIM_Base_Start+0x50>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b06      	cmp	r3, #6
 8005c78:	d00b      	beq.n	8005c92 <HAL_TIM_Base_Start+0x3a>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c80:	d007      	beq.n	8005c92 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0201 	orr.w	r2, r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	00010007 	.word	0x00010007

08005cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f042 0201 	orr.w	r2, r2, #1
 8005cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <HAL_TIM_Base_Start_IT+0x50>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b06      	cmp	r3, #6
 8005cd4:	d00b      	beq.n	8005cee <HAL_TIM_Base_Start_IT+0x42>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cdc:	d007      	beq.n	8005cee <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0201 	orr.w	r2, r2, #1
 8005cec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	00010007 	.word	0x00010007

08005d00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e01d      	b.n	8005d4e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fd f918 	bl	8002f5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	f000 fb68 	bl	8006414 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e02d      	b.n	8005dc6 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f825 	bl	8005dce <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f000 fb3c 	bl	8006414 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0208 	bic.w	r2, r2, #8
 8005daa:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6819      	ldr	r1, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
inline void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b082      	sub	sp, #8
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d122      	bne.n	8005e3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d11b      	bne.n	8005e3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f06f 0202 	mvn.w	r2, #2
 8005e0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	f003 0303 	and.w	r3, r3, #3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fad7 	bl	80063d8 <HAL_TIM_IC_CaptureCallback>
 8005e2a:	e005      	b.n	8005e38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fac9 	bl	80063c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fada 	bl	80063ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d122      	bne.n	8005e92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d11b      	bne.n	8005e92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f06f 0204 	mvn.w	r2, #4
 8005e62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 faad 	bl	80063d8 <HAL_TIM_IC_CaptureCallback>
 8005e7e:	e005      	b.n	8005e8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fa9f 	bl	80063c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fab0 	bl	80063ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	d122      	bne.n	8005ee6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d11b      	bne.n	8005ee6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f06f 0208 	mvn.w	r2, #8
 8005eb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2204      	movs	r2, #4
 8005ebc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fa83 	bl	80063d8 <HAL_TIM_IC_CaptureCallback>
 8005ed2:	e005      	b.n	8005ee0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fa75 	bl	80063c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fa86 	bl	80063ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f003 0310 	and.w	r3, r3, #16
 8005ef0:	2b10      	cmp	r3, #16
 8005ef2:	d122      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	2b10      	cmp	r3, #16
 8005f00:	d11b      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f06f 0210 	mvn.w	r2, #16
 8005f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2208      	movs	r2, #8
 8005f10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fa59 	bl	80063d8 <HAL_TIM_IC_CaptureCallback>
 8005f26:	e005      	b.n	8005f34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fa4b 	bl	80063c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fa5c 	bl	80063ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d10e      	bne.n	8005f66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d107      	bne.n	8005f66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f06f 0201 	mvn.w	r2, #1
 8005f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7fc f82b 	bl	8001fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f70:	2b80      	cmp	r3, #128	; 0x80
 8005f72:	d10e      	bne.n	8005f92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7e:	2b80      	cmp	r3, #128	; 0x80
 8005f80:	d107      	bne.n	8005f92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 ff1f 	bl	8006dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa0:	d10e      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fac:	2b80      	cmp	r3, #128	; 0x80
 8005fae:	d107      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 ff12 	bl	8006de4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fca:	2b40      	cmp	r3, #64	; 0x40
 8005fcc:	d10e      	bne.n	8005fec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b40      	cmp	r3, #64	; 0x40
 8005fda:	d107      	bne.n	8005fec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fa0a 	bl	8006400 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b20      	cmp	r3, #32
 8005ff8:	d10e      	bne.n	8006018 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b20      	cmp	r3, #32
 8006006:	d107      	bne.n	8006018 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0220 	mvn.w	r2, #32
 8006010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fed2 	bl	8006dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006018:	bf00      	nop
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006036:	2302      	movs	r3, #2
 8006038:	e105      	b.n	8006246 <HAL_TIM_PWM_ConfigChannel+0x226>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2202      	movs	r2, #2
 8006046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b14      	cmp	r3, #20
 800604e:	f200 80f0 	bhi.w	8006232 <HAL_TIM_PWM_ConfigChannel+0x212>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	080060ad 	.word	0x080060ad
 800605c:	08006233 	.word	0x08006233
 8006060:	08006233 	.word	0x08006233
 8006064:	08006233 	.word	0x08006233
 8006068:	080060ed 	.word	0x080060ed
 800606c:	08006233 	.word	0x08006233
 8006070:	08006233 	.word	0x08006233
 8006074:	08006233 	.word	0x08006233
 8006078:	0800612f 	.word	0x0800612f
 800607c:	08006233 	.word	0x08006233
 8006080:	08006233 	.word	0x08006233
 8006084:	08006233 	.word	0x08006233
 8006088:	0800616f 	.word	0x0800616f
 800608c:	08006233 	.word	0x08006233
 8006090:	08006233 	.word	0x08006233
 8006094:	08006233 	.word	0x08006233
 8006098:	080061b1 	.word	0x080061b1
 800609c:	08006233 	.word	0x08006233
 80060a0:	08006233 	.word	0x08006233
 80060a4:	08006233 	.word	0x08006233
 80060a8:	080061f1 	.word	0x080061f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fa4e 	bl	8006554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0208 	orr.w	r2, r2, #8
 80060c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699a      	ldr	r2, [r3, #24]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0204 	bic.w	r2, r2, #4
 80060d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6999      	ldr	r1, [r3, #24]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	619a      	str	r2, [r3, #24]
      break;
 80060ea:	e0a3      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 faa0 	bl	8006638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6999      	ldr	r1, [r3, #24]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	021a      	lsls	r2, r3, #8
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	619a      	str	r2, [r3, #24]
      break;
 800612c:	e082      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	4618      	mov	r0, r3
 8006136:	f000 faf7 	bl	8006728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69da      	ldr	r2, [r3, #28]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0208 	orr.w	r2, r2, #8
 8006148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69da      	ldr	r2, [r3, #28]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0204 	bic.w	r2, r2, #4
 8006158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69d9      	ldr	r1, [r3, #28]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	61da      	str	r2, [r3, #28]
      break;
 800616c:	e062      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fb4d 	bl	8006814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69da      	ldr	r2, [r3, #28]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69d9      	ldr	r1, [r3, #28]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	021a      	lsls	r2, r3, #8
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	61da      	str	r2, [r3, #28]
      break;
 80061ae:	e041      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 fb84 	bl	80068c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0208 	orr.w	r2, r2, #8
 80061ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0204 	bic.w	r2, r2, #4
 80061da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	691a      	ldr	r2, [r3, #16]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061ee:	e021      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fbb6 	bl	8006968 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800620a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800621a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	021a      	lsls	r2, r3, #8
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006230:	e000      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006232:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop

08006250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006260:	2b01      	cmp	r3, #1
 8006262:	d101      	bne.n	8006268 <HAL_TIM_ConfigClockSource+0x18>
 8006264:	2302      	movs	r3, #2
 8006266:	e0a6      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x166>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4b4f      	ldr	r3, [pc, #316]	; (80063c0 <HAL_TIM_ConfigClockSource+0x170>)
 8006284:	4013      	ands	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800628e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b40      	cmp	r3, #64	; 0x40
 800629e:	d067      	beq.n	8006370 <HAL_TIM_ConfigClockSource+0x120>
 80062a0:	2b40      	cmp	r3, #64	; 0x40
 80062a2:	d80b      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x6c>
 80062a4:	2b10      	cmp	r3, #16
 80062a6:	d073      	beq.n	8006390 <HAL_TIM_ConfigClockSource+0x140>
 80062a8:	2b10      	cmp	r3, #16
 80062aa:	d802      	bhi.n	80062b2 <HAL_TIM_ConfigClockSource+0x62>
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d06f      	beq.n	8006390 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80062b0:	e078      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d06c      	beq.n	8006390 <HAL_TIM_ConfigClockSource+0x140>
 80062b6:	2b30      	cmp	r3, #48	; 0x30
 80062b8:	d06a      	beq.n	8006390 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80062ba:	e073      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80062bc:	2b70      	cmp	r3, #112	; 0x70
 80062be:	d00d      	beq.n	80062dc <HAL_TIM_ConfigClockSource+0x8c>
 80062c0:	2b70      	cmp	r3, #112	; 0x70
 80062c2:	d804      	bhi.n	80062ce <HAL_TIM_ConfigClockSource+0x7e>
 80062c4:	2b50      	cmp	r3, #80	; 0x50
 80062c6:	d033      	beq.n	8006330 <HAL_TIM_ConfigClockSource+0xe0>
 80062c8:	2b60      	cmp	r3, #96	; 0x60
 80062ca:	d041      	beq.n	8006350 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80062cc:	e06a      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80062ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d2:	d066      	beq.n	80063a2 <HAL_TIM_ConfigClockSource+0x152>
 80062d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d8:	d017      	beq.n	800630a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80062da:	e063      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6818      	ldr	r0, [r3, #0]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	6899      	ldr	r1, [r3, #8]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f000 fc0a 	bl	8006b04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	609a      	str	r2, [r3, #8]
      break;
 8006308:	e04c      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6818      	ldr	r0, [r3, #0]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	6899      	ldr	r1, [r3, #8]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f000 fbf3 	bl	8006b04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800632c:	609a      	str	r2, [r3, #8]
      break;
 800632e:	e039      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6818      	ldr	r0, [r3, #0]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	6859      	ldr	r1, [r3, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	461a      	mov	r2, r3
 800633e:	f000 fb67 	bl	8006a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2150      	movs	r1, #80	; 0x50
 8006348:	4618      	mov	r0, r3
 800634a:	f000 fbc0 	bl	8006ace <TIM_ITRx_SetConfig>
      break;
 800634e:	e029      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6818      	ldr	r0, [r3, #0]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	6859      	ldr	r1, [r3, #4]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	461a      	mov	r2, r3
 800635e:	f000 fb86 	bl	8006a6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2160      	movs	r1, #96	; 0x60
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fbb0 	bl	8006ace <TIM_ITRx_SetConfig>
      break;
 800636e:	e019      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	6859      	ldr	r1, [r3, #4]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	461a      	mov	r2, r3
 800637e:	f000 fb47 	bl	8006a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2140      	movs	r1, #64	; 0x40
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fba0 	bl	8006ace <TIM_ITRx_SetConfig>
      break;
 800638e:	e009      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4619      	mov	r1, r3
 800639a:	4610      	mov	r0, r2
 800639c:	f000 fb97 	bl	8006ace <TIM_ITRx_SetConfig>
      break;
 80063a0:	e000      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80063a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	fffeff88 	.word	0xfffeff88

080063c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a40      	ldr	r2, [pc, #256]	; (8006528 <TIM_Base_SetConfig+0x114>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d013      	beq.n	8006454 <TIM_Base_SetConfig+0x40>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006432:	d00f      	beq.n	8006454 <TIM_Base_SetConfig+0x40>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a3d      	ldr	r2, [pc, #244]	; (800652c <TIM_Base_SetConfig+0x118>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00b      	beq.n	8006454 <TIM_Base_SetConfig+0x40>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a3c      	ldr	r2, [pc, #240]	; (8006530 <TIM_Base_SetConfig+0x11c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d007      	beq.n	8006454 <TIM_Base_SetConfig+0x40>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a3b      	ldr	r2, [pc, #236]	; (8006534 <TIM_Base_SetConfig+0x120>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d003      	beq.n	8006454 <TIM_Base_SetConfig+0x40>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a3a      	ldr	r2, [pc, #232]	; (8006538 <TIM_Base_SetConfig+0x124>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d108      	bne.n	8006466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a2f      	ldr	r2, [pc, #188]	; (8006528 <TIM_Base_SetConfig+0x114>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d02b      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006474:	d027      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a2c      	ldr	r2, [pc, #176]	; (800652c <TIM_Base_SetConfig+0x118>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d023      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a2b      	ldr	r2, [pc, #172]	; (8006530 <TIM_Base_SetConfig+0x11c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d01f      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a2a      	ldr	r2, [pc, #168]	; (8006534 <TIM_Base_SetConfig+0x120>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d01b      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a29      	ldr	r2, [pc, #164]	; (8006538 <TIM_Base_SetConfig+0x124>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d017      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a28      	ldr	r2, [pc, #160]	; (800653c <TIM_Base_SetConfig+0x128>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a27      	ldr	r2, [pc, #156]	; (8006540 <TIM_Base_SetConfig+0x12c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00f      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a26      	ldr	r2, [pc, #152]	; (8006544 <TIM_Base_SetConfig+0x130>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00b      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a25      	ldr	r2, [pc, #148]	; (8006548 <TIM_Base_SetConfig+0x134>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d007      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a24      	ldr	r2, [pc, #144]	; (800654c <TIM_Base_SetConfig+0x138>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d003      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a23      	ldr	r2, [pc, #140]	; (8006550 <TIM_Base_SetConfig+0x13c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d108      	bne.n	80064d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a0a      	ldr	r2, [pc, #40]	; (8006528 <TIM_Base_SetConfig+0x114>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d003      	beq.n	800650c <TIM_Base_SetConfig+0xf8>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a0c      	ldr	r2, [pc, #48]	; (8006538 <TIM_Base_SetConfig+0x124>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d103      	bne.n	8006514 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	615a      	str	r2, [r3, #20]
}
 800651a:	bf00      	nop
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	40010000 	.word	0x40010000
 800652c:	40000400 	.word	0x40000400
 8006530:	40000800 	.word	0x40000800
 8006534:	40000c00 	.word	0x40000c00
 8006538:	40010400 	.word	0x40010400
 800653c:	40014000 	.word	0x40014000
 8006540:	40014400 	.word	0x40014400
 8006544:	40014800 	.word	0x40014800
 8006548:	40001800 	.word	0x40001800
 800654c:	40001c00 	.word	0x40001c00
 8006550:	40002000 	.word	0x40002000

08006554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	f023 0201 	bic.w	r2, r3, #1
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	4b2b      	ldr	r3, [pc, #172]	; (800662c <TIM_OC1_SetConfig+0xd8>)
 8006580:	4013      	ands	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0303 	bic.w	r3, r3, #3
 800658a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f023 0302 	bic.w	r3, r3, #2
 800659c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a21      	ldr	r2, [pc, #132]	; (8006630 <TIM_OC1_SetConfig+0xdc>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d003      	beq.n	80065b8 <TIM_OC1_SetConfig+0x64>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a20      	ldr	r2, [pc, #128]	; (8006634 <TIM_OC1_SetConfig+0xe0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d10c      	bne.n	80065d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f023 0308 	bic.w	r3, r3, #8
 80065be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f023 0304 	bic.w	r3, r3, #4
 80065d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a16      	ldr	r2, [pc, #88]	; (8006630 <TIM_OC1_SetConfig+0xdc>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d003      	beq.n	80065e2 <TIM_OC1_SetConfig+0x8e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a15      	ldr	r2, [pc, #84]	; (8006634 <TIM_OC1_SetConfig+0xe0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d111      	bne.n	8006606 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	621a      	str	r2, [r3, #32]
}
 8006620:	bf00      	nop
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	fffeff8f 	.word	0xfffeff8f
 8006630:	40010000 	.word	0x40010000
 8006634:	40010400 	.word	0x40010400

08006638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	f023 0210 	bic.w	r2, r3, #16
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4b2e      	ldr	r3, [pc, #184]	; (800671c <TIM_OC2_SetConfig+0xe4>)
 8006664:	4013      	ands	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800666e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	021b      	lsls	r3, r3, #8
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	4313      	orrs	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f023 0320 	bic.w	r3, r3, #32
 8006682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	011b      	lsls	r3, r3, #4
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	4313      	orrs	r3, r2
 800668e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a23      	ldr	r2, [pc, #140]	; (8006720 <TIM_OC2_SetConfig+0xe8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d003      	beq.n	80066a0 <TIM_OC2_SetConfig+0x68>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a22      	ldr	r2, [pc, #136]	; (8006724 <TIM_OC2_SetConfig+0xec>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d10d      	bne.n	80066bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	011b      	lsls	r3, r3, #4
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a18      	ldr	r2, [pc, #96]	; (8006720 <TIM_OC2_SetConfig+0xe8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d003      	beq.n	80066cc <TIM_OC2_SetConfig+0x94>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a17      	ldr	r2, [pc, #92]	; (8006724 <TIM_OC2_SetConfig+0xec>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d113      	bne.n	80066f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	621a      	str	r2, [r3, #32]
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	feff8fff 	.word	0xfeff8fff
 8006720:	40010000 	.word	0x40010000
 8006724:	40010400 	.word	0x40010400

08006728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4b2d      	ldr	r3, [pc, #180]	; (8006808 <TIM_OC3_SetConfig+0xe0>)
 8006754:	4013      	ands	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0303 	bic.w	r3, r3, #3
 800675e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	021b      	lsls	r3, r3, #8
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a22      	ldr	r2, [pc, #136]	; (800680c <TIM_OC3_SetConfig+0xe4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d003      	beq.n	800678e <TIM_OC3_SetConfig+0x66>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a21      	ldr	r2, [pc, #132]	; (8006810 <TIM_OC3_SetConfig+0xe8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d10d      	bne.n	80067aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	021b      	lsls	r3, r3, #8
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a17      	ldr	r2, [pc, #92]	; (800680c <TIM_OC3_SetConfig+0xe4>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d003      	beq.n	80067ba <TIM_OC3_SetConfig+0x92>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a16      	ldr	r2, [pc, #88]	; (8006810 <TIM_OC3_SetConfig+0xe8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d113      	bne.n	80067e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	011b      	lsls	r3, r3, #4
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	4313      	orrs	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	621a      	str	r2, [r3, #32]
}
 80067fc:	bf00      	nop
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	fffeff8f 	.word	0xfffeff8f
 800680c:	40010000 	.word	0x40010000
 8006810:	40010400 	.word	0x40010400

08006814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4b1e      	ldr	r3, [pc, #120]	; (80068b8 <TIM_OC4_SetConfig+0xa4>)
 8006840:	4013      	ands	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800684a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800685e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	031b      	lsls	r3, r3, #12
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a13      	ldr	r2, [pc, #76]	; (80068bc <TIM_OC4_SetConfig+0xa8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d003      	beq.n	800687c <TIM_OC4_SetConfig+0x68>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a12      	ldr	r2, [pc, #72]	; (80068c0 <TIM_OC4_SetConfig+0xac>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d109      	bne.n	8006890 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006882:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	019b      	lsls	r3, r3, #6
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	621a      	str	r2, [r3, #32]
}
 80068aa:	bf00      	nop
 80068ac:	371c      	adds	r7, #28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	feff8fff 	.word	0xfeff8fff
 80068bc:	40010000 	.word	0x40010000
 80068c0:	40010400 	.word	0x40010400

080068c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4b1b      	ldr	r3, [pc, #108]	; (800695c <TIM_OC5_SetConfig+0x98>)
 80068f0:	4013      	ands	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006904:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	041b      	lsls	r3, r3, #16
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a12      	ldr	r2, [pc, #72]	; (8006960 <TIM_OC5_SetConfig+0x9c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d003      	beq.n	8006922 <TIM_OC5_SetConfig+0x5e>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a11      	ldr	r2, [pc, #68]	; (8006964 <TIM_OC5_SetConfig+0xa0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d109      	bne.n	8006936 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006928:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	021b      	lsls	r3, r3, #8
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	621a      	str	r2, [r3, #32]
}
 8006950:	bf00      	nop
 8006952:	371c      	adds	r7, #28
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	fffeff8f 	.word	0xfffeff8f
 8006960:	40010000 	.word	0x40010000
 8006964:	40010400 	.word	0x40010400

08006968 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800698e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4b1c      	ldr	r3, [pc, #112]	; (8006a04 <TIM_OC6_SetConfig+0x9c>)
 8006994:	4013      	ands	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	051b      	lsls	r3, r3, #20
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a13      	ldr	r2, [pc, #76]	; (8006a08 <TIM_OC6_SetConfig+0xa0>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_OC6_SetConfig+0x60>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a12      	ldr	r2, [pc, #72]	; (8006a0c <TIM_OC6_SetConfig+0xa4>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d109      	bne.n	80069dc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	029b      	lsls	r3, r3, #10
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	621a      	str	r2, [r3, #32]
}
 80069f6:	bf00      	nop
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	feff8fff 	.word	0xfeff8fff
 8006a08:	40010000 	.word	0x40010000
 8006a0c:	40010400 	.word	0x40010400

08006a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	f023 0201 	bic.w	r2, r3, #1
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	011b      	lsls	r3, r3, #4
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f023 030a 	bic.w	r3, r3, #10
 8006a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	621a      	str	r2, [r3, #32]
}
 8006a62:	bf00      	nop
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b087      	sub	sp, #28
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	f023 0210 	bic.w	r2, r3, #16
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	031b      	lsls	r3, r3, #12
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006aaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	621a      	str	r2, [r3, #32]
}
 8006ac2:	bf00      	nop
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b085      	sub	sp, #20
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	f043 0307 	orr.w	r3, r3, #7
 8006af0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	609a      	str	r2, [r3, #8]
}
 8006af8:	bf00      	nop
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
 8006b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	021a      	lsls	r2, r3, #8
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	431a      	orrs	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	609a      	str	r2, [r3, #8]
}
 8006b38:	bf00      	nop
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2204      	movs	r2, #4
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 f94e 	bl	8006df8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <HAL_TIMEx_PWMN_Start+0x5c>)
 8006b74:	4013      	ands	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b06      	cmp	r3, #6
 8006b7c:	d00b      	beq.n	8006b96 <HAL_TIMEx_PWMN_Start+0x52>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b84:	d007      	beq.n	8006b96 <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0201 	orr.w	r2, r2, #1
 8006b94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	00010007 	.word	0x00010007

08006ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d101      	bne.n	8006bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	e06d      	b.n	8006c98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a30      	ldr	r2, [pc, #192]	; (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d004      	beq.n	8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a2f      	ldr	r2, [pc, #188]	; (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d108      	bne.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bf6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a20      	ldr	r2, [pc, #128]	; (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d022      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2e:	d01d      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a1d      	ldr	r2, [pc, #116]	; (8006cac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d018      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a1c      	ldr	r2, [pc, #112]	; (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d013      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1a      	ldr	r2, [pc, #104]	; (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00e      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a15      	ldr	r2, [pc, #84]	; (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d009      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a16      	ldr	r2, [pc, #88]	; (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d004      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a15      	ldr	r2, [pc, #84]	; (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d10c      	bne.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	40010400 	.word	0x40010400
 8006cac:	40000400 	.word	0x40000400
 8006cb0:	40000800 	.word	0x40000800
 8006cb4:	40000c00 	.word	0x40000c00
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	40001800 	.word	0x40001800

08006cc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e065      	b.n	8006da8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	041b      	lsls	r3, r3, #16
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a16      	ldr	r2, [pc, #88]	; (8006db4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d004      	beq.n	8006d6a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a14      	ldr	r2, [pc, #80]	; (8006db8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d115      	bne.n	8006d96 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	051b      	lsls	r3, r3, #20
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	40010000 	.word	0x40010000
 8006db8:	40010400 	.word	0x40010400

08006dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	f003 031f 	and.w	r3, r3, #31
 8006e0a:	2204      	movs	r2, #4
 8006e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a1a      	ldr	r2, [r3, #32]
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	43db      	mvns	r3, r3
 8006e1a:	401a      	ands	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a1a      	ldr	r2, [r3, #32]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f003 031f 	and.w	r3, r3, #31
 8006e2a:	6879      	ldr	r1, [r7, #4]
 8006e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e30:	431a      	orrs	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	621a      	str	r2, [r3, #32]
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b082      	sub	sp, #8
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e040      	b.n	8006ed6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d106      	bne.n	8006e6a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7fc f97f 	bl	8003168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2224      	movs	r2, #36	; 0x24
 8006e6e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0201 	bic.w	r2, r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f973 	bl	800716c <UART_SetConfig>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e022      	b.n	8006ed6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fc11 	bl	80076c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006eac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ebc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f042 0201 	orr.w	r2, r2, #1
 8006ecc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fc98 	bl	8007804 <UART_CheckIdleState>
 8006ed4:	4603      	mov	r3, r0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
inline void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b088      	sub	sp, #32
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f06:	4013      	ands	r3, r2
 8006f08:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d113      	bne.n	8006f38 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00e      	beq.n	8006f38 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	f003 0320 	and.w	r3, r3, #32
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d009      	beq.n	8006f38 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 8100 	beq.w	800712e <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	4798      	blx	r3
      }
      return;
 8006f36:	e0fa      	b.n	800712e <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 80d5 	beq.w	80070ea <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d105      	bne.n	8006f56 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 80ca 	beq.w	80070ea <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00e      	beq.n	8006f7e <HAL_UART_IRQHandler+0x9e>
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d009      	beq.n	8006f7e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f76:	f043 0201 	orr.w	r2, r3, #1
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00e      	beq.n	8006fa6 <HAL_UART_IRQHandler+0xc6>
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d009      	beq.n	8006fa6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2202      	movs	r2, #2
 8006f98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f9e:	f043 0204 	orr.w	r2, r3, #4
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00e      	beq.n	8006fce <HAL_UART_IRQHandler+0xee>
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d009      	beq.n	8006fce <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2204      	movs	r2, #4
 8006fc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fc6:	f043 0202 	orr.w	r2, r3, #2
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	f003 0308 	and.w	r3, r3, #8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d013      	beq.n	8007000 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	f003 0320 	and.w	r3, r3, #32
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d104      	bne.n	8006fec <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d009      	beq.n	8007000 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2208      	movs	r2, #8
 8006ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ff8:	f043 0208 	orr.w	r2, r3, #8
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00f      	beq.n	800702a <HAL_UART_IRQHandler+0x14a>
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00a      	beq.n	800702a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800701c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007022:	f043 0220 	orr.w	r2, r3, #32
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800702e:	2b00      	cmp	r3, #0
 8007030:	d07f      	beq.n	8007132 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	f003 0320 	and.w	r3, r3, #32
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00c      	beq.n	8007056 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	f003 0320 	and.w	r3, r3, #32
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800705a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007066:	2b40      	cmp	r3, #64	; 0x40
 8007068:	d004      	beq.n	8007074 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007070:	2b00      	cmp	r3, #0
 8007072:	d031      	beq.n	80070d8 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fc6f 	bl	8007958 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007084:	2b40      	cmp	r3, #64	; 0x40
 8007086:	d123      	bne.n	80070d0 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689a      	ldr	r2, [r3, #8]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007096:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d013      	beq.n	80070c8 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a4:	4a26      	ldr	r2, [pc, #152]	; (8007140 <HAL_UART_IRQHandler+0x260>)
 80070a6:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fc ff87 	bl	8003fc0 <HAL_DMA_Abort_IT>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d016      	beq.n	80070e6 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80070c2:	4610      	mov	r0, r2
 80070c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c6:	e00e      	b.n	80070e6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f845 	bl	8007158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ce:	e00a      	b.n	80070e6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f841 	bl	8007158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d6:	e006      	b.n	80070e6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f83d 	bl	8007158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80070e4:	e025      	b.n	8007132 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e6:	bf00      	nop
    return;
 80070e8:	e023      	b.n	8007132 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00d      	beq.n	8007110 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d008      	beq.n	8007110 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007102:	2b00      	cmp	r3, #0
 8007104:	d017      	beq.n	8007136 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	4798      	blx	r3
    }
    return;
 800710e:	e012      	b.n	8007136 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00e      	beq.n	8007138 <HAL_UART_IRQHandler+0x258>
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007120:	2b00      	cmp	r3, #0
 8007122:	d009      	beq.n	8007138 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fc4d 	bl	80079c4 <UART_EndTransmit_IT>
    return;
 800712a:	bf00      	nop
 800712c:	e004      	b.n	8007138 <HAL_UART_IRQHandler+0x258>
      return;
 800712e:	bf00      	nop
 8007130:	e002      	b.n	8007138 <HAL_UART_IRQHandler+0x258>
    return;
 8007132:	bf00      	nop
 8007134:	e000      	b.n	8007138 <HAL_UART_IRQHandler+0x258>
    return;
 8007136:	bf00      	nop
  }

}
 8007138:	3720      	adds	r7, #32
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	08007999 	.word	0x08007999

08007144 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007174:	2300      	movs	r3, #0
 8007176:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	431a      	orrs	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	4313      	orrs	r3, r2
 8007192:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	4bb1      	ldr	r3, [pc, #708]	; (8007460 <UART_SetConfig+0x2f4>)
 800719c:	4013      	ands	r3, r2
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	6812      	ldr	r2, [r2, #0]
 80071a2:	6939      	ldr	r1, [r7, #16]
 80071a4:	430b      	orrs	r3, r1
 80071a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	430a      	orrs	r2, r1
 80071e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a9f      	ldr	r2, [pc, #636]	; (8007464 <UART_SetConfig+0x2f8>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d121      	bne.n	8007230 <UART_SetConfig+0xc4>
 80071ec:	4b9e      	ldr	r3, [pc, #632]	; (8007468 <UART_SetConfig+0x2fc>)
 80071ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d816      	bhi.n	8007228 <UART_SetConfig+0xbc>
 80071fa:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <UART_SetConfig+0x94>)
 80071fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007200:	08007211 	.word	0x08007211
 8007204:	0800721d 	.word	0x0800721d
 8007208:	08007217 	.word	0x08007217
 800720c:	08007223 	.word	0x08007223
 8007210:	2301      	movs	r3, #1
 8007212:	77fb      	strb	r3, [r7, #31]
 8007214:	e151      	b.n	80074ba <UART_SetConfig+0x34e>
 8007216:	2302      	movs	r3, #2
 8007218:	77fb      	strb	r3, [r7, #31]
 800721a:	e14e      	b.n	80074ba <UART_SetConfig+0x34e>
 800721c:	2304      	movs	r3, #4
 800721e:	77fb      	strb	r3, [r7, #31]
 8007220:	e14b      	b.n	80074ba <UART_SetConfig+0x34e>
 8007222:	2308      	movs	r3, #8
 8007224:	77fb      	strb	r3, [r7, #31]
 8007226:	e148      	b.n	80074ba <UART_SetConfig+0x34e>
 8007228:	2310      	movs	r3, #16
 800722a:	77fb      	strb	r3, [r7, #31]
 800722c:	bf00      	nop
 800722e:	e144      	b.n	80074ba <UART_SetConfig+0x34e>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a8d      	ldr	r2, [pc, #564]	; (800746c <UART_SetConfig+0x300>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d134      	bne.n	80072a4 <UART_SetConfig+0x138>
 800723a:	4b8b      	ldr	r3, [pc, #556]	; (8007468 <UART_SetConfig+0x2fc>)
 800723c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007240:	f003 030c 	and.w	r3, r3, #12
 8007244:	2b0c      	cmp	r3, #12
 8007246:	d829      	bhi.n	800729c <UART_SetConfig+0x130>
 8007248:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <UART_SetConfig+0xe4>)
 800724a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724e:	bf00      	nop
 8007250:	08007285 	.word	0x08007285
 8007254:	0800729d 	.word	0x0800729d
 8007258:	0800729d 	.word	0x0800729d
 800725c:	0800729d 	.word	0x0800729d
 8007260:	08007291 	.word	0x08007291
 8007264:	0800729d 	.word	0x0800729d
 8007268:	0800729d 	.word	0x0800729d
 800726c:	0800729d 	.word	0x0800729d
 8007270:	0800728b 	.word	0x0800728b
 8007274:	0800729d 	.word	0x0800729d
 8007278:	0800729d 	.word	0x0800729d
 800727c:	0800729d 	.word	0x0800729d
 8007280:	08007297 	.word	0x08007297
 8007284:	2300      	movs	r3, #0
 8007286:	77fb      	strb	r3, [r7, #31]
 8007288:	e117      	b.n	80074ba <UART_SetConfig+0x34e>
 800728a:	2302      	movs	r3, #2
 800728c:	77fb      	strb	r3, [r7, #31]
 800728e:	e114      	b.n	80074ba <UART_SetConfig+0x34e>
 8007290:	2304      	movs	r3, #4
 8007292:	77fb      	strb	r3, [r7, #31]
 8007294:	e111      	b.n	80074ba <UART_SetConfig+0x34e>
 8007296:	2308      	movs	r3, #8
 8007298:	77fb      	strb	r3, [r7, #31]
 800729a:	e10e      	b.n	80074ba <UART_SetConfig+0x34e>
 800729c:	2310      	movs	r3, #16
 800729e:	77fb      	strb	r3, [r7, #31]
 80072a0:	bf00      	nop
 80072a2:	e10a      	b.n	80074ba <UART_SetConfig+0x34e>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a71      	ldr	r2, [pc, #452]	; (8007470 <UART_SetConfig+0x304>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d120      	bne.n	80072f0 <UART_SetConfig+0x184>
 80072ae:	4b6e      	ldr	r3, [pc, #440]	; (8007468 <UART_SetConfig+0x2fc>)
 80072b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072b8:	2b10      	cmp	r3, #16
 80072ba:	d00f      	beq.n	80072dc <UART_SetConfig+0x170>
 80072bc:	2b10      	cmp	r3, #16
 80072be:	d802      	bhi.n	80072c6 <UART_SetConfig+0x15a>
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <UART_SetConfig+0x164>
 80072c4:	e010      	b.n	80072e8 <UART_SetConfig+0x17c>
 80072c6:	2b20      	cmp	r3, #32
 80072c8:	d005      	beq.n	80072d6 <UART_SetConfig+0x16a>
 80072ca:	2b30      	cmp	r3, #48	; 0x30
 80072cc:	d009      	beq.n	80072e2 <UART_SetConfig+0x176>
 80072ce:	e00b      	b.n	80072e8 <UART_SetConfig+0x17c>
 80072d0:	2300      	movs	r3, #0
 80072d2:	77fb      	strb	r3, [r7, #31]
 80072d4:	e0f1      	b.n	80074ba <UART_SetConfig+0x34e>
 80072d6:	2302      	movs	r3, #2
 80072d8:	77fb      	strb	r3, [r7, #31]
 80072da:	e0ee      	b.n	80074ba <UART_SetConfig+0x34e>
 80072dc:	2304      	movs	r3, #4
 80072de:	77fb      	strb	r3, [r7, #31]
 80072e0:	e0eb      	b.n	80074ba <UART_SetConfig+0x34e>
 80072e2:	2308      	movs	r3, #8
 80072e4:	77fb      	strb	r3, [r7, #31]
 80072e6:	e0e8      	b.n	80074ba <UART_SetConfig+0x34e>
 80072e8:	2310      	movs	r3, #16
 80072ea:	77fb      	strb	r3, [r7, #31]
 80072ec:	bf00      	nop
 80072ee:	e0e4      	b.n	80074ba <UART_SetConfig+0x34e>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a5f      	ldr	r2, [pc, #380]	; (8007474 <UART_SetConfig+0x308>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d120      	bne.n	800733c <UART_SetConfig+0x1d0>
 80072fa:	4b5b      	ldr	r3, [pc, #364]	; (8007468 <UART_SetConfig+0x2fc>)
 80072fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007300:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	d00f      	beq.n	8007328 <UART_SetConfig+0x1bc>
 8007308:	2b40      	cmp	r3, #64	; 0x40
 800730a:	d802      	bhi.n	8007312 <UART_SetConfig+0x1a6>
 800730c:	2b00      	cmp	r3, #0
 800730e:	d005      	beq.n	800731c <UART_SetConfig+0x1b0>
 8007310:	e010      	b.n	8007334 <UART_SetConfig+0x1c8>
 8007312:	2b80      	cmp	r3, #128	; 0x80
 8007314:	d005      	beq.n	8007322 <UART_SetConfig+0x1b6>
 8007316:	2bc0      	cmp	r3, #192	; 0xc0
 8007318:	d009      	beq.n	800732e <UART_SetConfig+0x1c2>
 800731a:	e00b      	b.n	8007334 <UART_SetConfig+0x1c8>
 800731c:	2300      	movs	r3, #0
 800731e:	77fb      	strb	r3, [r7, #31]
 8007320:	e0cb      	b.n	80074ba <UART_SetConfig+0x34e>
 8007322:	2302      	movs	r3, #2
 8007324:	77fb      	strb	r3, [r7, #31]
 8007326:	e0c8      	b.n	80074ba <UART_SetConfig+0x34e>
 8007328:	2304      	movs	r3, #4
 800732a:	77fb      	strb	r3, [r7, #31]
 800732c:	e0c5      	b.n	80074ba <UART_SetConfig+0x34e>
 800732e:	2308      	movs	r3, #8
 8007330:	77fb      	strb	r3, [r7, #31]
 8007332:	e0c2      	b.n	80074ba <UART_SetConfig+0x34e>
 8007334:	2310      	movs	r3, #16
 8007336:	77fb      	strb	r3, [r7, #31]
 8007338:	bf00      	nop
 800733a:	e0be      	b.n	80074ba <UART_SetConfig+0x34e>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a4d      	ldr	r2, [pc, #308]	; (8007478 <UART_SetConfig+0x30c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d124      	bne.n	8007390 <UART_SetConfig+0x224>
 8007346:	4b48      	ldr	r3, [pc, #288]	; (8007468 <UART_SetConfig+0x2fc>)
 8007348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007354:	d012      	beq.n	800737c <UART_SetConfig+0x210>
 8007356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800735a:	d802      	bhi.n	8007362 <UART_SetConfig+0x1f6>
 800735c:	2b00      	cmp	r3, #0
 800735e:	d007      	beq.n	8007370 <UART_SetConfig+0x204>
 8007360:	e012      	b.n	8007388 <UART_SetConfig+0x21c>
 8007362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007366:	d006      	beq.n	8007376 <UART_SetConfig+0x20a>
 8007368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800736c:	d009      	beq.n	8007382 <UART_SetConfig+0x216>
 800736e:	e00b      	b.n	8007388 <UART_SetConfig+0x21c>
 8007370:	2300      	movs	r3, #0
 8007372:	77fb      	strb	r3, [r7, #31]
 8007374:	e0a1      	b.n	80074ba <UART_SetConfig+0x34e>
 8007376:	2302      	movs	r3, #2
 8007378:	77fb      	strb	r3, [r7, #31]
 800737a:	e09e      	b.n	80074ba <UART_SetConfig+0x34e>
 800737c:	2304      	movs	r3, #4
 800737e:	77fb      	strb	r3, [r7, #31]
 8007380:	e09b      	b.n	80074ba <UART_SetConfig+0x34e>
 8007382:	2308      	movs	r3, #8
 8007384:	77fb      	strb	r3, [r7, #31]
 8007386:	e098      	b.n	80074ba <UART_SetConfig+0x34e>
 8007388:	2310      	movs	r3, #16
 800738a:	77fb      	strb	r3, [r7, #31]
 800738c:	bf00      	nop
 800738e:	e094      	b.n	80074ba <UART_SetConfig+0x34e>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a39      	ldr	r2, [pc, #228]	; (800747c <UART_SetConfig+0x310>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d124      	bne.n	80073e4 <UART_SetConfig+0x278>
 800739a:	4b33      	ldr	r3, [pc, #204]	; (8007468 <UART_SetConfig+0x2fc>)
 800739c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073a8:	d012      	beq.n	80073d0 <UART_SetConfig+0x264>
 80073aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ae:	d802      	bhi.n	80073b6 <UART_SetConfig+0x24a>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d007      	beq.n	80073c4 <UART_SetConfig+0x258>
 80073b4:	e012      	b.n	80073dc <UART_SetConfig+0x270>
 80073b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ba:	d006      	beq.n	80073ca <UART_SetConfig+0x25e>
 80073bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073c0:	d009      	beq.n	80073d6 <UART_SetConfig+0x26a>
 80073c2:	e00b      	b.n	80073dc <UART_SetConfig+0x270>
 80073c4:	2301      	movs	r3, #1
 80073c6:	77fb      	strb	r3, [r7, #31]
 80073c8:	e077      	b.n	80074ba <UART_SetConfig+0x34e>
 80073ca:	2302      	movs	r3, #2
 80073cc:	77fb      	strb	r3, [r7, #31]
 80073ce:	e074      	b.n	80074ba <UART_SetConfig+0x34e>
 80073d0:	2304      	movs	r3, #4
 80073d2:	77fb      	strb	r3, [r7, #31]
 80073d4:	e071      	b.n	80074ba <UART_SetConfig+0x34e>
 80073d6:	2308      	movs	r3, #8
 80073d8:	77fb      	strb	r3, [r7, #31]
 80073da:	e06e      	b.n	80074ba <UART_SetConfig+0x34e>
 80073dc:	2310      	movs	r3, #16
 80073de:	77fb      	strb	r3, [r7, #31]
 80073e0:	bf00      	nop
 80073e2:	e06a      	b.n	80074ba <UART_SetConfig+0x34e>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a25      	ldr	r2, [pc, #148]	; (8007480 <UART_SetConfig+0x314>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d124      	bne.n	8007438 <UART_SetConfig+0x2cc>
 80073ee:	4b1e      	ldr	r3, [pc, #120]	; (8007468 <UART_SetConfig+0x2fc>)
 80073f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80073f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073fc:	d012      	beq.n	8007424 <UART_SetConfig+0x2b8>
 80073fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007402:	d802      	bhi.n	800740a <UART_SetConfig+0x29e>
 8007404:	2b00      	cmp	r3, #0
 8007406:	d007      	beq.n	8007418 <UART_SetConfig+0x2ac>
 8007408:	e012      	b.n	8007430 <UART_SetConfig+0x2c4>
 800740a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800740e:	d006      	beq.n	800741e <UART_SetConfig+0x2b2>
 8007410:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007414:	d009      	beq.n	800742a <UART_SetConfig+0x2be>
 8007416:	e00b      	b.n	8007430 <UART_SetConfig+0x2c4>
 8007418:	2300      	movs	r3, #0
 800741a:	77fb      	strb	r3, [r7, #31]
 800741c:	e04d      	b.n	80074ba <UART_SetConfig+0x34e>
 800741e:	2302      	movs	r3, #2
 8007420:	77fb      	strb	r3, [r7, #31]
 8007422:	e04a      	b.n	80074ba <UART_SetConfig+0x34e>
 8007424:	2304      	movs	r3, #4
 8007426:	77fb      	strb	r3, [r7, #31]
 8007428:	e047      	b.n	80074ba <UART_SetConfig+0x34e>
 800742a:	2308      	movs	r3, #8
 800742c:	77fb      	strb	r3, [r7, #31]
 800742e:	e044      	b.n	80074ba <UART_SetConfig+0x34e>
 8007430:	2310      	movs	r3, #16
 8007432:	77fb      	strb	r3, [r7, #31]
 8007434:	bf00      	nop
 8007436:	e040      	b.n	80074ba <UART_SetConfig+0x34e>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a11      	ldr	r2, [pc, #68]	; (8007484 <UART_SetConfig+0x318>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d139      	bne.n	80074b6 <UART_SetConfig+0x34a>
 8007442:	4b09      	ldr	r3, [pc, #36]	; (8007468 <UART_SetConfig+0x2fc>)
 8007444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007448:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800744c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007450:	d027      	beq.n	80074a2 <UART_SetConfig+0x336>
 8007452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007456:	d817      	bhi.n	8007488 <UART_SetConfig+0x31c>
 8007458:	2b00      	cmp	r3, #0
 800745a:	d01c      	beq.n	8007496 <UART_SetConfig+0x32a>
 800745c:	e027      	b.n	80074ae <UART_SetConfig+0x342>
 800745e:	bf00      	nop
 8007460:	efff69f3 	.word	0xefff69f3
 8007464:	40011000 	.word	0x40011000
 8007468:	40023800 	.word	0x40023800
 800746c:	40004400 	.word	0x40004400
 8007470:	40004800 	.word	0x40004800
 8007474:	40004c00 	.word	0x40004c00
 8007478:	40005000 	.word	0x40005000
 800747c:	40011400 	.word	0x40011400
 8007480:	40007800 	.word	0x40007800
 8007484:	40007c00 	.word	0x40007c00
 8007488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800748c:	d006      	beq.n	800749c <UART_SetConfig+0x330>
 800748e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007492:	d009      	beq.n	80074a8 <UART_SetConfig+0x33c>
 8007494:	e00b      	b.n	80074ae <UART_SetConfig+0x342>
 8007496:	2300      	movs	r3, #0
 8007498:	77fb      	strb	r3, [r7, #31]
 800749a:	e00e      	b.n	80074ba <UART_SetConfig+0x34e>
 800749c:	2302      	movs	r3, #2
 800749e:	77fb      	strb	r3, [r7, #31]
 80074a0:	e00b      	b.n	80074ba <UART_SetConfig+0x34e>
 80074a2:	2304      	movs	r3, #4
 80074a4:	77fb      	strb	r3, [r7, #31]
 80074a6:	e008      	b.n	80074ba <UART_SetConfig+0x34e>
 80074a8:	2308      	movs	r3, #8
 80074aa:	77fb      	strb	r3, [r7, #31]
 80074ac:	e005      	b.n	80074ba <UART_SetConfig+0x34e>
 80074ae:	2310      	movs	r3, #16
 80074b0:	77fb      	strb	r3, [r7, #31]
 80074b2:	bf00      	nop
 80074b4:	e001      	b.n	80074ba <UART_SetConfig+0x34e>
 80074b6:	2310      	movs	r3, #16
 80074b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074c2:	d17f      	bne.n	80075c4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80074c4:	7ffb      	ldrb	r3, [r7, #31]
 80074c6:	2b08      	cmp	r3, #8
 80074c8:	d85c      	bhi.n	8007584 <UART_SetConfig+0x418>
 80074ca:	a201      	add	r2, pc, #4	; (adr r2, 80074d0 <UART_SetConfig+0x364>)
 80074cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d0:	080074f5 	.word	0x080074f5
 80074d4:	08007515 	.word	0x08007515
 80074d8:	08007535 	.word	0x08007535
 80074dc:	08007585 	.word	0x08007585
 80074e0:	0800754d 	.word	0x0800754d
 80074e4:	08007585 	.word	0x08007585
 80074e8:	08007585 	.word	0x08007585
 80074ec:	08007585 	.word	0x08007585
 80074f0:	0800756d 	.word	0x0800756d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074f4:	f7fd fe3a 	bl	800516c <HAL_RCC_GetPCLK1Freq>
 80074f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	005a      	lsls	r2, r3, #1
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	085b      	lsrs	r3, r3, #1
 8007504:	441a      	add	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	fbb2 f3f3 	udiv	r3, r2, r3
 800750e:	b29b      	uxth	r3, r3
 8007510:	61bb      	str	r3, [r7, #24]
        break;
 8007512:	e03a      	b.n	800758a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007514:	f7fd fe3e 	bl	8005194 <HAL_RCC_GetPCLK2Freq>
 8007518:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	005a      	lsls	r2, r3, #1
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	085b      	lsrs	r3, r3, #1
 8007524:	441a      	add	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	fbb2 f3f3 	udiv	r3, r2, r3
 800752e:	b29b      	uxth	r3, r3
 8007530:	61bb      	str	r3, [r7, #24]
        break;
 8007532:	e02a      	b.n	800758a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	085a      	lsrs	r2, r3, #1
 800753a:	4b5f      	ldr	r3, [pc, #380]	; (80076b8 <UART_SetConfig+0x54c>)
 800753c:	4413      	add	r3, r2
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	6852      	ldr	r2, [r2, #4]
 8007542:	fbb3 f3f2 	udiv	r3, r3, r2
 8007546:	b29b      	uxth	r3, r3
 8007548:	61bb      	str	r3, [r7, #24]
        break;
 800754a:	e01e      	b.n	800758a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800754c:	f7fd fd50 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 8007550:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	005a      	lsls	r2, r3, #1
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	085b      	lsrs	r3, r3, #1
 800755c:	441a      	add	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	fbb2 f3f3 	udiv	r3, r2, r3
 8007566:	b29b      	uxth	r3, r3
 8007568:	61bb      	str	r3, [r7, #24]
        break;
 800756a:	e00e      	b.n	800758a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	085b      	lsrs	r3, r3, #1
 8007572:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	fbb2 f3f3 	udiv	r3, r2, r3
 800757e:	b29b      	uxth	r3, r3
 8007580:	61bb      	str	r3, [r7, #24]
        break;
 8007582:	e002      	b.n	800758a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	75fb      	strb	r3, [r7, #23]
        break;
 8007588:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	2b0f      	cmp	r3, #15
 800758e:	d916      	bls.n	80075be <UART_SetConfig+0x452>
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007596:	d212      	bcs.n	80075be <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	b29b      	uxth	r3, r3
 800759c:	f023 030f 	bic.w	r3, r3, #15
 80075a0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	085b      	lsrs	r3, r3, #1
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	897b      	ldrh	r3, [r7, #10]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	897a      	ldrh	r2, [r7, #10]
 80075ba:	60da      	str	r2, [r3, #12]
 80075bc:	e070      	b.n	80076a0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	75fb      	strb	r3, [r7, #23]
 80075c2:	e06d      	b.n	80076a0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80075c4:	7ffb      	ldrb	r3, [r7, #31]
 80075c6:	2b08      	cmp	r3, #8
 80075c8:	d859      	bhi.n	800767e <UART_SetConfig+0x512>
 80075ca:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <UART_SetConfig+0x464>)
 80075cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d0:	080075f5 	.word	0x080075f5
 80075d4:	08007613 	.word	0x08007613
 80075d8:	08007631 	.word	0x08007631
 80075dc:	0800767f 	.word	0x0800767f
 80075e0:	08007649 	.word	0x08007649
 80075e4:	0800767f 	.word	0x0800767f
 80075e8:	0800767f 	.word	0x0800767f
 80075ec:	0800767f 	.word	0x0800767f
 80075f0:	08007667 	.word	0x08007667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075f4:	f7fd fdba 	bl	800516c <HAL_RCC_GetPCLK1Freq>
 80075f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	085a      	lsrs	r2, r3, #1
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	441a      	add	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	fbb2 f3f3 	udiv	r3, r2, r3
 800760c:	b29b      	uxth	r3, r3
 800760e:	61bb      	str	r3, [r7, #24]
        break;
 8007610:	e038      	b.n	8007684 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007612:	f7fd fdbf 	bl	8005194 <HAL_RCC_GetPCLK2Freq>
 8007616:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	085a      	lsrs	r2, r3, #1
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	441a      	add	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	fbb2 f3f3 	udiv	r3, r2, r3
 800762a:	b29b      	uxth	r3, r3
 800762c:	61bb      	str	r3, [r7, #24]
        break;
 800762e:	e029      	b.n	8007684 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	085a      	lsrs	r2, r3, #1
 8007636:	4b21      	ldr	r3, [pc, #132]	; (80076bc <UART_SetConfig+0x550>)
 8007638:	4413      	add	r3, r2
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	6852      	ldr	r2, [r2, #4]
 800763e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007642:	b29b      	uxth	r3, r3
 8007644:	61bb      	str	r3, [r7, #24]
        break;
 8007646:	e01d      	b.n	8007684 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007648:	f7fd fcd2 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 800764c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	085a      	lsrs	r2, r3, #1
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	441a      	add	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007660:	b29b      	uxth	r3, r3
 8007662:	61bb      	str	r3, [r7, #24]
        break;
 8007664:	e00e      	b.n	8007684 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	085b      	lsrs	r3, r3, #1
 800766c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	fbb2 f3f3 	udiv	r3, r2, r3
 8007678:	b29b      	uxth	r3, r3
 800767a:	61bb      	str	r3, [r7, #24]
        break;
 800767c:	e002      	b.n	8007684 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	75fb      	strb	r3, [r7, #23]
        break;
 8007682:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	2b0f      	cmp	r3, #15
 8007688:	d908      	bls.n	800769c <UART_SetConfig+0x530>
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007690:	d204      	bcs.n	800769c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69ba      	ldr	r2, [r7, #24]
 8007698:	60da      	str	r2, [r3, #12]
 800769a:	e001      	b.n	80076a0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3720      	adds	r7, #32
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	01e84800 	.word	0x01e84800
 80076bc:	00f42400 	.word	0x00f42400

080076c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00a      	beq.n	80076ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	430a      	orrs	r2, r1
 800770a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00a      	beq.n	800772e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	f003 0310 	and.w	r3, r3, #16
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00a      	beq.n	8007772 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007776:	f003 0320 	and.w	r3, r3, #32
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779c:	2b00      	cmp	r3, #0
 800779e:	d01a      	beq.n	80077d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077be:	d10a      	bne.n	80077d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00a      	beq.n	80077f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	605a      	str	r2, [r3, #4]
  }
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af02      	add	r7, sp, #8
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007812:	f7fb fe97 	bl	8003544 <HAL_GetTick>
 8007816:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0308 	and.w	r3, r3, #8
 8007822:	2b08      	cmp	r3, #8
 8007824:	d10e      	bne.n	8007844 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007826:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f814 	bl	8007862 <UART_WaitOnFlagUntilTimeout>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e00a      	b.n	800785a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2220      	movs	r2, #32
 8007848:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2220      	movs	r2, #32
 800784e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	60f8      	str	r0, [r7, #12]
 800786a:	60b9      	str	r1, [r7, #8]
 800786c:	603b      	str	r3, [r7, #0]
 800786e:	4613      	mov	r3, r2
 8007870:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007872:	e05d      	b.n	8007930 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787a:	d059      	beq.n	8007930 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800787c:	f7fb fe62 	bl	8003544 <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	429a      	cmp	r2, r3
 800788a:	d302      	bcc.n	8007892 <UART_WaitOnFlagUntilTimeout+0x30>
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d11b      	bne.n	80078ca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80078a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 0201 	bic.w	r2, r2, #1
 80078b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2220      	movs	r2, #32
 80078b6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2220      	movs	r2, #32
 80078bc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e042      	b.n	8007950 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d02b      	beq.n	8007930 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078e6:	d123      	bne.n	8007930 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078f0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007900:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 0201 	bic.w	r2, r2, #1
 8007910:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2220      	movs	r2, #32
 8007916:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2220      	movs	r2, #32
 800791c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2220      	movs	r2, #32
 8007922:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e00f      	b.n	8007950 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	69da      	ldr	r2, [r3, #28]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	4013      	ands	r3, r2
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	429a      	cmp	r2, r3
 800793e:	bf0c      	ite	eq
 8007940:	2301      	moveq	r3, #1
 8007942:	2300      	movne	r3, #0
 8007944:	b2db      	uxtb	r3, r3
 8007946:	461a      	mov	r2, r3
 8007948:	79fb      	ldrb	r3, [r7, #7]
 800794a:	429a      	cmp	r2, r3
 800794c:	d092      	beq.n	8007874 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800796e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689a      	ldr	r2, [r3, #8]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0201 	bic.w	r2, r2, #1
 800797e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2220      	movs	r2, #32
 8007984:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f7ff fbce 	bl	8007158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079bc:	bf00      	nop
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079da:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2220      	movs	r2, #32
 80079e0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff fbab 	bl	8007144 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079ee:	bf00      	nop
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <__libc_init_array>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	4e0d      	ldr	r6, [pc, #52]	; (8007a30 <__libc_init_array+0x38>)
 80079fc:	4c0d      	ldr	r4, [pc, #52]	; (8007a34 <__libc_init_array+0x3c>)
 80079fe:	1ba4      	subs	r4, r4, r6
 8007a00:	10a4      	asrs	r4, r4, #2
 8007a02:	2500      	movs	r5, #0
 8007a04:	42a5      	cmp	r5, r4
 8007a06:	d109      	bne.n	8007a1c <__libc_init_array+0x24>
 8007a08:	4e0b      	ldr	r6, [pc, #44]	; (8007a38 <__libc_init_array+0x40>)
 8007a0a:	4c0c      	ldr	r4, [pc, #48]	; (8007a3c <__libc_init_array+0x44>)
 8007a0c:	f000 f820 	bl	8007a50 <_init>
 8007a10:	1ba4      	subs	r4, r4, r6
 8007a12:	10a4      	asrs	r4, r4, #2
 8007a14:	2500      	movs	r5, #0
 8007a16:	42a5      	cmp	r5, r4
 8007a18:	d105      	bne.n	8007a26 <__libc_init_array+0x2e>
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}
 8007a1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a20:	4798      	blx	r3
 8007a22:	3501      	adds	r5, #1
 8007a24:	e7ee      	b.n	8007a04 <__libc_init_array+0xc>
 8007a26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a2a:	4798      	blx	r3
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	e7f2      	b.n	8007a16 <__libc_init_array+0x1e>
 8007a30:	08007a90 	.word	0x08007a90
 8007a34:	08007a90 	.word	0x08007a90
 8007a38:	08007a90 	.word	0x08007a90
 8007a3c:	08007a94 	.word	0x08007a94

08007a40 <memset>:
 8007a40:	4402      	add	r2, r0
 8007a42:	4603      	mov	r3, r0
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d100      	bne.n	8007a4a <memset+0xa>
 8007a48:	4770      	bx	lr
 8007a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a4e:	e7f9      	b.n	8007a44 <memset+0x4>

08007a50 <_init>:
 8007a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a52:	bf00      	nop
 8007a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a56:	bc08      	pop	{r3}
 8007a58:	469e      	mov	lr, r3
 8007a5a:	4770      	bx	lr

08007a5c <_fini>:
 8007a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5e:	bf00      	nop
 8007a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a62:	bc08      	pop	{r3}
 8007a64:	469e      	mov	lr, r3
 8007a66:	4770      	bx	lr
