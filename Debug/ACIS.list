
ACIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001169c  080001e0  080001e0  000101e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0801187c  0801187c  0002187c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801195c  0801195c  000318c8  2**0
                  CONTENTS
  4 .ARM          00000008  0801195c  0801195c  0002195c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011964  08011964  000318c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011964  08011964  00021964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011968  08011968  00021968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000018c8  20010000  0801196c  00030000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013b14  200118e0  08013234  000318e0  2**5
                  ALLOC
 10 ._user_heap_stack 00000c04  200253f4  08013234  000353f4  2**0
                  ALLOC
 11 .itcmram      00000000  20000000  20000000  000318c8  2**0
                  CONTENTS
 12 .ARM.attributes 00000030  00000000  00000000  000318c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e2be  00000000  00000000  000318f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003e51  00000000  00000000  0004fbb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000016d8  00000000  00000000  00053a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001520  00000000  00000000  000550e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002648d  00000000  00000000  00056600  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001583a  00000000  00000000  0007ca8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000e53e7  00000000  00000000  000922c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001776ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f18  00000000  00000000  0017772c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200118e0 	.word	0x200118e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011864 	.word	0x08011864

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200118e4 	.word	0x200118e4
 800021c:	08011864 	.word	0x08011864

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <PK_Copy>:
PACKET_C(PK_PcConnected);
PACKET_C(PK_FuelSwitch);


int16_t PK_Copy(void * dest, void * source)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  if(dest == 0 || source == 0) return -1;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d002      	beq.n	8000d72 <PK_Copy+0x16>
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d102      	bne.n	8000d78 <PK_Copy+0x1c>
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e037      	b.n	8000de8 <PK_Copy+0x8c>
  uint8_t * dest_data = (uint8_t*)dest;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	617b      	str	r3, [r7, #20]
  uint8_t * source_data = (uint8_t*)source;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	613b      	str	r3, [r7, #16]
  int16_t length = dest_data[1];
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3301      	adds	r3, #1
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	81bb      	strh	r3, [r7, #12]
  if(dest_data[1] != source_data[1] || dest_data[0] != source_data[0] || length == 0 || length > 384) return -2;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	781a      	ldrb	r2, [r3, #0]
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	3301      	adds	r3, #1
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d10e      	bne.n	8000db6 <PK_Copy+0x5a>
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	781a      	ldrb	r2, [r3, #0]
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d108      	bne.n	8000db6 <PK_Copy+0x5a>
 8000da4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d004      	beq.n	8000db6 <PK_Copy+0x5a>
 8000dac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000db0:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000db4:	dd02      	ble.n	8000dbc <PK_Copy+0x60>
 8000db6:	f06f 0301 	mvn.w	r3, #1
 8000dba:	e015      	b.n	8000de8 <PK_Copy+0x8c>
  for(uint8_t i=2;i<length+2;i++)
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e00a      	b.n	8000dd8 <PK_Copy+0x7c>
    *dest_data++ = *source_data++;
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	1c53      	adds	r3, r2, #1
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	1c59      	adds	r1, r3, #1
 8000dcc:	6179      	str	r1, [r7, #20]
 8000dce:	7812      	ldrb	r2, [r2, #0]
 8000dd0:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=2;i<length+2;i++)
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
 8000dd8:	7bfa      	ldrb	r2, [r7, #15]
 8000dda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dde:	3302      	adds	r3, #2
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbee      	blt.n	8000dc2 <PK_Copy+0x66>
  return length;
 8000de4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	371c      	adds	r7, #28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <acis_init>:
extern TIM_HandleTypeDef htim4;

static int8_t acis_send_command(eTransChannels xChaDst, void * msgBuf, uint32_t length);

void acis_init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_BUSY;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	71fb      	strb	r3, [r7, #7]
  protInit(&fifoSendingQueue, buffSendingQueue, 1, SENDING_QUEUE_SIZE);
 8000dfe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e02:	2201      	movs	r2, #1
 8000e04:	490a      	ldr	r1, [pc, #40]	; (8000e30 <acis_init+0x3c>)
 8000e06:	480b      	ldr	r0, [pc, #44]	; (8000e34 <acis_init+0x40>)
 8000e08:	f00a f90c 	bl	800b024 <protInit>
  //do
  //{
  //  status = config_load(&acis_config);
  //} while(status == HAL_BUSY);

  StatusInit = status;
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <acis_init+0x44>)
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	7013      	strb	r3, [r2, #0]

  //if(status != HAL_OK)
  //{
    config_default(&acis_config);
 8000e12:	480a      	ldr	r0, [pc, #40]	; (8000e3c <acis_init+0x48>)
 8000e14:	f005 fc4c 	bl	80066b0 <config_default>
  //  {
  //    status = config_save(&acis_config);
  //  } while(status == HAL_BUSY);
  //}

  HAL_TIM_Base_Start_IT(&htim4);
 8000e18:	4809      	ldr	r0, [pc, #36]	; (8000e40 <acis_init+0x4c>)
 8000e1a:	f00e fc6d 	bl	800f6f8 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(VDD3V3EN_GPIO_Port, VDD3V3EN_Pin, GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2101      	movs	r1, #1
 8000e22:	4808      	ldr	r0, [pc, #32]	; (8000e44 <acis_init+0x50>)
 8000e24:	f00b ff2e 	bl	800cc84 <HAL_GPIO_WritePin>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20020aec 	.word	0x20020aec
 8000e34:	200210ec 	.word	0x200210ec
 8000e38:	200104a6 	.word	0x200104a6
 8000e3c:	20021480 	.word	0x20021480
 8000e40:	200247e4 	.word	0x200247e4
 8000e44:	40020800 	.word	0x40020800

08000e48 <gettempbyres>:

static inline float gettempbyres(float resistance)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0b6      	sub	sp, #216	; 0xd8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	ed87 0a01 	vstr	s0, [r7, #4]
  const float resistances[22] = {100700,52700,28680,21450,16180,12300,9420,7280,5670,4450,3520,2796,2238,1802,1459,1188,973,667,467,332,241,177};
 8000e52:	4a8c      	ldr	r2, [pc, #560]	; (8001084 <gettempbyres+0x23c>)
 8000e54:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e58:	4611      	mov	r1, r2
 8000e5a:	2258      	movs	r2, #88	; 0x58
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f010 fce5 	bl	801182c <memcpy>
  const float temperatures[22] = {-40,-30,-20,-15,-10,-4,0,5,10,15,20,25,30,35,40,45,50,60,70,80,90,100};
 8000e62:	4a89      	ldr	r2, [pc, #548]	; (8001088 <gettempbyres+0x240>)
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	4611      	mov	r1, r2
 8000e6a:	2258      	movs	r2, #88	; 0x58
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f010 fcdd 	bl	801182c <memcpy>
  float result = 0.0f;
 8000e72:	f04f 0300 	mov.w	r3, #0
 8000e76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint8_t index1, index2;
  float temp1 = 0.0f, temp2 = 0.0f, mult, tempt1, tempt2;
 8000e7a:	f04f 0300 	mov.w	r3, #0
 8000e7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

  if(resistance >= resistances[0])
 8000e8a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000e8e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9a:	db1a      	blt.n	8000ed2 <gettempbyres+0x8a>
  {
    index1 = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
    index2 = 1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    temp1 = resistances[index1];
 8000ea8:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3b78      	subs	r3, #120	; 0x78
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    temp2 = resistances[index2];
 8000ebc:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000ec6:	4413      	add	r3, r2
 8000ec8:	3b78      	subs	r3, #120	; 0x78
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000ed0:	e06a      	b.n	8000fa8 <gettempbyres+0x160>
  }
  else if(resistance <= resistances[(sizeof(resistances) / sizeof(float)) - 1])
 8000ed2:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8000ed6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee2:	d81a      	bhi.n	8000f1a <gettempbyres+0xd2>
  {
    index1 = 4;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
    index2 = 5;
 8000eea:	2305      	movs	r3, #5
 8000eec:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    temp1 = resistances[index1];
 8000ef0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000efa:	4413      	add	r3, r2
 8000efc:	3b78      	subs	r3, #120	; 0x78
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    temp2 = resistances[index2];
 8000f04:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000f0e:	4413      	add	r3, r2
 8000f10:	3b78      	subs	r3, #120	; 0x78
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000f18:	e046      	b.n	8000fa8 <gettempbyres+0x160>
  }
  else
  {
    for(int i = 1; i < (sizeof(resistances) / sizeof(float)); i++)
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000f20:	e03e      	b.n	8000fa0 <gettempbyres+0x158>
    {
      temp1 = resistances[i-1];
 8000f22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000f26:	3b01      	subs	r3, #1
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000f2e:	4413      	add	r3, r2
 8000f30:	3b78      	subs	r3, #120	; 0x78
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      temp2 = resistances[i];
 8000f38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000f42:	4413      	add	r3, r2
 8000f44:	3b78      	subs	r3, #120	; 0x78
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      if(temp1 > resistance && temp2 < resistance)
 8000f4c:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8000f50:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5c:	dd13      	ble.n	8000f86 <gettempbyres+0x13e>
 8000f5e:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8000f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6e:	d50a      	bpl.n	8000f86 <gettempbyres+0x13e>
      {
        index1 = i-1;
 8000f70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        index2 = i;
 8000f7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000f80:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
        break;
 8000f84:	e010      	b.n	8000fa8 <gettempbyres+0x160>
      }
      temp1 = 0.0f;
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      temp2 = 0.0f;
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    for(int i = 1; i < (sizeof(resistances) / sizeof(float)); i++)
 8000f96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000fa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000fa4:	2b15      	cmp	r3, #21
 8000fa6:	d9bc      	bls.n	8000f22 <gettempbyres+0xda>
    }
  }

  if(temp1 != 0.0f || temp2 != 0.0f)
 8000fa8:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8000fac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb4:	d106      	bne.n	8000fc4 <gettempbyres+0x17c>
 8000fb6:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8000fba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc2:	d049      	beq.n	8001058 <gettempbyres+0x210>
  {
    tempt1 = temperatures[index1];
 8000fc4:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000fce:	4413      	add	r3, r2
 8000fd0:	3bd0      	subs	r3, #208	; 0xd0
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    tempt2 = temperatures[index2];
 8000fd8:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000fe2:	4413      	add	r3, r2
 8000fe4:	3bd0      	subs	r3, #208	; 0xd0
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if(temp2 != temp1)
 8000fec:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8000ff0:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8000ff4:	eeb4 7a67 	vcmp.f32	s14, s15
 8000ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffc:	d020      	beq.n	8001040 <gettempbyres+0x1f8>
    {
      mult = (resistance - temp1) / (temp2 - temp1);
 8000ffe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001002:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001006:	ee77 6a67 	vsub.f32	s13, s14, s15
 800100a:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800100e:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001012:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800101a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
      result = (tempt2 - tempt1) * mult + tempt1;
 800101e:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8001022:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001026:	ee37 7a67 	vsub.f32	s14, s14, s15
 800102a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800102e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001032:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8001036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800103a:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
 800103e:	e00b      	b.n	8001058 <gettempbyres+0x210>
    }
    else result = (tempt1 + tempt2) / 2.0f;
 8001040:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8001044:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001048:	ee37 7a27 	vadd.f32	s14, s14, s15
 800104c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001050:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001054:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
  }
  if(result > 150.0f) result = 150.0f;
 8001058:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800105c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800108c <gettempbyres+0x244>
 8001060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	dd02      	ble.n	8001070 <gettempbyres+0x228>
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <gettempbyres+0x248>)
 800106c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return result;
 8001070:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001074:	ee07 3a90 	vmov	s15, r3
}
 8001078:	eeb0 0a67 	vmov.f32	s0, s15
 800107c:	37d8      	adds	r7, #216	; 0xd8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	0801187c 	.word	0x0801187c
 8001088:	080118d4 	.word	0x080118d4
 800108c:	43160000 	.word	0x43160000
 8001090:	43160000 	.word	0x43160000

08001094 <acis_deinitIfNeed>:

void acis_deinitIfNeed(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  if(HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_SET)
 8001098:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800109c:	4809      	ldr	r0, [pc, #36]	; (80010c4 <acis_deinitIfNeed+0x30>)
 800109e:	f00b fdd9 	bl	800cc54 <HAL_GPIO_ReadPin>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d105      	bne.n	80010b4 <acis_deinitIfNeed+0x20>
    HAL_GPIO_WritePin(VDD3V3EN_GPIO_Port, VDD3V3EN_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2101      	movs	r1, #1
 80010ac:	4806      	ldr	r0, [pc, #24]	; (80010c8 <acis_deinitIfNeed+0x34>)
 80010ae:	f00b fde9 	bl	800cc84 <HAL_GPIO_WritePin>
  else HAL_GPIO_WritePin(VDD3V3EN_GPIO_Port, VDD3V3EN_Pin, GPIO_PIN_SET);
}
 80010b2:	e004      	b.n	80010be <acis_deinitIfNeed+0x2a>
  else HAL_GPIO_WritePin(VDD3V3EN_GPIO_Port, VDD3V3EN_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2101      	movs	r1, #1
 80010b8:	4803      	ldr	r0, [pc, #12]	; (80010c8 <acis_deinitIfNeed+0x34>)
 80010ba:	f00b fde3 	bl	800cc84 <HAL_GPIO_WritePin>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020800 	.word	0x40020800

080010cc <acis_adc_irq>:

void acis_adc_irq(uint16_t * data, uint32_t size)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  adc_buf_ptr = data;
 80010d6:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <acis_adc_irq+0x28>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6013      	str	r3, [r2, #0]
  adc_buf_size = size;
 80010dc:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <acis_adc_irq+0x2c>)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	6013      	str	r3, [r2, #0]
  adc_buf_ready = 1;
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <acis_adc_irq+0x30>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	20020960 	.word	0x20020960
 80010f8:	20020964 	.word	0x20020964
 80010fc:	20020968 	.word	0x20020968

08001100 <acis_ignite_14>:

static inline void acis_ignite_14(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  ign14_prev = ign14_time;
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <acis_ignite_14+0x30>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <acis_ignite_14+0x34>)
 800110a:	6013      	str	r3, [r2, #0]
  ign14_time = Delay_Tick;
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <acis_ignite_14+0x38>)
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	4a07      	ldr	r2, [pc, #28]	; (8001130 <acis_ignite_14+0x30>)
 8001112:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 8001114:	2201      	movs	r2, #1
 8001116:	2180      	movs	r1, #128	; 0x80
 8001118:	4808      	ldr	r0, [pc, #32]	; (800113c <acis_ignite_14+0x3c>)
 800111a:	f00b fdb3 	bl	800cc84 <HAL_GPIO_WritePin>
  ign_ftime = 0;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <acis_ignite_14+0x40>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
  saturated_14 = 0;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <acis_ignite_14+0x44>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20011904 	.word	0x20011904
 8001134:	2001190c 	.word	0x2001190c
 8001138:	40000c00 	.word	0x40000c00
 800113c:	40020400 	.word	0x40020400
 8001140:	200104a5 	.word	0x200104a5
 8001144:	2002095a 	.word	0x2002095a

08001148 <acis_ignite_23>:

static inline void acis_ignite_23(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  ign23_prev = ign23_time;
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <acis_ignite_23+0x30>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <acis_ignite_23+0x34>)
 8001152:	6013      	str	r3, [r2, #0]
  ign23_time = Delay_Tick;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <acis_ignite_23+0x38>)
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <acis_ignite_23+0x30>)
 800115a:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2140      	movs	r1, #64	; 0x40
 8001160:	4808      	ldr	r0, [pc, #32]	; (8001184 <acis_ignite_23+0x3c>)
 8001162:	f00b fd8f 	bl	800cc84 <HAL_GPIO_WritePin>
  ign_ftime = 0;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <acis_ignite_23+0x40>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
  saturated_23 = 0;
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <acis_ignite_23+0x44>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20011908 	.word	0x20011908
 800117c:	20011910 	.word	0x20011910
 8001180:	40000c00 	.word	0x40000c00
 8001184:	40020400 	.word	0x40020400
 8001188:	200104a5 	.word	0x200104a5
 800118c:	2002095b 	.word	0x2002095b

08001190 <acis_saturate_14>:

static inline void acis_saturate_14(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
  ign14_sat = Delay_Tick;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <acis_saturate_14+0x4c>)
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <acis_saturate_14+0x50>)
 800119c:	6013      	str	r3, [r2, #0]
  uint8_t isIgn = HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_RESET;
 800119e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011a2:	4810      	ldr	r0, [pc, #64]	; (80011e4 <acis_saturate_14+0x54>)
 80011a4:	f00b fd56 	bl	800cc54 <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	bf0c      	ite	eq
 80011ae:	2301      	moveq	r3, #1
 80011b0:	2300      	movne	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	71fb      	strb	r3, [r7, #7]
  if(isIgn)
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <acis_saturate_14+0x36>
    HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	2180      	movs	r1, #128	; 0x80
 80011c0:	4809      	ldr	r0, [pc, #36]	; (80011e8 <acis_saturate_14+0x58>)
 80011c2:	f00b fd5f 	bl	800cc84 <HAL_GPIO_WritePin>
  ign_ftime = 0;
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <acis_saturate_14+0x5c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
  saturated_14 = 1;
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <acis_saturate_14+0x60>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40000c00 	.word	0x40000c00
 80011e0:	200118fc 	.word	0x200118fc
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40020400 	.word	0x40020400
 80011ec:	200104a5 	.word	0x200104a5
 80011f0:	2002095a 	.word	0x2002095a

080011f4 <acis_saturate_23>:

static inline void acis_saturate_23(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  ign23_sat = Delay_Tick;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <acis_saturate_23+0x4c>)
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	4a11      	ldr	r2, [pc, #68]	; (8001244 <acis_saturate_23+0x50>)
 8001200:	6013      	str	r3, [r2, #0]
  uint8_t isIgn = HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_RESET;
 8001202:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <acis_saturate_23+0x54>)
 8001208:	f00b fd24 	bl	800cc54 <HAL_GPIO_ReadPin>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	bf0c      	ite	eq
 8001212:	2301      	moveq	r3, #1
 8001214:	2300      	movne	r3, #0
 8001216:	b2db      	uxtb	r3, r3
 8001218:	71fb      	strb	r3, [r7, #7]
  if(isIgn)
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <acis_saturate_23+0x36>
    HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	2140      	movs	r1, #64	; 0x40
 8001224:	4809      	ldr	r0, [pc, #36]	; (800124c <acis_saturate_23+0x58>)
 8001226:	f00b fd2d 	bl	800cc84 <HAL_GPIO_WritePin>
  ign_ftime = 0;
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <acis_saturate_23+0x5c>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
  saturated_23 = 1;
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <acis_saturate_23+0x60>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40000c00 	.word	0x40000c00
 8001244:	20011900 	.word	0x20011900
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400
 8001250:	200104a5 	.word	0x200104a5
 8001254:	2002095b 	.word	0x2002095b

08001258 <acis_ignite>:

static inline void acis_ignite(uint8_t index)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  if(index == 0)
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <acis_ignite+0x16>
    acis_ignite_14();
 8001268:	f7ff ff4a 	bl	8001100 <acis_ignite_14>
  else if(index == 1)
    acis_ignite_23();
}
 800126c:	e004      	b.n	8001278 <acis_ignite+0x20>
  else if(index == 1)
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <acis_ignite+0x20>
    acis_ignite_23();
 8001274:	f7ff ff68 	bl	8001148 <acis_ignite_23>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <acis_saturate>:

static inline void acis_saturate(uint8_t index)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if(index == 0)
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <acis_saturate+0x16>
    acis_saturate_14();
 8001290:	f7ff ff7e 	bl	8001190 <acis_saturate_14>
  else if(index == 1)
    acis_saturate_23();
}
 8001294:	e004      	b.n	80012a0 <acis_saturate+0x20>
  else if(index == 1)
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <acis_saturate+0x20>
    acis_saturate_23();
 800129c:	f7ff ffaa 	bl	80011f4 <acis_saturate_23>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <acis_ignition_loop>:

static inline void acis_ignition_loop(void)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b08b      	sub	sp, #44	; 0x2c
 80012ac:	af00      	add	r7, sp, #0
  float rpm = csps_getrpm();
 80012ae:	f006 fc7b 	bl	8007ba8 <csps_getrpm>
 80012b2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  uint8_t rotates = csps_isrotates() || hall_rotates;
 80012b6:	f006 fcaf 	bl	8007c18 <csps_isrotates>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d104      	bne.n	80012ca <acis_ignition_loop+0x22>
 80012c0:	4bae      	ldr	r3, [pc, #696]	; (800157c <acis_ignition_loop+0x2d4>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <acis_ignition_loop+0x26>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <acis_ignition_loop+0x28>
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t isIgn = HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_RESET;
 80012d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d8:	48a9      	ldr	r0, [pc, #676]	; (8001580 <acis_ignition_loop+0x2d8>)
 80012da:	f00b fcbb 	bl	800cc54 <HAL_GPIO_ReadPin>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	bf0c      	ite	eq
 80012e4:	2301      	moveq	r3, #1
 80012e6:	2300      	movne	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  if(isIgn && !ign_ftime && rotates)
 80012ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 812b 	beq.w	800154e <acis_ignition_loop+0x2a6>
 80012f8:	4ba2      	ldr	r3, [pc, #648]	; (8001584 <acis_ignition_loop+0x2dc>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f040 8126 	bne.w	800154e <acis_ignition_loop+0x2a6>
 8001302:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8121 	beq.w	800154e <acis_ignition_loop+0x2a6>
  {
    uint8_t t_saturated_14 = saturated_14;
 800130c:	4b9e      	ldr	r3, [pc, #632]	; (8001588 <acis_ignition_loop+0x2e0>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    uint32_t t_ign14_sat = ign14_sat;
 8001314:	4b9d      	ldr	r3, [pc, #628]	; (800158c <acis_ignition_loop+0x2e4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	61fb      	str	r3, [r7, #28]
    uint32_t t_ign14_time = ign14_time;
 800131a:	4b9d      	ldr	r3, [pc, #628]	; (8001590 <acis_ignition_loop+0x2e8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	61bb      	str	r3, [r7, #24]
    uint32_t t_ign14_prev = ign14_prev;
 8001320:	4b9c      	ldr	r3, [pc, #624]	; (8001594 <acis_ignition_loop+0x2ec>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	617b      	str	r3, [r7, #20]
    uint32_t now = Delay_Tick;
 8001326:	4b9c      	ldr	r3, [pc, #624]	; (8001598 <acis_ignition_loop+0x2f0>)
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132a:	613b      	str	r3, [r7, #16]
    if(DelayDiff(now, t_ign14_time) >= IGN_OVER_TIME && DelayDiff(now, t_ign14_sat) >= IGN_OVER_TIME)
 800132c:	69b9      	ldr	r1, [r7, #24]
 800132e:	6938      	ldr	r0, [r7, #16]
 8001330:	f006 fd58 	bl	8007de4 <DelayDiff>
 8001334:	4602      	mov	r2, r0
 8001336:	4b99      	ldr	r3, [pc, #612]	; (800159c <acis_ignition_loop+0x2f4>)
 8001338:	429a      	cmp	r2, r3
 800133a:	d910      	bls.n	800135e <acis_ignition_loop+0xb6>
 800133c:	69f9      	ldr	r1, [r7, #28]
 800133e:	6938      	ldr	r0, [r7, #16]
 8001340:	f006 fd50 	bl	8007de4 <DelayDiff>
 8001344:	4602      	mov	r2, r0
 8001346:	4b95      	ldr	r3, [pc, #596]	; (800159c <acis_ignition_loop+0x2f4>)
 8001348:	429a      	cmp	r2, r3
 800134a:	d908      	bls.n	800135e <acis_ignition_loop+0xb6>
    {
      HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	2180      	movs	r1, #128	; 0x80
 8001350:	4893      	ldr	r0, [pc, #588]	; (80015a0 <acis_ignition_loop+0x2f8>)
 8001352:	f00b fc97 	bl	800cc84 <HAL_GPIO_WritePin>
      saturated_14 = 0;
 8001356:	4b8c      	ldr	r3, [pc, #560]	; (8001588 <acis_ignition_loop+0x2e0>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	e062      	b.n	8001424 <acis_ignition_loop+0x17c>
    }
    else if(!t_saturated_14 && acis_config.params.isIgnitionByHall)
 800135e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001362:	2b00      	cmp	r3, #0
 8001364:	d15e      	bne.n	8001424 <acis_ignition_loop+0x17c>
 8001366:	4b8f      	ldr	r3, [pc, #572]	; (80015a4 <acis_ignition_loop+0x2fc>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d05a      	beq.n	8001424 <acis_ignition_loop+0x17c>
    {
      if(rpm < 300.0f)
 800136e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001372:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80015a8 <acis_ignition_loop+0x300>
 8001376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800137a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137e:	d519      	bpl.n	80013b4 <acis_ignition_loop+0x10c>
      {
        if(DelayDiff(now, t_ign14_time) >= DelayDiff(t_ign14_time, t_ign14_prev) * 96 / 128)
 8001380:	69b9      	ldr	r1, [r7, #24]
 8001382:	6938      	ldr	r0, [r7, #16]
 8001384:	f006 fd2e 	bl	8007de4 <DelayDiff>
 8001388:	4604      	mov	r4, r0
 800138a:	6979      	ldr	r1, [r7, #20]
 800138c:	69b8      	ldr	r0, [r7, #24]
 800138e:	f006 fd29 	bl	8007de4 <DelayDiff>
 8001392:	4602      	mov	r2, r0
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	09db      	lsrs	r3, r3, #7
 800139e:	429c      	cmp	r4, r3
 80013a0:	d340      	bcc.n	8001424 <acis_ignition_loop+0x17c>
        {
          HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	487e      	ldr	r0, [pc, #504]	; (80015a0 <acis_ignition_loop+0x2f8>)
 80013a8:	f00b fc6c 	bl	800cc84 <HAL_GPIO_WritePin>
          saturated_14 = 1;
 80013ac:	4b76      	ldr	r3, [pc, #472]	; (8001588 <acis_ignition_loop+0x2e0>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
 80013b2:	e037      	b.n	8001424 <acis_ignition_loop+0x17c>
        }
      }
      else if(DelayDiff(t_ign14_time, t_ign14_prev) > 15000)
 80013b4:	6979      	ldr	r1, [r7, #20]
 80013b6:	69b8      	ldr	r0, [r7, #24]
 80013b8:	f006 fd14 	bl	8007de4 <DelayDiff>
 80013bc:	4602      	mov	r2, r0
 80013be:	f643 2398 	movw	r3, #15000	; 0x3a98
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d918      	bls.n	80013f8 <acis_ignition_loop+0x150>
      {
        if((int32_t)DelayDiff(t_ign14_time, t_ign14_prev) - (int32_t)DelayDiff(now, t_ign14_time) < 11719)
 80013c6:	6979      	ldr	r1, [r7, #20]
 80013c8:	69b8      	ldr	r0, [r7, #24]
 80013ca:	f006 fd0b 	bl	8007de4 <DelayDiff>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461c      	mov	r4, r3
 80013d2:	69b9      	ldr	r1, [r7, #24]
 80013d4:	6938      	ldr	r0, [r7, #16]
 80013d6:	f006 fd05 	bl	8007de4 <DelayDiff>
 80013da:	4603      	mov	r3, r0
 80013dc:	1ae3      	subs	r3, r4, r3
 80013de:	f642 52c6 	movw	r2, #11718	; 0x2dc6
 80013e2:	4293      	cmp	r3, r2
 80013e4:	dc1e      	bgt.n	8001424 <acis_ignition_loop+0x17c>
        {
          HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	486d      	ldr	r0, [pc, #436]	; (80015a0 <acis_ignition_loop+0x2f8>)
 80013ec:	f00b fc4a 	bl	800cc84 <HAL_GPIO_WritePin>
          saturated_14 = 1;
 80013f0:	4b65      	ldr	r3, [pc, #404]	; (8001588 <acis_ignition_loop+0x2e0>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e015      	b.n	8001424 <acis_ignition_loop+0x17c>
        }
      }
      else if(DelayDiff(now, t_ign14_time) >= DelayDiff(t_ign14_time, t_ign14_prev) * 64 / 128)
 80013f8:	69b9      	ldr	r1, [r7, #24]
 80013fa:	6938      	ldr	r0, [r7, #16]
 80013fc:	f006 fcf2 	bl	8007de4 <DelayDiff>
 8001400:	4604      	mov	r4, r0
 8001402:	6979      	ldr	r1, [r7, #20]
 8001404:	69b8      	ldr	r0, [r7, #24]
 8001406:	f006 fced 	bl	8007de4 <DelayDiff>
 800140a:	4603      	mov	r3, r0
 800140c:	019b      	lsls	r3, r3, #6
 800140e:	09db      	lsrs	r3, r3, #7
 8001410:	429c      	cmp	r4, r3
 8001412:	d307      	bcc.n	8001424 <acis_ignition_loop+0x17c>
      {
        HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	4861      	ldr	r0, [pc, #388]	; (80015a0 <acis_ignition_loop+0x2f8>)
 800141a:	f00b fc33 	bl	800cc84 <HAL_GPIO_WritePin>
        saturated_14 = 1;
 800141e:	4b5a      	ldr	r3, [pc, #360]	; (8001588 <acis_ignition_loop+0x2e0>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
      }
    }

    uint8_t t_saturated_23 = saturated_23;
 8001424:	4b61      	ldr	r3, [pc, #388]	; (80015ac <acis_ignition_loop+0x304>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	73fb      	strb	r3, [r7, #15]
    uint32_t t_ign23_sat = ign23_sat;
 800142a:	4b61      	ldr	r3, [pc, #388]	; (80015b0 <acis_ignition_loop+0x308>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	60bb      	str	r3, [r7, #8]
    uint32_t t_ign23_time = ign23_time;
 8001430:	4b60      	ldr	r3, [pc, #384]	; (80015b4 <acis_ignition_loop+0x30c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	607b      	str	r3, [r7, #4]
    uint32_t t_ign23_prev = ign23_prev;
 8001436:	4b60      	ldr	r3, [pc, #384]	; (80015b8 <acis_ignition_loop+0x310>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	603b      	str	r3, [r7, #0]
    now = Delay_Tick;
 800143c:	4b56      	ldr	r3, [pc, #344]	; (8001598 <acis_ignition_loop+0x2f0>)
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	613b      	str	r3, [r7, #16]
    if(DelayDiff(now, t_ign23_time) >= IGN_OVER_TIME && DelayDiff(now, t_ign23_sat) >= IGN_OVER_TIME)
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	6938      	ldr	r0, [r7, #16]
 8001446:	f006 fccd 	bl	8007de4 <DelayDiff>
 800144a:	4602      	mov	r2, r0
 800144c:	4b53      	ldr	r3, [pc, #332]	; (800159c <acis_ignition_loop+0x2f4>)
 800144e:	429a      	cmp	r2, r3
 8001450:	d910      	bls.n	8001474 <acis_ignition_loop+0x1cc>
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	6938      	ldr	r0, [r7, #16]
 8001456:	f006 fcc5 	bl	8007de4 <DelayDiff>
 800145a:	4602      	mov	r2, r0
 800145c:	4b4f      	ldr	r3, [pc, #316]	; (800159c <acis_ignition_loop+0x2f4>)
 800145e:	429a      	cmp	r2, r3
 8001460:	d908      	bls.n	8001474 <acis_ignition_loop+0x1cc>
    {
      HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	2140      	movs	r1, #64	; 0x40
 8001466:	484e      	ldr	r0, [pc, #312]	; (80015a0 <acis_ignition_loop+0x2f8>)
 8001468:	f00b fc0c 	bl	800cc84 <HAL_GPIO_WritePin>
      saturated_23 = 0;
 800146c:	4b4f      	ldr	r3, [pc, #316]	; (80015ac <acis_ignition_loop+0x304>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
 8001472:	e06b      	b.n	800154c <acis_ignition_loop+0x2a4>
    }
    else if(!t_saturated_23 && acis_config.params.isIgnitionByHall)
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d17a      	bne.n	8001570 <acis_ignition_loop+0x2c8>
 800147a:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <acis_ignition_loop+0x2fc>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d076      	beq.n	8001570 <acis_ignition_loop+0x2c8>
    {
      if(rpm < 300.0f)
 8001482:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001486:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80015a8 <acis_ignition_loop+0x300>
 800148a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001492:	d519      	bpl.n	80014c8 <acis_ignition_loop+0x220>
      {
        if(DelayDiff(now, t_ign23_time) >= DelayDiff(t_ign23_time, t_ign23_prev) * 96 / 128)
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	6938      	ldr	r0, [r7, #16]
 8001498:	f006 fca4 	bl	8007de4 <DelayDiff>
 800149c:	4604      	mov	r4, r0
 800149e:	6839      	ldr	r1, [r7, #0]
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f006 fc9f 	bl	8007de4 <DelayDiff>
 80014a6:	4602      	mov	r2, r0
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	015b      	lsls	r3, r3, #5
 80014b0:	09db      	lsrs	r3, r3, #7
 80014b2:	429c      	cmp	r4, r3
 80014b4:	d35c      	bcc.n	8001570 <acis_ignition_loop+0x2c8>
        {
          HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2140      	movs	r1, #64	; 0x40
 80014ba:	4839      	ldr	r0, [pc, #228]	; (80015a0 <acis_ignition_loop+0x2f8>)
 80014bc:	f00b fbe2 	bl	800cc84 <HAL_GPIO_WritePin>
          saturated_23 = 1;
 80014c0:	4b3a      	ldr	r3, [pc, #232]	; (80015ac <acis_ignition_loop+0x304>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
  {
 80014c6:	e053      	b.n	8001570 <acis_ignition_loop+0x2c8>
        }
      }
      else if(rpm > 500.0f && DelayDiff(t_ign23_time, t_ign23_prev) > 15000)
 80014c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014cc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80015bc <acis_ignition_loop+0x314>
 80014d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d8:	dd21      	ble.n	800151e <acis_ignition_loop+0x276>
 80014da:	6839      	ldr	r1, [r7, #0]
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f006 fc81 	bl	8007de4 <DelayDiff>
 80014e2:	4602      	mov	r2, r0
 80014e4:	f643 2398 	movw	r3, #15000	; 0x3a98
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d918      	bls.n	800151e <acis_ignition_loop+0x276>
      {
        if((int32_t)DelayDiff(t_ign23_time, t_ign23_prev) - (int32_t)DelayDiff(now, t_ign23_time) < 11719)
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f006 fc78 	bl	8007de4 <DelayDiff>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461c      	mov	r4, r3
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	6938      	ldr	r0, [r7, #16]
 80014fc:	f006 fc72 	bl	8007de4 <DelayDiff>
 8001500:	4603      	mov	r3, r0
 8001502:	1ae3      	subs	r3, r4, r3
 8001504:	f642 52c6 	movw	r2, #11718	; 0x2dc6
 8001508:	4293      	cmp	r3, r2
 800150a:	dc1f      	bgt.n	800154c <acis_ignition_loop+0x2a4>
        {
          HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2140      	movs	r1, #64	; 0x40
 8001510:	4823      	ldr	r0, [pc, #140]	; (80015a0 <acis_ignition_loop+0x2f8>)
 8001512:	f00b fbb7 	bl	800cc84 <HAL_GPIO_WritePin>
          saturated_23 = 1;
 8001516:	4b25      	ldr	r3, [pc, #148]	; (80015ac <acis_ignition_loop+0x304>)
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
        if((int32_t)DelayDiff(t_ign23_time, t_ign23_prev) - (int32_t)DelayDiff(now, t_ign23_time) < 11719)
 800151c:	e016      	b.n	800154c <acis_ignition_loop+0x2a4>
        }
      }
      else if(DelayDiff(now, t_ign23_time) >= DelayDiff(t_ign23_time, t_ign23_prev) * 64 / 128)
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	6938      	ldr	r0, [r7, #16]
 8001522:	f006 fc5f 	bl	8007de4 <DelayDiff>
 8001526:	4604      	mov	r4, r0
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f006 fc5a 	bl	8007de4 <DelayDiff>
 8001530:	4603      	mov	r3, r0
 8001532:	019b      	lsls	r3, r3, #6
 8001534:	09db      	lsrs	r3, r3, #7
 8001536:	429c      	cmp	r4, r3
 8001538:	d31a      	bcc.n	8001570 <acis_ignition_loop+0x2c8>
      {
        HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	2140      	movs	r1, #64	; 0x40
 800153e:	4818      	ldr	r0, [pc, #96]	; (80015a0 <acis_ignition_loop+0x2f8>)
 8001540:	f00b fba0 	bl	800cc84 <HAL_GPIO_WritePin>
        saturated_23 = 1;
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <acis_ignition_loop+0x304>)
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
  {
 800154a:	e011      	b.n	8001570 <acis_ignition_loop+0x2c8>
 800154c:	e010      	b.n	8001570 <acis_ignition_loop+0x2c8>
      }
    }
  }
  else
  {
    HAL_GPIO_WritePin(IGN_14_GPIO_Port, IGN_14_Pin, GPIO_PIN_SET);
 800154e:	2201      	movs	r2, #1
 8001550:	2180      	movs	r1, #128	; 0x80
 8001552:	4813      	ldr	r0, [pc, #76]	; (80015a0 <acis_ignition_loop+0x2f8>)
 8001554:	f00b fb96 	bl	800cc84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IGN_23_GPIO_Port, IGN_23_Pin, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2140      	movs	r1, #64	; 0x40
 800155c:	4810      	ldr	r0, [pc, #64]	; (80015a0 <acis_ignition_loop+0x2f8>)
 800155e:	f00b fb91 	bl	800cc84 <HAL_GPIO_WritePin>
    saturated_14 = 0;
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <acis_ignition_loop+0x2e0>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
    saturated_23 = 0;
 8001568:	4b10      	ldr	r3, [pc, #64]	; (80015ac <acis_ignition_loop+0x304>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
  }
}
 800156e:	e000      	b.n	8001572 <acis_ignition_loop+0x2ca>
  {
 8001570:	bf00      	nop
}
 8001572:	bf00      	nop
 8001574:	372c      	adds	r7, #44	; 0x2c
 8001576:	46bd      	mov	sp, r7
 8001578:	bd90      	pop	{r4, r7, pc}
 800157a:	bf00      	nop
 800157c:	20011920 	.word	0x20011920
 8001580:	40020000 	.word	0x40020000
 8001584:	200104a5 	.word	0x200104a5
 8001588:	2002095a 	.word	0x2002095a
 800158c:	200118fc 	.word	0x200118fc
 8001590:	20011904 	.word	0x20011904
 8001594:	2001190c 	.word	0x2001190c
 8001598:	40000c00 	.word	0x40000c00
 800159c:	000927bf 	.word	0x000927bf
 80015a0:	40020400 	.word	0x40020400
 80015a4:	20021480 	.word	0x20021480
 80015a8:	43960000 	.word	0x43960000
 80015ac:	2002095b 	.word	0x2002095b
 80015b0:	20011900 	.word	0x20011900
 80015b4:	20011908 	.word	0x20011908
 80015b8:	20011910 	.word	0x20011910
 80015bc:	43fa0000 	.word	0x43fa0000

080015c0 <acis_hall_exti>:

inline void acis_hall_exti(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
  uint32_t now = Delay_Tick;
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <acis_hall_exti+0xb8>)
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	60fb      	str	r3, [r7, #12]
  uint8_t hall_cylinders = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	75fb      	strb	r3, [r7, #23]
  hall_prev = now;
 80015d0:	4a2a      	ldr	r2, [pc, #168]	; (800167c <acis_hall_exti+0xbc>)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6013      	str	r3, [r2, #0]
  float angle = 0.0f;
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  float angle14 = csps_getangle14();
 80015dc:	f006 f9ee 	bl	80079bc <csps_getangle14>
 80015e0:	ed87 0a02 	vstr	s0, [r7, #8]
  float angle23 = csps_getangle23from14(angle14);
 80015e4:	ed97 0a02 	vldr	s0, [r7, #8]
 80015e8:	f006 faaa 	bl	8007b40 <csps_getangle23from14>
 80015ec:	ed87 0a01 	vstr	s0, [r7, #4]
  float cspsfound = csps_isfound();
 80015f0:	f006 fb1e 	bl	8007c30 <csps_isfound>
 80015f4:	4603      	mov	r3, r0
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015fe:	edc7 7a00 	vstr	s15, [r7]

  if(angle14 < 90.0f && angle14 >= -90.0f)
 8001602:	edd7 7a02 	vldr	s15, [r7, #8]
 8001606:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001680 <acis_hall_exti+0xc0>
 800160a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001612:	d50d      	bpl.n	8001630 <acis_hall_exti+0x70>
 8001614:	edd7 7a02 	vldr	s15, [r7, #8]
 8001618:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001684 <acis_hall_exti+0xc4>
 800161c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	db04      	blt.n	8001630 <acis_hall_exti+0x70>
  {
      hall_cylinders = 1;
 8001626:	2301      	movs	r3, #1
 8001628:	75fb      	strb	r3, [r7, #23]
      angle = angle14;
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	e003      	b.n	8001638 <acis_hall_exti+0x78>
  }
  else
  {
    hall_cylinders = 2;
 8001630:	2302      	movs	r3, #2
 8001632:	75fb      	strb	r3, [r7, #23]
    angle = angle23;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	613b      	str	r3, [r7, #16]
  }
  hall_angle = angle;
 8001638:	4a13      	ldr	r2, [pc, #76]	; (8001688 <acis_hall_exti+0xc8>)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	6013      	str	r3, [r2, #0]

  if(cspsfound && acis_config.params.isIgnitionByHall)
 800163e:	edd7 7a00 	vldr	s15, [r7]
 8001642:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	d00e      	beq.n	800166a <acis_hall_exti+0xaa>
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <acis_hall_exti+0xcc>)
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00a      	beq.n	800166a <acis_hall_exti+0xaa>
  {
    if(hall_cylinders == 1)
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d102      	bne.n	8001660 <acis_hall_exti+0xa0>
    {
      acis_ignite_14();
 800165a:	f7ff fd51 	bl	8001100 <acis_ignite_14>
 800165e:	e004      	b.n	800166a <acis_hall_exti+0xaa>
    }
    else if(hall_cylinders == 2)
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d101      	bne.n	800166a <acis_hall_exti+0xaa>
    {
      acis_ignite_23();
 8001666:	f7ff fd6f 	bl	8001148 <acis_ignite_23>
    }
  }
  hall_rotates = 1;
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <acis_hall_exti+0xd0>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
}
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40000c00 	.word	0x40000c00
 800167c:	20011914 	.word	0x20011914
 8001680:	42b40000 	.word	0x42b40000
 8001684:	c2b40000 	.word	0xc2b40000
 8001688:	20011918 	.word	0x20011918
 800168c:	20021480 	.word	0x20021480
 8001690:	20011920 	.word	0x20011920
 8001694:	00000000 	.word	0x00000000

08001698 <acis_hall_loop>:

static inline void acis_hall_loop(void)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
  static uint32_t last_error_null = 0;
  uint32_t prev = hall_prev;
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <acis_hall_loop+0xa0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	607b      	str	r3, [r7, #4]
  uint32_t now = Delay_Tick;
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <acis_hall_loop+0xa4>)
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	603b      	str	r3, [r7, #0]
  if(DelayDiff(now, last_error_null) > 10000)
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <acis_hall_loop+0xa8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4619      	mov	r1, r3
 80016b0:	6838      	ldr	r0, [r7, #0]
 80016b2:	f006 fb97 	bl	8007de4 <DelayDiff>
 80016b6:	4602      	mov	r2, r0
 80016b8:	f242 7310 	movw	r3, #10000	; 0x2710
 80016bc:	429a      	cmp	r2, r3
 80016be:	d915      	bls.n	80016ec <acis_hall_loop+0x54>
  {
    hall_error *= 0.95;
 80016c0:	4b20      	ldr	r3, [pc, #128]	; (8001744 <acis_hall_loop+0xac>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff0f 	bl	80004e8 <__aeabi_f2d>
 80016ca:	a319      	add	r3, pc, #100	; (adr r3, 8001730 <acis_hall_loop+0x98>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ff62 	bl	8000598 <__aeabi_dmul>
 80016d4:	4603      	mov	r3, r0
 80016d6:	460c      	mov	r4, r1
 80016d8:	4618      	mov	r0, r3
 80016da:	4621      	mov	r1, r4
 80016dc:	f7ff f96e 	bl	80009bc <__aeabi_d2f>
 80016e0:	4602      	mov	r2, r0
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <acis_hall_loop+0xac>)
 80016e4:	601a      	str	r2, [r3, #0]
    last_error_null = now;
 80016e6:	4a16      	ldr	r2, [pc, #88]	; (8001740 <acis_hall_loop+0xa8>)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6013      	str	r3, [r2, #0]
  }
  if(DelayDiff(now, prev) > 600000)
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	6838      	ldr	r0, [r7, #0]
 80016f0:	f006 fb78 	bl	8007de4 <DelayDiff>
 80016f4:	4602      	mov	r2, r0
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <acis_hall_loop+0xb0>)
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d912      	bls.n	8001722 <acis_hall_loop+0x8a>
  {
    if((acis_config.params.isHallLearningMode || acis_config.params.isIgnitionByHall) && csps_isfound())
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <acis_hall_loop+0xb4>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d103      	bne.n	800170c <acis_hall_loop+0x74>
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <acis_hall_loop+0xb4>)
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d007      	beq.n	800171c <acis_hall_loop+0x84>
 800170c:	f006 fa90 	bl	8007c30 <csps_isfound>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <acis_hall_loop+0x84>
      hall_error = 3.0f;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <acis_hall_loop+0xac>)
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <acis_hall_loop+0xb8>)
 800171a:	601a      	str	r2, [r3, #0]
    hall_rotates = 0;
 800171c:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <acis_hall_loop+0xbc>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
  }
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bd90      	pop	{r4, r7, pc}
 800172a:	bf00      	nop
 800172c:	f3af 8000 	nop.w
 8001730:	66666666 	.word	0x66666666
 8001734:	3fee6666 	.word	0x3fee6666
 8001738:	20011914 	.word	0x20011914
 800173c:	40000c00 	.word	0x40000c00
 8001740:	20021128 	.word	0x20021128
 8001744:	2001191c 	.word	0x2001191c
 8001748:	000927c0 	.word	0x000927c0
 800174c:	20021480 	.word	0x20021480
 8001750:	40400000 	.word	0x40400000
 8001754:	20011920 	.word	0x20011920

08001758 <CalculateIgnition>:

static float CalculateIgnition(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b0a4      	sub	sp, #144	; 0x90
 800175c:	af00      	add	r7, sp, #0
  float rpm = csps_getrpm();
 800175e:	f006 fa23 	bl	8007ba8 <csps_getrpm>
 8001762:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
  float pressure = map_getpressure();
 8001766:	f007 fb13 	bl	8008d90 <map_getpressure>
 800176a:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
  float temperature = 90.0f;
 800176e:	4bbc      	ldr	r3, [pc, #752]	; (8001a60 <CalculateIgnition+0x308>)
 8001770:	63fb      	str	r3, [r7, #60]	; 0x3c
  //float temperature = engine_temperature;
  uint8_t isIdle = HAL_GPIO_ReadPin(SENS_ACC_GPIO_Port, SENS_ACC_Pin) == GPIO_PIN_SET;
 8001772:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001776:	48bb      	ldr	r0, [pc, #748]	; (8001a64 <CalculateIgnition+0x30c>)
 8001778:	f00b fa6c 	bl	800cc54 <HAL_GPIO_ReadPin>
 800177c:	4603      	mov	r3, r0
 800177e:	2b01      	cmp	r3, #1
 8001780:	bf0c      	ite	eq
 8001782:	2301      	moveq	r3, #1
 8001784:	2300      	movne	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b


  static uint32_t lastRotated = 0x80000000;
  static uint8_t isInitial = 1;
  uint32_t now = Delay_Tick;
 800178c:	4bb6      	ldr	r3, [pc, #728]	; (8001a68 <CalculateIgnition+0x310>)
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
  float angle = 0.0f;
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  float angle_1, angle_2;
  float mult, mult_rpm, mult_press,
      temprpm1 = 0.0f,temprpm2 = 0.0f,
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      temppress1 = 0.0f,temppress2 = 0.0f,
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	67fb      	str	r3, [r7, #124]	; 0x7c
      temptemp1 = 0.0f,temptemp2 = 0.0f,
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	677b      	str	r3, [r7, #116]	; 0x74
      tempign1 = 0.0f, tempign2 = 0.0f,
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      tempign11 = 0.0f, tempign12 = 0.0f,
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
      tempign21 = 0.0f, tempign22 = 0.0f;
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
  uint32_t rpmindex1 = 0, rpmindex2 = 0,
 80017e8:	2300      	movs	r3, #0
 80017ea:	673b      	str	r3, [r7, #112]	; 0x70
 80017ec:	2300      	movs	r3, #0
 80017ee:	66fb      	str	r3, [r7, #108]	; 0x6c
      pressindex1 = 0, pressindex2 = 0,
 80017f0:	2300      	movs	r3, #0
 80017f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80017f4:	2300      	movs	r3, #0
 80017f6:	667b      	str	r3, [r7, #100]	; 0x64
      tempindex1 = 0, tempindex2 = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	663b      	str	r3, [r7, #96]	; 0x60
 80017fc:	2300      	movs	r3, #0
 80017fe:	65fb      	str	r3, [r7, #92]	; 0x5c

  sAcisIgnTable * table = NULL;
 8001800:	2300      	movs	r3, #0
 8001802:	65bb      	str	r3, [r7, #88]	; 0x58
  int table_num = table_current;
 8001804:	4b99      	ldr	r3, [pc, #612]	; (8001a6c <CalculateIgnition+0x314>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	61bb      	str	r3, [r7, #24]

  if(table_num < acis_config.tables_count || table_num < TABLE_SETUPS_MAX)
 800180a:	4b99      	ldr	r3, [pc, #612]	; (8001a70 <CalculateIgnition+0x318>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	429a      	cmp	r2, r3
 8001812:	db02      	blt.n	800181a <CalculateIgnition+0xc2>
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2b03      	cmp	r3, #3
 8001818:	dc08      	bgt.n	800182c <CalculateIgnition+0xd4>
    table = &acis_config.tables[table_num];
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	f640 426c 	movw	r2, #3180	; 0xc6c
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	33e0      	adds	r3, #224	; 0xe0
 8001826:	4a92      	ldr	r2, [pc, #584]	; (8001a70 <CalculateIgnition+0x318>)
 8001828:	4413      	add	r3, r2
 800182a:	65bb      	str	r3, [r7, #88]	; 0x58

  if(rpm > 400.0f)
 800182c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001830:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001a74 <CalculateIgnition+0x31c>
 8001834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183c:	dd06      	ble.n	800184c <CalculateIgnition+0xf4>
  {
    isInitial = 0;
 800183e:	4b8e      	ldr	r3, [pc, #568]	; (8001a78 <CalculateIgnition+0x320>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
    lastRotated = now;
 8001844:	4a8d      	ldr	r2, [pc, #564]	; (8001a7c <CalculateIgnition+0x324>)
 8001846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e015      	b.n	8001878 <CalculateIgnition+0x120>
  }
  else if(rpm < 10.0f)
 800184c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001850:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	d50c      	bpl.n	8001878 <CalculateIgnition+0x120>
  {
    if(DelayDiff(now, lastRotated) < INITIAL_TIMEOUT)
 800185e:	4b87      	ldr	r3, [pc, #540]	; (8001a7c <CalculateIgnition+0x324>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4619      	mov	r1, r3
 8001864:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001866:	f006 fabd 	bl	8007de4 <DelayDiff>
 800186a:	4602      	mov	r2, r0
 800186c:	4b84      	ldr	r3, [pc, #528]	; (8001a80 <CalculateIgnition+0x328>)
 800186e:	429a      	cmp	r2, r3
 8001870:	d802      	bhi.n	8001878 <CalculateIgnition+0x120>
    {
      isInitial = 1;
 8001872:	4b81      	ldr	r3, [pc, #516]	; (8001a78 <CalculateIgnition+0x320>)
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
    }
  }

  if(table)
 8001878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 84a5 	beq.w	80021ca <CalculateIgnition+0xa72>
  {
    angle = table->initial_ignition;
 8001880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if(!isInitial && rpm > 10.0f)
 8001888:	4b7b      	ldr	r3, [pc, #492]	; (8001a78 <CalculateIgnition+0x320>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	f040 847b 	bne.w	8002188 <CalculateIgnition+0xa30>
 8001892:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001896:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800189a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800189e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a2:	f340 8471 	ble.w	8002188 <CalculateIgnition+0xa30>
    {
      if(isIdle && table->idles_count > 0)
 80018a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 80ea 	beq.w	8001a84 <CalculateIgnition+0x32c>
 80018b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f340 80e5 	ble.w	8001a84 <CalculateIgnition+0x32c>
      {
        if(table->idles_count == 1)
 80018ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d104      	bne.n	80018cc <CalculateIgnition+0x174>
          angle = table->idle_ignitions[0];
 80018c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        if(table->idles_count == 1)
 80018ca:	e357      	b.n	8001f7c <CalculateIgnition+0x824>
        else
        {
          if(rpm <= table->idle_rotates[0])
 80018cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018ce:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80018d2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80018d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	d804      	bhi.n	80018ea <CalculateIgnition+0x192>
          {
            angle = table->idle_ignitions[0];
 80018e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80018e8:	e065      	b.n	80019b6 <CalculateIgnition+0x25e>
          }
          else if(rpm >= table->idle_rotates[table->rotates_count-1])
 80018ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018ec:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80018f0:	3b01      	subs	r3, #1
 80018f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80018f4:	3320      	adds	r3, #32
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001902:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	db18      	blt.n	800193e <CalculateIgnition+0x1e6>
          {
            rpmindex1 = table->idles_count-2;
 800190c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	3b02      	subs	r3, #2
 8001912:	673b      	str	r3, [r7, #112]	; 0x70
            rpmindex2 = table->idles_count-1;
 8001914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	3b01      	subs	r3, #1
 800191a:	66fb      	str	r3, [r7, #108]	; 0x6c
            temprpm1 = table->idle_rotates[rpmindex1];
 800191c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800191e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001920:	3320      	adds	r3, #32
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            temprpm2 = table->idle_rotates[rpmindex2];
 800192c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800192e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001930:	3320      	adds	r3, #32
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800193c:	e03b      	b.n	80019b6 <CalculateIgnition+0x25e>
          }
          else
          {
            for(int i = 1; i < table->idles_count; i++)
 800193e:	2301      	movs	r3, #1
 8001940:	657b      	str	r3, [r7, #84]	; 0x54
 8001942:	e033      	b.n	80019ac <CalculateIgnition+0x254>
            {
              temprpm1 = table->idle_rotates[i-1];
 8001944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001946:	3b01      	subs	r3, #1
 8001948:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800194a:	3320      	adds	r3, #32
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              temprpm2 = table->idle_rotates[i];
 8001956:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195a:	3320      	adds	r3, #32
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              if(temprpm1 < rpm && temprpm2 > rpm)
 8001966:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800196a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800196e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	d50e      	bpl.n	8001996 <CalculateIgnition+0x23e>
 8001978:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800197c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001980:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001988:	dd05      	ble.n	8001996 <CalculateIgnition+0x23e>
              {
                rpmindex1 = i-1;
 800198a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800198c:	3b01      	subs	r3, #1
 800198e:	673b      	str	r3, [r7, #112]	; 0x70
                rpmindex2 = i;
 8001990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001992:	66fb      	str	r3, [r7, #108]	; 0x6c
                break;
 8001994:	e00f      	b.n	80019b6 <CalculateIgnition+0x25e>
              }
              temprpm1 = 0.0f;
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              temprpm2 = 0.0f;
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            for(int i = 1; i < table->idles_count; i++)
 80019a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a8:	3301      	adds	r3, #1
 80019aa:	657b      	str	r3, [r7, #84]	; 0x54
 80019ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019b2:	429a      	cmp	r2, r3
 80019b4:	dbc6      	blt.n	8001944 <CalculateIgnition+0x1ec>
            }
          }
          if(temprpm1 != 0.0f || temprpm2 != 0.0f)
 80019b6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80019ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c2:	d107      	bne.n	80019d4 <CalculateIgnition+0x27c>
 80019c4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80019c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	f000 82d4 	beq.w	8001f7c <CalculateIgnition+0x824>
          {
            tempign1 = table->idle_ignitions[rpmindex1];
 80019d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019d8:	3308      	adds	r3, #8
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
            tempign2 = table->idle_ignitions[rpmindex2];
 80019e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019e6:	3308      	adds	r3, #8
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            if(temprpm1 != temprpm2)
 80019f0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80019f4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80019f8:	eeb4 7a67 	vcmp.f32	s14, s15
 80019fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a00:	d020      	beq.n	8001a44 <CalculateIgnition+0x2ec>
            {
              mult = (rpm - temprpm1) / (temprpm2 - temprpm1);
 8001a02:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001a06:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001a0a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a0e:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001a12:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001a16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a1e:	edc7 7a05 	vstr	s15, [r7, #20]
              angle = (tempign2 - tempign1) * mult + tempign1;
 8001a22:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001a26:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a36:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
        if(table->idles_count == 1)
 8001a42:	e29b      	b.n	8001f7c <CalculateIgnition+0x824>
            }
            else angle = (tempign1 + tempign2) / 2.0f;
 8001a44:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001a48:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a58:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
        if(table->idles_count == 1)
 8001a5c:	e28e      	b.n	8001f7c <CalculateIgnition+0x824>
 8001a5e:	bf00      	nop
 8001a60:	42b40000 	.word	0x42b40000
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40000c00 	.word	0x40000c00
 8001a6c:	20011930 	.word	0x20011930
 8001a70:	20021480 	.word	0x20021480
 8001a74:	43c80000 	.word	0x43c80000
 8001a78:	200104a7 	.word	0x200104a7
 8001a7c:	200104a8 	.word	0x200104a8
 8001a80:	0001869f 	.word	0x0001869f

        }
      }
      else
      {
        if(table->pressures_count != 0 && table->rotates_count != 0)
 8001a84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8277 	beq.w	8001f7e <CalculateIgnition+0x826>
 8001a90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a92:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8271 	beq.w	8001f7e <CalculateIgnition+0x826>
        {
          if(table->pressures_count == 1)
 8001a9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d10d      	bne.n	8001ac2 <CalculateIgnition+0x36a>
          {
            pressindex1 = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	66bb      	str	r3, [r7, #104]	; 0x68
            pressindex2 = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	667b      	str	r3, [r7, #100]	; 0x64
            temppress1 = table->pressures[0];
 8001aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ab0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001ab4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            temppress2 = table->pressures[0];
 8001ab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001abe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ac0:	e08a      	b.n	8001bd8 <CalculateIgnition+0x480>
          }
          else if(pressure <= table->pressures[0])
 8001ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ac4:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8001ac8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad4:	d815      	bhi.n	8001b02 <CalculateIgnition+0x3aa>
          {
            pressindex1 = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	66bb      	str	r3, [r7, #104]	; 0x68
            pressindex2 = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	667b      	str	r3, [r7, #100]	; 0x64
            temppress1 = table->pressures[pressindex1];
 8001ade:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ae0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ae2:	3338      	adds	r3, #56	; 0x38
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3304      	adds	r3, #4
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            temppress2 = table->pressures[pressindex2];
 8001af0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001af2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001af4:	3338      	adds	r3, #56	; 0x38
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	3304      	adds	r3, #4
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b00:	e06a      	b.n	8001bd8 <CalculateIgnition+0x480>
          }
          else if(pressure >= table->pressures[table->pressures_count - 1])
 8001b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b0c:	3338      	adds	r3, #56	; 0x38
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	3304      	adds	r3, #4
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001b1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b24:	db1b      	blt.n	8001b5e <CalculateIgnition+0x406>
          {
            pressindex1 = table->pressures_count - 2;
 8001b26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2c:	3b02      	subs	r3, #2
 8001b2e:	66bb      	str	r3, [r7, #104]	; 0x68
            pressindex2 = table->pressures_count - 1;
 8001b30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b36:	3b01      	subs	r3, #1
 8001b38:	667b      	str	r3, [r7, #100]	; 0x64
            temppress1 = table->pressures[pressindex1];
 8001b3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b3e:	3338      	adds	r3, #56	; 0x38
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	3304      	adds	r3, #4
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            temppress2 = table->pressures[pressindex2];
 8001b4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b50:	3338      	adds	r3, #56	; 0x38
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	3304      	adds	r3, #4
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b5c:	e03c      	b.n	8001bd8 <CalculateIgnition+0x480>
          }
          else
          {
            for(int i = 1; i < table->pressures_count; i++)
 8001b5e:	2301      	movs	r3, #1
 8001b60:	653b      	str	r3, [r7, #80]	; 0x50
 8001b62:	e033      	b.n	8001bcc <CalculateIgnition+0x474>
            {
              temppress1 = table->pressures[i-1];
 8001b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b66:	3b01      	subs	r3, #1
 8001b68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b6a:	3338      	adds	r3, #56	; 0x38
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	3304      	adds	r3, #4
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
              temppress2 = table->pressures[i];
 8001b78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b7c:	3338      	adds	r3, #56	; 0x38
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	3304      	adds	r3, #4
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	67fb      	str	r3, [r7, #124]	; 0x7c
              if(temppress1 < pressure && temppress2 > pressure)
 8001b88:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001b8c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001b90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b98:	d50e      	bpl.n	8001bb8 <CalculateIgnition+0x460>
 8001b9a:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001b9e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001ba2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	dd05      	ble.n	8001bb8 <CalculateIgnition+0x460>
              {
                pressindex1 = i-1;
 8001bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	66bb      	str	r3, [r7, #104]	; 0x68
                pressindex2 = i;
 8001bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bb4:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 8001bb6:	e00f      	b.n	8001bd8 <CalculateIgnition+0x480>
              }
              temppress1 = 0.0f;
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
              temppress2 = 0.0f;
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	67fb      	str	r3, [r7, #124]	; 0x7c
            for(int i = 1; i < table->pressures_count; i++)
 8001bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bc8:	3301      	adds	r3, #1
 8001bca:	653b      	str	r3, [r7, #80]	; 0x50
 8001bcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dbc5      	blt.n	8001b64 <CalculateIgnition+0x40c>
            }
          }

          if(table->rotates_count == 1)
 8001bd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bda:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d10e      	bne.n	8001c00 <CalculateIgnition+0x4a8>
          {
            rpmindex1 = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	673b      	str	r3, [r7, #112]	; 0x70
            rpmindex2 = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	66fb      	str	r3, [r7, #108]	; 0x6c
            temprpm1 = table->rotates[0];
 8001bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            temprpm2 = table->rotates[0];
 8001bf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bf6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001bfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001bfe:	e087      	b.n	8001d10 <CalculateIgnition+0x5b8>
          }
          else if(rpm <= table->rotates[0])
 8001c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c02:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8001c06:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001c0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c12:	d814      	bhi.n	8001c3e <CalculateIgnition+0x4e6>
          {
            rpmindex1 = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	673b      	str	r3, [r7, #112]	; 0x70
            rpmindex2 = 1;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
            temprpm1 = table->rotates[rpmindex1];
 8001c1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c20:	3352      	adds	r3, #82	; 0x52
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            temprpm2 = table->rotates[rpmindex2];
 8001c2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c30:	3352      	adds	r3, #82	; 0x52
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c3c:	e068      	b.n	8001d10 <CalculateIgnition+0x5b8>
          }
          else if(rpm >= table->rotates[table->rotates_count - 1])
 8001c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c40:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001c44:	3b01      	subs	r3, #1
 8001c46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c48:	3352      	adds	r3, #82	; 0x52
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	edd3 7a00 	vldr	s15, [r3]
 8001c52:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001c56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	db1a      	blt.n	8001c96 <CalculateIgnition+0x53e>
          {
            rpmindex1 = table->rotates_count - 2;
 8001c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c62:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001c66:	3b02      	subs	r3, #2
 8001c68:	673b      	str	r3, [r7, #112]	; 0x70
            rpmindex2 = table->rotates_count - 1;
 8001c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c6c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001c70:	3b01      	subs	r3, #1
 8001c72:	66fb      	str	r3, [r7, #108]	; 0x6c
            temprpm1 = table->rotates[rpmindex1];
 8001c74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c78:	3352      	adds	r3, #82	; 0x52
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            temprpm2 = table->rotates[rpmindex2];
 8001c84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c88:	3352      	adds	r3, #82	; 0x52
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c94:	e03c      	b.n	8001d10 <CalculateIgnition+0x5b8>
          }
          else
          {
            for(int i = 1; i < table->rotates_count; i++)
 8001c96:	2301      	movs	r3, #1
 8001c98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c9a:	e033      	b.n	8001d04 <CalculateIgnition+0x5ac>
            {
              temprpm1 = table->rotates[i-1];
 8001c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ca2:	3352      	adds	r3, #82	; 0x52
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              temprpm2 = table->rotates[i];
 8001cae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cb2:	3352      	adds	r3, #82	; 0x52
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              if(temprpm1 < rpm && temprpm2 > rpm)
 8001cbe:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001cc2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cce:	d50e      	bpl.n	8001cee <CalculateIgnition+0x596>
 8001cd0:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001cd4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce0:	dd05      	ble.n	8001cee <CalculateIgnition+0x596>
              {
                rpmindex1 = i-1;
 8001ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	673b      	str	r3, [r7, #112]	; 0x70
                rpmindex2 = i;
 8001ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cea:	66fb      	str	r3, [r7, #108]	; 0x6c
                break;
 8001cec:	e010      	b.n	8001d10 <CalculateIgnition+0x5b8>
              }
              temprpm1 = 0.0f;
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              temprpm2 = 0.0f;
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            for(int i = 1; i < table->rotates_count; i++)
 8001cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d00:	3301      	adds	r3, #1
 8001d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d06:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001d0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dbc5      	blt.n	8001c9c <CalculateIgnition+0x544>
            }
          }

          tempign11 = table->ignitions[pressindex1][rpmindex1];
 8001d10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001d12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d1e:	4413      	add	r3, r2
 8001d20:	336a      	adds	r3, #106	; 0x6a
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
          tempign12 = table->ignitions[pressindex1][rpmindex2];
 8001d2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001d2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d38:	4413      	add	r3, r2
 8001d3a:	336a      	adds	r3, #106	; 0x6a
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
          tempign21 = table->ignitions[pressindex2][rpmindex1];
 8001d44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001d46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d52:	4413      	add	r3, r2
 8001d54:	336a      	adds	r3, #106	; 0x6a
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	623b      	str	r3, [r7, #32]
          tempign22 = table->ignitions[pressindex2][rpmindex2];
 8001d5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001d60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d6c:	4413      	add	r3, r2
 8001d6e:	336a      	adds	r3, #106	; 0x6a
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	61fb      	str	r3, [r7, #28]
          if((temprpm1 != 0.0f || temprpm2 != 0.0f) && (temppress1 != 0.0f || temppress2 != 0.0f))
 8001d78:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001d7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d84:	d107      	bne.n	8001d96 <CalculateIgnition+0x63e>
 8001d86:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001d8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d92:	f000 80f4 	beq.w	8001f7e <CalculateIgnition+0x826>
 8001d96:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001d9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	d107      	bne.n	8001db4 <CalculateIgnition+0x65c>
 8001da4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001da8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db0:	f000 80e5 	beq.w	8001f7e <CalculateIgnition+0x826>
          {

            if(temprpm2 != temprpm1 && temppress1 != temppress2)
 8001db4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001db8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001dbc:	eeb4 7a67 	vcmp.f32	s14, s15
 8001dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc4:	d059      	beq.n	8001e7a <CalculateIgnition+0x722>
 8001dc6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001dca:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001dce:	eeb4 7a67 	vcmp.f32	s14, s15
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	d050      	beq.n	8001e7a <CalculateIgnition+0x722>
            {
              mult_rpm = (rpm - temprpm1) / (temprpm2 - temprpm1);
 8001dd8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001ddc:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001de0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001de4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001de8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001dec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df4:	edc7 7a04 	vstr	s15, [r7, #16]
              mult_press = (pressure - temppress1) / (temppress2 - temppress1);
 8001df8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001dfc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001e00:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e04:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001e08:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001e0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e14:	edc7 7a03 	vstr	s15, [r7, #12]

              angle_1 = (tempign12 - tempign11) * mult_rpm + tempign11;
 8001e18:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001e1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e24:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e34:	edc7 7a02 	vstr	s15, [r7, #8]
              angle_2 = (tempign22 - tempign21) * mult_rpm + tempign21;
 8001e38:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e44:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e4c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e54:	edc7 7a01 	vstr	s15, [r7, #4]

              angle = (angle_2 - angle_1) * mult_press + angle_1;
 8001e58:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e64:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e74:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8001e78:	e081      	b.n	8001f7e <CalculateIgnition+0x826>
            }
            else if(temprpm2 == temprpm1 && temppress1 != temppress2)
 8001e7a:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001e7e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001e82:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8a:	d12c      	bne.n	8001ee6 <CalculateIgnition+0x78e>
 8001e8c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001e90:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001e94:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9c:	d023      	beq.n	8001ee6 <CalculateIgnition+0x78e>
            {
              mult_press = (pressure - temppress1) / (temppress2 - temppress1);
 8001e9e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001ea2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001ea6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001eaa:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001eae:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001eb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eba:	edc7 7a03 	vstr	s15, [r7, #12]
              mult_rpm = 1.0f;
 8001ebe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ec2:	613b      	str	r3, [r7, #16]
              angle = (tempign21 - tempign11) * mult_press + tempign11;
 8001ec4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ec8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ecc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ed0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee0:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8001ee4:	e04b      	b.n	8001f7e <CalculateIgnition+0x826>
            }
            else if(temprpm2 != temprpm1 && temppress1 == temppress2)
 8001ee6:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001eea:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001eee:	eeb4 7a67 	vcmp.f32	s14, s15
 8001ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef6:	d02c      	beq.n	8001f52 <CalculateIgnition+0x7fa>
 8001ef8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001efc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001f00:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f08:	d123      	bne.n	8001f52 <CalculateIgnition+0x7fa>
            {
              mult_rpm = (rpm - temprpm1) / (temprpm2 - temprpm1);
 8001f0a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001f0e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001f12:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f16:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001f1a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001f1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f26:	edc7 7a04 	vstr	s15, [r7, #16]
              mult_press = 1.0f;
 8001f2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f2e:	60fb      	str	r3, [r7, #12]
              angle = (tempign12 - tempign11) * mult_rpm + tempign11;
 8001f30:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001f34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f44:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8001f50:	e015      	b.n	8001f7e <CalculateIgnition+0x826>
            }
            else angle = (tempign11 + tempign12 + tempign21 + tempign22) / 4.0f;
 8001f52:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001f56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f66:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f6e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001f72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f76:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8001f7a:	e000      	b.n	8001f7e <CalculateIgnition+0x826>
        if(table->idles_count == 1)
 8001f7c:	bf00      	nop

          }
        }
      }

      if(acis_config.params.isTemperatureEnabled && table->temperatures_count > 0)
 8001f7e:	4b97      	ldr	r3, [pc, #604]	; (80021dc <CalculateIgnition+0xa84>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8100 	beq.w	8002188 <CalculateIgnition+0xa30>
 8001f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f8a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f340 80fa 	ble.w	8002188 <CalculateIgnition+0xa30>
      {
        if(table->temperatures_count == 1)
 8001f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f96:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d10b      	bne.n	8001fb6 <CalculateIgnition+0x85e>
        {
          angle += table->temperature_ignitions[0];
 8001f9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fa0:	f603 23dc 	addw	r3, r3, #2780	; 0xadc
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb0:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8001fb4:	e0e8      	b.n	8002188 <CalculateIgnition+0xa30>
        }
        else if(table->temperatures_count >= 2)
 8001fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fb8:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	f340 80e3 	ble.w	8002188 <CalculateIgnition+0xa30>
        {
          if(temperature <= table->temperatures[0])
 8001fc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fc4:	f603 23ac 	addw	r3, r3, #2732	; 0xaac
 8001fc8:	edd3 7a00 	vldr	s15, [r3]
 8001fcc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001fd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd8:	d80b      	bhi.n	8001ff2 <CalculateIgnition+0x89a>
            angle += table->temperature_ignitions[0];
 8001fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fdc:	f603 23dc 	addw	r3, r3, #2780	; 0xadc
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fec:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8001ff0:	e06c      	b.n	80020cc <CalculateIgnition+0x974>
          else if(temperature >= table->temperatures[table->temperatures_count - 1])
 8001ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ff4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ffc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	3304      	adds	r3, #4
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800200e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002016:	db1c      	blt.n	8002052 <CalculateIgnition+0x8fa>
          {
            tempindex1 = table->temperatures_count-2;
 8002018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800201a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800201e:	3b02      	subs	r3, #2
 8002020:	663b      	str	r3, [r7, #96]	; 0x60
            tempindex2 = table->temperatures_count-1;
 8002022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002024:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8002028:	3b01      	subs	r3, #1
 800202a:	65fb      	str	r3, [r7, #92]	; 0x5c
            temptemp1 = table->temperatures[tempindex1];
 800202c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800202e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002030:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	3304      	adds	r3, #4
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	67bb      	str	r3, [r7, #120]	; 0x78
            temptemp2 = table->temperatures[tempindex2];
 800203e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002042:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	3304      	adds	r3, #4
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	677b      	str	r3, [r7, #116]	; 0x74
 8002050:	e03c      	b.n	80020cc <CalculateIgnition+0x974>
          }
          else
          {
            for(int i = 1; i < table->temperatures_count; i++)
 8002052:	2301      	movs	r3, #1
 8002054:	64bb      	str	r3, [r7, #72]	; 0x48
 8002056:	e033      	b.n	80020c0 <CalculateIgnition+0x968>
            {
              temptemp1 = table->temperatures[i-1];
 8002058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800205a:	3b01      	subs	r3, #1
 800205c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800205e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	3304      	adds	r3, #4
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	67bb      	str	r3, [r7, #120]	; 0x78
              temptemp2 = table->temperatures[i];
 800206c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800206e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002070:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	3304      	adds	r3, #4
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	677b      	str	r3, [r7, #116]	; 0x74
              if(temptemp1 < temperature && temptemp2 > temperature)
 800207e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002082:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002086:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800208a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208e:	d50e      	bpl.n	80020ae <CalculateIgnition+0x956>
 8002090:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002094:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a0:	dd05      	ble.n	80020ae <CalculateIgnition+0x956>
              {
                tempindex1 = i-1;
 80020a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a4:	3b01      	subs	r3, #1
 80020a6:	663b      	str	r3, [r7, #96]	; 0x60
                tempindex2 = i;
 80020a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020aa:	65fb      	str	r3, [r7, #92]	; 0x5c
                break;
 80020ac:	e00e      	b.n	80020cc <CalculateIgnition+0x974>
              }
              temptemp1 = 0.0f;
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	67bb      	str	r3, [r7, #120]	; 0x78
              temptemp2 = 0.0f;
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	677b      	str	r3, [r7, #116]	; 0x74
            for(int i = 1; i < table->temperatures_count; i++)
 80020ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020bc:	3301      	adds	r3, #1
 80020be:	64bb      	str	r3, [r7, #72]	; 0x48
 80020c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020c2:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80020c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020c8:	429a      	cmp	r2, r3
 80020ca:	dbc5      	blt.n	8002058 <CalculateIgnition+0x900>
            }
          }
          if(temptemp1 != 0.0f || temptemp2 != 0.0f)
 80020cc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80020d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d8:	d106      	bne.n	80020e8 <CalculateIgnition+0x990>
 80020da:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80020de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e6:	d04f      	beq.n	8002188 <CalculateIgnition+0xa30>
          {
            tempign1 = table->temperature_ignitions[tempindex1];
 80020e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020ec:	f203 23b6 	addw	r3, r3, #694	; 0x2b6
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	3304      	adds	r3, #4
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	633b      	str	r3, [r7, #48]	; 0x30
            tempign2 = table->temperature_ignitions[tempindex2];
 80020fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020fe:	f203 23b6 	addw	r3, r3, #694	; 0x2b6
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	3304      	adds	r3, #4
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
            if(temptemp1 != temptemp2)
 800210c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002110:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002114:	eeb4 7a67 	vcmp.f32	s14, s15
 8002118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211c:	d024      	beq.n	8002168 <CalculateIgnition+0xa10>
            {
              mult = (temperature - temptemp1) / (temptemp2 - temptemp1);
 800211e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002122:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002126:	ee77 6a67 	vsub.f32	s13, s14, s15
 800212a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800212e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002132:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800213a:	edc7 7a05 	vstr	s15, [r7, #20]
              angle += (tempign2 - tempign1) * mult + tempign1;
 800213e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002142:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002146:	ee37 7a67 	vsub.f32	s14, s14, s15
 800214a:	edd7 7a05 	vldr	s15, [r7, #20]
 800214e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002152:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215a:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800215e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002162:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8002166:	e00f      	b.n	8002188 <CalculateIgnition+0xa30>
            }
            else angle += (tempign1 + tempign2) / 2.0f;
 8002168:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800216c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002170:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002174:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002178:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800217c:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002184:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
          }
        }
      }
    }
    angle += table->octane_corrector;
 8002188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800218a:	edd3 7a06 	vldr	s15, [r3, #24]
 800218e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002196:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    if(angle > 90.0f) angle = 90.0f;
 800219a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800219e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80021e0 <CalculateIgnition+0xa88>
 80021a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021aa:	dd02      	ble.n	80021b2 <CalculateIgnition+0xa5a>
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <CalculateIgnition+0xa8c>)
 80021ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if(angle < -60.0f) angle = -60.0f;
 80021b2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80021b6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80021e8 <CalculateIgnition+0xa90>
 80021ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c2:	d502      	bpl.n	80021ca <CalculateIgnition+0xa72>
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <CalculateIgnition+0xa94>)
 80021c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  }
  return angle;
 80021ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021ce:	ee07 3a90 	vmov	s15, r3
}
 80021d2:	eeb0 0a67 	vmov.f32	s0, s15
 80021d6:	3790      	adds	r7, #144	; 0x90
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20021480 	.word	0x20021480
 80021e0:	42b40000 	.word	0x42b40000
 80021e4:	42b40000 	.word	0x42b40000
 80021e8:	c2700000 	.word	0xc2700000
 80021ec:	c2700000 	.word	0xc2700000

080021f0 <LearnIgnition>:

static void LearnIgnition(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b0a2      	sub	sp, #136	; 0x88
 80021f4:	af00      	add	r7, sp, #0
  if(!hall_rotates)
 80021f6:	4b9a      	ldr	r3, [pc, #616]	; (8002460 <LearnIgnition+0x270>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 863c 	beq.w	8002e7a <LearnIgnition+0xc8a>
    return;

  float rpm = csps_getrpm();
 8002202:	f005 fcd1 	bl	8007ba8 <csps_getrpm>
 8002206:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
  float angle_needed = hall_angle;
 800220a:	4b96      	ldr	r3, [pc, #600]	; (8002464 <LearnIgnition+0x274>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	653b      	str	r3, [r7, #80]	; 0x50
  float pressure = map_getpressure();
 8002210:	f006 fdbe 	bl	8008d90 <map_getpressure>
 8002214:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
  uint8_t isIdle = HAL_GPIO_ReadPin(SENS_ACC_GPIO_Port, SENS_ACC_Pin) == GPIO_PIN_SET;
 8002218:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800221c:	4892      	ldr	r0, [pc, #584]	; (8002468 <LearnIgnition+0x278>)
 800221e:	f00a fd19 	bl	800cc54 <HAL_GPIO_ReadPin>
 8002222:	4603      	mov	r3, r0
 8002224:	2b01      	cmp	r3, #1
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

  static uint32_t lastRotated = 0x80000000;
  static uint32_t lastAccepted = 0;
  static uint8_t isInitial = 1;
  uint32_t now = Delay_Tick;
 8002232:	4b8e      	ldr	r3, [pc, #568]	; (800246c <LearnIgnition+0x27c>)
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	647b      	str	r3, [r7, #68]	; 0x44
  float angle = 0.0f;
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	643b      	str	r3, [r7, #64]	; 0x40
  float angle_1, angle_2;
  float mult, diff, mult_rpm, mult_press,
      temprpm1 = 0.0f,temprpm2 = 0.0f,
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      temppress1 = 0.0f,temppress2 = 0.0f,
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	67bb      	str	r3, [r7, #120]	; 0x78
      tempign1 = 0.0f, tempign2 = 0.0f,
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	63bb      	str	r3, [r7, #56]	; 0x38
      tempign11 = 0.0f, tempign12 = 0.0f,
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	637b      	str	r3, [r7, #52]	; 0x34
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
      tempign21 = 0.0f, tempign22 = 0.0f;
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t rpmindex1 = 0, rpmindex2 = 0,
 800227e:	2300      	movs	r3, #0
 8002280:	677b      	str	r3, [r7, #116]	; 0x74
 8002282:	2300      	movs	r3, #0
 8002284:	673b      	str	r3, [r7, #112]	; 0x70
      pressindex1 = 0, pressindex2 = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	66fb      	str	r3, [r7, #108]	; 0x6c
 800228a:	2300      	movs	r3, #0
 800228c:	66bb      	str	r3, [r7, #104]	; 0x68

  sAcisIgnTable * table = NULL;
 800228e:	2300      	movs	r3, #0
 8002290:	667b      	str	r3, [r7, #100]	; 0x64
  int table_num = table_current;
 8002292:	4b77      	ldr	r3, [pc, #476]	; (8002470 <LearnIgnition+0x280>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	627b      	str	r3, [r7, #36]	; 0x24

  if(table_num < acis_config.tables_count || table_num < TABLE_SETUPS_MAX)
 8002298:	4b76      	ldr	r3, [pc, #472]	; (8002474 <LearnIgnition+0x284>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229e:	429a      	cmp	r2, r3
 80022a0:	db02      	blt.n	80022a8 <LearnIgnition+0xb8>
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	dc08      	bgt.n	80022ba <LearnIgnition+0xca>
    table = &acis_config.tables[table_num];
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	f640 426c 	movw	r2, #3180	; 0xc6c
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	33e0      	adds	r3, #224	; 0xe0
 80022b4:	4a6f      	ldr	r2, [pc, #444]	; (8002474 <LearnIgnition+0x284>)
 80022b6:	4413      	add	r3, r2
 80022b8:	667b      	str	r3, [r7, #100]	; 0x64

  if(rpm > 100.0f)
 80022ba:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80022be:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002478 <LearnIgnition+0x288>
 80022c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ca:	dd06      	ble.n	80022da <LearnIgnition+0xea>
  {
    isInitial = 0;
 80022cc:	4b6b      	ldr	r3, [pc, #428]	; (800247c <LearnIgnition+0x28c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
    lastRotated = now;
 80022d2:	4a6b      	ldr	r2, [pc, #428]	; (8002480 <LearnIgnition+0x290>)
 80022d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	e018      	b.n	800230c <LearnIgnition+0x11c>
  }
  else if(rpm < 10.0f)
 80022da:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80022de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ea:	d50f      	bpl.n	800230c <LearnIgnition+0x11c>
  {
    lastAccepted = now;
 80022ec:	4a65      	ldr	r2, [pc, #404]	; (8002484 <LearnIgnition+0x294>)
 80022ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f0:	6013      	str	r3, [r2, #0]
    if(DelayDiff(now, lastRotated) < INITIAL_TIMEOUT)
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <LearnIgnition+0x290>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4619      	mov	r1, r3
 80022f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80022fa:	f005 fd73 	bl	8007de4 <DelayDiff>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b61      	ldr	r3, [pc, #388]	; (8002488 <LearnIgnition+0x298>)
 8002302:	429a      	cmp	r2, r3
 8002304:	d802      	bhi.n	800230c <LearnIgnition+0x11c>
    {
      isInitial = 1;
 8002306:	4b5d      	ldr	r3, [pc, #372]	; (800247c <LearnIgnition+0x28c>)
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
    }
  }

  float timediff = DelayDiff(now, lastAccepted);
 800230c:	4b5d      	ldr	r3, [pc, #372]	; (8002484 <LearnIgnition+0x294>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002314:	f005 fd66 	bl	8007de4 <DelayDiff>
 8002318:	ee07 0a90 	vmov	s15, r0
 800231c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002320:	edc7 7a08 	vstr	s15, [r7, #32]
  if(timediff < 10000)
 8002324:	edd7 7a08 	vldr	s15, [r7, #32]
 8002328:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800248c <LearnIgnition+0x29c>
 800232c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002334:	f100 85a3 	bmi.w	8002e7e <LearnIgnition+0xc8e>
    return;

  float accept_coff = timediff / 10000000.0f;
 8002338:	ed97 7a08 	vldr	s14, [r7, #32]
 800233c:	eddf 6a54 	vldr	s13, [pc, #336]	; 8002490 <LearnIgnition+0x2a0>
 8002340:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002344:	edc7 7a07 	vstr	s15, [r7, #28]
  float accept_coff_inv = 1.0f - accept_coff;
 8002348:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800234c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002354:	edc7 7a06 	vstr	s15, [r7, #24]
  lastAccepted = now;
 8002358:	4a4a      	ldr	r2, [pc, #296]	; (8002484 <LearnIgnition+0x294>)
 800235a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800235c:	6013      	str	r3, [r2, #0]

  if(table)
 800235e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 858f 	beq.w	8002e84 <LearnIgnition+0xc94>
  {
    if(!isInitial)
 8002366:	4b45      	ldr	r3, [pc, #276]	; (800247c <LearnIgnition+0x28c>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 858a 	bne.w	8002e84 <LearnIgnition+0xc94>
    {
      if(isIdle && table->idles_count > 0)
 8002370:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 8145 	beq.w	8002604 <LearnIgnition+0x414>
 800237a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f340 8140 	ble.w	8002604 <LearnIgnition+0x414>
      {
        if(table->idles_count == 1)
 8002384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d104      	bne.n	8002396 <LearnIgnition+0x1a6>
          angle = table->idle_ignitions[0];
 800238c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	643b      	str	r3, [r7, #64]	; 0x40
        if(table->idles_count == 1)
 8002392:	f000 bd76 	b.w	8002e82 <LearnIgnition+0xc92>
        else
        {
          if(rpm <= table->idle_rotates[0])
 8002396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002398:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800239c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80023a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a8:	d803      	bhi.n	80023b2 <LearnIgnition+0x1c2>
          {
            angle = table->idle_ignitions[0];
 80023aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	643b      	str	r3, [r7, #64]	; 0x40
 80023b0:	e080      	b.n	80024b4 <LearnIgnition+0x2c4>
          }
          else if(rpm >= table->idle_rotates[table->rotates_count-1])
 80023b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023b4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80023b8:	3b01      	subs	r3, #1
 80023ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80023bc:	3320      	adds	r3, #32
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80023ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d2:	db18      	blt.n	8002406 <LearnIgnition+0x216>
          {
            rpmindex1 = table->idles_count-2;
 80023d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	3b02      	subs	r3, #2
 80023da:	677b      	str	r3, [r7, #116]	; 0x74
            rpmindex2 = table->idles_count-1;
 80023dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	673b      	str	r3, [r7, #112]	; 0x70
            temprpm1 = table->idle_rotates[rpmindex1];
 80023e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80023e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023e8:	3320      	adds	r3, #32
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            temprpm2 = table->idle_rotates[rpmindex2];
 80023f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80023f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023f8:	3320      	adds	r3, #32
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002404:	e056      	b.n	80024b4 <LearnIgnition+0x2c4>
          }
          else
          {
            for(int i = 1; i < table->idles_count; i++)
 8002406:	2301      	movs	r3, #1
 8002408:	663b      	str	r3, [r7, #96]	; 0x60
 800240a:	e04e      	b.n	80024aa <LearnIgnition+0x2ba>
            {
              temprpm1 = table->idle_rotates[i-1];
 800240c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800240e:	3b01      	subs	r3, #1
 8002410:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002412:	3320      	adds	r3, #32
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              temprpm2 = table->idle_rotates[i];
 800241e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002420:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002422:	3320      	adds	r3, #32
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
              if(temprpm1 < rpm && temprpm2 > rpm)
 800242e:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002432:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002436:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243e:	d529      	bpl.n	8002494 <LearnIgnition+0x2a4>
 8002440:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002444:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002448:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800244c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002450:	dd20      	ble.n	8002494 <LearnIgnition+0x2a4>
              {
                rpmindex1 = i-1;
 8002452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002454:	3b01      	subs	r3, #1
 8002456:	677b      	str	r3, [r7, #116]	; 0x74
                rpmindex2 = i;
 8002458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800245a:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 800245c:	e02a      	b.n	80024b4 <LearnIgnition+0x2c4>
 800245e:	bf00      	nop
 8002460:	20011920 	.word	0x20011920
 8002464:	20011918 	.word	0x20011918
 8002468:	40020800 	.word	0x40020800
 800246c:	40000c00 	.word	0x40000c00
 8002470:	20011930 	.word	0x20011930
 8002474:	20021480 	.word	0x20021480
 8002478:	42c80000 	.word	0x42c80000
 800247c:	200104ac 	.word	0x200104ac
 8002480:	200104b0 	.word	0x200104b0
 8002484:	20021100 	.word	0x20021100
 8002488:	0001869f 	.word	0x0001869f
 800248c:	461c4000 	.word	0x461c4000
 8002490:	4b189680 	.word	0x4b189680
              }
              temprpm1 = 0.0f;
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              temprpm2 = 0.0f;
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for(int i = 1; i < table->idles_count; i++)
 80024a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024a6:	3301      	adds	r3, #1
 80024a8:	663b      	str	r3, [r7, #96]	; 0x60
 80024aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024b0:	429a      	cmp	r2, r3
 80024b2:	dbab      	blt.n	800240c <LearnIgnition+0x21c>
            }
          }
          if(temprpm1 != 0.0f || temprpm2 != 0.0f)
 80024b4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80024b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c0:	d107      	bne.n	80024d2 <LearnIgnition+0x2e2>
 80024c2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80024c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ce:	f000 84d8 	beq.w	8002e82 <LearnIgnition+0xc92>
          {
            tempign1 = table->idle_ignitions[rpmindex1];
 80024d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80024d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d6:	3308      	adds	r3, #8
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	63fb      	str	r3, [r7, #60]	; 0x3c
            tempign2 = table->idle_ignitions[rpmindex2];
 80024e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80024e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024e4:	3308      	adds	r3, #8
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	63bb      	str	r3, [r7, #56]	; 0x38
            if(tempign1 != tempign2)
 80024ee:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80024f2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80024f6:	eeb4 7a67 	vcmp.f32	s14, s15
 80024fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fe:	d05f      	beq.n	80025c0 <LearnIgnition+0x3d0>
            {
              mult = (rpm - temprpm1) / (temprpm2 - temprpm1);
 8002500:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002504:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002508:	ee77 6a67 	vsub.f32	s13, s14, s15
 800250c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002510:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002514:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800251c:	edc7 7a05 	vstr	s15, [r7, #20]
              angle = (tempign2 - tempign1) * mult + tempign1;
 8002520:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002524:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002528:	ee37 7a67 	vsub.f32	s14, s14, s15
 800252c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002534:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 8002540:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002544:	edd7 7a06 	vldr	s15, [r7, #24]
 8002548:	ee27 7a27 	vmul.f32	s14, s14, s15
 800254c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002550:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800255c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
              diff = angle_needed - angle;
 8002560:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002564:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800256c:	edc7 7a04 	vstr	s15, [r7, #16]

              table->idle_ignitions[rpmindex1] = tempign1 + diff * (1.0f - mult);
 8002570:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002574:	edd7 7a05 	vldr	s15, [r7, #20]
 8002578:	ee37 7a67 	vsub.f32	s14, s14, s15
 800257c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002584:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800258c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800258e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002590:	3308      	adds	r3, #8
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	edc3 7a00 	vstr	s15, [r3]
              table->idle_ignitions[rpmindex2] = tempign2 + diff * mult;
 800259a:	ed97 7a04 	vldr	s14, [r7, #16]
 800259e:	edd7 7a05 	vldr	s15, [r7, #20]
 80025a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025a6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80025aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80025b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025b2:	3308      	adds	r3, #8
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	edc3 7a00 	vstr	s15, [r3]
        if(table->idles_count == 1)
 80025bc:	f000 bc61 	b.w	8002e82 <LearnIgnition+0xc92>
            }
            else
            {
              angle = tempign1;
 80025c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c2:	643b      	str	r3, [r7, #64]	; 0x40
              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 80025c4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80025c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80025cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80025d4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80025d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

              table->idle_ignitions[rpmindex1] = angle_needed;
 80025e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80025e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e8:	3308      	adds	r3, #8
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80025f0:	601a      	str	r2, [r3, #0]
              table->idle_ignitions[rpmindex2] = angle_needed;
 80025f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80025f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025f6:	3308      	adds	r3, #8
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80025fe:	601a      	str	r2, [r3, #0]
        if(table->idles_count == 1)
 8002600:	f000 bc3f 	b.w	8002e82 <LearnIgnition+0xc92>

        }
      }
      else
      {
        if(table->pressures_count != 0 && table->rotates_count != 0)
 8002604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 843a 	beq.w	8002e84 <LearnIgnition+0xc94>
 8002610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002612:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8434 	beq.w	8002e84 <LearnIgnition+0xc94>
        {
          if(table->pressures_count == 1)
 800261c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800261e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002622:	2b01      	cmp	r3, #1
 8002624:	d10c      	bne.n	8002640 <LearnIgnition+0x450>
          {
            pressindex1 = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	66fb      	str	r3, [r7, #108]	; 0x6c
            pressindex2 = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	66bb      	str	r3, [r7, #104]	; 0x68
            temppress1 = table->pressures[0];
 800262e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002630:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002634:	67fb      	str	r3, [r7, #124]	; 0x7c
            temppress2 = table->pressures[0];
 8002636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002638:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800263c:	67bb      	str	r3, [r7, #120]	; 0x78
 800263e:	e086      	b.n	800274e <LearnIgnition+0x55e>
          }
          else if(pressure <= table->pressures[0])
 8002640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002642:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8002646:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800264a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800264e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002652:	d814      	bhi.n	800267e <LearnIgnition+0x48e>
          {
            pressindex1 = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	66fb      	str	r3, [r7, #108]	; 0x6c
            pressindex2 = 1;
 8002658:	2301      	movs	r3, #1
 800265a:	66bb      	str	r3, [r7, #104]	; 0x68
            temppress1 = table->pressures[pressindex1];
 800265c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800265e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002660:	3338      	adds	r3, #56	; 0x38
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	3304      	adds	r3, #4
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	67fb      	str	r3, [r7, #124]	; 0x7c
            temppress2 = table->pressures[pressindex2];
 800266c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800266e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002670:	3338      	adds	r3, #56	; 0x38
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	3304      	adds	r3, #4
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	67bb      	str	r3, [r7, #120]	; 0x78
 800267c:	e067      	b.n	800274e <LearnIgnition+0x55e>
          }
          else if(pressure >= table->pressures[table->pressures_count - 1])
 800267e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002684:	3b01      	subs	r3, #1
 8002686:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002688:	3338      	adds	r3, #56	; 0x38
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	3304      	adds	r3, #4
 8002690:	edd3 7a00 	vldr	s15, [r3]
 8002694:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002698:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800269c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a0:	db1a      	blt.n	80026d8 <LearnIgnition+0x4e8>
          {
            pressindex1 = table->pressures_count - 2;
 80026a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a8:	3b02      	subs	r3, #2
 80026aa:	66fb      	str	r3, [r7, #108]	; 0x6c
            pressindex2 = table->pressures_count - 1;
 80026ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b2:	3b01      	subs	r3, #1
 80026b4:	66bb      	str	r3, [r7, #104]	; 0x68
            temppress1 = table->pressures[pressindex1];
 80026b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80026b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ba:	3338      	adds	r3, #56	; 0x38
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	3304      	adds	r3, #4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	67fb      	str	r3, [r7, #124]	; 0x7c
            temppress2 = table->pressures[pressindex2];
 80026c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80026c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ca:	3338      	adds	r3, #56	; 0x38
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	3304      	adds	r3, #4
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80026d6:	e03a      	b.n	800274e <LearnIgnition+0x55e>
          }
          else
          {
            for(int i = 1; i < table->pressures_count; i++)
 80026d8:	2301      	movs	r3, #1
 80026da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026dc:	e031      	b.n	8002742 <LearnIgnition+0x552>
            {
              temppress1 = table->pressures[i-1];
 80026de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e0:	3b01      	subs	r3, #1
 80026e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80026e4:	3338      	adds	r3, #56	; 0x38
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	3304      	adds	r3, #4
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	67fb      	str	r3, [r7, #124]	; 0x7c
              temppress2 = table->pressures[i];
 80026f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80026f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f4:	3338      	adds	r3, #56	; 0x38
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	3304      	adds	r3, #4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	67bb      	str	r3, [r7, #120]	; 0x78
              if(temppress1 < pressure && temppress2 > pressure)
 8002700:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002704:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002708:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800270c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002710:	d50e      	bpl.n	8002730 <LearnIgnition+0x540>
 8002712:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002716:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800271a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800271e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002722:	dd05      	ble.n	8002730 <LearnIgnition+0x540>
              {
                pressindex1 = i-1;
 8002724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002726:	3b01      	subs	r3, #1
 8002728:	66fb      	str	r3, [r7, #108]	; 0x6c
                pressindex2 = i;
 800272a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800272c:	66bb      	str	r3, [r7, #104]	; 0x68
                break;
 800272e:	e00e      	b.n	800274e <LearnIgnition+0x55e>
              }
              temppress1 = 0.0f;
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	67fb      	str	r3, [r7, #124]	; 0x7c
              temppress2 = 0.0f;
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	67bb      	str	r3, [r7, #120]	; 0x78
            for(int i = 1; i < table->pressures_count; i++)
 800273c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800273e:	3301      	adds	r3, #1
 8002740:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002742:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002748:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800274a:	429a      	cmp	r2, r3
 800274c:	dbc7      	blt.n	80026de <LearnIgnition+0x4ee>
            }
          }

          if(table->rotates_count == 1)
 800274e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002750:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002754:	2b01      	cmp	r3, #1
 8002756:	d10e      	bne.n	8002776 <LearnIgnition+0x586>
          {
            rpmindex1 = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	677b      	str	r3, [r7, #116]	; 0x74
            rpmindex2 = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	673b      	str	r3, [r7, #112]	; 0x70
            temprpm1 = table->rotates[0];
 8002760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002762:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002766:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            temprpm2 = table->rotates[0];
 800276a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800276c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002770:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002774:	e087      	b.n	8002886 <LearnIgnition+0x696>
          }
          else if(rpm <= table->rotates[0])
 8002776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002778:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800277c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002788:	d814      	bhi.n	80027b4 <LearnIgnition+0x5c4>
          {
            rpmindex1 = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	677b      	str	r3, [r7, #116]	; 0x74
            rpmindex2 = 1;
 800278e:	2301      	movs	r3, #1
 8002790:	673b      	str	r3, [r7, #112]	; 0x70
            temprpm1 = table->rotates[rpmindex1];
 8002792:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002796:	3352      	adds	r3, #82	; 0x52
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            temprpm2 = table->rotates[rpmindex2];
 80027a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027a6:	3352      	adds	r3, #82	; 0x52
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027b2:	e068      	b.n	8002886 <LearnIgnition+0x696>
          }
          else if(rpm >= table->rotates[table->rotates_count - 1])
 80027b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027b6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80027ba:	3b01      	subs	r3, #1
 80027bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027be:	3352      	adds	r3, #82	; 0x52
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	edd3 7a00 	vldr	s15, [r3]
 80027c8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80027cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d4:	db1a      	blt.n	800280c <LearnIgnition+0x61c>
          {
            rpmindex1 = table->rotates_count - 2;
 80027d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027d8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80027dc:	3b02      	subs	r3, #2
 80027de:	677b      	str	r3, [r7, #116]	; 0x74
            rpmindex2 = table->rotates_count - 1;
 80027e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027e2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80027e6:	3b01      	subs	r3, #1
 80027e8:	673b      	str	r3, [r7, #112]	; 0x70
            temprpm1 = table->rotates[rpmindex1];
 80027ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ee:	3352      	adds	r3, #82	; 0x52
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            temprpm2 = table->rotates[rpmindex2];
 80027fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027fe:	3352      	adds	r3, #82	; 0x52
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800280a:	e03c      	b.n	8002886 <LearnIgnition+0x696>
          }
          else
          {
            for(int i = 1; i < table->rotates_count; i++)
 800280c:	2301      	movs	r3, #1
 800280e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002810:	e033      	b.n	800287a <LearnIgnition+0x68a>
            {
              temprpm1 = table->rotates[i-1];
 8002812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002814:	3b01      	subs	r3, #1
 8002816:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002818:	3352      	adds	r3, #82	; 0x52
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              temprpm2 = table->rotates[i];
 8002824:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002828:	3352      	adds	r3, #82	; 0x52
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
              if(temprpm1 < rpm && temprpm2 > rpm)
 8002834:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002838:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800283c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002844:	d50e      	bpl.n	8002864 <LearnIgnition+0x674>
 8002846:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800284a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800284e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002856:	dd05      	ble.n	8002864 <LearnIgnition+0x674>
              {
                rpmindex1 = i-1;
 8002858:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800285a:	3b01      	subs	r3, #1
 800285c:	677b      	str	r3, [r7, #116]	; 0x74
                rpmindex2 = i;
 800285e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002860:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 8002862:	e010      	b.n	8002886 <LearnIgnition+0x696>
              }
              temprpm1 = 0.0f;
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
              temprpm2 = 0.0f;
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for(int i = 1; i < table->rotates_count; i++)
 8002874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002876:	3301      	adds	r3, #1
 8002878:	65bb      	str	r3, [r7, #88]	; 0x58
 800287a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800287c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002880:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002882:	429a      	cmp	r2, r3
 8002884:	dbc5      	blt.n	8002812 <LearnIgnition+0x622>
            }
          }

          if((temprpm1 != 0.0f || temprpm2 != 0.0f) && (temppress1 != 0.0f || temppress2 != 0.0f))
 8002886:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800288a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002892:	d107      	bne.n	80028a4 <LearnIgnition+0x6b4>
 8002894:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002898:	eef5 7a40 	vcmp.f32	s15, #0.0
 800289c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a0:	f000 82f0 	beq.w	8002e84 <LearnIgnition+0xc94>
 80028a4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80028a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b0:	d107      	bne.n	80028c2 <LearnIgnition+0x6d2>
 80028b2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80028b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028be:	f000 82e1 	beq.w	8002e84 <LearnIgnition+0xc94>
          {
            tempign11 = table->ignitions[pressindex1][rpmindex1];
 80028c2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80028c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80028d0:	4413      	add	r3, r2
 80028d2:	336a      	adds	r3, #106	; 0x6a
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	637b      	str	r3, [r7, #52]	; 0x34
            tempign12 = table->ignitions[pressindex1][rpmindex2];
 80028dc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80028de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80028ea:	4413      	add	r3, r2
 80028ec:	336a      	adds	r3, #106	; 0x6a
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30
            tempign21 = table->ignitions[pressindex2][rpmindex1];
 80028f6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80028f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80028fa:	4613      	mov	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002904:	4413      	add	r3, r2
 8002906:	336a      	adds	r3, #106	; 0x6a
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
            tempign22 = table->ignitions[pressindex2][rpmindex2];
 8002910:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002912:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800291e:	4413      	add	r3, r2
 8002920:	336a      	adds	r3, #106	; 0x6a
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28

            if(temprpm2 != temprpm1 && temppress1 != temppress2)
 800292a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800292e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002932:	eeb4 7a67 	vcmp.f32	s14, s15
 8002936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293a:	f000 80ef 	beq.w	8002b1c <LearnIgnition+0x92c>
 800293e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002942:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002946:	eeb4 7a67 	vcmp.f32	s14, s15
 800294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294e:	f000 80e5 	beq.w	8002b1c <LearnIgnition+0x92c>
            {
              mult_rpm = (rpm - temprpm1) / (temprpm2 - temprpm1);
 8002952:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002956:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800295a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800295e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002962:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002966:	ee37 7a67 	vsub.f32	s14, s14, s15
 800296a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800296e:	edc7 7a03 	vstr	s15, [r7, #12]
              mult_press = (pressure - temppress1) / (temppress2 - temppress1);
 8002972:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002976:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800297a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800297e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002982:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002986:	ee37 7a67 	vsub.f32	s14, s14, s15
 800298a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800298e:	edc7 7a02 	vstr	s15, [r7, #8]

              angle_1 = (tempign12 - tempign11) * mult_rpm + tempign11;
 8002992:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002996:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800299a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800299e:	edd7 7a03 	vldr	s15, [r7, #12]
 80029a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80029aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ae:	edc7 7a01 	vstr	s15, [r7, #4]
              angle_2 = (tempign22 - tempign21) * mult_rpm + tempign21;
 80029b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80029b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80029ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029be:	edd7 7a03 	vldr	s15, [r7, #12]
 80029c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80029ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ce:	edc7 7a00 	vstr	s15, [r7]

              angle = (angle_2 - angle_1) * mult_press + angle_1;
 80029d2:	ed97 7a00 	vldr	s14, [r7]
 80029d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80029da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029de:	edd7 7a02 	vldr	s15, [r7, #8]
 80029e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80029ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ee:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 80029f2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80029f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80029fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a02:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
              diff = angle_needed - angle;
 8002a12:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002a16:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1e:	edc7 7a04 	vstr	s15, [r7, #16]

              table->ignitions[pressindex1][rpmindex1] = tempign11 + diff * (1.0f - mult_rpm) * (1.0f - mult_press);
 8002a22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a26:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a3e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a46:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002a50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a52:	4613      	mov	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a5c:	4413      	add	r3, r2
 8002a5e:	336a      	adds	r3, #106	; 0x6a
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex1][rpmindex2] = tempign12 + diff * mult_rpm * (1.0f - mult_press);
 8002a68:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a78:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a7c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a84:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a8c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002a8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002a9a:	4413      	add	r3, r2
 8002a9c:	336a      	adds	r3, #106	; 0x6a
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex1] = tempign21 + diff * (1.0f - mult_rpm) * mult_press;
 8002aa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002aaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ab2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aba:	edd7 7a02 	vldr	s15, [r7, #8]
 8002abe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ac2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002acc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ace:	4613      	mov	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ad8:	4413      	add	r3, r2
 8002ada:	336a      	adds	r3, #106	; 0x6a
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex2] = tempign22 + diff * mult_rpm * mult_press;
 8002ae4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ae8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002af0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002af4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002af8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b00:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002b02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002b0e:	4413      	add	r3, r2
 8002b10:	336a      	adds	r3, #106	; 0x6a
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	edc3 7a00 	vstr	s15, [r3]
 8002b1a:	e1b3      	b.n	8002e84 <LearnIgnition+0xc94>

            }
            else if(temprpm2 == temprpm1 && temppress1 != temppress2)
 8002b1c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002b20:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002b24:	eeb4 7a67 	vcmp.f32	s14, s15
 8002b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2c:	f040 80aa 	bne.w	8002c84 <LearnIgnition+0xa94>
 8002b30:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002b34:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002b38:	eeb4 7a67 	vcmp.f32	s14, s15
 8002b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b40:	f000 80a0 	beq.w	8002c84 <LearnIgnition+0xa94>
            {
              mult_press = (pressure - temppress1) / (temppress2 - temppress1);
 8002b44:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002b48:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002b4c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b50:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002b54:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002b58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b60:	edc7 7a02 	vstr	s15, [r7, #8]
              mult_rpm = 1.0f;
 8002b64:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b68:	60fb      	str	r3, [r7, #12]
              angle = (tempign21 - tempign11) * mult_press + tempign11;
 8002b6a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002b6e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002b72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b76:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b86:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 8002b8a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002b8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b9a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002b9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
              diff = angle_needed - angle;
 8002baa:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002bae:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb6:	edc7 7a04 	vstr	s15, [r7, #16]

              table->ignitions[pressindex1][rpmindex1] = tempign11 + diff * (1.0f - mult_press);
 8002bba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002bd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bda:	4613      	mov	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002be4:	4413      	add	r3, r2
 8002be6:	336a      	adds	r3, #106	; 0x6a
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex1][rpmindex2] = tempign12 + diff * (1.0f - mult_press);
 8002bf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c04:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c0c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002c0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002c1a:	4413      	add	r3, r2
 8002c1c:	336a      	adds	r3, #106	; 0x6a
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex1] = tempign21 + diff * mult_press;
 8002c26:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c3a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002c3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c3e:	4613      	mov	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c48:	4413      	add	r3, r2
 8002c4a:	336a      	adds	r3, #106	; 0x6a
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex2] = tempign22 + diff * mult_press;
 8002c54:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c58:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c68:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002c6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002c76:	4413      	add	r3, r2
 8002c78:	336a      	adds	r3, #106	; 0x6a
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	edc3 7a00 	vstr	s15, [r3]
 8002c82:	e0ff      	b.n	8002e84 <LearnIgnition+0xc94>
            }
            else if(temprpm2 != temprpm1 && temppress1 == temppress2)
 8002c84:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002c88:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002c8c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c94:	f000 80aa 	beq.w	8002dec <LearnIgnition+0xbfc>
 8002c98:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002c9c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002ca0:	eeb4 7a67 	vcmp.f32	s14, s15
 8002ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca8:	f040 80a0 	bne.w	8002dec <LearnIgnition+0xbfc>
            {
              mult_rpm = (rpm - temprpm1) / (temprpm2 - temprpm1);
 8002cac:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002cb0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002cb4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002cb8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002cbc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002cc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cc8:	edc7 7a03 	vstr	s15, [r7, #12]
              mult_press = 1.0f;
 8002ccc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002cd0:	60bb      	str	r3, [r7, #8]
              angle = (tempign12 - tempign11) * mult_rpm + tempign11;
 8002cd2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002cd6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002cda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cde:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cee:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 8002cf2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002cf6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d02:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d0e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
              diff = angle_needed - angle;
 8002d12:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002d16:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d1e:	edc7 7a04 	vstr	s15, [r7, #16]

              table->ignitions[pressindex1][rpmindex1] = tempign11 + diff * (1.0f - mult_rpm);
 8002d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d26:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d36:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002d40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d4c:	4413      	add	r3, r2
 8002d4e:	336a      	adds	r3, #106	; 0x6a
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex1][rpmindex2] = tempign12 + diff * mult_rpm;
 8002d58:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d64:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002d6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d70:	4613      	mov	r3, r2
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	4413      	add	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002d7a:	4413      	add	r3, r2
 8002d7c:	336a      	adds	r3, #106	; 0x6a
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex1] = tempign21 + diff * (1.0f - mult_rpm);
 8002d86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d92:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d9a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002da4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002db0:	4413      	add	r3, r2
 8002db2:	336a      	adds	r3, #106	; 0x6a
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	edc3 7a00 	vstr	s15, [r3]
              table->ignitions[pressindex2][rpmindex2] = tempign22 + diff * mult_rpm;
 8002dbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002dc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002dd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002dde:	4413      	add	r3, r2
 8002de0:	336a      	adds	r3, #106	; 0x6a
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	edc3 7a00 	vstr	s15, [r3]
 8002dea:	e04b      	b.n	8002e84 <LearnIgnition+0xc94>
            }
            else
            {
              angle = tempign11;
 8002dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dee:	643b      	str	r3, [r7, #64]	; 0x40
              angle_needed = angle * accept_coff_inv + accept_coff * angle_needed;
 8002df0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002df4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002df8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e00:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002e04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e0c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

              table->ignitions[pressindex1][rpmindex1] = angle_needed;
 8002e10:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002e12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002e1e:	4413      	add	r3, r2
 8002e20:	336a      	adds	r3, #106	; 0x6a
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e28:	601a      	str	r2, [r3, #0]
              table->ignitions[pressindex1][rpmindex2] = angle_needed;
 8002e2a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002e2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002e38:	4413      	add	r3, r2
 8002e3a:	336a      	adds	r3, #106	; 0x6a
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e42:	601a      	str	r2, [r3, #0]
              table->ignitions[pressindex2][rpmindex1] = angle_needed;
 8002e44:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002e46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e48:	4613      	mov	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002e52:	4413      	add	r3, r2
 8002e54:	336a      	adds	r3, #106	; 0x6a
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e5c:	601a      	str	r2, [r3, #0]
              table->ignitions[pressindex2][rpmindex2] = angle_needed;
 8002e5e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002e60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002e6c:	4413      	add	r3, r2
 8002e6e:	336a      	adds	r3, #106	; 0x6a
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	e004      	b.n	8002e84 <LearnIgnition+0xc94>
    return;
 8002e7a:	bf00      	nop
 8002e7c:	e002      	b.n	8002e84 <LearnIgnition+0xc94>
    return;
 8002e7e:	bf00      	nop
 8002e80:	e000      	b.n	8002e84 <LearnIgnition+0xc94>
        if(table->idles_count == 1)
 8002e82:	bf00      	nop
          }
        }
      }
    }
  }
}
 8002e84:	3788      	adds	r7, #136	; 0x88
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop

08002e8c <acis_loop_irq>:

inline void acis_loop_irq(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08e      	sub	sp, #56	; 0x38
 8002e90:	af00      	add	r7, sp, #0
  static uint8_t saturated[2] = { 1,1 };
  static uint8_t ignited[2] = { 1,1 };
  static uint8_t start_ign_state[2] = {0,0};
  static uint8_t start_ign_allow[2] = {0,0};
  static uint32_t start_ign_last[2] = {0,0};
  uint32_t now = Delay_Tick;
 8002e92:	4bcc      	ldr	r3, [pc, #816]	; (80031c4 <acis_loop_irq+0x338>)
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  float angle[2] = { 0.0f, 0.0f };
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
  float anglesbeforeignite[2];
  uint8_t isIgn = HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_RESET;
 8002ea4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ea8:	48c7      	ldr	r0, [pc, #796]	; (80031c8 <acis_loop_irq+0x33c>)
 8002eaa:	f009 fed3 	bl	800cc54 <HAL_GPIO_ReadPin>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  angle[0] = csps_getangle14();
 8002ebe:	f004 fd7d 	bl	80079bc <csps_getangle14>
 8002ec2:	eef0 7a40 	vmov.f32	s15, s0
 8002ec6:	edc7 7a02 	vstr	s15, [r7, #8]
  angle[1] = csps_getangle23from14(angle[0]);
 8002eca:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ece:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed2:	f004 fe35 	bl	8007b40 <csps_getangle23from14>
 8002ed6:	eef0 7a40 	vmov.f32	s15, s0
 8002eda:	edc7 7a03 	vstr	s15, [r7, #12]

  if(!isIgn)
 8002ede:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 8274 	beq.w	80033d0 <acis_loop_irq+0x544>
    return;

  if(acis_config.params.isEconOutAsStrobe)
 8002ee8:	4bb8      	ldr	r3, [pc, #736]	; (80031cc <acis_loop_irq+0x340>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d021      	beq.n	8002f34 <acis_loop_irq+0xa8>
  {
    if(csps_isrotates() && angle[0] > -1.0f && angle[0] < 1.0f)
 8002ef0:	f004 fe92 	bl	8007c18 <csps_isrotates>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d017      	beq.n	8002f2a <acis_loop_irq+0x9e>
 8002efa:	edd7 7a02 	vldr	s15, [r7, #8]
 8002efe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0a:	dd0e      	ble.n	8002f2a <acis_loop_irq+0x9e>
 8002f0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1c:	d505      	bpl.n	8002f2a <acis_loop_irq+0x9e>
    {
      HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_SET);
 8002f1e:	2201      	movs	r2, #1
 8002f20:	2104      	movs	r1, #4
 8002f22:	48ab      	ldr	r0, [pc, #684]	; (80031d0 <acis_loop_irq+0x344>)
 8002f24:	f009 feae 	bl	800cc84 <HAL_GPIO_WritePin>
 8002f28:	e004      	b.n	8002f34 <acis_loop_irq+0xa8>
    }
    else
    {
      HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_RESET);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2104      	movs	r1, #4
 8002f2e:	48a8      	ldr	r0, [pc, #672]	; (80031d0 <acis_loop_irq+0x344>)
 8002f30:	f009 fea8 	bl	800cc84 <HAL_GPIO_WritePin>
    }
  }

  if(acis_config.params.isIgnitionByHall)
 8002f34:	4ba5      	ldr	r3, [pc, #660]	; (80031cc <acis_loop_irq+0x340>)
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f040 824b 	bne.w	80033d4 <acis_loop_irq+0x548>
    return;

  float rpm = csps_getrpm();
 8002f3e:	f004 fe33 	bl	8007ba8 <csps_getrpm>
 8002f42:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  float uspa = csps_getuspa();
 8002f46:	f004 fe4b 	bl	8007be0 <csps_getuspa>
 8002f4a:	ed87 0a08 	vstr	s0, [r7, #32]
  float period = csps_getperiod();
 8002f4e:	f004 fe55 	bl	8007bfc <csps_getperiod>
 8002f52:	ed87 0a07 	vstr	s0, [r7, #28]
  float time_sat = IGN_SATURATION;
 8002f56:	4b9f      	ldr	r3, [pc, #636]	; (80031d4 <acis_loop_irq+0x348>)
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34

  if(rpm < 400) time_sat = 7000;
 8002f5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f5e:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80031d8 <acis_loop_irq+0x34c>
 8002f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6a:	d502      	bpl.n	8002f72 <acis_loop_irq+0xe6>
 8002f6c:	4b9b      	ldr	r3, [pc, #620]	; (80031dc <acis_loop_irq+0x350>)
 8002f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f70:	e02e      	b.n	8002fd0 <acis_loop_irq+0x144>
  else if(rpm < 700) time_sat = 6000;
 8002f72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f76:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80031e0 <acis_loop_irq+0x354>
 8002f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f82:	d502      	bpl.n	8002f8a <acis_loop_irq+0xfe>
 8002f84:	4b97      	ldr	r3, [pc, #604]	; (80031e4 <acis_loop_irq+0x358>)
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
 8002f88:	e022      	b.n	8002fd0 <acis_loop_irq+0x144>
  else if(rpm < 1000) time_sat = 5000;
 8002f8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f8e:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80031e8 <acis_loop_irq+0x35c>
 8002f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9a:	d502      	bpl.n	8002fa2 <acis_loop_irq+0x116>
 8002f9c:	4b93      	ldr	r3, [pc, #588]	; (80031ec <acis_loop_irq+0x360>)
 8002f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa0:	e016      	b.n	8002fd0 <acis_loop_irq+0x144>
  else if(rpm < 1300) time_sat = 4000;
 8002fa2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002fa6:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80031f0 <acis_loop_irq+0x364>
 8002faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb2:	d502      	bpl.n	8002fba <acis_loop_irq+0x12e>
 8002fb4:	4b8f      	ldr	r3, [pc, #572]	; (80031f4 <acis_loop_irq+0x368>)
 8002fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fb8:	e00a      	b.n	8002fd0 <acis_loop_irq+0x144>
  else if(rpm < 1500) time_sat = 3000;
 8002fba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002fbe:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80031f8 <acis_loop_irq+0x36c>
 8002fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fca:	d501      	bpl.n	8002fd0 <acis_loop_irq+0x144>
 8002fcc:	4b8b      	ldr	r3, [pc, #556]	; (80031fc <acis_loop_irq+0x370>)
 8002fce:	637b      	str	r3, [r7, #52]	; 0x34
  float ignite = 0;
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]

  float found = csps_isfound();
 8002fd6:	f004 fe2b 	bl	8007c30 <csps_isfound>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	ee07 3a90 	vmov	s15, r3
 8002fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe4:	edc7 7a05 	vstr	s15, [r7, #20]


  if(found)
 8002fe8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff4:	f000 81e7 	beq.w	80033c6 <acis_loop_irq+0x53a>
  {
    if(period < IGN_SATURATION + IGN_PULSE)
 8002ff8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ffc:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8003200 <acis_loop_irq+0x374>
 8003000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003008:	d507      	bpl.n	800301a <acis_loop_irq+0x18e>
    {
      time_sat = period * ((float)IGN_SATURATION / (float)(IGN_SATURATION + IGN_PULSE));
 800300a:	edd7 7a07 	vldr	s15, [r7, #28]
 800300e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8003204 <acis_loop_irq+0x378>
 8003012:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003016:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    }

    float saturate = time_sat / uspa;
 800301a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800301e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003026:	edc7 7a04 	vstr	s15, [r7, #16]

    ignite = angle_ignite;
 800302a:	4b77      	ldr	r3, [pc, #476]	; (8003208 <acis_loop_irq+0x37c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	61bb      	str	r3, [r7, #24]
    angle_saturate = saturate;
 8003030:	4a76      	ldr	r2, [pc, #472]	; (800320c <acis_loop_irq+0x380>)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	6013      	str	r3, [r2, #0]

    angle_time = ignite * uspa;
 8003036:	ed97 7a06 	vldr	s14, [r7, #24]
 800303a:	edd7 7a08 	vldr	s15, [r7, #32]
 800303e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003042:	4b73      	ldr	r3, [pc, #460]	; (8003210 <acis_loop_irq+0x384>)
 8003044:	edc3 7a00 	vstr	s15, [r3]

    for(int i = 0; i < 2; i++)
 8003048:	2300      	movs	r3, #0
 800304a:	633b      	str	r3, [r7, #48]	; 0x30
 800304c:	e1b6      	b.n	80033bc <acis_loop_irq+0x530>
    {

      if(angle[i] < -ignite)
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003056:	4413      	add	r3, r2
 8003058:	3b30      	subs	r3, #48	; 0x30
 800305a:	ed93 7a00 	vldr	s14, [r3]
 800305e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003062:	eef1 7a67 	vneg.f32	s15, s15
 8003066:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800306a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306e:	d516      	bpl.n	800309e <acis_loop_irq+0x212>
        anglesbeforeignite[i] = -angle[i] - ignite;
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003078:	4413      	add	r3, r2
 800307a:	3b30      	subs	r3, #48	; 0x30
 800307c:	edd3 7a00 	vldr	s15, [r3]
 8003080:	eeb1 7a67 	vneg.f32	s14, s15
 8003084:	edd7 7a06 	vldr	s15, [r7, #24]
 8003088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003094:	4413      	add	r3, r2
 8003096:	3b38      	subs	r3, #56	; 0x38
 8003098:	edc3 7a00 	vstr	s15, [r3]
 800309c:	e017      	b.n	80030ce <acis_loop_irq+0x242>
      else
        anglesbeforeignite[i] = 360.0f - angle[i] - ignite;
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030a6:	4413      	add	r3, r2
 80030a8:	3b30      	subs	r3, #48	; 0x30
 80030aa:	edd3 7a00 	vldr	s15, [r3]
 80030ae:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003214 <acis_loop_irq+0x388>
 80030b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80030ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030c6:	4413      	add	r3, r2
 80030c8:	3b38      	subs	r3, #56	; 0x38
 80030ca:	edc3 7a00 	vstr	s15, [r3]

      if(anglesbeforeignite[i] - oldanglesbeforeignite[i] > 0.0f && anglesbeforeignite[i] - oldanglesbeforeignite[i] < 180.0f)
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030d6:	4413      	add	r3, r2
 80030d8:	3b38      	subs	r3, #56	; 0x38
 80030da:	ed93 7a00 	vldr	s14, [r3]
 80030de:	4a4e      	ldr	r2, [pc, #312]	; (8003218 <acis_loop_irq+0x38c>)
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f6:	dd22      	ble.n	800313e <acis_loop_irq+0x2b2>
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003100:	4413      	add	r3, r2
 8003102:	3b38      	subs	r3, #56	; 0x38
 8003104:	ed93 7a00 	vldr	s14, [r3]
 8003108:	4a43      	ldr	r2, [pc, #268]	; (8003218 <acis_loop_irq+0x38c>)
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	edd3 7a00 	vldr	s15, [r3]
 8003114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003118:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800321c <acis_loop_irq+0x390>
 800311c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003124:	d50b      	bpl.n	800313e <acis_loop_irq+0x2b2>
        anglesbeforeignite[i] = oldanglesbeforeignite[i];
 8003126:	4a3c      	ldr	r2, [pc, #240]	; (8003218 <acis_loop_irq+0x38c>)
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003138:	440b      	add	r3, r1
 800313a:	3b38      	subs	r3, #56	; 0x38
 800313c:	601a      	str	r2, [r3, #0]

      if(rpm < 350.0f && start_ign_allow[i] && angle[i] < 80.0f)
 800313e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003142:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003220 <acis_loop_irq+0x394>
 8003146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800314a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314e:	f140 8093 	bpl.w	8003278 <acis_loop_irq+0x3ec>
 8003152:	4a34      	ldr	r2, [pc, #208]	; (8003224 <acis_loop_irq+0x398>)
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	4413      	add	r3, r2
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 808c 	beq.w	8003278 <acis_loop_irq+0x3ec>
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003168:	4413      	add	r3, r2
 800316a:	3b30      	subs	r3, #48	; 0x30
 800316c:	edd3 7a00 	vldr	s15, [r3]
 8003170:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003228 <acis_loop_irq+0x39c>
 8003174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317c:	d57c      	bpl.n	8003278 <acis_loop_irq+0x3ec>
      {
        if(start_ign_state[i] && DelayDiff(now, start_ign_last[i]) > 4000)
 800317e:	4a2b      	ldr	r2, [pc, #172]	; (800322c <acis_loop_irq+0x3a0>)
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	4413      	add	r3, r2
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d054      	beq.n	8003234 <acis_loop_irq+0x3a8>
 800318a:	4a29      	ldr	r2, [pc, #164]	; (8003230 <acis_loop_irq+0x3a4>)
 800318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003192:	4619      	mov	r1, r3
 8003194:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003196:	f004 fe25 	bl	8007de4 <DelayDiff>
 800319a:	4603      	mov	r3, r0
 800319c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80031a0:	d948      	bls.n	8003234 <acis_loop_irq+0x3a8>
        {
          acis_ignite(i);
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe f856 	bl	8001258 <acis_ignite>
          start_ign_state[i] = 0;
 80031ac:	4a1f      	ldr	r2, [pc, #124]	; (800322c <acis_loop_irq+0x3a0>)
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	4413      	add	r3, r2
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]
          start_ign_last[i] = now;
 80031b6:	491e      	ldr	r1, [pc, #120]	; (8003230 <acis_loop_irq+0x3a4>)
 80031b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if(start_ign_state[i] && DelayDiff(now, start_ign_last[i]) > 4000)
 80031c0:	e070      	b.n	80032a4 <acis_loop_irq+0x418>
 80031c2:	bf00      	nop
 80031c4:	40000c00 	.word	0x40000c00
 80031c8:	40020000 	.word	0x40020000
 80031cc:	20021480 	.word	0x20021480
 80031d0:	40020c00 	.word	0x40020c00
 80031d4:	44e10000 	.word	0x44e10000
 80031d8:	43c80000 	.word	0x43c80000
 80031dc:	45dac000 	.word	0x45dac000
 80031e0:	442f0000 	.word	0x442f0000
 80031e4:	45bb8000 	.word	0x45bb8000
 80031e8:	447a0000 	.word	0x447a0000
 80031ec:	459c4000 	.word	0x459c4000
 80031f0:	44a28000 	.word	0x44a28000
 80031f4:	457a0000 	.word	0x457a0000
 80031f8:	44bb8000 	.word	0x44bb8000
 80031fc:	453b8000 	.word	0x453b8000
 8003200:	45866000 	.word	0x45866000
 8003204:	3ed65359 	.word	0x3ed65359
 8003208:	20011928 	.word	0x20011928
 800320c:	2001192c 	.word	0x2001192c
 8003210:	20011924 	.word	0x20011924
 8003214:	43b40000 	.word	0x43b40000
 8003218:	20021104 	.word	0x20021104
 800321c:	43340000 	.word	0x43340000
 8003220:	43af0000 	.word	0x43af0000
 8003224:	2002110c 	.word	0x2002110c
 8003228:	42a00000 	.word	0x42a00000
 800322c:	20021110 	.word	0x20021110
 8003230:	20021114 	.word	0x20021114
        }
        else if(!start_ign_state[i] && DelayDiff(now, start_ign_last[i]) > 1000)
 8003234:	4a69      	ldr	r2, [pc, #420]	; (80033dc <acis_loop_irq+0x550>)
 8003236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003238:	4413      	add	r3, r2
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d131      	bne.n	80032a4 <acis_loop_irq+0x418>
 8003240:	4a67      	ldr	r2, [pc, #412]	; (80033e0 <acis_loop_irq+0x554>)
 8003242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003248:	4619      	mov	r1, r3
 800324a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800324c:	f004 fdca 	bl	8007de4 <DelayDiff>
 8003250:	4603      	mov	r3, r0
 8003252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003256:	d925      	bls.n	80032a4 <acis_loop_irq+0x418>
        {
          acis_saturate(i);
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	b2db      	uxtb	r3, r3
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe f80f 	bl	8001280 <acis_saturate>
          start_ign_state[i] = 1;
 8003262:	4a5e      	ldr	r2, [pc, #376]	; (80033dc <acis_loop_irq+0x550>)
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	4413      	add	r3, r2
 8003268:	2201      	movs	r2, #1
 800326a:	701a      	strb	r2, [r3, #0]
          start_ign_last[i] = now;
 800326c:	495c      	ldr	r1, [pc, #368]	; (80033e0 <acis_loop_irq+0x554>)
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if(start_ign_state[i] && DelayDiff(now, start_ign_last[i]) > 4000)
 8003276:	e015      	b.n	80032a4 <acis_loop_irq+0x418>
        }
      }
      else
      {
        if(start_ign_state[i])
 8003278:	4a58      	ldr	r2, [pc, #352]	; (80033dc <acis_loop_irq+0x550>)
 800327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327c:	4413      	add	r3, r2
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d009      	beq.n	8003298 <acis_loop_irq+0x40c>
        {
          start_ign_state[i] = 0;
 8003284:	4a55      	ldr	r2, [pc, #340]	; (80033dc <acis_loop_irq+0x550>)
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	4413      	add	r3, r2
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
          acis_ignite(i);
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	b2db      	uxtb	r3, r3
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd ffe0 	bl	8001258 <acis_ignite>
        }
        start_ign_allow[i] = 0;
 8003298:	4a52      	ldr	r2, [pc, #328]	; (80033e4 <acis_loop_irq+0x558>)
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	4413      	add	r3, r2
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e000      	b.n	80032a6 <acis_loop_irq+0x41a>
        if(start_ign_state[i] && DelayDiff(now, start_ign_last[i]) > 4000)
 80032a4:	bf00      	nop
      }

      if(anglesbeforeignite[i] - saturate < 0.0f)
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032ae:	4413      	add	r3, r2
 80032b0:	3b38      	subs	r3, #56	; 0x38
 80032b2:	ed93 7a00 	vldr	s14, [r3]
 80032b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80032ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c6:	d51a      	bpl.n	80032fe <acis_loop_irq+0x472>
      {
        if(!saturated[i] && !ignited[i])
 80032c8:	4a47      	ldr	r2, [pc, #284]	; (80033e8 <acis_loop_irq+0x55c>)
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	4413      	add	r3, r2
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d114      	bne.n	80032fe <acis_loop_irq+0x472>
 80032d4:	4a45      	ldr	r2, [pc, #276]	; (80033ec <acis_loop_irq+0x560>)
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	4413      	add	r3, r2
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10e      	bne.n	80032fe <acis_loop_irq+0x472>
        {
          saturated[i] = 1;
 80032e0:	4a41      	ldr	r2, [pc, #260]	; (80033e8 <acis_loop_irq+0x55c>)
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	4413      	add	r3, r2
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]
          start_ign_allow[i] = 0;
 80032ea:	4a3e      	ldr	r2, [pc, #248]	; (80033e4 <acis_loop_irq+0x558>)
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	4413      	add	r3, r2
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
          acis_saturate(i);
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fd ffc1 	bl	8001280 <acis_saturate>
        }
      }

      if(oldanglesbeforeignite[i] - anglesbeforeignite[i] < -1.0f)
 80032fe:	4a3c      	ldr	r2, [pc, #240]	; (80033f0 <acis_loop_irq+0x564>)
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	ed93 7a00 	vldr	s14, [r3]
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003312:	4413      	add	r3, r2
 8003314:	3b38      	subs	r3, #56	; 0x38
 8003316:	edd3 7a00 	vldr	s15, [r3]
 800331a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800331e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003322:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332a:	d533      	bpl.n	8003394 <acis_loop_irq+0x508>
      {
        if(!ignited[i] && saturated[i])
 800332c:	4a2f      	ldr	r2, [pc, #188]	; (80033ec <acis_loop_irq+0x560>)
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	4413      	add	r3, r2
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d132      	bne.n	800339e <acis_loop_irq+0x512>
 8003338:	4a2b      	ldr	r2, [pc, #172]	; (80033e8 <acis_loop_irq+0x55c>)
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	4413      	add	r3, r2
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d02c      	beq.n	800339e <acis_loop_irq+0x512>
        {
          ignited[i] = 1;
 8003344:	4a29      	ldr	r2, [pc, #164]	; (80033ec <acis_loop_irq+0x560>)
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	4413      	add	r3, r2
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
          saturated[i] = 0;
 800334e:	4a26      	ldr	r2, [pc, #152]	; (80033e8 <acis_loop_irq+0x55c>)
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	4413      	add	r3, r2
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
          acis_ignite(i);
 8003358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335a:	b2db      	uxtb	r3, r3
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd ff7b 	bl	8001258 <acis_ignite>
          if(rpm < 350.0f)
 8003362:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003366:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80033f4 <acis_loop_irq+0x568>
 800336a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800336e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003372:	d514      	bpl.n	800339e <acis_loop_irq+0x512>
          {
            start_ign_last[i] = now;
 8003374:	491a      	ldr	r1, [pc, #104]	; (80033e0 <acis_loop_irq+0x554>)
 8003376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800337a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            start_ign_state[i] = 0;
 800337e:	4a17      	ldr	r2, [pc, #92]	; (80033dc <acis_loop_irq+0x550>)
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	4413      	add	r3, r2
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
            start_ign_allow[i] = 1;
 8003388:	4a16      	ldr	r2, [pc, #88]	; (80033e4 <acis_loop_irq+0x558>)
 800338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338c:	4413      	add	r3, r2
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e004      	b.n	800339e <acis_loop_irq+0x512>
          }
        }
      }
      else ignited[i] = 0;
 8003394:	4a15      	ldr	r2, [pc, #84]	; (80033ec <acis_loop_irq+0x560>)
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	4413      	add	r3, r2
 800339a:	2200      	movs	r2, #0
 800339c:	701a      	strb	r2, [r3, #0]

      oldanglesbeforeignite[i] = anglesbeforeignite[i];
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033a6:	4413      	add	r3, r2
 80033a8:	3b38      	subs	r3, #56	; 0x38
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4910      	ldr	r1, [pc, #64]	; (80033f0 <acis_loop_irq+0x564>)
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 2; i++)
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	3301      	adds	r3, #1
 80033ba:	633b      	str	r3, [r7, #48]	; 0x30
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	2b01      	cmp	r3, #1
 80033c0:	f77f ae45 	ble.w	800304e <acis_loop_irq+0x1c2>
 80033c4:	e007      	b.n	80033d6 <acis_loop_irq+0x54a>
    }
  }
  else
  {
    angle_ignite = 0;
 80033c6:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <acis_loop_irq+0x56c>)
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	e002      	b.n	80033d6 <acis_loop_irq+0x54a>
    return;
 80033d0:	bf00      	nop
 80033d2:	e000      	b.n	80033d6 <acis_loop_irq+0x54a>
    return;
 80033d4:	bf00      	nop
  }
}
 80033d6:	3738      	adds	r7, #56	; 0x38
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20021110 	.word	0x20021110
 80033e0:	20021114 	.word	0x20021114
 80033e4:	2002110c 	.word	0x2002110c
 80033e8:	200104b4 	.word	0x200104b4
 80033ec:	200104b8 	.word	0x200104b8
 80033f0:	20021104 	.word	0x20021104
 80033f4:	43af0000 	.word	0x43af0000
 80033f8:	20011928 	.word	0x20011928

080033fc <acis_loop>:

inline void acis_loop(void)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b091      	sub	sp, #68	; 0x44
 8003400:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef flashstatus = HAL_BUSY;
 8003402:	2302      	movs	r3, #2
 8003404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  static uint8_t sending = 0;
  static uint8_t destination = 0;
  static uint8_t size = 0;
  static uint32_t rpm_last = 0;
  static eValveChannel valve_old = ValveAllClosed;
  uint32_t now = Delay_Tick;
 8003408:	4bac      	ldr	r3, [pc, #688]	; (80036bc <acis_loop+0x2c0>)
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	623b      	str	r3, [r7, #32]
  float rpm = csps_getrpm();
 800340e:	f004 fbcb 	bl	8007ba8 <csps_getrpm>
 8003412:	ed87 0a07 	vstr	s0, [r7, #28]
  float pressure = map_getpressure();
 8003416:	f005 fcbb 	bl	8008d90 <map_getpressure>
 800341a:	ed87 0a06 	vstr	s0, [r7, #24]
  float load = map_getpressure() / 110000.0f * 100.0f;
 800341e:	f005 fcb7 	bl	8008d90 <map_getpressure>
 8003422:	eef0 6a40 	vmov.f32	s13, s0
 8003426:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80036c0 <acis_loop+0x2c4>
 800342a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800342e:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80036c4 <acis_loop+0x2c8>
 8003432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003436:	edc7 7a05 	vstr	s15, [r7, #20]
  float temp;
  float meter_resistance;
  uint32_t voltage_raw = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t temperature_raw = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t isIdle = HAL_GPIO_ReadPin(SENS_ACC_GPIO_Port,SENS_ACC_Pin) == GPIO_PIN_SET;
 8003442:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003446:	48a0      	ldr	r0, [pc, #640]	; (80036c8 <acis_loop+0x2cc>)
 8003448:	f009 fc04 	bl	800cc54 <HAL_GPIO_ReadPin>
 800344c:	4603      	mov	r3, r0
 800344e:	2b01      	cmp	r3, #1
 8003450:	bf0c      	ite	eq
 8003452:	2301      	moveq	r3, #1
 8003454:	2300      	movne	r3, #0
 8003456:	b2db      	uxtb	r3, r3
 8003458:	74fb      	strb	r3, [r7, #19]
  uint8_t isIgn = HAL_GPIO_ReadPin(MCU_IGN_GPIO_Port, MCU_IGN_Pin) == GPIO_PIN_RESET;
 800345a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800345e:	489b      	ldr	r0, [pc, #620]	; (80036cc <acis_loop+0x2d0>)
 8003460:	f009 fbf8 	bl	800cc54 <HAL_GPIO_ReadPin>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	bf0c      	ite	eq
 800346a:	2301      	moveq	r3, #1
 800346c:	2300      	movne	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	74bb      	strb	r3, [r7, #18]
  uint8_t * pnt;
  int8_t status;
  uint8_t table = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  uint8_t fuelsw = switch_fuel_pos;
 8003478:	4b95      	ldr	r3, [pc, #596]	; (80036d0 <acis_loop+0x2d4>)
 800347a:	f993 3000 	ldrsb.w	r3, [r3]
 800347e:	747b      	strb	r3, [r7, #17]
  uint16_t * adc_buf;
  uint32_t adc_size;

  if(rpm_last == 0 || rpm > 10.0f || csps_isrotates()) rpm_last = now;
 8003480:	4b94      	ldr	r3, [pc, #592]	; (80036d4 <acis_loop+0x2d8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00d      	beq.n	80034a4 <acis_loop+0xa8>
 8003488:	edd7 7a07 	vldr	s15, [r7, #28]
 800348c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003490:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003498:	dc04      	bgt.n	80034a4 <acis_loop+0xa8>
 800349a:	f004 fbbd 	bl	8007c18 <csps_isrotates>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <acis_loop+0xae>
 80034a4:	4a8b      	ldr	r2, [pc, #556]	; (80036d4 <acis_loop+0x2d8>)
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	6013      	str	r3, [r2, #0]

  /* =========================== Packets Sending =========================== */
  do
  {
    if(!sending && protGetSize(&fifoSendingQueue) > 4)
 80034aa:	4b8b      	ldr	r3, [pc, #556]	; (80036d8 <acis_loop+0x2dc>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d133      	bne.n	800351a <acis_loop+0x11e>
 80034b2:	488a      	ldr	r0, [pc, #552]	; (80036dc <acis_loop+0x2e0>)
 80034b4:	f007 fda6 	bl	800b004 <protGetSize>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d92d      	bls.n	800351a <acis_loop+0x11e>
    {
      protLook(&fifoSendingQueue,1,&size);
 80034be:	4a88      	ldr	r2, [pc, #544]	; (80036e0 <acis_loop+0x2e4>)
 80034c0:	2101      	movs	r1, #1
 80034c2:	4886      	ldr	r0, [pc, #536]	; (80036dc <acis_loop+0x2e0>)
 80034c4:	f007 feb8 	bl	800b238 <protLook>
      protLook(&fifoSendingQueue,2,&destination);
 80034c8:	4a86      	ldr	r2, [pc, #536]	; (80036e4 <acis_loop+0x2e8>)
 80034ca:	2102      	movs	r1, #2
 80034cc:	4883      	ldr	r0, [pc, #524]	; (80036dc <acis_loop+0x2e0>)
 80034ce:	f007 feb3 	bl	800b238 <protLook>
      if(protGetSize(&fifoSendingQueue) >= size)
 80034d2:	4882      	ldr	r0, [pc, #520]	; (80036dc <acis_loop+0x2e0>)
 80034d4:	f007 fd96 	bl	800b004 <protGetSize>
 80034d8:	4602      	mov	r2, r0
 80034da:	4b81      	ldr	r3, [pc, #516]	; (80036e0 <acis_loop+0x2e4>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d31b      	bcc.n	800351a <acis_loop+0x11e>
      {
        pnt = buffSendingBuffer;
 80034e2:	4b81      	ldr	r3, [pc, #516]	; (80036e8 <acis_loop+0x2ec>)
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
        for(int i = 0; i < size; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ea:	e009      	b.n	8003500 <acis_loop+0x104>
          protPull(&fifoSendingQueue, pnt++);
 80034ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	637a      	str	r2, [r7, #52]	; 0x34
 80034f2:	4619      	mov	r1, r3
 80034f4:	4879      	ldr	r0, [pc, #484]	; (80036dc <acis_loop+0x2e0>)
 80034f6:	f007 fe90 	bl	800b21a <protPull>
        for(int i = 0; i < size; i++)
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	3301      	adds	r3, #1
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003500:	4b77      	ldr	r3, [pc, #476]	; (80036e0 <acis_loop+0x2e4>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003508:	4293      	cmp	r3, r2
 800350a:	dbef      	blt.n	80034ec <acis_loop+0xf0>
        if(destination)
 800350c:	4b75      	ldr	r3, [pc, #468]	; (80036e4 <acis_loop+0x2e8>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <acis_loop+0x11e>
          sending = 1;
 8003514:	4b70      	ldr	r3, [pc, #448]	; (80036d8 <acis_loop+0x2dc>)
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
      }
    }
    if(sending)
 800351a:	4b6f      	ldr	r3, [pc, #444]	; (80036d8 <acis_loop+0x2dc>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d012      	beq.n	8003548 <acis_loop+0x14c>
    {
      status = acis_send_command(destination, buffSendingBuffer, size);
 8003522:	4b70      	ldr	r3, [pc, #448]	; (80036e4 <acis_loop+0x2e8>)
 8003524:	7818      	ldrb	r0, [r3, #0]
 8003526:	4b6e      	ldr	r3, [pc, #440]	; (80036e0 <acis_loop+0x2e4>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	496e      	ldr	r1, [pc, #440]	; (80036e8 <acis_loop+0x2ec>)
 800352e:	f001 f9e5 	bl	80048fc <acis_send_command>
 8003532:	4603      	mov	r3, r0
 8003534:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      if(status != 0)
 8003538:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <acis_loop+0x14c>
      {
        sending = 0;
 8003540:	4b65      	ldr	r3, [pc, #404]	; (80036d8 <acis_loop+0x2dc>)
 8003542:	2200      	movs	r2, #0
 8003544:	701a      	strb	r2, [r3, #0]
        continue;
 8003546:	bf00      	nop
      }
    }
  } while(0);

  /* =========================== Voltage & Temperature ADC =========================== */
  if(adc_buf_ready)
 8003548:	4b68      	ldr	r3, [pc, #416]	; (80036ec <acis_loop+0x2f0>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d07b      	beq.n	800364a <acis_loop+0x24e>
  {
    adc_buf = adc_buf_ptr;
 8003552:	4b67      	ldr	r3, [pc, #412]	; (80036f0 <acis_loop+0x2f4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60fb      	str	r3, [r7, #12]
    adc_size = adc_buf_size;
 8003558:	4b66      	ldr	r3, [pc, #408]	; (80036f4 <acis_loop+0x2f8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60bb      	str	r3, [r7, #8]
    adc_buf_ready = 0;
 800355e:	4b63      	ldr	r3, [pc, #396]	; (80036ec <acis_loop+0x2f0>)
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
    if(adc_buf)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d06f      	beq.n	800364a <acis_loop+0x24e>
    {
      for(int i = 0; i < adc_size;)
 800356a:	2300      	movs	r3, #0
 800356c:	62bb      	str	r3, [r7, #40]	; 0x28
 800356e:	e015      	b.n	800359c <acis_loop+0x1a0>
      {
        temperature_raw += adc_buf[i++];
 8003570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	62ba      	str	r2, [r7, #40]	; 0x28
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003582:	4413      	add	r3, r2
 8003584:	63bb      	str	r3, [r7, #56]	; 0x38
        voltage_raw += adc_buf[i++];
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	62ba      	str	r2, [r7, #40]	; 0x28
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4413      	add	r3, r2
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003598:	4413      	add	r3, r2
 800359a:	63fb      	str	r3, [r7, #60]	; 0x3c
      for(int i = 0; i < adc_size;)
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d8e5      	bhi.n	8003570 <acis_loop+0x174>
      }
      temperature_raw /= adc_size >> 1;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	085b      	lsrs	r3, r3, #1
 80035a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ae:	63bb      	str	r3, [r7, #56]	; 0x38
      voltage_raw /= adc_size >> 1;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	085b      	lsrs	r3, r3, #1
 80035b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ba:	63fb      	str	r3, [r7, #60]	; 0x3c

      power_voltage = voltage_raw / 65535.0f * 3.282f * 5.5f;
 80035bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035c6:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80036f8 <acis_loop+0x2fc>
 80035ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035ce:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80036fc <acis_loop+0x300>
 80035d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035d6:	eeb1 7a06 	vmov.f32	s14, #22	; 0x40b00000  5.5
 80035da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035de:	4b48      	ldr	r3, [pc, #288]	; (8003700 <acis_loop+0x304>)
 80035e0:	edc3 7a00 	vstr	s15, [r3]
      temp = temperature_raw / 65535.0f * 3.282f * 11.0f;
 80035e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e6:	ee07 3a90 	vmov	s15, r3
 80035ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035ee:	eddf 6a42 	vldr	s13, [pc, #264]	; 80036f8 <acis_loop+0x2fc>
 80035f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035f6:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80036fc <acis_loop+0x300>
 80035fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035fe:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8003602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003606:	edc7 7a01 	vstr	s15, [r7, #4]
      meter_resistance = 680.0f;
 800360a:	4b3e      	ldr	r3, [pc, #248]	; (8003704 <acis_loop+0x308>)
 800360c:	603b      	str	r3, [r7, #0]
      meter_resistance = (meter_resistance / (1.0f - (temp/power_voltage))) - meter_resistance;
 800360e:	4b3c      	ldr	r3, [pc, #240]	; (8003700 <acis_loop+0x304>)
 8003610:	ed93 7a00 	vldr	s14, [r3]
 8003614:	edd7 6a01 	vldr	s13, [r7, #4]
 8003618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800361c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003624:	edd7 6a00 	vldr	s13, [r7]
 8003628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800362c:	edd7 7a00 	vldr	s15, [r7]
 8003630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003634:	edc7 7a00 	vstr	s15, [r7]
      engine_temperature = gettempbyres(meter_resistance);
 8003638:	ed97 0a00 	vldr	s0, [r7]
 800363c:	f7fd fc04 	bl	8000e48 <gettempbyres>
 8003640:	eef0 7a40 	vmov.f32	s15, s0
 8003644:	4b30      	ldr	r3, [pc, #192]	; (8003708 <acis_loop+0x30c>)
 8003646:	edc3 7a00 	vstr	s15, [r3]
    }
  }

  /* =========================== Save & Load Procedures =========================== */
  if(!issaving && !isloading)
 800364a:	4b30      	ldr	r3, [pc, #192]	; (800370c <acis_loop+0x310>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d112      	bne.n	8003678 <acis_loop+0x27c>
 8003652:	4b2f      	ldr	r3, [pc, #188]	; (8003710 <acis_loop+0x314>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10e      	bne.n	8003678 <acis_loop+0x27c>
  {
    if(savereq)
 800365a:	4b2e      	ldr	r3, [pc, #184]	; (8003714 <acis_loop+0x318>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <acis_loop+0x26e>
      issaving = 1;
 8003662:	4b2a      	ldr	r3, [pc, #168]	; (800370c <acis_loop+0x310>)
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	e006      	b.n	8003678 <acis_loop+0x27c>
    else if(loadreq)
 800366a:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <acis_loop+0x31c>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <acis_loop+0x27c>
      isloading = 1;
 8003672:	4b27      	ldr	r3, [pc, #156]	; (8003710 <acis_loop+0x314>)
 8003674:	2201      	movs	r2, #1
 8003676:	701a      	strb	r2, [r3, #0]
  }

  if(issaving)
 8003678:	4b24      	ldr	r3, [pc, #144]	; (800370c <acis_loop+0x310>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d053      	beq.n	8003728 <acis_loop+0x32c>
  {
    flashstatus = config_save(&acis_config);
 8003680:	4826      	ldr	r0, [pc, #152]	; (800371c <acis_loop+0x320>)
 8003682:	f003 fce3 	bl	800704c <config_save>
 8003686:	4603      	mov	r3, r0
 8003688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(flashstatus != HAL_BUSY)
 800368c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003690:	2b02      	cmp	r3, #2
 8003692:	d06a      	beq.n	800376a <acis_loop+0x36e>
    {
      PK_SaveConfigAcknowledge.Destination = savereqsrc;
 8003694:	4b22      	ldr	r3, [pc, #136]	; (8003720 <acis_loop+0x324>)
 8003696:	781a      	ldrb	r2, [r3, #0]
 8003698:	4b22      	ldr	r3, [pc, #136]	; (8003724 <acis_loop+0x328>)
 800369a:	709a      	strb	r2, [r3, #2]
      PK_SaveConfigAcknowledge.ErrorCode = status == HAL_OK ? 0 : 1;
 800369c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <acis_loop+0x328>)
 80036ae:	605a      	str	r2, [r3, #4]
      protPushSequence(&fifoSendingQueue, &PK_SaveConfigAcknowledge, sizeof(PK_SaveConfigAcknowledge));
 80036b0:	2208      	movs	r2, #8
 80036b2:	491c      	ldr	r1, [pc, #112]	; (8003724 <acis_loop+0x328>)
 80036b4:	4809      	ldr	r0, [pc, #36]	; (80036dc <acis_loop+0x2e0>)
 80036b6:	f007 fd90 	bl	800b1da <protPushSequence>
 80036ba:	e056      	b.n	800376a <acis_loop+0x36e>
 80036bc:	40000c00 	.word	0x40000c00
 80036c0:	47d6d800 	.word	0x47d6d800
 80036c4:	42c80000 	.word	0x42c80000
 80036c8:	40020800 	.word	0x40020800
 80036cc:	40020000 	.word	0x40020000
 80036d0:	2001193c 	.word	0x2001193c
 80036d4:	2002111c 	.word	0x2002111c
 80036d8:	20021120 	.word	0x20021120
 80036dc:	200210ec 	.word	0x200210ec
 80036e0:	20021121 	.word	0x20021121
 80036e4:	20021122 	.word	0x20021122
 80036e8:	2002096c 	.word	0x2002096c
 80036ec:	20020968 	.word	0x20020968
 80036f0:	20020960 	.word	0x20020960
 80036f4:	20020964 	.word	0x20020964
 80036f8:	477fff00 	.word	0x477fff00
 80036fc:	40520c4a 	.word	0x40520c4a
 8003700:	20011938 	.word	0x20011938
 8003704:	442a0000 	.word	0x442a0000
 8003708:	20011934 	.word	0x20011934
 800370c:	20021123 	.word	0x20021123
 8003710:	20021124 	.word	0x20021124
 8003714:	20020958 	.word	0x20020958
 8003718:	20020959 	.word	0x20020959
 800371c:	20021480 	.word	0x20021480
 8003720:	2002095c 	.word	0x2002095c
 8003724:	20010300 	.word	0x20010300
    }
  }
  else if(isloading)
 8003728:	4bb1      	ldr	r3, [pc, #708]	; (80039f0 <acis_loop+0x5f4>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01c      	beq.n	800376a <acis_loop+0x36e>
  {
    flashstatus = config_load(&acis_config);
 8003730:	48b0      	ldr	r0, [pc, #704]	; (80039f4 <acis_loop+0x5f8>)
 8003732:	f001 f8f5 	bl	8004920 <config_load>
 8003736:	4603      	mov	r3, r0
 8003738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(flashstatus != HAL_BUSY)
 800373c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003740:	2b02      	cmp	r3, #2
 8003742:	d012      	beq.n	800376a <acis_loop+0x36e>
    {
      PK_RestoreConfigAcknowledge.Destination = loadreqsrc;
 8003744:	4bac      	ldr	r3, [pc, #688]	; (80039f8 <acis_loop+0x5fc>)
 8003746:	781a      	ldrb	r2, [r3, #0]
 8003748:	4bac      	ldr	r3, [pc, #688]	; (80039fc <acis_loop+0x600>)
 800374a:	709a      	strb	r2, [r3, #2]
      PK_RestoreConfigAcknowledge.ErrorCode = status == HAL_OK ? 0 : 1;
 800374c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf14      	ite	ne
 8003754:	2301      	movne	r3, #1
 8003756:	2300      	moveq	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	4ba7      	ldr	r3, [pc, #668]	; (80039fc <acis_loop+0x600>)
 800375e:	605a      	str	r2, [r3, #4]
      protPushSequence(&fifoSendingQueue, &PK_RestoreConfigAcknowledge, sizeof(PK_RestoreConfigAcknowledge));
 8003760:	2208      	movs	r2, #8
 8003762:	49a6      	ldr	r1, [pc, #664]	; (80039fc <acis_loop+0x600>)
 8003764:	48a6      	ldr	r0, [pc, #664]	; (8003a00 <acis_loop+0x604>)
 8003766:	f007 fd38 	bl	800b1da <protPushSequence>
    }
  }

  /* =========================== Ignition Handling =========================== */
  if(isIgn && !acis_config.params.isIgnitionByHall)
 800376a:	7cbb      	ldrb	r3, [r7, #18]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00b      	beq.n	8003788 <acis_loop+0x38c>
 8003770:	4ba0      	ldr	r3, [pc, #640]	; (80039f4 <acis_loop+0x5f8>)
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <acis_loop+0x38c>
    angle_ignite = CalculateIgnition();
 8003778:	f7fd ffee 	bl	8001758 <CalculateIgnition>
 800377c:	eef0 7a40 	vmov.f32	s15, s0
 8003780:	4ba0      	ldr	r3, [pc, #640]	; (8003a04 <acis_loop+0x608>)
 8003782:	edc3 7a00 	vstr	s15, [r3]
 8003786:	e003      	b.n	8003790 <acis_loop+0x394>
  else angle_ignite = 0.0f;
 8003788:	4b9e      	ldr	r3, [pc, #632]	; (8003a04 <acis_loop+0x608>)
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

  if(isIgn && acis_config.params.isHallLearningMode)
 8003790:	7cbb      	ldrb	r3, [r7, #18]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <acis_loop+0x3a6>
 8003796:	4b97      	ldr	r3, [pc, #604]	; (80039f4 <acis_loop+0x5f8>)
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <acis_loop+0x3a6>
    LearnIgnition();
 800379e:	f7fe fd27 	bl	80021f0 <LearnIgnition>

  acis_hall_loop();
 80037a2:	f7fd ff79 	bl	8001698 <acis_hall_loop>

  acis_ignition_loop();
 80037a6:	f7fd fd7f 	bl	80012a8 <acis_ignition_loop>


  /* =========================== Table and Valves handling =========================== */
  if(isIgn)
 80037aa:	7cbb      	ldrb	r3, [r7, #18]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80ea 	beq.w	8003986 <acis_loop+0x58a>
  {
    if(acis_config.params.isForceTable)
 80037b2:	4b90      	ldr	r3, [pc, #576]	; (80039f4 <acis_loop+0x5f8>)
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d004      	beq.n	80037c4 <acis_loop+0x3c8>
    {
      table = acis_config.params.forceTableNumber;
 80037ba:	4b8e      	ldr	r3, [pc, #568]	; (80039f4 <acis_loop+0x5f8>)
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80037c2:	e051      	b.n	8003868 <acis_loop+0x46c>
    }
    else if(acis_config.params.isSwitchByExternal)
 80037c4:	4b8b      	ldr	r3, [pc, #556]	; (80039f4 <acis_loop+0x5f8>)
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d036      	beq.n	800383a <acis_loop+0x43e>
    {
      HAL_GPIO_WritePin(PROPANE_OUT_GPIO_Port, PROPANE_OUT_Pin, GPIO_PIN_RESET);
 80037cc:	2200      	movs	r2, #0
 80037ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037d2:	488d      	ldr	r0, [pc, #564]	; (8003a08 <acis_loop+0x60c>)
 80037d4:	f009 fa56 	bl	800cc84 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PETROL_OUT_GPIO_Port, PETROL_OUT_Pin, GPIO_PIN_RESET);
 80037d8:	2200      	movs	r2, #0
 80037da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037de:	488a      	ldr	r0, [pc, #552]	; (8003a08 <acis_loop+0x60c>)
 80037e0:	f009 fa50 	bl	800cc84 <HAL_GPIO_WritePin>

      if(HAL_GPIO_ReadPin(PETROL_IN_GPIO_Port, PETROL_IN_Pin) == GPIO_PIN_RESET &&
 80037e4:	2120      	movs	r1, #32
 80037e6:	4888      	ldr	r0, [pc, #544]	; (8003a08 <acis_loop+0x60c>)
 80037e8:	f009 fa34 	bl	800cc54 <HAL_GPIO_ReadPin>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10b      	bne.n	800380a <acis_loop+0x40e>
          HAL_GPIO_ReadPin(PROPANE_IN_GPIO_Port, PROPANE_IN_Pin) == GPIO_PIN_SET)
 80037f2:	2110      	movs	r1, #16
 80037f4:	4884      	ldr	r0, [pc, #528]	; (8003a08 <acis_loop+0x60c>)
 80037f6:	f009 fa2d 	bl	800cc54 <HAL_GPIO_ReadPin>
 80037fa:	4603      	mov	r3, r0
      if(HAL_GPIO_ReadPin(PETROL_IN_GPIO_Port, PETROL_IN_Pin) == GPIO_PIN_RESET &&
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d104      	bne.n	800380a <acis_loop+0x40e>
        table = acis_config.params.switchPos1Table;
 8003800:	4b7c      	ldr	r3, [pc, #496]	; (80039f4 <acis_loop+0x5f8>)
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8003808:	e02e      	b.n	8003868 <acis_loop+0x46c>
      else if(HAL_GPIO_ReadPin(PETROL_IN_GPIO_Port, PETROL_IN_Pin) == GPIO_PIN_SET &&
 800380a:	2120      	movs	r1, #32
 800380c:	487e      	ldr	r0, [pc, #504]	; (8003a08 <acis_loop+0x60c>)
 800380e:	f009 fa21 	bl	800cc54 <HAL_GPIO_ReadPin>
 8003812:	4603      	mov	r3, r0
 8003814:	2b01      	cmp	r3, #1
 8003816:	d10b      	bne.n	8003830 <acis_loop+0x434>
          HAL_GPIO_ReadPin(PROPANE_IN_GPIO_Port, PROPANE_IN_Pin) == GPIO_PIN_RESET)
 8003818:	2110      	movs	r1, #16
 800381a:	487b      	ldr	r0, [pc, #492]	; (8003a08 <acis_loop+0x60c>)
 800381c:	f009 fa1a 	bl	800cc54 <HAL_GPIO_ReadPin>
 8003820:	4603      	mov	r3, r0
      else if(HAL_GPIO_ReadPin(PETROL_IN_GPIO_Port, PETROL_IN_Pin) == GPIO_PIN_SET &&
 8003822:	2b00      	cmp	r3, #0
 8003824:	d104      	bne.n	8003830 <acis_loop+0x434>
        table = acis_config.params.switchPos2Table;
 8003826:	4b73      	ldr	r3, [pc, #460]	; (80039f4 <acis_loop+0x5f8>)
 8003828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800382e:	e01b      	b.n	8003868 <acis_loop+0x46c>
      else table = acis_config.params.switchPos0Table;
 8003830:	4b70      	ldr	r3, [pc, #448]	; (80039f4 <acis_loop+0x5f8>)
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8003838:	e016      	b.n	8003868 <acis_loop+0x46c>
    }
    else
    {
      if(fuelsw == 0)
 800383a:	7c7b      	ldrb	r3, [r7, #17]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d104      	bne.n	800384a <acis_loop+0x44e>
        table = acis_config.params.switchPos0Table;
 8003840:	4b6c      	ldr	r3, [pc, #432]	; (80039f4 <acis_loop+0x5f8>)
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8003848:	e00e      	b.n	8003868 <acis_loop+0x46c>
      else if(fuelsw == 1)
 800384a:	7c7b      	ldrb	r3, [r7, #17]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d104      	bne.n	800385a <acis_loop+0x45e>
        table = acis_config.params.switchPos1Table;
 8003850:	4b68      	ldr	r3, [pc, #416]	; (80039f4 <acis_loop+0x5f8>)
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8003858:	e006      	b.n	8003868 <acis_loop+0x46c>
      else if(fuelsw == 2)
 800385a:	7c7b      	ldrb	r3, [r7, #17]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d103      	bne.n	8003868 <acis_loop+0x46c>
        table = acis_config.params.switchPos2Table;
 8003860:	4b64      	ldr	r3, [pc, #400]	; (80039f4 <acis_loop+0x5f8>)
 8003862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003864:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    }

    if(table < TABLE_SETUPS_MAX)
 8003868:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800386c:	2b03      	cmp	r3, #3
 800386e:	f200 8096 	bhi.w	800399e <acis_loop+0x5a2>
    {
      table_current = table;
 8003872:	4a66      	ldr	r2, [pc, #408]	; (8003a0c <acis_loop+0x610>)
 8003874:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003878:	7013      	strb	r3, [r2, #0]
      valve_current = acis_config.tables[table].valve_channel;
 800387a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800387e:	4a5d      	ldr	r2, [pc, #372]	; (80039f4 <acis_loop+0x5f8>)
 8003880:	f640 416c 	movw	r1, #3180	; 0xc6c
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	33ec      	adds	r3, #236	; 0xec
 800388c:	781a      	ldrb	r2, [r3, #0]
 800388e:	4b60      	ldr	r3, [pc, #384]	; (8003a10 <acis_loop+0x614>)
 8003890:	701a      	strb	r2, [r3, #0]
      if(valve_current != valve_old)
 8003892:	4b5f      	ldr	r3, [pc, #380]	; (8003a10 <acis_loop+0x614>)
 8003894:	781a      	ldrb	r2, [r3, #0]
 8003896:	4b5f      	ldr	r3, [pc, #380]	; (8003a14 <acis_loop+0x618>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d006      	beq.n	80038ac <acis_loop+0x4b0>
      {
        valve_old = valve_current;
 800389e:	4b5c      	ldr	r3, [pc, #368]	; (8003a10 <acis_loop+0x614>)
 80038a0:	781a      	ldrb	r2, [r3, #0]
 80038a2:	4b5c      	ldr	r3, [pc, #368]	; (8003a14 <acis_loop+0x618>)
 80038a4:	701a      	strb	r2, [r3, #0]
        rpm_last = now;
 80038a6:	4a5c      	ldr	r2, [pc, #368]	; (8003a18 <acis_loop+0x61c>)
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	6013      	str	r3, [r2, #0]
      }
      if(!acis_config.params.isSwitchByExternal)
 80038ac:	4b51      	ldr	r3, [pc, #324]	; (80039f4 <acis_loop+0x5f8>)
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d174      	bne.n	800399e <acis_loop+0x5a2>
      {
        if(acis_config.tables[table].valve_channel == ValveAllClosed ||
 80038b4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80038b8:	4a4e      	ldr	r2, [pc, #312]	; (80039f4 <acis_loop+0x5f8>)
 80038ba:	f640 416c 	movw	r1, #3180	; 0xc6c
 80038be:	fb01 f303 	mul.w	r3, r1, r3
 80038c2:	4413      	add	r3, r2
 80038c4:	33ec      	adds	r3, #236	; 0xec
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01d      	beq.n	8003908 <acis_loop+0x50c>
            (acis_config.tables[table].valve_timeout != 0 && DelayDiff(now, rpm_last) > acis_config.tables[table].valve_timeout))
 80038cc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80038d0:	4a48      	ldr	r2, [pc, #288]	; (80039f4 <acis_loop+0x5f8>)
 80038d2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80038d6:	fb01 f303 	mul.w	r3, r1, r3
 80038da:	4413      	add	r3, r2
 80038dc:	33f0      	adds	r3, #240	; 0xf0
 80038de:	681b      	ldr	r3, [r3, #0]
        if(acis_config.tables[table].valve_channel == ValveAllClosed ||
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01e      	beq.n	8003922 <acis_loop+0x526>
            (acis_config.tables[table].valve_timeout != 0 && DelayDiff(now, rpm_last) > acis_config.tables[table].valve_timeout))
 80038e4:	4b4c      	ldr	r3, [pc, #304]	; (8003a18 <acis_loop+0x61c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4619      	mov	r1, r3
 80038ea:	6a38      	ldr	r0, [r7, #32]
 80038ec:	f004 fa7a 	bl	8007de4 <DelayDiff>
 80038f0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80038f4:	4a3f      	ldr	r2, [pc, #252]	; (80039f4 <acis_loop+0x5f8>)
 80038f6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80038fa:	fb01 f303 	mul.w	r3, r1, r3
 80038fe:	4413      	add	r3, r2
 8003900:	33f0      	adds	r3, #240	; 0xf0
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4298      	cmp	r0, r3
 8003906:	d90c      	bls.n	8003922 <acis_loop+0x526>
        {
          HAL_GPIO_WritePin(PROPANE_OUT_GPIO_Port, PROPANE_OUT_Pin, GPIO_PIN_RESET);
 8003908:	2200      	movs	r2, #0
 800390a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800390e:	483e      	ldr	r0, [pc, #248]	; (8003a08 <acis_loop+0x60c>)
 8003910:	f009 f9b8 	bl	800cc84 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(PETROL_OUT_GPIO_Port, PETROL_OUT_Pin, GPIO_PIN_RESET);
 8003914:	2200      	movs	r2, #0
 8003916:	f44f 7100 	mov.w	r1, #512	; 0x200
 800391a:	483b      	ldr	r0, [pc, #236]	; (8003a08 <acis_loop+0x60c>)
 800391c:	f009 f9b2 	bl	800cc84 <HAL_GPIO_WritePin>
 8003920:	e03d      	b.n	800399e <acis_loop+0x5a2>
        }
        else if(acis_config.tables[table].valve_channel == ValvePetrol)
 8003922:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003926:	4a33      	ldr	r2, [pc, #204]	; (80039f4 <acis_loop+0x5f8>)
 8003928:	f640 416c 	movw	r1, #3180	; 0xc6c
 800392c:	fb01 f303 	mul.w	r3, r1, r3
 8003930:	4413      	add	r3, r2
 8003932:	33ec      	adds	r3, #236	; 0xec
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d10c      	bne.n	8003954 <acis_loop+0x558>
        {
          HAL_GPIO_WritePin(PROPANE_OUT_GPIO_Port, PROPANE_OUT_Pin, GPIO_PIN_RESET);
 800393a:	2200      	movs	r2, #0
 800393c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003940:	4831      	ldr	r0, [pc, #196]	; (8003a08 <acis_loop+0x60c>)
 8003942:	f009 f99f 	bl	800cc84 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(PETROL_OUT_GPIO_Port, PETROL_OUT_Pin, GPIO_PIN_SET);
 8003946:	2201      	movs	r2, #1
 8003948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800394c:	482e      	ldr	r0, [pc, #184]	; (8003a08 <acis_loop+0x60c>)
 800394e:	f009 f999 	bl	800cc84 <HAL_GPIO_WritePin>
 8003952:	e024      	b.n	800399e <acis_loop+0x5a2>
        }
        else if(acis_config.tables[table].valve_channel == ValvePropane)
 8003954:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003958:	4a26      	ldr	r2, [pc, #152]	; (80039f4 <acis_loop+0x5f8>)
 800395a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800395e:	fb01 f303 	mul.w	r3, r1, r3
 8003962:	4413      	add	r3, r2
 8003964:	33ec      	adds	r3, #236	; 0xec
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d118      	bne.n	800399e <acis_loop+0x5a2>
        {
          HAL_GPIO_WritePin(PROPANE_OUT_GPIO_Port, PROPANE_OUT_Pin, GPIO_PIN_SET);
 800396c:	2201      	movs	r2, #1
 800396e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003972:	4825      	ldr	r0, [pc, #148]	; (8003a08 <acis_loop+0x60c>)
 8003974:	f009 f986 	bl	800cc84 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(PETROL_OUT_GPIO_Port, PETROL_OUT_Pin, GPIO_PIN_RESET);
 8003978:	2200      	movs	r2, #0
 800397a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800397e:	4822      	ldr	r0, [pc, #136]	; (8003a08 <acis_loop+0x60c>)
 8003980:	f009 f980 	bl	800cc84 <HAL_GPIO_WritePin>
 8003984:	e00b      	b.n	800399e <acis_loop+0x5a2>
      }
    }
  }
  else
  {
    HAL_GPIO_WritePin(PROPANE_OUT_GPIO_Port, PROPANE_OUT_Pin, GPIO_PIN_RESET);
 8003986:	2200      	movs	r2, #0
 8003988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800398c:	481e      	ldr	r0, [pc, #120]	; (8003a08 <acis_loop+0x60c>)
 800398e:	f009 f979 	bl	800cc84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PETROL_OUT_GPIO_Port, PETROL_OUT_Pin, GPIO_PIN_RESET);
 8003992:	2200      	movs	r2, #0
 8003994:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003998:	481b      	ldr	r0, [pc, #108]	; (8003a08 <acis_loop+0x60c>)
 800399a:	f009 f973 	bl	800cc84 <HAL_GPIO_WritePin>
  }


  /* =========================== Economizer Handling =========================== */
  if(!isIgn)
 800399e:	7cbb      	ldrb	r3, [r7, #18]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d105      	bne.n	80039b0 <acis_loop+0x5b4>
  {
    HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_RESET);
 80039a4:	2200      	movs	r2, #0
 80039a6:	2104      	movs	r1, #4
 80039a8:	481c      	ldr	r0, [pc, #112]	; (8003a1c <acis_loop+0x620>)
 80039aa:	f009 f96b 	bl	800cc84 <HAL_GPIO_WritePin>
 80039ae:	e055      	b.n	8003a5c <acis_loop+0x660>
  }
  else if(!acis_config.params.isEconOutAsStrobe)
 80039b0:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <acis_loop+0x5f8>)
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d151      	bne.n	8003a5c <acis_loop+0x660>
  {
    if(acis_config.params.isEconomEnabled)
 80039b8:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <acis_loop+0x5f8>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d048      	beq.n	8003a52 <acis_loop+0x656>
    {
      if(isIdle && rpm > acis_config.params.EconRpmThreshold + 75)
 80039c0:	7cfb      	ldrb	r3, [r7, #19]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d02e      	beq.n	8003a24 <acis_loop+0x628>
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <acis_loop+0x5f8>)
 80039c8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80039cc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003a20 <acis_loop+0x624>
 80039d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80039d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e0:	dd20      	ble.n	8003a24 <acis_loop+0x628>
        HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_RESET);
 80039e2:	2200      	movs	r2, #0
 80039e4:	2104      	movs	r1, #4
 80039e6:	480d      	ldr	r0, [pc, #52]	; (8003a1c <acis_loop+0x620>)
 80039e8:	f009 f94c 	bl	800cc84 <HAL_GPIO_WritePin>
 80039ec:	e036      	b.n	8003a5c <acis_loop+0x660>
 80039ee:	bf00      	nop
 80039f0:	20021124 	.word	0x20021124
 80039f4:	20021480 	.word	0x20021480
 80039f8:	2002095d 	.word	0x2002095d
 80039fc:	20010320 	.word	0x20010320
 8003a00:	200210ec 	.word	0x200210ec
 8003a04:	20011928 	.word	0x20011928
 8003a08:	40020400 	.word	0x40020400
 8003a0c:	20011930 	.word	0x20011930
 8003a10:	20011931 	.word	0x20011931
 8003a14:	20021125 	.word	0x20021125
 8003a18:	2002111c 	.word	0x2002111c
 8003a1c:	40020c00 	.word	0x40020c00
 8003a20:	42960000 	.word	0x42960000
      else if(!isIdle || rpm < acis_config.params.EconRpmThreshold - 75)
 8003a24:	7cfb      	ldrb	r3, [r7, #19]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00d      	beq.n	8003a46 <acis_loop+0x64a>
 8003a2a:	4b8f      	ldr	r3, [pc, #572]	; (8003c68 <acis_loop+0x86c>)
 8003a2c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003a30:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8003c6c <acis_loop+0x870>
 8003a34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a38:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a44:	d50a      	bpl.n	8003a5c <acis_loop+0x660>
        HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_SET);
 8003a46:	2201      	movs	r2, #1
 8003a48:	2104      	movs	r1, #4
 8003a4a:	4889      	ldr	r0, [pc, #548]	; (8003c70 <acis_loop+0x874>)
 8003a4c:	f009 f91a 	bl	800cc84 <HAL_GPIO_WritePin>
 8003a50:	e004      	b.n	8003a5c <acis_loop+0x660>
    }
    else
      HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_SET);
 8003a52:	2201      	movs	r2, #1
 8003a54:	2104      	movs	r1, #4
 8003a56:	4886      	ldr	r0, [pc, #536]	; (8003c70 <acis_loop+0x874>)
 8003a58:	f009 f914 	bl	800cc84 <HAL_GPIO_WritePin>
  }

  /* =========================== DRAG =========================== */
  if(DragReady)
 8003a5c:	4b85      	ldr	r3, [pc, #532]	; (8003c74 <acis_loop+0x878>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 81fd 	beq.w	8003e60 <acis_loop+0xa64>
  {
    if(DragCompleted)
 8003a66:	4b84      	ldr	r3, [pc, #528]	; (8003c78 <acis_loop+0x87c>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d006      	beq.n	8003a7c <acis_loop+0x680>
    {
      DragReady = 0;
 8003a6e:	4b81      	ldr	r3, [pc, #516]	; (8003c74 <acis_loop+0x878>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
      DragStarted = 0;
 8003a74:	4b81      	ldr	r3, [pc, #516]	; (8003c7c <acis_loop+0x880>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	701a      	strb	r2, [r3, #0]
      }
    }
  }


}
 8003a7a:	e1f1      	b.n	8003e60 <acis_loop+0xa64>
      if(DragStarted)
 8003a7c:	4b7f      	ldr	r3, [pc, #508]	; (8003c7c <acis_loop+0x880>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8111 	beq.w	8003ca8 <acis_loop+0x8ac>
        if(DelayDiff(now, DragTimeLast) >= DRAG_POINTS_DISTANCE)
 8003a86:	4b7e      	ldr	r3, [pc, #504]	; (8003c80 <acis_loop+0x884>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	6a38      	ldr	r0, [r7, #32]
 8003a8e:	f004 f9a9 	bl	8007de4 <DelayDiff>
 8003a92:	4602      	mov	r2, r0
 8003a94:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	f240 81e1 	bls.w	8003e60 <acis_loop+0xa64>
          DragTimeLast = now;
 8003a9e:	4a78      	ldr	r2, [pc, #480]	; (8003c80 <acis_loop+0x884>)
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	6013      	str	r3, [r2, #0]
          if(DragPointsCount < DRAG_MAX_POINTS)
 8003aa4:	4b77      	ldr	r3, [pc, #476]	; (8003c84 <acis_loop+0x888>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003aac:	f080 80cb 	bcs.w	8003c46 <acis_loop+0x84a>
            DragPoints[DragPointsCount].Ignition = angle_ignite;
 8003ab0:	4b74      	ldr	r3, [pc, #464]	; (8003c84 <acis_loop+0x888>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4b74      	ldr	r3, [pc, #464]	; (8003c88 <acis_loop+0x88c>)
 8003ab6:	6819      	ldr	r1, [r3, #0]
 8003ab8:	4874      	ldr	r0, [pc, #464]	; (8003c8c <acis_loop+0x890>)
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4403      	add	r3, r0
 8003ac4:	330c      	adds	r3, #12
 8003ac6:	6019      	str	r1, [r3, #0]
            DragPoints[DragPointsCount].RPM = rpm;
 8003ac8:	4b6e      	ldr	r3, [pc, #440]	; (8003c84 <acis_loop+0x888>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	496f      	ldr	r1, [pc, #444]	; (8003c8c <acis_loop+0x890>)
 8003ace:	4613      	mov	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	601a      	str	r2, [r3, #0]
            DragPoints[DragPointsCount].Pressure = pressure;
 8003adc:	4b69      	ldr	r3, [pc, #420]	; (8003c84 <acis_loop+0x888>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	496a      	ldr	r1, [pc, #424]	; (8003c8c <acis_loop+0x890>)
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	3304      	adds	r3, #4
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	601a      	str	r2, [r3, #0]
            DragPoints[DragPointsCount].Load = load;
 8003af2:	4b64      	ldr	r3, [pc, #400]	; (8003c84 <acis_loop+0x888>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4965      	ldr	r1, [pc, #404]	; (8003c8c <acis_loop+0x890>)
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	3308      	adds	r3, #8
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	601a      	str	r2, [r3, #0]
            DragPoints[DragPointsCount].Time = DelayDiff(now, DragStartTime);
 8003b08:	4b61      	ldr	r3, [pc, #388]	; (8003c90 <acis_loop+0x894>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b5d      	ldr	r3, [pc, #372]	; (8003c84 <acis_loop+0x888>)
 8003b0e:	681c      	ldr	r4, [r3, #0]
 8003b10:	4611      	mov	r1, r2
 8003b12:	6a38      	ldr	r0, [r7, #32]
 8003b14:	f004 f966 	bl	8007de4 <DelayDiff>
 8003b18:	4601      	mov	r1, r0
 8003b1a:	4a5c      	ldr	r2, [pc, #368]	; (8003c8c <acis_loop+0x890>)
 8003b1c:	4623      	mov	r3, r4
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4423      	add	r3, r4
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	3310      	adds	r3, #16
 8003b28:	6019      	str	r1, [r3, #0]
            DragPointsCount++;
 8003b2a:	4b56      	ldr	r3, [pc, #344]	; (8003c84 <acis_loop+0x888>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	4a54      	ldr	r2, [pc, #336]	; (8003c84 <acis_loop+0x888>)
 8003b32:	6013      	str	r3, [r2, #0]
            if(DragFromRPM < DragToRPM)
 8003b34:	4b57      	ldr	r3, [pc, #348]	; (8003c94 <acis_loop+0x898>)
 8003b36:	ed93 7a00 	vldr	s14, [r3]
 8003b3a:	4b57      	ldr	r3, [pc, #348]	; (8003c98 <acis_loop+0x89c>)
 8003b3c:	edd3 7a00 	vldr	s15, [r3]
 8003b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b48:	d538      	bpl.n	8003bbc <acis_loop+0x7c0>
              if(rpm >= DragToRPM)
 8003b4a:	4b53      	ldr	r3, [pc, #332]	; (8003c98 <acis_loop+0x89c>)
 8003b4c:	edd3 7a00 	vldr	s15, [r3]
 8003b50:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5c:	db0f      	blt.n	8003b7e <acis_loop+0x782>
                DragStarted = 0;
 8003b5e:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <acis_loop+0x880>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
                DragStatus = 0;
 8003b64:	4b4d      	ldr	r3, [pc, #308]	; (8003c9c <acis_loop+0x8a0>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	701a      	strb	r2, [r3, #0]
                DragReady = 0;
 8003b6a:	4b42      	ldr	r3, [pc, #264]	; (8003c74 <acis_loop+0x878>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
                DragCompleted = 1;
 8003b70:	4b41      	ldr	r3, [pc, #260]	; (8003c78 <acis_loop+0x87c>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	701a      	strb	r2, [r3, #0]
                DragTimeLast = 0;
 8003b76:	4b42      	ldr	r3, [pc, #264]	; (8003c80 <acis_loop+0x884>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
}
 8003b7c:	e170      	b.n	8003e60 <acis_loop+0xa64>
              else if(rpm < DragFromRPM - 100.0f)
 8003b7e:	4b45      	ldr	r3, [pc, #276]	; (8003c94 <acis_loop+0x898>)
 8003b80:	edd3 7a00 	vldr	s15, [r3]
 8003b84:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003ca0 <acis_loop+0x8a4>
 8003b88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b8c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b98:	d400      	bmi.n	8003b9c <acis_loop+0x7a0>
}
 8003b9a:	e161      	b.n	8003e60 <acis_loop+0xa64>
                DragStarted = 0;
 8003b9c:	4b37      	ldr	r3, [pc, #220]	; (8003c7c <acis_loop+0x880>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	701a      	strb	r2, [r3, #0]
                DragStatus = 4;
 8003ba2:	4b3e      	ldr	r3, [pc, #248]	; (8003c9c <acis_loop+0x8a0>)
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	701a      	strb	r2, [r3, #0]
                DragReady = 0;
 8003ba8:	4b32      	ldr	r3, [pc, #200]	; (8003c74 <acis_loop+0x878>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	701a      	strb	r2, [r3, #0]
                DragCompleted = 1;
 8003bae:	4b32      	ldr	r3, [pc, #200]	; (8003c78 <acis_loop+0x87c>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
                DragTimeLast = 0;
 8003bb4:	4b32      	ldr	r3, [pc, #200]	; (8003c80 <acis_loop+0x884>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
}
 8003bba:	e151      	b.n	8003e60 <acis_loop+0xa64>
            else if(DragFromRPM > DragToRPM)
 8003bbc:	4b35      	ldr	r3, [pc, #212]	; (8003c94 <acis_loop+0x898>)
 8003bbe:	ed93 7a00 	vldr	s14, [r3]
 8003bc2:	4b35      	ldr	r3, [pc, #212]	; (8003c98 <acis_loop+0x89c>)
 8003bc4:	edd3 7a00 	vldr	s15, [r3]
 8003bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd0:	dc00      	bgt.n	8003bd4 <acis_loop+0x7d8>
}
 8003bd2:	e145      	b.n	8003e60 <acis_loop+0xa64>
              if(rpm <= DragToRPM)
 8003bd4:	4b30      	ldr	r3, [pc, #192]	; (8003c98 <acis_loop+0x89c>)
 8003bd6:	edd3 7a00 	vldr	s15, [r3]
 8003bda:	ed97 7a07 	vldr	s14, [r7, #28]
 8003bde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be6:	d80f      	bhi.n	8003c08 <acis_loop+0x80c>
                DragStarted = 0;
 8003be8:	4b24      	ldr	r3, [pc, #144]	; (8003c7c <acis_loop+0x880>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
                DragStatus = 0;
 8003bee:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <acis_loop+0x8a0>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
                DragReady = 0;
 8003bf4:	4b1f      	ldr	r3, [pc, #124]	; (8003c74 <acis_loop+0x878>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	701a      	strb	r2, [r3, #0]
                DragCompleted = 1;
 8003bfa:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <acis_loop+0x87c>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	701a      	strb	r2, [r3, #0]
                DragTimeLast = 0;
 8003c00:	4b1f      	ldr	r3, [pc, #124]	; (8003c80 <acis_loop+0x884>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
}
 8003c06:	e12b      	b.n	8003e60 <acis_loop+0xa64>
              else if(rpm > DragFromRPM + 50.0f)
 8003c08:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <acis_loop+0x898>)
 8003c0a:	edd3 7a00 	vldr	s15, [r3]
 8003c0e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003ca4 <acis_loop+0x8a8>
 8003c12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c16:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c22:	dc00      	bgt.n	8003c26 <acis_loop+0x82a>
}
 8003c24:	e11c      	b.n	8003e60 <acis_loop+0xa64>
                DragStarted = 0;
 8003c26:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <acis_loop+0x880>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]
                DragStatus = 4;
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <acis_loop+0x8a0>)
 8003c2e:	2204      	movs	r2, #4
 8003c30:	701a      	strb	r2, [r3, #0]
                DragReady = 0;
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <acis_loop+0x878>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	701a      	strb	r2, [r3, #0]
                DragCompleted = 1;
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <acis_loop+0x87c>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	701a      	strb	r2, [r3, #0]
                DragTimeLast = 0;
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <acis_loop+0x884>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
}
 8003c44:	e10c      	b.n	8003e60 <acis_loop+0xa64>
            DragStarted = 0;
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <acis_loop+0x880>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]
            DragStatus = 5;
 8003c4c:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <acis_loop+0x8a0>)
 8003c4e:	2205      	movs	r2, #5
 8003c50:	701a      	strb	r2, [r3, #0]
            DragReady = 0;
 8003c52:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <acis_loop+0x878>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]
            DragCompleted = 1;
 8003c58:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <acis_loop+0x87c>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	701a      	strb	r2, [r3, #0]
            DragTimeLast = 0;
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <acis_loop+0x884>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
}
 8003c64:	e0fc      	b.n	8003e60 <acis_loop+0xa64>
 8003c66:	bf00      	nop
 8003c68:	20021480 	.word	0x20021480
 8003c6c:	42960000 	.word	0x42960000
 8003c70:	40020c00 	.word	0x40020c00
 8003c74:	2002094c 	.word	0x2002094c
 8003c78:	2002094e 	.word	0x2002094e
 8003c7c:	2002094d 	.word	0x2002094d
 8003c80:	20020950 	.word	0x20020950
 8003c84:	20020940 	.word	0x20020940
 8003c88:	20011928 	.word	0x20011928
 8003c8c:	20011940 	.word	0x20011940
 8003c90:	20020954 	.word	0x20020954
 8003c94:	20020944 	.word	0x20020944
 8003c98:	20020948 	.word	0x20020948
 8003c9c:	2002094f 	.word	0x2002094f
 8003ca0:	42c80000 	.word	0x42c80000
 8003ca4:	42480000 	.word	0x42480000
        if(DragFromRPM < DragToRPM)
 8003ca8:	4b6f      	ldr	r3, [pc, #444]	; (8003e68 <acis_loop+0xa6c>)
 8003caa:	ed93 7a00 	vldr	s14, [r3]
 8003cae:	4b6f      	ldr	r3, [pc, #444]	; (8003e6c <acis_loop+0xa70>)
 8003cb0:	edd3 7a00 	vldr	s15, [r3]
 8003cb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cbc:	d564      	bpl.n	8003d88 <acis_loop+0x98c>
          if(rpm >= DragFromRPM)
 8003cbe:	4b6a      	ldr	r3, [pc, #424]	; (8003e68 <acis_loop+0xa6c>)
 8003cc0:	edd3 7a00 	vldr	s15, [r3]
 8003cc4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd0:	db56      	blt.n	8003d80 <acis_loop+0x984>
            if(DragTimeLast != 0)
 8003cd2:	4b67      	ldr	r3, [pc, #412]	; (8003e70 <acis_loop+0xa74>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 80c2 	beq.w	8003e60 <acis_loop+0xa64>
              DragTimeLast = now;
 8003cdc:	4a64      	ldr	r2, [pc, #400]	; (8003e70 <acis_loop+0xa74>)
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	6013      	str	r3, [r2, #0]
              DragStarted = 1;
 8003ce2:	4b64      	ldr	r3, [pc, #400]	; (8003e74 <acis_loop+0xa78>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]
              DragStatus = 0;
 8003ce8:	4b63      	ldr	r3, [pc, #396]	; (8003e78 <acis_loop+0xa7c>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	701a      	strb	r2, [r3, #0]
              DragPointsCount = 0;
 8003cee:	4b63      	ldr	r3, [pc, #396]	; (8003e7c <acis_loop+0xa80>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
              DragStartTime = now;
 8003cf4:	4a62      	ldr	r2, [pc, #392]	; (8003e80 <acis_loop+0xa84>)
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	6013      	str	r3, [r2, #0]
              DragPoints[DragPointsCount].Ignition = angle_ignite;
 8003cfa:	4b60      	ldr	r3, [pc, #384]	; (8003e7c <acis_loop+0xa80>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4b61      	ldr	r3, [pc, #388]	; (8003e84 <acis_loop+0xa88>)
 8003d00:	6819      	ldr	r1, [r3, #0]
 8003d02:	4861      	ldr	r0, [pc, #388]	; (8003e88 <acis_loop+0xa8c>)
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4403      	add	r3, r0
 8003d0e:	330c      	adds	r3, #12
 8003d10:	6019      	str	r1, [r3, #0]
              DragPoints[DragPointsCount].RPM = rpm;
 8003d12:	4b5a      	ldr	r3, [pc, #360]	; (8003e7c <acis_loop+0xa80>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	495c      	ldr	r1, [pc, #368]	; (8003e88 <acis_loop+0xa8c>)
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	601a      	str	r2, [r3, #0]
              DragPoints[DragPointsCount].Pressure = pressure;
 8003d26:	4b55      	ldr	r3, [pc, #340]	; (8003e7c <acis_loop+0xa80>)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4957      	ldr	r1, [pc, #348]	; (8003e88 <acis_loop+0xa8c>)
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	3304      	adds	r3, #4
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	601a      	str	r2, [r3, #0]
              DragPoints[DragPointsCount].Load = load;
 8003d3c:	4b4f      	ldr	r3, [pc, #316]	; (8003e7c <acis_loop+0xa80>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	4951      	ldr	r1, [pc, #324]	; (8003e88 <acis_loop+0xa8c>)
 8003d42:	4613      	mov	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	601a      	str	r2, [r3, #0]
              DragPoints[DragPointsCount].Time = DelayDiff(now, DragStartTime);
 8003d52:	4b4b      	ldr	r3, [pc, #300]	; (8003e80 <acis_loop+0xa84>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	4b49      	ldr	r3, [pc, #292]	; (8003e7c <acis_loop+0xa80>)
 8003d58:	681c      	ldr	r4, [r3, #0]
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	6a38      	ldr	r0, [r7, #32]
 8003d5e:	f004 f841 	bl	8007de4 <DelayDiff>
 8003d62:	4601      	mov	r1, r0
 8003d64:	4a48      	ldr	r2, [pc, #288]	; (8003e88 <acis_loop+0xa8c>)
 8003d66:	4623      	mov	r3, r4
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4423      	add	r3, r4
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	3310      	adds	r3, #16
 8003d72:	6019      	str	r1, [r3, #0]
              DragPointsCount++;
 8003d74:	4b41      	ldr	r3, [pc, #260]	; (8003e7c <acis_loop+0xa80>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	4a40      	ldr	r2, [pc, #256]	; (8003e7c <acis_loop+0xa80>)
 8003d7c:	6013      	str	r3, [r2, #0]
}
 8003d7e:	e06f      	b.n	8003e60 <acis_loop+0xa64>
            DragTimeLast = now;
 8003d80:	4a3b      	ldr	r2, [pc, #236]	; (8003e70 <acis_loop+0xa74>)
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	6013      	str	r3, [r2, #0]
}
 8003d86:	e06b      	b.n	8003e60 <acis_loop+0xa64>
        else if(DragFromRPM > DragToRPM)
 8003d88:	4b37      	ldr	r3, [pc, #220]	; (8003e68 <acis_loop+0xa6c>)
 8003d8a:	ed93 7a00 	vldr	s14, [r3]
 8003d8e:	4b37      	ldr	r3, [pc, #220]	; (8003e6c <acis_loop+0xa70>)
 8003d90:	edd3 7a00 	vldr	s15, [r3]
 8003d94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d9c:	dc00      	bgt.n	8003da0 <acis_loop+0x9a4>
}
 8003d9e:	e05f      	b.n	8003e60 <acis_loop+0xa64>
          if(rpm <= DragFromRPM)
 8003da0:	4b31      	ldr	r3, [pc, #196]	; (8003e68 <acis_loop+0xa6c>)
 8003da2:	edd3 7a00 	vldr	s15, [r3]
 8003da6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003daa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db2:	d852      	bhi.n	8003e5a <acis_loop+0xa5e>
            if(DragTimeLast != 0)
 8003db4:	4b2e      	ldr	r3, [pc, #184]	; (8003e70 <acis_loop+0xa74>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d051      	beq.n	8003e60 <acis_loop+0xa64>
              DragTimeLast = now;
 8003dbc:	4a2c      	ldr	r2, [pc, #176]	; (8003e70 <acis_loop+0xa74>)
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	6013      	str	r3, [r2, #0]
              DragStarted = 1;
 8003dc2:	4b2c      	ldr	r3, [pc, #176]	; (8003e74 <acis_loop+0xa78>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	701a      	strb	r2, [r3, #0]
              DragPointsCount = 0;
 8003dc8:	4b2c      	ldr	r3, [pc, #176]	; (8003e7c <acis_loop+0xa80>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
              DragStartTime = now;
 8003dce:	4a2c      	ldr	r2, [pc, #176]	; (8003e80 <acis_loop+0xa84>)
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	6013      	str	r3, [r2, #0]
              DragPoints[DragPointsCount].Ignition = angle_ignite;
 8003dd4:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <acis_loop+0xa80>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <acis_loop+0xa88>)
 8003dda:	6819      	ldr	r1, [r3, #0]
 8003ddc:	482a      	ldr	r0, [pc, #168]	; (8003e88 <acis_loop+0xa8c>)
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4403      	add	r3, r0
 8003de8:	330c      	adds	r3, #12
 8003dea:	6019      	str	r1, [r3, #0]
              DragPoints[DragPointsCount].RPM = rpm;
 8003dec:	4b23      	ldr	r3, [pc, #140]	; (8003e7c <acis_loop+0xa80>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	4925      	ldr	r1, [pc, #148]	; (8003e88 <acis_loop+0xa8c>)
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	601a      	str	r2, [r3, #0]
              DragPoints[DragPointsCount].Pressure = pressure;
 8003e00:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <acis_loop+0xa80>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4920      	ldr	r1, [pc, #128]	; (8003e88 <acis_loop+0xa8c>)
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	3304      	adds	r3, #4
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	601a      	str	r2, [r3, #0]
              DragPoints[DragPointsCount].Load = load;
 8003e16:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <acis_loop+0xa80>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	491b      	ldr	r1, [pc, #108]	; (8003e88 <acis_loop+0xa8c>)
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	3308      	adds	r3, #8
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	601a      	str	r2, [r3, #0]
              DragPoints[DragPointsCount].Time = DelayDiff(now, DragStartTime);
 8003e2c:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <acis_loop+0xa84>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <acis_loop+0xa80>)
 8003e32:	681c      	ldr	r4, [r3, #0]
 8003e34:	4611      	mov	r1, r2
 8003e36:	6a38      	ldr	r0, [r7, #32]
 8003e38:	f003 ffd4 	bl	8007de4 <DelayDiff>
 8003e3c:	4601      	mov	r1, r0
 8003e3e:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <acis_loop+0xa8c>)
 8003e40:	4623      	mov	r3, r4
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4423      	add	r3, r4
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	3310      	adds	r3, #16
 8003e4c:	6019      	str	r1, [r3, #0]
              DragPointsCount++;
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <acis_loop+0xa80>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3301      	adds	r3, #1
 8003e54:	4a09      	ldr	r2, [pc, #36]	; (8003e7c <acis_loop+0xa80>)
 8003e56:	6013      	str	r3, [r2, #0]
}
 8003e58:	e002      	b.n	8003e60 <acis_loop+0xa64>
            DragTimeLast = now;
 8003e5a:	4a05      	ldr	r2, [pc, #20]	; (8003e70 <acis_loop+0xa74>)
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	6013      	str	r3, [r2, #0]
}
 8003e60:	bf00      	nop
 8003e62:	3744      	adds	r7, #68	; 0x44
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd90      	pop	{r4, r7, pc}
 8003e68:	20020944 	.word	0x20020944
 8003e6c:	20020948 	.word	0x20020948
 8003e70:	20020950 	.word	0x20020950
 8003e74:	2002094d 	.word	0x2002094d
 8003e78:	2002094f 	.word	0x2002094f
 8003e7c:	20020940 	.word	0x20020940
 8003e80:	20020954 	.word	0x20020954
 8003e84:	20011928 	.word	0x20011928
 8003e88:	20011940 	.word	0x20011940

08003e8c <acis_parse_command>:

void acis_parse_command(eTransChannels xChaSrc, uint8_t * msgBuf, uint32_t length)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08e      	sub	sp, #56	; 0x38
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	73fb      	strb	r3, [r7, #15]
  static uint32_t pclastsent = 0;
  uint32_t now = Delay_Tick;
 8003e9a:	4bb0      	ldr	r3, [pc, #704]	; (800415c <acis_parse_command+0x2d0>)
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t size;
  uint32_t table;
  uint32_t tablesize;
  uint32_t configsize;
  uint32_t dragpoint;
  uint32_t realconfigsize = (uint32_t)&acis_config.tables[0] - (uint32_t)&acis_config;
 8003ea0:	23e0      	movs	r3, #224	; 0xe0
 8003ea2:	633b      	str	r3, [r7, #48]	; 0x30
  if(xChaSrc == etrPC)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d114      	bne.n	8003ed4 <acis_parse_command+0x48>
  {
    if(DelayDiff(now, pclastsent) > 500000)
 8003eaa:	4bad      	ldr	r3, [pc, #692]	; (8004160 <acis_parse_command+0x2d4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003eb2:	f003 ff97 	bl	8007de4 <DelayDiff>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	4baa      	ldr	r3, [pc, #680]	; (8004164 <acis_parse_command+0x2d8>)
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d90a      	bls.n	8003ed4 <acis_parse_command+0x48>
    {
      pclastsent = now;
 8003ebe:	4aa8      	ldr	r2, [pc, #672]	; (8004160 <acis_parse_command+0x2d4>)
 8003ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec2:	6013      	str	r3, [r2, #0]
      PK_PcConnected.Destination = etrCTRL;
 8003ec4:	4ba8      	ldr	r3, [pc, #672]	; (8004168 <acis_parse_command+0x2dc>)
 8003ec6:	2203      	movs	r2, #3
 8003ec8:	709a      	strb	r2, [r3, #2]
      protPushSequence(&fifoSendingQueue, &PK_PcConnected, sizeof(PK_PcConnected));
 8003eca:	2204      	movs	r2, #4
 8003ecc:	49a6      	ldr	r1, [pc, #664]	; (8004168 <acis_parse_command+0x2dc>)
 8003ece:	48a7      	ldr	r0, [pc, #668]	; (800416c <acis_parse_command+0x2e0>)
 8003ed0:	f007 f983 	bl	800b1da <protPushSequence>
    }
  }
  switch(msgBuf[0])
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	2b17      	cmp	r3, #23
 8003edc:	f200 84ea 	bhi.w	80048b4 <acis_parse_command+0xa28>
 8003ee0:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <acis_parse_command+0x5c>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003f49 	.word	0x08003f49
 8003eec:	08003f6d 	.word	0x08003f6d
 8003ef0:	08003f79 	.word	0x08003f79
 8003ef4:	080048b5 	.word	0x080048b5
 8003ef8:	0800405f 	.word	0x0800405f
 8003efc:	080041b5 	.word	0x080041b5
 8003f00:	0800488f 	.word	0x0800488f
 8003f04:	08004297 	.word	0x08004297
 8003f08:	08004367 	.word	0x08004367
 8003f0c:	08004885 	.word	0x08004885
 8003f10:	08004441 	.word	0x08004441
 8003f14:	0800446f 	.word	0x0800446f
 8003f18:	080048b5 	.word	0x080048b5
 8003f1c:	080048b5 	.word	0x080048b5
 8003f20:	0800449d 	.word	0x0800449d
 8003f24:	08004619 	.word	0x08004619
 8003f28:	080048b5 	.word	0x080048b5
 8003f2c:	08004591 	.word	0x08004591
 8003f30:	08004771 	.word	0x08004771
 8003f34:	080048b5 	.word	0x080048b5
 8003f38:	080048b5 	.word	0x080048b5
 8003f3c:	080048b5 	.word	0x080048b5
 8003f40:	080048b5 	.word	0x080048b5
 8003f44:	08004899 	.word	0x08004899
  {
    case PK_PingID :
      PK_Copy(&PK_Ping, msgBuf);
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	4889      	ldr	r0, [pc, #548]	; (8004170 <acis_parse_command+0x2e4>)
 8003f4c:	f7fc ff06 	bl	8000d5c <PK_Copy>
      PK_Pong.RandomPong = PK_Ping.RandomPing;
 8003f50:	4b87      	ldr	r3, [pc, #540]	; (8004170 <acis_parse_command+0x2e4>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4a87      	ldr	r2, [pc, #540]	; (8004174 <acis_parse_command+0x2e8>)
 8003f56:	6053      	str	r3, [r2, #4]
      PK_Pong.Destination = xChaSrc;
 8003f58:	4a86      	ldr	r2, [pc, #536]	; (8004174 <acis_parse_command+0x2e8>)
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	7093      	strb	r3, [r2, #2]
      protPushSequence(&fifoSendingQueue, &PK_Pong, sizeof(PK_Pong));
 8003f5e:	2208      	movs	r2, #8
 8003f60:	4984      	ldr	r1, [pc, #528]	; (8004174 <acis_parse_command+0x2e8>)
 8003f62:	4882      	ldr	r0, [pc, #520]	; (800416c <acis_parse_command+0x2e0>)
 8003f64:	f007 f939 	bl	800b1da <protPushSequence>
      break;
 8003f68:	f000 bca7 	b.w	80048ba <acis_parse_command+0xa2e>

    case PK_PongID :
      PK_Copy(&PK_Pong, msgBuf);
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	4881      	ldr	r0, [pc, #516]	; (8004174 <acis_parse_command+0x2e8>)
 8003f70:	f7fc fef4 	bl	8000d5c <PK_Copy>
      (void)PK_Pong.RandomPong;
      break;
 8003f74:	f000 bca1 	b.w	80048ba <acis_parse_command+0xa2e>

    case PK_GeneralStatusRequestID :
      //PK_Copy(&PK_GeneralStatusRequest, msgBuf);
      PK_GeneralStatusResponse.Destination = xChaSrc;
 8003f78:	4a7f      	ldr	r2, [pc, #508]	; (8004178 <acis_parse_command+0x2ec>)
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	7093      	strb	r3, [r2, #2]
      PK_GeneralStatusResponse.RealRPM = csps_getrpm();
 8003f7e:	f003 fe13 	bl	8007ba8 <csps_getrpm>
 8003f82:	eef0 7a40 	vmov.f32	s15, s0
 8003f86:	4b7c      	ldr	r3, [pc, #496]	; (8004178 <acis_parse_command+0x2ec>)
 8003f88:	edc3 7a05 	vstr	s15, [r3, #20]
      PK_GeneralStatusResponse.RPM = csps_getrpmgui();
 8003f8c:	f003 fe1a 	bl	8007bc4 <csps_getrpmgui>
 8003f90:	eef0 7a40 	vmov.f32	s15, s0
 8003f94:	4b78      	ldr	r3, [pc, #480]	; (8004178 <acis_parse_command+0x2ec>)
 8003f96:	edc3 7a06 	vstr	s15, [r3, #24]
      PK_GeneralStatusResponse.Pressure = map_getpressure();
 8003f9a:	f004 fef9 	bl	8008d90 <map_getpressure>
 8003f9e:	eef0 7a40 	vmov.f32	s15, s0
 8003fa2:	4b75      	ldr	r3, [pc, #468]	; (8004178 <acis_parse_command+0x2ec>)
 8003fa4:	edc3 7a07 	vstr	s15, [r3, #28]
      PK_GeneralStatusResponse.Load = map_getpressure() / 110000.0f * 100.0f;
 8003fa8:	f004 fef2 	bl	8008d90 <map_getpressure>
 8003fac:	eef0 6a40 	vmov.f32	s13, s0
 8003fb0:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800417c <acis_parse_command+0x2f0>
 8003fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb8:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8004180 <acis_parse_command+0x2f4>
 8003fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fc0:	4b6d      	ldr	r3, [pc, #436]	; (8004178 <acis_parse_command+0x2ec>)
 8003fc2:	edc3 7a08 	vstr	s15, [r3, #32]
      PK_GeneralStatusResponse.IgnitionAngle = angle_ignite;
 8003fc6:	4b6f      	ldr	r3, [pc, #444]	; (8004184 <acis_parse_command+0x2f8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a6b      	ldr	r2, [pc, #428]	; (8004178 <acis_parse_command+0x2ec>)
 8003fcc:	6253      	str	r3, [r2, #36]	; 0x24
      PK_GeneralStatusResponse.Voltage = power_voltage;
 8003fce:	4b6e      	ldr	r3, [pc, #440]	; (8004188 <acis_parse_command+0x2fc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a69      	ldr	r2, [pc, #420]	; (8004178 <acis_parse_command+0x2ec>)
 8003fd4:	62d3      	str	r3, [r2, #44]	; 0x2c
      PK_GeneralStatusResponse.Temperature = engine_temperature;
 8003fd6:	4b6d      	ldr	r3, [pc, #436]	; (800418c <acis_parse_command+0x300>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a67      	ldr	r2, [pc, #412]	; (8004178 <acis_parse_command+0x2ec>)
 8003fdc:	6313      	str	r3, [r2, #48]	; 0x30
      PK_GeneralStatusResponse.valvenum = valve_current;
 8003fde:	4b6c      	ldr	r3, [pc, #432]	; (8004190 <acis_parse_command+0x304>)
 8003fe0:	781a      	ldrb	r2, [r3, #0]
 8003fe2:	4b65      	ldr	r3, [pc, #404]	; (8004178 <acis_parse_command+0x2ec>)
 8003fe4:	715a      	strb	r2, [r3, #5]
      PK_GeneralStatusResponse.check = csps_iserror() || (hall_error > 1.0f) || PK_GeneralStatusResponse.Load == 0.0f;
 8003fe6:	f003 fe2f 	bl	8007c48 <csps_iserror>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d111      	bne.n	8004014 <acis_parse_command+0x188>
 8003ff0:	4b68      	ldr	r3, [pc, #416]	; (8004194 <acis_parse_command+0x308>)
 8003ff2:	edd3 7a00 	vldr	s15, [r3]
 8003ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004002:	dc07      	bgt.n	8004014 <acis_parse_command+0x188>
 8004004:	4b5c      	ldr	r3, [pc, #368]	; (8004178 <acis_parse_command+0x2ec>)
 8004006:	edd3 7a08 	vldr	s15, [r3, #32]
 800400a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800400e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004012:	d101      	bne.n	8004018 <acis_parse_command+0x18c>
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <acis_parse_command+0x18e>
 8004018:	2300      	movs	r3, #0
 800401a:	b2da      	uxtb	r2, r3
 800401c:	4b56      	ldr	r3, [pc, #344]	; (8004178 <acis_parse_command+0x2ec>)
 800401e:	719a      	strb	r2, [r3, #6]
      PK_GeneralStatusResponse.tablenum = table_current;
 8004020:	4b5d      	ldr	r3, [pc, #372]	; (8004198 <acis_parse_command+0x30c>)
 8004022:	781a      	ldrb	r2, [r3, #0]
 8004024:	4b54      	ldr	r3, [pc, #336]	; (8004178 <acis_parse_command+0x2ec>)
 8004026:	711a      	strb	r2, [r3, #4]
      strcpy(PK_GeneralStatusResponse.tablename, PK_GeneralStatusResponse.tablenum < TABLE_SETUPS_MAX ? (char*)acis_config.tables[PK_GeneralStatusResponse.tablenum].name : (char*)"");
 8004028:	4b53      	ldr	r3, [pc, #332]	; (8004178 <acis_parse_command+0x2ec>)
 800402a:	791b      	ldrb	r3, [r3, #4]
 800402c:	2b03      	cmp	r3, #3
 800402e:	d80a      	bhi.n	8004046 <acis_parse_command+0x1ba>
 8004030:	4b51      	ldr	r3, [pc, #324]	; (8004178 <acis_parse_command+0x2ec>)
 8004032:	791b      	ldrb	r3, [r3, #4]
 8004034:	461a      	mov	r2, r3
 8004036:	f640 436c 	movw	r3, #3180	; 0xc6c
 800403a:	fb03 f302 	mul.w	r3, r3, r2
 800403e:	33e0      	adds	r3, #224	; 0xe0
 8004040:	4a56      	ldr	r2, [pc, #344]	; (800419c <acis_parse_command+0x310>)
 8004042:	4413      	add	r3, r2
 8004044:	e000      	b.n	8004048 <acis_parse_command+0x1bc>
 8004046:	4b56      	ldr	r3, [pc, #344]	; (80041a0 <acis_parse_command+0x314>)
 8004048:	4619      	mov	r1, r3
 800404a:	4856      	ldr	r0, [pc, #344]	; (80041a4 <acis_parse_command+0x318>)
 800404c:	f00d fc01 	bl	8011852 <strcpy>
      protPushSequence(&fifoSendingQueue, &PK_GeneralStatusResponse, sizeof(PK_GeneralStatusResponse));
 8004050:	2234      	movs	r2, #52	; 0x34
 8004052:	4949      	ldr	r1, [pc, #292]	; (8004178 <acis_parse_command+0x2ec>)
 8004054:	4845      	ldr	r0, [pc, #276]	; (800416c <acis_parse_command+0x2e0>)
 8004056:	f007 f8c0 	bl	800b1da <protPushSequence>
      break;
 800405a:	f000 bc2e 	b.w	80048ba <acis_parse_command+0xa2e>

    case PK_TableMemoryRequestID :
      PK_Copy(&PK_TableMemoryRequest, msgBuf);
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	4851      	ldr	r0, [pc, #324]	; (80041a8 <acis_parse_command+0x31c>)
 8004062:	f7fc fe7b 	bl	8000d5c <PK_Copy>
      PK_TableMemoryData.Destination = xChaSrc;
 8004066:	4a51      	ldr	r2, [pc, #324]	; (80041ac <acis_parse_command+0x320>)
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	7093      	strb	r3, [r2, #2]
      offset = PK_TableMemoryData.offset = PK_TableMemoryRequest.offset;
 800406c:	4b4e      	ldr	r3, [pc, #312]	; (80041a8 <acis_parse_command+0x31c>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4a4e      	ldr	r2, [pc, #312]	; (80041ac <acis_parse_command+0x320>)
 8004072:	6113      	str	r3, [r2, #16]
 8004074:	4b4d      	ldr	r3, [pc, #308]	; (80041ac <acis_parse_command+0x320>)
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	62bb      	str	r3, [r7, #40]	; 0x28
      size = PK_TableMemoryData.size = PK_TableMemoryRequest.size;
 800407a:	4b4b      	ldr	r3, [pc, #300]	; (80041a8 <acis_parse_command+0x31c>)
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	4a4b      	ldr	r2, [pc, #300]	; (80041ac <acis_parse_command+0x320>)
 8004080:	6153      	str	r3, [r2, #20]
 8004082:	4b4a      	ldr	r3, [pc, #296]	; (80041ac <acis_parse_command+0x320>)
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
      table = PK_TableMemoryData.table = PK_TableMemoryRequest.table;
 8004088:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <acis_parse_command+0x31c>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	4a47      	ldr	r2, [pc, #284]	; (80041ac <acis_parse_command+0x320>)
 800408e:	6093      	str	r3, [r2, #8]
 8004090:	4b46      	ldr	r3, [pc, #280]	; (80041ac <acis_parse_command+0x320>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	61bb      	str	r3, [r7, #24]
      tablesize = PK_TableMemoryData.tablesize = PK_TableMemoryRequest.tablesize;
 8004096:	4b44      	ldr	r3, [pc, #272]	; (80041a8 <acis_parse_command+0x31c>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	4a44      	ldr	r2, [pc, #272]	; (80041ac <acis_parse_command+0x320>)
 800409c:	60d3      	str	r3, [r2, #12]
 800409e:	4b43      	ldr	r3, [pc, #268]	; (80041ac <acis_parse_command+0x320>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	617b      	str	r3, [r7, #20]
      PK_TableMemoryData.ErrorCode = 0;
 80040a4:	4b41      	ldr	r3, [pc, #260]	; (80041ac <acis_parse_command+0x320>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	605a      	str	r2, [r3, #4]

      if(tablesize != sizeof(sAcisIgnTable))
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f640 426c 	movw	r2, #3180	; 0xc6c
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d002      	beq.n	80040ba <acis_parse_command+0x22e>
        PK_TableMemoryData.ErrorCode = 1;
 80040b4:	4b3d      	ldr	r3, [pc, #244]	; (80041ac <acis_parse_command+0x320>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	605a      	str	r2, [r3, #4]

      if(size + offset > sizeof(sAcisIgnTable))
 80040ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040be:	4413      	add	r3, r2
 80040c0:	f640 426c 	movw	r2, #3180	; 0xc6c
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d902      	bls.n	80040ce <acis_parse_command+0x242>
        PK_TableMemoryData.ErrorCode = 2;
 80040c8:	4b38      	ldr	r3, [pc, #224]	; (80041ac <acis_parse_command+0x320>)
 80040ca:	2202      	movs	r2, #2
 80040cc:	605a      	str	r2, [r3, #4]

      if(size > PACKET_TABLE_MAX_SIZE || size > sizeof(sAcisIgnTable))
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	2be0      	cmp	r3, #224	; 0xe0
 80040d2:	d804      	bhi.n	80040de <acis_parse_command+0x252>
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	f640 426c 	movw	r2, #3180	; 0xc6c
 80040da:	4293      	cmp	r3, r2
 80040dc:	d902      	bls.n	80040e4 <acis_parse_command+0x258>
        PK_TableMemoryData.ErrorCode = 3;
 80040de:	4b33      	ldr	r3, [pc, #204]	; (80041ac <acis_parse_command+0x320>)
 80040e0:	2203      	movs	r2, #3
 80040e2:	605a      	str	r2, [r3, #4]

      if(table >= TABLE_SETUPS_MAX)
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d902      	bls.n	80040f0 <acis_parse_command+0x264>
        PK_TableMemoryData.ErrorCode = 4;
 80040ea:	4b30      	ldr	r3, [pc, #192]	; (80041ac <acis_parse_command+0x320>)
 80040ec:	2204      	movs	r2, #4
 80040ee:	605a      	str	r2, [r3, #4]

      if(PK_TableMemoryData.ErrorCode == 0)
 80040f0:	4b2e      	ldr	r3, [pc, #184]	; (80041ac <acis_parse_command+0x320>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d123      	bne.n	8004140 <acis_parse_command+0x2b4>
      {
        memcpy(&PK_TableMemoryData.data[0], &((uint8_t*)&acis_config.tables[table])[offset], size);
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f640 426c 	movw	r2, #3180	; 0xc6c
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	33e0      	adds	r3, #224	; 0xe0
 8004104:	4a25      	ldr	r2, [pc, #148]	; (800419c <acis_parse_command+0x310>)
 8004106:	441a      	add	r2, r3
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	4413      	add	r3, r2
 800410c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410e:	4619      	mov	r1, r3
 8004110:	4827      	ldr	r0, [pc, #156]	; (80041b0 <acis_parse_command+0x324>)
 8004112:	f00d fb8b 	bl	801182c <memcpy>
        memset(&PK_TableMemoryData.data[size], 0, sizeof(PK_TableMemoryData.data) - size);
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	3318      	adds	r3, #24
 800411a:	4a24      	ldr	r2, [pc, #144]	; (80041ac <acis_parse_command+0x320>)
 800411c:	4413      	add	r3, r2
 800411e:	1c98      	adds	r0, r3, #2
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	f1c3 03e0 	rsb	r3, r3, #224	; 0xe0
 8004126:	461a      	mov	r2, r3
 8004128:	2100      	movs	r1, #0
 800412a:	f00d fb8a 	bl	8011842 <memset>
        PK_TableMemoryData.crc = CRC16_Generate(PK_TableMemoryData.data, sizeof(PK_TableMemoryData.data));
 800412e:	21e0      	movs	r1, #224	; 0xe0
 8004130:	481f      	ldr	r0, [pc, #124]	; (80041b0 <acis_parse_command+0x324>)
 8004132:	f003 f84d 	bl	80071d0 <CRC16_Generate>
 8004136:	4603      	mov	r3, r0
 8004138:	461a      	mov	r2, r3
 800413a:	4b1c      	ldr	r3, [pc, #112]	; (80041ac <acis_parse_command+0x320>)
 800413c:	831a      	strh	r2, [r3, #24]
 800413e:	e007      	b.n	8004150 <acis_parse_command+0x2c4>
      }
      else
      {
        memset(&PK_TableMemoryData.data[0], 0, sizeof(PK_TableMemoryData.data));
 8004140:	22e0      	movs	r2, #224	; 0xe0
 8004142:	2100      	movs	r1, #0
 8004144:	481a      	ldr	r0, [pc, #104]	; (80041b0 <acis_parse_command+0x324>)
 8004146:	f00d fb7c 	bl	8011842 <memset>
        PK_TableMemoryData.crc = 0;
 800414a:	4b18      	ldr	r3, [pc, #96]	; (80041ac <acis_parse_command+0x320>)
 800414c:	2200      	movs	r2, #0
 800414e:	831a      	strh	r2, [r3, #24]
      }
      protPushSequence(&fifoSendingQueue, &PK_TableMemoryData, sizeof(PK_TableMemoryData));
 8004150:	22fc      	movs	r2, #252	; 0xfc
 8004152:	4916      	ldr	r1, [pc, #88]	; (80041ac <acis_parse_command+0x320>)
 8004154:	4805      	ldr	r0, [pc, #20]	; (800416c <acis_parse_command+0x2e0>)
 8004156:	f007 f840 	bl	800b1da <protPushSequence>
      break;
 800415a:	e3ae      	b.n	80048ba <acis_parse_command+0xa2e>
 800415c:	40000c00 	.word	0x40000c00
 8004160:	2002112c 	.word	0x2002112c
 8004164:	0007a120 	.word	0x0007a120
 8004168:	20010480 	.word	0x20010480
 800416c:	200210ec 	.word	0x200210ec
 8004170:	20010000 	.word	0x20010000
 8004174:	20010020 	.word	0x20010020
 8004178:	20010040 	.word	0x20010040
 800417c:	47d6d800 	.word	0x47d6d800
 8004180:	42c80000 	.word	0x42c80000
 8004184:	20011928 	.word	0x20011928
 8004188:	20011938 	.word	0x20011938
 800418c:	20011934 	.word	0x20011934
 8004190:	20011931 	.word	0x20011931
 8004194:	2001191c 	.word	0x2001191c
 8004198:	20011930 	.word	0x20011930
 800419c:	20021480 	.word	0x20021480
 80041a0:	0801192c 	.word	0x0801192c
 80041a4:	20010047 	.word	0x20010047
 80041a8:	20010080 	.word	0x20010080
 80041ac:	200100a0 	.word	0x200100a0
 80041b0:	200100ba 	.word	0x200100ba

    case PK_TableMemoryDataID :
      PK_Copy(&PK_TableMemoryData, msgBuf);
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	4899      	ldr	r0, [pc, #612]	; (800441c <acis_parse_command+0x590>)
 80041b8:	f7fc fdd0 	bl	8000d5c <PK_Copy>
      PK_TableMemoryAcknowledge.Destination = xChaSrc;
 80041bc:	4a98      	ldr	r2, [pc, #608]	; (8004420 <acis_parse_command+0x594>)
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	7093      	strb	r3, [r2, #2]
      offset = PK_TableMemoryAcknowledge.offset = PK_TableMemoryData.offset;
 80041c2:	4b96      	ldr	r3, [pc, #600]	; (800441c <acis_parse_command+0x590>)
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	4a96      	ldr	r2, [pc, #600]	; (8004420 <acis_parse_command+0x594>)
 80041c8:	6113      	str	r3, [r2, #16]
 80041ca:	4b95      	ldr	r3, [pc, #596]	; (8004420 <acis_parse_command+0x594>)
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	62bb      	str	r3, [r7, #40]	; 0x28
      size = PK_TableMemoryAcknowledge.size = PK_TableMemoryData.size;
 80041d0:	4b92      	ldr	r3, [pc, #584]	; (800441c <acis_parse_command+0x590>)
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	4a92      	ldr	r2, [pc, #584]	; (8004420 <acis_parse_command+0x594>)
 80041d6:	6153      	str	r3, [r2, #20]
 80041d8:	4b91      	ldr	r3, [pc, #580]	; (8004420 <acis_parse_command+0x594>)
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
      table = PK_TableMemoryAcknowledge.table = PK_TableMemoryData.table;
 80041de:	4b8f      	ldr	r3, [pc, #572]	; (800441c <acis_parse_command+0x590>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	4a8f      	ldr	r2, [pc, #572]	; (8004420 <acis_parse_command+0x594>)
 80041e4:	6093      	str	r3, [r2, #8]
 80041e6:	4b8e      	ldr	r3, [pc, #568]	; (8004420 <acis_parse_command+0x594>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	61bb      	str	r3, [r7, #24]
      tablesize = PK_TableMemoryAcknowledge.tablesize = PK_TableMemoryData.tablesize;
 80041ec:	4b8b      	ldr	r3, [pc, #556]	; (800441c <acis_parse_command+0x590>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4a8b      	ldr	r2, [pc, #556]	; (8004420 <acis_parse_command+0x594>)
 80041f2:	60d3      	str	r3, [r2, #12]
 80041f4:	4b8a      	ldr	r3, [pc, #552]	; (8004420 <acis_parse_command+0x594>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	617b      	str	r3, [r7, #20]
      PK_TableMemoryAcknowledge.ErrorCode = 0;
 80041fa:	4b89      	ldr	r3, [pc, #548]	; (8004420 <acis_parse_command+0x594>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	605a      	str	r2, [r3, #4]

      if(tablesize != sizeof(sAcisIgnTable))
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f640 426c 	movw	r2, #3180	; 0xc6c
 8004206:	4293      	cmp	r3, r2
 8004208:	d002      	beq.n	8004210 <acis_parse_command+0x384>
        PK_TableMemoryAcknowledge.ErrorCode = 1;
 800420a:	4b85      	ldr	r3, [pc, #532]	; (8004420 <acis_parse_command+0x594>)
 800420c:	2201      	movs	r2, #1
 800420e:	605a      	str	r2, [r3, #4]

      if(size + offset > sizeof(sAcisIgnTable))
 8004210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	4413      	add	r3, r2
 8004216:	f640 426c 	movw	r2, #3180	; 0xc6c
 800421a:	4293      	cmp	r3, r2
 800421c:	d902      	bls.n	8004224 <acis_parse_command+0x398>
        PK_TableMemoryAcknowledge.ErrorCode = 2;
 800421e:	4b80      	ldr	r3, [pc, #512]	; (8004420 <acis_parse_command+0x594>)
 8004220:	2202      	movs	r2, #2
 8004222:	605a      	str	r2, [r3, #4]

      if(size > PACKET_TABLE_MAX_SIZE || size > sizeof(sAcisIgnTable))
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	2be0      	cmp	r3, #224	; 0xe0
 8004228:	d804      	bhi.n	8004234 <acis_parse_command+0x3a8>
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	f640 426c 	movw	r2, #3180	; 0xc6c
 8004230:	4293      	cmp	r3, r2
 8004232:	d902      	bls.n	800423a <acis_parse_command+0x3ae>
        PK_TableMemoryAcknowledge.ErrorCode = 3;
 8004234:	4b7a      	ldr	r3, [pc, #488]	; (8004420 <acis_parse_command+0x594>)
 8004236:	2203      	movs	r2, #3
 8004238:	605a      	str	r2, [r3, #4]

      if(table >= TABLE_SETUPS_MAX)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b03      	cmp	r3, #3
 800423e:	d902      	bls.n	8004246 <acis_parse_command+0x3ba>
        PK_TableMemoryAcknowledge.ErrorCode = 4;
 8004240:	4b77      	ldr	r3, [pc, #476]	; (8004420 <acis_parse_command+0x594>)
 8004242:	2204      	movs	r2, #4
 8004244:	605a      	str	r2, [r3, #4]

      if(PK_TableMemoryAcknowledge.ErrorCode == 0)
 8004246:	4b76      	ldr	r3, [pc, #472]	; (8004420 <acis_parse_command+0x594>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d11d      	bne.n	800428a <acis_parse_command+0x3fe>
      {
        uint16_t crc = CRC16_Generate(PK_TableMemoryData.data, sizeof(PK_TableMemoryData.data));
 800424e:	21e0      	movs	r1, #224	; 0xe0
 8004250:	4874      	ldr	r0, [pc, #464]	; (8004424 <acis_parse_command+0x598>)
 8004252:	f002 ffbd 	bl	80071d0 <CRC16_Generate>
 8004256:	4603      	mov	r3, r0
 8004258:	827b      	strh	r3, [r7, #18]
        if(crc == PK_TableMemoryData.crc)
 800425a:	4b70      	ldr	r3, [pc, #448]	; (800441c <acis_parse_command+0x590>)
 800425c:	8b1b      	ldrh	r3, [r3, #24]
 800425e:	8a7a      	ldrh	r2, [r7, #18]
 8004260:	429a      	cmp	r2, r3
 8004262:	d10f      	bne.n	8004284 <acis_parse_command+0x3f8>
        {
          memcpy(&((uint8_t*)&acis_config.tables[table])[offset], &PK_TableMemoryData.data[0], size);
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	f640 426c 	movw	r2, #3180	; 0xc6c
 800426a:	fb02 f303 	mul.w	r3, r2, r3
 800426e:	33e0      	adds	r3, #224	; 0xe0
 8004270:	4a6d      	ldr	r2, [pc, #436]	; (8004428 <acis_parse_command+0x59c>)
 8004272:	441a      	add	r2, r3
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	4413      	add	r3, r2
 8004278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427a:	496a      	ldr	r1, [pc, #424]	; (8004424 <acis_parse_command+0x598>)
 800427c:	4618      	mov	r0, r3
 800427e:	f00d fad5 	bl	801182c <memcpy>
 8004282:	e002      	b.n	800428a <acis_parse_command+0x3fe>
        }
        else
          PK_TableMemoryAcknowledge.ErrorCode = 5;
 8004284:	4b66      	ldr	r3, [pc, #408]	; (8004420 <acis_parse_command+0x594>)
 8004286:	2205      	movs	r2, #5
 8004288:	605a      	str	r2, [r3, #4]
      }

      protPushSequence(&fifoSendingQueue, &PK_TableMemoryAcknowledge, sizeof(PK_TableMemoryAcknowledge));
 800428a:	2218      	movs	r2, #24
 800428c:	4964      	ldr	r1, [pc, #400]	; (8004420 <acis_parse_command+0x594>)
 800428e:	4867      	ldr	r0, [pc, #412]	; (800442c <acis_parse_command+0x5a0>)
 8004290:	f006 ffa3 	bl	800b1da <protPushSequence>
      break;
 8004294:	e311      	b.n	80048ba <acis_parse_command+0xa2e>

    case PK_ConfigMemoryRequestID :
      PK_Copy(&PK_ConfigMemoryRequest, msgBuf);
 8004296:	68b9      	ldr	r1, [r7, #8]
 8004298:	4865      	ldr	r0, [pc, #404]	; (8004430 <acis_parse_command+0x5a4>)
 800429a:	f7fc fd5f 	bl	8000d5c <PK_Copy>
      PK_ConfigMemoryData.Destination = xChaSrc;
 800429e:	4a65      	ldr	r2, [pc, #404]	; (8004434 <acis_parse_command+0x5a8>)
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	7093      	strb	r3, [r2, #2]
      offset = PK_ConfigMemoryData.offset = PK_ConfigMemoryRequest.offset;
 80042a4:	4b62      	ldr	r3, [pc, #392]	; (8004430 <acis_parse_command+0x5a4>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4a62      	ldr	r2, [pc, #392]	; (8004434 <acis_parse_command+0x5a8>)
 80042aa:	60d3      	str	r3, [r2, #12]
 80042ac:	4b61      	ldr	r3, [pc, #388]	; (8004434 <acis_parse_command+0x5a8>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	62bb      	str	r3, [r7, #40]	; 0x28
      size = PK_ConfigMemoryData.size = PK_ConfigMemoryRequest.size;
 80042b2:	4b5f      	ldr	r3, [pc, #380]	; (8004430 <acis_parse_command+0x5a4>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	4a5f      	ldr	r2, [pc, #380]	; (8004434 <acis_parse_command+0x5a8>)
 80042b8:	6113      	str	r3, [r2, #16]
 80042ba:	4b5e      	ldr	r3, [pc, #376]	; (8004434 <acis_parse_command+0x5a8>)
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
      configsize = PK_ConfigMemoryData.configsize = PK_ConfigMemoryRequest.configsize;
 80042c0:	4b5b      	ldr	r3, [pc, #364]	; (8004430 <acis_parse_command+0x5a4>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4a5b      	ldr	r2, [pc, #364]	; (8004434 <acis_parse_command+0x5a8>)
 80042c6:	6093      	str	r3, [r2, #8]
 80042c8:	4b5a      	ldr	r3, [pc, #360]	; (8004434 <acis_parse_command+0x5a8>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	623b      	str	r3, [r7, #32]
      PK_ConfigMemoryData.ErrorCode = 0;
 80042ce:	4b59      	ldr	r3, [pc, #356]	; (8004434 <acis_parse_command+0x5a8>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	605a      	str	r2, [r3, #4]

      if(configsize != realconfigsize)
 80042d4:	6a3a      	ldr	r2, [r7, #32]
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	429a      	cmp	r2, r3
 80042da:	d002      	beq.n	80042e2 <acis_parse_command+0x456>
        PK_ConfigMemoryData.ErrorCode = 1;
 80042dc:	4b55      	ldr	r3, [pc, #340]	; (8004434 <acis_parse_command+0x5a8>)
 80042de:	2201      	movs	r2, #1
 80042e0:	605a      	str	r2, [r3, #4]

      if(size + offset > realconfigsize)
 80042e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e6:	4413      	add	r3, r2
 80042e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d202      	bcs.n	80042f4 <acis_parse_command+0x468>
        PK_ConfigMemoryData.ErrorCode = 2;
 80042ee:	4b51      	ldr	r3, [pc, #324]	; (8004434 <acis_parse_command+0x5a8>)
 80042f0:	2202      	movs	r2, #2
 80042f2:	605a      	str	r2, [r3, #4]

      if(size > realconfigsize || size > PACKET_CONFIG_MAX_SIZE)
 80042f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d802      	bhi.n	8004302 <acis_parse_command+0x476>
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	2bd4      	cmp	r3, #212	; 0xd4
 8004300:	d902      	bls.n	8004308 <acis_parse_command+0x47c>
        PK_ConfigMemoryData.ErrorCode = 3;
 8004302:	4b4c      	ldr	r3, [pc, #304]	; (8004434 <acis_parse_command+0x5a8>)
 8004304:	2203      	movs	r2, #3
 8004306:	605a      	str	r2, [r3, #4]

      if(PK_ConfigMemoryData.ErrorCode == 0)
 8004308:	4b4a      	ldr	r3, [pc, #296]	; (8004434 <acis_parse_command+0x5a8>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d11c      	bne.n	800434a <acis_parse_command+0x4be>
      {
        memcpy(&PK_ConfigMemoryData.data[0], &((uint8_t*)&acis_config)[offset], size);
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	4a45      	ldr	r2, [pc, #276]	; (8004428 <acis_parse_command+0x59c>)
 8004314:	4413      	add	r3, r2
 8004316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004318:	4619      	mov	r1, r3
 800431a:	4847      	ldr	r0, [pc, #284]	; (8004438 <acis_parse_command+0x5ac>)
 800431c:	f00d fa86 	bl	801182c <memcpy>
        memset(&PK_ConfigMemoryData.data[size], 0, sizeof(PK_ConfigMemoryData.data) - size);
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	3310      	adds	r3, #16
 8004324:	4a43      	ldr	r2, [pc, #268]	; (8004434 <acis_parse_command+0x5a8>)
 8004326:	4413      	add	r3, r2
 8004328:	1d98      	adds	r0, r3, #6
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	f1c3 03d4 	rsb	r3, r3, #212	; 0xd4
 8004330:	461a      	mov	r2, r3
 8004332:	2100      	movs	r1, #0
 8004334:	f00d fa85 	bl	8011842 <memset>
        PK_ConfigMemoryData.crc = CRC16_Generate(PK_ConfigMemoryData.data, sizeof(PK_ConfigMemoryData.data));
 8004338:	21d4      	movs	r1, #212	; 0xd4
 800433a:	483f      	ldr	r0, [pc, #252]	; (8004438 <acis_parse_command+0x5ac>)
 800433c:	f002 ff48 	bl	80071d0 <CRC16_Generate>
 8004340:	4603      	mov	r3, r0
 8004342:	461a      	mov	r2, r3
 8004344:	4b3b      	ldr	r3, [pc, #236]	; (8004434 <acis_parse_command+0x5a8>)
 8004346:	829a      	strh	r2, [r3, #20]
 8004348:	e007      	b.n	800435a <acis_parse_command+0x4ce>
      }
      else
      {
        memset(&PK_ConfigMemoryData.data[0], 0, sizeof(PK_ConfigMemoryData.data));
 800434a:	22d4      	movs	r2, #212	; 0xd4
 800434c:	2100      	movs	r1, #0
 800434e:	483a      	ldr	r0, [pc, #232]	; (8004438 <acis_parse_command+0x5ac>)
 8004350:	f00d fa77 	bl	8011842 <memset>
        PK_ConfigMemoryData.crc = 0;
 8004354:	4b37      	ldr	r3, [pc, #220]	; (8004434 <acis_parse_command+0x5a8>)
 8004356:	2200      	movs	r2, #0
 8004358:	829a      	strh	r2, [r3, #20]
      }
      protPushSequence(&fifoSendingQueue, &PK_ConfigMemoryData, sizeof(PK_ConfigMemoryData));
 800435a:	22ec      	movs	r2, #236	; 0xec
 800435c:	4935      	ldr	r1, [pc, #212]	; (8004434 <acis_parse_command+0x5a8>)
 800435e:	4833      	ldr	r0, [pc, #204]	; (800442c <acis_parse_command+0x5a0>)
 8004360:	f006 ff3b 	bl	800b1da <protPushSequence>
      break;
 8004364:	e2a9      	b.n	80048ba <acis_parse_command+0xa2e>

    case PK_ConfigMemoryDataID :
      PK_Copy(&PK_ConfigMemoryData, msgBuf);
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	4832      	ldr	r0, [pc, #200]	; (8004434 <acis_parse_command+0x5a8>)
 800436a:	f7fc fcf7 	bl	8000d5c <PK_Copy>
      PK_ConfigMemoryAcknowledge.Destination = xChaSrc;
 800436e:	4a33      	ldr	r2, [pc, #204]	; (800443c <acis_parse_command+0x5b0>)
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	7093      	strb	r3, [r2, #2]
      offset = PK_ConfigMemoryAcknowledge.offset = PK_ConfigMemoryData.offset;
 8004374:	4b2f      	ldr	r3, [pc, #188]	; (8004434 <acis_parse_command+0x5a8>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4a30      	ldr	r2, [pc, #192]	; (800443c <acis_parse_command+0x5b0>)
 800437a:	60d3      	str	r3, [r2, #12]
 800437c:	4b2f      	ldr	r3, [pc, #188]	; (800443c <acis_parse_command+0x5b0>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
      size = PK_ConfigMemoryAcknowledge.size = PK_ConfigMemoryData.size;
 8004382:	4b2c      	ldr	r3, [pc, #176]	; (8004434 <acis_parse_command+0x5a8>)
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	4a2d      	ldr	r2, [pc, #180]	; (800443c <acis_parse_command+0x5b0>)
 8004388:	6113      	str	r3, [r2, #16]
 800438a:	4b2c      	ldr	r3, [pc, #176]	; (800443c <acis_parse_command+0x5b0>)
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
      configsize = PK_ConfigMemoryAcknowledge.configsize = PK_ConfigMemoryData.configsize;
 8004390:	4b28      	ldr	r3, [pc, #160]	; (8004434 <acis_parse_command+0x5a8>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4a29      	ldr	r2, [pc, #164]	; (800443c <acis_parse_command+0x5b0>)
 8004396:	6093      	str	r3, [r2, #8]
 8004398:	4b28      	ldr	r3, [pc, #160]	; (800443c <acis_parse_command+0x5b0>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	623b      	str	r3, [r7, #32]
      PK_ConfigMemoryAcknowledge.ErrorCode = 0;
 800439e:	4b27      	ldr	r3, [pc, #156]	; (800443c <acis_parse_command+0x5b0>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	605a      	str	r2, [r3, #4]

      if(configsize != realconfigsize)
 80043a4:	6a3a      	ldr	r2, [r7, #32]
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d002      	beq.n	80043b2 <acis_parse_command+0x526>
        PK_ConfigMemoryData.ErrorCode = 1;
 80043ac:	4b21      	ldr	r3, [pc, #132]	; (8004434 <acis_parse_command+0x5a8>)
 80043ae:	2201      	movs	r2, #1
 80043b0:	605a      	str	r2, [r3, #4]

      if(size + offset > realconfigsize)
 80043b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	4413      	add	r3, r2
 80043b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d202      	bcs.n	80043c4 <acis_parse_command+0x538>
        PK_ConfigMemoryData.ErrorCode = 2;
 80043be:	4b1d      	ldr	r3, [pc, #116]	; (8004434 <acis_parse_command+0x5a8>)
 80043c0:	2202      	movs	r2, #2
 80043c2:	605a      	str	r2, [r3, #4]

      if(size > realconfigsize || size > PACKET_CONFIG_MAX_SIZE)
 80043c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d802      	bhi.n	80043d2 <acis_parse_command+0x546>
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	2bd4      	cmp	r3, #212	; 0xd4
 80043d0:	d902      	bls.n	80043d8 <acis_parse_command+0x54c>
        PK_ConfigMemoryData.ErrorCode = 3;
 80043d2:	4b18      	ldr	r3, [pc, #96]	; (8004434 <acis_parse_command+0x5a8>)
 80043d4:	2203      	movs	r2, #3
 80043d6:	605a      	str	r2, [r3, #4]

      if(PK_ConfigMemoryAcknowledge.ErrorCode == 0)
 80043d8:	4b18      	ldr	r3, [pc, #96]	; (800443c <acis_parse_command+0x5b0>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d116      	bne.n	800440e <acis_parse_command+0x582>
      {
        uint16_t crc = CRC16_Generate(PK_ConfigMemoryData.data, sizeof(PK_ConfigMemoryData.data));
 80043e0:	21d4      	movs	r1, #212	; 0xd4
 80043e2:	4815      	ldr	r0, [pc, #84]	; (8004438 <acis_parse_command+0x5ac>)
 80043e4:	f002 fef4 	bl	80071d0 <CRC16_Generate>
 80043e8:	4603      	mov	r3, r0
 80043ea:	83fb      	strh	r3, [r7, #30]
        if(crc == PK_ConfigMemoryData.crc)
 80043ec:	4b11      	ldr	r3, [pc, #68]	; (8004434 <acis_parse_command+0x5a8>)
 80043ee:	8a9b      	ldrh	r3, [r3, #20]
 80043f0:	8bfa      	ldrh	r2, [r7, #30]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d108      	bne.n	8004408 <acis_parse_command+0x57c>
        {
          memcpy(&((uint8_t*)&acis_config)[offset], &PK_ConfigMemoryData.data[0], size);
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	4a0b      	ldr	r2, [pc, #44]	; (8004428 <acis_parse_command+0x59c>)
 80043fa:	4413      	add	r3, r2
 80043fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fe:	490e      	ldr	r1, [pc, #56]	; (8004438 <acis_parse_command+0x5ac>)
 8004400:	4618      	mov	r0, r3
 8004402:	f00d fa13 	bl	801182c <memcpy>
 8004406:	e002      	b.n	800440e <acis_parse_command+0x582>
        }
        else
          PK_ConfigMemoryAcknowledge.ErrorCode = 5;
 8004408:	4b0c      	ldr	r3, [pc, #48]	; (800443c <acis_parse_command+0x5b0>)
 800440a:	2205      	movs	r2, #5
 800440c:	605a      	str	r2, [r3, #4]
      }

      protPushSequence(&fifoSendingQueue, &PK_ConfigMemoryAcknowledge, sizeof(PK_ConfigMemoryAcknowledge));
 800440e:	2214      	movs	r2, #20
 8004410:	490a      	ldr	r1, [pc, #40]	; (800443c <acis_parse_command+0x5b0>)
 8004412:	4806      	ldr	r0, [pc, #24]	; (800442c <acis_parse_command+0x5a0>)
 8004414:	f006 fee1 	bl	800b1da <protPushSequence>
      break;
 8004418:	e24f      	b.n	80048ba <acis_parse_command+0xa2e>
 800441a:	bf00      	nop
 800441c:	200100a0 	.word	0x200100a0
 8004420:	200101a0 	.word	0x200101a0
 8004424:	200100ba 	.word	0x200100ba
 8004428:	20021480 	.word	0x20021480
 800442c:	200210ec 	.word	0x200210ec
 8004430:	200101c0 	.word	0x200101c0
 8004434:	200101e0 	.word	0x200101e0
 8004438:	200101f6 	.word	0x200101f6
 800443c:	200102e0 	.word	0x200102e0

    case PK_SaveConfigID :
      if(!savereq)
 8004440:	4ba8      	ldr	r3, [pc, #672]	; (80046e4 <acis_parse_command+0x858>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <acis_parse_command+0x5ca>
      {
        savereqsrc = xChaSrc;
 8004448:	4aa7      	ldr	r2, [pc, #668]	; (80046e8 <acis_parse_command+0x85c>)
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	7013      	strb	r3, [r2, #0]
        savereq = 1;
 800444e:	4ba5      	ldr	r3, [pc, #660]	; (80046e4 <acis_parse_command+0x858>)
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]
      {
        PK_SaveConfigAcknowledge.Destination = xChaSrc;
        PK_SaveConfigAcknowledge.ErrorCode = 2;
        protPushSequence(&fifoSendingQueue, &PK_SaveConfigAcknowledge, sizeof(PK_SaveConfigAcknowledge));
      }
      break;
 8004454:	e231      	b.n	80048ba <acis_parse_command+0xa2e>
        PK_SaveConfigAcknowledge.Destination = xChaSrc;
 8004456:	4aa5      	ldr	r2, [pc, #660]	; (80046ec <acis_parse_command+0x860>)
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	7093      	strb	r3, [r2, #2]
        PK_SaveConfigAcknowledge.ErrorCode = 2;
 800445c:	4ba3      	ldr	r3, [pc, #652]	; (80046ec <acis_parse_command+0x860>)
 800445e:	2202      	movs	r2, #2
 8004460:	605a      	str	r2, [r3, #4]
        protPushSequence(&fifoSendingQueue, &PK_SaveConfigAcknowledge, sizeof(PK_SaveConfigAcknowledge));
 8004462:	2208      	movs	r2, #8
 8004464:	49a1      	ldr	r1, [pc, #644]	; (80046ec <acis_parse_command+0x860>)
 8004466:	48a2      	ldr	r0, [pc, #648]	; (80046f0 <acis_parse_command+0x864>)
 8004468:	f006 feb7 	bl	800b1da <protPushSequence>
      break;
 800446c:	e225      	b.n	80048ba <acis_parse_command+0xa2e>


    case PK_RestoreConfigID :
      if(!loadreq)
 800446e:	4ba1      	ldr	r3, [pc, #644]	; (80046f4 <acis_parse_command+0x868>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <acis_parse_command+0x5f8>
      {
        loadreqsrc = xChaSrc;
 8004476:	4aa0      	ldr	r2, [pc, #640]	; (80046f8 <acis_parse_command+0x86c>)
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	7013      	strb	r3, [r2, #0]
        loadreq = 1;
 800447c:	4b9d      	ldr	r3, [pc, #628]	; (80046f4 <acis_parse_command+0x868>)
 800447e:	2201      	movs	r2, #1
 8004480:	701a      	strb	r2, [r3, #0]
      {
        PK_RestoreConfigAcknowledge.Destination = xChaSrc;
        PK_RestoreConfigAcknowledge.ErrorCode = 2;
        protPushSequence(&fifoSendingQueue, &PK_RestoreConfigAcknowledge, sizeof(PK_RestoreConfigAcknowledge));
      }
      break;
 8004482:	e21a      	b.n	80048ba <acis_parse_command+0xa2e>
        PK_RestoreConfigAcknowledge.Destination = xChaSrc;
 8004484:	4a9d      	ldr	r2, [pc, #628]	; (80046fc <acis_parse_command+0x870>)
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	7093      	strb	r3, [r2, #2]
        PK_RestoreConfigAcknowledge.ErrorCode = 2;
 800448a:	4b9c      	ldr	r3, [pc, #624]	; (80046fc <acis_parse_command+0x870>)
 800448c:	2202      	movs	r2, #2
 800448e:	605a      	str	r2, [r3, #4]
        protPushSequence(&fifoSendingQueue, &PK_RestoreConfigAcknowledge, sizeof(PK_RestoreConfigAcknowledge));
 8004490:	2208      	movs	r2, #8
 8004492:	499a      	ldr	r1, [pc, #616]	; (80046fc <acis_parse_command+0x870>)
 8004494:	4896      	ldr	r0, [pc, #600]	; (80046f0 <acis_parse_command+0x864>)
 8004496:	f006 fea0 	bl	800b1da <protPushSequence>
      break;
 800449a:	e20e      	b.n	80048ba <acis_parse_command+0xa2e>

    case PK_DragStartID :
      PK_Copy(&PK_DragStart, msgBuf);
 800449c:	68b9      	ldr	r1, [r7, #8]
 800449e:	4898      	ldr	r0, [pc, #608]	; (8004700 <acis_parse_command+0x874>)
 80044a0:	f7fc fc5c 	bl	8000d5c <PK_Copy>
      PK_DragStartAcknowledge.Destination = xChaSrc;
 80044a4:	4a97      	ldr	r2, [pc, #604]	; (8004704 <acis_parse_command+0x878>)
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	7093      	strb	r3, [r2, #2]
      DragFromRPM = PK_DragStartAcknowledge.FromRPM = PK_DragStart.FromRPM;
 80044aa:	4b95      	ldr	r3, [pc, #596]	; (8004700 <acis_parse_command+0x874>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4a95      	ldr	r2, [pc, #596]	; (8004704 <acis_parse_command+0x878>)
 80044b0:	6093      	str	r3, [r2, #8]
 80044b2:	4b94      	ldr	r3, [pc, #592]	; (8004704 <acis_parse_command+0x878>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	4a94      	ldr	r2, [pc, #592]	; (8004708 <acis_parse_command+0x87c>)
 80044b8:	6013      	str	r3, [r2, #0]
      DragToRPM = PK_DragStartAcknowledge.ToRPM = PK_DragStart.ToRPM;
 80044ba:	4b91      	ldr	r3, [pc, #580]	; (8004700 <acis_parse_command+0x874>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	4a91      	ldr	r2, [pc, #580]	; (8004704 <acis_parse_command+0x878>)
 80044c0:	60d3      	str	r3, [r2, #12]
 80044c2:	4b90      	ldr	r3, [pc, #576]	; (8004704 <acis_parse_command+0x878>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	4a91      	ldr	r2, [pc, #580]	; (800470c <acis_parse_command+0x880>)
 80044c8:	6013      	str	r3, [r2, #0]
      DragStarted = 0;
 80044ca:	4b91      	ldr	r3, [pc, #580]	; (8004710 <acis_parse_command+0x884>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]
      DragReady = 0;
 80044d0:	4b90      	ldr	r3, [pc, #576]	; (8004714 <acis_parse_command+0x888>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	701a      	strb	r2, [r3, #0]
      DragCompleted = 0;
 80044d6:	4b90      	ldr	r3, [pc, #576]	; (8004718 <acis_parse_command+0x88c>)
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]
      DragPointsCount = 0;
 80044dc:	4b8f      	ldr	r3, [pc, #572]	; (800471c <acis_parse_command+0x890>)
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
      DragStartTime = 0;
 80044e2:	4b8f      	ldr	r3, [pc, #572]	; (8004720 <acis_parse_command+0x894>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
      DragTimeLast = 0;
 80044e8:	4b8e      	ldr	r3, [pc, #568]	; (8004724 <acis_parse_command+0x898>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
      if(DragFromRPM > 100.0f && DragFromRPM < 20000.0f && DragToRPM > 100.0f && DragToRPM < 20000.0f && fabsf(DragFromRPM - DragToRPM) > 70.0f)
 80044ee:	4b86      	ldr	r3, [pc, #536]	; (8004708 <acis_parse_command+0x87c>)
 80044f0:	edd3 7a00 	vldr	s15, [r3]
 80044f4:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8004728 <acis_parse_command+0x89c>
 80044f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004500:	dd39      	ble.n	8004576 <acis_parse_command+0x6ea>
 8004502:	4b81      	ldr	r3, [pc, #516]	; (8004708 <acis_parse_command+0x87c>)
 8004504:	edd3 7a00 	vldr	s15, [r3]
 8004508:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800472c <acis_parse_command+0x8a0>
 800450c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004514:	d52f      	bpl.n	8004576 <acis_parse_command+0x6ea>
 8004516:	4b7d      	ldr	r3, [pc, #500]	; (800470c <acis_parse_command+0x880>)
 8004518:	edd3 7a00 	vldr	s15, [r3]
 800451c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8004728 <acis_parse_command+0x89c>
 8004520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004528:	dd25      	ble.n	8004576 <acis_parse_command+0x6ea>
 800452a:	4b78      	ldr	r3, [pc, #480]	; (800470c <acis_parse_command+0x880>)
 800452c:	edd3 7a00 	vldr	s15, [r3]
 8004530:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800472c <acis_parse_command+0x8a0>
 8004534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453c:	d51b      	bpl.n	8004576 <acis_parse_command+0x6ea>
 800453e:	4b72      	ldr	r3, [pc, #456]	; (8004708 <acis_parse_command+0x87c>)
 8004540:	ed93 7a00 	vldr	s14, [r3]
 8004544:	4b71      	ldr	r3, [pc, #452]	; (800470c <acis_parse_command+0x880>)
 8004546:	edd3 7a00 	vldr	s15, [r3]
 800454a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800454e:	eef0 7ae7 	vabs.f32	s15, s15
 8004552:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8004730 <acis_parse_command+0x8a4>
 8004556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800455a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455e:	dd0a      	ble.n	8004576 <acis_parse_command+0x6ea>
      {
        DragStatus = PK_DragStartAcknowledge.ErrorCode = 0;
 8004560:	4b68      	ldr	r3, [pc, #416]	; (8004704 <acis_parse_command+0x878>)
 8004562:	2200      	movs	r2, #0
 8004564:	711a      	strb	r2, [r3, #4]
 8004566:	4b67      	ldr	r3, [pc, #412]	; (8004704 <acis_parse_command+0x878>)
 8004568:	791a      	ldrb	r2, [r3, #4]
 800456a:	4b72      	ldr	r3, [pc, #456]	; (8004734 <acis_parse_command+0x8a8>)
 800456c:	701a      	strb	r2, [r3, #0]
        DragReady = 1;
 800456e:	4b69      	ldr	r3, [pc, #420]	; (8004714 <acis_parse_command+0x888>)
 8004570:	2201      	movs	r2, #1
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	e006      	b.n	8004584 <acis_parse_command+0x6f8>
      }
      else DragStatus = PK_DragStartAcknowledge.ErrorCode = 1;
 8004576:	4b63      	ldr	r3, [pc, #396]	; (8004704 <acis_parse_command+0x878>)
 8004578:	2201      	movs	r2, #1
 800457a:	711a      	strb	r2, [r3, #4]
 800457c:	4b61      	ldr	r3, [pc, #388]	; (8004704 <acis_parse_command+0x878>)
 800457e:	791a      	ldrb	r2, [r3, #4]
 8004580:	4b6c      	ldr	r3, [pc, #432]	; (8004734 <acis_parse_command+0x8a8>)
 8004582:	701a      	strb	r2, [r3, #0]
      protPushSequence(&fifoSendingQueue, &PK_DragStartAcknowledge, sizeof(PK_DragStartAcknowledge));
 8004584:	2210      	movs	r2, #16
 8004586:	495f      	ldr	r1, [pc, #380]	; (8004704 <acis_parse_command+0x878>)
 8004588:	4859      	ldr	r0, [pc, #356]	; (80046f0 <acis_parse_command+0x864>)
 800458a:	f006 fe26 	bl	800b1da <protPushSequence>
      break;
 800458e:	e194      	b.n	80048ba <acis_parse_command+0xa2e>

    case PK_DragStopID :
      PK_Copy(&PK_DragStop, msgBuf);
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	4869      	ldr	r0, [pc, #420]	; (8004738 <acis_parse_command+0x8ac>)
 8004594:	f7fc fbe2 	bl	8000d5c <PK_Copy>
      PK_DragStopAcknowledge.Destination = xChaSrc;
 8004598:	4a68      	ldr	r2, [pc, #416]	; (800473c <acis_parse_command+0x8b0>)
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	7093      	strb	r3, [r2, #2]
      PK_DragStopAcknowledge.FromRPM = PK_DragStop.FromRPM;
 800459e:	4b66      	ldr	r3, [pc, #408]	; (8004738 <acis_parse_command+0x8ac>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4a66      	ldr	r2, [pc, #408]	; (800473c <acis_parse_command+0x8b0>)
 80045a4:	6093      	str	r3, [r2, #8]
      PK_DragStopAcknowledge.ToRPM = PK_DragStop.ToRPM;
 80045a6:	4b64      	ldr	r3, [pc, #400]	; (8004738 <acis_parse_command+0x8ac>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	4a64      	ldr	r2, [pc, #400]	; (800473c <acis_parse_command+0x8b0>)
 80045ac:	60d3      	str	r3, [r2, #12]
      DragStatus = PK_DragStopAcknowledge.ErrorCode = 0;
 80045ae:	4b63      	ldr	r3, [pc, #396]	; (800473c <acis_parse_command+0x8b0>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	711a      	strb	r2, [r3, #4]
 80045b4:	4b61      	ldr	r3, [pc, #388]	; (800473c <acis_parse_command+0x8b0>)
 80045b6:	791a      	ldrb	r2, [r3, #4]
 80045b8:	4b5e      	ldr	r3, [pc, #376]	; (8004734 <acis_parse_command+0x8a8>)
 80045ba:	701a      	strb	r2, [r3, #0]
      DragStarted = 0;
 80045bc:	4b54      	ldr	r3, [pc, #336]	; (8004710 <acis_parse_command+0x884>)
 80045be:	2200      	movs	r2, #0
 80045c0:	701a      	strb	r2, [r3, #0]
      DragReady = 0;
 80045c2:	4b54      	ldr	r3, [pc, #336]	; (8004714 <acis_parse_command+0x888>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	701a      	strb	r2, [r3, #0]
      DragCompleted = 0;
 80045c8:	4b53      	ldr	r3, [pc, #332]	; (8004718 <acis_parse_command+0x88c>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]
      DragPointsCount = 0;
 80045ce:	4b53      	ldr	r3, [pc, #332]	; (800471c <acis_parse_command+0x890>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
      DragStartTime = 0;
 80045d4:	4b52      	ldr	r3, [pc, #328]	; (8004720 <acis_parse_command+0x894>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
      if(DragFromRPM != PK_DragStop.FromRPM || DragToRPM != PK_DragStop.ToRPM)
 80045da:	4b57      	ldr	r3, [pc, #348]	; (8004738 <acis_parse_command+0x8ac>)
 80045dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80045e0:	4b49      	ldr	r3, [pc, #292]	; (8004708 <acis_parse_command+0x87c>)
 80045e2:	edd3 7a00 	vldr	s15, [r3]
 80045e6:	eeb4 7a67 	vcmp.f32	s14, s15
 80045ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ee:	d10a      	bne.n	8004606 <acis_parse_command+0x77a>
 80045f0:	4b51      	ldr	r3, [pc, #324]	; (8004738 <acis_parse_command+0x8ac>)
 80045f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80045f6:	4b45      	ldr	r3, [pc, #276]	; (800470c <acis_parse_command+0x880>)
 80045f8:	edd3 7a00 	vldr	s15, [r3]
 80045fc:	eeb4 7a67 	vcmp.f32	s14, s15
 8004600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004604:	d002      	beq.n	800460c <acis_parse_command+0x780>
      {
        PK_DragStopAcknowledge.ErrorCode = 2;
 8004606:	4b4d      	ldr	r3, [pc, #308]	; (800473c <acis_parse_command+0x8b0>)
 8004608:	2202      	movs	r2, #2
 800460a:	711a      	strb	r2, [r3, #4]
      }
      protPushSequence(&fifoSendingQueue, &PK_DragStopAcknowledge, sizeof(PK_DragStopAcknowledge));
 800460c:	2210      	movs	r2, #16
 800460e:	494b      	ldr	r1, [pc, #300]	; (800473c <acis_parse_command+0x8b0>)
 8004610:	4837      	ldr	r0, [pc, #220]	; (80046f0 <acis_parse_command+0x864>)
 8004612:	f006 fde2 	bl	800b1da <protPushSequence>
      break;
 8004616:	e150      	b.n	80048ba <acis_parse_command+0xa2e>

    case PK_DragUpdateRequestID :
      PK_Copy(&PK_DragUpdateRequest, msgBuf);
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	4849      	ldr	r0, [pc, #292]	; (8004740 <acis_parse_command+0x8b4>)
 800461c:	f7fc fb9e 	bl	8000d5c <PK_Copy>
      PK_DragUpdateResponse.Destination = xChaSrc;
 8004620:	4a48      	ldr	r2, [pc, #288]	; (8004744 <acis_parse_command+0x8b8>)
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	7093      	strb	r3, [r2, #2]
      PK_DragUpdateResponse.ErrorCode = 0;
 8004626:	4b47      	ldr	r3, [pc, #284]	; (8004744 <acis_parse_command+0x8b8>)
 8004628:	2200      	movs	r2, #0
 800462a:	711a      	strb	r2, [r3, #4]
      PK_DragUpdateResponse.FromRPM = PK_DragUpdateRequest.FromRPM;
 800462c:	4b44      	ldr	r3, [pc, #272]	; (8004740 <acis_parse_command+0x8b4>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4a44      	ldr	r2, [pc, #272]	; (8004744 <acis_parse_command+0x8b8>)
 8004632:	6093      	str	r3, [r2, #8]
      PK_DragUpdateResponse.ToRPM = PK_DragUpdateRequest.ToRPM;
 8004634:	4b42      	ldr	r3, [pc, #264]	; (8004740 <acis_parse_command+0x8b4>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4a42      	ldr	r2, [pc, #264]	; (8004744 <acis_parse_command+0x8b8>)
 800463a:	60d3      	str	r3, [r2, #12]
      PK_DragUpdateResponse.CurrentRPM = csps_getrpm();
 800463c:	f003 fab4 	bl	8007ba8 <csps_getrpm>
 8004640:	eef0 7a40 	vmov.f32	s15, s0
 8004644:	4b3f      	ldr	r3, [pc, #252]	; (8004744 <acis_parse_command+0x8b8>)
 8004646:	edc3 7a04 	vstr	s15, [r3, #16]
      PK_DragUpdateResponse.CurrentIgnition = angle_ignite;
 800464a:	4b3f      	ldr	r3, [pc, #252]	; (8004748 <acis_parse_command+0x8bc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a3d      	ldr	r2, [pc, #244]	; (8004744 <acis_parse_command+0x8b8>)
 8004650:	61d3      	str	r3, [r2, #28]
      PK_DragUpdateResponse.CurrentPressure = map_getpressure();
 8004652:	f004 fb9d 	bl	8008d90 <map_getpressure>
 8004656:	eef0 7a40 	vmov.f32	s15, s0
 800465a:	4b3a      	ldr	r3, [pc, #232]	; (8004744 <acis_parse_command+0x8b8>)
 800465c:	edc3 7a05 	vstr	s15, [r3, #20]
      PK_DragUpdateResponse.CurrentLoad = map_getpressure() / 110000.0f * 100.0f;
 8004660:	f004 fb96 	bl	8008d90 <map_getpressure>
 8004664:	eef0 6a40 	vmov.f32	s13, s0
 8004668:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800474c <acis_parse_command+0x8c0>
 800466c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004670:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004728 <acis_parse_command+0x89c>
 8004674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004678:	4b32      	ldr	r3, [pc, #200]	; (8004744 <acis_parse_command+0x8b8>)
 800467a:	edc3 7a06 	vstr	s15, [r3, #24]
      PK_DragUpdateResponse.TotalPoints = DragPointsCount;
 800467e:	4b27      	ldr	r3, [pc, #156]	; (800471c <acis_parse_command+0x890>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a30      	ldr	r2, [pc, #192]	; (8004744 <acis_parse_command+0x8b8>)
 8004684:	6253      	str	r3, [r2, #36]	; 0x24
      PK_DragUpdateResponse.Completed = DragCompleted;
 8004686:	4b24      	ldr	r3, [pc, #144]	; (8004718 <acis_parse_command+0x88c>)
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	4b2e      	ldr	r3, [pc, #184]	; (8004744 <acis_parse_command+0x8b8>)
 800468c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      PK_DragUpdateResponse.Time = DragStartTime > 0 ? DelayDiff(now, DragStartTime) : 0;
 8004690:	4b23      	ldr	r3, [pc, #140]	; (8004720 <acis_parse_command+0x894>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <acis_parse_command+0x81c>
 8004698:	4b21      	ldr	r3, [pc, #132]	; (8004720 <acis_parse_command+0x894>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4619      	mov	r1, r3
 800469e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80046a0:	f003 fba0 	bl	8007de4 <DelayDiff>
 80046a4:	4603      	mov	r3, r0
 80046a6:	e000      	b.n	80046aa <acis_parse_command+0x81e>
 80046a8:	2300      	movs	r3, #0
 80046aa:	4a26      	ldr	r2, [pc, #152]	; (8004744 <acis_parse_command+0x8b8>)
 80046ac:	6213      	str	r3, [r2, #32]
      if(DragFromRPM != PK_DragUpdateRequest.FromRPM || DragToRPM != PK_DragUpdateRequest.ToRPM)
 80046ae:	4b24      	ldr	r3, [pc, #144]	; (8004740 <acis_parse_command+0x8b4>)
 80046b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80046b4:	4b14      	ldr	r3, [pc, #80]	; (8004708 <acis_parse_command+0x87c>)
 80046b6:	edd3 7a00 	vldr	s15, [r3]
 80046ba:	eeb4 7a67 	vcmp.f32	s14, s15
 80046be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c2:	d10a      	bne.n	80046da <acis_parse_command+0x84e>
 80046c4:	4b1e      	ldr	r3, [pc, #120]	; (8004740 <acis_parse_command+0x8b4>)
 80046c6:	ed93 7a02 	vldr	s14, [r3, #8]
 80046ca:	4b10      	ldr	r3, [pc, #64]	; (800470c <acis_parse_command+0x880>)
 80046cc:	edd3 7a00 	vldr	s15, [r3]
 80046d0:	eeb4 7a67 	vcmp.f32	s14, s15
 80046d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d8:	d03a      	beq.n	8004750 <acis_parse_command+0x8c4>
      {
        PK_DragUpdateResponse.ErrorCode = 2;
 80046da:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <acis_parse_command+0x8b8>)
 80046dc:	2202      	movs	r2, #2
 80046de:	711a      	strb	r2, [r3, #4]
 80046e0:	e040      	b.n	8004764 <acis_parse_command+0x8d8>
 80046e2:	bf00      	nop
 80046e4:	20020958 	.word	0x20020958
 80046e8:	2002095c 	.word	0x2002095c
 80046ec:	20010300 	.word	0x20010300
 80046f0:	200210ec 	.word	0x200210ec
 80046f4:	20020959 	.word	0x20020959
 80046f8:	2002095d 	.word	0x2002095d
 80046fc:	20010320 	.word	0x20010320
 8004700:	20010340 	.word	0x20010340
 8004704:	20010440 	.word	0x20010440
 8004708:	20020944 	.word	0x20020944
 800470c:	20020948 	.word	0x20020948
 8004710:	2002094d 	.word	0x2002094d
 8004714:	2002094c 	.word	0x2002094c
 8004718:	2002094e 	.word	0x2002094e
 800471c:	20020940 	.word	0x20020940
 8004720:	20020954 	.word	0x20020954
 8004724:	20020950 	.word	0x20020950
 8004728:	42c80000 	.word	0x42c80000
 800472c:	469c4000 	.word	0x469c4000
 8004730:	428c0000 	.word	0x428c0000
 8004734:	2002094f 	.word	0x2002094f
 8004738:	200103c0 	.word	0x200103c0
 800473c:	20010460 	.word	0x20010460
 8004740:	20010360 	.word	0x20010360
 8004744:	20010380 	.word	0x20010380
 8004748:	20011928 	.word	0x20011928
 800474c:	47d6d800 	.word	0x47d6d800
      }
      else if(DragStatus > 0) PK_DragUpdateResponse.ErrorCode = DragStatus + 10;
 8004750:	4b5c      	ldr	r3, [pc, #368]	; (80048c4 <acis_parse_command+0xa38>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <acis_parse_command+0x8d8>
 8004758:	4b5a      	ldr	r3, [pc, #360]	; (80048c4 <acis_parse_command+0xa38>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	330a      	adds	r3, #10
 800475e:	b2da      	uxtb	r2, r3
 8004760:	4b59      	ldr	r3, [pc, #356]	; (80048c8 <acis_parse_command+0xa3c>)
 8004762:	711a      	strb	r2, [r3, #4]
      protPushSequence(&fifoSendingQueue, &PK_DragUpdateResponse, sizeof(PK_DragUpdateResponse));
 8004764:	222c      	movs	r2, #44	; 0x2c
 8004766:	4958      	ldr	r1, [pc, #352]	; (80048c8 <acis_parse_command+0xa3c>)
 8004768:	4858      	ldr	r0, [pc, #352]	; (80048cc <acis_parse_command+0xa40>)
 800476a:	f006 fd36 	bl	800b1da <protPushSequence>
      break;
 800476e:	e0a4      	b.n	80048ba <acis_parse_command+0xa2e>

    case PK_DragPointRequestID :
      PK_Copy(&PK_DragPointRequest, msgBuf);
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	4857      	ldr	r0, [pc, #348]	; (80048d0 <acis_parse_command+0xa44>)
 8004774:	f7fc faf2 	bl	8000d5c <PK_Copy>
      PK_DragPointResponse.Destination = xChaSrc;
 8004778:	4a56      	ldr	r2, [pc, #344]	; (80048d4 <acis_parse_command+0xa48>)
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	7093      	strb	r3, [r2, #2]
      PK_DragPointResponse.FromRPM = PK_DragStop.FromRPM;
 800477e:	4b56      	ldr	r3, [pc, #344]	; (80048d8 <acis_parse_command+0xa4c>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4a54      	ldr	r2, [pc, #336]	; (80048d4 <acis_parse_command+0xa48>)
 8004784:	6093      	str	r3, [r2, #8]
      PK_DragPointResponse.ToRPM = PK_DragStop.ToRPM;
 8004786:	4b54      	ldr	r3, [pc, #336]	; (80048d8 <acis_parse_command+0xa4c>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	4a52      	ldr	r2, [pc, #328]	; (80048d4 <acis_parse_command+0xa48>)
 800478c:	60d3      	str	r3, [r2, #12]
      PK_DragPointResponse.ErrorCode = 0;
 800478e:	4b51      	ldr	r3, [pc, #324]	; (80048d4 <acis_parse_command+0xa48>)
 8004790:	2200      	movs	r2, #0
 8004792:	711a      	strb	r2, [r3, #4]
      dragpoint = PK_DragPointResponse.Point = PK_DragPointRequest.Point;
 8004794:	4b4e      	ldr	r3, [pc, #312]	; (80048d0 <acis_parse_command+0xa44>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	4a4e      	ldr	r2, [pc, #312]	; (80048d4 <acis_parse_command+0xa48>)
 800479a:	6113      	str	r3, [r2, #16]
 800479c:	4b4d      	ldr	r3, [pc, #308]	; (80048d4 <acis_parse_command+0xa48>)
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(dragpoint >= DragPointsCount)
 80047a2:	4b4e      	ldr	r3, [pc, #312]	; (80048dc <acis_parse_command+0xa50>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d316      	bcc.n	80047da <acis_parse_command+0x94e>
      {
        PK_DragPointResponse.Pressure = 0;
 80047ac:	4b49      	ldr	r3, [pc, #292]	; (80048d4 <acis_parse_command+0xa48>)
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	61da      	str	r2, [r3, #28]
        PK_DragPointResponse.RPM = 0;
 80047b4:	4b47      	ldr	r3, [pc, #284]	; (80048d4 <acis_parse_command+0xa48>)
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	619a      	str	r2, [r3, #24]
        PK_DragPointResponse.Load = 0;
 80047bc:	4b45      	ldr	r3, [pc, #276]	; (80048d4 <acis_parse_command+0xa48>)
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	621a      	str	r2, [r3, #32]
        PK_DragPointResponse.Ignition = 0;
 80047c4:	4b43      	ldr	r3, [pc, #268]	; (80048d4 <acis_parse_command+0xa48>)
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	625a      	str	r2, [r3, #36]	; 0x24
        PK_DragPointResponse.Time = 0;
 80047cc:	4b41      	ldr	r3, [pc, #260]	; (80048d4 <acis_parse_command+0xa48>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	615a      	str	r2, [r3, #20]
        PK_DragPointResponse.ErrorCode = 3;
 80047d2:	4b40      	ldr	r3, [pc, #256]	; (80048d4 <acis_parse_command+0xa48>)
 80047d4:	2203      	movs	r2, #3
 80047d6:	711a      	strb	r2, [r3, #4]
 80047d8:	e04e      	b.n	8004878 <acis_parse_command+0x9ec>
      }
      else
      {
        PK_DragPointResponse.Pressure = DragPoints[dragpoint].Pressure;
 80047da:	4941      	ldr	r1, [pc, #260]	; (80048e0 <acis_parse_command+0xa54>)
 80047dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047de:	4613      	mov	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	3304      	adds	r3, #4
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a39      	ldr	r2, [pc, #228]	; (80048d4 <acis_parse_command+0xa48>)
 80047ee:	61d3      	str	r3, [r2, #28]
        PK_DragPointResponse.RPM = DragPoints[dragpoint].RPM;
 80047f0:	493b      	ldr	r1, [pc, #236]	; (80048e0 <acis_parse_command+0xa54>)
 80047f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a34      	ldr	r2, [pc, #208]	; (80048d4 <acis_parse_command+0xa48>)
 8004802:	6193      	str	r3, [r2, #24]
        PK_DragPointResponse.Load = DragPoints[dragpoint].Load;
 8004804:	4936      	ldr	r1, [pc, #216]	; (80048e0 <acis_parse_command+0xa54>)
 8004806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	3308      	adds	r3, #8
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a2f      	ldr	r2, [pc, #188]	; (80048d4 <acis_parse_command+0xa48>)
 8004818:	6213      	str	r3, [r2, #32]
        PK_DragPointResponse.Ignition = DragPoints[dragpoint].Ignition;
 800481a:	4931      	ldr	r1, [pc, #196]	; (80048e0 <acis_parse_command+0xa54>)
 800481c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	330c      	adds	r3, #12
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a29      	ldr	r2, [pc, #164]	; (80048d4 <acis_parse_command+0xa48>)
 800482e:	6253      	str	r3, [r2, #36]	; 0x24
        PK_DragPointResponse.Time = DragPoints[dragpoint].Time;
 8004830:	492b      	ldr	r1, [pc, #172]	; (80048e0 <acis_parse_command+0xa54>)
 8004832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004834:	4613      	mov	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	3310      	adds	r3, #16
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a24      	ldr	r2, [pc, #144]	; (80048d4 <acis_parse_command+0xa48>)
 8004844:	6153      	str	r3, [r2, #20]
        if(DragFromRPM != PK_DragPointRequest.FromRPM || DragToRPM != PK_DragPointRequest.ToRPM)
 8004846:	4b22      	ldr	r3, [pc, #136]	; (80048d0 <acis_parse_command+0xa44>)
 8004848:	ed93 7a02 	vldr	s14, [r3, #8]
 800484c:	4b25      	ldr	r3, [pc, #148]	; (80048e4 <acis_parse_command+0xa58>)
 800484e:	edd3 7a00 	vldr	s15, [r3]
 8004852:	eeb4 7a67 	vcmp.f32	s14, s15
 8004856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485a:	d10a      	bne.n	8004872 <acis_parse_command+0x9e6>
 800485c:	4b1c      	ldr	r3, [pc, #112]	; (80048d0 <acis_parse_command+0xa44>)
 800485e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004862:	4b21      	ldr	r3, [pc, #132]	; (80048e8 <acis_parse_command+0xa5c>)
 8004864:	edd3 7a00 	vldr	s15, [r3]
 8004868:	eeb4 7a67 	vcmp.f32	s14, s15
 800486c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004870:	d002      	beq.n	8004878 <acis_parse_command+0x9ec>
        {
          PK_DragPointResponse.ErrorCode = 2;
 8004872:	4b18      	ldr	r3, [pc, #96]	; (80048d4 <acis_parse_command+0xa48>)
 8004874:	2202      	movs	r2, #2
 8004876:	711a      	strb	r2, [r3, #4]
        }
      }

      protPushSequence(&fifoSendingQueue, &PK_DragPointResponse, sizeof(PK_DragPointResponse));
 8004878:	2228      	movs	r2, #40	; 0x28
 800487a:	4916      	ldr	r1, [pc, #88]	; (80048d4 <acis_parse_command+0xa48>)
 800487c:	4813      	ldr	r0, [pc, #76]	; (80048cc <acis_parse_command+0xa40>)
 800487e:	f006 fcac 	bl	800b1da <protPushSequence>
      break;
 8004882:	e01a      	b.n	80048ba <acis_parse_command+0xa2e>

    case PK_ConfigMemoryAcknowledgeID :
      PK_Copy(&PK_ConfigMemoryAcknowledge, msgBuf);
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	4819      	ldr	r0, [pc, #100]	; (80048ec <acis_parse_command+0xa60>)
 8004888:	f7fc fa68 	bl	8000d5c <PK_Copy>
      if(PK_ConfigMemoryAcknowledge.ErrorCode != 0)
      {

      }
      break;
 800488c:	e015      	b.n	80048ba <acis_parse_command+0xa2e>

    case PK_TableMemoryAcknowledgeID :
      PK_Copy(&PK_TableMemoryAcknowledge, msgBuf);
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	4817      	ldr	r0, [pc, #92]	; (80048f0 <acis_parse_command+0xa64>)
 8004892:	f7fc fa63 	bl	8000d5c <PK_Copy>
      if(PK_TableMemoryAcknowledge.ErrorCode != 0)
      {

      }
      break;
 8004896:	e010      	b.n	80048ba <acis_parse_command+0xa2e>

    case PK_FuelSwitchID :
      PK_Copy(&PK_FuelSwitch, msgBuf);
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	4816      	ldr	r0, [pc, #88]	; (80048f4 <acis_parse_command+0xa68>)
 800489c:	f7fc fa5e 	bl	8000d5c <PK_Copy>
      if(PK_FuelSwitch.FuelSwitchPos < 3)
 80048a0:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <acis_parse_command+0xa68>)
 80048a2:	791b      	ldrb	r3, [r3, #4]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d807      	bhi.n	80048b8 <acis_parse_command+0xa2c>
        switch_fuel_pos = PK_FuelSwitch.FuelSwitchPos;
 80048a8:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <acis_parse_command+0xa68>)
 80048aa:	791b      	ldrb	r3, [r3, #4]
 80048ac:	b25a      	sxtb	r2, r3
 80048ae:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <acis_parse_command+0xa6c>)
 80048b0:	701a      	strb	r2, [r3, #0]
      break;
 80048b2:	e001      	b.n	80048b8 <acis_parse_command+0xa2c>

    default:
      break;
 80048b4:	bf00      	nop
 80048b6:	e000      	b.n	80048ba <acis_parse_command+0xa2e>
      break;
 80048b8:	bf00      	nop
  }
}
 80048ba:	bf00      	nop
 80048bc:	3738      	adds	r7, #56	; 0x38
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	2002094f 	.word	0x2002094f
 80048c8:	20010380 	.word	0x20010380
 80048cc:	200210ec 	.word	0x200210ec
 80048d0:	200103e0 	.word	0x200103e0
 80048d4:	20010400 	.word	0x20010400
 80048d8:	200103c0 	.word	0x200103c0
 80048dc:	20020940 	.word	0x20020940
 80048e0:	20011940 	.word	0x20011940
 80048e4:	20020944 	.word	0x20020944
 80048e8:	20020948 	.word	0x20020948
 80048ec:	200102e0 	.word	0x200102e0
 80048f0:	200101a0 	.word	0x200101a0
 80048f4:	200104a0 	.word	0x200104a0
 80048f8:	2001193c 	.word	0x2001193c

080048fc <acis_send_command>:

inline int8_t acis_send_command(eTransChannels xChaDst, void * msgBuf, uint32_t length)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	73fb      	strb	r3, [r7, #15]
  return xSender(xChaDst, (uint8_t*)msgBuf, length);
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	4618      	mov	r0, r3
 8004912:	f005 fd4f 	bl	800a3b4 <xSender>
 8004916:	4603      	mov	r3, r0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <config_load>:
#include "config.h"
#include "sst25vf032b.h"
#include "crc.h"

HAL_StatusTypeDef config_load(sAcisConfig * config)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_BUSY;
 8004928:	2302      	movs	r3, #2
 800492a:	75fb      	strb	r3, [r7, #23]
  uint32_t size = (uint32_t)&config->crc - (uint32_t)config;
 800492c:	f243 23a0 	movw	r3, #12960	; 0x32a0
 8004930:	613b      	str	r3, [r7, #16]
  uint8_t spistatus = SST25_Read(0, sizeof(sAcisConfig), (uint8_t*)config);
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	f44f 514b 	mov.w	r1, #12992	; 0x32c0
 8004938:	2000      	movs	r0, #0
 800493a:	f004 fe80 	bl	800963e <SST25_Read>
 800493e:	4603      	mov	r3, r0
 8004940:	73fb      	strb	r3, [r7, #15]
  if(spistatus)
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d012      	beq.n	800496e <config_load+0x4e>
  {
    uint16_t crc16 = CRC16_Generate((uint8_t*)config, size);
 8004948:	6939      	ldr	r1, [r7, #16]
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f002 fc40 	bl	80071d0 <CRC16_Generate>
 8004950:	4603      	mov	r3, r0
 8004952:	81bb      	strh	r3, [r7, #12]
    if(crc16 == config->crc)
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	f243 23a0 	movw	r3, #12960	; 0x32a0
 800495a:	4413      	add	r3, r2
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	89ba      	ldrh	r2, [r7, #12]
 8004960:	429a      	cmp	r2, r3
 8004962:	d102      	bne.n	800496a <config_load+0x4a>
      status = HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	75fb      	strb	r3, [r7, #23]
 8004968:	e001      	b.n	800496e <config_load+0x4e>
    else status = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800496e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <setconfig_standart16l>:
  config->tables[i].ignitions[0][12] = 33.0f;
}
*/

static void setconfig_standart16l(sAcisConfig * config, uint8_t i)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	70fb      	strb	r3, [r7, #3]

  config->tables[i].rotates_count = 16;
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	f640 416c 	movw	r1, #3180	; 0xc6c
 800498c:	fb01 f303 	mul.w	r3, r1, r3
 8004990:	4413      	add	r3, r2
 8004992:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8004996:	2210      	movs	r2, #16
 8004998:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[0] = 600;
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	f640 416c 	movw	r1, #3180	; 0xc6c
 80049a2:	fb01 f303 	mul.w	r3, r1, r3
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80049ac:	4aba      	ldr	r2, [pc, #744]	; (8004c98 <setconfig_standart16l+0x320>)
 80049ae:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[1] = 720;
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80049b8:	fb01 f303 	mul.w	r3, r1, r3
 80049bc:	4413      	add	r3, r2
 80049be:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 80049c2:	4ab6      	ldr	r2, [pc, #728]	; (8004c9c <setconfig_standart16l+0x324>)
 80049c4:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[2] = 840;
 80049c6:	78fb      	ldrb	r3, [r7, #3]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	f640 416c 	movw	r1, #3180	; 0xc6c
 80049ce:	fb01 f303 	mul.w	r3, r1, r3
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80049d8:	4ab1      	ldr	r2, [pc, #708]	; (8004ca0 <setconfig_standart16l+0x328>)
 80049da:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[3] = 990;
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80049e4:	fb01 f303 	mul.w	r3, r1, r3
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 730d 	add.w	r3, r3, #564	; 0x234
 80049ee:	4aad      	ldr	r2, [pc, #692]	; (8004ca4 <setconfig_standart16l+0x32c>)
 80049f0:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[4] = 1170;
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8004a04:	4aa8      	ldr	r2, [pc, #672]	; (8004ca8 <setconfig_standart16l+0x330>)
 8004a06:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[5] = 1380;
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8004a1a:	4aa4      	ldr	r2, [pc, #656]	; (8004cac <setconfig_standart16l+0x334>)
 8004a1c:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[6] = 1650;
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004a26:	fb01 f303 	mul.w	r3, r1, r3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004a30:	4a9f      	ldr	r2, [pc, #636]	; (8004cb0 <setconfig_standart16l+0x338>)
 8004a32:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[7] = 1950;
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8004a46:	4a9b      	ldr	r2, [pc, #620]	; (8004cb4 <setconfig_standart16l+0x33c>)
 8004a48:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[8] = 2310;
 8004a4a:	78fb      	ldrb	r3, [r7, #3]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004a5c:	4a96      	ldr	r2, [pc, #600]	; (8004cb8 <setconfig_standart16l+0x340>)
 8004a5e:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[9] = 2730;
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004a72:	4a92      	ldr	r2, [pc, #584]	; (8004cbc <setconfig_standart16l+0x344>)
 8004a74:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[10] = 3210;
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004a7e:	fb01 f303 	mul.w	r3, r1, r3
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004a88:	4a8d      	ldr	r2, [pc, #564]	; (8004cc0 <setconfig_standart16l+0x348>)
 8004a8a:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[11] = 3840;
 8004a8c:	78fb      	ldrb	r3, [r7, #3]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004a94:	fb01 f303 	mul.w	r3, r1, r3
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8004a9e:	4a89      	ldr	r2, [pc, #548]	; (8004cc4 <setconfig_standart16l+0x34c>)
 8004aa0:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[12] = 4530;
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004aaa:	fb01 f303 	mul.w	r3, r1, r3
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004ab4:	4a84      	ldr	r2, [pc, #528]	; (8004cc8 <setconfig_standart16l+0x350>)
 8004ab6:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[13] = 5370;
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004ac0:	fb01 f303 	mul.w	r3, r1, r3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8004aca:	4a80      	ldr	r2, [pc, #512]	; (8004ccc <setconfig_standart16l+0x354>)
 8004acc:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[14] = 6360;
 8004ace:	78fb      	ldrb	r3, [r7, #3]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004ad6:	fb01 f303 	mul.w	r3, r1, r3
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004ae0:	4a7b      	ldr	r2, [pc, #492]	; (8004cd0 <setconfig_standart16l+0x358>)
 8004ae2:	601a      	str	r2, [r3, #0]
  config->tables[i].rotates[15] = 7500;
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004af6:	4a77      	ldr	r2, [pc, #476]	; (8004cd4 <setconfig_standart16l+0x35c>)
 8004af8:	601a      	str	r2, [r3, #0]

  config->tables[i].pressures_count = 16;
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004b02:	fb01 f303 	mul.w	r3, r1, r3
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8004b0c:	2210      	movs	r2, #16
 8004b0e:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[0] = 28000.0f;
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004b22:	4a6d      	ldr	r2, [pc, #436]	; (8004cd8 <setconfig_standart16l+0x360>)
 8004b24:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[1] = 32800.0f;
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004b2e:	fb01 f303 	mul.w	r3, r1, r3
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004b38:	4a68      	ldr	r2, [pc, #416]	; (8004cdc <setconfig_standart16l+0x364>)
 8004b3a:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[2] = 37600.0f;
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004b44:	fb01 f303 	mul.w	r3, r1, r3
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8004b4e:	4a64      	ldr	r2, [pc, #400]	; (8004ce0 <setconfig_standart16l+0x368>)
 8004b50:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[3] = 42400.0f;
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004b5a:	fb01 f303 	mul.w	r3, r1, r3
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004b64:	4a5f      	ldr	r2, [pc, #380]	; (8004ce4 <setconfig_standart16l+0x36c>)
 8004b66:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[4] = 47200.0f;
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004b70:	fb01 f303 	mul.w	r3, r1, r3
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8004b7a:	4a5b      	ldr	r2, [pc, #364]	; (8004ce8 <setconfig_standart16l+0x370>)
 8004b7c:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[5] = 52000.0f;
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004b86:	fb01 f303 	mul.w	r3, r1, r3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004b90:	4a56      	ldr	r2, [pc, #344]	; (8004cec <setconfig_standart16l+0x374>)
 8004b92:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[6] = 56800.0f;
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004b9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8004ba6:	4a52      	ldr	r2, [pc, #328]	; (8004cf0 <setconfig_standart16l+0x378>)
 8004ba8:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[7] = 61600.0f;
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004bb2:	fb01 f303 	mul.w	r3, r1, r3
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8004bbc:	4a4d      	ldr	r2, [pc, #308]	; (8004cf4 <setconfig_standart16l+0x37c>)
 8004bbe:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[8] = 66400.0f;
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004bd2:	4a49      	ldr	r2, [pc, #292]	; (8004cf8 <setconfig_standart16l+0x380>)
 8004bd4:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[9] = 71200.0f;
 8004bd6:	78fb      	ldrb	r3, [r7, #3]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004bde:	fb01 f303 	mul.w	r3, r1, r3
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004be8:	4a44      	ldr	r2, [pc, #272]	; (8004cfc <setconfig_standart16l+0x384>)
 8004bea:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[10] = 76000.0f;
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004bfe:	4a40      	ldr	r2, [pc, #256]	; (8004d00 <setconfig_standart16l+0x388>)
 8004c00:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[11] = 80800.0f;
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004c0a:	fb01 f303 	mul.w	r3, r1, r3
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8004c14:	4a3b      	ldr	r2, [pc, #236]	; (8004d04 <setconfig_standart16l+0x38c>)
 8004c16:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[12] = 85600.0f;
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004c2a:	4a37      	ldr	r2, [pc, #220]	; (8004d08 <setconfig_standart16l+0x390>)
 8004c2c:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[13] = 90400.0f;
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004c36:	fb01 f303 	mul.w	r3, r1, r3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c40:	4a32      	ldr	r2, [pc, #200]	; (8004d0c <setconfig_standart16l+0x394>)
 8004c42:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[14] = 95200.0f;
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004c56:	4a2e      	ldr	r2, [pc, #184]	; (8004d10 <setconfig_standart16l+0x398>)
 8004c58:	601a      	str	r2, [r3, #0]
  config->tables[i].pressures[15] = 100000.0f;
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004c62:	fb01 f303 	mul.w	r3, r1, r3
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004c6c:	4a29      	ldr	r2, [pc, #164]	; (8004d14 <setconfig_standart16l+0x39c>)
 8004c6e:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[0][0]  = 14.5f;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004c78:	fb01 f303 	mul.w	r3, r1, r3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004c82:	4a25      	ldr	r2, [pc, #148]	; (8004d18 <setconfig_standart16l+0x3a0>)
 8004c84:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][1]  = 16.1f;
 8004c86:	78fb      	ldrb	r3, [r7, #3]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004c8e:	fb01 f303 	mul.w	r3, r1, r3
 8004c92:	4413      	add	r3, r2
 8004c94:	e042      	b.n	8004d1c <setconfig_standart16l+0x3a4>
 8004c96:	bf00      	nop
 8004c98:	44160000 	.word	0x44160000
 8004c9c:	44340000 	.word	0x44340000
 8004ca0:	44520000 	.word	0x44520000
 8004ca4:	44778000 	.word	0x44778000
 8004ca8:	44924000 	.word	0x44924000
 8004cac:	44ac8000 	.word	0x44ac8000
 8004cb0:	44ce4000 	.word	0x44ce4000
 8004cb4:	44f3c000 	.word	0x44f3c000
 8004cb8:	45106000 	.word	0x45106000
 8004cbc:	452aa000 	.word	0x452aa000
 8004cc0:	4548a000 	.word	0x4548a000
 8004cc4:	45700000 	.word	0x45700000
 8004cc8:	458d9000 	.word	0x458d9000
 8004ccc:	45a7d000 	.word	0x45a7d000
 8004cd0:	45c6c000 	.word	0x45c6c000
 8004cd4:	45ea6000 	.word	0x45ea6000
 8004cd8:	46dac000 	.word	0x46dac000
 8004cdc:	47002000 	.word	0x47002000
 8004ce0:	4712e000 	.word	0x4712e000
 8004ce4:	4725a000 	.word	0x4725a000
 8004ce8:	47386000 	.word	0x47386000
 8004cec:	474b2000 	.word	0x474b2000
 8004cf0:	475de000 	.word	0x475de000
 8004cf4:	4770a000 	.word	0x4770a000
 8004cf8:	4781b000 	.word	0x4781b000
 8004cfc:	478b1000 	.word	0x478b1000
 8004d00:	47947000 	.word	0x47947000
 8004d04:	479dd000 	.word	0x479dd000
 8004d08:	47a73000 	.word	0x47a73000
 8004d0c:	47b09000 	.word	0x47b09000
 8004d10:	47b9f000 	.word	0x47b9f000
 8004d14:	47c35000 	.word	0x47c35000
 8004d18:	41680000 	.word	0x41680000
 8004d1c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004d20:	4aba      	ldr	r2, [pc, #744]	; (800500c <setconfig_standart16l+0x694>)
 8004d22:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][2]  = 18.0f;
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004d36:	4ab6      	ldr	r2, [pc, #728]	; (8005010 <setconfig_standart16l+0x698>)
 8004d38:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][3]  = 20.9f;
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004d42:	fb01 f303 	mul.w	r3, r1, r3
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004d4c:	4ab1      	ldr	r2, [pc, #708]	; (8005014 <setconfig_standart16l+0x69c>)
 8004d4e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][4]  = 24.7f;
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8004d62:	4aad      	ldr	r2, [pc, #692]	; (8005018 <setconfig_standart16l+0x6a0>)
 8004d64:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][5]  = 29.7f;
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004d78:	4aa8      	ldr	r2, [pc, #672]	; (800501c <setconfig_standart16l+0x6a4>)
 8004d7a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][6]  = 37.8f;
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8004d8e:	4aa4      	ldr	r2, [pc, #656]	; (8005020 <setconfig_standart16l+0x6a8>)
 8004d90:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][7]  = 40.9f;
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004d9a:	fb01 f303 	mul.w	r3, r1, r3
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8004da4:	4a9f      	ldr	r2, [pc, #636]	; (8005024 <setconfig_standart16l+0x6ac>)
 8004da6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][8]  = 42.6f;
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004db0:	fb01 f303 	mul.w	r3, r1, r3
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004dba:	4a9b      	ldr	r2, [pc, #620]	; (8005028 <setconfig_standart16l+0x6b0>)
 8004dbc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][9]  = 43.4f;
 8004dbe:	78fb      	ldrb	r3, [r7, #3]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004dc6:	fb01 f303 	mul.w	r3, r1, r3
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8004dd0:	4a96      	ldr	r2, [pc, #600]	; (800502c <setconfig_standart16l+0x6b4>)
 8004dd2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][10] = 44.0f;
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004ddc:	fb01 f303 	mul.w	r3, r1, r3
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004de6:	4a92      	ldr	r2, [pc, #584]	; (8005030 <setconfig_standart16l+0x6b8>)
 8004de8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][11] = 44.4f;
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004df2:	fb01 f303 	mul.w	r3, r1, r3
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8004dfc:	4a8d      	ldr	r2, [pc, #564]	; (8005034 <setconfig_standart16l+0x6bc>)
 8004dfe:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][12] = 44.3f;
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004e08:	fb01 f303 	mul.w	r3, r1, r3
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8004e12:	4a89      	ldr	r2, [pc, #548]	; (8005038 <setconfig_standart16l+0x6c0>)
 8004e14:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][13] = 44.3f;
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004e1e:	fb01 f303 	mul.w	r3, r1, r3
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8004e28:	4a83      	ldr	r2, [pc, #524]	; (8005038 <setconfig_standart16l+0x6c0>)
 8004e2a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][14] = 44.8f;
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8004e3e:	4a7f      	ldr	r2, [pc, #508]	; (800503c <setconfig_standart16l+0x6c4>)
 8004e40:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[0][15] = 45.0f;
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004e4a:	fb01 f303 	mul.w	r3, r1, r3
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8004e54:	4a7a      	ldr	r2, [pc, #488]	; (8005040 <setconfig_standart16l+0x6c8>)
 8004e56:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[1][0]  = 16.1f;
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004e60:	fb01 f303 	mul.w	r3, r1, r3
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8004e6a:	4a68      	ldr	r2, [pc, #416]	; (800500c <setconfig_standart16l+0x694>)
 8004e6c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][1]  = 18.0f;
 8004e6e:	78fb      	ldrb	r3, [r7, #3]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8004e80:	4a63      	ldr	r2, [pc, #396]	; (8005010 <setconfig_standart16l+0x698>)
 8004e82:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][2]  = 20.1f;
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8004e96:	4a6b      	ldr	r2, [pc, #428]	; (8005044 <setconfig_standart16l+0x6cc>)
 8004e98:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][3]  = 23.1f;
 8004e9a:	78fb      	ldrb	r3, [r7, #3]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004ea2:	fb01 f303 	mul.w	r3, r1, r3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8004eac:	4a66      	ldr	r2, [pc, #408]	; (8005048 <setconfig_standart16l+0x6d0>)
 8004eae:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][4]  = 26.6f;
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8004ec2:	4a62      	ldr	r2, [pc, #392]	; (800504c <setconfig_standart16l+0x6d4>)
 8004ec4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][5]  = 31.0f;
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8004ed8:	4a5d      	ldr	r2, [pc, #372]	; (8005050 <setconfig_standart16l+0x6d8>)
 8004eda:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][6]  = 38.1f;
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004ee4:	fb01 f303 	mul.w	r3, r1, r3
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004eee:	4a59      	ldr	r2, [pc, #356]	; (8005054 <setconfig_standart16l+0x6dc>)
 8004ef0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][7]  = 41.0f;
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004efa:	fb01 f303 	mul.w	r3, r1, r3
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8004f04:	4a54      	ldr	r2, [pc, #336]	; (8005058 <setconfig_standart16l+0x6e0>)
 8004f06:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][8]  = 42.6f;
 8004f08:	78fb      	ldrb	r3, [r7, #3]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004f10:	fb01 f303 	mul.w	r3, r1, r3
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8004f1a:	4a43      	ldr	r2, [pc, #268]	; (8005028 <setconfig_standart16l+0x6b0>)
 8004f1c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][9]  = 43.4f;
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004f26:	fb01 f303 	mul.w	r3, r1, r3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8004f30:	4a3e      	ldr	r2, [pc, #248]	; (800502c <setconfig_standart16l+0x6b4>)
 8004f32:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][10] = 43.0f;
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004f46:	4a45      	ldr	r2, [pc, #276]	; (800505c <setconfig_standart16l+0x6e4>)
 8004f48:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][11] = 44.4f;
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004f52:	fb01 f303 	mul.w	r3, r1, r3
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8004f5c:	4a35      	ldr	r2, [pc, #212]	; (8005034 <setconfig_standart16l+0x6bc>)
 8004f5e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][12] = 44.3f;
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004f68:	fb01 f303 	mul.w	r3, r1, r3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8004f72:	4a31      	ldr	r2, [pc, #196]	; (8005038 <setconfig_standart16l+0x6c0>)
 8004f74:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][13] = 44.3f;
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004f7e:	fb01 f303 	mul.w	r3, r1, r3
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8004f88:	4a2b      	ldr	r2, [pc, #172]	; (8005038 <setconfig_standart16l+0x6c0>)
 8004f8a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][14] = 44.8f;
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004f94:	fb01 f303 	mul.w	r3, r1, r3
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8004f9e:	4a27      	ldr	r2, [pc, #156]	; (800503c <setconfig_standart16l+0x6c4>)
 8004fa0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[1][15] = 45.0f;
 8004fa2:	78fb      	ldrb	r3, [r7, #3]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004faa:	fb01 f303 	mul.w	r3, r1, r3
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8004fb4:	4a22      	ldr	r2, [pc, #136]	; (8005040 <setconfig_standart16l+0x6c8>)
 8004fb6:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[2][0]  = 17.8f;
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004fc0:	fb01 f303 	mul.w	r3, r1, r3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8004fca:	4a25      	ldr	r2, [pc, #148]	; (8005060 <setconfig_standart16l+0x6e8>)
 8004fcc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][1]  = 19.7f;
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004fd6:	fb01 f303 	mul.w	r3, r1, r3
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004fe0:	4a20      	ldr	r2, [pc, #128]	; (8005064 <setconfig_standart16l+0x6ec>)
 8004fe2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][2]  = 21.5f;
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004ff6:	4a1c      	ldr	r2, [pc, #112]	; (8005068 <setconfig_standart16l+0x6f0>)
 8004ff8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][3]  = 24.2f;
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005002:	fb01 f303 	mul.w	r3, r1, r3
 8005006:	4413      	add	r3, r2
 8005008:	e030      	b.n	800506c <setconfig_standart16l+0x6f4>
 800500a:	bf00      	nop
 800500c:	4180cccd 	.word	0x4180cccd
 8005010:	41900000 	.word	0x41900000
 8005014:	41a73333 	.word	0x41a73333
 8005018:	41c5999a 	.word	0x41c5999a
 800501c:	41ed999a 	.word	0x41ed999a
 8005020:	42173333 	.word	0x42173333
 8005024:	4223999a 	.word	0x4223999a
 8005028:	422a6666 	.word	0x422a6666
 800502c:	422d999a 	.word	0x422d999a
 8005030:	42300000 	.word	0x42300000
 8005034:	4231999a 	.word	0x4231999a
 8005038:	42313333 	.word	0x42313333
 800503c:	42333333 	.word	0x42333333
 8005040:	42340000 	.word	0x42340000
 8005044:	41a0cccd 	.word	0x41a0cccd
 8005048:	41b8cccd 	.word	0x41b8cccd
 800504c:	41d4cccd 	.word	0x41d4cccd
 8005050:	41f80000 	.word	0x41f80000
 8005054:	42186666 	.word	0x42186666
 8005058:	42240000 	.word	0x42240000
 800505c:	422c0000 	.word	0x422c0000
 8005060:	418e6666 	.word	0x418e6666
 8005064:	419d999a 	.word	0x419d999a
 8005068:	41ac0000 	.word	0x41ac0000
 800506c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005070:	4aba      	ldr	r2, [pc, #744]	; (800535c <setconfig_standart16l+0x9e4>)
 8005072:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][4]  = 27.6f;
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	f640 416c 	movw	r1, #3180	; 0xc6c
 800507c:	fb01 f303 	mul.w	r3, r1, r3
 8005080:	4413      	add	r3, r2
 8005082:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005086:	4ab6      	ldr	r2, [pc, #728]	; (8005360 <setconfig_standart16l+0x9e8>)
 8005088:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][5]  = 31.7f;
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005092:	fb01 f303 	mul.w	r3, r1, r3
 8005096:	4413      	add	r3, r2
 8005098:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 800509c:	4ab1      	ldr	r2, [pc, #708]	; (8005364 <setconfig_standart16l+0x9ec>)
 800509e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][6]  = 38.3f;
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80050a8:	fb01 f303 	mul.w	r3, r1, r3
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80050b2:	4aad      	ldr	r2, [pc, #692]	; (8005368 <setconfig_standart16l+0x9f0>)
 80050b4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][7]  = 41.1f;
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	f640 416c 	movw	r1, #3180	; 0xc6c
 80050be:	fb01 f303 	mul.w	r3, r1, r3
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80050c8:	4aa8      	ldr	r2, [pc, #672]	; (800536c <setconfig_standart16l+0x9f4>)
 80050ca:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][8]  = 42.6f;
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80050d4:	fb01 f303 	mul.w	r3, r1, r3
 80050d8:	4413      	add	r3, r2
 80050da:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80050de:	4aa4      	ldr	r2, [pc, #656]	; (8005370 <setconfig_standart16l+0x9f8>)
 80050e0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][9]  = 43.4f;
 80050e2:	78fb      	ldrb	r3, [r7, #3]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80050ea:	fb01 f303 	mul.w	r3, r1, r3
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80050f4:	4a9f      	ldr	r2, [pc, #636]	; (8005374 <setconfig_standart16l+0x9fc>)
 80050f6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][10] = 43.0f;
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005100:	fb01 f303 	mul.w	r3, r1, r3
 8005104:	4413      	add	r3, r2
 8005106:	f503 735c 	add.w	r3, r3, #880	; 0x370
 800510a:	4a9b      	ldr	r2, [pc, #620]	; (8005378 <setconfig_standart16l+0xa00>)
 800510c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][11] = 44.4f;
 800510e:	78fb      	ldrb	r3, [r7, #3]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005116:	fb01 f303 	mul.w	r3, r1, r3
 800511a:	4413      	add	r3, r2
 800511c:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8005120:	4a96      	ldr	r2, [pc, #600]	; (800537c <setconfig_standart16l+0xa04>)
 8005122:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][12] = 44.3f;
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	f640 416c 	movw	r1, #3180	; 0xc6c
 800512c:	fb01 f303 	mul.w	r3, r1, r3
 8005130:	4413      	add	r3, r2
 8005132:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8005136:	4a92      	ldr	r2, [pc, #584]	; (8005380 <setconfig_standart16l+0xa08>)
 8005138:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][13] = 44.3f;
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005142:	fb01 f303 	mul.w	r3, r1, r3
 8005146:	4413      	add	r3, r2
 8005148:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 800514c:	4a8c      	ldr	r2, [pc, #560]	; (8005380 <setconfig_standart16l+0xa08>)
 800514e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][14] = 44.8f;
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005158:	fb01 f303 	mul.w	r3, r1, r3
 800515c:	4413      	add	r3, r2
 800515e:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8005162:	4a88      	ldr	r2, [pc, #544]	; (8005384 <setconfig_standart16l+0xa0c>)
 8005164:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[2][15] = 45.0f;
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	4413      	add	r3, r2
 8005174:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8005178:	4a83      	ldr	r2, [pc, #524]	; (8005388 <setconfig_standart16l+0xa10>)
 800517a:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[3][0]  = 18.7f;
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005184:	fb01 f303 	mul.w	r3, r1, r3
 8005188:	4413      	add	r3, r2
 800518a:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 800518e:	4a7f      	ldr	r2, [pc, #508]	; (800538c <setconfig_standart16l+0xa14>)
 8005190:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][1]  = 20.5f;
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	f640 416c 	movw	r1, #3180	; 0xc6c
 800519a:	fb01 f303 	mul.w	r3, r1, r3
 800519e:	4413      	add	r3, r2
 80051a0:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 80051a4:	4a7a      	ldr	r2, [pc, #488]	; (8005390 <setconfig_standart16l+0xa18>)
 80051a6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][2]  = 22.2f;
 80051a8:	78fb      	ldrb	r3, [r7, #3]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	f640 416c 	movw	r1, #3180	; 0xc6c
 80051b0:	fb01 f303 	mul.w	r3, r1, r3
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 80051ba:	4a76      	ldr	r2, [pc, #472]	; (8005394 <setconfig_standart16l+0xa1c>)
 80051bc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][3]  = 24.6f;
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80051c6:	fb01 f303 	mul.w	r3, r1, r3
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 80051d0:	4a71      	ldr	r2, [pc, #452]	; (8005398 <setconfig_standart16l+0xa20>)
 80051d2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][4]  = 27.7f;
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80051dc:	fb01 f303 	mul.w	r3, r1, r3
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80051e6:	4a6d      	ldr	r2, [pc, #436]	; (800539c <setconfig_standart16l+0xa24>)
 80051e8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][5]  = 31.8f;
 80051ea:	78fb      	ldrb	r3, [r7, #3]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	f640 416c 	movw	r1, #3180	; 0xc6c
 80051f2:	fb01 f303 	mul.w	r3, r1, r3
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80051fc:	4a68      	ldr	r2, [pc, #416]	; (80053a0 <setconfig_standart16l+0xa28>)
 80051fe:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][6]  = 38.2f;
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005208:	fb01 f303 	mul.w	r3, r1, r3
 800520c:	4413      	add	r3, r2
 800520e:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8005212:	4a64      	ldr	r2, [pc, #400]	; (80053a4 <setconfig_standart16l+0xa2c>)
 8005214:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][7]  = 40.9f;
 8005216:	78fb      	ldrb	r3, [r7, #3]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800521e:	fb01 f303 	mul.w	r3, r1, r3
 8005222:	4413      	add	r3, r2
 8005224:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005228:	4a5f      	ldr	r2, [pc, #380]	; (80053a8 <setconfig_standart16l+0xa30>)
 800522a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][8]  = 42.4f;
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	4413      	add	r3, r2
 800523a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800523e:	4a5b      	ldr	r2, [pc, #364]	; (80053ac <setconfig_standart16l+0xa34>)
 8005240:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][9]  = 43.2f;
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	f640 416c 	movw	r1, #3180	; 0xc6c
 800524a:	fb01 f303 	mul.w	r3, r1, r3
 800524e:	4413      	add	r3, r2
 8005250:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 8005254:	4a56      	ldr	r2, [pc, #344]	; (80053b0 <setconfig_standart16l+0xa38>)
 8005256:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][10] = 43.7f;
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005260:	fb01 f303 	mul.w	r3, r1, r3
 8005264:	4413      	add	r3, r2
 8005266:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800526a:	4a52      	ldr	r2, [pc, #328]	; (80053b4 <setconfig_standart16l+0xa3c>)
 800526c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][11] = 44.1f;
 800526e:	78fb      	ldrb	r3, [r7, #3]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	4413      	add	r3, r2
 800527c:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 8005280:	4a4d      	ldr	r2, [pc, #308]	; (80053b8 <setconfig_standart16l+0xa40>)
 8005282:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][12] = 44.0f;
 8005284:	78fb      	ldrb	r3, [r7, #3]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	f640 416c 	movw	r1, #3180	; 0xc6c
 800528c:	fb01 f303 	mul.w	r3, r1, r3
 8005290:	4413      	add	r3, r2
 8005292:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 8005296:	4a49      	ldr	r2, [pc, #292]	; (80053bc <setconfig_standart16l+0xa44>)
 8005298:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][13] = 44.1f;
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	f640 416c 	movw	r1, #3180	; 0xc6c
 80052a2:	fb01 f303 	mul.w	r3, r1, r3
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80052ac:	4a42      	ldr	r2, [pc, #264]	; (80053b8 <setconfig_standart16l+0xa40>)
 80052ae:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][14] = 44.7f;
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80052b8:	fb01 f303 	mul.w	r3, r1, r3
 80052bc:	4413      	add	r3, r2
 80052be:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80052c2:	4a3f      	ldr	r2, [pc, #252]	; (80053c0 <setconfig_standart16l+0xa48>)
 80052c4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[3][15] = 44.9f;
 80052c6:	78fb      	ldrb	r3, [r7, #3]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	f640 416c 	movw	r1, #3180	; 0xc6c
 80052ce:	fb01 f303 	mul.w	r3, r1, r3
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80052d8:	4a3a      	ldr	r2, [pc, #232]	; (80053c4 <setconfig_standart16l+0xa4c>)
 80052da:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[4][0]  = 18.7f;
 80052dc:	78fb      	ldrb	r3, [r7, #3]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80052e4:	fb01 f303 	mul.w	r3, r1, r3
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80052ee:	4a27      	ldr	r2, [pc, #156]	; (800538c <setconfig_standart16l+0xa14>)
 80052f0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][1]  = 20.4f;
 80052f2:	78fb      	ldrb	r3, [r7, #3]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80052fa:	fb01 f303 	mul.w	r3, r1, r3
 80052fe:	4413      	add	r3, r2
 8005300:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005304:	4a30      	ldr	r2, [pc, #192]	; (80053c8 <setconfig_standart16l+0xa50>)
 8005306:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][2]  = 21.9f;
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	4413      	add	r3, r2
 8005316:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800531a:	4a2c      	ldr	r2, [pc, #176]	; (80053cc <setconfig_standart16l+0xa54>)
 800531c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][3]  = 24.3f;
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005326:	fb01 f303 	mul.w	r3, r1, r3
 800532a:	4413      	add	r3, r2
 800532c:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8005330:	4a27      	ldr	r2, [pc, #156]	; (80053d0 <setconfig_standart16l+0xa58>)
 8005332:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][4]  = 27.3f;
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	f640 416c 	movw	r1, #3180	; 0xc6c
 800533c:	fb01 f303 	mul.w	r3, r1, r3
 8005340:	4413      	add	r3, r2
 8005342:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005346:	4a23      	ldr	r2, [pc, #140]	; (80053d4 <setconfig_standart16l+0xa5c>)
 8005348:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][5]  = 31.3f;
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005352:	fb01 f303 	mul.w	r3, r1, r3
 8005356:	4413      	add	r3, r2
 8005358:	e03e      	b.n	80053d8 <setconfig_standart16l+0xa60>
 800535a:	bf00      	nop
 800535c:	41c1999a 	.word	0x41c1999a
 8005360:	41dccccd 	.word	0x41dccccd
 8005364:	41fd999a 	.word	0x41fd999a
 8005368:	42193333 	.word	0x42193333
 800536c:	42246666 	.word	0x42246666
 8005370:	422a6666 	.word	0x422a6666
 8005374:	422d999a 	.word	0x422d999a
 8005378:	422c0000 	.word	0x422c0000
 800537c:	4231999a 	.word	0x4231999a
 8005380:	42313333 	.word	0x42313333
 8005384:	42333333 	.word	0x42333333
 8005388:	42340000 	.word	0x42340000
 800538c:	4195999a 	.word	0x4195999a
 8005390:	41a40000 	.word	0x41a40000
 8005394:	41b1999a 	.word	0x41b1999a
 8005398:	41c4cccd 	.word	0x41c4cccd
 800539c:	41dd999a 	.word	0x41dd999a
 80053a0:	41fe6666 	.word	0x41fe6666
 80053a4:	4218cccd 	.word	0x4218cccd
 80053a8:	4223999a 	.word	0x4223999a
 80053ac:	4229999a 	.word	0x4229999a
 80053b0:	422ccccd 	.word	0x422ccccd
 80053b4:	422ecccd 	.word	0x422ecccd
 80053b8:	42306666 	.word	0x42306666
 80053bc:	42300000 	.word	0x42300000
 80053c0:	4232cccd 	.word	0x4232cccd
 80053c4:	4233999a 	.word	0x4233999a
 80053c8:	41a33333 	.word	0x41a33333
 80053cc:	41af3333 	.word	0x41af3333
 80053d0:	41c26666 	.word	0x41c26666
 80053d4:	41da6666 	.word	0x41da6666
 80053d8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80053dc:	4aba      	ldr	r2, [pc, #744]	; (80056c8 <setconfig_standart16l+0xd50>)
 80053de:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][6]  = 37.6f;
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80053f2:	4ab6      	ldr	r2, [pc, #728]	; (80056cc <setconfig_standart16l+0xd54>)
 80053f4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][7]  = 40.3f;
 80053f6:	78fb      	ldrb	r3, [r7, #3]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	f640 416c 	movw	r1, #3180	; 0xc6c
 80053fe:	fb01 f303 	mul.w	r3, r1, r3
 8005402:	4413      	add	r3, r2
 8005404:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005408:	4ab1      	ldr	r2, [pc, #708]	; (80056d0 <setconfig_standart16l+0xd58>)
 800540a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][8]  = 41.7f;
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005414:	fb01 f303 	mul.w	r3, r1, r3
 8005418:	4413      	add	r3, r2
 800541a:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800541e:	4aad      	ldr	r2, [pc, #692]	; (80056d4 <setconfig_standart16l+0xd5c>)
 8005420:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][9]  = 42.4f;
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	f640 416c 	movw	r1, #3180	; 0xc6c
 800542a:	fb01 f303 	mul.w	r3, r1, r3
 800542e:	4413      	add	r3, r2
 8005430:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8005434:	4aa8      	ldr	r2, [pc, #672]	; (80056d8 <setconfig_standart16l+0xd60>)
 8005436:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][10] = 42.9f;
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005440:	fb01 f303 	mul.w	r3, r1, r3
 8005444:	4413      	add	r3, r2
 8005446:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800544a:	4aa4      	ldr	r2, [pc, #656]	; (80056dc <setconfig_standart16l+0xd64>)
 800544c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][11] = 43.2f;
 800544e:	78fb      	ldrb	r3, [r7, #3]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005456:	fb01 f303 	mul.w	r3, r1, r3
 800545a:	4413      	add	r3, r2
 800545c:	f203 4334 	addw	r3, r3, #1076	; 0x434
 8005460:	4a9f      	ldr	r2, [pc, #636]	; (80056e0 <setconfig_standart16l+0xd68>)
 8005462:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][12] = 43.1f;
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	f640 416c 	movw	r1, #3180	; 0xc6c
 800546c:	fb01 f303 	mul.w	r3, r1, r3
 8005470:	4413      	add	r3, r2
 8005472:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8005476:	4a9b      	ldr	r2, [pc, #620]	; (80056e4 <setconfig_standart16l+0xd6c>)
 8005478:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][13] = 43.3f;
 800547a:	78fb      	ldrb	r3, [r7, #3]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005482:	fb01 f303 	mul.w	r3, r1, r3
 8005486:	4413      	add	r3, r2
 8005488:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 800548c:	4a96      	ldr	r2, [pc, #600]	; (80056e8 <setconfig_standart16l+0xd70>)
 800548e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][14] = 43.0f;
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005498:	fb01 f303 	mul.w	r3, r1, r3
 800549c:	4413      	add	r3, r2
 800549e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054a2:	4a92      	ldr	r2, [pc, #584]	; (80056ec <setconfig_standart16l+0xd74>)
 80054a4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[4][15] = 44.2f;
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	f640 416c 	movw	r1, #3180	; 0xc6c
 80054ae:	fb01 f303 	mul.w	r3, r1, r3
 80054b2:	4413      	add	r3, r2
 80054b4:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80054b8:	4a8d      	ldr	r2, [pc, #564]	; (80056f0 <setconfig_standart16l+0xd78>)
 80054ba:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[5][0]  = 17.4f;
 80054bc:	78fb      	ldrb	r3, [r7, #3]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80054c4:	fb01 f303 	mul.w	r3, r1, r3
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80054ce:	4a89      	ldr	r2, [pc, #548]	; (80056f4 <setconfig_standart16l+0xd7c>)
 80054d0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][1]  = 19.4f;
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80054da:	fb01 f303 	mul.w	r3, r1, r3
 80054de:	4413      	add	r3, r2
 80054e0:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 80054e4:	4a84      	ldr	r2, [pc, #528]	; (80056f8 <setconfig_standart16l+0xd80>)
 80054e6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][2]  = 20.9f;
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	f640 416c 	movw	r1, #3180	; 0xc6c
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80054fa:	4a80      	ldr	r2, [pc, #512]	; (80056fc <setconfig_standart16l+0xd84>)
 80054fc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][3]  = 23.2f;
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005506:	fb01 f303 	mul.w	r3, r1, r3
 800550a:	4413      	add	r3, r2
 800550c:	f203 4374 	addw	r3, r3, #1140	; 0x474
 8005510:	4a7b      	ldr	r2, [pc, #492]	; (8005700 <setconfig_standart16l+0xd88>)
 8005512:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][4]  = 26.2f;
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	f640 416c 	movw	r1, #3180	; 0xc6c
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	4413      	add	r3, r2
 8005522:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8005526:	4a77      	ldr	r2, [pc, #476]	; (8005704 <setconfig_standart16l+0xd8c>)
 8005528:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][5]  = 30.1f;
 800552a:	78fb      	ldrb	r3, [r7, #3]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005532:	fb01 f303 	mul.w	r3, r1, r3
 8005536:	4413      	add	r3, r2
 8005538:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 800553c:	4a72      	ldr	r2, [pc, #456]	; (8005708 <setconfig_standart16l+0xd90>)
 800553e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][6]  = 36.3f;
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005548:	fb01 f303 	mul.w	r3, r1, r3
 800554c:	4413      	add	r3, r2
 800554e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8005552:	4a6e      	ldr	r2, [pc, #440]	; (800570c <setconfig_standart16l+0xd94>)
 8005554:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][7]  = 39.1f;
 8005556:	78fb      	ldrb	r3, [r7, #3]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800555e:	fb01 f303 	mul.w	r3, r1, r3
 8005562:	4413      	add	r3, r2
 8005564:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8005568:	4a69      	ldr	r2, [pc, #420]	; (8005710 <setconfig_standart16l+0xd98>)
 800556a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][8]  = 40.6f;
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005574:	fb01 f303 	mul.w	r3, r1, r3
 8005578:	4413      	add	r3, r2
 800557a:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 800557e:	4a65      	ldr	r2, [pc, #404]	; (8005714 <setconfig_standart16l+0xd9c>)
 8005580:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][9]  = 41.3f;
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	f640 416c 	movw	r1, #3180	; 0xc6c
 800558a:	fb01 f303 	mul.w	r3, r1, r3
 800558e:	4413      	add	r3, r2
 8005590:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8005594:	4a60      	ldr	r2, [pc, #384]	; (8005718 <setconfig_standart16l+0xda0>)
 8005596:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][10] = 41.9f;
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	f640 416c 	movw	r1, #3180	; 0xc6c
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80055aa:	4a5c      	ldr	r2, [pc, #368]	; (800571c <setconfig_standart16l+0xda4>)
 80055ac:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][11] = 42.2f;
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80055b6:	fb01 f303 	mul.w	r3, r1, r3
 80055ba:	4413      	add	r3, r2
 80055bc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80055c0:	4a57      	ldr	r2, [pc, #348]	; (8005720 <setconfig_standart16l+0xda8>)
 80055c2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][12] = 42.1f;
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80055cc:	fb01 f303 	mul.w	r3, r1, r3
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80055d6:	4a53      	ldr	r2, [pc, #332]	; (8005724 <setconfig_standart16l+0xdac>)
 80055d8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][13] = 42.3f;
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	f640 416c 	movw	r1, #3180	; 0xc6c
 80055e2:	fb01 f303 	mul.w	r3, r1, r3
 80055e6:	4413      	add	r3, r2
 80055e8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80055ec:	4a4e      	ldr	r2, [pc, #312]	; (8005728 <setconfig_standart16l+0xdb0>)
 80055ee:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][14] = 42.9f;
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80055f8:	fb01 f303 	mul.w	r3, r1, r3
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8005602:	4a36      	ldr	r2, [pc, #216]	; (80056dc <setconfig_standart16l+0xd64>)
 8005604:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[5][15] = 43.1f;
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800560e:	fb01 f303 	mul.w	r3, r1, r3
 8005612:	4413      	add	r3, r2
 8005614:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8005618:	4a32      	ldr	r2, [pc, #200]	; (80056e4 <setconfig_standart16l+0xd6c>)
 800561a:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[6][0]  = 14.9f;
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005624:	fb01 f303 	mul.w	r3, r1, r3
 8005628:	4413      	add	r3, r2
 800562a:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 800562e:	4a3f      	ldr	r2, [pc, #252]	; (800572c <setconfig_standart16l+0xdb4>)
 8005630:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][1]  = 17.2f;
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	f640 416c 	movw	r1, #3180	; 0xc6c
 800563a:	fb01 f303 	mul.w	r3, r1, r3
 800563e:	4413      	add	r3, r2
 8005640:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 8005644:	4a3a      	ldr	r2, [pc, #232]	; (8005730 <setconfig_standart16l+0xdb8>)
 8005646:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][2]  = 18.7f;
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	4413      	add	r3, r2
 8005656:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 800565a:	4a36      	ldr	r2, [pc, #216]	; (8005734 <setconfig_standart16l+0xdbc>)
 800565c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][3]  = 21.1f;
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005666:	fb01 f303 	mul.w	r3, r1, r3
 800566a:	4413      	add	r3, r2
 800566c:	f203 43d4 	addw	r3, r3, #1236	; 0x4d4
 8005670:	4a31      	ldr	r2, [pc, #196]	; (8005738 <setconfig_standart16l+0xdc0>)
 8005672:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][4]  = 24.3f;
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	f640 416c 	movw	r1, #3180	; 0xc6c
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	4413      	add	r3, r2
 8005682:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8005686:	4a2d      	ldr	r2, [pc, #180]	; (800573c <setconfig_standart16l+0xdc4>)
 8005688:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][5]  = 28.4f;
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	4413      	add	r3, r2
 8005698:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800569c:	4a28      	ldr	r2, [pc, #160]	; (8005740 <setconfig_standart16l+0xdc8>)
 800569e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][6]  = 34.3f;
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80056a8:	fb01 f303 	mul.w	r3, r1, r3
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 80056b2:	4a24      	ldr	r2, [pc, #144]	; (8005744 <setconfig_standart16l+0xdcc>)
 80056b4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][7]  = 37.3f;
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	f640 416c 	movw	r1, #3180	; 0xc6c
 80056be:	fb01 f303 	mul.w	r3, r1, r3
 80056c2:	4413      	add	r3, r2
 80056c4:	e040      	b.n	8005748 <setconfig_standart16l+0xdd0>
 80056c6:	bf00      	nop
 80056c8:	41fa6666 	.word	0x41fa6666
 80056cc:	42166666 	.word	0x42166666
 80056d0:	42213333 	.word	0x42213333
 80056d4:	4226cccd 	.word	0x4226cccd
 80056d8:	4229999a 	.word	0x4229999a
 80056dc:	422b999a 	.word	0x422b999a
 80056e0:	422ccccd 	.word	0x422ccccd
 80056e4:	422c6666 	.word	0x422c6666
 80056e8:	422d3333 	.word	0x422d3333
 80056ec:	422c0000 	.word	0x422c0000
 80056f0:	4230cccd 	.word	0x4230cccd
 80056f4:	418b3333 	.word	0x418b3333
 80056f8:	419b3333 	.word	0x419b3333
 80056fc:	41a73333 	.word	0x41a73333
 8005700:	41b9999a 	.word	0x41b9999a
 8005704:	41d1999a 	.word	0x41d1999a
 8005708:	41f0cccd 	.word	0x41f0cccd
 800570c:	42113333 	.word	0x42113333
 8005710:	421c6666 	.word	0x421c6666
 8005714:	42226666 	.word	0x42226666
 8005718:	42253333 	.word	0x42253333
 800571c:	4227999a 	.word	0x4227999a
 8005720:	4228cccd 	.word	0x4228cccd
 8005724:	42286666 	.word	0x42286666
 8005728:	42293333 	.word	0x42293333
 800572c:	416e6666 	.word	0x416e6666
 8005730:	4189999a 	.word	0x4189999a
 8005734:	4195999a 	.word	0x4195999a
 8005738:	41a8cccd 	.word	0x41a8cccd
 800573c:	41c26666 	.word	0x41c26666
 8005740:	41e33333 	.word	0x41e33333
 8005744:	42093333 	.word	0x42093333
 8005748:	f203 43e4 	addw	r3, r3, #1252	; 0x4e4
 800574c:	4aba      	ldr	r2, [pc, #744]	; (8005a38 <setconfig_standart16l+0x10c0>)
 800574e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][8]  = 38.9f;
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005758:	fb01 f303 	mul.w	r3, r1, r3
 800575c:	4413      	add	r3, r2
 800575e:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8005762:	4ab6      	ldr	r2, [pc, #728]	; (8005a3c <setconfig_standart16l+0x10c4>)
 8005764:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][9]  = 39.8f;
 8005766:	78fb      	ldrb	r3, [r7, #3]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800576e:	fb01 f303 	mul.w	r3, r1, r3
 8005772:	4413      	add	r3, r2
 8005774:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8005778:	4ab1      	ldr	r2, [pc, #708]	; (8005a40 <setconfig_standart16l+0x10c8>)
 800577a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][10] = 40.6f;
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	4413      	add	r3, r2
 800578a:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 800578e:	4aad      	ldr	r2, [pc, #692]	; (8005a44 <setconfig_standart16l+0x10cc>)
 8005790:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][11] = 41.0f;
 8005792:	78fb      	ldrb	r3, [r7, #3]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	f640 416c 	movw	r1, #3180	; 0xc6c
 800579a:	fb01 f303 	mul.w	r3, r1, r3
 800579e:	4413      	add	r3, r2
 80057a0:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 80057a4:	4aa8      	ldr	r2, [pc, #672]	; (8005a48 <setconfig_standart16l+0x10d0>)
 80057a6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][12] = 41.0f;
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	f640 416c 	movw	r1, #3180	; 0xc6c
 80057b0:	fb01 f303 	mul.w	r3, r1, r3
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 80057ba:	4aa3      	ldr	r2, [pc, #652]	; (8005a48 <setconfig_standart16l+0x10d0>)
 80057bc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][13] = 41.3f;
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80057c6:	fb01 f303 	mul.w	r3, r1, r3
 80057ca:	4413      	add	r3, r2
 80057cc:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 80057d0:	4a9e      	ldr	r2, [pc, #632]	; (8005a4c <setconfig_standart16l+0x10d4>)
 80057d2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][14] = 41.8f;
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80057dc:	fb01 f303 	mul.w	r3, r1, r3
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e6:	4a9a      	ldr	r2, [pc, #616]	; (8005a50 <setconfig_standart16l+0x10d8>)
 80057e8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[6][15] = 42.0f;
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	f640 416c 	movw	r1, #3180	; 0xc6c
 80057f2:	fb01 f303 	mul.w	r3, r1, r3
 80057f6:	4413      	add	r3, r2
 80057f8:	f203 5304 	addw	r3, r3, #1284	; 0x504
 80057fc:	4a95      	ldr	r2, [pc, #596]	; (8005a54 <setconfig_standart16l+0x10dc>)
 80057fe:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[7][0]  = 12.2f;
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	4413      	add	r3, r2
 800580e:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8005812:	4a91      	ldr	r2, [pc, #580]	; (8005a58 <setconfig_standart16l+0x10e0>)
 8005814:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][1]  = 14.5f;
 8005816:	78fb      	ldrb	r3, [r7, #3]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800581e:	fb01 f303 	mul.w	r3, r1, r3
 8005822:	4413      	add	r3, r2
 8005824:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8005828:	4a8c      	ldr	r2, [pc, #560]	; (8005a5c <setconfig_standart16l+0x10e4>)
 800582a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][2]  = 15.9f;
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005834:	fb01 f303 	mul.w	r3, r1, r3
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800583e:	4a88      	ldr	r2, [pc, #544]	; (8005a60 <setconfig_standart16l+0x10e8>)
 8005840:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][3]  = 17.9f;
 8005842:	78fb      	ldrb	r3, [r7, #3]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	f640 416c 	movw	r1, #3180	; 0xc6c
 800584a:	fb01 f303 	mul.w	r3, r1, r3
 800584e:	4413      	add	r3, r2
 8005850:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8005854:	4a83      	ldr	r2, [pc, #524]	; (8005a64 <setconfig_standart16l+0x10ec>)
 8005856:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][4]  = 21.5f;
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	4413      	add	r3, r2
 8005866:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800586a:	4a7f      	ldr	r2, [pc, #508]	; (8005a68 <setconfig_standart16l+0x10f0>)
 800586c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][5]  = 26.0f;
 800586e:	78fb      	ldrb	r3, [r7, #3]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005876:	fb01 f303 	mul.w	r3, r1, r3
 800587a:	4413      	add	r3, r2
 800587c:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8005880:	4a7a      	ldr	r2, [pc, #488]	; (8005a6c <setconfig_standart16l+0x10f4>)
 8005882:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][6]  = 31.9f;
 8005884:	78fb      	ldrb	r3, [r7, #3]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	f640 416c 	movw	r1, #3180	; 0xc6c
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	4413      	add	r3, r2
 8005892:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8005896:	4a76      	ldr	r2, [pc, #472]	; (8005a70 <setconfig_standart16l+0x10f8>)
 8005898:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][7]  = 35.0f;
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	f640 416c 	movw	r1, #3180	; 0xc6c
 80058a2:	fb01 f303 	mul.w	r3, r1, r3
 80058a6:	4413      	add	r3, r2
 80058a8:	f203 5344 	addw	r3, r3, #1348	; 0x544
 80058ac:	4a71      	ldr	r2, [pc, #452]	; (8005a74 <setconfig_standart16l+0x10fc>)
 80058ae:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][8]  = 36.8f;
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80058b8:	fb01 f303 	mul.w	r3, r1, r3
 80058bc:	4413      	add	r3, r2
 80058be:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 80058c2:	4a6d      	ldr	r2, [pc, #436]	; (8005a78 <setconfig_standart16l+0x1100>)
 80058c4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][9]  = 37.9f;
 80058c6:	78fb      	ldrb	r3, [r7, #3]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	f640 416c 	movw	r1, #3180	; 0xc6c
 80058ce:	fb01 f303 	mul.w	r3, r1, r3
 80058d2:	4413      	add	r3, r2
 80058d4:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 80058d8:	4a68      	ldr	r2, [pc, #416]	; (8005a7c <setconfig_standart16l+0x1104>)
 80058da:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][10] = 38.9f;
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80058e4:	fb01 f303 	mul.w	r3, r1, r3
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 80058ee:	4a53      	ldr	r2, [pc, #332]	; (8005a3c <setconfig_standart16l+0x10c4>)
 80058f0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][11] = 39.5f;
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80058fa:	fb01 f303 	mul.w	r3, r1, r3
 80058fe:	4413      	add	r3, r2
 8005900:	f203 5354 	addw	r3, r3, #1364	; 0x554
 8005904:	4a5e      	ldr	r2, [pc, #376]	; (8005a80 <setconfig_standart16l+0x1108>)
 8005906:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][12] = 39.5f;
 8005908:	78fb      	ldrb	r3, [r7, #3]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005910:	fb01 f303 	mul.w	r3, r1, r3
 8005914:	4413      	add	r3, r2
 8005916:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800591a:	4a59      	ldr	r2, [pc, #356]	; (8005a80 <setconfig_standart16l+0x1108>)
 800591c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][13] = 40.2f;
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005926:	fb01 f303 	mul.w	r3, r1, r3
 800592a:	4413      	add	r3, r2
 800592c:	f203 535c 	addw	r3, r3, #1372	; 0x55c
 8005930:	4a54      	ldr	r2, [pc, #336]	; (8005a84 <setconfig_standart16l+0x110c>)
 8005932:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][14] = 40.8f;
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	f640 416c 	movw	r1, #3180	; 0xc6c
 800593c:	fb01 f303 	mul.w	r3, r1, r3
 8005940:	4413      	add	r3, r2
 8005942:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8005946:	4a50      	ldr	r2, [pc, #320]	; (8005a88 <setconfig_standart16l+0x1110>)
 8005948:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[7][15] = 41.0f;
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005952:	fb01 f303 	mul.w	r3, r1, r3
 8005956:	4413      	add	r3, r2
 8005958:	f203 5364 	addw	r3, r3, #1380	; 0x564
 800595c:	4a3a      	ldr	r2, [pc, #232]	; (8005a48 <setconfig_standart16l+0x10d0>)
 800595e:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[8][0]  = 10.2f;
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005968:	fb01 f303 	mul.w	r3, r1, r3
 800596c:	4413      	add	r3, r2
 800596e:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8005972:	4a46      	ldr	r2, [pc, #280]	; (8005a8c <setconfig_standart16l+0x1114>)
 8005974:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][1]  = 11.9f;
 8005976:	78fb      	ldrb	r3, [r7, #3]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800597e:	fb01 f303 	mul.w	r3, r1, r3
 8005982:	4413      	add	r3, r2
 8005984:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8005988:	4a41      	ldr	r2, [pc, #260]	; (8005a90 <setconfig_standart16l+0x1118>)
 800598a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][2]  = 13.1f;
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005994:	fb01 f303 	mul.w	r3, r1, r3
 8005998:	4413      	add	r3, r2
 800599a:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 800599e:	4a3d      	ldr	r2, [pc, #244]	; (8005a94 <setconfig_standart16l+0x111c>)
 80059a0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][3]  = 14.9f;
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80059aa:	fb01 f303 	mul.w	r3, r1, r3
 80059ae:	4413      	add	r3, r2
 80059b0:	f203 5394 	addw	r3, r3, #1428	; 0x594
 80059b4:	4a38      	ldr	r2, [pc, #224]	; (8005a98 <setconfig_standart16l+0x1120>)
 80059b6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][4]  = 18.3f;
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	f640 416c 	movw	r1, #3180	; 0xc6c
 80059c0:	fb01 f303 	mul.w	r3, r1, r3
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 80059ca:	4a34      	ldr	r2, [pc, #208]	; (8005a9c <setconfig_standart16l+0x1124>)
 80059cc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][5]  = 22.8f;
 80059ce:	78fb      	ldrb	r3, [r7, #3]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80059d6:	fb01 f303 	mul.w	r3, r1, r3
 80059da:	4413      	add	r3, r2
 80059dc:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 80059e0:	4a2f      	ldr	r2, [pc, #188]	; (8005aa0 <setconfig_standart16l+0x1128>)
 80059e2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][6]  = 28.4f;
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80059ec:	fb01 f303 	mul.w	r3, r1, r3
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80059f6:	4a2b      	ldr	r2, [pc, #172]	; (8005aa4 <setconfig_standart16l+0x112c>)
 80059f8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][7]  = 31.9f;
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005a02:	fb01 f303 	mul.w	r3, r1, r3
 8005a06:	4413      	add	r3, r2
 8005a08:	f203 53a4 	addw	r3, r3, #1444	; 0x5a4
 8005a0c:	4a18      	ldr	r2, [pc, #96]	; (8005a70 <setconfig_standart16l+0x10f8>)
 8005a0e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][8]  = 34.2f;
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005a18:	fb01 f303 	mul.w	r3, r1, r3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 8005a22:	4a21      	ldr	r2, [pc, #132]	; (8005aa8 <setconfig_standart16l+0x1130>)
 8005a24:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][9]  = 35.8f;
 8005a26:	78fb      	ldrb	r3, [r7, #3]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005a2e:	fb01 f303 	mul.w	r3, r1, r3
 8005a32:	4413      	add	r3, r2
 8005a34:	e03a      	b.n	8005aac <setconfig_standart16l+0x1134>
 8005a36:	bf00      	nop
 8005a38:	42153333 	.word	0x42153333
 8005a3c:	421b999a 	.word	0x421b999a
 8005a40:	421f3333 	.word	0x421f3333
 8005a44:	42226666 	.word	0x42226666
 8005a48:	42240000 	.word	0x42240000
 8005a4c:	42253333 	.word	0x42253333
 8005a50:	42273333 	.word	0x42273333
 8005a54:	42280000 	.word	0x42280000
 8005a58:	41433333 	.word	0x41433333
 8005a5c:	41680000 	.word	0x41680000
 8005a60:	417e6666 	.word	0x417e6666
 8005a64:	418f3333 	.word	0x418f3333
 8005a68:	41ac0000 	.word	0x41ac0000
 8005a6c:	41d00000 	.word	0x41d00000
 8005a70:	41ff3333 	.word	0x41ff3333
 8005a74:	420c0000 	.word	0x420c0000
 8005a78:	42133333 	.word	0x42133333
 8005a7c:	4217999a 	.word	0x4217999a
 8005a80:	421e0000 	.word	0x421e0000
 8005a84:	4220cccd 	.word	0x4220cccd
 8005a88:	42233333 	.word	0x42233333
 8005a8c:	41233333 	.word	0x41233333
 8005a90:	413e6666 	.word	0x413e6666
 8005a94:	4151999a 	.word	0x4151999a
 8005a98:	416e6666 	.word	0x416e6666
 8005a9c:	41926666 	.word	0x41926666
 8005aa0:	41b66666 	.word	0x41b66666
 8005aa4:	41e33333 	.word	0x41e33333
 8005aa8:	4208cccd 	.word	0x4208cccd
 8005aac:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 8005ab0:	4aba      	ldr	r2, [pc, #744]	; (8005d9c <setconfig_standart16l+0x1424>)
 8005ab2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][10] = 37.2f;
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005abc:	fb01 f303 	mul.w	r3, r1, r3
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8005ac6:	4ab6      	ldr	r2, [pc, #728]	; (8005da0 <setconfig_standart16l+0x1428>)
 8005ac8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][11] = 38.1f;
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005ad2:	fb01 f303 	mul.w	r3, r1, r3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8005adc:	4ab1      	ldr	r2, [pc, #708]	; (8005da4 <setconfig_standart16l+0x142c>)
 8005ade:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][12] = 38.7f;
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005ae8:	fb01 f303 	mul.w	r3, r1, r3
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8005af2:	4aad      	ldr	r2, [pc, #692]	; (8005da8 <setconfig_standart16l+0x1430>)
 8005af4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][13] = 39.1f;
 8005af6:	78fb      	ldrb	r3, [r7, #3]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005afe:	fb01 f303 	mul.w	r3, r1, r3
 8005b02:	4413      	add	r3, r2
 8005b04:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8005b08:	4aa8      	ldr	r2, [pc, #672]	; (8005dac <setconfig_standart16l+0x1434>)
 8005b0a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][14] = 39.7f;
 8005b0c:	78fb      	ldrb	r3, [r7, #3]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005b14:	fb01 f303 	mul.w	r3, r1, r3
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8005b1e:	4aa4      	ldr	r2, [pc, #656]	; (8005db0 <setconfig_standart16l+0x1438>)
 8005b20:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[8][15] = 39.9f;
 8005b22:	78fb      	ldrb	r3, [r7, #3]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005b2a:	fb01 f303 	mul.w	r3, r1, r3
 8005b2e:	4413      	add	r3, r2
 8005b30:	f203 53c4 	addw	r3, r3, #1476	; 0x5c4
 8005b34:	4a9f      	ldr	r2, [pc, #636]	; (8005db4 <setconfig_standart16l+0x143c>)
 8005b36:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[9][0]  = 8.5f;
 8005b38:	78fb      	ldrb	r3, [r7, #3]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005b40:	fb01 f303 	mul.w	r3, r1, r3
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8005b4a:	4a9b      	ldr	r2, [pc, #620]	; (8005db8 <setconfig_standart16l+0x1440>)
 8005b4c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][1]  = 9.7f;
 8005b4e:	78fb      	ldrb	r3, [r7, #3]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005b56:	fb01 f303 	mul.w	r3, r1, r3
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8005b60:	4a96      	ldr	r2, [pc, #600]	; (8005dbc <setconfig_standart16l+0x1444>)
 8005b62:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][2]  = 10.8f;
 8005b64:	78fb      	ldrb	r3, [r7, #3]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005b6c:	fb01 f303 	mul.w	r3, r1, r3
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8005b76:	4a92      	ldr	r2, [pc, #584]	; (8005dc0 <setconfig_standart16l+0x1448>)
 8005b78:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][3]  = 12.4f;
 8005b7a:	78fb      	ldrb	r3, [r7, #3]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005b82:	fb01 f303 	mul.w	r3, r1, r3
 8005b86:	4413      	add	r3, r2
 8005b88:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005b8c:	4a8d      	ldr	r2, [pc, #564]	; (8005dc4 <setconfig_standart16l+0x144c>)
 8005b8e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][4]  = 15.3f;
 8005b90:	78fb      	ldrb	r3, [r7, #3]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005b98:	fb01 f303 	mul.w	r3, r1, r3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 8005ba2:	4a89      	ldr	r2, [pc, #548]	; (8005dc8 <setconfig_standart16l+0x1450>)
 8005ba4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][5]  = 19.2f;
 8005ba6:	78fb      	ldrb	r3, [r7, #3]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005bae:	fb01 f303 	mul.w	r3, r1, r3
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8005bb8:	4a84      	ldr	r2, [pc, #528]	; (8005dcc <setconfig_standart16l+0x1454>)
 8005bba:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][6]  = 23.0f;
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005bc4:	fb01 f303 	mul.w	r3, r1, r3
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8005bce:	4a80      	ldr	r2, [pc, #512]	; (8005dd0 <setconfig_standart16l+0x1458>)
 8005bd0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][7]  = 27.9f;
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005bda:	fb01 f303 	mul.w	r3, r1, r3
 8005bde:	4413      	add	r3, r2
 8005be0:	f203 6304 	addw	r3, r3, #1540	; 0x604
 8005be4:	4a7b      	ldr	r2, [pc, #492]	; (8005dd4 <setconfig_standart16l+0x145c>)
 8005be6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][8]  = 30.0f;
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005bf0:	fb01 f303 	mul.w	r3, r1, r3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8005bfa:	4a77      	ldr	r2, [pc, #476]	; (8005dd8 <setconfig_standart16l+0x1460>)
 8005bfc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][9]  = 33.2f;
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005c06:	fb01 f303 	mul.w	r3, r1, r3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8005c10:	4a72      	ldr	r2, [pc, #456]	; (8005ddc <setconfig_standart16l+0x1464>)
 8005c12:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][10] = 35.4f;
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005c1c:	fb01 f303 	mul.w	r3, r1, r3
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8005c26:	4a6e      	ldr	r2, [pc, #440]	; (8005de0 <setconfig_standart16l+0x1468>)
 8005c28:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][11] = 36.5f;
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005c32:	fb01 f303 	mul.w	r3, r1, r3
 8005c36:	4413      	add	r3, r2
 8005c38:	f203 6314 	addw	r3, r3, #1556	; 0x614
 8005c3c:	4a69      	ldr	r2, [pc, #420]	; (8005de4 <setconfig_standart16l+0x146c>)
 8005c3e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][12] = 36.7f;
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005c48:	fb01 f303 	mul.w	r3, r1, r3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8005c52:	4a65      	ldr	r2, [pc, #404]	; (8005de8 <setconfig_standart16l+0x1470>)
 8005c54:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][13] = 37.0f;
 8005c56:	78fb      	ldrb	r3, [r7, #3]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005c5e:	fb01 f303 	mul.w	r3, r1, r3
 8005c62:	4413      	add	r3, r2
 8005c64:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8005c68:	4a60      	ldr	r2, [pc, #384]	; (8005dec <setconfig_standart16l+0x1474>)
 8005c6a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][14] = 37.5f;
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005c74:	fb01 f303 	mul.w	r3, r1, r3
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8005c7e:	4a5c      	ldr	r2, [pc, #368]	; (8005df0 <setconfig_standart16l+0x1478>)
 8005c80:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[9][15] = 37.7f;
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005c8a:	fb01 f303 	mul.w	r3, r1, r3
 8005c8e:	4413      	add	r3, r2
 8005c90:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005c94:	4a57      	ldr	r2, [pc, #348]	; (8005df4 <setconfig_standart16l+0x147c>)
 8005c96:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[10][0]  = 7.1f;
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005ca0:	fb01 f303 	mul.w	r3, r1, r3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8005caa:	4a53      	ldr	r2, [pc, #332]	; (8005df8 <setconfig_standart16l+0x1480>)
 8005cac:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][1]  = 8.2f;
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005cb6:	fb01 f303 	mul.w	r3, r1, r3
 8005cba:	4413      	add	r3, r2
 8005cbc:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8005cc0:	4a4e      	ldr	r2, [pc, #312]	; (8005dfc <setconfig_standart16l+0x1484>)
 8005cc2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][2]  = 9.2f;
 8005cc4:	78fb      	ldrb	r3, [r7, #3]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8005cd6:	4a4a      	ldr	r2, [pc, #296]	; (8005e00 <setconfig_standart16l+0x1488>)
 8005cd8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][3]  = 10.6f;
 8005cda:	78fb      	ldrb	r3, [r7, #3]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005ce2:	fb01 f303 	mul.w	r3, r1, r3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8005cec:	4a45      	ldr	r2, [pc, #276]	; (8005e04 <setconfig_standart16l+0x148c>)
 8005cee:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][4]  = 12.9f;
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8005d02:	4a41      	ldr	r2, [pc, #260]	; (8005e08 <setconfig_standart16l+0x1490>)
 8005d04:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][5]  = 16.1f;
 8005d06:	78fb      	ldrb	r3, [r7, #3]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	4413      	add	r3, r2
 8005d14:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 8005d18:	4a3c      	ldr	r2, [pc, #240]	; (8005e0c <setconfig_standart16l+0x1494>)
 8005d1a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][6]  = 20.8f;
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005d24:	fb01 f303 	mul.w	r3, r1, r3
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8005d2e:	4a38      	ldr	r2, [pc, #224]	; (8005e10 <setconfig_standart16l+0x1498>)
 8005d30:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][7]  = 24.0f;
 8005d32:	78fb      	ldrb	r3, [r7, #3]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005d3a:	fb01 f303 	mul.w	r3, r1, r3
 8005d3e:	4413      	add	r3, r2
 8005d40:	f203 6364 	addw	r3, r3, #1636	; 0x664
 8005d44:	4a33      	ldr	r2, [pc, #204]	; (8005e14 <setconfig_standart16l+0x149c>)
 8005d46:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][8]  = 28.3f;
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005d50:	fb01 f303 	mul.w	r3, r1, r3
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8005d5a:	4a2f      	ldr	r2, [pc, #188]	; (8005e18 <setconfig_standart16l+0x14a0>)
 8005d5c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][9]  = 30.8f;
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005d66:	fb01 f303 	mul.w	r3, r1, r3
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f203 636c 	addw	r3, r3, #1644	; 0x66c
 8005d70:	4a2a      	ldr	r2, [pc, #168]	; (8005e1c <setconfig_standart16l+0x14a4>)
 8005d72:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][10] = 33.4f;
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005d7c:	fb01 f303 	mul.w	r3, r1, r3
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 8005d86:	4a26      	ldr	r2, [pc, #152]	; (8005e20 <setconfig_standart16l+0x14a8>)
 8005d88:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][11] = 34.2f;
 8005d8a:	78fb      	ldrb	r3, [r7, #3]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005d92:	fb01 f303 	mul.w	r3, r1, r3
 8005d96:	4413      	add	r3, r2
 8005d98:	e044      	b.n	8005e24 <setconfig_standart16l+0x14ac>
 8005d9a:	bf00      	nop
 8005d9c:	420f3333 	.word	0x420f3333
 8005da0:	4214cccd 	.word	0x4214cccd
 8005da4:	42186666 	.word	0x42186666
 8005da8:	421acccd 	.word	0x421acccd
 8005dac:	421c6666 	.word	0x421c6666
 8005db0:	421ecccd 	.word	0x421ecccd
 8005db4:	421f999a 	.word	0x421f999a
 8005db8:	41080000 	.word	0x41080000
 8005dbc:	411b3333 	.word	0x411b3333
 8005dc0:	412ccccd 	.word	0x412ccccd
 8005dc4:	41466666 	.word	0x41466666
 8005dc8:	4174cccd 	.word	0x4174cccd
 8005dcc:	4199999a 	.word	0x4199999a
 8005dd0:	41b80000 	.word	0x41b80000
 8005dd4:	41df3333 	.word	0x41df3333
 8005dd8:	41f00000 	.word	0x41f00000
 8005ddc:	4204cccd 	.word	0x4204cccd
 8005de0:	420d999a 	.word	0x420d999a
 8005de4:	42120000 	.word	0x42120000
 8005de8:	4212cccd 	.word	0x4212cccd
 8005dec:	42140000 	.word	0x42140000
 8005df0:	42160000 	.word	0x42160000
 8005df4:	4216cccd 	.word	0x4216cccd
 8005df8:	40e33333 	.word	0x40e33333
 8005dfc:	41033333 	.word	0x41033333
 8005e00:	41133333 	.word	0x41133333
 8005e04:	4129999a 	.word	0x4129999a
 8005e08:	414e6666 	.word	0x414e6666
 8005e0c:	4180cccd 	.word	0x4180cccd
 8005e10:	41a66666 	.word	0x41a66666
 8005e14:	41c00000 	.word	0x41c00000
 8005e18:	41e26666 	.word	0x41e26666
 8005e1c:	41f66666 	.word	0x41f66666
 8005e20:	4205999a 	.word	0x4205999a
 8005e24:	f203 6374 	addw	r3, r3, #1652	; 0x674
 8005e28:	4aba      	ldr	r2, [pc, #744]	; (8006114 <setconfig_standart16l+0x179c>)
 8005e2a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][12] = 33.7f;
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005e34:	fb01 f303 	mul.w	r3, r1, r3
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8005e3e:	4ab6      	ldr	r2, [pc, #728]	; (8006118 <setconfig_standart16l+0x17a0>)
 8005e40:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][13] = 33.9f;
 8005e42:	78fb      	ldrb	r3, [r7, #3]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005e4a:	fb01 f303 	mul.w	r3, r1, r3
 8005e4e:	4413      	add	r3, r2
 8005e50:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8005e54:	4ab1      	ldr	r2, [pc, #708]	; (800611c <setconfig_standart16l+0x17a4>)
 8005e56:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][14] = 34.2f;
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005e60:	fb01 f303 	mul.w	r3, r1, r3
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8005e6a:	4aaa      	ldr	r2, [pc, #680]	; (8006114 <setconfig_standart16l+0x179c>)
 8005e6c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[10][15] = 34.3f;
 8005e6e:	78fb      	ldrb	r3, [r7, #3]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005e76:	fb01 f303 	mul.w	r3, r1, r3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f203 6384 	addw	r3, r3, #1668	; 0x684
 8005e80:	4aa7      	ldr	r2, [pc, #668]	; (8006120 <setconfig_standart16l+0x17a8>)
 8005e82:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[11][0]  = 6.3f;
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005e8c:	fb01 f303 	mul.w	r3, r1, r3
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 8005e96:	4aa3      	ldr	r2, [pc, #652]	; (8006124 <setconfig_standart16l+0x17ac>)
 8005e98:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][1]  = 7.2f;
 8005e9a:	78fb      	ldrb	r3, [r7, #3]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005ea2:	fb01 f303 	mul.w	r3, r1, r3
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 8005eac:	4a9e      	ldr	r2, [pc, #632]	; (8006128 <setconfig_standart16l+0x17b0>)
 8005eae:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][2]  = 8.1f;
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 63d6 	add.w	r3, r3, #1712	; 0x6b0
 8005ec2:	4a9a      	ldr	r2, [pc, #616]	; (800612c <setconfig_standart16l+0x17b4>)
 8005ec4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][3]  = 9.3f;
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005ece:	fb01 f303 	mul.w	r3, r1, r3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f203 63b4 	addw	r3, r3, #1716	; 0x6b4
 8005ed8:	4a95      	ldr	r2, [pc, #596]	; (8006130 <setconfig_standart16l+0x17b8>)
 8005eda:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][4]  = 11.1f;
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005ee4:	fb01 f303 	mul.w	r3, r1, r3
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8005eee:	4a91      	ldr	r2, [pc, #580]	; (8006134 <setconfig_standart16l+0x17bc>)
 8005ef0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][5]  = 14.0f;
 8005ef2:	78fb      	ldrb	r3, [r7, #3]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005efa:	fb01 f303 	mul.w	r3, r1, r3
 8005efe:	4413      	add	r3, r2
 8005f00:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 8005f04:	4a8c      	ldr	r2, [pc, #560]	; (8006138 <setconfig_standart16l+0x17c0>)
 8005f06:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][6]  = 18.0f;
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005f10:	fb01 f303 	mul.w	r3, r1, r3
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8005f1a:	4a88      	ldr	r2, [pc, #544]	; (800613c <setconfig_standart16l+0x17c4>)
 8005f1c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][7]  = 23.3f;
 8005f1e:	78fb      	ldrb	r3, [r7, #3]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005f26:	fb01 f303 	mul.w	r3, r1, r3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
 8005f30:	4a83      	ldr	r2, [pc, #524]	; (8006140 <setconfig_standart16l+0x17c8>)
 8005f32:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][8]  = 26.9f;
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 8005f46:	4a7f      	ldr	r2, [pc, #508]	; (8006144 <setconfig_standart16l+0x17cc>)
 8005f48:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][9]  = 29.1f;
 8005f4a:	78fb      	ldrb	r3, [r7, #3]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005f52:	fb01 f303 	mul.w	r3, r1, r3
 8005f56:	4413      	add	r3, r2
 8005f58:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8005f5c:	4a7a      	ldr	r2, [pc, #488]	; (8006148 <setconfig_standart16l+0x17d0>)
 8005f5e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][10] = 31.6f;
 8005f60:	78fb      	ldrb	r3, [r7, #3]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005f68:	fb01 f303 	mul.w	r3, r1, r3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8005f72:	4a76      	ldr	r2, [pc, #472]	; (800614c <setconfig_standart16l+0x17d4>)
 8005f74:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][11] = 32.0f;
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005f7e:	fb01 f303 	mul.w	r3, r1, r3
 8005f82:	4413      	add	r3, r2
 8005f84:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 8005f88:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8005f8c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][12] = 31.0f;
 8005f8e:	78fb      	ldrb	r3, [r7, #3]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005f96:	fb01 f303 	mul.w	r3, r1, r3
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 8005fa0:	4a6b      	ldr	r2, [pc, #428]	; (8006150 <setconfig_standart16l+0x17d8>)
 8005fa2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][13] = 31.3f;
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005fac:	fb01 f303 	mul.w	r3, r1, r3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f203 63dc 	addw	r3, r3, #1756	; 0x6dc
 8005fb6:	4a67      	ldr	r2, [pc, #412]	; (8006154 <setconfig_standart16l+0x17dc>)
 8005fb8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][14] = 31.7f;
 8005fba:	78fb      	ldrb	r3, [r7, #3]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005fc2:	fb01 f303 	mul.w	r3, r1, r3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8005fcc:	4a62      	ldr	r2, [pc, #392]	; (8006158 <setconfig_standart16l+0x17e0>)
 8005fce:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[11][15] = 31.8f;
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	4413      	add	r3, r2
 8005fde:	f203 63e4 	addw	r3, r3, #1764	; 0x6e4
 8005fe2:	4a5e      	ldr	r2, [pc, #376]	; (800615c <setconfig_standart16l+0x17e4>)
 8005fe4:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[12][0]  = 6.1f;
 8005fe6:	78fb      	ldrb	r3, [r7, #3]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	f640 416c 	movw	r1, #3180	; 0xc6c
 8005fee:	fb01 f303 	mul.w	r3, r1, r3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
 8005ff8:	4a59      	ldr	r2, [pc, #356]	; (8006160 <setconfig_standart16l+0x17e8>)
 8005ffa:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][1]  = 6.7f;
 8005ffc:	78fb      	ldrb	r3, [r7, #3]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006004:	fb01 f303 	mul.w	r3, r1, r3
 8006008:	4413      	add	r3, r2
 800600a:	f203 730c 	addw	r3, r3, #1804	; 0x70c
 800600e:	4a55      	ldr	r2, [pc, #340]	; (8006164 <setconfig_standart16l+0x17ec>)
 8006010:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][2]  = 7.3f;
 8006012:	78fb      	ldrb	r3, [r7, #3]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	f640 416c 	movw	r1, #3180	; 0xc6c
 800601a:	fb01 f303 	mul.w	r3, r1, r3
 800601e:	4413      	add	r3, r2
 8006020:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 8006024:	4a50      	ldr	r2, [pc, #320]	; (8006168 <setconfig_standart16l+0x17f0>)
 8006026:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][3]  = 8.4f;
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006030:	fb01 f303 	mul.w	r3, r1, r3
 8006034:	4413      	add	r3, r2
 8006036:	f203 7314 	addw	r3, r3, #1812	; 0x714
 800603a:	4a4c      	ldr	r2, [pc, #304]	; (800616c <setconfig_standart16l+0x17f4>)
 800603c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][4]  = 9.9f;
 800603e:	78fb      	ldrb	r3, [r7, #3]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006046:	fb01 f303 	mul.w	r3, r1, r3
 800604a:	4413      	add	r3, r2
 800604c:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8006050:	4a47      	ldr	r2, [pc, #284]	; (8006170 <setconfig_standart16l+0x17f8>)
 8006052:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][5]  = 12.5f;
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	f640 416c 	movw	r1, #3180	; 0xc6c
 800605c:	fb01 f303 	mul.w	r3, r1, r3
 8006060:	4413      	add	r3, r2
 8006062:	f203 731c 	addw	r3, r3, #1820	; 0x71c
 8006066:	4a43      	ldr	r2, [pc, #268]	; (8006174 <setconfig_standart16l+0x17fc>)
 8006068:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][6]  = 17.7f;
 800606a:	78fb      	ldrb	r3, [r7, #3]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006072:	fb01 f303 	mul.w	r3, r1, r3
 8006076:	4413      	add	r3, r2
 8006078:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800607c:	4a3e      	ldr	r2, [pc, #248]	; (8006178 <setconfig_standart16l+0x1800>)
 800607e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][7]  = 22.0f;
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006088:	fb01 f303 	mul.w	r3, r1, r3
 800608c:	4413      	add	r3, r2
 800608e:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8006092:	4a3a      	ldr	r2, [pc, #232]	; (800617c <setconfig_standart16l+0x1804>)
 8006094:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][8]  = 25.9f;
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800609e:	fb01 f303 	mul.w	r3, r1, r3
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 80060a8:	4a35      	ldr	r2, [pc, #212]	; (8006180 <setconfig_standart16l+0x1808>)
 80060aa:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][9]  = 27.9f;
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80060b4:	fb01 f303 	mul.w	r3, r1, r3
 80060b8:	4413      	add	r3, r2
 80060ba:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 80060be:	4a31      	ldr	r2, [pc, #196]	; (8006184 <setconfig_standart16l+0x180c>)
 80060c0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][10] = 30.1f;
 80060c2:	78fb      	ldrb	r3, [r7, #3]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80060ca:	fb01 f303 	mul.w	r3, r1, r3
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 80060d4:	4a2c      	ldr	r2, [pc, #176]	; (8006188 <setconfig_standart16l+0x1810>)
 80060d6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][11] = 30.3f;
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	f640 416c 	movw	r1, #3180	; 0xc6c
 80060e0:	fb01 f303 	mul.w	r3, r1, r3
 80060e4:	4413      	add	r3, r2
 80060e6:	f203 7334 	addw	r3, r3, #1844	; 0x734
 80060ea:	4a28      	ldr	r2, [pc, #160]	; (800618c <setconfig_standart16l+0x1814>)
 80060ec:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][12] = 29.2f;
 80060ee:	78fb      	ldrb	r3, [r7, #3]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80060f6:	fb01 f303 	mul.w	r3, r1, r3
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8006100:	4a23      	ldr	r2, [pc, #140]	; (8006190 <setconfig_standart16l+0x1818>)
 8006102:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][13] = 29.4f;
 8006104:	78fb      	ldrb	r3, [r7, #3]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	f640 416c 	movw	r1, #3180	; 0xc6c
 800610c:	fb01 f303 	mul.w	r3, r1, r3
 8006110:	4413      	add	r3, r2
 8006112:	e03f      	b.n	8006194 <setconfig_standart16l+0x181c>
 8006114:	4208cccd 	.word	0x4208cccd
 8006118:	4206cccd 	.word	0x4206cccd
 800611c:	4207999a 	.word	0x4207999a
 8006120:	42093333 	.word	0x42093333
 8006124:	40c9999a 	.word	0x40c9999a
 8006128:	40e66666 	.word	0x40e66666
 800612c:	4101999a 	.word	0x4101999a
 8006130:	4114cccd 	.word	0x4114cccd
 8006134:	4131999a 	.word	0x4131999a
 8006138:	41600000 	.word	0x41600000
 800613c:	41900000 	.word	0x41900000
 8006140:	41ba6666 	.word	0x41ba6666
 8006144:	41d73333 	.word	0x41d73333
 8006148:	41e8cccd 	.word	0x41e8cccd
 800614c:	41fccccd 	.word	0x41fccccd
 8006150:	41f80000 	.word	0x41f80000
 8006154:	41fa6666 	.word	0x41fa6666
 8006158:	41fd999a 	.word	0x41fd999a
 800615c:	41fe6666 	.word	0x41fe6666
 8006160:	40c33333 	.word	0x40c33333
 8006164:	40d66666 	.word	0x40d66666
 8006168:	40e9999a 	.word	0x40e9999a
 800616c:	41066666 	.word	0x41066666
 8006170:	411e6666 	.word	0x411e6666
 8006174:	41480000 	.word	0x41480000
 8006178:	418d999a 	.word	0x418d999a
 800617c:	41b00000 	.word	0x41b00000
 8006180:	41cf3333 	.word	0x41cf3333
 8006184:	41df3333 	.word	0x41df3333
 8006188:	41f0cccd 	.word	0x41f0cccd
 800618c:	41f26666 	.word	0x41f26666
 8006190:	41e9999a 	.word	0x41e9999a
 8006194:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8006198:	4aba      	ldr	r2, [pc, #744]	; (8006484 <setconfig_standart16l+0x1b0c>)
 800619a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][14] = 30.0f;
 800619c:	78fb      	ldrb	r3, [r7, #3]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80061a4:	fb01 f303 	mul.w	r3, r1, r3
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 80061ae:	4ab6      	ldr	r2, [pc, #728]	; (8006488 <setconfig_standart16l+0x1b10>)
 80061b0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[12][15] = 30.2f;
 80061b2:	78fb      	ldrb	r3, [r7, #3]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80061ba:	fb01 f303 	mul.w	r3, r1, r3
 80061be:	4413      	add	r3, r2
 80061c0:	f203 7344 	addw	r3, r3, #1860	; 0x744
 80061c4:	4ab1      	ldr	r2, [pc, #708]	; (800648c <setconfig_standart16l+0x1b14>)
 80061c6:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[13][0]  = 6.0f;
 80061c8:	78fb      	ldrb	r3, [r7, #3]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	f640 416c 	movw	r1, #3180	; 0xc6c
 80061d0:	fb01 f303 	mul.w	r3, r1, r3
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 63ed 	add.w	r3, r3, #1896	; 0x768
 80061da:	4aad      	ldr	r2, [pc, #692]	; (8006490 <setconfig_standart16l+0x1b18>)
 80061dc:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][1]  = 6.5f;
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80061e6:	fb01 f303 	mul.w	r3, r1, r3
 80061ea:	4413      	add	r3, r2
 80061ec:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80061f0:	4aa8      	ldr	r2, [pc, #672]	; (8006494 <setconfig_standart16l+0x1b1c>)
 80061f2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][2]  = 7.1f;
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80061fc:	fb01 f303 	mul.w	r3, r1, r3
 8006200:	4413      	add	r3, r2
 8006202:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 8006206:	4aa4      	ldr	r2, [pc, #656]	; (8006498 <setconfig_standart16l+0x1b20>)
 8006208:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][3]  = 7.9f;
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006212:	fb01 f303 	mul.w	r3, r1, r3
 8006216:	4413      	add	r3, r2
 8006218:	f203 7374 	addw	r3, r3, #1908	; 0x774
 800621c:	4a9f      	ldr	r2, [pc, #636]	; (800649c <setconfig_standart16l+0x1b24>)
 800621e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][4]  = 9.1f;
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006228:	fb01 f303 	mul.w	r3, r1, r3
 800622c:	4413      	add	r3, r2
 800622e:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8006232:	4a9b      	ldr	r2, [pc, #620]	; (80064a0 <setconfig_standart16l+0x1b28>)
 8006234:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][5]  = 11.3f;
 8006236:	78fb      	ldrb	r3, [r7, #3]
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800623e:	fb01 f303 	mul.w	r3, r1, r3
 8006242:	4413      	add	r3, r2
 8006244:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8006248:	4a96      	ldr	r2, [pc, #600]	; (80064a4 <setconfig_standart16l+0x1b2c>)
 800624a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][6]  = 15.8f;
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006254:	fb01 f303 	mul.w	r3, r1, r3
 8006258:	4413      	add	r3, r2
 800625a:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 800625e:	4a92      	ldr	r2, [pc, #584]	; (80064a8 <setconfig_standart16l+0x1b30>)
 8006260:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][7]  = 20.3f;
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	f640 416c 	movw	r1, #3180	; 0xc6c
 800626a:	fb01 f303 	mul.w	r3, r1, r3
 800626e:	4413      	add	r3, r2
 8006270:	f203 7384 	addw	r3, r3, #1924	; 0x784
 8006274:	4a8d      	ldr	r2, [pc, #564]	; (80064ac <setconfig_standart16l+0x1b34>)
 8006276:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][8]  = 24.4f;
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006280:	fb01 f303 	mul.w	r3, r1, r3
 8006284:	4413      	add	r3, r2
 8006286:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800628a:	4a89      	ldr	r2, [pc, #548]	; (80064b0 <setconfig_standart16l+0x1b38>)
 800628c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][9]  = 26.6f;
 800628e:	78fb      	ldrb	r3, [r7, #3]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006296:	fb01 f303 	mul.w	r3, r1, r3
 800629a:	4413      	add	r3, r2
 800629c:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 80062a0:	4a84      	ldr	r2, [pc, #528]	; (80064b4 <setconfig_standart16l+0x1b3c>)
 80062a2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][10] = 28.7f;
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80062ac:	fb01 f303 	mul.w	r3, r1, r3
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 80062b6:	4a80      	ldr	r2, [pc, #512]	; (80064b8 <setconfig_standart16l+0x1b40>)
 80062b8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][11] = 28.8f;
 80062ba:	78fb      	ldrb	r3, [r7, #3]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	f640 416c 	movw	r1, #3180	; 0xc6c
 80062c2:	fb01 f303 	mul.w	r3, r1, r3
 80062c6:	4413      	add	r3, r2
 80062c8:	f203 7394 	addw	r3, r3, #1940	; 0x794
 80062cc:	4a7b      	ldr	r2, [pc, #492]	; (80064bc <setconfig_standart16l+0x1b44>)
 80062ce:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][12] = 27.6f;
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80062d8:	fb01 f303 	mul.w	r3, r1, r3
 80062dc:	4413      	add	r3, r2
 80062de:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 80062e2:	4a77      	ldr	r2, [pc, #476]	; (80064c0 <setconfig_standart16l+0x1b48>)
 80062e4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][13] = 27.9f;
 80062e6:	78fb      	ldrb	r3, [r7, #3]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	f640 416c 	movw	r1, #3180	; 0xc6c
 80062ee:	fb01 f303 	mul.w	r3, r1, r3
 80062f2:	4413      	add	r3, r2
 80062f4:	f203 739c 	addw	r3, r3, #1948	; 0x79c
 80062f8:	4a72      	ldr	r2, [pc, #456]	; (80064c4 <setconfig_standart16l+0x1b4c>)
 80062fa:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][14] = 28.6f;
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006304:	fb01 f303 	mul.w	r3, r1, r3
 8006308:	4413      	add	r3, r2
 800630a:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 800630e:	4a6e      	ldr	r2, [pc, #440]	; (80064c8 <setconfig_standart16l+0x1b50>)
 8006310:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[13][15] = 28.8f;
 8006312:	78fb      	ldrb	r3, [r7, #3]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	f640 416c 	movw	r1, #3180	; 0xc6c
 800631a:	fb01 f303 	mul.w	r3, r1, r3
 800631e:	4413      	add	r3, r2
 8006320:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8006324:	4a65      	ldr	r2, [pc, #404]	; (80064bc <setconfig_standart16l+0x1b44>)
 8006326:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[14][0]  = 6.0f;
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006330:	fb01 f303 	mul.w	r3, r1, r3
 8006334:	4413      	add	r3, r2
 8006336:	f503 63f9 	add.w	r3, r3, #1992	; 0x7c8
 800633a:	4a55      	ldr	r2, [pc, #340]	; (8006490 <setconfig_standart16l+0x1b18>)
 800633c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][1]  = 6.5f;
 800633e:	78fb      	ldrb	r3, [r7, #3]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006346:	fb01 f303 	mul.w	r3, r1, r3
 800634a:	4413      	add	r3, r2
 800634c:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 8006350:	4a50      	ldr	r2, [pc, #320]	; (8006494 <setconfig_standart16l+0x1b1c>)
 8006352:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][2]  = 7.0f;
 8006354:	78fb      	ldrb	r3, [r7, #3]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	f640 416c 	movw	r1, #3180	; 0xc6c
 800635c:	fb01 f303 	mul.w	r3, r1, r3
 8006360:	4413      	add	r3, r2
 8006362:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006366:	4a59      	ldr	r2, [pc, #356]	; (80064cc <setconfig_standart16l+0x1b54>)
 8006368:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][3]  = 7.7f;
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006372:	fb01 f303 	mul.w	r3, r1, r3
 8006376:	4413      	add	r3, r2
 8006378:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 800637c:	4a54      	ldr	r2, [pc, #336]	; (80064d0 <setconfig_standart16l+0x1b58>)
 800637e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][4]  = 8.7f;
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	4413      	add	r3, r2
 800638e:	f503 63fb 	add.w	r3, r3, #2008	; 0x7d8
 8006392:	4a50      	ldr	r2, [pc, #320]	; (80064d4 <setconfig_standart16l+0x1b5c>)
 8006394:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][5]  = 10.5f;
 8006396:	78fb      	ldrb	r3, [r7, #3]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	4413      	add	r3, r2
 80063a4:	f203 73dc 	addw	r3, r3, #2012	; 0x7dc
 80063a8:	4a4b      	ldr	r2, [pc, #300]	; (80064d8 <setconfig_standart16l+0x1b60>)
 80063aa:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][6]  = 14.1f;
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80063b4:	fb01 f303 	mul.w	r3, r1, r3
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80063be:	4a47      	ldr	r2, [pc, #284]	; (80064dc <setconfig_standart16l+0x1b64>)
 80063c0:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][7]  = 18.2f;
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80063ca:	fb01 f303 	mul.w	r3, r1, r3
 80063ce:	4413      	add	r3, r2
 80063d0:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 80063d4:	4a42      	ldr	r2, [pc, #264]	; (80064e0 <setconfig_standart16l+0x1b68>)
 80063d6:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][8]  = 22.1f;
 80063d8:	78fb      	ldrb	r3, [r7, #3]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	f640 416c 	movw	r1, #3180	; 0xc6c
 80063e0:	fb01 f303 	mul.w	r3, r1, r3
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 63fd 	add.w	r3, r3, #2024	; 0x7e8
 80063ea:	4a3e      	ldr	r2, [pc, #248]	; (80064e4 <setconfig_standart16l+0x1b6c>)
 80063ec:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][9]  = 24.5f;
 80063ee:	78fb      	ldrb	r3, [r7, #3]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80063f6:	fb01 f303 	mul.w	r3, r1, r3
 80063fa:	4413      	add	r3, r2
 80063fc:	f203 73ec 	addw	r3, r3, #2028	; 0x7ec
 8006400:	4a39      	ldr	r2, [pc, #228]	; (80064e8 <setconfig_standart16l+0x1b70>)
 8006402:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][10] = 26.8f;
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	f640 416c 	movw	r1, #3180	; 0xc6c
 800640c:	fb01 f303 	mul.w	r3, r1, r3
 8006410:	4413      	add	r3, r2
 8006412:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 8006416:	4a35      	ldr	r2, [pc, #212]	; (80064ec <setconfig_standart16l+0x1b74>)
 8006418:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][11] = 27.0f;
 800641a:	78fb      	ldrb	r3, [r7, #3]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006422:	fb01 f303 	mul.w	r3, r1, r3
 8006426:	4413      	add	r3, r2
 8006428:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 800642c:	4a30      	ldr	r2, [pc, #192]	; (80064f0 <setconfig_standart16l+0x1b78>)
 800642e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][12] = 25.9f;
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006438:	fb01 f303 	mul.w	r3, r1, r3
 800643c:	4413      	add	r3, r2
 800643e:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8006442:	4a2c      	ldr	r2, [pc, #176]	; (80064f4 <setconfig_standart16l+0x1b7c>)
 8006444:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][13] = 26.2f;
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800644e:	fb01 f303 	mul.w	r3, r1, r3
 8006452:	4413      	add	r3, r2
 8006454:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8006458:	4a27      	ldr	r2, [pc, #156]	; (80064f8 <setconfig_standart16l+0x1b80>)
 800645a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][14] = 26.8f;
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006464:	fb01 f303 	mul.w	r3, r1, r3
 8006468:	4413      	add	r3, r2
 800646a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646e:	4a1f      	ldr	r2, [pc, #124]	; (80064ec <setconfig_standart16l+0x1b74>)
 8006470:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[14][15] = 27.0f;
 8006472:	78fb      	ldrb	r3, [r7, #3]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	f640 416c 	movw	r1, #3180	; 0xc6c
 800647a:	fb01 f303 	mul.w	r3, r1, r3
 800647e:	4413      	add	r3, r2
 8006480:	e03c      	b.n	80064fc <setconfig_standart16l+0x1b84>
 8006482:	bf00      	nop
 8006484:	41eb3333 	.word	0x41eb3333
 8006488:	41f00000 	.word	0x41f00000
 800648c:	41f1999a 	.word	0x41f1999a
 8006490:	40c00000 	.word	0x40c00000
 8006494:	40d00000 	.word	0x40d00000
 8006498:	40e33333 	.word	0x40e33333
 800649c:	40fccccd 	.word	0x40fccccd
 80064a0:	4111999a 	.word	0x4111999a
 80064a4:	4134cccd 	.word	0x4134cccd
 80064a8:	417ccccd 	.word	0x417ccccd
 80064ac:	41a26666 	.word	0x41a26666
 80064b0:	41c33333 	.word	0x41c33333
 80064b4:	41d4cccd 	.word	0x41d4cccd
 80064b8:	41e5999a 	.word	0x41e5999a
 80064bc:	41e66666 	.word	0x41e66666
 80064c0:	41dccccd 	.word	0x41dccccd
 80064c4:	41df3333 	.word	0x41df3333
 80064c8:	41e4cccd 	.word	0x41e4cccd
 80064cc:	40e00000 	.word	0x40e00000
 80064d0:	40f66666 	.word	0x40f66666
 80064d4:	410b3333 	.word	0x410b3333
 80064d8:	41280000 	.word	0x41280000
 80064dc:	4161999a 	.word	0x4161999a
 80064e0:	4191999a 	.word	0x4191999a
 80064e4:	41b0cccd 	.word	0x41b0cccd
 80064e8:	41c40000 	.word	0x41c40000
 80064ec:	41d66666 	.word	0x41d66666
 80064f0:	41d80000 	.word	0x41d80000
 80064f4:	41cf3333 	.word	0x41cf3333
 80064f8:	41d1999a 	.word	0x41d1999a
 80064fc:	f603 0304 	addw	r3, r3, #2052	; 0x804
 8006500:	4a5b      	ldr	r2, [pc, #364]	; (8006670 <setconfig_standart16l+0x1cf8>)
 8006502:	601a      	str	r2, [r3, #0]

  config->tables[i].ignitions[15][0]  = 6.0f;
 8006504:	78fb      	ldrb	r3, [r7, #3]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	f640 416c 	movw	r1, #3180	; 0xc6c
 800650c:	fb01 f303 	mul.w	r3, r1, r3
 8006510:	4413      	add	r3, r2
 8006512:	f603 0328 	addw	r3, r3, #2088	; 0x828
 8006516:	4a57      	ldr	r2, [pc, #348]	; (8006674 <setconfig_standart16l+0x1cfc>)
 8006518:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][1]  = 6.5f;
 800651a:	78fb      	ldrb	r3, [r7, #3]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006522:	fb01 f303 	mul.w	r3, r1, r3
 8006526:	4413      	add	r3, r2
 8006528:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 800652c:	4a52      	ldr	r2, [pc, #328]	; (8006678 <setconfig_standart16l+0x1d00>)
 800652e:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][2]  = 7.0f;
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006538:	fb01 f303 	mul.w	r3, r1, r3
 800653c:	4413      	add	r3, r2
 800653e:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 8006542:	4a4e      	ldr	r2, [pc, #312]	; (800667c <setconfig_standart16l+0x1d04>)
 8006544:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][3]  = 7.6f;
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800654e:	fb01 f303 	mul.w	r3, r1, r3
 8006552:	4413      	add	r3, r2
 8006554:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8006558:	4a49      	ldr	r2, [pc, #292]	; (8006680 <setconfig_standart16l+0x1d08>)
 800655a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][4]  = 8.5f;
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006564:	fb01 f303 	mul.w	r3, r1, r3
 8006568:	4413      	add	r3, r2
 800656a:	f603 0338 	addw	r3, r3, #2104	; 0x838
 800656e:	4a45      	ldr	r2, [pc, #276]	; (8006684 <setconfig_standart16l+0x1d0c>)
 8006570:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][5]  = 9.9f;
 8006572:	78fb      	ldrb	r3, [r7, #3]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	f640 416c 	movw	r1, #3180	; 0xc6c
 800657a:	fb01 f303 	mul.w	r3, r1, r3
 800657e:	4413      	add	r3, r2
 8006580:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8006584:	4a40      	ldr	r2, [pc, #256]	; (8006688 <setconfig_standart16l+0x1d10>)
 8006586:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][6]  = 12.3f;
 8006588:	78fb      	ldrb	r3, [r7, #3]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006590:	fb01 f303 	mul.w	r3, r1, r3
 8006594:	4413      	add	r3, r2
 8006596:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800659a:	4a3c      	ldr	r2, [pc, #240]	; (800668c <setconfig_standart16l+0x1d14>)
 800659c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][7]  = 15.8f;
 800659e:	78fb      	ldrb	r3, [r7, #3]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80065a6:	fb01 f303 	mul.w	r3, r1, r3
 80065aa:	4413      	add	r3, r2
 80065ac:	f603 0344 	addw	r3, r3, #2116	; 0x844
 80065b0:	4a37      	ldr	r2, [pc, #220]	; (8006690 <setconfig_standart16l+0x1d18>)
 80065b2:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][8]  = 19.5f;
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80065bc:	fb01 f303 	mul.w	r3, r1, r3
 80065c0:	4413      	add	r3, r2
 80065c2:	f603 0348 	addw	r3, r3, #2120	; 0x848
 80065c6:	4a33      	ldr	r2, [pc, #204]	; (8006694 <setconfig_standart16l+0x1d1c>)
 80065c8:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][9]  = 22.2f;
 80065ca:	78fb      	ldrb	r3, [r7, #3]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	f640 416c 	movw	r1, #3180	; 0xc6c
 80065d2:	fb01 f303 	mul.w	r3, r1, r3
 80065d6:	4413      	add	r3, r2
 80065d8:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 80065dc:	4a2e      	ldr	r2, [pc, #184]	; (8006698 <setconfig_standart16l+0x1d20>)
 80065de:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][10] = 24.8f;
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80065e8:	fb01 f303 	mul.w	r3, r1, r3
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80065f2:	4a2a      	ldr	r2, [pc, #168]	; (800669c <setconfig_standart16l+0x1d24>)
 80065f4:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][11] = 25.1f;
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	f640 416c 	movw	r1, #3180	; 0xc6c
 80065fe:	fb01 f303 	mul.w	r3, r1, r3
 8006602:	4413      	add	r3, r2
 8006604:	f603 0354 	addw	r3, r3, #2132	; 0x854
 8006608:	4a25      	ldr	r2, [pc, #148]	; (80066a0 <setconfig_standart16l+0x1d28>)
 800660a:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][12] = 24.0f;
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006614:	fb01 f303 	mul.w	r3, r1, r3
 8006618:	4413      	add	r3, r2
 800661a:	f603 0358 	addw	r3, r3, #2136	; 0x858
 800661e:	4a21      	ldr	r2, [pc, #132]	; (80066a4 <setconfig_standart16l+0x1d2c>)
 8006620:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][13] = 24.3f;
 8006622:	78fb      	ldrb	r3, [r7, #3]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	f640 416c 	movw	r1, #3180	; 0xc6c
 800662a:	fb01 f303 	mul.w	r3, r1, r3
 800662e:	4413      	add	r3, r2
 8006630:	f603 035c 	addw	r3, r3, #2140	; 0x85c
 8006634:	4a1c      	ldr	r2, [pc, #112]	; (80066a8 <setconfig_standart16l+0x1d30>)
 8006636:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][14] = 24.8f;
 8006638:	78fb      	ldrb	r3, [r7, #3]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	4413      	add	r3, r2
 8006646:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 800664a:	4a14      	ldr	r2, [pc, #80]	; (800669c <setconfig_standart16l+0x1d24>)
 800664c:	601a      	str	r2, [r3, #0]
  config->tables[i].ignitions[15][15] = 25.0f;
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006656:	fb01 f303 	mul.w	r3, r1, r3
 800665a:	4413      	add	r3, r2
 800665c:	f603 0364 	addw	r3, r3, #2148	; 0x864
 8006660:	4a12      	ldr	r2, [pc, #72]	; (80066ac <setconfig_standart16l+0x1d34>)
 8006662:	601a      	str	r2, [r3, #0]
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	41d80000 	.word	0x41d80000
 8006674:	40c00000 	.word	0x40c00000
 8006678:	40d00000 	.word	0x40d00000
 800667c:	40e00000 	.word	0x40e00000
 8006680:	40f33333 	.word	0x40f33333
 8006684:	41080000 	.word	0x41080000
 8006688:	411e6666 	.word	0x411e6666
 800668c:	4144cccd 	.word	0x4144cccd
 8006690:	417ccccd 	.word	0x417ccccd
 8006694:	419c0000 	.word	0x419c0000
 8006698:	41b1999a 	.word	0x41b1999a
 800669c:	41c66666 	.word	0x41c66666
 80066a0:	41c8cccd 	.word	0x41c8cccd
 80066a4:	41c00000 	.word	0x41c00000
 80066a8:	41c26666 	.word	0x41c26666
 80066ac:	41c80000 	.word	0x41c80000

080066b0 <config_default>:

HAL_StatusTypeDef config_default(sAcisConfig * config)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	72fb      	strb	r3, [r7, #11]

  for(int i = 0; i < sizeof(sAcisConfig); i++)
 80066bc:	2300      	movs	r3, #0
 80066be:	617b      	str	r3, [r7, #20]
 80066c0:	e007      	b.n	80066d2 <config_default+0x22>
    ((uint8_t*)config)[i] = 0;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	4413      	add	r3, r2
 80066c8:	2200      	movs	r2, #0
 80066ca:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < sizeof(sAcisConfig); i++)
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	3301      	adds	r3, #1
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f5b3 5f4b 	cmp.w	r3, #12992	; 0x32c0
 80066d8:	d3f3      	bcc.n	80066c2 <config_default+0x12>

  config->params.isCutoffEnabled = 1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	605a      	str	r2, [r3, #4]
  config->params.isTemperatureEnabled = 1;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	609a      	str	r2, [r3, #8]
  config->params.isEconomEnabled = 1;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	60da      	str	r2, [r3, #12]
  config->params.isAutostartEnabled = 0;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	611a      	str	r2, [r3, #16]
  config->params.isIgnitionByHall = 0;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	615a      	str	r2, [r3, #20]
  config->params.isForceTable = 0;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	625a      	str	r2, [r3, #36]	; 0x24
  config->params.isHallLearningMode = 0;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	619a      	str	r2, [r3, #24]
  config->params.isSwitchByExternal = 1;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	61da      	str	r2, [r3, #28]
  config->params.isEconOutAsStrobe = 0;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	621a      	str	r2, [r3, #32]

  config->params.switchPos1Table = 0;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	62da      	str	r2, [r3, #44]	; 0x2c
  config->params.switchPos0Table = 0;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	631a      	str	r2, [r3, #48]	; 0x30
  config->params.switchPos2Table = 0;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	635a      	str	r2, [r3, #52]	; 0x34
  config->params.forceTableNumber = 0;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	629a      	str	r2, [r3, #40]	; 0x28

  config->params.EconRpmThreshold = 2000;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a11      	ldr	r2, [pc, #68]	; (8006770 <config_default+0xc0>)
 800672c:	639a      	str	r2, [r3, #56]	; 0x38
  config->params.CutoffRPM = 5000;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a10      	ldr	r2, [pc, #64]	; (8006774 <config_default+0xc4>)
 8006732:	63da      	str	r2, [r3, #60]	; 0x3c

  for(int i = 0; i < TABLE_SETUPS_MAX; i++)
 8006734:	2300      	movs	r3, #0
 8006736:	613b      	str	r3, [r7, #16]
 8006738:	e010      	b.n	800675c <config_default+0xac>
    memset(&config->tables[i], 0, sizeof(sAcisIgnTable));
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f640 426c 	movw	r2, #3180	; 0xc6c
 8006740:	fb02 f303 	mul.w	r3, r2, r3
 8006744:	33e0      	adds	r3, #224	; 0xe0
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	4413      	add	r3, r2
 800674a:	f640 426c 	movw	r2, #3180	; 0xc6c
 800674e:	2100      	movs	r1, #0
 8006750:	4618      	mov	r0, r3
 8006752:	f00b f876 	bl	8011842 <memset>
  for(int i = 0; i < TABLE_SETUPS_MAX; i++)
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	3301      	adds	r3, #1
 800675a:	613b      	str	r3, [r7, #16]
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	2b03      	cmp	r3, #3
 8006760:	ddeb      	ble.n	800673a <config_default+0x8a>

  config->tables_count = TABLE_SETUPS_MAX;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2204      	movs	r2, #4
 8006766:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < 1; i++)
 8006768:	2300      	movs	r3, #0
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	f000 bc65 	b.w	800703a <config_default+0x98a>
 8006770:	44fa0000 	.word	0x44fa0000
 8006774:	459c4000 	.word	0x459c4000
  {

    strcpy(config->tables[i].name, "Default 1");
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f640 426c 	movw	r2, #3180	; 0xc6c
 800677e:	fb02 f303 	mul.w	r3, r2, r3
 8006782:	33e0      	adds	r3, #224	; 0xe0
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	4413      	add	r3, r2
 8006788:	49bd      	ldr	r1, [pc, #756]	; (8006a80 <config_default+0x3d0>)
 800678a:	461a      	mov	r2, r3
 800678c:	460b      	mov	r3, r1
 800678e:	cb03      	ldmia	r3!, {r0, r1}
 8006790:	6010      	str	r0, [r2, #0]
 8006792:	6051      	str	r1, [r2, #4]
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	8113      	strh	r3, [r2, #8]

    config->tables[i].valve_channel = ValvePetrol;
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f640 416c 	movw	r1, #3180	; 0xc6c
 80067a0:	fb01 f303 	mul.w	r3, r1, r3
 80067a4:	4413      	add	r3, r2
 80067a6:	33ec      	adds	r3, #236	; 0xec
 80067a8:	2201      	movs	r2, #1
 80067aa:	701a      	strb	r2, [r3, #0]
    config->tables[i].valve_timeout = 0;
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80067b4:	fb01 f303 	mul.w	r3, r1, r3
 80067b8:	4413      	add	r3, r2
 80067ba:	33f0      	adds	r3, #240	; 0xf0
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]

    config->tables[i].initial_ignition = 0.0f;
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80067c8:	fb01 f303 	mul.w	r3, r1, r3
 80067cc:	4413      	add	r3, r2
 80067ce:	33f4      	adds	r3, #244	; 0xf4
 80067d0:	f04f 0200 	mov.w	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
    config->tables[i].octane_corrector = 0.0f;
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f640 416c 	movw	r1, #3180	; 0xc6c
 80067de:	fb01 f303 	mul.w	r3, r1, r3
 80067e2:	4413      	add	r3, r2
 80067e4:	33f8      	adds	r3, #248	; 0xf8
 80067e6:	f04f 0200 	mov.w	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]

    config->tables[i].idles_count = 20;
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80067f4:	fb01 f303 	mul.w	r3, r1, r3
 80067f8:	4413      	add	r3, r2
 80067fa:	33fc      	adds	r3, #252	; 0xfc
 80067fc:	2214      	movs	r2, #20
 80067fe:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[0] = 417;
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006808:	fb01 f303 	mul.w	r3, r1, r3
 800680c:	4413      	add	r3, r2
 800680e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8006812:	4a9c      	ldr	r2, [pc, #624]	; (8006a84 <config_default+0x3d4>)
 8006814:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[1] = 455;
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800681e:	fb01 f303 	mul.w	r3, r1, r3
 8006822:	4413      	add	r3, r2
 8006824:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006828:	4a97      	ldr	r2, [pc, #604]	; (8006a88 <config_default+0x3d8>)
 800682a:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[2] = 476;
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006834:	fb01 f303 	mul.w	r3, r1, r3
 8006838:	4413      	add	r3, r2
 800683a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800683e:	4a93      	ldr	r2, [pc, #588]	; (8006a8c <config_default+0x3dc>)
 8006840:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[3] = 500;
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f640 416c 	movw	r1, #3180	; 0xc6c
 800684a:	fb01 f303 	mul.w	r3, r1, r3
 800684e:	4413      	add	r3, r2
 8006850:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8006854:	4a8e      	ldr	r2, [pc, #568]	; (8006a90 <config_default+0x3e0>)
 8006856:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[4] = 525;
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006860:	fb01 f303 	mul.w	r3, r1, r3
 8006864:	4413      	add	r3, r2
 8006866:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800686a:	4a8a      	ldr	r2, [pc, #552]	; (8006a94 <config_default+0x3e4>)
 800686c:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[5] = 556;
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006876:	fb01 f303 	mul.w	r3, r1, r3
 800687a:	4413      	add	r3, r2
 800687c:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8006880:	4a85      	ldr	r2, [pc, #532]	; (8006a98 <config_default+0x3e8>)
 8006882:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[6] = 588;
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f640 416c 	movw	r1, #3180	; 0xc6c
 800688c:	fb01 f303 	mul.w	r3, r1, r3
 8006890:	4413      	add	r3, r2
 8006892:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006896:	4a81      	ldr	r2, [pc, #516]	; (8006a9c <config_default+0x3ec>)
 8006898:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[7] = 625;
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f640 416c 	movw	r1, #3180	; 0xc6c
 80068a2:	fb01 f303 	mul.w	r3, r1, r3
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80068ac:	4a7c      	ldr	r2, [pc, #496]	; (8006aa0 <config_default+0x3f0>)
 80068ae:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[8] = 667;
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f640 416c 	movw	r1, #3180	; 0xc6c
 80068b8:	fb01 f303 	mul.w	r3, r1, r3
 80068bc:	4413      	add	r3, r2
 80068be:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80068c2:	4a78      	ldr	r2, [pc, #480]	; (8006aa4 <config_default+0x3f4>)
 80068c4:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[9] = 714;
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f640 416c 	movw	r1, #3180	; 0xc6c
 80068ce:	fb01 f303 	mul.w	r3, r1, r3
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80068d8:	4a73      	ldr	r2, [pc, #460]	; (8006aa8 <config_default+0x3f8>)
 80068da:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[10] = 769;
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f640 416c 	movw	r1, #3180	; 0xc6c
 80068e4:	fb01 f303 	mul.w	r3, r1, r3
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80068ee:	4a6f      	ldr	r2, [pc, #444]	; (8006aac <config_default+0x3fc>)
 80068f0:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[11] = 833;
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80068fa:	fb01 f303 	mul.w	r3, r1, r3
 80068fe:	4413      	add	r3, r2
 8006900:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006904:	4a6a      	ldr	r2, [pc, #424]	; (8006ab0 <config_default+0x400>)
 8006906:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[12] = 909;
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006910:	fb01 f303 	mul.w	r3, r1, r3
 8006914:	4413      	add	r3, r2
 8006916:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800691a:	4a66      	ldr	r2, [pc, #408]	; (8006ab4 <config_default+0x404>)
 800691c:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[13] = 1000;
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006926:	fb01 f303 	mul.w	r3, r1, r3
 800692a:	4413      	add	r3, r2
 800692c:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8006930:	4a61      	ldr	r2, [pc, #388]	; (8006ab8 <config_default+0x408>)
 8006932:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[14] = 1111;
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f640 416c 	movw	r1, #3180	; 0xc6c
 800693c:	fb01 f303 	mul.w	r3, r1, r3
 8006940:	4413      	add	r3, r2
 8006942:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8006946:	4a5d      	ldr	r2, [pc, #372]	; (8006abc <config_default+0x40c>)
 8006948:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[15] = 1250;
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006952:	fb01 f303 	mul.w	r3, r1, r3
 8006956:	4413      	add	r3, r2
 8006958:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800695c:	4a58      	ldr	r2, [pc, #352]	; (8006ac0 <config_default+0x410>)
 800695e:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[16] = 1429;
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006968:	fb01 f303 	mul.w	r3, r1, r3
 800696c:	4413      	add	r3, r2
 800696e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006972:	4a54      	ldr	r2, [pc, #336]	; (8006ac4 <config_default+0x414>)
 8006974:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[17] = 1667;
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f640 416c 	movw	r1, #3180	; 0xc6c
 800697e:	fb01 f303 	mul.w	r3, r1, r3
 8006982:	4413      	add	r3, r2
 8006984:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8006988:	4a4f      	ldr	r2, [pc, #316]	; (8006ac8 <config_default+0x418>)
 800698a:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[18] = 2000;
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006994:	fb01 f303 	mul.w	r3, r1, r3
 8006998:	4413      	add	r3, r2
 800699a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800699e:	4a4b      	ldr	r2, [pc, #300]	; (8006acc <config_default+0x41c>)
 80069a0:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_rotates[19] = 2500;
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f640 416c 	movw	r1, #3180	; 0xc6c
 80069aa:	fb01 f303 	mul.w	r3, r1, r3
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80069b4:	4a46      	ldr	r2, [pc, #280]	; (8006ad0 <config_default+0x420>)
 80069b6:	601a      	str	r2, [r3, #0]

    config->tables[i].idle_ignitions[0] = 10;
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f640 416c 	movw	r1, #3180	; 0xc6c
 80069c0:	fb01 f303 	mul.w	r3, r1, r3
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80069ca:	4a42      	ldr	r2, [pc, #264]	; (8006ad4 <config_default+0x424>)
 80069cc:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[1] = 11;
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f640 416c 	movw	r1, #3180	; 0xc6c
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
 80069da:	4413      	add	r3, r2
 80069dc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80069e0:	4a3d      	ldr	r2, [pc, #244]	; (8006ad8 <config_default+0x428>)
 80069e2:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[2] = 12;
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f640 416c 	movw	r1, #3180	; 0xc6c
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80069f6:	4a39      	ldr	r2, [pc, #228]	; (8006adc <config_default+0x42c>)
 80069f8:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[3] = 13;
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006a02:	fb01 f303 	mul.w	r3, r1, r3
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8006a0c:	4a34      	ldr	r2, [pc, #208]	; (8006ae0 <config_default+0x430>)
 8006a0e:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[4] = 14;
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006a18:	fb01 f303 	mul.w	r3, r1, r3
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8006a22:	4a30      	ldr	r2, [pc, #192]	; (8006ae4 <config_default+0x434>)
 8006a24:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[5] = 16;
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006a2e:	fb01 f303 	mul.w	r3, r1, r3
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8006a38:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8006a3c:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[6] = 18;
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006a46:	fb01 f303 	mul.w	r3, r1, r3
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8006a50:	4a25      	ldr	r2, [pc, #148]	; (8006ae8 <config_default+0x438>)
 8006a52:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[7] = 20;
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006a5c:	fb01 f303 	mul.w	r3, r1, r3
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a66:	4a21      	ldr	r2, [pc, #132]	; (8006aec <config_default+0x43c>)
 8006a68:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[8] = 20;
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006a72:	fb01 f303 	mul.w	r3, r1, r3
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006a7c:	e038      	b.n	8006af0 <config_default+0x440>
 8006a7e:	bf00      	nop
 8006a80:	08011930 	.word	0x08011930
 8006a84:	43d08000 	.word	0x43d08000
 8006a88:	43e38000 	.word	0x43e38000
 8006a8c:	43ee0000 	.word	0x43ee0000
 8006a90:	43fa0000 	.word	0x43fa0000
 8006a94:	44034000 	.word	0x44034000
 8006a98:	440b0000 	.word	0x440b0000
 8006a9c:	44130000 	.word	0x44130000
 8006aa0:	441c4000 	.word	0x441c4000
 8006aa4:	4426c000 	.word	0x4426c000
 8006aa8:	44328000 	.word	0x44328000
 8006aac:	44404000 	.word	0x44404000
 8006ab0:	44504000 	.word	0x44504000
 8006ab4:	44634000 	.word	0x44634000
 8006ab8:	447a0000 	.word	0x447a0000
 8006abc:	448ae000 	.word	0x448ae000
 8006ac0:	449c4000 	.word	0x449c4000
 8006ac4:	44b2a000 	.word	0x44b2a000
 8006ac8:	44d06000 	.word	0x44d06000
 8006acc:	44fa0000 	.word	0x44fa0000
 8006ad0:	451c4000 	.word	0x451c4000
 8006ad4:	41200000 	.word	0x41200000
 8006ad8:	41300000 	.word	0x41300000
 8006adc:	41400000 	.word	0x41400000
 8006ae0:	41500000 	.word	0x41500000
 8006ae4:	41600000 	.word	0x41600000
 8006ae8:	41900000 	.word	0x41900000
 8006aec:	41a00000 	.word	0x41a00000
 8006af0:	4abf      	ldr	r2, [pc, #764]	; (8006df0 <config_default+0x740>)
 8006af2:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[9] = 19;
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006afc:	fb01 f303 	mul.w	r3, r1, r3
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006b06:	4abb      	ldr	r2, [pc, #748]	; (8006df4 <config_default+0x744>)
 8006b08:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[10] = 15;
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006b12:	fb01 f303 	mul.w	r3, r1, r3
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006b1c:	4ab6      	ldr	r2, [pc, #728]	; (8006df8 <config_default+0x748>)
 8006b1e:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[11] = 11;
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006b28:	fb01 f303 	mul.w	r3, r1, r3
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006b32:	4ab2      	ldr	r2, [pc, #712]	; (8006dfc <config_default+0x74c>)
 8006b34:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[12] = 9;
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006b3e:	fb01 f303 	mul.w	r3, r1, r3
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8006b48:	4aad      	ldr	r2, [pc, #692]	; (8006e00 <config_default+0x750>)
 8006b4a:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[13] = 8;
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006b54:	fb01 f303 	mul.w	r3, r1, r3
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8006b5e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8006b62:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[14] = 8;
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006b6c:	fb01 f303 	mul.w	r3, r1, r3
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8006b76:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8006b7a:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[15] = 9;
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006b84:	fb01 f303 	mul.w	r3, r1, r3
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006b8e:	4a9c      	ldr	r2, [pc, #624]	; (8006e00 <config_default+0x750>)
 8006b90:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[16] = 10;
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006b9a:	fb01 f303 	mul.w	r3, r1, r3
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006ba4:	4a97      	ldr	r2, [pc, #604]	; (8006e04 <config_default+0x754>)
 8006ba6:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[17] = 12;
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006bb0:	fb01 f303 	mul.w	r3, r1, r3
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006bba:	4a93      	ldr	r2, [pc, #588]	; (8006e08 <config_default+0x758>)
 8006bbc:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[18] = 14;
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006bc6:	fb01 f303 	mul.w	r3, r1, r3
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8006bd0:	4a8e      	ldr	r2, [pc, #568]	; (8006e0c <config_default+0x75c>)
 8006bd2:	601a      	str	r2, [r3, #0]
    config->tables[i].idle_ignitions[19] = 17;
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006bdc:	fb01 f303 	mul.w	r3, r1, r3
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8006be6:	4a8a      	ldr	r2, [pc, #552]	; (8006e10 <config_default+0x760>)
 8006be8:	601a      	str	r2, [r3, #0]

    //setconfig_microplex(config, i);
    setconfig_standart16l(config,i);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7fd fec1 	bl	8004978 <setconfig_standart16l>

    config->tables[i].temperatures_count = 11;
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006bfe:	fb01 f303 	mul.w	r3, r1, r3
 8006c02:	4413      	add	r3, r2
 8006c04:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 8006c08:	220b      	movs	r2, #11
 8006c0a:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[0] = -20.0f;
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006c14:	fb01 f303 	mul.w	r3, r1, r3
 8006c18:	4413      	add	r3, r2
 8006c1a:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 8006c1e:	4a7d      	ldr	r2, [pc, #500]	; (8006e14 <config_default+0x764>)
 8006c20:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[1] = -10.0f;
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006c2a:	fb01 f303 	mul.w	r3, r1, r3
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8006c34:	4a78      	ldr	r2, [pc, #480]	; (8006e18 <config_default+0x768>)
 8006c36:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[2] = 0.0f;
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006c40:	fb01 f303 	mul.w	r3, r1, r3
 8006c44:	4413      	add	r3, r2
 8006c46:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8006c4a:	f04f 0200 	mov.w	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[3] = 10.0f;
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006c58:	fb01 f303 	mul.w	r3, r1, r3
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 8006c62:	4a68      	ldr	r2, [pc, #416]	; (8006e04 <config_default+0x754>)
 8006c64:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[4] = 20.0f;
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006c6e:	fb01 f303 	mul.w	r3, r1, r3
 8006c72:	4413      	add	r3, r2
 8006c74:	f603 339c 	addw	r3, r3, #2972	; 0xb9c
 8006c78:	4a5d      	ldr	r2, [pc, #372]	; (8006df0 <config_default+0x740>)
 8006c7a:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[5] = 30.0f;
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006c84:	fb01 f303 	mul.w	r3, r1, r3
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8006c8e:	4a63      	ldr	r2, [pc, #396]	; (8006e1c <config_default+0x76c>)
 8006c90:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[6] = 40.0f;
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006c9a:	fb01 f303 	mul.w	r3, r1, r3
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 8006ca4:	4a5e      	ldr	r2, [pc, #376]	; (8006e20 <config_default+0x770>)
 8006ca6:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[7] = 50.0f;
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006cb0:	fb01 f303 	mul.w	r3, r1, r3
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8006cba:	4a5a      	ldr	r2, [pc, #360]	; (8006e24 <config_default+0x774>)
 8006cbc:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[8] = 60.0f;
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006cc6:	fb01 f303 	mul.w	r3, r1, r3
 8006cca:	4413      	add	r3, r2
 8006ccc:	f603 33ac 	addw	r3, r3, #2988	; 0xbac
 8006cd0:	4a55      	ldr	r2, [pc, #340]	; (8006e28 <config_default+0x778>)
 8006cd2:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[9] = 70.0f;
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006cdc:	fb01 f303 	mul.w	r3, r1, r3
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 633b 	add.w	r3, r3, #2992	; 0xbb0
 8006ce6:	4a51      	ldr	r2, [pc, #324]	; (8006e2c <config_default+0x77c>)
 8006ce8:	601a      	str	r2, [r3, #0]
    config->tables[i].temperatures[10] = 80.0f;
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006cf2:	fb01 f303 	mul.w	r3, r1, r3
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f603 33b4 	addw	r3, r3, #2996	; 0xbb4
 8006cfc:	4a4c      	ldr	r2, [pc, #304]	; (8006e30 <config_default+0x780>)
 8006cfe:	601a      	str	r2, [r3, #0]

    config->tables[i].temperature_ignitions[0] = 5.0f;
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006d08:	fb01 f303 	mul.w	r3, r1, r3
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f603 33bc 	addw	r3, r3, #3004	; 0xbbc
 8006d12:	4a48      	ldr	r2, [pc, #288]	; (8006e34 <config_default+0x784>)
 8006d14:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[1] = 4.0f;
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006d1e:	fb01 f303 	mul.w	r3, r1, r3
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 8006d28:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8006d2c:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[2] = 3.0f;
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006d36:	fb01 f303 	mul.w	r3, r1, r3
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f603 33c4 	addw	r3, r3, #3012	; 0xbc4
 8006d40:	4a3d      	ldr	r2, [pc, #244]	; (8006e38 <config_default+0x788>)
 8006d42:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[3] = 2.0f;
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006d4c:	fb01 f303 	mul.w	r3, r1, r3
 8006d50:	4413      	add	r3, r2
 8006d52:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 8006d56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006d5a:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[4] = 2.0f;
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006d64:	fb01 f303 	mul.w	r3, r1, r3
 8006d68:	4413      	add	r3, r2
 8006d6a:	f603 33cc 	addw	r3, r3, #3020	; 0xbcc
 8006d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006d72:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[5] = 1.0f;
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006d7c:	fb01 f303 	mul.w	r3, r1, r3
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 8006d86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006d8a:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[6] = 1.0f;
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006d94:	fb01 f303 	mul.w	r3, r1, r3
 8006d98:	4413      	add	r3, r2
 8006d9a:	f603 33d4 	addw	r3, r3, #3028	; 0xbd4
 8006d9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006da2:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[7] = 0.0f;
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006dac:	fb01 f303 	mul.w	r3, r1, r3
 8006db0:	4413      	add	r3, r2
 8006db2:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[8] = 0.0f;
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006dc4:	fb01 f303 	mul.w	r3, r1, r3
 8006dc8:	4413      	add	r3, r2
 8006dca:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8006dce:	f04f 0200 	mov.w	r2, #0
 8006dd2:	601a      	str	r2, [r3, #0]
    config->tables[i].temperature_ignitions[9] = 0.0f;
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006ddc:	fb01 f303 	mul.w	r3, r1, r3
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8006de6:	f04f 0200 	mov.w	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	e026      	b.n	8006e3c <config_default+0x78c>
 8006dee:	bf00      	nop
 8006df0:	41a00000 	.word	0x41a00000
 8006df4:	41980000 	.word	0x41980000
 8006df8:	41700000 	.word	0x41700000
 8006dfc:	41300000 	.word	0x41300000
 8006e00:	41100000 	.word	0x41100000
 8006e04:	41200000 	.word	0x41200000
 8006e08:	41400000 	.word	0x41400000
 8006e0c:	41600000 	.word	0x41600000
 8006e10:	41880000 	.word	0x41880000
 8006e14:	c1a00000 	.word	0xc1a00000
 8006e18:	c1200000 	.word	0xc1200000
 8006e1c:	41f00000 	.word	0x41f00000
 8006e20:	42200000 	.word	0x42200000
 8006e24:	42480000 	.word	0x42480000
 8006e28:	42700000 	.word	0x42700000
 8006e2c:	428c0000 	.word	0x428c0000
 8006e30:	42a00000 	.word	0x42a00000
 8006e34:	40a00000 	.word	0x40a00000
 8006e38:	40400000 	.word	0x40400000
    config->tables[i].temperature_ignitions[10] = 0.0f;
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006e44:	fb01 f303 	mul.w	r3, r1, r3
 8006e48:	4413      	add	r3, r2
 8006e4a:	f603 33e4 	addw	r3, r3, #3044	; 0xbe4
 8006e4e:	f04f 0200 	mov.w	r2, #0
 8006e52:	601a      	str	r2, [r3, #0]

    config->tables[i].servo_acc[0] = 0.0f;
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006e5c:	fb01 f303 	mul.w	r3, r1, r3
 8006e60:	4413      	add	r3, r2
 8006e62:	f603 33ec 	addw	r3, r3, #3052	; 0xbec
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[1] = 0.0f;
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006e74:	fb01 f303 	mul.w	r3, r1, r3
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 8006e7e:	f04f 0200 	mov.w	r2, #0
 8006e82:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[2] = 0.0f;
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006e8c:	fb01 f303 	mul.w	r3, r1, r3
 8006e90:	4413      	add	r3, r2
 8006e92:	f603 33f4 	addw	r3, r3, #3060	; 0xbf4
 8006e96:	f04f 0200 	mov.w	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[3] = 0.0f;
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006ea4:	fb01 f303 	mul.w	r3, r1, r3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[4] = 0.0f;
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006ebc:	fb01 f303 	mul.w	r3, r1, r3
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[5] = 0.0f;
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006ed4:	fb01 f303 	mul.w	r3, r1, r3
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8006ede:	f04f 0200 	mov.w	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[6] = 0.0f;
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006eec:	fb01 f303 	mul.w	r3, r1, r3
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 8006ef6:	f04f 0200 	mov.w	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[7] = 0.0f;
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006f04:	fb01 f303 	mul.w	r3, r1, r3
 8006f08:	4413      	add	r3, r2
 8006f0a:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8006f0e:	f04f 0200 	mov.w	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[8] = 0.0f;
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006f1c:	fb01 f303 	mul.w	r3, r1, r3
 8006f20:	4413      	add	r3, r2
 8006f22:	f603 430c 	addw	r3, r3, #3084	; 0xc0c
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_acc[9] = 0.0f;
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006f34:	fb01 f303 	mul.w	r3, r1, r3
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 8006f3e:	f04f 0200 	mov.w	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]

    config->tables[i].servo_choke[0] = 0.0f;
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006f4c:	fb01 f303 	mul.w	r3, r1, r3
 8006f50:	4413      	add	r3, r2
 8006f52:	f603 431c 	addw	r3, r3, #3100	; 0xc1c
 8006f56:	f04f 0200 	mov.w	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[1] = 0.0f;
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006f64:	fb01 f303 	mul.w	r3, r1, r3
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 8006f6e:	f04f 0200 	mov.w	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[2] = 0.0f;
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006f7c:	fb01 f303 	mul.w	r3, r1, r3
 8006f80:	4413      	add	r3, r2
 8006f82:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8006f86:	f04f 0200 	mov.w	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[3] = 0.0f;
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006f94:	fb01 f303 	mul.w	r3, r1, r3
 8006f98:	4413      	add	r3, r2
 8006f9a:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8006f9e:	f04f 0200 	mov.w	r2, #0
 8006fa2:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[4] = 0.0f;
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006fac:	fb01 f303 	mul.w	r3, r1, r3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f603 432c 	addw	r3, r3, #3116	; 0xc2c
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[5] = 0.0f;
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006fc4:	fb01 f303 	mul.w	r3, r1, r3
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[6] = 0.0f;
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006fdc:	fb01 f303 	mul.w	r3, r1, r3
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 8006fe6:	f04f 0200 	mov.w	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[7] = 0.0f;
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f640 416c 	movw	r1, #3180	; 0xc6c
 8006ff4:	fb01 f303 	mul.w	r3, r1, r3
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 8006ffe:	f04f 0200 	mov.w	r2, #0
 8007002:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[8] = 0.0f;
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f640 416c 	movw	r1, #3180	; 0xc6c
 800700c:	fb01 f303 	mul.w	r3, r1, r3
 8007010:	4413      	add	r3, r2
 8007012:	f603 433c 	addw	r3, r3, #3132	; 0xc3c
 8007016:	f04f 0200 	mov.w	r2, #0
 800701a:	601a      	str	r2, [r3, #0]
    config->tables[i].servo_choke[9] = 0.0f;
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f640 416c 	movw	r1, #3180	; 0xc6c
 8007024:	fb01 f303 	mul.w	r3, r1, r3
 8007028:	4413      	add	r3, r2
 800702a:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 800702e:	f04f 0200 	mov.w	r2, #0
 8007032:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < 1; i++)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	3301      	adds	r3, #1
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	f77f ab9b 	ble.w	8006778 <config_default+0xc8>
  }

  return status;
 8007042:	7afb      	ldrb	r3, [r7, #11]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <config_save>:

HAL_StatusTypeDef config_save(sAcisConfig * config)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_BUSY;
 8007054:	2302      	movs	r3, #2
 8007056:	73fb      	strb	r3, [r7, #15]
  static uint32_t size = 0;
  static uint16_t crc16 = 0;
  static uint16_t sectors = 0;
  static uint16_t erased = 0;
  uint16_t crc16_check;
  uint8_t spistatus = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	73bb      	strb	r3, [r7, #14]
  do
  {
    switch (state)
 800705c:	4b4f      	ldr	r3, [pc, #316]	; (800719c <config_save+0x150>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b03      	cmp	r3, #3
 8007062:	f200 808c 	bhi.w	800717e <config_save+0x132>
 8007066:	a201      	add	r2, pc, #4	; (adr r2, 800706c <config_save+0x20>)
 8007068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706c:	0800707d 	.word	0x0800707d
 8007070:	080070c3 	.word	0x080070c3
 8007074:	08007101 	.word	0x08007101
 8007078:	08007125 	.word	0x08007125
    {
      case 0:
        size = (uint32_t)&config->crc - (uint32_t)config;
 800707c:	4b48      	ldr	r3, [pc, #288]	; (80071a0 <config_save+0x154>)
 800707e:	f243 22a0 	movw	r2, #12960	; 0x32a0
 8007082:	601a      	str	r2, [r3, #0]
        crc16 = CRC16_Generate((uint8_t*)config, size);
 8007084:	4b46      	ldr	r3, [pc, #280]	; (80071a0 <config_save+0x154>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4619      	mov	r1, r3
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f8a0 	bl	80071d0 <CRC16_Generate>
 8007090:	4603      	mov	r3, r0
 8007092:	461a      	mov	r2, r3
 8007094:	4b43      	ldr	r3, [pc, #268]	; (80071a4 <config_save+0x158>)
 8007096:	801a      	strh	r2, [r3, #0]
        config->crc = crc16;
 8007098:	4b42      	ldr	r3, [pc, #264]	; (80071a4 <config_save+0x158>)
 800709a:	8819      	ldrh	r1, [r3, #0]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	f243 23a0 	movw	r3, #12960	; 0x32a0
 80070a2:	4413      	add	r3, r2
 80070a4:	460a      	mov	r2, r1
 80070a6:	801a      	strh	r2, [r3, #0]
        state++;
 80070a8:	4b3c      	ldr	r3, [pc, #240]	; (800719c <config_save+0x150>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	3301      	adds	r3, #1
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	4b3a      	ldr	r3, [pc, #232]	; (800719c <config_save+0x150>)
 80070b2:	701a      	strb	r2, [r3, #0]
        sectors = (sizeof(sAcisConfig) / SST25_SECTORSIZE) + ((sizeof(sAcisConfig) % SST25_SECTORSIZE > 0) ? (1) : (0));
 80070b4:	4b3c      	ldr	r3, [pc, #240]	; (80071a8 <config_save+0x15c>)
 80070b6:	2204      	movs	r2, #4
 80070b8:	801a      	strh	r2, [r3, #0]
        erased = 0;
 80070ba:	4b3c      	ldr	r3, [pc, #240]	; (80071ac <config_save+0x160>)
 80070bc:	2200      	movs	r2, #0
 80070be:	801a      	strh	r2, [r3, #0]
        continue;
 80070c0:	e066      	b.n	8007190 <config_save+0x144>
      case 1:
        if(erased < sectors)
 80070c2:	4b3a      	ldr	r3, [pc, #232]	; (80071ac <config_save+0x160>)
 80070c4:	881a      	ldrh	r2, [r3, #0]
 80070c6:	4b38      	ldr	r3, [pc, #224]	; (80071a8 <config_save+0x15c>)
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d211      	bcs.n	80070f2 <config_save+0xa6>
        {
          spistatus = SST25_Erase4KSector(erased * SST25_SECTORSIZE);
 80070ce:	4b37      	ldr	r3, [pc, #220]	; (80071ac <config_save+0x160>)
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	031b      	lsls	r3, r3, #12
 80070d4:	4618      	mov	r0, r3
 80070d6:	f002 faa3 	bl	8009620 <SST25_Erase4KSector>
 80070da:	4603      	mov	r3, r0
 80070dc:	73bb      	strb	r3, [r7, #14]
          if(spistatus)
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d050      	beq.n	8007186 <config_save+0x13a>
          {
            erased++;
 80070e4:	4b31      	ldr	r3, [pc, #196]	; (80071ac <config_save+0x160>)
 80070e6:	881b      	ldrh	r3, [r3, #0]
 80070e8:	3301      	adds	r3, #1
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	4b2f      	ldr	r3, [pc, #188]	; (80071ac <config_save+0x160>)
 80070ee:	801a      	strh	r2, [r3, #0]
            continue;
 80070f0:	e04e      	b.n	8007190 <config_save+0x144>
          }
        }
        else
        {
          state++;
 80070f2:	4b2a      	ldr	r3, [pc, #168]	; (800719c <config_save+0x150>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	3301      	adds	r3, #1
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	4b28      	ldr	r3, [pc, #160]	; (800719c <config_save+0x150>)
 80070fc:	701a      	strb	r2, [r3, #0]
          continue;
 80070fe:	e047      	b.n	8007190 <config_save+0x144>
        }
        break;
      case 2:
        spistatus = SST25_Write(0, sizeof(sAcisConfig), (uint8_t*)config);
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	f44f 514b 	mov.w	r1, #12992	; 0x32c0
 8007106:	2000      	movs	r0, #0
 8007108:	f002 faac 	bl	8009664 <SST25_Write>
 800710c:	4603      	mov	r3, r0
 800710e:	73bb      	strb	r3, [r7, #14]
        if(spistatus)
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d039      	beq.n	800718a <config_save+0x13e>
        {
          state++;
 8007116:	4b21      	ldr	r3, [pc, #132]	; (800719c <config_save+0x150>)
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	3301      	adds	r3, #1
 800711c:	b2da      	uxtb	r2, r3
 800711e:	4b1f      	ldr	r3, [pc, #124]	; (800719c <config_save+0x150>)
 8007120:	701a      	strb	r2, [r3, #0]
          continue;
 8007122:	e035      	b.n	8007190 <config_save+0x144>
        }
        break;
      case 3:
        spistatus = SST25_Read(0, sizeof(sAcisConfig), (uint8_t*)config);
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	f44f 514b 	mov.w	r1, #12992	; 0x32c0
 800712a:	2000      	movs	r0, #0
 800712c:	f002 fa87 	bl	800963e <SST25_Read>
 8007130:	4603      	mov	r3, r0
 8007132:	73bb      	strb	r3, [r7, #14]
        if(spistatus)
 8007134:	7bbb      	ldrb	r3, [r7, #14]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d029      	beq.n	800718e <config_save+0x142>
        {
          size = (uint32_t)&config->crc - (uint32_t)config;
 800713a:	4b19      	ldr	r3, [pc, #100]	; (80071a0 <config_save+0x154>)
 800713c:	f243 22a0 	movw	r2, #12960	; 0x32a0
 8007140:	601a      	str	r2, [r3, #0]
          crc16_check = CRC16_Generate((uint8_t*)config, size);
 8007142:	4b17      	ldr	r3, [pc, #92]	; (80071a0 <config_save+0x154>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f841 	bl	80071d0 <CRC16_Generate>
 800714e:	4603      	mov	r3, r0
 8007150:	81bb      	strh	r3, [r7, #12]
          if(crc16_check == config->crc && crc16_check == crc16)
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	f243 23a0 	movw	r3, #12960	; 0x32a0
 8007158:	4413      	add	r3, r2
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	89ba      	ldrh	r2, [r7, #12]
 800715e:	429a      	cmp	r2, r3
 8007160:	d107      	bne.n	8007172 <config_save+0x126>
 8007162:	4b10      	ldr	r3, [pc, #64]	; (80071a4 <config_save+0x158>)
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	89ba      	ldrh	r2, [r7, #12]
 8007168:	429a      	cmp	r2, r3
 800716a:	d102      	bne.n	8007172 <config_save+0x126>
            status = HAL_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	73fb      	strb	r3, [r7, #15]
 8007170:	e001      	b.n	8007176 <config_save+0x12a>
          else status = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	73fb      	strb	r3, [r7, #15]
          state = 0;
 8007176:	4b09      	ldr	r3, [pc, #36]	; (800719c <config_save+0x150>)
 8007178:	2200      	movs	r2, #0
 800717a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800717c:	e007      	b.n	800718e <config_save+0x142>
      default:
        state = 0;
 800717e:	4b07      	ldr	r3, [pc, #28]	; (800719c <config_save+0x150>)
 8007180:	2200      	movs	r2, #0
 8007182:	701a      	strb	r2, [r3, #0]
        continue;
 8007184:	e004      	b.n	8007190 <config_save+0x144>
        break;
 8007186:	bf00      	nop
 8007188:	e002      	b.n	8007190 <config_save+0x144>
        break;
 800718a:	bf00      	nop
 800718c:	e000      	b.n	8007190 <config_save+0x144>
        break;
 800718e:	bf00      	nop
    }
  } while(0);

  return status;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20021130 	.word	0x20021130
 80071a0:	20021134 	.word	0x20021134
 80071a4:	20021138 	.word	0x20021138
 80071a8:	2002113a 	.word	0x2002113a
 80071ac:	2002113c 	.word	0x2002113c

080071b0 <CRC16_RegisterHardware>:
#elif defined(CRC_HW)

static CRC_HandleTypeDef * handle_crc;

void CRC16_RegisterHardware(CRC_HandleTypeDef * hcrc)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  handle_crc = hcrc;
 80071b8:	4a04      	ldr	r2, [pc, #16]	; (80071cc <CRC16_RegisterHardware+0x1c>)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6013      	str	r3, [r2, #0]
}
 80071be:	bf00      	nop
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	20021140 	.word	0x20021140

080071d0 <CRC16_Generate>:

inline uint16_t CRC16_Generate(uint8_t * input, uint32_t size)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	81fb      	strh	r3, [r7, #14]
  if(handle_crc != NULL)
 80071de:	4b09      	ldr	r3, [pc, #36]	; (8007204 <CRC16_Generate+0x34>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d008      	beq.n	80071f8 <CRC16_Generate+0x28>
  {
      result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 80071e6:	4b07      	ldr	r3, [pc, #28]	; (8007204 <CRC16_Generate+0x34>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	6879      	ldr	r1, [r7, #4]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f004 fe66 	bl	800bec0 <HAL_CRC_Calculate>
 80071f4:	4603      	mov	r3, r0
 80071f6:	81fb      	strh	r3, [r7, #14]
  }
  return result;
 80071f8:	89fb      	ldrh	r3, [r7, #14]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	20021140 	.word	0x20021140

08007208 <CRC8_Generate>:

inline uint8_t CRC8_Generate(uint8_t * input, uint32_t size)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 8007212:	2300      	movs	r3, #0
 8007214:	81fb      	strh	r3, [r7, #14]
  if(handle_crc != NULL)
 8007216:	4b0d      	ldr	r3, [pc, #52]	; (800724c <CRC8_Generate+0x44>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d008      	beq.n	8007230 <CRC8_Generate+0x28>
  {
    result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 800721e:	4b0b      	ldr	r3, [pc, #44]	; (800724c <CRC8_Generate+0x44>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	6879      	ldr	r1, [r7, #4]
 8007226:	4618      	mov	r0, r3
 8007228:	f004 fe4a 	bl	800bec0 <HAL_CRC_Calculate>
 800722c:	4603      	mov	r3, r0
 800722e:	81fb      	strh	r3, [r7, #14]

  }
  return (result & 0xFF) ^ (result >> 8);
 8007230:	89fb      	ldrh	r3, [r7, #14]
 8007232:	b25a      	sxtb	r2, r3
 8007234:	89fb      	ldrh	r3, [r7, #14]
 8007236:	0a1b      	lsrs	r3, r3, #8
 8007238:	b29b      	uxth	r3, r3
 800723a:	b25b      	sxtb	r3, r3
 800723c:	4053      	eors	r3, r2
 800723e:	b25b      	sxtb	r3, r3
 8007240:	b2db      	uxtb	r3, r3
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20021140 	.word	0x20021140

08007250 <csps_exti>:
}

#define csps_time_calculate(x) (1.0f / (x) * 60.0f / 120.0f * 3.0f)

inline void csps_exti(void)
{
 8007250:	b5b0      	push	{r4, r5, r7, lr}
 8007252:	b094      	sub	sp, #80	; 0x50
 8007254:	af00      	add	r7, sp, #0
  static float average_prev = 0;
  static uint8_t dataindex = 0;
  static uint32_t t1 = 0;
  static uint32_t t2 = 0;

  const float uspa_koff = 1.0f / 7.0f;
 8007256:	4bb4      	ldr	r3, [pc, #720]	; (8007528 <csps_exti+0x2d8>)
 8007258:	637b      	str	r3, [r7, #52]	; 0x34
  float rpm_gui_koff = 1.0f / 50.0f;
 800725a:	4bb4      	ldr	r3, [pc, #720]	; (800752c <csps_exti+0x2dc>)
 800725c:	64fb      	str	r3, [r7, #76]	; 0x4c
  float rpm_koff = 1.0f / 20.0f;
 800725e:	4bb4      	ldr	r3, [pc, #720]	; (8007530 <csps_exti+0x2e0>)
 8007260:	64bb      	str	r3, [r7, #72]	; 0x48

  uint32_t i, ticks, cur, prev;
  sCspsData data;
  float cs14, cs23;
  float average = 0;
 8007262:	f04f 0300 	mov.w	r3, #0
 8007266:	63fb      	str	r3, [r7, #60]	; 0x3c
  float diff = 0;
 8007268:	f04f 0300 	mov.w	r3, #0
 800726c:	633b      	str	r3, [r7, #48]	; 0x30

  cur = Delay_Tick;
 800726e:	4bb1      	ldr	r3, [pc, #708]	; (8007534 <csps_exti+0x2e4>)
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	62fb      	str	r3, [r7, #44]	; 0x2c

  if(csps_rpm < 1500)
 8007274:	4bb0      	ldr	r3, [pc, #704]	; (8007538 <csps_exti+0x2e8>)
 8007276:	edd3 7a00 	vldr	s15, [r3]
 800727a:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800753c <csps_exti+0x2ec>
 800727e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007286:	d512      	bpl.n	80072ae <csps_exti+0x5e>
  {
    if(DelayDiff(cur, csps_pulse_last) < csps_time_calculate(1500))
 8007288:	4bad      	ldr	r3, [pc, #692]	; (8007540 <csps_exti+0x2f0>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4619      	mov	r1, r3
 800728e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007290:	f000 fda8 	bl	8007de4 <DelayDiff>
 8007294:	ee07 0a90 	vmov	s15, r0
 8007298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729c:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8007544 <csps_exti+0x2f4>
 80072a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a8:	f100 8374 	bmi.w	8007994 <csps_exti+0x744>
 80072ac:	e022      	b.n	80072f4 <csps_exti+0xa4>
      return;
  }
  else
  {
    if(DelayDiff(cur, csps_pulse_last) < csps_time_calculate(csps_rpm))
 80072ae:	4ba4      	ldr	r3, [pc, #656]	; (8007540 <csps_exti+0x2f0>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4619      	mov	r1, r3
 80072b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072b6:	f000 fd95 	bl	8007de4 <DelayDiff>
 80072ba:	ee07 0a90 	vmov	s15, r0
 80072be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072c2:	4b9d      	ldr	r3, [pc, #628]	; (8007538 <csps_exti+0x2e8>)
 80072c4:	edd3 6a00 	vldr	s13, [r3]
 80072c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80072cc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80072d0:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8007548 <csps_exti+0x2f8>
 80072d4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80072d8:	ed9f 6a9c 	vldr	s12, [pc, #624]	; 800754c <csps_exti+0x2fc>
 80072dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80072e0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80072e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80072e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80072ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f0:	f100 8352 	bmi.w	8007998 <csps_exti+0x748>
      return;
  }

  csps_pulse_last = cur;
 80072f4:	4a92      	ldr	r2, [pc, #584]	; (8007540 <csps_exti+0x2f0>)
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	6013      	str	r3, [r2, #0]
  for(i = 1; i < IRQ_SIZE; i++)
 80072fa:	2301      	movs	r3, #1
 80072fc:	647b      	str	r3, [r7, #68]	; 0x44
 80072fe:	e00b      	b.n	8007318 <csps_exti+0xc8>
    cspc_irq_data[i - 1] = cspc_irq_data[i];
 8007300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007302:	3b01      	subs	r3, #1
 8007304:	4992      	ldr	r1, [pc, #584]	; (8007550 <csps_exti+0x300>)
 8007306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007308:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800730c:	4990      	ldr	r1, [pc, #576]	; (8007550 <csps_exti+0x300>)
 800730e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(i = 1; i < IRQ_SIZE; i++)
 8007312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007314:	3301      	adds	r3, #1
 8007316:	647b      	str	r3, [r7, #68]	; 0x44
 8007318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800731a:	2b07      	cmp	r3, #7
 800731c:	d9f0      	bls.n	8007300 <csps_exti+0xb0>
  cspc_irq_data[IRQ_SIZE - 1] = cur;
 800731e:	4a8c      	ldr	r2, [pc, #560]	; (8007550 <csps_exti+0x300>)
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	61d3      	str	r3, [r2, #28]
  if(cspc_irq_data[0] == 0)
 8007324:	4b8a      	ldr	r3, [pc, #552]	; (8007550 <csps_exti+0x300>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 8337 	beq.w	800799c <csps_exti+0x74c>
    return;
  prev = cspc_irq_data[IRQ_SIZE - 2];
 800732e:	4b88      	ldr	r3, [pc, #544]	; (8007550 <csps_exti+0x300>)
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	643b      	str	r3, [r7, #64]	; 0x40
  csps_rotates = 1;
 8007334:	4b87      	ldr	r3, [pc, #540]	; (8007554 <csps_exti+0x304>)
 8007336:	2201      	movs	r2, #1
 8007338:	701a      	strb	r2, [r3, #0]

  t1++;
 800733a:	4b87      	ldr	r3, [pc, #540]	; (8007558 <csps_exti+0x308>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3301      	adds	r3, #1
 8007340:	4a85      	ldr	r2, [pc, #532]	; (8007558 <csps_exti+0x308>)
 8007342:	6013      	str	r3, [r2, #0]

  for(i = 1; i < IRQ_SIZE; i++)
 8007344:	2301      	movs	r3, #1
 8007346:	647b      	str	r3, [r7, #68]	; 0x44
 8007348:	e018      	b.n	800737c <csps_exti+0x12c>
  {
    average += DelayDiff(cspc_irq_data[i], cspc_irq_data[i - 1]);;
 800734a:	4a81      	ldr	r2, [pc, #516]	; (8007550 <csps_exti+0x300>)
 800734c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800734e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007354:	3b01      	subs	r3, #1
 8007356:	4a7e      	ldr	r2, [pc, #504]	; (8007550 <csps_exti+0x300>)
 8007358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800735c:	4619      	mov	r1, r3
 800735e:	f000 fd41 	bl	8007de4 <DelayDiff>
 8007362:	ee07 0a90 	vmov	s15, r0
 8007366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800736e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007372:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  for(i = 1; i < IRQ_SIZE; i++)
 8007376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007378:	3301      	adds	r3, #1
 800737a:	647b      	str	r3, [r7, #68]	; 0x44
 800737c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800737e:	2b07      	cmp	r3, #7
 8007380:	d9e3      	bls.n	800734a <csps_exti+0xfa>
  }
  average /= (float)(IRQ_SIZE - 1);
 8007382:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007386:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 800738a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800738e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

  if(average / average_prev > 1.0f + 1.0f / IRQ_SIZE)
 8007392:	4b72      	ldr	r3, [pc, #456]	; (800755c <csps_exti+0x30c>)
 8007394:	ed93 7a00 	vldr	s14, [r3]
 8007398:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800739c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a0:	eeb7 7a02 	vmov.f32	s14, #114	; 0x3f900000  1.125
 80073a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ac:	dd26      	ble.n	80073fc <csps_exti+0x1ac>
  {
    if(++t2 == 2)
 80073ae:	4b6c      	ldr	r3, [pc, #432]	; (8007560 <csps_exti+0x310>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3301      	adds	r3, #1
 80073b4:	4a6a      	ldr	r2, [pc, #424]	; (8007560 <csps_exti+0x310>)
 80073b6:	6013      	str	r3, [r2, #0]
 80073b8:	4b69      	ldr	r3, [pc, #420]	; (8007560 <csps_exti+0x310>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d131      	bne.n	8007424 <csps_exti+0x1d4>
    {
      ticks = t1;
 80073c0:	4b65      	ldr	r3, [pc, #404]	; (8007558 <csps_exti+0x308>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	62bb      	str	r3, [r7, #40]	; 0x28
      t1 = 0;
 80073c6:	4b64      	ldr	r3, [pc, #400]	; (8007558 <csps_exti+0x308>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
      t2 = 0;
 80073cc:	4b64      	ldr	r3, [pc, #400]	; (8007560 <csps_exti+0x310>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]
      if(ticks != 116)
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	2b74      	cmp	r3, #116	; 0x74
 80073d6:	d00a      	beq.n	80073ee <csps_exti+0x19e>
        csps_errors += 1.0f;
 80073d8:	4b62      	ldr	r3, [pc, #392]	; (8007564 <csps_exti+0x314>)
 80073da:	edd3 7a00 	vldr	s15, [r3]
 80073de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80073e6:	4b5f      	ldr	r3, [pc, #380]	; (8007564 <csps_exti+0x314>)
 80073e8:	edc3 7a00 	vstr	s15, [r3]
 80073ec:	e01a      	b.n	8007424 <csps_exti+0x1d4>
      else
      {
        csps_last = cur;
 80073ee:	4a5e      	ldr	r2, [pc, #376]	; (8007568 <csps_exti+0x318>)
 80073f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f2:	6013      	str	r3, [r2, #0]
        csps_found = 1;
 80073f4:	4b5d      	ldr	r3, [pc, #372]	; (800756c <csps_exti+0x31c>)
 80073f6:	2201      	movs	r2, #1
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	e013      	b.n	8007424 <csps_exti+0x1d4>
      }
    }
  }
  else
  {
    t2 = 0;
 80073fc:	4b58      	ldr	r3, [pc, #352]	; (8007560 <csps_exti+0x310>)
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]
    if(t1 >= 116)
 8007402:	4b55      	ldr	r3, [pc, #340]	; (8007558 <csps_exti+0x308>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b73      	cmp	r3, #115	; 0x73
 8007408:	d90c      	bls.n	8007424 <csps_exti+0x1d4>
    {
      t1 = 1;
 800740a:	4b53      	ldr	r3, [pc, #332]	; (8007558 <csps_exti+0x308>)
 800740c:	2201      	movs	r2, #1
 800740e:	601a      	str	r2, [r3, #0]
      csps_errors += 1.0f;
 8007410:	4b54      	ldr	r3, [pc, #336]	; (8007564 <csps_exti+0x314>)
 8007412:	edd3 7a00 	vldr	s15, [r3]
 8007416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800741a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800741e:	4b51      	ldr	r3, [pc, #324]	; (8007564 <csps_exti+0x314>)
 8007420:	edc3 7a00 	vstr	s15, [r3]
    }
  }

  average_prev = average;
 8007424:	4a4d      	ldr	r2, [pc, #308]	; (800755c <csps_exti+0x30c>)
 8007426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007428:	6013      	str	r3, [r2, #0]

  if(csps_found)
 800742a:	4b50      	ldr	r3, [pc, #320]	; (800756c <csps_exti+0x31c>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 8190 	beq.w	8007756 <csps_exti+0x506>
  {
    switch(t1)
 8007436:	4b48      	ldr	r3, [pc, #288]	; (8007558 <csps_exti+0x308>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <csps_exti+0x1f4>
 800743e:	2b01      	cmp	r3, #1
 8007440:	d029      	beq.n	8007496 <csps_exti+0x246>
 8007442:	e036      	b.n	80074b2 <csps_exti+0x262>
    {
      case 0:
        csps_angle14 = ANGLE_INITIAL;
 8007444:	4b4a      	ldr	r3, [pc, #296]	; (8007570 <csps_exti+0x320>)
 8007446:	4a4b      	ldr	r2, [pc, #300]	; (8007574 <csps_exti+0x324>)
 8007448:	601a      	str	r2, [r3, #0]
        if (ANGLE_INITIAL > 0)
          csps_angle23 = ANGLE_INITIAL - 180.0f;
        else
          csps_angle23 = ANGLE_INITIAL + 180.0f;
 800744a:	4b4b      	ldr	r3, [pc, #300]	; (8007578 <csps_exti+0x328>)
 800744c:	4a4b      	ldr	r2, [pc, #300]	; (800757c <csps_exti+0x32c>)
 800744e:	601a      	str	r2, [r3, #0]
        cs14_p = csps_angle14 - 3.0f;
 8007450:	4b47      	ldr	r3, [pc, #284]	; (8007570 <csps_exti+0x320>)
 8007452:	edd3 7a00 	vldr	s15, [r3]
 8007456:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800745a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800745e:	4b48      	ldr	r3, [pc, #288]	; (8007580 <csps_exti+0x330>)
 8007460:	edc3 7a00 	vstr	s15, [r3]
        cs23_p = csps_angle23 - 3.0f;
 8007464:	4b44      	ldr	r3, [pc, #272]	; (8007578 <csps_exti+0x328>)
 8007466:	edd3 7a00 	vldr	s15, [r3]
 800746a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800746e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007472:	4b44      	ldr	r3, [pc, #272]	; (8007584 <csps_exti+0x334>)
 8007474:	edc3 7a00 	vstr	s15, [r3]
        prev = (cur - (DelayDiff(cur, prev) / 3)) & DelayMask;
 8007478:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800747a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800747c:	f000 fcb2 	bl	8007de4 <DelayDiff>
 8007480:	4602      	mov	r2, r0
 8007482:	4b41      	ldr	r3, [pc, #260]	; (8007588 <csps_exti+0x338>)
 8007484:	fba3 2302 	umull	r2, r3, r3, r2
 8007488:	085b      	lsrs	r3, r3, #1
 800748a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8007492:	643b      	str	r3, [r7, #64]	; 0x40
        break;
 8007494:	e0bf      	b.n	8007616 <csps_exti+0x3c6>
      case 1:
        prev = (cur - (DelayDiff(cur, prev) / 3)) & DelayMask;
 8007496:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007498:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800749a:	f000 fca3 	bl	8007de4 <DelayDiff>
 800749e:	4602      	mov	r2, r0
 80074a0:	4b39      	ldr	r3, [pc, #228]	; (8007588 <csps_exti+0x338>)
 80074a2:	fba3 2302 	umull	r2, r3, r3, r2
 80074a6:	085b      	lsrs	r3, r3, #1
 80074a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80074b0:	643b      	str	r3, [r7, #64]	; 0x40
        /* no break */
      default:
        cs14 = csps_angle14 + 3.0f;
 80074b2:	4b2f      	ldr	r3, [pc, #188]	; (8007570 <csps_exti+0x320>)
 80074b4:	edd3 7a00 	vldr	s15, [r3]
 80074b8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80074bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        if(cs14 > 180.0f) csps_angle14 = cs14 - 360.0f;
 80074c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80074c8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800758c <csps_exti+0x33c>
 80074cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d4:	dd09      	ble.n	80074ea <csps_exti+0x29a>
 80074d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80074da:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8007590 <csps_exti+0x340>
 80074de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074e2:	4b23      	ldr	r3, [pc, #140]	; (8007570 <csps_exti+0x320>)
 80074e4:	edc3 7a00 	vstr	s15, [r3]
 80074e8:	e002      	b.n	80074f0 <csps_exti+0x2a0>
        else csps_angle14 = cs14;
 80074ea:	4a21      	ldr	r2, [pc, #132]	; (8007570 <csps_exti+0x320>)
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	6013      	str	r3, [r2, #0]

        cs23 = csps_angle23 + 3.0f;
 80074f0:	4b21      	ldr	r3, [pc, #132]	; (8007578 <csps_exti+0x328>)
 80074f2:	edd3 7a00 	vldr	s15, [r3]
 80074f6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80074fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074fe:	edc7 7a08 	vstr	s15, [r7, #32]
        if(cs23 > 180.0f) csps_angle23 = cs23 - 360.0f;
 8007502:	edd7 7a08 	vldr	s15, [r7, #32]
 8007506:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800758c <csps_exti+0x33c>
 800750a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800750e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007512:	dd3f      	ble.n	8007594 <csps_exti+0x344>
 8007514:	edd7 7a08 	vldr	s15, [r7, #32]
 8007518:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007590 <csps_exti+0x340>
 800751c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007520:	4b15      	ldr	r3, [pc, #84]	; (8007578 <csps_exti+0x328>)
 8007522:	edc3 7a00 	vstr	s15, [r3]
 8007526:	e038      	b.n	800759a <csps_exti+0x34a>
 8007528:	3e124925 	.word	0x3e124925
 800752c:	3ca3d70a 	.word	0x3ca3d70a
 8007530:	3d4ccccd 	.word	0x3d4ccccd
 8007534:	40000c00 	.word	0x40000c00
 8007538:	20021174 	.word	0x20021174
 800753c:	44bb8000 	.word	0x44bb8000
 8007540:	20021168 	.word	0x20021168
 8007544:	3a83126e 	.word	0x3a83126e
 8007548:	42700000 	.word	0x42700000
 800754c:	42f00000 	.word	0x42f00000
 8007550:	20021144 	.word	0x20021144
 8007554:	20021165 	.word	0x20021165
 8007558:	20021384 	.word	0x20021384
 800755c:	20021388 	.word	0x20021388
 8007560:	2002138c 	.word	0x2002138c
 8007564:	20021170 	.word	0x20021170
 8007568:	2002116c 	.word	0x2002116c
 800756c:	20021164 	.word	0x20021164
 8007570:	20021390 	.word	0x20021390
 8007574:	c2ea0000 	.word	0xc2ea0000
 8007578:	20021394 	.word	0x20021394
 800757c:	427c0000 	.word	0x427c0000
 8007580:	20021398 	.word	0x20021398
 8007584:	2002139c 	.word	0x2002139c
 8007588:	aaaaaaab 	.word	0xaaaaaaab
 800758c:	43340000 	.word	0x43340000
 8007590:	43b40000 	.word	0x43b40000
        else csps_angle23 = cs23;
 8007594:	4abd      	ldr	r2, [pc, #756]	; (800788c <csps_exti+0x63c>)
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	6013      	str	r3, [r2, #0]

        cs14_p += 3.0f;
 800759a:	4bbd      	ldr	r3, [pc, #756]	; (8007890 <csps_exti+0x640>)
 800759c:	edd3 7a00 	vldr	s15, [r3]
 80075a0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80075a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075a8:	4bb9      	ldr	r3, [pc, #740]	; (8007890 <csps_exti+0x640>)
 80075aa:	edc3 7a00 	vstr	s15, [r3]
        if(cs14_p > 180.0f)
 80075ae:	4bb8      	ldr	r3, [pc, #736]	; (8007890 <csps_exti+0x640>)
 80075b0:	edd3 7a00 	vldr	s15, [r3]
 80075b4:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8007894 <csps_exti+0x644>
 80075b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c0:	dd09      	ble.n	80075d6 <csps_exti+0x386>
          cs14_p -= 360.0f;
 80075c2:	4bb3      	ldr	r3, [pc, #716]	; (8007890 <csps_exti+0x640>)
 80075c4:	edd3 7a00 	vldr	s15, [r3]
 80075c8:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8007898 <csps_exti+0x648>
 80075cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075d0:	4baf      	ldr	r3, [pc, #700]	; (8007890 <csps_exti+0x640>)
 80075d2:	edc3 7a00 	vstr	s15, [r3]

        cs23_p += 3.0f;
 80075d6:	4bb1      	ldr	r3, [pc, #708]	; (800789c <csps_exti+0x64c>)
 80075d8:	edd3 7a00 	vldr	s15, [r3]
 80075dc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80075e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075e4:	4bad      	ldr	r3, [pc, #692]	; (800789c <csps_exti+0x64c>)
 80075e6:	edc3 7a00 	vstr	s15, [r3]
        if(cs23_p > 180.0f)
 80075ea:	4bac      	ldr	r3, [pc, #688]	; (800789c <csps_exti+0x64c>)
 80075ec:	edd3 7a00 	vldr	s15, [r3]
 80075f0:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8007894 <csps_exti+0x644>
 80075f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075fc:	dc00      	bgt.n	8007600 <csps_exti+0x3b0>
          cs23_p -= 360.0f;
        break;
 80075fe:	e009      	b.n	8007614 <csps_exti+0x3c4>
          cs23_p -= 360.0f;
 8007600:	4ba6      	ldr	r3, [pc, #664]	; (800789c <csps_exti+0x64c>)
 8007602:	edd3 7a00 	vldr	s15, [r3]
 8007606:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8007898 <csps_exti+0x648>
 800760a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800760e:	4ba3      	ldr	r3, [pc, #652]	; (800789c <csps_exti+0x64c>)
 8007610:	edc3 7a00 	vstr	s15, [r3]
        break;
 8007614:	bf00      	nop
    }

    if(csps_rpm < 200.0f)
 8007616:	4ba2      	ldr	r3, [pc, #648]	; (80078a0 <csps_exti+0x650>)
 8007618:	edd3 7a00 	vldr	s15, [r3]
 800761c:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80078a4 <csps_exti+0x654>
 8007620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007628:	d502      	bpl.n	8007630 <csps_exti+0x3e0>
      rpm_koff = 1.0f;
 800762a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800762e:	64bb      	str	r3, [r7, #72]	; 0x48

    diff = (float)DelayDiff(cur, prev);
 8007630:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007634:	f000 fbd6 	bl	8007de4 <DelayDiff>
 8007638:	ee07 0a90 	vmov	s15, r0
 800763c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007640:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    if(csps_period > 10000000.0f)
 8007644:	4b98      	ldr	r3, [pc, #608]	; (80078a8 <csps_exti+0x658>)
 8007646:	edd3 7a00 	vldr	s15, [r3]
 800764a:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80078ac <csps_exti+0x65c>
 800764e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007656:	dd02      	ble.n	800765e <csps_exti+0x40e>
      csps_period = 10000000.0f;
 8007658:	4b93      	ldr	r3, [pc, #588]	; (80078a8 <csps_exti+0x658>)
 800765a:	4a95      	ldr	r2, [pc, #596]	; (80078b0 <csps_exti+0x660>)
 800765c:	601a      	str	r2, [r3, #0]

    csps_period = csps_period * (1.0f - rpm_koff) + (diff * 120.0f) * rpm_koff;
 800765e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007662:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007666:	ee37 7a67 	vsub.f32	s14, s14, s15
 800766a:	4b8f      	ldr	r3, [pc, #572]	; (80078a8 <csps_exti+0x658>)
 800766c:	edd3 7a00 	vldr	s15, [r3]
 8007670:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007674:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007678:	eddf 6a8e 	vldr	s13, [pc, #568]	; 80078b4 <csps_exti+0x664>
 800767c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007680:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800768c:	4b86      	ldr	r3, [pc, #536]	; (80078a8 <csps_exti+0x658>)
 800768e:	edc3 7a00 	vstr	s15, [r3]
    csps_rpm = 1000000.0f / csps_period * 60.0f;
 8007692:	4b85      	ldr	r3, [pc, #532]	; (80078a8 <csps_exti+0x658>)
 8007694:	ed93 7a00 	vldr	s14, [r3]
 8007698:	eddf 6a87 	vldr	s13, [pc, #540]	; 80078b8 <csps_exti+0x668>
 800769c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076a0:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80078bc <csps_exti+0x66c>
 80076a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076a8:	4b7d      	ldr	r3, [pc, #500]	; (80078a0 <csps_exti+0x650>)
 80076aa:	edc3 7a00 	vstr	s15, [r3]

    if(csps_rpm < 400) rpm_gui_koff = 0.1f;
 80076ae:	4b7c      	ldr	r3, [pc, #496]	; (80078a0 <csps_exti+0x650>)
 80076b0:	edd3 7a00 	vldr	s15, [r3]
 80076b4:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80078c0 <csps_exti+0x670>
 80076b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c0:	d501      	bpl.n	80076c6 <csps_exti+0x476>
 80076c2:	4b80      	ldr	r3, [pc, #512]	; (80078c4 <csps_exti+0x674>)
 80076c4:	64fb      	str	r3, [r7, #76]	; 0x4c

    csps_rpm_gui = (1.0f - rpm_gui_koff) * csps_rpm_gui + csps_rpm * rpm_gui_koff;
 80076c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076ca:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80076ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80076d2:	4b7d      	ldr	r3, [pc, #500]	; (80078c8 <csps_exti+0x678>)
 80076d4:	edd3 7a00 	vldr	s15, [r3]
 80076d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80076dc:	4b70      	ldr	r3, [pc, #448]	; (80078a0 <csps_exti+0x650>)
 80076de:	edd3 6a00 	vldr	s13, [r3]
 80076e2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80076e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076ee:	4b76      	ldr	r3, [pc, #472]	; (80078c8 <csps_exti+0x678>)
 80076f0:	edc3 7a00 	vstr	s15, [r3]
    csps_uspa = csps_uspa * (1.0f - uspa_koff) + (diff / 3.0f) * uspa_koff;
 80076f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076f8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80076fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007700:	4b72      	ldr	r3, [pc, #456]	; (80078cc <csps_exti+0x67c>)
 8007702:	edd3 7a00 	vldr	s15, [r3]
 8007706:	ee27 7a27 	vmul.f32	s14, s14, s15
 800770a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800770e:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8007712:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007716:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800771a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800771e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007722:	4b6a      	ldr	r3, [pc, #424]	; (80078cc <csps_exti+0x67c>)
 8007724:	edc3 7a00 	vstr	s15, [r3]

    data.AngleCur14 = csps_angle14;
 8007728:	4b69      	ldr	r3, [pc, #420]	; (80078d0 <csps_exti+0x680>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	60bb      	str	r3, [r7, #8]
    data.AngleCur23 = csps_angle23;
 800772e:	4b57      	ldr	r3, [pc, #348]	; (800788c <csps_exti+0x63c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	613b      	str	r3, [r7, #16]
    data.AnglePrev14 = cs14_p;
 8007734:	4b56      	ldr	r3, [pc, #344]	; (8007890 <csps_exti+0x640>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60fb      	str	r3, [r7, #12]
    data.AnglePrev23 = cs23_p;
 800773a:	4b58      	ldr	r3, [pc, #352]	; (800789c <csps_exti+0x64c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	617b      	str	r3, [r7, #20]
    data.DelayPrev = prev;
 8007740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007742:	607b      	str	r3, [r7, #4]
    data.DelayCur = cur;
 8007744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007746:	603b      	str	r3, [r7, #0]
    data.RPM = csps_rpm;
 8007748:	4b55      	ldr	r3, [pc, #340]	; (80078a0 <csps_exti+0x650>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	61bb      	str	r3, [r7, #24]
    data.uSPA = csps_uspa;
 800774e:	4b5f      	ldr	r3, [pc, #380]	; (80078cc <csps_exti+0x67c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	e02d      	b.n	80077b2 <csps_exti+0x562>

  }
  else
  {
    data.AngleCur14 = 0;
 8007756:	f04f 0300 	mov.w	r3, #0
 800775a:	60bb      	str	r3, [r7, #8]
    data.AngleCur23 = 0;
 800775c:	f04f 0300 	mov.w	r3, #0
 8007760:	613b      	str	r3, [r7, #16]
    data.AnglePrev14 = 0;
 8007762:	f04f 0300 	mov.w	r3, #0
 8007766:	60fb      	str	r3, [r7, #12]
    data.AnglePrev23 = 0;
 8007768:	f04f 0300 	mov.w	r3, #0
 800776c:	617b      	str	r3, [r7, #20]
    data.DelayPrev = 0;
 800776e:	2300      	movs	r3, #0
 8007770:	607b      	str	r3, [r7, #4]
    data.DelayCur = 0;
 8007772:	2300      	movs	r3, #0
 8007774:	603b      	str	r3, [r7, #0]
    data.RPM = 0;
 8007776:	f04f 0300 	mov.w	r3, #0
 800777a:	61bb      	str	r3, [r7, #24]
    data.uSPA = 1.0f / csps_rpm;
 800777c:	4b48      	ldr	r3, [pc, #288]	; (80078a0 <csps_exti+0x650>)
 800777e:	ed93 7a00 	vldr	s14, [r3]
 8007782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800778a:	edc7 7a07 	vstr	s15, [r7, #28]
    csps_period = 1.0f / csps_rpm;
 800778e:	4b44      	ldr	r3, [pc, #272]	; (80078a0 <csps_exti+0x650>)
 8007790:	ed93 7a00 	vldr	s14, [r3]
 8007794:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800779c:	4b42      	ldr	r3, [pc, #264]	; (80078a8 <csps_exti+0x658>)
 800779e:	edc3 7a00 	vstr	s15, [r3]
    csps_rpm = 0;
 80077a2:	4b3f      	ldr	r3, [pc, #252]	; (80078a0 <csps_exti+0x650>)
 80077a4:	f04f 0200 	mov.w	r2, #0
 80077a8:	601a      	str	r2, [r3, #0]
    csps_rpm_gui = 0;
 80077aa:	4b47      	ldr	r3, [pc, #284]	; (80078c8 <csps_exti+0x678>)
 80077ac:	f04f 0200 	mov.w	r2, #0
 80077b0:	601a      	str	r2, [r3, #0]
  }
  CspsData[dataindex] = data;
 80077b2:	4b48      	ldr	r3, [pc, #288]	; (80078d4 <csps_exti+0x684>)
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	4a48      	ldr	r2, [pc, #288]	; (80078d8 <csps_exti+0x688>)
 80077b8:	015b      	lsls	r3, r3, #5
 80077ba:	4413      	add	r3, r2
 80077bc:	461d      	mov	r5, r3
 80077be:	463c      	mov	r4, r7
 80077c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80077c8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  CspsDataPtr = &CspsData[dataindex];
 80077cc:	4b41      	ldr	r3, [pc, #260]	; (80078d4 <csps_exti+0x684>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	015b      	lsls	r3, r3, #5
 80077d2:	4a41      	ldr	r2, [pc, #260]	; (80078d8 <csps_exti+0x688>)
 80077d4:	4413      	add	r3, r2
 80077d6:	4a41      	ldr	r2, [pc, #260]	; (80078dc <csps_exti+0x68c>)
 80077d8:	6013      	str	r3, [r2, #0]
  if(++dataindex >= DATA_SIZE)
 80077da:	4b3e      	ldr	r3, [pc, #248]	; (80078d4 <csps_exti+0x684>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	3301      	adds	r3, #1
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	4b3c      	ldr	r3, [pc, #240]	; (80078d4 <csps_exti+0x684>)
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	4b3b      	ldr	r3, [pc, #236]	; (80078d4 <csps_exti+0x684>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2b0f      	cmp	r3, #15
 80077ec:	d902      	bls.n	80077f4 <csps_exti+0x5a4>
    dataindex = 0;
 80077ee:	4b39      	ldr	r3, [pc, #228]	; (80078d4 <csps_exti+0x684>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	701a      	strb	r2, [r3, #0]

  static float angle_tach = 0;
  float angle_t = csps_angle14;
 80077f4:	4b36      	ldr	r3, [pc, #216]	; (80078d0 <csps_exti+0x680>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	63bb      	str	r3, [r7, #56]	; 0x38
  if((angle_t - angle_tach < 0.0f && angle_t - angle_tach > -90.0f) || angle_t - angle_tach > 90.0f)
 80077fa:	4b39      	ldr	r3, [pc, #228]	; (80078e0 <csps_exti+0x690>)
 80077fc:	edd3 7a00 	vldr	s15, [r3]
 8007800:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8007804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007808:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800780c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007810:	d50d      	bpl.n	800782e <csps_exti+0x5de>
 8007812:	4b33      	ldr	r3, [pc, #204]	; (80078e0 <csps_exti+0x690>)
 8007814:	edd3 7a00 	vldr	s15, [r3]
 8007818:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800781c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007820:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80078e4 <csps_exti+0x694>
 8007824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800782c:	dc0d      	bgt.n	800784a <csps_exti+0x5fa>
 800782e:	4b2c      	ldr	r3, [pc, #176]	; (80078e0 <csps_exti+0x690>)
 8007830:	edd3 7a00 	vldr	s15, [r3]
 8007834:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8007838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800783c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80078e8 <csps_exti+0x698>
 8007840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007848:	dd02      	ble.n	8007850 <csps_exti+0x600>
    angle_t = angle_tach;
 800784a:	4b25      	ldr	r3, [pc, #148]	; (80078e0 <csps_exti+0x690>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	63bb      	str	r3, [r7, #56]	; 0x38
  angle_tach = angle_t;
 8007850:	4a23      	ldr	r2, [pc, #140]	; (80078e0 <csps_exti+0x690>)
 8007852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007854:	6013      	str	r3, [r2, #0]
  if(angle_tach > -45 && angle_tach < 45)
 8007856:	4b22      	ldr	r3, [pc, #136]	; (80078e0 <csps_exti+0x690>)
 8007858:	edd3 7a00 	vldr	s15, [r3]
 800785c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80078ec <csps_exti+0x69c>
 8007860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007868:	dd46      	ble.n	80078f8 <csps_exti+0x6a8>
 800786a:	4b1d      	ldr	r3, [pc, #116]	; (80078e0 <csps_exti+0x690>)
 800786c:	edd3 7a00 	vldr	s15, [r3]
 8007870:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80078f0 <csps_exti+0x6a0>
 8007874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800787c:	d53c      	bpl.n	80078f8 <csps_exti+0x6a8>
    HAL_GPIO_WritePin(TACHOMETER_GPIO_Port, TACHOMETER_Pin, GPIO_PIN_SET);
 800787e:	2201      	movs	r2, #1
 8007880:	2101      	movs	r1, #1
 8007882:	481c      	ldr	r0, [pc, #112]	; (80078f4 <csps_exti+0x6a4>)
 8007884:	f005 f9fe 	bl	800cc84 <HAL_GPIO_WritePin>
 8007888:	e089      	b.n	800799e <csps_exti+0x74e>
 800788a:	bf00      	nop
 800788c:	20021394 	.word	0x20021394
 8007890:	20021398 	.word	0x20021398
 8007894:	43340000 	.word	0x43340000
 8007898:	43b40000 	.word	0x43b40000
 800789c:	2002139c 	.word	0x2002139c
 80078a0:	20021174 	.word	0x20021174
 80078a4:	43480000 	.word	0x43480000
 80078a8:	20021180 	.word	0x20021180
 80078ac:	4b189680 	.word	0x4b189680
 80078b0:	4b189680 	.word	0x4b189680
 80078b4:	42f00000 	.word	0x42f00000
 80078b8:	49742400 	.word	0x49742400
 80078bc:	42700000 	.word	0x42700000
 80078c0:	43c80000 	.word	0x43c80000
 80078c4:	3dcccccd 	.word	0x3dcccccd
 80078c8:	20021178 	.word	0x20021178
 80078cc:	2002117c 	.word	0x2002117c
 80078d0:	20021390 	.word	0x20021390
 80078d4:	200213a0 	.word	0x200213a0
 80078d8:	20021184 	.word	0x20021184
 80078dc:	200104bc 	.word	0x200104bc
 80078e0:	200213a4 	.word	0x200213a4
 80078e4:	c2b40000 	.word	0xc2b40000
 80078e8:	42b40000 	.word	0x42b40000
 80078ec:	c2340000 	.word	0xc2340000
 80078f0:	42340000 	.word	0x42340000
 80078f4:	40021c00 	.word	0x40021c00
  else if(angle_tach > 45 && angle_tach < 135)
 80078f8:	4b2a      	ldr	r3, [pc, #168]	; (80079a4 <csps_exti+0x754>)
 80078fa:	edd3 7a00 	vldr	s15, [r3]
 80078fe:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80079a8 <csps_exti+0x758>
 8007902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800790a:	dd0f      	ble.n	800792c <csps_exti+0x6dc>
 800790c:	4b25      	ldr	r3, [pc, #148]	; (80079a4 <csps_exti+0x754>)
 800790e:	edd3 7a00 	vldr	s15, [r3]
 8007912:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80079ac <csps_exti+0x75c>
 8007916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800791a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791e:	d505      	bpl.n	800792c <csps_exti+0x6dc>
    HAL_GPIO_WritePin(TACHOMETER_GPIO_Port, TACHOMETER_Pin, GPIO_PIN_RESET);
 8007920:	2200      	movs	r2, #0
 8007922:	2101      	movs	r1, #1
 8007924:	4822      	ldr	r0, [pc, #136]	; (80079b0 <csps_exti+0x760>)
 8007926:	f005 f9ad 	bl	800cc84 <HAL_GPIO_WritePin>
 800792a:	e038      	b.n	800799e <csps_exti+0x74e>
  else if(angle_tach > 135 || angle_tach < -135)
 800792c:	4b1d      	ldr	r3, [pc, #116]	; (80079a4 <csps_exti+0x754>)
 800792e:	edd3 7a00 	vldr	s15, [r3]
 8007932:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80079ac <csps_exti+0x75c>
 8007936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800793a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793e:	dc09      	bgt.n	8007954 <csps_exti+0x704>
 8007940:	4b18      	ldr	r3, [pc, #96]	; (80079a4 <csps_exti+0x754>)
 8007942:	edd3 7a00 	vldr	s15, [r3]
 8007946:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80079b4 <csps_exti+0x764>
 800794a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800794e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007952:	d505      	bpl.n	8007960 <csps_exti+0x710>
    HAL_GPIO_WritePin(TACHOMETER_GPIO_Port, TACHOMETER_Pin, GPIO_PIN_SET);
 8007954:	2201      	movs	r2, #1
 8007956:	2101      	movs	r1, #1
 8007958:	4815      	ldr	r0, [pc, #84]	; (80079b0 <csps_exti+0x760>)
 800795a:	f005 f993 	bl	800cc84 <HAL_GPIO_WritePin>
 800795e:	e01e      	b.n	800799e <csps_exti+0x74e>
  else if(angle_tach < -45 && angle_tach > -135)
 8007960:	4b10      	ldr	r3, [pc, #64]	; (80079a4 <csps_exti+0x754>)
 8007962:	edd3 7a00 	vldr	s15, [r3]
 8007966:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80079b8 <csps_exti+0x768>
 800796a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800796e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007972:	d514      	bpl.n	800799e <csps_exti+0x74e>
 8007974:	4b0b      	ldr	r3, [pc, #44]	; (80079a4 <csps_exti+0x754>)
 8007976:	edd3 7a00 	vldr	s15, [r3]
 800797a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80079b4 <csps_exti+0x764>
 800797e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007986:	dd0a      	ble.n	800799e <csps_exti+0x74e>
    HAL_GPIO_WritePin(TACHOMETER_GPIO_Port, TACHOMETER_Pin, GPIO_PIN_RESET);
 8007988:	2200      	movs	r2, #0
 800798a:	2101      	movs	r1, #1
 800798c:	4808      	ldr	r0, [pc, #32]	; (80079b0 <csps_exti+0x760>)
 800798e:	f005 f979 	bl	800cc84 <HAL_GPIO_WritePin>
 8007992:	e004      	b.n	800799e <csps_exti+0x74e>
      return;
 8007994:	bf00      	nop
 8007996:	e002      	b.n	800799e <csps_exti+0x74e>
      return;
 8007998:	bf00      	nop
 800799a:	e000      	b.n	800799e <csps_exti+0x74e>
    return;
 800799c:	bf00      	nop

}
 800799e:	3750      	adds	r7, #80	; 0x50
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bdb0      	pop	{r4, r5, r7, pc}
 80079a4:	200213a4 	.word	0x200213a4
 80079a8:	42340000 	.word	0x42340000
 80079ac:	43070000 	.word	0x43070000
 80079b0:	40021c00 	.word	0x40021c00
 80079b4:	c3070000 	.word	0xc3070000
 80079b8:	c2340000 	.word	0xc2340000

080079bc <csps_getangle14>:
  else return 360 + a - b;
}
*/

inline float csps_getangle14(void)
{
 80079bc:	b5b0      	push	{r4, r5, r7, lr}
 80079be:	b08e      	sub	sp, #56	; 0x38
 80079c0:	af00      	add	r7, sp, #0
  static float angle_prev = 0;
  float now = Delay_Tick;
 80079c2:	4b57      	ldr	r3, [pc, #348]	; (8007b20 <csps_getangle14+0x164>)
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ce:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float angle, acur, aprev, mult, cur;
  sCspsData data = *CspsDataPtr;
 80079d2:	4b54      	ldr	r3, [pc, #336]	; (8007b24 <csps_getangle14+0x168>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	463c      	mov	r4, r7
 80079d8:	461d      	mov	r5, r3
 80079da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80079e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  if(!csps_rotates)
 80079e6:	4b50      	ldr	r3, [pc, #320]	; (8007b28 <csps_getangle14+0x16c>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d102      	bne.n	80079f6 <csps_getangle14+0x3a>
    return 0.0f;
 80079f0:	f04f 0300 	mov.w	r3, #0
 80079f4:	e08d      	b.n	8007b12 <csps_getangle14+0x156>

  cur = DelayDiff(data.DelayCur, data.DelayPrev);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	4611      	mov	r1, r2
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 f9f1 	bl	8007de4 <DelayDiff>
 8007a02:	ee07 0a90 	vmov	s15, r0
 8007a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  now = DelayDiff(now, data.DelayPrev);
 8007a0e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	ee17 0a90 	vmov	r0, s15
 8007a1e:	f000 f9e1 	bl	8007de4 <DelayDiff>
 8007a22:	ee07 0a90 	vmov	s15, r0
 8007a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

  acur = data.AngleCur14;
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	633b      	str	r3, [r7, #48]	; 0x30
  aprev = data.AnglePrev14;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	627b      	str	r3, [r7, #36]	; 0x24

  if(acur < aprev)
 8007a36:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007a3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007a3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a46:	d507      	bpl.n	8007a58 <csps_getangle14+0x9c>
    acur += 360.0f;
 8007a48:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007a4c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8007b2c <csps_getangle14+0x170>
 8007a50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a54:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

  angle = acur - aprev;
 8007a58:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007a5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a64:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  mult = angle / cur;
 8007a68:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8007a6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8007a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a74:	edc7 7a08 	vstr	s15, [r7, #32]
  angle = mult * now + aprev;
 8007a78:	ed97 7a08 	vldr	s14, [r7, #32]
 8007a7c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a84:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a8c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

  while(angle > 180.0f)
 8007a90:	e007      	b.n	8007aa2 <csps_getangle14+0xe6>
    angle -= 360.0f;
 8007a92:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007a96:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8007b2c <csps_getangle14+0x170>
 8007a9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a9e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  while(angle > 180.0f)
 8007aa2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007aa6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007b30 <csps_getangle14+0x174>
 8007aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab2:	dcee      	bgt.n	8007a92 <csps_getangle14+0xd6>

  if((angle - angle_prev < 0.0f && angle - angle_prev > -90.0f) || angle - angle_prev > 90.0f)
 8007ab4:	4b1f      	ldr	r3, [pc, #124]	; (8007b34 <csps_getangle14+0x178>)
 8007ab6:	edd3 7a00 	vldr	s15, [r3]
 8007aba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8007abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ac2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aca:	d50d      	bpl.n	8007ae8 <csps_getangle14+0x12c>
 8007acc:	4b19      	ldr	r3, [pc, #100]	; (8007b34 <csps_getangle14+0x178>)
 8007ace:	edd3 7a00 	vldr	s15, [r3]
 8007ad2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8007ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ada:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007b38 <csps_getangle14+0x17c>
 8007ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae6:	dc0d      	bgt.n	8007b04 <csps_getangle14+0x148>
 8007ae8:	4b12      	ldr	r3, [pc, #72]	; (8007b34 <csps_getangle14+0x178>)
 8007aea:	edd3 7a00 	vldr	s15, [r3]
 8007aee:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8007af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007af6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007b3c <csps_getangle14+0x180>
 8007afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b02:	dd02      	ble.n	8007b0a <csps_getangle14+0x14e>
  {
    angle = angle_prev;
 8007b04:	4b0b      	ldr	r3, [pc, #44]	; (8007b34 <csps_getangle14+0x178>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	637b      	str	r3, [r7, #52]	; 0x34
  }
  angle_prev = angle;
 8007b0a:	4a0a      	ldr	r2, [pc, #40]	; (8007b34 <csps_getangle14+0x178>)
 8007b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b0e:	6013      	str	r3, [r2, #0]

  return angle;
 8007b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b12:	ee07 3a90 	vmov	s15, r3
}
 8007b16:	eeb0 0a67 	vmov.f32	s0, s15
 8007b1a:	3738      	adds	r7, #56	; 0x38
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8007b20:	40000c00 	.word	0x40000c00
 8007b24:	200104bc 	.word	0x200104bc
 8007b28:	20021165 	.word	0x20021165
 8007b2c:	43b40000 	.word	0x43b40000
 8007b30:	43340000 	.word	0x43340000
 8007b34:	200213a8 	.word	0x200213a8
 8007b38:	c2b40000 	.word	0xc2b40000
 8007b3c:	42b40000 	.word	0x42b40000

08007b40 <csps_getangle23from14>:

  return angle;
}

inline float csps_getangle23from14(float angle)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	ed87 0a01 	vstr	s0, [r7, #4]
  if(!csps_rotates)
 8007b4a:	4b15      	ldr	r3, [pc, #84]	; (8007ba0 <csps_getangle23from14+0x60>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d102      	bne.n	8007b5a <csps_getangle23from14+0x1a>
    return 0.0f;
 8007b54:	f04f 0300 	mov.w	r3, #0
 8007b58:	e018      	b.n	8007b8c <csps_getangle23from14+0x4c>

  if(angle > 0.0f) angle -= 180.0f;
 8007b5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8007b5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b66:	dd08      	ble.n	8007b7a <csps_getangle23from14+0x3a>
 8007b68:	edd7 7a01 	vldr	s15, [r7, #4]
 8007b6c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007ba4 <csps_getangle23from14+0x64>
 8007b70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b74:	edc7 7a01 	vstr	s15, [r7, #4]
 8007b78:	e007      	b.n	8007b8a <csps_getangle23from14+0x4a>
  else angle += 180.0f;
 8007b7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8007b7e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8007ba4 <csps_getangle23from14+0x64>
 8007b82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b86:	edc7 7a01 	vstr	s15, [r7, #4]
  return angle;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	ee07 3a90 	vmov	s15, r3
}
 8007b90:	eeb0 0a67 	vmov.f32	s0, s15
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	20021165 	.word	0x20021165
 8007ba4:	43340000 	.word	0x43340000

08007ba8 <csps_getrpm>:

inline float csps_getrpm(void)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
  return csps_rpm;
 8007bac:	4b04      	ldr	r3, [pc, #16]	; (8007bc0 <csps_getrpm+0x18>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	ee07 3a90 	vmov	s15, r3
}
 8007bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	20021174 	.word	0x20021174

08007bc4 <csps_getrpmgui>:

inline float csps_getrpmgui(void)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	af00      	add	r7, sp, #0
  return csps_rpm_gui;
 8007bc8:	4b04      	ldr	r3, [pc, #16]	; (8007bdc <csps_getrpmgui+0x18>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	ee07 3a90 	vmov	s15, r3
}
 8007bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	20021178 	.word	0x20021178

08007be0 <csps_getuspa>:

inline float csps_getuspa(void)
{
 8007be0:	b480      	push	{r7}
 8007be2:	af00      	add	r7, sp, #0
  return csps_uspa;
 8007be4:	4b04      	ldr	r3, [pc, #16]	; (8007bf8 <csps_getuspa+0x18>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	ee07 3a90 	vmov	s15, r3
}
 8007bec:	eeb0 0a67 	vmov.f32	s0, s15
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	2002117c 	.word	0x2002117c

08007bfc <csps_getperiod>:

inline float csps_getperiod(void)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	af00      	add	r7, sp, #0
  return csps_period;
 8007c00:	4b04      	ldr	r3, [pc, #16]	; (8007c14 <csps_getperiod+0x18>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	ee07 3a90 	vmov	s15, r3
}
 8007c08:	eeb0 0a67 	vmov.f32	s0, s15
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	20021180 	.word	0x20021180

08007c18 <csps_isrotates>:

inline uint8_t csps_isrotates(void)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	af00      	add	r7, sp, #0
  return csps_rotates;
 8007c1c:	4b03      	ldr	r3, [pc, #12]	; (8007c2c <csps_isrotates+0x14>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	b2db      	uxtb	r3, r3
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	20021165 	.word	0x20021165

08007c30 <csps_isfound>:

inline uint8_t csps_isfound(void)
{
 8007c30:	b480      	push	{r7}
 8007c32:	af00      	add	r7, sp, #0
  return csps_found;
 8007c34:	4b03      	ldr	r3, [pc, #12]	; (8007c44 <csps_isfound+0x14>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	b2db      	uxtb	r3, r3
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	20021164 	.word	0x20021164

08007c48 <csps_iserror>:

inline uint8_t csps_iserror(void)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	af00      	add	r7, sp, #0
  return csps_errors > 3.0f;
 8007c4c:	4b08      	ldr	r3, [pc, #32]	; (8007c70 <csps_iserror+0x28>)
 8007c4e:	edd3 7a00 	vldr	s15, [r3]
 8007c52:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8007c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c5e:	bfcc      	ite	gt
 8007c60:	2301      	movgt	r3, #1
 8007c62:	2300      	movle	r3, #0
 8007c64:	b2db      	uxtb	r3, r3
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	20021170 	.word	0x20021170

08007c74 <csps_loop>:

inline void csps_loop(void)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
  static uint32_t last_error_null = 0;

  uint32_t pulse_last = csps_pulse_last;
 8007c7a:	4b29      	ldr	r3, [pc, #164]	; (8007d20 <csps_loop+0xac>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	60bb      	str	r3, [r7, #8]
  uint32_t now = Delay_Tick;
 8007c80:	4b28      	ldr	r3, [pc, #160]	; (8007d24 <csps_loop+0xb0>)
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	607b      	str	r3, [r7, #4]

  if(DelayDiff(now, pulse_last) > 50000)
 8007c86:	68b9      	ldr	r1, [r7, #8]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f8ab 	bl	8007de4 <DelayDiff>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d927      	bls.n	8007ce8 <csps_loop+0x74>
  {
    pulse_last = now;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	60bb      	str	r3, [r7, #8]
    for(int i = 0; i < IRQ_SIZE; i++)
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	60fb      	str	r3, [r7, #12]
 8007ca0:	e007      	b.n	8007cb2 <csps_loop+0x3e>
      cspc_irq_data[i] = 0;
 8007ca2:	4a21      	ldr	r2, [pc, #132]	; (8007d28 <csps_loop+0xb4>)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0; i < IRQ_SIZE; i++)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b07      	cmp	r3, #7
 8007cb6:	ddf4      	ble.n	8007ca2 <csps_loop+0x2e>
    csps_found = 0;
 8007cb8:	4b1c      	ldr	r3, [pc, #112]	; (8007d2c <csps_loop+0xb8>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	701a      	strb	r2, [r3, #0]
    csps_rpm = 0;
 8007cbe:	4b1c      	ldr	r3, [pc, #112]	; (8007d30 <csps_loop+0xbc>)
 8007cc0:	f04f 0200 	mov.w	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]
    csps_rpm_gui = 0;
 8007cc6:	4b1b      	ldr	r3, [pc, #108]	; (8007d34 <csps_loop+0xc0>)
 8007cc8:	f04f 0200 	mov.w	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]
    csps_rotates = 0;
 8007cce:	4b1a      	ldr	r3, [pc, #104]	; (8007d38 <csps_loop+0xc4>)
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	701a      	strb	r2, [r3, #0]
    csps_period = 1.0f / csps_rpm;
 8007cd4:	4b16      	ldr	r3, [pc, #88]	; (8007d30 <csps_loop+0xbc>)
 8007cd6:	ed93 7a00 	vldr	s14, [r3]
 8007cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ce2:	4b16      	ldr	r3, [pc, #88]	; (8007d3c <csps_loop+0xc8>)
 8007ce4:	edc3 7a00 	vstr	s15, [r3]
  }

  if(DelayDiff(now, last_error_null) > 50000)
 8007ce8:	4b15      	ldr	r3, [pc, #84]	; (8007d40 <csps_loop+0xcc>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f878 	bl	8007de4 <DelayDiff>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d90c      	bls.n	8007d18 <csps_loop+0xa4>
  {
    csps_errors *= 0.95f;
 8007cfe:	4b11      	ldr	r3, [pc, #68]	; (8007d44 <csps_loop+0xd0>)
 8007d00:	edd3 7a00 	vldr	s15, [r3]
 8007d04:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007d48 <csps_loop+0xd4>
 8007d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d0c:	4b0d      	ldr	r3, [pc, #52]	; (8007d44 <csps_loop+0xd0>)
 8007d0e:	edc3 7a00 	vstr	s15, [r3]
    last_error_null = now;
 8007d12:	4a0b      	ldr	r2, [pc, #44]	; (8007d40 <csps_loop+0xcc>)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6013      	str	r3, [r2, #0]
  }

}
 8007d18:	bf00      	nop
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	20021168 	.word	0x20021168
 8007d24:	40000c00 	.word	0x40000c00
 8007d28:	20021144 	.word	0x20021144
 8007d2c:	20021164 	.word	0x20021164
 8007d30:	20021174 	.word	0x20021174
 8007d34:	20021178 	.word	0x20021178
 8007d38:	20021165 	.word	0x20021165
 8007d3c:	20021180 	.word	0x20021180
 8007d40:	200213ac 	.word	0x200213ac
 8007d44:	20021170 	.word	0x20021170
 8007d48:	3f733333 	.word	0x3f733333

08007d4c <DelayInit>:
static TIM_HandleTypeDef htim_delay;

volatile uint32_t DelStart[COUNTERS];

void DelayInit(void)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af00      	add	r7, sp, #0
  __DELAY_TIM_CLK_ENABLE();
 8007d52:	4b20      	ldr	r3, [pc, #128]	; (8007dd4 <DelayInit+0x88>)
 8007d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d56:	4a1f      	ldr	r2, [pc, #124]	; (8007dd4 <DelayInit+0x88>)
 8007d58:	f043 0308 	orr.w	r3, r3, #8
 8007d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8007d5e:	4b1d      	ldr	r3, [pc, #116]	; (8007dd4 <DelayInit+0x88>)
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	f003 0308 	and.w	r3, r3, #8
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	683b      	ldr	r3, [r7, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig;
    TIM_MasterConfigTypeDef sMasterConfig;

    htim_delay.Instance = DelayTimer;
 8007d6a:	4b1b      	ldr	r3, [pc, #108]	; (8007dd8 <DelayInit+0x8c>)
 8007d6c:	4a1b      	ldr	r2, [pc, #108]	; (8007ddc <DelayInit+0x90>)
 8007d6e:	601a      	str	r2, [r3, #0]
    htim_delay.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) - 1;
 8007d70:	f005 fcae 	bl	800d6d0 <HAL_RCC_GetPCLK1Freq>
 8007d74:	4603      	mov	r3, r0
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	4a19      	ldr	r2, [pc, #100]	; (8007de0 <DelayInit+0x94>)
 8007d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d7e:	0c9b      	lsrs	r3, r3, #18
 8007d80:	3b01      	subs	r3, #1
 8007d82:	4a15      	ldr	r2, [pc, #84]	; (8007dd8 <DelayInit+0x8c>)
 8007d84:	6053      	str	r3, [r2, #4]
    htim_delay.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d86:	4b14      	ldr	r3, [pc, #80]	; (8007dd8 <DelayInit+0x8c>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	609a      	str	r2, [r3, #8]
    htim_delay.Init.Period = DelayMask;
 8007d8c:	4b12      	ldr	r3, [pc, #72]	; (8007dd8 <DelayInit+0x8c>)
 8007d8e:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8007d92:	60da      	str	r2, [r3, #12]
    htim_delay.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d94:	4b10      	ldr	r3, [pc, #64]	; (8007dd8 <DelayInit+0x8c>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim_delay);
 8007d9a:	480f      	ldr	r0, [pc, #60]	; (8007dd8 <DelayInit+0x8c>)
 8007d9c:	f007 fc57 	bl	800f64e <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007da4:	613b      	str	r3, [r7, #16]
    HAL_TIM_ConfigClockSource(&htim_delay, &sClockSourceConfig);
 8007da6:	f107 0310 	add.w	r3, r7, #16
 8007daa:	4619      	mov	r1, r3
 8007dac:	480a      	ldr	r0, [pc, #40]	; (8007dd8 <DelayInit+0x8c>)
 8007dae:	f007 ff75 	bl	800fc9c <HAL_TIM_ConfigClockSource>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007db2:	2300      	movs	r3, #0
 8007db4:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007db6:	2300      	movs	r3, #0
 8007db8:	60fb      	str	r3, [r7, #12]
    HAL_TIMEx_MasterConfigSynchronization(&htim_delay, &sMasterConfig);
 8007dba:	1d3b      	adds	r3, r7, #4
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	4806      	ldr	r0, [pc, #24]	; (8007dd8 <DelayInit+0x8c>)
 8007dc0:	f008 fc16 	bl	80105f0 <HAL_TIMEx_MasterConfigSynchronization>

    HAL_TIM_Base_Start(&htim_delay);
 8007dc4:	4804      	ldr	r0, [pc, #16]	; (8007dd8 <DelayInit+0x8c>)
 8007dc6:	f007 fc6d 	bl	800f6a4 <HAL_TIM_Base_Start>

}
 8007dca:	bf00      	nop
 8007dcc:	3720      	adds	r7, #32
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	40023800 	.word	0x40023800
 8007dd8:	200213b0 	.word	0x200213b0
 8007ddc:	40000c00 	.word	0x40000c00
 8007de0:	431bde83 	.word	0x431bde83

08007de4 <DelayDiff>:
{
  DelayUs(val * 1000);
}

inline uint32_t DelayDiff(uint32_t a, uint32_t b)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  if(a >= b)
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d303      	bcc.n	8007dfe <DelayDiff+0x1a>
    return (a - b);
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	e005      	b.n	8007e0a <DelayDiff+0x26>
  return ((DelayMask - b) + a);
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	1ad2      	subs	r2, r2, r3
 8007e04:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8007e08:	4413      	add	r3, r2
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
	...

08007e18 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007e1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007e20:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007e24:	4b0b      	ldr	r3, [pc, #44]	; (8007e54 <SCB_EnableICache+0x3c>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007e2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007e30:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007e34:	4b07      	ldr	r3, [pc, #28]	; (8007e54 <SCB_EnableICache+0x3c>)
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	4a06      	ldr	r2, [pc, #24]	; (8007e54 <SCB_EnableICache+0x3c>)
 8007e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e3e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007e40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007e44:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8007e48:	bf00      	nop
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	e000ed00 	.word	0xe000ed00

08007e58 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8007e5e:	4b1d      	ldr	r3, [pc, #116]	; (8007ed4 <SCB_EnableDCache+0x7c>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007e66:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8007e6a:	4b1a      	ldr	r3, [pc, #104]	; (8007ed4 <SCB_EnableDCache+0x7c>)
 8007e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e70:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	0b5b      	lsrs	r3, r3, #13
 8007e76:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007e7a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	08db      	lsrs	r3, r3, #3
 8007e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e84:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8007e8e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007e94:	490f      	ldr	r1, [pc, #60]	; (8007ed4 <SCB_EnableDCache+0x7c>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	1e5a      	subs	r2, r3, #1
 8007ea0:	60ba      	str	r2, [r7, #8]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1ef      	bne.n	8007e86 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	1e5a      	subs	r2, r3, #1
 8007eaa:	60fa      	str	r2, [r7, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1e5      	bne.n	8007e7c <SCB_EnableDCache+0x24>
 8007eb0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8007eb4:	4b07      	ldr	r3, [pc, #28]	; (8007ed4 <SCB_EnableDCache+0x7c>)
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	4a06      	ldr	r2, [pc, #24]	; (8007ed4 <SCB_EnableDCache+0x7c>)
 8007eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ebe:	6153      	str	r3, [r2, #20]
 8007ec0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007ec4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8007ec8:	bf00      	nop
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	e000ed00 	.word	0xe000ed00

08007ed8 <HAL_GPIO_EXTI_Callback>:
static void MX_RNG_Init(void);
static void UpdateIWDG(void);
static void UpdateDebugger(void);

inline void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 8007ee2:	88fb      	ldrh	r3, [r7, #6]
 8007ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee8:	d006      	beq.n	8007ef8 <HAL_GPIO_EXTI_Callback+0x20>
 8007eea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007eee:	d006      	beq.n	8007efe <HAL_GPIO_EXTI_Callback+0x26>
 8007ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ef4:	d006      	beq.n	8007f04 <HAL_GPIO_EXTI_Callback+0x2c>
      break;
    case ADC_STATUS_Pin :
      HAL_TIM_Base_Start_IT(&htim7);
      break;
    default:
      break;
 8007ef6:	e009      	b.n	8007f0c <HAL_GPIO_EXTI_Callback+0x34>
      csps_exti();
 8007ef8:	f7ff f9aa 	bl	8007250 <csps_exti>
      break;
 8007efc:	e006      	b.n	8007f0c <HAL_GPIO_EXTI_Callback+0x34>
      acis_hall_exti();
 8007efe:	f7f9 fb5f 	bl	80015c0 <acis_hall_exti>
      break;
 8007f02:	e003      	b.n	8007f0c <HAL_GPIO_EXTI_Callback+0x34>
      HAL_TIM_Base_Start_IT(&htim7);
 8007f04:	4803      	ldr	r0, [pc, #12]	; (8007f14 <HAL_GPIO_EXTI_Callback+0x3c>)
 8007f06:	f007 fbf7 	bl	800f6f8 <HAL_TIM_Base_Start_IT>
      break;
 8007f0a:	bf00      	nop
  }
}
 8007f0c:	bf00      	nop
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	20024bb0 	.word	0x20024bb0

08007f18 <HAL_TIM_PeriodElapsedCallback>:

inline void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  static uint16_t ms_tim = 0;
  if(htim == &htim4)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a10      	ldr	r2, [pc, #64]	; (8007f64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d112      	bne.n	8007f4e <HAL_TIM_PeriodElapsedCallback+0x36>
  {
    acis_loop_irq();
 8007f28:	f7fa ffb0 	bl	8002e8c <acis_loop_irq>
    if(++ms_tim >= 500)
 8007f2c:	4b0e      	ldr	r3, [pc, #56]	; (8007f68 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	3301      	adds	r3, #1
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	4b0c      	ldr	r3, [pc, #48]	; (8007f68 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8007f36:	801a      	strh	r2, [r3, #0]
 8007f38:	4b0b      	ldr	r3, [pc, #44]	; (8007f68 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8007f3a:	881b      	ldrh	r3, [r3, #0]
 8007f3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007f40:	d30b      	bcc.n	8007f5a <HAL_TIM_PeriodElapsedCallback+0x42>
    {
      csps_loop();
 8007f42:	f7ff fe97 	bl	8007c74 <csps_loop>
      ms_tim = 0;
 8007f46:	4b08      	ldr	r3, [pc, #32]	; (8007f68 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8007f48:	2200      	movs	r2, #0
 8007f4a:	801a      	strh	r2, [r3, #0]
  }
  else if(htim == &htim7)
  {
    map_adc_read();
  }
}
 8007f4c:	e005      	b.n	8007f5a <HAL_TIM_PeriodElapsedCallback+0x42>
  else if(htim == &htim7)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a06      	ldr	r2, [pc, #24]	; (8007f6c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d101      	bne.n	8007f5a <HAL_TIM_PeriodElapsedCallback+0x42>
    map_adc_read();
 8007f56:	f000 febb 	bl	8008cd0 <map_adc_read>
}
 8007f5a:	bf00      	nop
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	200247e4 	.word	0x200247e4
 8007f68:	200213f0 	.word	0x200213f0
 8007f6c:	20024bb0 	.word	0x20024bb0

08007f70 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  xDmaTxIrqHandler(huart);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f002 fd73 	bl	800aa64 <xDmaTxIrqHandler>
}
 8007f7e:	bf00      	nop
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b082      	sub	sp, #8
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  xDmaErIrqHandler(huart);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f002 fdcc 	bl	800ab2c <xDmaErIrqHandler>
}
 8007f94:	bf00      	nop
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef * hspi)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  if(hspi == &hspi2)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a05      	ldr	r2, [pc, #20]	; (8007fbc <HAL_SPI_ErrorCallback+0x20>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d102      	bne.n	8007fb2 <HAL_SPI_ErrorCallback+0x16>
  {
    SST25_ErrorCallback(hspi);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 ff51 	bl	8008e54 <SST25_ErrorCallback>
  }
}
 8007fb2:	bf00      	nop
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20024740 	.word	0x20024740

08007fc0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  if(hspi == &hspi2)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a05      	ldr	r2, [pc, #20]	; (8007fe0 <HAL_SPI_TxCpltCallback+0x20>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d102      	bne.n	8007fd6 <HAL_SPI_TxCpltCallback+0x16>
  {
    SST25_TxCpltCallback(hspi);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 ff49 	bl	8008e68 <SST25_TxCpltCallback>
  }
}
 8007fd6:	bf00      	nop
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20024740 	.word	0x20024740

08007fe4 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  if(hspi == &hspi2)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a05      	ldr	r2, [pc, #20]	; (8008004 <HAL_SPI_RxCpltCallback+0x20>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d102      	bne.n	8007ffa <HAL_SPI_RxCpltCallback+0x16>
  {
    SST25_RxCpltCallback(hspi);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 ff4d 	bl	8008e94 <SST25_RxCpltCallback>
  }
}
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20024740 	.word	0x20024740

08008008 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  if(hspi == &hspi2)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a05      	ldr	r2, [pc, #20]	; (8008028 <HAL_SPI_TxRxCpltCallback+0x20>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d102      	bne.n	800801e <HAL_SPI_TxRxCpltCallback+0x16>
  {
    SST25_TxRxCpltCallback(hspi);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 ff51 	bl	8008ec0 <SST25_TxRxCpltCallback>
  }
}
 800801e:	bf00      	nop
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	20024740 	.word	0x20024740

0800802c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef * hadc)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  if(hadc == &hadc1)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a06      	ldr	r2, [pc, #24]	; (8008050 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d104      	bne.n	8008046 <HAL_ADC_ConvHalfCpltCallback+0x1a>
  {
    acis_adc_irq(&ADC_BUF[0], ADC_BUF_SIZE / 2);
 800803c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008040:	4804      	ldr	r0, [pc, #16]	; (8008054 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8008042:	f7f9 f843 	bl	80010cc <acis_adc_irq>
  }
}
 8008046:	bf00      	nop
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	200249b8 	.word	0x200249b8
 8008054:	20024bf0 	.word	0x20024bf0

08008058 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  if(hadc == &hadc1)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a06      	ldr	r2, [pc, #24]	; (800807c <HAL_ADC_ConvCpltCallback+0x24>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d104      	bne.n	8008072 <HAL_ADC_ConvCpltCallback+0x1a>
  {
    acis_adc_irq(&ADC_BUF[ADC_BUF_SIZE / 2], ADC_BUF_SIZE / 2);
 8008068:	f44f 7100 	mov.w	r1, #512	; 0x200
 800806c:	4804      	ldr	r0, [pc, #16]	; (8008080 <HAL_ADC_ConvCpltCallback+0x28>)
 800806e:	f7f9 f82d 	bl	80010cc <acis_adc_irq>
  }
}
 8008072:	bf00      	nop
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	200249b8 	.word	0x200249b8
 8008080:	20024ff0 	.word	0x20024ff0

08008084 <main>:


int main(void)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	af00      	add	r7, sp, #0
  SCB_EnableICache();
 8008088:	f7ff fec6 	bl	8007e18 <SCB_EnableICache>

  SCB_EnableDCache();
 800808c:	f7ff fee4 	bl	8007e58 <SCB_EnableDCache>

  HAL_Init();
 8008090:	f003 f938 	bl	800b304 <HAL_Init>

  SystemClock_Config();
 8008094:	f000 f8c4 	bl	8008220 <SystemClock_Config>

  MX_GPIO_Init();
 8008098:	f000 fc76 	bl	8008988 <MX_GPIO_Init>
  MX_DMA_Init();
 800809c:	f000 fc22 	bl	80088e4 <MX_DMA_Init>
  MX_IWDG_Init();
 80080a0:	f000 f9e4 	bl	800846c <MX_IWDG_Init>
  MX_USART1_UART_Init();  //Control Communication
 80080a4:	f000 fbe6 	bl	8008874 <MX_USART1_UART_Init>
  MX_SPI2_Init(); //SPI Flash
 80080a8:	f000 fa12 	bl	80084d0 <MX_SPI2_Init>
  MX_ADC1_Init(); //Temperature and battery sensor
 80080ac:	f000 f950 	bl	8008350 <MX_ADC1_Init>
  MX_TIM3_Init(); //Servo PWM
 80080b0:	f000 fa4c 	bl	800854c <MX_TIM3_Init>
  MX_TIM4_Init(); //ACIS common workout IT
 80080b4:	f000 faba 	bl	800862c <MX_TIM4_Init>
  MX_TIM7_Init(); //Wait timer for ADC670
 80080b8:	f000 fafa 	bl	80086b0 <MX_TIM7_Init>
  MX_TIM8_Init(); //ADCs trigger strobe
 80080bc:	f000 fb40 	bl	8008740 <MX_TIM8_Init>
  MX_CRC_Init();
 80080c0:	f000 f9a8 	bl	8008414 <MX_CRC_Init>
  MX_RNG_Init();
 80080c4:	f000 f9f0 	bl	80084a8 <MX_RNG_Init>
  DelayInit();
 80080c8:	f7ff fe40 	bl	8007d4c <DelayInit>

  SST25_Init(&hspi2);
 80080cc:	4810      	ldr	r0, [pc, #64]	; (8008110 <main+0x8c>)
 80080ce:	f001 fa93 	bl	80095f8 <SST25_Init>

  CRC16_RegisterHardware(&hcrc);
 80080d2:	4810      	ldr	r0, [pc, #64]	; (8008114 <main+0x90>)
 80080d4:	f7ff f86c 	bl	80071b0 <CRC16_RegisterHardware>

  xFifosInit();
 80080d8:	f002 fd62 	bl	800aba0 <xFifosInit>
  xGetterInit();
 80080dc:	f002 fdb0 	bl	800ac40 <xGetterInit>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_BUF, ADC_BUF_SIZE);
 80080e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080e4:	490c      	ldr	r1, [pc, #48]	; (8008118 <main+0x94>)
 80080e6:	480d      	ldr	r0, [pc, #52]	; (800811c <main+0x98>)
 80080e8:	f003 f9b6 	bl	800b458 <HAL_ADC_Start_DMA>


  map_init();
 80080ec:	f000 fdcc 	bl	8008c88 <map_init>
  acis_init();
 80080f0:	f7f8 fe80 	bl	8000df4 <acis_init>

  HAL_TIM_Base_Start(&htim8);
 80080f4:	480a      	ldr	r0, [pc, #40]	; (8008120 <main+0x9c>)
 80080f6:	f007 fad5 	bl	800f6a4 <HAL_TIM_Base_Start>

  while (1)
  {
    UpdateIWDG();
 80080fa:	f000 f813 	bl	8008124 <UpdateIWDG>
    UpdateDebugger();
 80080fe:	f000 f833 	bl	8008168 <UpdateDebugger>
    xGetterLoop();
 8008102:	f002 fdd3 	bl	800acac <xGetterLoop>
    acis_loop();
 8008106:	f7fb f979 	bl	80033fc <acis_loop>
    acis_deinitIfNeed();
 800810a:	f7f8 ffc3 	bl	8001094 <acis_deinitIfNeed>
    UpdateIWDG();
 800810e:	e7f4      	b.n	80080fa <main+0x76>
 8008110:	20024740 	.word	0x20024740
 8008114:	20024894 	.word	0x20024894
 8008118:	20024bf0 	.word	0x20024bf0
 800811c:	200249b8 	.word	0x200249b8
 8008120:	200247a4 	.word	0x200247a4

08008124 <UpdateIWDG>:
  }
}

static inline void UpdateIWDG(void)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
  static uint32_t delay_old = 0;
  uint32_t delay = Delay_Tick;
 800812a:	4b0b      	ldr	r3, [pc, #44]	; (8008158 <UpdateIWDG+0x34>)
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	607b      	str	r3, [r7, #4]
  if(DelayDiff(delay, delay_old) > 1000000)
 8008130:	4b0a      	ldr	r3, [pc, #40]	; (800815c <UpdateIWDG+0x38>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7ff fe54 	bl	8007de4 <DelayDiff>
 800813c:	4602      	mov	r2, r0
 800813e:	4b08      	ldr	r3, [pc, #32]	; (8008160 <UpdateIWDG+0x3c>)
 8008140:	429a      	cmp	r2, r3
 8008142:	d905      	bls.n	8008150 <UpdateIWDG+0x2c>
  {
    delay_old = delay;
 8008144:	4a05      	ldr	r2, [pc, #20]	; (800815c <UpdateIWDG+0x38>)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6013      	str	r3, [r2, #0]
    HAL_IWDG_Refresh(&hiwdg);
 800814a:	4806      	ldr	r0, [pc, #24]	; (8008164 <UpdateIWDG+0x40>)
 800814c:	f004 fe12 	bl	800cd74 <HAL_IWDG_Refresh>
  }
}
 8008150:	bf00      	nop
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	40000c00 	.word	0x40000c00
 800815c:	200213f4 	.word	0x200213f4
 8008160:	000f4240 	.word	0x000f4240
 8008164:	20024884 	.word	0x20024884

08008168 <UpdateDebugger>:

static inline void UpdateDebugger(void)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
  static uint8_t was_attached = 0;
  uint8_t attached = IS_DEBUGGER_ATTACHED();
 800816e:	4b2a      	ldr	r3, [pc, #168]	; (8008218 <UpdateDebugger+0xb0>)
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	f003 0307 	and.w	r3, r3, #7
 8008178:	71fb      	strb	r3, [r7, #7]
  if(was_attached != attached)
 800817a:	4b28      	ldr	r3, [pc, #160]	; (800821c <UpdateDebugger+0xb4>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	79fa      	ldrb	r2, [r7, #7]
 8008180:	429a      	cmp	r2, r3
 8008182:	d042      	beq.n	800820a <UpdateDebugger+0xa2>
  {
    was_attached = attached;
 8008184:	4a25      	ldr	r2, [pc, #148]	; (800821c <UpdateDebugger+0xb4>)
 8008186:	79fb      	ldrb	r3, [r7, #7]
 8008188:	7013      	strb	r3, [r2, #0]
    if(attached)
 800818a:	79fb      	ldrb	r3, [r7, #7]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d01e      	beq.n	80081ce <UpdateDebugger+0x66>
    {
      __HAL_DBGMCU_FREEZE_IWDG();
 8008190:	4b21      	ldr	r3, [pc, #132]	; (8008218 <UpdateDebugger+0xb0>)
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	4a20      	ldr	r2, [pc, #128]	; (8008218 <UpdateDebugger+0xb0>)
 8008196:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800819a:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM4();
 800819c:	4b1e      	ldr	r3, [pc, #120]	; (8008218 <UpdateDebugger+0xb0>)
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	4a1d      	ldr	r2, [pc, #116]	; (8008218 <UpdateDebugger+0xb0>)
 80081a2:	f043 0304 	orr.w	r3, r3, #4
 80081a6:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM5();
 80081a8:	4b1b      	ldr	r3, [pc, #108]	; (8008218 <UpdateDebugger+0xb0>)
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	4a1a      	ldr	r2, [pc, #104]	; (8008218 <UpdateDebugger+0xb0>)
 80081ae:	f043 0308 	orr.w	r3, r3, #8
 80081b2:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM7();
 80081b4:	4b18      	ldr	r3, [pc, #96]	; (8008218 <UpdateDebugger+0xb0>)
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	4a17      	ldr	r2, [pc, #92]	; (8008218 <UpdateDebugger+0xb0>)
 80081ba:	f043 0320 	orr.w	r3, r3, #32
 80081be:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_FREEZE_TIM8();
 80081c0:	4b15      	ldr	r3, [pc, #84]	; (8008218 <UpdateDebugger+0xb0>)
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	4a14      	ldr	r2, [pc, #80]	; (8008218 <UpdateDebugger+0xb0>)
 80081c6:	f043 0302 	orr.w	r3, r3, #2
 80081ca:	60d3      	str	r3, [r2, #12]
      __HAL_DBGMCU_UNFREEZE_TIM5();
      __HAL_DBGMCU_UNFREEZE_TIM7();
      __HAL_DBGMCU_UNFREEZE_TIM8();
    }
  }
}
 80081cc:	e01d      	b.n	800820a <UpdateDebugger+0xa2>
      __HAL_DBGMCU_UNFREEZE_IWDG();
 80081ce:	4b12      	ldr	r3, [pc, #72]	; (8008218 <UpdateDebugger+0xb0>)
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	4a11      	ldr	r2, [pc, #68]	; (8008218 <UpdateDebugger+0xb0>)
 80081d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081d8:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM4();
 80081da:	4b0f      	ldr	r3, [pc, #60]	; (8008218 <UpdateDebugger+0xb0>)
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	4a0e      	ldr	r2, [pc, #56]	; (8008218 <UpdateDebugger+0xb0>)
 80081e0:	f023 0304 	bic.w	r3, r3, #4
 80081e4:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM5();
 80081e6:	4b0c      	ldr	r3, [pc, #48]	; (8008218 <UpdateDebugger+0xb0>)
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	4a0b      	ldr	r2, [pc, #44]	; (8008218 <UpdateDebugger+0xb0>)
 80081ec:	f023 0308 	bic.w	r3, r3, #8
 80081f0:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM7();
 80081f2:	4b09      	ldr	r3, [pc, #36]	; (8008218 <UpdateDebugger+0xb0>)
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	4a08      	ldr	r2, [pc, #32]	; (8008218 <UpdateDebugger+0xb0>)
 80081f8:	f023 0320 	bic.w	r3, r3, #32
 80081fc:	6093      	str	r3, [r2, #8]
      __HAL_DBGMCU_UNFREEZE_TIM8();
 80081fe:	4b06      	ldr	r3, [pc, #24]	; (8008218 <UpdateDebugger+0xb0>)
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	4a05      	ldr	r2, [pc, #20]	; (8008218 <UpdateDebugger+0xb0>)
 8008204:	f023 0302 	bic.w	r3, r3, #2
 8008208:	60d3      	str	r3, [r2, #12]
}
 800820a:	bf00      	nop
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	e0042000 	.word	0xe0042000
 800821c:	200213f8 	.word	0x200213f8

08008220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b0b4      	sub	sp, #208	; 0xd0
 8008224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008226:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800822a:	2230      	movs	r2, #48	; 0x30
 800822c:	2100      	movs	r1, #0
 800822e:	4618      	mov	r0, r3
 8008230:	f009 fb07 	bl	8011842 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008234:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	605a      	str	r2, [r3, #4]
 800823e:	609a      	str	r2, [r3, #8]
 8008240:	60da      	str	r2, [r3, #12]
 8008242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008244:	f107 030c 	add.w	r3, r7, #12
 8008248:	2280      	movs	r2, #128	; 0x80
 800824a:	2100      	movs	r1, #0
 800824c:	4618      	mov	r0, r3
 800824e:	f009 faf8 	bl	8011842 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008252:	4b3c      	ldr	r3, [pc, #240]	; (8008344 <SystemClock_Config+0x124>)
 8008254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008256:	4a3b      	ldr	r2, [pc, #236]	; (8008344 <SystemClock_Config+0x124>)
 8008258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800825c:	6413      	str	r3, [r2, #64]	; 0x40
 800825e:	4b39      	ldr	r3, [pc, #228]	; (8008344 <SystemClock_Config+0x124>)
 8008260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008266:	60bb      	str	r3, [r7, #8]
 8008268:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800826a:	4b37      	ldr	r3, [pc, #220]	; (8008348 <SystemClock_Config+0x128>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a36      	ldr	r2, [pc, #216]	; (8008348 <SystemClock_Config+0x128>)
 8008270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	4b34      	ldr	r3, [pc, #208]	; (8008348 <SystemClock_Config+0x128>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800827e:	607b      	str	r3, [r7, #4]
 8008280:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8008282:	230a      	movs	r3, #10
 8008284:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008288:	2301      	movs	r3, #1
 800828a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = 7;
 800828e:	2307      	movs	r3, #7
 8008290:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008294:	2301      	movs	r3, #1
 8008296:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800829a:	2302      	movs	r3, #2
 800829c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80082a0:	2300      	movs	r3, #0
 80082a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80082a6:	2308      	movs	r3, #8
 80082a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80082ac:	23d8      	movs	r3, #216	; 0xd8
 80082ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80082b2:	2302      	movs	r3, #2
 80082b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80082b8:	2309      	movs	r3, #9
 80082ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80082be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f004 fdb6 	bl	800ce34 <HAL_RCC_OscConfig>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80082ce:	f000 fcd7 	bl	8008c80 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80082d2:	f004 fd5f 	bl	800cd94 <HAL_PWREx_EnableOverDrive>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80082dc:	f000 fcd0 	bl	8008c80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80082e0:	230f      	movs	r3, #15
 80082e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80082e6:	2302      	movs	r3, #2
 80082e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80082ec:	2300      	movs	r3, #0
 80082ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80082f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80082f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80082fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008302:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008306:	2107      	movs	r1, #7
 8008308:	4618      	mov	r0, r3
 800830a:	f005 f837 	bl	800d37c <HAL_RCC_ClockConfig>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8008314:	f000 fcb4 	bl	8008c80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_CLK48;
 8008318:	4b0c      	ldr	r3, [pc, #48]	; (800834c <SystemClock_Config+0x12c>)
 800831a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800831c:	2300      	movs	r3, #0
 800831e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8008320:	2300      	movs	r3, #0
 8008322:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008326:	f107 030c 	add.w	r3, r7, #12
 800832a:	4618      	mov	r0, r3
 800832c:	f005 f9f8 	bl	800d720 <HAL_RCCEx_PeriphCLKConfig>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8008336:	f000 fca3 	bl	8008c80 <Error_Handler>
  }
}
 800833a:	bf00      	nop
 800833c:	37d0      	adds	r7, #208	; 0xd0
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	40023800 	.word	0x40023800
 8008348:	40007000 	.word	0x40007000
 800834c:	00200040 	.word	0x00200040

08008350 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008356:	463b      	mov	r3, r7
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]
 800835c:	605a      	str	r2, [r3, #4]
 800835e:	609a      	str	r2, [r3, #8]
 8008360:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008362:	4b2a      	ldr	r3, [pc, #168]	; (800840c <MX_ADC1_Init+0xbc>)
 8008364:	4a2a      	ldr	r2, [pc, #168]	; (8008410 <MX_ADC1_Init+0xc0>)
 8008366:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008368:	4b28      	ldr	r3, [pc, #160]	; (800840c <MX_ADC1_Init+0xbc>)
 800836a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800836e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008370:	4b26      	ldr	r3, [pc, #152]	; (800840c <MX_ADC1_Init+0xbc>)
 8008372:	2200      	movs	r2, #0
 8008374:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008376:	4b25      	ldr	r3, [pc, #148]	; (800840c <MX_ADC1_Init+0xbc>)
 8008378:	2201      	movs	r2, #1
 800837a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800837c:	4b23      	ldr	r3, [pc, #140]	; (800840c <MX_ADC1_Init+0xbc>)
 800837e:	2200      	movs	r2, #0
 8008380:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008382:	4b22      	ldr	r3, [pc, #136]	; (800840c <MX_ADC1_Init+0xbc>)
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800838a:	4b20      	ldr	r3, [pc, #128]	; (800840c <MX_ADC1_Init+0xbc>)
 800838c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008390:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8008392:	4b1e      	ldr	r3, [pc, #120]	; (800840c <MX_ADC1_Init+0xbc>)
 8008394:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8008398:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800839a:	4b1c      	ldr	r3, [pc, #112]	; (800840c <MX_ADC1_Init+0xbc>)
 800839c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80083a2:	4b1a      	ldr	r3, [pc, #104]	; (800840c <MX_ADC1_Init+0xbc>)
 80083a4:	2202      	movs	r2, #2
 80083a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80083a8:	4b18      	ldr	r3, [pc, #96]	; (800840c <MX_ADC1_Init+0xbc>)
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80083b0:	4b16      	ldr	r3, [pc, #88]	; (800840c <MX_ADC1_Init+0xbc>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80083b6:	4815      	ldr	r0, [pc, #84]	; (800840c <MX_ADC1_Init+0xbc>)
 80083b8:	f003 f80a 	bl	800b3d0 <HAL_ADC_Init>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80083c2:	f000 fc5d 	bl	8008c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80083c6:	230c      	movs	r3, #12
 80083c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80083ca:	2301      	movs	r3, #1
 80083cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80083ce:	2300      	movs	r3, #0
 80083d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80083d2:	463b      	mov	r3, r7
 80083d4:	4619      	mov	r1, r3
 80083d6:	480d      	ldr	r0, [pc, #52]	; (800840c <MX_ADC1_Init+0xbc>)
 80083d8:	f003 f936 	bl	800b648 <HAL_ADC_ConfigChannel>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80083e2:	f000 fc4d 	bl	8008c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80083e6:	230d      	movs	r3, #13
 80083e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80083ea:	2302      	movs	r3, #2
 80083ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80083ee:	463b      	mov	r3, r7
 80083f0:	4619      	mov	r1, r3
 80083f2:	4806      	ldr	r0, [pc, #24]	; (800840c <MX_ADC1_Init+0xbc>)
 80083f4:	f003 f928 	bl	800b648 <HAL_ADC_ConfigChannel>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80083fe:	f000 fc3f 	bl	8008c80 <Error_Handler>
  */
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008402:	bf00      	nop
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	200249b8 	.word	0x200249b8
 8008410:	40012000 	.word	0x40012000

08008414 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8008418:	4b12      	ldr	r3, [pc, #72]	; (8008464 <MX_CRC_Init+0x50>)
 800841a:	4a13      	ldr	r2, [pc, #76]	; (8008468 <MX_CRC_Init+0x54>)
 800841c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800841e:	4b11      	ldr	r3, [pc, #68]	; (8008464 <MX_CRC_Init+0x50>)
 8008420:	2201      	movs	r2, #1
 8008422:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8008424:	4b0f      	ldr	r3, [pc, #60]	; (8008464 <MX_CRC_Init+0x50>)
 8008426:	2201      	movs	r2, #1
 8008428:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = CRC_POLY;
 800842a:	4b0e      	ldr	r3, [pc, #56]	; (8008464 <MX_CRC_Init+0x50>)
 800842c:	f24a 0201 	movw	r2, #40961	; 0xa001
 8008430:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8008432:	4b0c      	ldr	r3, [pc, #48]	; (8008464 <MX_CRC_Init+0x50>)
 8008434:	2208      	movs	r2, #8
 8008436:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8008438:	4b0a      	ldr	r3, [pc, #40]	; (8008464 <MX_CRC_Init+0x50>)
 800843a:	2200      	movs	r2, #0
 800843c:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800843e:	4b09      	ldr	r3, [pc, #36]	; (8008464 <MX_CRC_Init+0x50>)
 8008440:	2220      	movs	r2, #32
 8008442:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8008444:	4b07      	ldr	r3, [pc, #28]	; (8008464 <MX_CRC_Init+0x50>)
 8008446:	2280      	movs	r2, #128	; 0x80
 8008448:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800844a:	4b06      	ldr	r3, [pc, #24]	; (8008464 <MX_CRC_Init+0x50>)
 800844c:	2201      	movs	r2, #1
 800844e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008450:	4804      	ldr	r0, [pc, #16]	; (8008464 <MX_CRC_Init+0x50>)
 8008452:	f003 fcd1 	bl	800bdf8 <HAL_CRC_Init>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d001      	beq.n	8008460 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 800845c:	f000 fc10 	bl	8008c80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8008460:	bf00      	nop
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20024894 	.word	0x20024894
 8008468:	40023000 	.word	0x40023000

0800846c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8008470:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <MX_IWDG_Init+0x34>)
 8008472:	4a0c      	ldr	r2, [pc, #48]	; (80084a4 <MX_IWDG_Init+0x38>)
 8008474:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8008476:	4b0a      	ldr	r3, [pc, #40]	; (80084a0 <MX_IWDG_Init+0x34>)
 8008478:	2206      	movs	r2, #6
 800847a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 256;
 800847c:	4b08      	ldr	r3, [pc, #32]	; (80084a0 <MX_IWDG_Init+0x34>)
 800847e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008482:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 256;
 8008484:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <MX_IWDG_Init+0x34>)
 8008486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800848a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800848c:	4804      	ldr	r0, [pc, #16]	; (80084a0 <MX_IWDG_Init+0x34>)
 800848e:	f004 fc2b 	bl	800cce8 <HAL_IWDG_Init>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8008498:	f000 fbf2 	bl	8008c80 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800849c:	bf00      	nop
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20024884 	.word	0x20024884
 80084a4:	40003000 	.word	0x40003000

080084a8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80084ac:	4b06      	ldr	r3, [pc, #24]	; (80084c8 <MX_RNG_Init+0x20>)
 80084ae:	4a07      	ldr	r2, [pc, #28]	; (80084cc <MX_RNG_Init+0x24>)
 80084b0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80084b2:	4805      	ldr	r0, [pc, #20]	; (80084c8 <MX_RNG_Init+0x20>)
 80084b4:	f005 fc7c 	bl	800ddb0 <HAL_RNG_Init>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80084be:	f000 fbdf 	bl	8008c80 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80084c2:	bf00      	nop
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	20024b40 	.word	0x20024b40
 80084cc:	50060800 	.word	0x50060800

080084d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80084d4:	4b1b      	ldr	r3, [pc, #108]	; (8008544 <MX_SPI2_Init+0x74>)
 80084d6:	4a1c      	ldr	r2, [pc, #112]	; (8008548 <MX_SPI2_Init+0x78>)
 80084d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80084da:	4b1a      	ldr	r3, [pc, #104]	; (8008544 <MX_SPI2_Init+0x74>)
 80084dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80084e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80084e2:	4b18      	ldr	r3, [pc, #96]	; (8008544 <MX_SPI2_Init+0x74>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80084e8:	4b16      	ldr	r3, [pc, #88]	; (8008544 <MX_SPI2_Init+0x74>)
 80084ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80084ee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80084f0:	4b14      	ldr	r3, [pc, #80]	; (8008544 <MX_SPI2_Init+0x74>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80084f6:	4b13      	ldr	r3, [pc, #76]	; (8008544 <MX_SPI2_Init+0x74>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80084fc:	4b11      	ldr	r3, [pc, #68]	; (8008544 <MX_SPI2_Init+0x74>)
 80084fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008502:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008504:	4b0f      	ldr	r3, [pc, #60]	; (8008544 <MX_SPI2_Init+0x74>)
 8008506:	2200      	movs	r2, #0
 8008508:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800850a:	4b0e      	ldr	r3, [pc, #56]	; (8008544 <MX_SPI2_Init+0x74>)
 800850c:	2200      	movs	r2, #0
 800850e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008510:	4b0c      	ldr	r3, [pc, #48]	; (8008544 <MX_SPI2_Init+0x74>)
 8008512:	2200      	movs	r2, #0
 8008514:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008516:	4b0b      	ldr	r3, [pc, #44]	; (8008544 <MX_SPI2_Init+0x74>)
 8008518:	2200      	movs	r2, #0
 800851a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800851c:	4b09      	ldr	r3, [pc, #36]	; (8008544 <MX_SPI2_Init+0x74>)
 800851e:	2207      	movs	r2, #7
 8008520:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008522:	4b08      	ldr	r3, [pc, #32]	; (8008544 <MX_SPI2_Init+0x74>)
 8008524:	2200      	movs	r2, #0
 8008526:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008528:	4b06      	ldr	r3, [pc, #24]	; (8008544 <MX_SPI2_Init+0x74>)
 800852a:	2208      	movs	r2, #8
 800852c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800852e:	4805      	ldr	r0, [pc, #20]	; (8008544 <MX_SPI2_Init+0x74>)
 8008530:	f005 fc68 	bl	800de04 <HAL_SPI_Init>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800853a:	f000 fba1 	bl	8008c80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800853e:	bf00      	nop
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20024740 	.word	0x20024740
 8008548:	40003800 	.word	0x40003800

0800854c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b08a      	sub	sp, #40	; 0x28
 8008550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008552:	f107 031c 	add.w	r3, r7, #28
 8008556:	2200      	movs	r2, #0
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	605a      	str	r2, [r3, #4]
 800855c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800855e:	463b      	mov	r3, r7
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	605a      	str	r2, [r3, #4]
 8008566:	609a      	str	r2, [r3, #8]
 8008568:	60da      	str	r2, [r3, #12]
 800856a:	611a      	str	r2, [r3, #16]
 800856c:	615a      	str	r2, [r3, #20]
 800856e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008570:	4b2b      	ldr	r3, [pc, #172]	; (8008620 <MX_TIM3_Init+0xd4>)
 8008572:	4a2c      	ldr	r2, [pc, #176]	; (8008624 <MX_TIM3_Init+0xd8>)
 8008574:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 50 / 5120) - 1; //This is to set prescaler to 1 MHz
 8008576:	f005 f8ab 	bl	800d6d0 <HAL_RCC_GetPCLK1Freq>
 800857a:	4603      	mov	r3, r0
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	4a2a      	ldr	r2, [pc, #168]	; (8008628 <MX_TIM3_Init+0xdc>)
 8008580:	fba2 2303 	umull	r2, r3, r2, r3
 8008584:	0b9b      	lsrs	r3, r3, #14
 8008586:	3b01      	subs	r3, #1
 8008588:	4a25      	ldr	r2, [pc, #148]	; (8008620 <MX_TIM3_Init+0xd4>)
 800858a:	6053      	str	r3, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800858c:	4b24      	ldr	r3, [pc, #144]	; (8008620 <MX_TIM3_Init+0xd4>)
 800858e:	2200      	movs	r2, #0
 8008590:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5119;
 8008592:	4b23      	ldr	r3, [pc, #140]	; (8008620 <MX_TIM3_Init+0xd4>)
 8008594:	f241 32ff 	movw	r2, #5119	; 0x13ff
 8008598:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800859a:	4b21      	ldr	r3, [pc, #132]	; (8008620 <MX_TIM3_Init+0xd4>)
 800859c:	2200      	movs	r2, #0
 800859e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085a0:	4b1f      	ldr	r3, [pc, #124]	; (8008620 <MX_TIM3_Init+0xd4>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80085a6:	481e      	ldr	r0, [pc, #120]	; (8008620 <MX_TIM3_Init+0xd4>)
 80085a8:	f007 f8d0 	bl	800f74c <HAL_TIM_PWM_Init>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80085b2:	f000 fb65 	bl	8008c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80085b6:	2300      	movs	r3, #0
 80085b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80085ba:	2300      	movs	r3, #0
 80085bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80085be:	f107 031c 	add.w	r3, r7, #28
 80085c2:	4619      	mov	r1, r3
 80085c4:	4816      	ldr	r0, [pc, #88]	; (8008620 <MX_TIM3_Init+0xd4>)
 80085c6:	f008 f813 	bl	80105f0 <HAL_TIMEx_MasterConfigSynchronization>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80085d0:	f000 fb56 	bl	8008c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80085d4:	2360      	movs	r3, #96	; 0x60
 80085d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 256;
 80085d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80085de:	2300      	movs	r3, #0
 80085e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80085e2:	2300      	movs	r3, #0
 80085e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80085e6:	463b      	mov	r3, r7
 80085e8:	2208      	movs	r2, #8
 80085ea:	4619      	mov	r1, r3
 80085ec:	480c      	ldr	r0, [pc, #48]	; (8008620 <MX_TIM3_Init+0xd4>)
 80085ee:	f007 fa3d 	bl	800fa6c <HAL_TIM_PWM_ConfigChannel>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80085f8:	f000 fb42 	bl	8008c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80085fc:	463b      	mov	r3, r7
 80085fe:	220c      	movs	r2, #12
 8008600:	4619      	mov	r1, r3
 8008602:	4807      	ldr	r0, [pc, #28]	; (8008620 <MX_TIM3_Init+0xd4>)
 8008604:	f007 fa32 	bl	800fa6c <HAL_TIM_PWM_ConfigChannel>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800860e:	f000 fb37 	bl	8008c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008612:	4803      	ldr	r0, [pc, #12]	; (8008620 <MX_TIM3_Init+0xd4>)
 8008614:	f001 fa76 	bl	8009b04 <HAL_TIM_MspPostInit>

}
 8008618:	bf00      	nop
 800861a:	3728      	adds	r7, #40	; 0x28
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	20024918 	.word	0x20024918
 8008624:	40000400 	.word	0x40000400
 8008628:	10624dd3 	.word	0x10624dd3

0800862c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008632:	463b      	mov	r3, r7
 8008634:	2200      	movs	r2, #0
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	605a      	str	r2, [r3, #4]
 800863a:	609a      	str	r2, [r3, #8]
 800863c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800863e:	4b19      	ldr	r3, [pc, #100]	; (80086a4 <MX_TIM4_Init+0x78>)
 8008640:	4a19      	ldr	r2, [pc, #100]	; (80086a8 <MX_TIM4_Init+0x7c>)
 8008642:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) - 1; //This is to set prescaler to 1 MHz
 8008644:	f005 f844 	bl	800d6d0 <HAL_RCC_GetPCLK1Freq>
 8008648:	4603      	mov	r3, r0
 800864a:	005b      	lsls	r3, r3, #1
 800864c:	4a17      	ldr	r2, [pc, #92]	; (80086ac <MX_TIM4_Init+0x80>)
 800864e:	fba2 2303 	umull	r2, r3, r2, r3
 8008652:	0c9b      	lsrs	r3, r3, #18
 8008654:	3b01      	subs	r3, #1
 8008656:	4a13      	ldr	r2, [pc, #76]	; (80086a4 <MX_TIM4_Init+0x78>)
 8008658:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800865a:	4b12      	ldr	r3, [pc, #72]	; (80086a4 <MX_TIM4_Init+0x78>)
 800865c:	2200      	movs	r2, #0
 800865e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 14;
 8008660:	4b10      	ldr	r3, [pc, #64]	; (80086a4 <MX_TIM4_Init+0x78>)
 8008662:	220e      	movs	r2, #14
 8008664:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008666:	4b0f      	ldr	r3, [pc, #60]	; (80086a4 <MX_TIM4_Init+0x78>)
 8008668:	2200      	movs	r2, #0
 800866a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800866c:	4b0d      	ldr	r3, [pc, #52]	; (80086a4 <MX_TIM4_Init+0x78>)
 800866e:	2200      	movs	r2, #0
 8008670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008672:	480c      	ldr	r0, [pc, #48]	; (80086a4 <MX_TIM4_Init+0x78>)
 8008674:	f006 ffeb 	bl	800f64e <HAL_TIM_Base_Init>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800867e:	f000 faff 	bl	8008c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008686:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008688:	463b      	mov	r3, r7
 800868a:	4619      	mov	r1, r3
 800868c:	4805      	ldr	r0, [pc, #20]	; (80086a4 <MX_TIM4_Init+0x78>)
 800868e:	f007 fb05 	bl	800fc9c <HAL_TIM_ConfigClockSource>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d001      	beq.n	800869c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8008698:	f000 faf2 	bl	8008c80 <Error_Handler>
  }

}
 800869c:	bf00      	nop
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	200247e4 	.word	0x200247e4
 80086a8:	40000800 	.word	0x40000800
 80086ac:	431bde83 	.word	0x431bde83

080086b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80086b6:	1d3b      	adds	r3, r7, #4
 80086b8:	2200      	movs	r2, #0
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	605a      	str	r2, [r3, #4]
 80086be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80086c0:	4b1c      	ldr	r3, [pc, #112]	; (8008734 <MX_TIM7_Init+0x84>)
 80086c2:	4a1d      	ldr	r2, [pc, #116]	; (8008738 <MX_TIM7_Init+0x88>)
 80086c4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80086c6:	4b1b      	ldr	r3, [pc, #108]	; (8008734 <MX_TIM7_Init+0x84>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80086cc:	4b19      	ldr	r3, [pc, #100]	; (8008734 <MX_TIM7_Init+0x84>)
 80086ce:	2200      	movs	r2, #0
 80086d0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) / 2 - 1; //This is to set period to 2 MHz;
 80086d2:	f004 fffd 	bl	800d6d0 <HAL_RCC_GetPCLK1Freq>
 80086d6:	4603      	mov	r3, r0
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	4a18      	ldr	r2, [pc, #96]	; (800873c <MX_TIM7_Init+0x8c>)
 80086dc:	fba2 2303 	umull	r2, r3, r2, r3
 80086e0:	0cdb      	lsrs	r3, r3, #19
 80086e2:	3b01      	subs	r3, #1
 80086e4:	4a13      	ldr	r2, [pc, #76]	; (8008734 <MX_TIM7_Init+0x84>)
 80086e6:	60d3      	str	r3, [r2, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80086e8:	4b12      	ldr	r3, [pc, #72]	; (8008734 <MX_TIM7_Init+0x84>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80086ee:	4811      	ldr	r0, [pc, #68]	; (8008734 <MX_TIM7_Init+0x84>)
 80086f0:	f006 ffad 	bl	800f64e <HAL_TIM_Base_Init>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <MX_TIM7_Init+0x4e>
  {
    Error_Handler();
 80086fa:	f000 fac1 	bl	8008c80 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 80086fe:	2108      	movs	r1, #8
 8008700:	480c      	ldr	r0, [pc, #48]	; (8008734 <MX_TIM7_Init+0x84>)
 8008702:	f007 f84e 	bl	800f7a2 <HAL_TIM_OnePulse_Init>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <MX_TIM7_Init+0x60>
  {
    Error_Handler();
 800870c:	f000 fab8 	bl	8008c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008710:	2320      	movs	r3, #32
 8008712:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008714:	2300      	movs	r3, #0
 8008716:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8008718:	1d3b      	adds	r3, r7, #4
 800871a:	4619      	mov	r1, r3
 800871c:	4805      	ldr	r0, [pc, #20]	; (8008734 <MX_TIM7_Init+0x84>)
 800871e:	f007 ff67 	bl	80105f0 <HAL_TIMEx_MasterConfigSynchronization>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <MX_TIM7_Init+0x7c>
  {
    Error_Handler();
 8008728:	f000 faaa 	bl	8008c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800872c:	bf00      	nop
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	20024bb0 	.word	0x20024bb0
 8008738:	40001400 	.word	0x40001400
 800873c:	431bde83 	.word	0x431bde83

08008740 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b096      	sub	sp, #88	; 0x58
 8008744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008746:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800874a:	2200      	movs	r2, #0
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	605a      	str	r2, [r3, #4]
 8008750:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008752:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]
 800875a:	605a      	str	r2, [r3, #4]
 800875c:	609a      	str	r2, [r3, #8]
 800875e:	60da      	str	r2, [r3, #12]
 8008760:	611a      	str	r2, [r3, #16]
 8008762:	615a      	str	r2, [r3, #20]
 8008764:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008766:	1d3b      	adds	r3, r7, #4
 8008768:	222c      	movs	r2, #44	; 0x2c
 800876a:	2100      	movs	r1, #0
 800876c:	4618      	mov	r0, r3
 800876e:	f009 f868 	bl	8011842 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008772:	4b3d      	ldr	r3, [pc, #244]	; (8008868 <MX_TIM8_Init+0x128>)
 8008774:	4a3d      	ldr	r2, [pc, #244]	; (800886c <MX_TIM8_Init+0x12c>)
 8008776:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = (HAL_RCC_GetPCLK2Freq() * 2 / 1000000) - 1; //This is to set prescaler to 1 MHz
 8008778:	f004 ffbe 	bl	800d6f8 <HAL_RCC_GetPCLK2Freq>
 800877c:	4603      	mov	r3, r0
 800877e:	005b      	lsls	r3, r3, #1
 8008780:	4a3b      	ldr	r2, [pc, #236]	; (8008870 <MX_TIM8_Init+0x130>)
 8008782:	fba2 2303 	umull	r2, r3, r2, r3
 8008786:	0c9b      	lsrs	r3, r3, #18
 8008788:	3b01      	subs	r3, #1
 800878a:	4a37      	ldr	r2, [pc, #220]	; (8008868 <MX_TIM8_Init+0x128>)
 800878c:	6053      	str	r3, [r2, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800878e:	4b36      	ldr	r3, [pc, #216]	; (8008868 <MX_TIM8_Init+0x128>)
 8008790:	2200      	movs	r2, #0
 8008792:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8008794:	4b34      	ldr	r3, [pc, #208]	; (8008868 <MX_TIM8_Init+0x128>)
 8008796:	2231      	movs	r2, #49	; 0x31
 8008798:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800879a:	4b33      	ldr	r3, [pc, #204]	; (8008868 <MX_TIM8_Init+0x128>)
 800879c:	2200      	movs	r2, #0
 800879e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80087a0:	4b31      	ldr	r3, [pc, #196]	; (8008868 <MX_TIM8_Init+0x128>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80087a6:	4b30      	ldr	r3, [pc, #192]	; (8008868 <MX_TIM8_Init+0x128>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80087ac:	482e      	ldr	r0, [pc, #184]	; (8008868 <MX_TIM8_Init+0x128>)
 80087ae:	f006 ffcd 	bl	800f74c <HAL_TIM_PWM_Init>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80087b8:	f000 fa62 	bl	8008c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80087bc:	2320      	movs	r3, #32
 80087be:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80087c0:	2300      	movs	r3, #0
 80087c2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80087c4:	2300      	movs	r3, #0
 80087c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80087c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80087cc:	4619      	mov	r1, r3
 80087ce:	4826      	ldr	r0, [pc, #152]	; (8008868 <MX_TIM8_Init+0x128>)
 80087d0:	f007 ff0e 	bl	80105f0 <HAL_TIMEx_MasterConfigSynchronization>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80087da:	f000 fa51 	bl	8008c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80087de:	2360      	movs	r3, #96	; 0x60
 80087e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1;
 80087e2:	2301      	movs	r3, #1
 80087e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80087e6:	2300      	movs	r3, #0
 80087e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80087ea:	2308      	movs	r3, #8
 80087ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80087ee:	2300      	movs	r3, #0
 80087f0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80087f2:	2300      	movs	r3, #0
 80087f4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80087f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80087fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008800:	2208      	movs	r2, #8
 8008802:	4619      	mov	r1, r3
 8008804:	4818      	ldr	r0, [pc, #96]	; (8008868 <MX_TIM8_Init+0x128>)
 8008806:	f007 f931 	bl	800fa6c <HAL_TIM_PWM_ConfigChannel>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d001      	beq.n	8008814 <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 8008810:	f000 fa36 	bl	8008c80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008814:	2300      	movs	r3, #0
 8008816:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008818:	2300      	movs	r3, #0
 800881a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800881c:	2300      	movs	r3, #0
 800881e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008820:	2300      	movs	r3, #0
 8008822:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008824:	2300      	movs	r3, #0
 8008826:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800882c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800882e:	2300      	movs	r3, #0
 8008830:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008832:	2300      	movs	r3, #0
 8008834:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008836:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800883a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800883c:	2300      	movs	r3, #0
 800883e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008840:	2300      	movs	r3, #0
 8008842:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008844:	1d3b      	adds	r3, r7, #4
 8008846:	4619      	mov	r1, r3
 8008848:	4807      	ldr	r0, [pc, #28]	; (8008868 <MX_TIM8_Init+0x128>)
 800884a:	f007 ff5f 	bl	801070c <HAL_TIMEx_ConfigBreakDeadTime>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8008854:	f000 fa14 	bl	8008c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8008858:	4803      	ldr	r0, [pc, #12]	; (8008868 <MX_TIM8_Init+0x128>)
 800885a:	f001 f953 	bl	8009b04 <HAL_TIM_MspPostInit>

}
 800885e:	bf00      	nop
 8008860:	3758      	adds	r7, #88	; 0x58
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	200247a4 	.word	0x200247a4
 800886c:	40010400 	.word	0x40010400
 8008870:	431bde83 	.word	0x431bde83

08008874 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008878:	4b17      	ldr	r3, [pc, #92]	; (80088d8 <MX_USART1_UART_Init+0x64>)
 800887a:	4a18      	ldr	r2, [pc, #96]	; (80088dc <MX_USART1_UART_Init+0x68>)
 800887c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3375000;
 800887e:	4b16      	ldr	r3, [pc, #88]	; (80088d8 <MX_USART1_UART_Init+0x64>)
 8008880:	4a17      	ldr	r2, [pc, #92]	; (80088e0 <MX_USART1_UART_Init+0x6c>)
 8008882:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008884:	4b14      	ldr	r3, [pc, #80]	; (80088d8 <MX_USART1_UART_Init+0x64>)
 8008886:	2200      	movs	r2, #0
 8008888:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800888a:	4b13      	ldr	r3, [pc, #76]	; (80088d8 <MX_USART1_UART_Init+0x64>)
 800888c:	2200      	movs	r2, #0
 800888e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008890:	4b11      	ldr	r3, [pc, #68]	; (80088d8 <MX_USART1_UART_Init+0x64>)
 8008892:	2200      	movs	r2, #0
 8008894:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008896:	4b10      	ldr	r3, [pc, #64]	; (80088d8 <MX_USART1_UART_Init+0x64>)
 8008898:	220c      	movs	r2, #12
 800889a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800889c:	4b0e      	ldr	r3, [pc, #56]	; (80088d8 <MX_USART1_UART_Init+0x64>)
 800889e:	2200      	movs	r2, #0
 80088a0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80088a2:	4b0d      	ldr	r3, [pc, #52]	; (80088d8 <MX_USART1_UART_Init+0x64>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80088a8:	4b0b      	ldr	r3, [pc, #44]	; (80088d8 <MX_USART1_UART_Init+0x64>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 80088ae:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <MX_USART1_UART_Init+0x64>)
 80088b0:	2240      	movs	r2, #64	; 0x40
 80088b2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 80088b4:	4b08      	ldr	r3, [pc, #32]	; (80088d8 <MX_USART1_UART_Init+0x64>)
 80088b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80088ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME;
 80088bc:	4b06      	ldr	r3, [pc, #24]	; (80088d8 <MX_USART1_UART_Init+0x64>)
 80088be:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80088c2:	645a      	str	r2, [r3, #68]	; 0x44
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80088c4:	4804      	ldr	r0, [pc, #16]	; (80088d8 <MX_USART1_UART_Init+0x64>)
 80088c6:	f007 ffe2 	bl	801088e <HAL_UART_Init>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d001      	beq.n	80088d4 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 80088d0:	f000 f9d6 	bl	8008c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80088d4:	bf00      	nop
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	20024a60 	.word	0x20024a60
 80088dc:	40011000 	.word	0x40011000
 80088e0:	00337f98 	.word	0x00337f98

080088e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80088ea:	4b26      	ldr	r3, [pc, #152]	; (8008984 <MX_DMA_Init+0xa0>)
 80088ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ee:	4a25      	ldr	r2, [pc, #148]	; (8008984 <MX_DMA_Init+0xa0>)
 80088f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80088f4:	6313      	str	r3, [r2, #48]	; 0x30
 80088f6:	4b23      	ldr	r3, [pc, #140]	; (8008984 <MX_DMA_Init+0xa0>)
 80088f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088fe:	607b      	str	r3, [r7, #4]
 8008900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008902:	4b20      	ldr	r3, [pc, #128]	; (8008984 <MX_DMA_Init+0xa0>)
 8008904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008906:	4a1f      	ldr	r2, [pc, #124]	; (8008984 <MX_DMA_Init+0xa0>)
 8008908:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800890c:	6313      	str	r3, [r2, #48]	; 0x30
 800890e:	4b1d      	ldr	r3, [pc, #116]	; (8008984 <MX_DMA_Init+0xa0>)
 8008910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008916:	603b      	str	r3, [r7, #0]
 8008918:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0); //TIM7_UP
 800891a:	2200      	movs	r2, #0
 800891c:	2105      	movs	r1, #5
 800891e:	200d      	movs	r0, #13
 8008920:	f003 fa33 	bl	800bd8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8008924:	200d      	movs	r0, #13
 8008926:	f003 fa4c 	bl	800bdc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 15, 0); //SPI2_RX
 800892a:	2200      	movs	r2, #0
 800892c:	210f      	movs	r1, #15
 800892e:	200e      	movs	r0, #14
 8008930:	f003 fa2b 	bl	800bd8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8008934:	200e      	movs	r0, #14
 8008936:	f003 fa44 	bl	800bdc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 15, 0); //SPI2_TX
 800893a:	2200      	movs	r2, #0
 800893c:	210f      	movs	r1, #15
 800893e:	200f      	movs	r0, #15
 8008940:	f003 fa23 	bl	800bd8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8008944:	200f      	movs	r0, #15
 8008946:	f003 fa3c 	bl	800bdc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 0); //ADC1
 800894a:	2200      	movs	r2, #0
 800894c:	210a      	movs	r1, #10
 800894e:	2038      	movs	r0, #56	; 0x38
 8008950:	f003 fa1b 	bl	800bd8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8008954:	2038      	movs	r0, #56	; 0x38
 8008956:	f003 fa34 	bl	800bdc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 8, 0); //USART1_RX
 800895a:	2200      	movs	r2, #0
 800895c:	2108      	movs	r1, #8
 800895e:	203a      	movs	r0, #58	; 0x3a
 8008960:	f003 fa13 	bl	800bd8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8008964:	203a      	movs	r0, #58	; 0x3a
 8008966:	f003 fa2c 	bl	800bdc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 8, 0); //USART1_TX
 800896a:	2200      	movs	r2, #0
 800896c:	2108      	movs	r1, #8
 800896e:	2046      	movs	r0, #70	; 0x46
 8008970:	f003 fa0b 	bl	800bd8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8008974:	2046      	movs	r0, #70	; 0x46
 8008976:	f003 fa24 	bl	800bdc2 <HAL_NVIC_EnableIRQ>

}
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	40023800 	.word	0x40023800

08008988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08a      	sub	sp, #40	; 0x28
 800898c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800898e:	f107 0314 	add.w	r3, r7, #20
 8008992:	2200      	movs	r2, #0
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	605a      	str	r2, [r3, #4]
 8008998:	609a      	str	r2, [r3, #8]
 800899a:	60da      	str	r2, [r3, #12]
 800899c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800899e:	4baf      	ldr	r3, [pc, #700]	; (8008c5c <MX_GPIO_Init+0x2d4>)
 80089a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a2:	4aae      	ldr	r2, [pc, #696]	; (8008c5c <MX_GPIO_Init+0x2d4>)
 80089a4:	f043 0304 	orr.w	r3, r3, #4
 80089a8:	6313      	str	r3, [r2, #48]	; 0x30
 80089aa:	4bac      	ldr	r3, [pc, #688]	; (8008c5c <MX_GPIO_Init+0x2d4>)
 80089ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ae:	f003 0304 	and.w	r3, r3, #4
 80089b2:	613b      	str	r3, [r7, #16]
 80089b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80089b6:	4ba9      	ldr	r3, [pc, #676]	; (8008c5c <MX_GPIO_Init+0x2d4>)
 80089b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ba:	4aa8      	ldr	r2, [pc, #672]	; (8008c5c <MX_GPIO_Init+0x2d4>)
 80089bc:	f043 0301 	orr.w	r3, r3, #1
 80089c0:	6313      	str	r3, [r2, #48]	; 0x30
 80089c2:	4ba6      	ldr	r3, [pc, #664]	; (8008c5c <MX_GPIO_Init+0x2d4>)
 80089c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80089ce:	4ba3      	ldr	r3, [pc, #652]	; (8008c5c <MX_GPIO_Init+0x2d4>)
 80089d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d2:	4aa2      	ldr	r2, [pc, #648]	; (8008c5c <MX_GPIO_Init+0x2d4>)
 80089d4:	f043 0302 	orr.w	r3, r3, #2
 80089d8:	6313      	str	r3, [r2, #48]	; 0x30
 80089da:	4ba0      	ldr	r3, [pc, #640]	; (8008c5c <MX_GPIO_Init+0x2d4>)
 80089dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	60bb      	str	r3, [r7, #8]
 80089e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80089e6:	4b9d      	ldr	r3, [pc, #628]	; (8008c5c <MX_GPIO_Init+0x2d4>)
 80089e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ea:	4a9c      	ldr	r2, [pc, #624]	; (8008c5c <MX_GPIO_Init+0x2d4>)
 80089ec:	f043 0308 	orr.w	r3, r3, #8
 80089f0:	6313      	str	r3, [r2, #48]	; 0x30
 80089f2:	4b9a      	ldr	r3, [pc, #616]	; (8008c5c <MX_GPIO_Init+0x2d4>)
 80089f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f6:	f003 0308 	and.w	r3, r3, #8
 80089fa:	607b      	str	r3, [r7, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80089fe:	4b97      	ldr	r3, [pc, #604]	; (8008c5c <MX_GPIO_Init+0x2d4>)
 8008a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a02:	4a96      	ldr	r2, [pc, #600]	; (8008c5c <MX_GPIO_Init+0x2d4>)
 8008a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a08:	6313      	str	r3, [r2, #48]	; 0x30
 8008a0a:	4b94      	ldr	r3, [pc, #592]	; (8008c5c <MX_GPIO_Init+0x2d4>)
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a12:	603b      	str	r3, [r7, #0]
 8008a14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VDD3V3EN_Pin|SPI2_WP_Pin|RELAY_IGN_Pin, GPIO_PIN_RESET);
 8008a16:	2200      	movs	r2, #0
 8008a18:	f240 4141 	movw	r1, #1089	; 0x441
 8008a1c:	4890      	ldr	r0, [pc, #576]	; (8008c60 <MX_GPIO_Init+0x2d8>)
 8008a1e:	f004 f931 	bl	800cc84 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, IGN_14_Pin|IGN_23_Pin, GPIO_PIN_SET);
 8008a22:	2201      	movs	r2, #1
 8008a24:	21c0      	movs	r1, #192	; 0xc0
 8008a26:	488f      	ldr	r0, [pc, #572]	; (8008c64 <MX_GPIO_Init+0x2dc>)
 8008a28:	f004 f92c 	bl	800cc84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_nCE_Pin|LED_CHECK_Pin, GPIO_PIN_SET);
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	2190      	movs	r1, #144	; 0x90
 8008a30:	488b      	ldr	r0, [pc, #556]	; (8008c60 <MX_GPIO_Init+0x2d8>)
 8008a32:	f004 f927 	bl	800cc84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8008a36:	2201      	movs	r2, #1
 8008a38:	2101      	movs	r1, #1
 8008a3a:	488a      	ldr	r0, [pc, #552]	; (8008c64 <MX_GPIO_Init+0x2dc>)
 8008a3c:	f004 f922 	bl	800cc84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_FORMAT_Pin|ADC_BPO_Pin|PROPANE_OUT_Pin
 8008a40:	2200      	movs	r2, #0
 8008a42:	f240 7104 	movw	r1, #1796	; 0x704
 8008a46:	4887      	ldr	r0, [pc, #540]	; (8008c64 <MX_GPIO_Init+0x2dc>)
 8008a48:	f004 f91c 	bl	800cc84 <HAL_GPIO_WritePin>
                          |PETROL_OUT_Pin, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin, GPIO_PIN_SET);
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008a52:	4884      	ldr	r0, [pc, #528]	; (8008c64 <MX_GPIO_Init+0x2dc>)
 8008a54:	f004 f916 	bl	800cc84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_START_GPIO_Port, RELAY_START_Pin, GPIO_PIN_RESET);
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a5e:	4882      	ldr	r0, [pc, #520]	; (8008c68 <MX_GPIO_Init+0x2e0>)
 8008a60:	f004 f910 	bl	800cc84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TACHOMETER_GPIO_Port, TACHOMETER_Pin, GPIO_PIN_RESET);
 8008a64:	2200      	movs	r2, #0
 8008a66:	2101      	movs	r1, #1
 8008a68:	4880      	ldr	r0, [pc, #512]	; (8008c6c <MX_GPIO_Init+0x2e4>)
 8008a6a:	f004 f90b 	bl	800cc84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ECON_GPIO_Port, ECON_Pin, GPIO_PIN_RESET);
 8008a6e:	2200      	movs	r2, #0
 8008a70:	2104      	movs	r1, #4
 8008a72:	487f      	ldr	r0, [pc, #508]	; (8008c70 <MX_GPIO_Init+0x2e8>)
 8008a74:	f004 f906 	bl	800cc84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SENS_CSPS_Pin */
  GPIO_InitStruct.Pin = SENS_CSPS_Pin;
 8008a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8008a7e:	4b7d      	ldr	r3, [pc, #500]	; (8008c74 <MX_GPIO_Init+0x2ec>)
 8008a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008a82:	2302      	movs	r3, #2
 8008a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENS_CSPS_GPIO_Port, &GPIO_InitStruct);
 8008a86:	f107 0314 	add.w	r3, r7, #20
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4874      	ldr	r0, [pc, #464]	; (8008c60 <MX_GPIO_Init+0x2d8>)
 8008a8e:	f003 ff47 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_HALL_Pin */
  GPIO_InitStruct.Pin = SENS_HALL_Pin;
 8008a92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008a98:	4b77      	ldr	r3, [pc, #476]	; (8008c78 <MX_GPIO_Init+0x2f0>)
 8008a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008aa0:	f107 0314 	add.w	r3, r7, #20
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	486e      	ldr	r0, [pc, #440]	; (8008c60 <MX_GPIO_Init+0x2d8>)
 8008aa8:	f003 ff3a 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_ACC_Pin */
  GPIO_InitStruct.Pin = SENS_ACC_Pin;
 8008aac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008aba:	f107 0314 	add.w	r3, r7, #20
 8008abe:	4619      	mov	r1, r3
 8008ac0:	4867      	ldr	r0, [pc, #412]	; (8008c60 <MX_GPIO_Init+0x2d8>)
 8008ac2:	f003 ff2d 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pins : VDD3V3EN_Pin ADC_nCE_Pin LED_CHECK_Pin RELAY_IGN_Pin */
  GPIO_InitStruct.Pin = VDD3V3EN_Pin|ADC_nCE_Pin|LED_CHECK_Pin|RELAY_IGN_Pin;
 8008ac6:	f240 4391 	movw	r3, #1169	; 0x491
 8008aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008acc:	2301      	movs	r3, #1
 8008ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ad8:	f107 0314 	add.w	r3, r7, #20
 8008adc:	4619      	mov	r1, r3
 8008ade:	4860      	ldr	r0, [pc, #384]	; (8008c60 <MX_GPIO_Init+0x2d8>)
 8008ae0:	f003 ff1e 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC0_Pin ADC1_Pin ADC2_Pin ADC3_Pin
                           ADC4_Pin ADC5_Pin ADC6_Pin ADC7_Pin */
  GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin
 8008ae4:	23ff      	movs	r3, #255	; 0xff
 8008ae6:	617b      	str	r3, [r7, #20]
                          |ADC4_Pin|ADC5_Pin|ADC6_Pin|ADC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008aec:	2302      	movs	r3, #2
 8008aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008af0:	f107 0314 	add.w	r3, r7, #20
 8008af4:	4619      	mov	r1, r3
 8008af6:	485c      	ldr	r0, [pc, #368]	; (8008c68 <MX_GPIO_Init+0x2e0>)
 8008af8:	f003 ff12 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_nCS_Pin ADC_FORMAT_Pin ADC_BPO_Pin PROPANE_OUT_Pin
                           PETROL_OUT_Pin */
  GPIO_InitStruct.Pin = ADC_nCS_Pin|ADC_FORMAT_Pin|ADC_BPO_Pin|PROPANE_OUT_Pin
 8008afc:	f240 7305 	movw	r3, #1797	; 0x705
 8008b00:	617b      	str	r3, [r7, #20]
                          |PETROL_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b02:	2301      	movs	r3, #1
 8008b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b0e:	f107 0314 	add.w	r3, r7, #20
 8008b12:	4619      	mov	r1, r3
 8008b14:	4853      	ldr	r0, [pc, #332]	; (8008c64 <MX_GPIO_Init+0x2dc>)
 8008b16:	f003 ff03 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_STATUS_Pin */
  GPIO_InitStruct.Pin = ADC_STATUS_Pin;
 8008b1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008b20:	4b56      	ldr	r3, [pc, #344]	; (8008c7c <MX_GPIO_Init+0x2f4>)
 8008b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008b24:	2302      	movs	r3, #2
 8008b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADC_STATUS_GPIO_Port, &GPIO_InitStruct);
 8008b28:	f107 0314 	add.w	r3, r7, #20
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	484d      	ldr	r0, [pc, #308]	; (8008c64 <MX_GPIO_Init+0x2dc>)
 8008b30:	f003 fef6 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8008b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b42:	2303      	movs	r3, #3
 8008b44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8008b46:	f107 0314 	add.w	r3, r7, #20
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4845      	ldr	r0, [pc, #276]	; (8008c64 <MX_GPIO_Init+0x2dc>)
 8008b4e:	f003 fee7 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 8008b52:	2340      	movs	r3, #64	; 0x40
 8008b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b56:	2301      	movs	r3, #1
 8008b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 8008b62:	f107 0314 	add.w	r3, r7, #20
 8008b66:	4619      	mov	r1, r3
 8008b68:	483d      	ldr	r0, [pc, #244]	; (8008c60 <MX_GPIO_Init+0x2d8>)
 8008b6a:	f003 fed9 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pin : TACHOMETER_Pin */
  GPIO_InitStruct.Pin = TACHOMETER_Pin;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b72:	2301      	movs	r3, #1
 8008b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TACHOMETER_GPIO_Port, &GPIO_InitStruct);
 8008b7e:	f107 0314 	add.w	r3, r7, #20
 8008b82:	4619      	mov	r1, r3
 8008b84:	4839      	ldr	r0, [pc, #228]	; (8008c6c <MX_GPIO_Init+0x2e4>)
 8008b86:	f003 fecb 	bl	800c920 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008b96:	f107 0314 	add.w	r3, r7, #20
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4833      	ldr	r0, [pc, #204]	; (8008c6c <MX_GPIO_Init+0x2e4>)
 8008b9e:	f003 febf 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART1_COMM_Pin MCU_IGN_Pin */
  GPIO_InitStruct.Pin = USART1_COMM_Pin|MCU_IGN_Pin;
 8008ba2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008bac:	2301      	movs	r3, #1
 8008bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bb0:	f107 0314 	add.w	r3, r7, #20
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	482c      	ldr	r0, [pc, #176]	; (8008c68 <MX_GPIO_Init+0x2e0>)
 8008bb8:	f003 feb2 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_START_Pin */
  GPIO_InitStruct.Pin = RELAY_START_Pin;
 8008bbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY_START_GPIO_Port, &GPIO_InitStruct);
 8008bce:	f107 0314 	add.w	r3, r7, #20
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	4824      	ldr	r0, [pc, #144]	; (8008c68 <MX_GPIO_Init+0x2e0>)
 8008bd6:	f003 fea3 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENS_PARK_Pin SENS_GEAR_Pin */
  GPIO_InitStruct.Pin = SENS_PARK_Pin|SENS_GEAR_Pin;
 8008bda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008be0:	2300      	movs	r3, #0
 8008be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008be4:	2300      	movs	r3, #0
 8008be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008be8:	f107 0314 	add.w	r3, r7, #20
 8008bec:	4619      	mov	r1, r3
 8008bee:	481c      	ldr	r0, [pc, #112]	; (8008c60 <MX_GPIO_Init+0x2d8>)
 8008bf0:	f003 fe96 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECON_Pin */
  GPIO_InitStruct.Pin = ECON_Pin;
 8008bf4:	2304      	movs	r3, #4
 8008bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c00:	2300      	movs	r3, #0
 8008c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ECON_GPIO_Port, &GPIO_InitStruct);
 8008c04:	f107 0314 	add.w	r3, r7, #20
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4819      	ldr	r0, [pc, #100]	; (8008c70 <MX_GPIO_Init+0x2e8>)
 8008c0c:	f003 fe88 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROPANE_IN_Pin PETROL_IN_Pin */
  GPIO_InitStruct.Pin = PROPANE_IN_Pin|PETROL_IN_Pin;
 8008c10:	2330      	movs	r3, #48	; 0x30
 8008c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c14:	2300      	movs	r3, #0
 8008c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c1c:	f107 0314 	add.w	r3, r7, #20
 8008c20:	4619      	mov	r1, r3
 8008c22:	4810      	ldr	r0, [pc, #64]	; (8008c64 <MX_GPIO_Init+0x2dc>)
 8008c24:	f003 fe7c 	bl	800c920 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = IGN_23_Pin|IGN_14_Pin;
 8008c28:	23c0      	movs	r3, #192	; 0xc0
 8008c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c30:	2300      	movs	r3, #0
 8008c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c34:	2303      	movs	r3, #3
 8008c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c38:	f107 0314 	add.w	r3, r7, #20
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4809      	ldr	r0, [pc, #36]	; (8008c64 <MX_GPIO_Init+0x2dc>)
 8008c40:	f003 fe6e 	bl	800c920 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8008c44:	2200      	movs	r2, #0
 8008c46:	2102      	movs	r1, #2
 8008c48:	2028      	movs	r0, #40	; 0x28
 8008c4a:	f003 f89e 	bl	800bd8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008c4e:	2028      	movs	r0, #40	; 0x28
 8008c50:	f003 f8b7 	bl	800bdc2 <HAL_NVIC_EnableIRQ>

}
 8008c54:	bf00      	nop
 8008c56:	3728      	adds	r7, #40	; 0x28
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	40023800 	.word	0x40023800
 8008c60:	40020800 	.word	0x40020800
 8008c64:	40020400 	.word	0x40020400
 8008c68:	40020000 	.word	0x40020000
 8008c6c:	40021c00 	.word	0x40021c00
 8008c70:	40020c00 	.word	0x40020c00
 8008c74:	10310000 	.word	0x10310000
 8008c78:	10110000 	.word	0x10110000
 8008c7c:	10210000 	.word	0x10210000

08008c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008c80:	b480      	push	{r7}
 8008c82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008c84:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008c86:	e7fe      	b.n	8008c86 <Error_Handler+0x6>

08008c88 <map_init>:
#define REF_VOLTAGE 3.32f
#define RES_DIVIDER 1.467f


void map_init(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ADC_FORMAT_GPIO_Port, ADC_FORMAT_Pin, GPIO_PIN_RESET);
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	2104      	movs	r1, #4
 8008c90:	480c      	ldr	r0, [pc, #48]	; (8008cc4 <map_init+0x3c>)
 8008c92:	f003 fff7 	bl	800cc84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_BPO_GPIO_Port, ADC_BPO_Pin, GPIO_PIN_RESET);
 8008c96:	2200      	movs	r2, #0
 8008c98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008c9c:	4809      	ldr	r0, [pc, #36]	; (8008cc4 <map_init+0x3c>)
 8008c9e:	f003 fff1 	bl	800cc84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nCE_GPIO_Port, ADC_nCE_Pin, GPIO_PIN_RESET);
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	2110      	movs	r1, #16
 8008ca6:	4808      	ldr	r0, [pc, #32]	; (8008cc8 <map_init+0x40>)
 8008ca8:	f003 ffec 	bl	800cc84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8008cac:	2200      	movs	r2, #0
 8008cae:	2101      	movs	r1, #1
 8008cb0:	4804      	ldr	r0, [pc, #16]	; (8008cc4 <map_init+0x3c>)
 8008cb2:	f003 ffe7 	bl	800cc84 <HAL_GPIO_WritePin>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8008cb6:	2108      	movs	r1, #8
 8008cb8:	4804      	ldr	r0, [pc, #16]	; (8008ccc <map_init+0x44>)
 8008cba:	f007 fc69 	bl	8010590 <HAL_TIMEx_PWMN_Start>
}
 8008cbe:	bf00      	nop
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	40020400 	.word	0x40020400
 8008cc8:	40020800 	.word	0x40020800
 8008ccc:	200247a4 	.word	0x200247a4

08008cd0 <map_adc_read>:

inline void map_adc_read(void)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
  uint8_t portdata = GPIOA->IDR & 0xFF;
 8008cd6:	4b26      	ldr	r3, [pc, #152]	; (8008d70 <map_adc_read+0xa0>)
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	72fb      	strb	r3, [r7, #11]
  float voltage = portdata / 50.0f;
 8008cdc:	7afb      	ldrb	r3, [r7, #11]
 8008cde:	ee07 3a90 	vmov	s15, r3
 8008ce2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ce6:	eddf 6a23 	vldr	s13, [pc, #140]	; 8008d74 <map_adc_read+0xa4>
 8008cea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008cee:	edc7 7a01 	vstr	s15, [r7, #4]
  if(voltage < 0.3f) map_error = 1;
 8008cf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8008cf6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008d78 <map_adc_read+0xa8>
 8008cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d02:	d503      	bpl.n	8008d0c <map_adc_read+0x3c>
 8008d04:	4b1d      	ldr	r3, [pc, #116]	; (8008d7c <map_adc_read+0xac>)
 8008d06:	2201      	movs	r2, #1
 8008d08:	701a      	strb	r2, [r3, #0]
 8008d0a:	e002      	b.n	8008d12 <map_adc_read+0x42>
  else map_error = 0;
 8008d0c:	4b1b      	ldr	r3, [pc, #108]	; (8008d7c <map_adc_read+0xac>)
 8008d0e:	2200      	movs	r2, #0
 8008d10:	701a      	strb	r2, [r3, #0]
  float pressure = (voltage - 0.5f) * 25517.0f;
 8008d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8008d16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008d1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d1e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008d80 <map_adc_read+0xb0>
 8008d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d26:	edc7 7a03 	vstr	s15, [r7, #12]
  if(pressure < 0.0f)
 8008d2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8008d2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d36:	d502      	bpl.n	8008d3e <map_adc_read+0x6e>
    pressure = 0.0f;
 8008d38:	f04f 0300 	mov.w	r3, #0
 8008d3c:	60fb      	str	r3, [r7, #12]
  map_data = map_data * (1.0f - lowpass_koff) + pressure * lowpass_koff;
 8008d3e:	4b11      	ldr	r3, [pc, #68]	; (8008d84 <map_adc_read+0xb4>)
 8008d40:	edd3 7a00 	vldr	s15, [r3]
 8008d44:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008d88 <map_adc_read+0xb8>
 8008d48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008d4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008d50:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8008d8c <map_adc_read+0xbc>
 8008d54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d5c:	4b09      	ldr	r3, [pc, #36]	; (8008d84 <map_adc_read+0xb4>)
 8008d5e:	edc3 7a00 	vstr	s15, [r3]
}
 8008d62:	bf00      	nop
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	40020000 	.word	0x40020000
 8008d74:	42480000 	.word	0x42480000
 8008d78:	3e99999a 	.word	0x3e99999a
 8008d7c:	200213f9 	.word	0x200213f9
 8008d80:	46c75a00 	.word	0x46c75a00
 8008d84:	200104c0 	.word	0x200104c0
 8008d88:	3f733333 	.word	0x3f733333
 8008d8c:	3d4ccccd 	.word	0x3d4ccccd

08008d90 <map_getpressure>:

inline float map_getpressure(void)
{
 8008d90:	b480      	push	{r7}
 8008d92:	af00      	add	r7, sp, #0
  return map_data;
 8008d94:	4b04      	ldr	r3, [pc, #16]	; (8008da8 <map_getpressure+0x18>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	ee07 3a90 	vmov	s15, r3
}
 8008d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr
 8008da8:	200104c0 	.word	0x200104c0

08008dac <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b087      	sub	sp, #28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8008dbe:	2320      	movs	r3, #32
 8008dc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008dc2:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8008dc6:	e00b      	b.n	8008de0 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 8008dc8:	4a0c      	ldr	r2, [pc, #48]	; (8008dfc <SCB_InvalidateDCache_by_Addr+0x50>)
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	dcf0      	bgt.n	8008dc8 <SCB_InvalidateDCache_by_Addr+0x1c>
 8008de6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008dea:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8008dee:	bf00      	nop
 8008df0:	371c      	adds	r7, #28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	e000ed00 	.word	0xe000ed00

08008e00 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8008e12:	2320      	movs	r3, #32
 8008e14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008e16:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8008e1a:	e00b      	b.n	8008e34 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 8008e1c:	4a0c      	ldr	r2, [pc, #48]	; (8008e50 <SCB_CleanDCache_by_Addr+0x50>)
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	4413      	add	r3, r2
 8008e2a:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	dcf0      	bgt.n	8008e1c <SCB_CleanDCache_by_Addr+0x1c>
 8008e3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008e3e:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8008e42:	bf00      	nop
 8008e44:	371c      	adds	r7, #28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	e000ed00 	.word	0xe000ed00

08008e54 <SST25_ErrorCallback>:

volatile uint8_t semTx = 0;
volatile uint8_t semRx = 0;

inline void SST25_ErrorCallback(SPI_HandleTypeDef * _hspi)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  if(_hspi == hspi)
  {

  }
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <SST25_TxCpltCallback>:

inline void SST25_TxCpltCallback(SPI_HandleTypeDef * _hspi)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  if(_hspi == hspi)
 8008e70:	4b06      	ldr	r3, [pc, #24]	; (8008e8c <SST25_TxCpltCallback+0x24>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d102      	bne.n	8008e80 <SST25_TxCpltCallback+0x18>
  {
    semTx = 1;
 8008e7a:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <SST25_TxCpltCallback+0x28>)
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	701a      	strb	r2, [r3, #0]
  }
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	200213fc 	.word	0x200213fc
 8008e90:	20021440 	.word	0x20021440

08008e94 <SST25_RxCpltCallback>:

inline void SST25_RxCpltCallback(SPI_HandleTypeDef * _hspi)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  if(_hspi == hspi)
 8008e9c:	4b06      	ldr	r3, [pc, #24]	; (8008eb8 <SST25_RxCpltCallback+0x24>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d102      	bne.n	8008eac <SST25_RxCpltCallback+0x18>
  {
    semRx = 1;
 8008ea6:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <SST25_RxCpltCallback+0x28>)
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	701a      	strb	r2, [r3, #0]
  }
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr
 8008eb8:	200213fc 	.word	0x200213fc
 8008ebc:	20021441 	.word	0x20021441

08008ec0 <SST25_TxRxCpltCallback>:

inline void SST25_TxRxCpltCallback(SPI_HandleTypeDef * _hspi)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  if(_hspi == hspi)
 8008ec8:	4b08      	ldr	r3, [pc, #32]	; (8008eec <SST25_TxRxCpltCallback+0x2c>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d105      	bne.n	8008ede <SST25_TxRxCpltCallback+0x1e>
  {
    semTx = 1;
 8008ed2:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <SST25_TxRxCpltCallback+0x30>)
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	701a      	strb	r2, [r3, #0]
    semRx = 1;
 8008ed8:	4b06      	ldr	r3, [pc, #24]	; (8008ef4 <SST25_TxRxCpltCallback+0x34>)
 8008eda:	2201      	movs	r2, #1
 8008edc:	701a      	strb	r2, [r3, #0]
  }
}
 8008ede:	bf00      	nop
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	200213fc 	.word	0x200213fc
 8008ef0:	20021440 	.word	0x20021440
 8008ef4:	20021441 	.word	0x20021441

08008ef8 <waitTxCplt>:

static inline uint8_t waitTxCplt()
{
 8008ef8:	b480      	push	{r7}
 8008efa:	af00      	add	r7, sp, #0
  if(semTx)
 8008efc:	4b07      	ldr	r3, [pc, #28]	; (8008f1c <waitTxCplt+0x24>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d004      	beq.n	8008f10 <waitTxCplt+0x18>
  {
    semTx = 0;
 8008f06:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <waitTxCplt+0x24>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	701a      	strb	r2, [r3, #0]
    return 1;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e000      	b.n	8008f12 <waitTxCplt+0x1a>
  }
  return 0;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	20021440 	.word	0x20021440

08008f20 <waitRxCplt>:

static inline uint8_t waitRxCplt()
{
 8008f20:	b480      	push	{r7}
 8008f22:	af00      	add	r7, sp, #0
  if(semRx)
 8008f24:	4b07      	ldr	r3, [pc, #28]	; (8008f44 <waitRxCplt+0x24>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d004      	beq.n	8008f38 <waitRxCplt+0x18>
  {
    semRx = 0;
 8008f2e:	4b05      	ldr	r3, [pc, #20]	; (8008f44 <waitRxCplt+0x24>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	701a      	strb	r2, [r3, #0]
    return 1;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e000      	b.n	8008f3a <waitRxCplt+0x1a>
  }
  return 0;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr
 8008f44:	20021441 	.word	0x20021441

08008f48 <waitTxRxCplt>:

static inline uint8_t waitTxRxCplt()
{
 8008f48:	b480      	push	{r7}
 8008f4a:	af00      	add	r7, sp, #0
  if(semRx && semTx)
 8008f4c:	4b0b      	ldr	r3, [pc, #44]	; (8008f7c <waitTxRxCplt+0x34>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00c      	beq.n	8008f70 <waitTxRxCplt+0x28>
 8008f56:	4b0a      	ldr	r3, [pc, #40]	; (8008f80 <waitTxRxCplt+0x38>)
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d007      	beq.n	8008f70 <waitTxRxCplt+0x28>
  {
    semRx = 0;
 8008f60:	4b06      	ldr	r3, [pc, #24]	; (8008f7c <waitTxRxCplt+0x34>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	701a      	strb	r2, [r3, #0]
    semTx = 0;
 8008f66:	4b06      	ldr	r3, [pc, #24]	; (8008f80 <waitTxRxCplt+0x38>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	701a      	strb	r2, [r3, #0]
    return 1;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e000      	b.n	8008f72 <waitTxRxCplt+0x2a>
  }
  return 0;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	20021441 	.word	0x20021441
 8008f80:	20021440 	.word	0x20021440

08008f84 <SPI_CheckChip>:

static inline HAL_StatusTypeDef SPI_CheckChip(void)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	af00      	add	r7, sp, #0
  tx[0] = 0x90;
 8008f88:	4b47      	ldr	r3, [pc, #284]	; (80090a8 <SPI_CheckChip+0x124>)
 8008f8a:	2290      	movs	r2, #144	; 0x90
 8008f8c:	701a      	strb	r2, [r3, #0]
  tx[1] = 0;
 8008f8e:	4b46      	ldr	r3, [pc, #280]	; (80090a8 <SPI_CheckChip+0x124>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	705a      	strb	r2, [r3, #1]
  tx[2] = 0;
 8008f94:	4b44      	ldr	r3, [pc, #272]	; (80090a8 <SPI_CheckChip+0x124>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	709a      	strb	r2, [r3, #2]
  tx[3] = 0;
 8008f9a:	4b43      	ldr	r3, [pc, #268]	; (80090a8 <SPI_CheckChip+0x124>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	70da      	strb	r2, [r3, #3]
  tx[4] = 0;
 8008fa0:	4b41      	ldr	r3, [pc, #260]	; (80090a8 <SPI_CheckChip+0x124>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	711a      	strb	r2, [r3, #4]
  tx[5] = 0;
 8008fa6:	4b40      	ldr	r3, [pc, #256]	; (80090a8 <SPI_CheckChip+0x124>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	715a      	strb	r2, [r3, #5]

  SCB_CleanDCache_by_Addr((uint32_t*)tx, 6);
 8008fac:	2106      	movs	r1, #6
 8008fae:	483e      	ldr	r0, [pc, #248]	; (80090a8 <SPI_CheckChip+0x124>)
 8008fb0:	f7ff ff26 	bl	8008e00 <SCB_CleanDCache_by_Addr>

  SPI_NSS_ON();
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008fba:	483c      	ldr	r0, [pc, #240]	; (80090ac <SPI_CheckChip+0x128>)
 8008fbc:	f003 fe62 	bl	800cc84 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive_DMA(hspi, tx, rx, 6);
 8008fc0:	4b3b      	ldr	r3, [pc, #236]	; (80090b0 <SPI_CheckChip+0x12c>)
 8008fc2:	6818      	ldr	r0, [r3, #0]
 8008fc4:	2306      	movs	r3, #6
 8008fc6:	4a3b      	ldr	r2, [pc, #236]	; (80090b4 <SPI_CheckChip+0x130>)
 8008fc8:	4937      	ldr	r1, [pc, #220]	; (80090a8 <SPI_CheckChip+0x124>)
 8008fca:	f005 fb93 	bl	800e6f4 <HAL_SPI_TransmitReceive_DMA>
  while(!waitTxRxCplt()) {}
 8008fce:	bf00      	nop
 8008fd0:	f7ff ffba 	bl	8008f48 <waitTxRxCplt>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d0fa      	beq.n	8008fd0 <SPI_CheckChip+0x4c>
  SPI_NSS_OFF();
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008fe0:	4832      	ldr	r0, [pc, #200]	; (80090ac <SPI_CheckChip+0x128>)
 8008fe2:	f003 fe4f 	bl	800cc84 <HAL_GPIO_WritePin>

  SCB_InvalidateDCache_by_Addr((uint32_t*)rx, 6);
 8008fe6:	2106      	movs	r1, #6
 8008fe8:	4832      	ldr	r0, [pc, #200]	; (80090b4 <SPI_CheckChip+0x130>)
 8008fea:	f7ff fedf 	bl	8008dac <SCB_InvalidateDCache_by_Addr>

  if(rx[4] != 0xBF)
 8008fee:	4b31      	ldr	r3, [pc, #196]	; (80090b4 <SPI_CheckChip+0x130>)
 8008ff0:	791b      	ldrb	r3, [r3, #4]
 8008ff2:	2bbf      	cmp	r3, #191	; 0xbf
 8008ff4:	d001      	beq.n	8008ffa <SPI_CheckChip+0x76>
    return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e053      	b.n	80090a2 <SPI_CheckChip+0x11e>
  if(rx[5] != 0x4A)
 8008ffa:	4b2e      	ldr	r3, [pc, #184]	; (80090b4 <SPI_CheckChip+0x130>)
 8008ffc:	795b      	ldrb	r3, [r3, #5]
 8008ffe:	2b4a      	cmp	r3, #74	; 0x4a
 8009000:	d001      	beq.n	8009006 <SPI_CheckChip+0x82>
    return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e04d      	b.n	80090a2 <SPI_CheckChip+0x11e>

  HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_SET);
 8009006:	2201      	movs	r2, #1
 8009008:	2140      	movs	r1, #64	; 0x40
 800900a:	482b      	ldr	r0, [pc, #172]	; (80090b8 <SPI_CheckChip+0x134>)
 800900c:	f003 fe3a 	bl	800cc84 <HAL_GPIO_WritePin>
  tx[0] = 0x06;
 8009010:	4b25      	ldr	r3, [pc, #148]	; (80090a8 <SPI_CheckChip+0x124>)
 8009012:	2206      	movs	r2, #6
 8009014:	701a      	strb	r2, [r3, #0]
  SCB_CleanDCache_by_Addr((uint32_t*)tx, 1);
 8009016:	2101      	movs	r1, #1
 8009018:	4823      	ldr	r0, [pc, #140]	; (80090a8 <SPI_CheckChip+0x124>)
 800901a:	f7ff fef1 	bl	8008e00 <SCB_CleanDCache_by_Addr>
  SPI_NSS_ON();
 800901e:	2200      	movs	r2, #0
 8009020:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009024:	4821      	ldr	r0, [pc, #132]	; (80090ac <SPI_CheckChip+0x128>)
 8009026:	f003 fe2d 	bl	800cc84 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit_DMA(hspi, tx, 1);
 800902a:	4b21      	ldr	r3, [pc, #132]	; (80090b0 <SPI_CheckChip+0x12c>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2201      	movs	r2, #1
 8009030:	491d      	ldr	r1, [pc, #116]	; (80090a8 <SPI_CheckChip+0x124>)
 8009032:	4618      	mov	r0, r3
 8009034:	f005 f956 	bl	800e2e4 <HAL_SPI_Transmit_DMA>
  while(!waitTxCplt()) {}
 8009038:	bf00      	nop
 800903a:	f7ff ff5d 	bl	8008ef8 <waitTxCplt>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d0fa      	beq.n	800903a <SPI_CheckChip+0xb6>
  SPI_NSS_OFF();
 8009044:	2201      	movs	r2, #1
 8009046:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800904a:	4818      	ldr	r0, [pc, #96]	; (80090ac <SPI_CheckChip+0x128>)
 800904c:	f003 fe1a 	bl	800cc84 <HAL_GPIO_WritePin>

  tx[0] = 0x01;
 8009050:	4b15      	ldr	r3, [pc, #84]	; (80090a8 <SPI_CheckChip+0x124>)
 8009052:	2201      	movs	r2, #1
 8009054:	701a      	strb	r2, [r3, #0]
  tx[1] = 0x00;
 8009056:	4b14      	ldr	r3, [pc, #80]	; (80090a8 <SPI_CheckChip+0x124>)
 8009058:	2200      	movs	r2, #0
 800905a:	705a      	strb	r2, [r3, #1]
  SCB_CleanDCache_by_Addr((uint32_t*)tx, 1);
 800905c:	2101      	movs	r1, #1
 800905e:	4812      	ldr	r0, [pc, #72]	; (80090a8 <SPI_CheckChip+0x124>)
 8009060:	f7ff fece 	bl	8008e00 <SCB_CleanDCache_by_Addr>
  SPI_NSS_ON();
 8009064:	2200      	movs	r2, #0
 8009066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800906a:	4810      	ldr	r0, [pc, #64]	; (80090ac <SPI_CheckChip+0x128>)
 800906c:	f003 fe0a 	bl	800cc84 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit_DMA(hspi, tx, 2);
 8009070:	4b0f      	ldr	r3, [pc, #60]	; (80090b0 <SPI_CheckChip+0x12c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2202      	movs	r2, #2
 8009076:	490c      	ldr	r1, [pc, #48]	; (80090a8 <SPI_CheckChip+0x124>)
 8009078:	4618      	mov	r0, r3
 800907a:	f005 f933 	bl	800e2e4 <HAL_SPI_Transmit_DMA>
  while(!waitTxCplt()) {}
 800907e:	bf00      	nop
 8009080:	f7ff ff3a 	bl	8008ef8 <waitTxCplt>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0fa      	beq.n	8009080 <SPI_CheckChip+0xfc>
  SPI_NSS_OFF();
 800908a:	2201      	movs	r2, #1
 800908c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009090:	4806      	ldr	r0, [pc, #24]	; (80090ac <SPI_CheckChip+0x128>)
 8009092:	f003 fdf7 	bl	800cc84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_RESET);
 8009096:	2200      	movs	r2, #0
 8009098:	2140      	movs	r1, #64	; 0x40
 800909a:	4807      	ldr	r0, [pc, #28]	; (80090b8 <SPI_CheckChip+0x134>)
 800909c:	f003 fdf2 	bl	800cc84 <HAL_GPIO_WritePin>

  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20021400 	.word	0x20021400
 80090ac:	40020400 	.word	0x40020400
 80090b0:	200213fc 	.word	0x200213fc
 80090b4:	20021420 	.word	0x20021420
 80090b8:	40020800 	.word	0x40020800

080090bc <SPI_Read>:

static inline uint8_t SPI_Read(uint32_t address, uint32_t size, uint8_t * buffer)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  static uint8_t state = 0;

  switch(state)
 80090c8:	4b3b      	ldr	r3, [pc, #236]	; (80091b8 <SPI_Read+0xfc>)
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d030      	beq.n	8009132 <SPI_Read+0x76>
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d042      	beq.n	800915a <SPI_Read+0x9e>
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d000      	beq.n	80090da <SPI_Read+0x1e>
        state = 0;
        return 1;
      }
      break;
    default :
      break;
 80090d8:	e069      	b.n	80091ae <SPI_Read+0xf2>
      tx[0] = 0x0B;
 80090da:	4b38      	ldr	r3, [pc, #224]	; (80091bc <SPI_Read+0x100>)
 80090dc:	220b      	movs	r2, #11
 80090de:	701a      	strb	r2, [r3, #0]
      tx[1] = (address >> 16) & 0xFF;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	0c1b      	lsrs	r3, r3, #16
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	4b35      	ldr	r3, [pc, #212]	; (80091bc <SPI_Read+0x100>)
 80090e8:	705a      	strb	r2, [r3, #1]
      tx[2] = (address >> 8) & 0xFF;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	0a1b      	lsrs	r3, r3, #8
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	4b32      	ldr	r3, [pc, #200]	; (80091bc <SPI_Read+0x100>)
 80090f2:	709a      	strb	r2, [r3, #2]
      tx[3] = address & 0xFF;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	4b30      	ldr	r3, [pc, #192]	; (80091bc <SPI_Read+0x100>)
 80090fa:	70da      	strb	r2, [r3, #3]
      tx[4] = 0xFF;
 80090fc:	4b2f      	ldr	r3, [pc, #188]	; (80091bc <SPI_Read+0x100>)
 80090fe:	22ff      	movs	r2, #255	; 0xff
 8009100:	711a      	strb	r2, [r3, #4]
      SCB_CleanDCache_by_Addr((uint32_t*)tx, 5);
 8009102:	2105      	movs	r1, #5
 8009104:	482d      	ldr	r0, [pc, #180]	; (80091bc <SPI_Read+0x100>)
 8009106:	f7ff fe7b 	bl	8008e00 <SCB_CleanDCache_by_Addr>
      SPI_NSS_ON();
 800910a:	2200      	movs	r2, #0
 800910c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009110:	482b      	ldr	r0, [pc, #172]	; (80091c0 <SPI_Read+0x104>)
 8009112:	f003 fdb7 	bl	800cc84 <HAL_GPIO_WritePin>
      HAL_SPI_Transmit_DMA(hspi, tx, 5);
 8009116:	4b2b      	ldr	r3, [pc, #172]	; (80091c4 <SPI_Read+0x108>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2205      	movs	r2, #5
 800911c:	4927      	ldr	r1, [pc, #156]	; (80091bc <SPI_Read+0x100>)
 800911e:	4618      	mov	r0, r3
 8009120:	f005 f8e0 	bl	800e2e4 <HAL_SPI_Transmit_DMA>
      state++;
 8009124:	4b24      	ldr	r3, [pc, #144]	; (80091b8 <SPI_Read+0xfc>)
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	3301      	adds	r3, #1
 800912a:	b2da      	uxtb	r2, r3
 800912c:	4b22      	ldr	r3, [pc, #136]	; (80091b8 <SPI_Read+0xfc>)
 800912e:	701a      	strb	r2, [r3, #0]
      break;
 8009130:	e03d      	b.n	80091ae <SPI_Read+0xf2>
      if(waitTxCplt())
 8009132:	f7ff fee1 	bl	8008ef8 <waitTxCplt>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d035      	beq.n	80091a8 <SPI_Read+0xec>
        HAL_SPI_Receive_DMA(hspi, buffer, size);
 800913c:	4b21      	ldr	r3, [pc, #132]	; (80091c4 <SPI_Read+0x108>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	b292      	uxth	r2, r2
 8009144:	6879      	ldr	r1, [r7, #4]
 8009146:	4618      	mov	r0, r3
 8009148:	f005 f9b8 	bl	800e4bc <HAL_SPI_Receive_DMA>
        state++;
 800914c:	4b1a      	ldr	r3, [pc, #104]	; (80091b8 <SPI_Read+0xfc>)
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	3301      	adds	r3, #1
 8009152:	b2da      	uxtb	r2, r3
 8009154:	4b18      	ldr	r3, [pc, #96]	; (80091b8 <SPI_Read+0xfc>)
 8009156:	701a      	strb	r2, [r3, #0]
      break;
 8009158:	e026      	b.n	80091a8 <SPI_Read+0xec>
      if(waitRxCplt())
 800915a:	f7ff fee1 	bl	8008f20 <waitRxCplt>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d023      	beq.n	80091ac <SPI_Read+0xf0>
        SPI_NSS_OFF();
 8009164:	2201      	movs	r2, #1
 8009166:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800916a:	4815      	ldr	r0, [pc, #84]	; (80091c0 <SPI_Read+0x104>)
 800916c:	f003 fd8a 	bl	800cc84 <HAL_GPIO_WritePin>
        if((uint32_t)buffer % 32 == 0)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f003 031f 	and.w	r3, r3, #31
 8009176:	2b00      	cmp	r3, #0
 8009178:	d105      	bne.n	8009186 <SPI_Read+0xca>
          SCB_InvalidateDCache_by_Addr((uint32_t*)buffer, size);
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7ff fe14 	bl	8008dac <SCB_InvalidateDCache_by_Addr>
 8009184:	e00b      	b.n	800919e <SPI_Read+0xe2>
        else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - ((uint32_t)buffer%32)), size + ((uint32_t)buffer%32));
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f023 031f 	bic.w	r3, r3, #31
 800918c:	4618      	mov	r0, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f003 021f 	and.w	r2, r3, #31
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	4413      	add	r3, r2
 8009198:	4619      	mov	r1, r3
 800919a:	f7ff fe07 	bl	8008dac <SCB_InvalidateDCache_by_Addr>
        state = 0;
 800919e:	4b06      	ldr	r3, [pc, #24]	; (80091b8 <SPI_Read+0xfc>)
 80091a0:	2200      	movs	r2, #0
 80091a2:	701a      	strb	r2, [r3, #0]
        return 1;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e003      	b.n	80091b0 <SPI_Read+0xf4>
      break;
 80091a8:	bf00      	nop
 80091aa:	e000      	b.n	80091ae <SPI_Read+0xf2>
      break;
 80091ac:	bf00      	nop
  }
  return 0;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	20021449 	.word	0x20021449
 80091bc:	20021400 	.word	0x20021400
 80091c0:	40020400 	.word	0x40020400
 80091c4:	200213fc 	.word	0x200213fc

080091c8 <SPI_WaitForWrite>:

static inline uint8_t SPI_WaitForWrite(void)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	af00      	add	r7, sp, #0
  static uint8_t state = 0;
  //static uint32_t wait_time = 0;
  do
  {
    switch(state)
 80091cc:	4b32      	ldr	r3, [pc, #200]	; (8009298 <SPI_WaitForWrite+0xd0>)
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	2b03      	cmp	r3, #3
 80091d2:	d856      	bhi.n	8009282 <SPI_WaitForWrite+0xba>
 80091d4:	a201      	add	r2, pc, #4	; (adr r2, 80091dc <SPI_WaitForWrite+0x14>)
 80091d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091da:	bf00      	nop
 80091dc:	080091ed 	.word	0x080091ed
 80091e0:	0800920d 	.word	0x0800920d
 80091e4:	08009229 	.word	0x08009229
 80091e8:	0800924f 	.word	0x0800924f
    {
      case 0 :
        tx[0] = 0x05;
 80091ec:	4b2b      	ldr	r3, [pc, #172]	; (800929c <SPI_WaitForWrite+0xd4>)
 80091ee:	2205      	movs	r2, #5
 80091f0:	701a      	strb	r2, [r3, #0]
        //wait_time = Delay_Tick;
        SPI_NSS_ON();
 80091f2:	2200      	movs	r2, #0
 80091f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80091f8:	4829      	ldr	r0, [pc, #164]	; (80092a0 <SPI_WaitForWrite+0xd8>)
 80091fa:	f003 fd43 	bl	800cc84 <HAL_GPIO_WritePin>
        state++;
 80091fe:	4b26      	ldr	r3, [pc, #152]	; (8009298 <SPI_WaitForWrite+0xd0>)
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	3301      	adds	r3, #1
 8009204:	b2da      	uxtb	r2, r3
 8009206:	4b24      	ldr	r3, [pc, #144]	; (8009298 <SPI_WaitForWrite+0xd0>)
 8009208:	701a      	strb	r2, [r3, #0]
        continue;
 800920a:	e041      	b.n	8009290 <SPI_WaitForWrite+0xc8>
      case 1 :
        HAL_SPI_Transmit_IT(hspi, tx, 1);
 800920c:	4b25      	ldr	r3, [pc, #148]	; (80092a4 <SPI_WaitForWrite+0xdc>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2201      	movs	r2, #1
 8009212:	4922      	ldr	r1, [pc, #136]	; (800929c <SPI_WaitForWrite+0xd4>)
 8009214:	4618      	mov	r0, r3
 8009216:	f004 fe87 	bl	800df28 <HAL_SPI_Transmit_IT>
        state++;
 800921a:	4b1f      	ldr	r3, [pc, #124]	; (8009298 <SPI_WaitForWrite+0xd0>)
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	3301      	adds	r3, #1
 8009220:	b2da      	uxtb	r2, r3
 8009222:	4b1d      	ldr	r3, [pc, #116]	; (8009298 <SPI_WaitForWrite+0xd0>)
 8009224:	701a      	strb	r2, [r3, #0]
        break;
 8009226:	e033      	b.n	8009290 <SPI_WaitForWrite+0xc8>
      case 2 :
        if(waitTxCplt())
 8009228:	f7ff fe66 	bl	8008ef8 <waitTxCplt>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d02b      	beq.n	800928a <SPI_WaitForWrite+0xc2>
        {
          HAL_SPI_Receive_IT(hspi, rx, 1);
 8009232:	4b1c      	ldr	r3, [pc, #112]	; (80092a4 <SPI_WaitForWrite+0xdc>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2201      	movs	r2, #1
 8009238:	491b      	ldr	r1, [pc, #108]	; (80092a8 <SPI_WaitForWrite+0xe0>)
 800923a:	4618      	mov	r0, r3
 800923c:	f004 fefa 	bl	800e034 <HAL_SPI_Receive_IT>
          state++;
 8009240:	4b15      	ldr	r3, [pc, #84]	; (8009298 <SPI_WaitForWrite+0xd0>)
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	3301      	adds	r3, #1
 8009246:	b2da      	uxtb	r2, r3
 8009248:	4b13      	ldr	r3, [pc, #76]	; (8009298 <SPI_WaitForWrite+0xd0>)
 800924a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800924c:	e01d      	b.n	800928a <SPI_WaitForWrite+0xc2>
      case 3 :
        if(waitRxCplt())
 800924e:	f7ff fe67 	bl	8008f20 <waitRxCplt>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d01a      	beq.n	800928e <SPI_WaitForWrite+0xc6>
        {
          if(rx[0] & 0x01)
 8009258:	4b13      	ldr	r3, [pc, #76]	; (80092a8 <SPI_WaitForWrite+0xe0>)
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	2b00      	cmp	r3, #0
 8009262:	d003      	beq.n	800926c <SPI_WaitForWrite+0xa4>
          {
            //Never should get here...
            //if(DelayDiff(Delay_Tick, wait_time) > 1000);
            state = 1;
 8009264:	4b0c      	ldr	r3, [pc, #48]	; (8009298 <SPI_WaitForWrite+0xd0>)
 8009266:	2201      	movs	r2, #1
 8009268:	701a      	strb	r2, [r3, #0]
            SPI_NSS_OFF();
            state = 0;
            return 1;
          }
        }
        break;
 800926a:	e010      	b.n	800928e <SPI_WaitForWrite+0xc6>
            SPI_NSS_OFF();
 800926c:	2201      	movs	r2, #1
 800926e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009272:	480b      	ldr	r0, [pc, #44]	; (80092a0 <SPI_WaitForWrite+0xd8>)
 8009274:	f003 fd06 	bl	800cc84 <HAL_GPIO_WritePin>
            state = 0;
 8009278:	4b07      	ldr	r3, [pc, #28]	; (8009298 <SPI_WaitForWrite+0xd0>)
 800927a:	2200      	movs	r2, #0
 800927c:	701a      	strb	r2, [r3, #0]
            return 1;
 800927e:	2301      	movs	r3, #1
 8009280:	e007      	b.n	8009292 <SPI_WaitForWrite+0xca>
      default :
        state = 0;
 8009282:	4b05      	ldr	r3, [pc, #20]	; (8009298 <SPI_WaitForWrite+0xd0>)
 8009284:	2200      	movs	r2, #0
 8009286:	701a      	strb	r2, [r3, #0]
        continue;
 8009288:	e002      	b.n	8009290 <SPI_WaitForWrite+0xc8>
        break;
 800928a:	bf00      	nop
 800928c:	e000      	b.n	8009290 <SPI_WaitForWrite+0xc8>
        break;
 800928e:	bf00      	nop
    }
  }
  while(0);
  return 0;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20021448 	.word	0x20021448
 800929c:	20021400 	.word	0x20021400
 80092a0:	40020400 	.word	0x40020400
 80092a4:	200213fc 	.word	0x200213fc
 80092a8:	20021420 	.word	0x20021420

080092ac <SPI_Write>:

static inline uint8_t SPI_Write(uint32_t addr, uint32_t size, const uint8_t * buffer)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
  static const uint8_t * pointer = NULL;
  static uint32_t program_time = 0;

  do
  {
    switch(state)
 80092b8:	4b66      	ldr	r3, [pc, #408]	; (8009454 <SPI_Write+0x1a8>)
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	2b04      	cmp	r3, #4
 80092be:	f200 80b9 	bhi.w	8009434 <SPI_Write+0x188>
 80092c2:	a201      	add	r2, pc, #4	; (adr r2, 80092c8 <SPI_Write+0x1c>)
 80092c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c8:	080092dd 	.word	0x080092dd
 80092cc:	0800933d 	.word	0x0800933d
 80092d0:	080093b5 	.word	0x080093b5
 80092d4:	080093e1 	.word	0x080093e1
 80092d8:	08009405 	.word	0x08009405
    {
      case 0 :
        if(left == 0)
 80092dc:	4b5e      	ldr	r3, [pc, #376]	; (8009458 <SPI_Write+0x1ac>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d106      	bne.n	80092f2 <SPI_Write+0x46>
        {
          HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_RESET);
 80092e4:	2200      	movs	r2, #0
 80092e6:	2140      	movs	r1, #64	; 0x40
 80092e8:	485c      	ldr	r0, [pc, #368]	; (800945c <SPI_Write+0x1b0>)
 80092ea:	f003 fccb 	bl	800cc84 <HAL_GPIO_WritePin>
          return 1;
 80092ee:	2301      	movs	r3, #1
 80092f0:	e0ac      	b.n	800944c <SPI_Write+0x1a0>
        }

        HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_SET);
 80092f2:	2201      	movs	r2, #1
 80092f4:	2140      	movs	r1, #64	; 0x40
 80092f6:	4859      	ldr	r0, [pc, #356]	; (800945c <SPI_Write+0x1b0>)
 80092f8:	f003 fcc4 	bl	800cc84 <HAL_GPIO_WritePin>
        left = size;
 80092fc:	4a56      	ldr	r2, [pc, #344]	; (8009458 <SPI_Write+0x1ac>)
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	6013      	str	r3, [r2, #0]
        address = addr;
 8009302:	4a57      	ldr	r2, [pc, #348]	; (8009460 <SPI_Write+0x1b4>)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6013      	str	r3, [r2, #0]
        pointer = buffer;
 8009308:	4a56      	ldr	r2, [pc, #344]	; (8009464 <SPI_Write+0x1b8>)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6013      	str	r3, [r2, #0]
        tx[0] = 0x06;
 800930e:	4b56      	ldr	r3, [pc, #344]	; (8009468 <SPI_Write+0x1bc>)
 8009310:	2206      	movs	r2, #6
 8009312:	701a      	strb	r2, [r3, #0]
        SPI_NSS_ON();
 8009314:	2200      	movs	r2, #0
 8009316:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800931a:	4854      	ldr	r0, [pc, #336]	; (800946c <SPI_Write+0x1c0>)
 800931c:	f003 fcb2 	bl	800cc84 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit_IT(hspi, tx, 1);
 8009320:	4b53      	ldr	r3, [pc, #332]	; (8009470 <SPI_Write+0x1c4>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2201      	movs	r2, #1
 8009326:	4950      	ldr	r1, [pc, #320]	; (8009468 <SPI_Write+0x1bc>)
 8009328:	4618      	mov	r0, r3
 800932a:	f004 fdfd 	bl	800df28 <HAL_SPI_Transmit_IT>
        state++;
 800932e:	4b49      	ldr	r3, [pc, #292]	; (8009454 <SPI_Write+0x1a8>)
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	3301      	adds	r3, #1
 8009334:	b2da      	uxtb	r2, r3
 8009336:	4b47      	ldr	r3, [pc, #284]	; (8009454 <SPI_Write+0x1a8>)
 8009338:	701a      	strb	r2, [r3, #0]
        break;
 800933a:	e086      	b.n	800944a <SPI_Write+0x19e>
      case 1 :
        if(waitTxCplt())
 800933c:	f7ff fddc 	bl	8008ef8 <waitTxCplt>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d07a      	beq.n	800943c <SPI_Write+0x190>
        {
          SPI_NSS_OFF();
 8009346:	2201      	movs	r2, #1
 8009348:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800934c:	4847      	ldr	r0, [pc, #284]	; (800946c <SPI_Write+0x1c0>)
 800934e:	f003 fc99 	bl	800cc84 <HAL_GPIO_WritePin>
          tx[0] = 0x02;
 8009352:	4b45      	ldr	r3, [pc, #276]	; (8009468 <SPI_Write+0x1bc>)
 8009354:	2202      	movs	r2, #2
 8009356:	701a      	strb	r2, [r3, #0]
          tx[1] = (address >> 16) & 0xFF;
 8009358:	4b41      	ldr	r3, [pc, #260]	; (8009460 <SPI_Write+0x1b4>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	0c1b      	lsrs	r3, r3, #16
 800935e:	b2da      	uxtb	r2, r3
 8009360:	4b41      	ldr	r3, [pc, #260]	; (8009468 <SPI_Write+0x1bc>)
 8009362:	705a      	strb	r2, [r3, #1]
          tx[2] = (address >> 8) & 0xFF;
 8009364:	4b3e      	ldr	r3, [pc, #248]	; (8009460 <SPI_Write+0x1b4>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	0a1b      	lsrs	r3, r3, #8
 800936a:	b2da      	uxtb	r2, r3
 800936c:	4b3e      	ldr	r3, [pc, #248]	; (8009468 <SPI_Write+0x1bc>)
 800936e:	709a      	strb	r2, [r3, #2]
          tx[3] = address & 0xFF;
 8009370:	4b3b      	ldr	r3, [pc, #236]	; (8009460 <SPI_Write+0x1b4>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	b2da      	uxtb	r2, r3
 8009376:	4b3c      	ldr	r3, [pc, #240]	; (8009468 <SPI_Write+0x1bc>)
 8009378:	70da      	strb	r2, [r3, #3]
          tx[4] = *pointer;
 800937a:	4b3a      	ldr	r3, [pc, #232]	; (8009464 <SPI_Write+0x1b8>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	781a      	ldrb	r2, [r3, #0]
 8009380:	4b39      	ldr	r3, [pc, #228]	; (8009468 <SPI_Write+0x1bc>)
 8009382:	711a      	strb	r2, [r3, #4]
          SPI_NSS_ON();
 8009384:	2200      	movs	r2, #0
 8009386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800938a:	4838      	ldr	r0, [pc, #224]	; (800946c <SPI_Write+0x1c0>)
 800938c:	f003 fc7a 	bl	800cc84 <HAL_GPIO_WritePin>
          SCB_CleanDCache_by_Addr((uint32_t*)tx, 5);
 8009390:	2105      	movs	r1, #5
 8009392:	4835      	ldr	r0, [pc, #212]	; (8009468 <SPI_Write+0x1bc>)
 8009394:	f7ff fd34 	bl	8008e00 <SCB_CleanDCache_by_Addr>
          HAL_SPI_Transmit_DMA(hspi, tx, 5);
 8009398:	4b35      	ldr	r3, [pc, #212]	; (8009470 <SPI_Write+0x1c4>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2205      	movs	r2, #5
 800939e:	4932      	ldr	r1, [pc, #200]	; (8009468 <SPI_Write+0x1bc>)
 80093a0:	4618      	mov	r0, r3
 80093a2:	f004 ff9f 	bl	800e2e4 <HAL_SPI_Transmit_DMA>
          state++;
 80093a6:	4b2b      	ldr	r3, [pc, #172]	; (8009454 <SPI_Write+0x1a8>)
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	3301      	adds	r3, #1
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	4b29      	ldr	r3, [pc, #164]	; (8009454 <SPI_Write+0x1a8>)
 80093b0:	701a      	strb	r2, [r3, #0]
        }
        break;
 80093b2:	e043      	b.n	800943c <SPI_Write+0x190>
      case 2 :
        if(waitTxCplt())
 80093b4:	f7ff fda0 	bl	8008ef8 <waitTxCplt>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d040      	beq.n	8009440 <SPI_Write+0x194>
        {
          program_time = Delay_Tick;
 80093be:	4b2d      	ldr	r3, [pc, #180]	; (8009474 <SPI_Write+0x1c8>)
 80093c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c2:	4a2d      	ldr	r2, [pc, #180]	; (8009478 <SPI_Write+0x1cc>)
 80093c4:	6013      	str	r3, [r2, #0]
          SPI_NSS_OFF();
 80093c6:	2201      	movs	r2, #1
 80093c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80093cc:	4827      	ldr	r0, [pc, #156]	; (800946c <SPI_Write+0x1c0>)
 80093ce:	f003 fc59 	bl	800cc84 <HAL_GPIO_WritePin>
          state++;
 80093d2:	4b20      	ldr	r3, [pc, #128]	; (8009454 <SPI_Write+0x1a8>)
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	3301      	adds	r3, #1
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	4b1e      	ldr	r3, [pc, #120]	; (8009454 <SPI_Write+0x1a8>)
 80093dc:	701a      	strb	r2, [r3, #0]
        }
        break;
 80093de:	e02f      	b.n	8009440 <SPI_Write+0x194>
      case 3 :
        if(DelayDiff(Delay_Tick, program_time) >= 8)
 80093e0:	4b24      	ldr	r3, [pc, #144]	; (8009474 <SPI_Write+0x1c8>)
 80093e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093e4:	4b24      	ldr	r3, [pc, #144]	; (8009478 <SPI_Write+0x1cc>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4619      	mov	r1, r3
 80093ea:	4610      	mov	r0, r2
 80093ec:	f7fe fcfa 	bl	8007de4 <DelayDiff>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b07      	cmp	r3, #7
 80093f4:	d926      	bls.n	8009444 <SPI_Write+0x198>
        {
          state++;
 80093f6:	4b17      	ldr	r3, [pc, #92]	; (8009454 <SPI_Write+0x1a8>)
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	3301      	adds	r3, #1
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	4b15      	ldr	r3, [pc, #84]	; (8009454 <SPI_Write+0x1a8>)
 8009400:	701a      	strb	r2, [r3, #0]
          continue;
 8009402:	e022      	b.n	800944a <SPI_Write+0x19e>
        }
        break;
      case 4 :
        if(SPI_WaitForWrite())
 8009404:	f7ff fee0 	bl	80091c8 <SPI_WaitForWrite>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d01c      	beq.n	8009448 <SPI_Write+0x19c>
        {
          left--;
 800940e:	4b12      	ldr	r3, [pc, #72]	; (8009458 <SPI_Write+0x1ac>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3b01      	subs	r3, #1
 8009414:	4a10      	ldr	r2, [pc, #64]	; (8009458 <SPI_Write+0x1ac>)
 8009416:	6013      	str	r3, [r2, #0]
          address++;
 8009418:	4b11      	ldr	r3, [pc, #68]	; (8009460 <SPI_Write+0x1b4>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	3301      	adds	r3, #1
 800941e:	4a10      	ldr	r2, [pc, #64]	; (8009460 <SPI_Write+0x1b4>)
 8009420:	6013      	str	r3, [r2, #0]
          pointer++;
 8009422:	4b10      	ldr	r3, [pc, #64]	; (8009464 <SPI_Write+0x1b8>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	3301      	adds	r3, #1
 8009428:	4a0e      	ldr	r2, [pc, #56]	; (8009464 <SPI_Write+0x1b8>)
 800942a:	6013      	str	r3, [r2, #0]
          state = 0;
 800942c:	4b09      	ldr	r3, [pc, #36]	; (8009454 <SPI_Write+0x1a8>)
 800942e:	2200      	movs	r2, #0
 8009430:	701a      	strb	r2, [r3, #0]
        }
        break;
 8009432:	e009      	b.n	8009448 <SPI_Write+0x19c>
      default :
        state = 0;
 8009434:	4b07      	ldr	r3, [pc, #28]	; (8009454 <SPI_Write+0x1a8>)
 8009436:	2200      	movs	r2, #0
 8009438:	701a      	strb	r2, [r3, #0]
        continue;
 800943a:	e006      	b.n	800944a <SPI_Write+0x19e>
        break;
 800943c:	bf00      	nop
 800943e:	e004      	b.n	800944a <SPI_Write+0x19e>
        break;
 8009440:	bf00      	nop
 8009442:	e002      	b.n	800944a <SPI_Write+0x19e>
        break;
 8009444:	bf00      	nop
 8009446:	e000      	b.n	800944a <SPI_Write+0x19e>
        break;
 8009448:	bf00      	nop
    }
  } while(0);
  return 0;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	2002144a 	.word	0x2002144a
 8009458:	2002144c 	.word	0x2002144c
 800945c:	40020800 	.word	0x40020800
 8009460:	20021450 	.word	0x20021450
 8009464:	20021454 	.word	0x20021454
 8009468:	20021400 	.word	0x20021400
 800946c:	40020400 	.word	0x40020400
 8009470:	200213fc 	.word	0x200213fc
 8009474:	40000c00 	.word	0x40000c00
 8009478:	20021458 	.word	0x20021458

0800947c <SPI_EraseSector>:

static inline uint8_t SPI_EraseSector(uint32_t address)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  static uint8_t state = 0;
  static uint32_t program_time = 0;

  do
  {
    switch(state)
 8009484:	4b55      	ldr	r3, [pc, #340]	; (80095dc <SPI_EraseSector+0x160>)
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	2b04      	cmp	r3, #4
 800948a:	f200 8096 	bhi.w	80095ba <SPI_EraseSector+0x13e>
 800948e:	a201      	add	r2, pc, #4	; (adr r2, 8009494 <SPI_EraseSector+0x18>)
 8009490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009494:	080094a9 	.word	0x080094a9
 8009498:	080094e1 	.word	0x080094e1
 800949c:	08009549 	.word	0x08009549
 80094a0:	08009575 	.word	0x08009575
 80094a4:	0800959d 	.word	0x0800959d
    {
      case 0 :
        HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_SET);
 80094a8:	2201      	movs	r2, #1
 80094aa:	2140      	movs	r1, #64	; 0x40
 80094ac:	484c      	ldr	r0, [pc, #304]	; (80095e0 <SPI_EraseSector+0x164>)
 80094ae:	f003 fbe9 	bl	800cc84 <HAL_GPIO_WritePin>
        tx[0] = 0x06;
 80094b2:	4b4c      	ldr	r3, [pc, #304]	; (80095e4 <SPI_EraseSector+0x168>)
 80094b4:	2206      	movs	r2, #6
 80094b6:	701a      	strb	r2, [r3, #0]
        SPI_NSS_ON();
 80094b8:	2200      	movs	r2, #0
 80094ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80094be:	484a      	ldr	r0, [pc, #296]	; (80095e8 <SPI_EraseSector+0x16c>)
 80094c0:	f003 fbe0 	bl	800cc84 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit_IT(hspi, tx, 1);
 80094c4:	4b49      	ldr	r3, [pc, #292]	; (80095ec <SPI_EraseSector+0x170>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2201      	movs	r2, #1
 80094ca:	4946      	ldr	r1, [pc, #280]	; (80095e4 <SPI_EraseSector+0x168>)
 80094cc:	4618      	mov	r0, r3
 80094ce:	f004 fd2b 	bl	800df28 <HAL_SPI_Transmit_IT>
        state++;
 80094d2:	4b42      	ldr	r3, [pc, #264]	; (80095dc <SPI_EraseSector+0x160>)
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	3301      	adds	r3, #1
 80094d8:	b2da      	uxtb	r2, r3
 80094da:	4b40      	ldr	r3, [pc, #256]	; (80095dc <SPI_EraseSector+0x160>)
 80094dc:	701a      	strb	r2, [r3, #0]
        break;
 80094de:	e077      	b.n	80095d0 <SPI_EraseSector+0x154>
      case 1 :
        if(waitTxCplt())
 80094e0:	f7ff fd0a 	bl	8008ef8 <waitTxCplt>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d06b      	beq.n	80095c2 <SPI_EraseSector+0x146>
        {
          SPI_NSS_OFF();
 80094ea:	2201      	movs	r2, #1
 80094ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80094f0:	483d      	ldr	r0, [pc, #244]	; (80095e8 <SPI_EraseSector+0x16c>)
 80094f2:	f003 fbc7 	bl	800cc84 <HAL_GPIO_WritePin>
          tx[0] = 0x20;
 80094f6:	4b3b      	ldr	r3, [pc, #236]	; (80095e4 <SPI_EraseSector+0x168>)
 80094f8:	2220      	movs	r2, #32
 80094fa:	701a      	strb	r2, [r3, #0]
          tx[1] = (address >> 16) & 0xFF;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	0c1b      	lsrs	r3, r3, #16
 8009500:	b2da      	uxtb	r2, r3
 8009502:	4b38      	ldr	r3, [pc, #224]	; (80095e4 <SPI_EraseSector+0x168>)
 8009504:	705a      	strb	r2, [r3, #1]
          tx[2] = (address >> 8) & 0xFF;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	0a1b      	lsrs	r3, r3, #8
 800950a:	b2da      	uxtb	r2, r3
 800950c:	4b35      	ldr	r3, [pc, #212]	; (80095e4 <SPI_EraseSector+0x168>)
 800950e:	709a      	strb	r2, [r3, #2]
          tx[3] = address & 0xFF;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	b2da      	uxtb	r2, r3
 8009514:	4b33      	ldr	r3, [pc, #204]	; (80095e4 <SPI_EraseSector+0x168>)
 8009516:	70da      	strb	r2, [r3, #3]
          SPI_NSS_ON();
 8009518:	2200      	movs	r2, #0
 800951a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800951e:	4832      	ldr	r0, [pc, #200]	; (80095e8 <SPI_EraseSector+0x16c>)
 8009520:	f003 fbb0 	bl	800cc84 <HAL_GPIO_WritePin>
          SCB_CleanDCache_by_Addr((uint32_t*)tx, 4);
 8009524:	2104      	movs	r1, #4
 8009526:	482f      	ldr	r0, [pc, #188]	; (80095e4 <SPI_EraseSector+0x168>)
 8009528:	f7ff fc6a 	bl	8008e00 <SCB_CleanDCache_by_Addr>
          HAL_SPI_Transmit_DMA(hspi, tx, 4);
 800952c:	4b2f      	ldr	r3, [pc, #188]	; (80095ec <SPI_EraseSector+0x170>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2204      	movs	r2, #4
 8009532:	492c      	ldr	r1, [pc, #176]	; (80095e4 <SPI_EraseSector+0x168>)
 8009534:	4618      	mov	r0, r3
 8009536:	f004 fed5 	bl	800e2e4 <HAL_SPI_Transmit_DMA>
          state++;
 800953a:	4b28      	ldr	r3, [pc, #160]	; (80095dc <SPI_EraseSector+0x160>)
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	3301      	adds	r3, #1
 8009540:	b2da      	uxtb	r2, r3
 8009542:	4b26      	ldr	r3, [pc, #152]	; (80095dc <SPI_EraseSector+0x160>)
 8009544:	701a      	strb	r2, [r3, #0]
        }
        break;
 8009546:	e03c      	b.n	80095c2 <SPI_EraseSector+0x146>
      case 2 :
        if(waitTxCplt())
 8009548:	f7ff fcd6 	bl	8008ef8 <waitTxCplt>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d039      	beq.n	80095c6 <SPI_EraseSector+0x14a>
        {
          program_time = Delay_Tick;
 8009552:	4b27      	ldr	r3, [pc, #156]	; (80095f0 <SPI_EraseSector+0x174>)
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	4a27      	ldr	r2, [pc, #156]	; (80095f4 <SPI_EraseSector+0x178>)
 8009558:	6013      	str	r3, [r2, #0]
          SPI_NSS_OFF();
 800955a:	2201      	movs	r2, #1
 800955c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009560:	4821      	ldr	r0, [pc, #132]	; (80095e8 <SPI_EraseSector+0x16c>)
 8009562:	f003 fb8f 	bl	800cc84 <HAL_GPIO_WritePin>
          state++;
 8009566:	4b1d      	ldr	r3, [pc, #116]	; (80095dc <SPI_EraseSector+0x160>)
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	3301      	adds	r3, #1
 800956c:	b2da      	uxtb	r2, r3
 800956e:	4b1b      	ldr	r3, [pc, #108]	; (80095dc <SPI_EraseSector+0x160>)
 8009570:	701a      	strb	r2, [r3, #0]
        }
        break;
 8009572:	e028      	b.n	80095c6 <SPI_EraseSector+0x14a>
      case 3 :
        if(DelayDiff(Delay_Tick, program_time) >= 36000)
 8009574:	4b1e      	ldr	r3, [pc, #120]	; (80095f0 <SPI_EraseSector+0x174>)
 8009576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009578:	4b1e      	ldr	r3, [pc, #120]	; (80095f4 <SPI_EraseSector+0x178>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4619      	mov	r1, r3
 800957e:	4610      	mov	r0, r2
 8009580:	f7fe fc30 	bl	8007de4 <DelayDiff>
 8009584:	4602      	mov	r2, r0
 8009586:	f648 439f 	movw	r3, #35999	; 0x8c9f
 800958a:	429a      	cmp	r2, r3
 800958c:	d91d      	bls.n	80095ca <SPI_EraseSector+0x14e>
        {
          state++;
 800958e:	4b13      	ldr	r3, [pc, #76]	; (80095dc <SPI_EraseSector+0x160>)
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	3301      	adds	r3, #1
 8009594:	b2da      	uxtb	r2, r3
 8009596:	4b11      	ldr	r3, [pc, #68]	; (80095dc <SPI_EraseSector+0x160>)
 8009598:	701a      	strb	r2, [r3, #0]
          continue;
 800959a:	e019      	b.n	80095d0 <SPI_EraseSector+0x154>
        }
        break;
      case 4 :
        if(SPI_WaitForWrite())
 800959c:	f7ff fe14 	bl	80091c8 <SPI_WaitForWrite>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d013      	beq.n	80095ce <SPI_EraseSector+0x152>
        {
          state = 0;
 80095a6:	4b0d      	ldr	r3, [pc, #52]	; (80095dc <SPI_EraseSector+0x160>)
 80095a8:	2200      	movs	r2, #0
 80095aa:	701a      	strb	r2, [r3, #0]
          HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_RESET);
 80095ac:	2200      	movs	r2, #0
 80095ae:	2140      	movs	r1, #64	; 0x40
 80095b0:	480b      	ldr	r0, [pc, #44]	; (80095e0 <SPI_EraseSector+0x164>)
 80095b2:	f003 fb67 	bl	800cc84 <HAL_GPIO_WritePin>
          return 1;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e00b      	b.n	80095d2 <SPI_EraseSector+0x156>
        }
        break;
      default :
        state = 0;
 80095ba:	4b08      	ldr	r3, [pc, #32]	; (80095dc <SPI_EraseSector+0x160>)
 80095bc:	2200      	movs	r2, #0
 80095be:	701a      	strb	r2, [r3, #0]
        continue;
 80095c0:	e006      	b.n	80095d0 <SPI_EraseSector+0x154>
        break;
 80095c2:	bf00      	nop
 80095c4:	e004      	b.n	80095d0 <SPI_EraseSector+0x154>
        break;
 80095c6:	bf00      	nop
 80095c8:	e002      	b.n	80095d0 <SPI_EraseSector+0x154>
        break;
 80095ca:	bf00      	nop
 80095cc:	e000      	b.n	80095d0 <SPI_EraseSector+0x154>
        break;
 80095ce:	bf00      	nop
    }
  } while(0);
  return 0;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	20021442 	.word	0x20021442
 80095e0:	40020800 	.word	0x40020800
 80095e4:	20021400 	.word	0x20021400
 80095e8:	40020400 	.word	0x40020400
 80095ec:	200213fc 	.word	0x200213fc
 80095f0:	40000c00 	.word	0x40000c00
 80095f4:	20021444 	.word	0x20021444

080095f8 <SST25_Init>:
  return 0;
}


HAL_StatusTypeDef SST25_Init(SPI_HandleTypeDef * _hspi)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009600:	2300      	movs	r3, #0
 8009602:	73fb      	strb	r3, [r7, #15]
  hspi = _hspi;
 8009604:	4a05      	ldr	r2, [pc, #20]	; (800961c <SST25_Init+0x24>)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6013      	str	r3, [r2, #0]

  status = SPI_CheckChip();
 800960a:	f7ff fcbb 	bl	8008f84 <SPI_CheckChip>
 800960e:	4603      	mov	r3, r0
 8009610:	73fb      	strb	r3, [r7, #15]
  return status;
 8009612:	7bfb      	ldrb	r3, [r7, #15]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	200213fc 	.word	0x200213fc

08009620 <SST25_Erase4KSector>:

uint8_t SST25_Erase4KSector(uint32_t address)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  return SPI_EraseSector(address & 0x3FFFFF);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800962e:	4618      	mov	r0, r3
 8009630:	f7ff ff24 	bl	800947c <SPI_EraseSector>
 8009634:	4603      	mov	r3, r0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <SST25_Read>:
{
  return SPI_ChipErase();
}

uint8_t SST25_Read(uint32_t address, uint32_t size, uint8_t * buffer)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b084      	sub	sp, #16
 8009642:	af00      	add	r7, sp, #0
 8009644:	60f8      	str	r0, [r7, #12]
 8009646:	60b9      	str	r1, [r7, #8]
 8009648:	607a      	str	r2, [r7, #4]
  return SPI_Read(address & 0x3FFFFF, size, buffer);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	4618      	mov	r0, r3
 8009656:	f7ff fd31 	bl	80090bc <SPI_Read>
 800965a:	4603      	mov	r3, r0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <SST25_Write>:

uint8_t SST25_Write(uint32_t address, uint32_t size, const uint8_t * buffer)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
  return SPI_Write(address & 0x3FFFFF, size, buffer);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	68b9      	ldr	r1, [r7, #8]
 800967a:	4618      	mov	r0, r3
 800967c:	f7ff fe16 	bl	80092ac <SPI_Write>
 8009680:	4603      	mov	r3, r0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
	...

0800968c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009692:	4b0f      	ldr	r3, [pc, #60]	; (80096d0 <HAL_MspInit+0x44>)
 8009694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009696:	4a0e      	ldr	r2, [pc, #56]	; (80096d0 <HAL_MspInit+0x44>)
 8009698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800969c:	6413      	str	r3, [r2, #64]	; 0x40
 800969e:	4b0c      	ldr	r3, [pc, #48]	; (80096d0 <HAL_MspInit+0x44>)
 80096a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096a6:	607b      	str	r3, [r7, #4]
 80096a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096aa:	4b09      	ldr	r3, [pc, #36]	; (80096d0 <HAL_MspInit+0x44>)
 80096ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ae:	4a08      	ldr	r2, [pc, #32]	; (80096d0 <HAL_MspInit+0x44>)
 80096b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80096b4:	6453      	str	r3, [r2, #68]	; 0x44
 80096b6:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <HAL_MspInit+0x44>)
 80096b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096be:	603b      	str	r3, [r7, #0]
 80096c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80096c2:	bf00      	nop
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	40023800 	.word	0x40023800

080096d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08a      	sub	sp, #40	; 0x28
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096dc:	f107 0314 	add.w	r3, r7, #20
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]
 80096e4:	605a      	str	r2, [r3, #4]
 80096e6:	609a      	str	r2, [r3, #8]
 80096e8:	60da      	str	r2, [r3, #12]
 80096ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a33      	ldr	r2, [pc, #204]	; (80097c0 <HAL_ADC_MspInit+0xec>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d15f      	bne.n	80097b6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80096f6:	4b33      	ldr	r3, [pc, #204]	; (80097c4 <HAL_ADC_MspInit+0xf0>)
 80096f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096fa:	4a32      	ldr	r2, [pc, #200]	; (80097c4 <HAL_ADC_MspInit+0xf0>)
 80096fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009700:	6453      	str	r3, [r2, #68]	; 0x44
 8009702:	4b30      	ldr	r3, [pc, #192]	; (80097c4 <HAL_ADC_MspInit+0xf0>)
 8009704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800970a:	613b      	str	r3, [r7, #16]
 800970c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800970e:	4b2d      	ldr	r3, [pc, #180]	; (80097c4 <HAL_ADC_MspInit+0xf0>)
 8009710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009712:	4a2c      	ldr	r2, [pc, #176]	; (80097c4 <HAL_ADC_MspInit+0xf0>)
 8009714:	f043 0301 	orr.w	r3, r3, #1
 8009718:	6313      	str	r3, [r2, #48]	; 0x30
 800971a:	4b2a      	ldr	r3, [pc, #168]	; (80097c4 <HAL_ADC_MspInit+0xf0>)
 800971c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	60fb      	str	r3, [r7, #12]
 8009724:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009726:	4b27      	ldr	r3, [pc, #156]	; (80097c4 <HAL_ADC_MspInit+0xf0>)
 8009728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972a:	4a26      	ldr	r2, [pc, #152]	; (80097c4 <HAL_ADC_MspInit+0xf0>)
 800972c:	f043 0304 	orr.w	r3, r3, #4
 8009730:	6313      	str	r3, [r2, #48]	; 0x30
 8009732:	4b24      	ldr	r3, [pc, #144]	; (80097c4 <HAL_ADC_MspInit+0xf0>)
 8009734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009736:	f003 0304 	and.w	r3, r3, #4
 800973a:	60bb      	str	r3, [r7, #8]
 800973c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_12_TEMP_Pin|ADC1_13_BAT_Pin;
 800973e:	230c      	movs	r3, #12
 8009740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009742:	2303      	movs	r3, #3
 8009744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009746:	2300      	movs	r3, #0
 8009748:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800974a:	f107 0314 	add.w	r3, r7, #20
 800974e:	4619      	mov	r1, r3
 8009750:	481d      	ldr	r0, [pc, #116]	; (80097c8 <HAL_ADC_MspInit+0xf4>)
 8009752:	f003 f8e5 	bl	800c920 <HAL_GPIO_Init>
    //GPIO_InitStruct.Pull = GPIO_NOPULL;
    //HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8009756:	4b1d      	ldr	r3, [pc, #116]	; (80097cc <HAL_ADC_MspInit+0xf8>)
 8009758:	4a1d      	ldr	r2, [pc, #116]	; (80097d0 <HAL_ADC_MspInit+0xfc>)
 800975a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800975c:	4b1b      	ldr	r3, [pc, #108]	; (80097cc <HAL_ADC_MspInit+0xf8>)
 800975e:	2200      	movs	r2, #0
 8009760:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009762:	4b1a      	ldr	r3, [pc, #104]	; (80097cc <HAL_ADC_MspInit+0xf8>)
 8009764:	2200      	movs	r2, #0
 8009766:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009768:	4b18      	ldr	r3, [pc, #96]	; (80097cc <HAL_ADC_MspInit+0xf8>)
 800976a:	2200      	movs	r2, #0
 800976c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800976e:	4b17      	ldr	r3, [pc, #92]	; (80097cc <HAL_ADC_MspInit+0xf8>)
 8009770:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009774:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009776:	4b15      	ldr	r3, [pc, #84]	; (80097cc <HAL_ADC_MspInit+0xf8>)
 8009778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800977c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800977e:	4b13      	ldr	r3, [pc, #76]	; (80097cc <HAL_ADC_MspInit+0xf8>)
 8009780:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009784:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8009786:	4b11      	ldr	r3, [pc, #68]	; (80097cc <HAL_ADC_MspInit+0xf8>)
 8009788:	f44f 7280 	mov.w	r2, #256	; 0x100
 800978c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800978e:	4b0f      	ldr	r3, [pc, #60]	; (80097cc <HAL_ADC_MspInit+0xf8>)
 8009790:	2200      	movs	r2, #0
 8009792:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009794:	4b0d      	ldr	r3, [pc, #52]	; (80097cc <HAL_ADC_MspInit+0xf8>)
 8009796:	2200      	movs	r2, #0
 8009798:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800979a:	480c      	ldr	r0, [pc, #48]	; (80097cc <HAL_ADC_MspInit+0xf8>)
 800979c:	f002 fd28 	bl	800c1f0 <HAL_DMA_Init>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 80097a6:	f7ff fa6b 	bl	8008c80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a07      	ldr	r2, [pc, #28]	; (80097cc <HAL_ADC_MspInit+0xf8>)
 80097ae:	639a      	str	r2, [r3, #56]	; 0x38
 80097b0:	4a06      	ldr	r2, [pc, #24]	; (80097cc <HAL_ADC_MspInit+0xf8>)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80097b6:	bf00      	nop
 80097b8:	3728      	adds	r7, #40	; 0x28
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	40012000 	.word	0x40012000
 80097c4:	40023800 	.word	0x40023800
 80097c8:	40020800 	.word	0x40020800
 80097cc:	20024ae0 	.word	0x20024ae0
 80097d0:	40026410 	.word	0x40026410

080097d4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a0a      	ldr	r2, [pc, #40]	; (800980c <HAL_CRC_MspInit+0x38>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d10b      	bne.n	80097fe <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80097e6:	4b0a      	ldr	r3, [pc, #40]	; (8009810 <HAL_CRC_MspInit+0x3c>)
 80097e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ea:	4a09      	ldr	r2, [pc, #36]	; (8009810 <HAL_CRC_MspInit+0x3c>)
 80097ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80097f0:	6313      	str	r3, [r2, #48]	; 0x30
 80097f2:	4b07      	ldr	r3, [pc, #28]	; (8009810 <HAL_CRC_MspInit+0x3c>)
 80097f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80097fe:	bf00      	nop
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	40023000 	.word	0x40023000
 8009810:	40023800 	.word	0x40023800

08009814 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a0a      	ldr	r2, [pc, #40]	; (800984c <HAL_RNG_MspInit+0x38>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d10b      	bne.n	800983e <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8009826:	4b0a      	ldr	r3, [pc, #40]	; (8009850 <HAL_RNG_MspInit+0x3c>)
 8009828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800982a:	4a09      	ldr	r2, [pc, #36]	; (8009850 <HAL_RNG_MspInit+0x3c>)
 800982c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009830:	6353      	str	r3, [r2, #52]	; 0x34
 8009832:	4b07      	ldr	r3, [pc, #28]	; (8009850 <HAL_RNG_MspInit+0x3c>)
 8009834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983a:	60fb      	str	r3, [r7, #12]
 800983c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800983e:	bf00      	nop
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	50060800 	.word	0x50060800
 8009850:	40023800 	.word	0x40023800

08009854 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b08a      	sub	sp, #40	; 0x28
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800985c:	f107 0314 	add.w	r3, r7, #20
 8009860:	2200      	movs	r2, #0
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	605a      	str	r2, [r3, #4]
 8009866:	609a      	str	r2, [r3, #8]
 8009868:	60da      	str	r2, [r3, #12]
 800986a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a49      	ldr	r2, [pc, #292]	; (8009998 <HAL_SPI_MspInit+0x144>)
 8009872:	4293      	cmp	r3, r2
 8009874:	f040 808b 	bne.w	800998e <HAL_SPI_MspInit+0x13a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009878:	4b48      	ldr	r3, [pc, #288]	; (800999c <HAL_SPI_MspInit+0x148>)
 800987a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987c:	4a47      	ldr	r2, [pc, #284]	; (800999c <HAL_SPI_MspInit+0x148>)
 800987e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009882:	6413      	str	r3, [r2, #64]	; 0x40
 8009884:	4b45      	ldr	r3, [pc, #276]	; (800999c <HAL_SPI_MspInit+0x148>)
 8009886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800988c:	613b      	str	r3, [r7, #16]
 800988e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009890:	4b42      	ldr	r3, [pc, #264]	; (800999c <HAL_SPI_MspInit+0x148>)
 8009892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009894:	4a41      	ldr	r2, [pc, #260]	; (800999c <HAL_SPI_MspInit+0x148>)
 8009896:	f043 0302 	orr.w	r3, r3, #2
 800989a:	6313      	str	r3, [r2, #48]	; 0x30
 800989c:	4b3f      	ldr	r3, [pc, #252]	; (800999c <HAL_SPI_MspInit+0x148>)
 800989e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a0:	f003 0302 	and.w	r3, r3, #2
 80098a4:	60fb      	str	r3, [r7, #12]
 80098a6:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80098a8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80098ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098ae:	2302      	movs	r3, #2
 80098b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80098b2:	2301      	movs	r3, #1
 80098b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098b6:	2303      	movs	r3, #3
 80098b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80098ba:	2305      	movs	r3, #5
 80098bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80098be:	f107 0314 	add.w	r3, r7, #20
 80098c2:	4619      	mov	r1, r3
 80098c4:	4836      	ldr	r0, [pc, #216]	; (80099a0 <HAL_SPI_MspInit+0x14c>)
 80098c6:	f003 f82b 	bl	800c920 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80098ca:	4b36      	ldr	r3, [pc, #216]	; (80099a4 <HAL_SPI_MspInit+0x150>)
 80098cc:	4a36      	ldr	r2, [pc, #216]	; (80099a8 <HAL_SPI_MspInit+0x154>)
 80098ce:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80098d0:	4b34      	ldr	r3, [pc, #208]	; (80099a4 <HAL_SPI_MspInit+0x150>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80098d6:	4b33      	ldr	r3, [pc, #204]	; (80099a4 <HAL_SPI_MspInit+0x150>)
 80098d8:	2240      	movs	r2, #64	; 0x40
 80098da:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80098dc:	4b31      	ldr	r3, [pc, #196]	; (80099a4 <HAL_SPI_MspInit+0x150>)
 80098de:	2200      	movs	r2, #0
 80098e0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80098e2:	4b30      	ldr	r3, [pc, #192]	; (80099a4 <HAL_SPI_MspInit+0x150>)
 80098e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80098e8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80098ea:	4b2e      	ldr	r3, [pc, #184]	; (80099a4 <HAL_SPI_MspInit+0x150>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80098f0:	4b2c      	ldr	r3, [pc, #176]	; (80099a4 <HAL_SPI_MspInit+0x150>)
 80098f2:	2200      	movs	r2, #0
 80098f4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80098f6:	4b2b      	ldr	r3, [pc, #172]	; (80099a4 <HAL_SPI_MspInit+0x150>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80098fc:	4b29      	ldr	r3, [pc, #164]	; (80099a4 <HAL_SPI_MspInit+0x150>)
 80098fe:	2200      	movs	r2, #0
 8009900:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009902:	4b28      	ldr	r3, [pc, #160]	; (80099a4 <HAL_SPI_MspInit+0x150>)
 8009904:	2200      	movs	r2, #0
 8009906:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8009908:	4826      	ldr	r0, [pc, #152]	; (80099a4 <HAL_SPI_MspInit+0x150>)
 800990a:	f002 fc71 	bl	800c1f0 <HAL_DMA_Init>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d001      	beq.n	8009918 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8009914:	f7ff f9b4 	bl	8008c80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a22      	ldr	r2, [pc, #136]	; (80099a4 <HAL_SPI_MspInit+0x150>)
 800991c:	655a      	str	r2, [r3, #84]	; 0x54
 800991e:	4a21      	ldr	r2, [pc, #132]	; (80099a4 <HAL_SPI_MspInit+0x150>)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8009924:	4b21      	ldr	r3, [pc, #132]	; (80099ac <HAL_SPI_MspInit+0x158>)
 8009926:	4a22      	ldr	r2, [pc, #136]	; (80099b0 <HAL_SPI_MspInit+0x15c>)
 8009928:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800992a:	4b20      	ldr	r3, [pc, #128]	; (80099ac <HAL_SPI_MspInit+0x158>)
 800992c:	2200      	movs	r2, #0
 800992e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009930:	4b1e      	ldr	r3, [pc, #120]	; (80099ac <HAL_SPI_MspInit+0x158>)
 8009932:	2200      	movs	r2, #0
 8009934:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009936:	4b1d      	ldr	r3, [pc, #116]	; (80099ac <HAL_SPI_MspInit+0x158>)
 8009938:	2200      	movs	r2, #0
 800993a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800993c:	4b1b      	ldr	r3, [pc, #108]	; (80099ac <HAL_SPI_MspInit+0x158>)
 800993e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009942:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009944:	4b19      	ldr	r3, [pc, #100]	; (80099ac <HAL_SPI_MspInit+0x158>)
 8009946:	2200      	movs	r2, #0
 8009948:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800994a:	4b18      	ldr	r3, [pc, #96]	; (80099ac <HAL_SPI_MspInit+0x158>)
 800994c:	2200      	movs	r2, #0
 800994e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8009950:	4b16      	ldr	r3, [pc, #88]	; (80099ac <HAL_SPI_MspInit+0x158>)
 8009952:	2200      	movs	r2, #0
 8009954:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009956:	4b15      	ldr	r3, [pc, #84]	; (80099ac <HAL_SPI_MspInit+0x158>)
 8009958:	2200      	movs	r2, #0
 800995a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800995c:	4b13      	ldr	r3, [pc, #76]	; (80099ac <HAL_SPI_MspInit+0x158>)
 800995e:	2200      	movs	r2, #0
 8009960:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8009962:	4812      	ldr	r0, [pc, #72]	; (80099ac <HAL_SPI_MspInit+0x158>)
 8009964:	f002 fc44 	bl	800c1f0 <HAL_DMA_Init>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d001      	beq.n	8009972 <HAL_SPI_MspInit+0x11e>
    {
      Error_Handler();
 800996e:	f7ff f987 	bl	8008c80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a0d      	ldr	r2, [pc, #52]	; (80099ac <HAL_SPI_MspInit+0x158>)
 8009976:	659a      	str	r2, [r3, #88]	; 0x58
 8009978:	4a0c      	ldr	r2, [pc, #48]	; (80099ac <HAL_SPI_MspInit+0x158>)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 14, 0);
 800997e:	2200      	movs	r2, #0
 8009980:	210e      	movs	r1, #14
 8009982:	2024      	movs	r0, #36	; 0x24
 8009984:	f002 fa01 	bl	800bd8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8009988:	2024      	movs	r0, #36	; 0x24
 800998a:	f002 fa1a 	bl	800bdc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800998e:	bf00      	nop
 8009990:	3728      	adds	r7, #40	; 0x28
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	40003800 	.word	0x40003800
 800999c:	40023800 	.word	0x40023800
 80099a0:	40020400 	.word	0x40020400
 80099a4:	20024b50 	.word	0x20024b50
 80099a8:	40026070 	.word	0x40026070
 80099ac:	200248b8 	.word	0x200248b8
 80099b0:	40026058 	.word	0x40026058

080099b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a13      	ldr	r2, [pc, #76]	; (8009a10 <HAL_TIM_PWM_MspInit+0x5c>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d10c      	bne.n	80099e0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80099c6:	4b13      	ldr	r3, [pc, #76]	; (8009a14 <HAL_TIM_PWM_MspInit+0x60>)
 80099c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ca:	4a12      	ldr	r2, [pc, #72]	; (8009a14 <HAL_TIM_PWM_MspInit+0x60>)
 80099cc:	f043 0302 	orr.w	r3, r3, #2
 80099d0:	6413      	str	r3, [r2, #64]	; 0x40
 80099d2:	4b10      	ldr	r3, [pc, #64]	; (8009a14 <HAL_TIM_PWM_MspInit+0x60>)
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	f003 0302 	and.w	r3, r3, #2
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80099de:	e010      	b.n	8009a02 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a0c      	ldr	r2, [pc, #48]	; (8009a18 <HAL_TIM_PWM_MspInit+0x64>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d10b      	bne.n	8009a02 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80099ea:	4b0a      	ldr	r3, [pc, #40]	; (8009a14 <HAL_TIM_PWM_MspInit+0x60>)
 80099ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ee:	4a09      	ldr	r2, [pc, #36]	; (8009a14 <HAL_TIM_PWM_MspInit+0x60>)
 80099f0:	f043 0302 	orr.w	r3, r3, #2
 80099f4:	6453      	str	r3, [r2, #68]	; 0x44
 80099f6:	4b07      	ldr	r3, [pc, #28]	; (8009a14 <HAL_TIM_PWM_MspInit+0x60>)
 80099f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099fa:	f003 0302 	and.w	r3, r3, #2
 80099fe:	60bb      	str	r3, [r7, #8]
 8009a00:	68bb      	ldr	r3, [r7, #8]
}
 8009a02:	bf00      	nop
 8009a04:	3714      	adds	r7, #20
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	40000400 	.word	0x40000400
 8009a14:	40023800 	.word	0x40023800
 8009a18:	40010400 	.word	0x40010400

08009a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a31      	ldr	r2, [pc, #196]	; (8009af0 <HAL_TIM_Base_MspInit+0xd4>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d114      	bne.n	8009a58 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009a2e:	4b31      	ldr	r3, [pc, #196]	; (8009af4 <HAL_TIM_Base_MspInit+0xd8>)
 8009a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a32:	4a30      	ldr	r2, [pc, #192]	; (8009af4 <HAL_TIM_Base_MspInit+0xd8>)
 8009a34:	f043 0304 	orr.w	r3, r3, #4
 8009a38:	6413      	str	r3, [r2, #64]	; 0x40
 8009a3a:	4b2e      	ldr	r3, [pc, #184]	; (8009af4 <HAL_TIM_Base_MspInit+0xd8>)
 8009a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3e:	f003 0304 	and.w	r3, r3, #4
 8009a42:	60fb      	str	r3, [r7, #12]
 8009a44:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8009a46:	2200      	movs	r2, #0
 8009a48:	2103      	movs	r1, #3
 8009a4a:	201e      	movs	r0, #30
 8009a4c:	f002 f99d 	bl	800bd8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8009a50:	201e      	movs	r0, #30
 8009a52:	f002 f9b6 	bl	800bdc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8009a56:	e047      	b.n	8009ae8 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM7)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a26      	ldr	r2, [pc, #152]	; (8009af8 <HAL_TIM_Base_MspInit+0xdc>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d142      	bne.n	8009ae8 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8009a62:	4b24      	ldr	r3, [pc, #144]	; (8009af4 <HAL_TIM_Base_MspInit+0xd8>)
 8009a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a66:	4a23      	ldr	r2, [pc, #140]	; (8009af4 <HAL_TIM_Base_MspInit+0xd8>)
 8009a68:	f043 0320 	orr.w	r3, r3, #32
 8009a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8009a6e:	4b21      	ldr	r3, [pc, #132]	; (8009af4 <HAL_TIM_Base_MspInit+0xd8>)
 8009a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a72:	f003 0320 	and.w	r3, r3, #32
 8009a76:	60bb      	str	r3, [r7, #8]
 8009a78:	68bb      	ldr	r3, [r7, #8]
    hdma_tim7_up.Instance = DMA1_Stream2;
 8009a7a:	4b20      	ldr	r3, [pc, #128]	; (8009afc <HAL_TIM_Base_MspInit+0xe0>)
 8009a7c:	4a20      	ldr	r2, [pc, #128]	; (8009b00 <HAL_TIM_Base_MspInit+0xe4>)
 8009a7e:	601a      	str	r2, [r3, #0]
    hdma_tim7_up.Init.Channel = DMA_CHANNEL_1;
 8009a80:	4b1e      	ldr	r3, [pc, #120]	; (8009afc <HAL_TIM_Base_MspInit+0xe0>)
 8009a82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a86:	605a      	str	r2, [r3, #4]
    hdma_tim7_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009a88:	4b1c      	ldr	r3, [pc, #112]	; (8009afc <HAL_TIM_Base_MspInit+0xe0>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	609a      	str	r2, [r3, #8]
    hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a8e:	4b1b      	ldr	r3, [pc, #108]	; (8009afc <HAL_TIM_Base_MspInit+0xe0>)
 8009a90:	2200      	movs	r2, #0
 8009a92:	60da      	str	r2, [r3, #12]
    hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 8009a94:	4b19      	ldr	r3, [pc, #100]	; (8009afc <HAL_TIM_Base_MspInit+0xe0>)
 8009a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a9a:	611a      	str	r2, [r3, #16]
    hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a9c:	4b17      	ldr	r3, [pc, #92]	; (8009afc <HAL_TIM_Base_MspInit+0xe0>)
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	615a      	str	r2, [r3, #20]
    hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009aa2:	4b16      	ldr	r3, [pc, #88]	; (8009afc <HAL_TIM_Base_MspInit+0xe0>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	619a      	str	r2, [r3, #24]
    hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 8009aa8:	4b14      	ldr	r3, [pc, #80]	; (8009afc <HAL_TIM_Base_MspInit+0xe0>)
 8009aaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009aae:	61da      	str	r2, [r3, #28]
    hdma_tim7_up.Init.Priority = DMA_PRIORITY_LOW;
 8009ab0:	4b12      	ldr	r3, [pc, #72]	; (8009afc <HAL_TIM_Base_MspInit+0xe0>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	621a      	str	r2, [r3, #32]
    hdma_tim7_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009ab6:	4b11      	ldr	r3, [pc, #68]	; (8009afc <HAL_TIM_Base_MspInit+0xe0>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 8009abc:	480f      	ldr	r0, [pc, #60]	; (8009afc <HAL_TIM_Base_MspInit+0xe0>)
 8009abe:	f002 fb97 	bl	800c1f0 <HAL_DMA_Init>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <HAL_TIM_Base_MspInit+0xb0>
      Error_Handler();
 8009ac8:	f7ff f8da 	bl	8008c80 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a0b      	ldr	r2, [pc, #44]	; (8009afc <HAL_TIM_Base_MspInit+0xe0>)
 8009ad0:	621a      	str	r2, [r3, #32]
 8009ad2:	4a0a      	ldr	r2, [pc, #40]	; (8009afc <HAL_TIM_Base_MspInit+0xe0>)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8009ad8:	2200      	movs	r2, #0
 8009ada:	2105      	movs	r1, #5
 8009adc:	2037      	movs	r0, #55	; 0x37
 8009ade:	f002 f954 	bl	800bd8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8009ae2:	2037      	movs	r0, #55	; 0x37
 8009ae4:	f002 f96d 	bl	800bdc2 <HAL_NVIC_EnableIRQ>
}
 8009ae8:	bf00      	nop
 8009aea:	3710      	adds	r7, #16
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	40000800 	.word	0x40000800
 8009af4:	40023800 	.word	0x40023800
 8009af8:	40001400 	.word	0x40001400
 8009afc:	20024824 	.word	0x20024824
 8009b00:	40026040 	.word	0x40026040

08009b04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b08a      	sub	sp, #40	; 0x28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b0c:	f107 0314 	add.w	r3, r7, #20
 8009b10:	2200      	movs	r2, #0
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	605a      	str	r2, [r3, #4]
 8009b16:	609a      	str	r2, [r3, #8]
 8009b18:	60da      	str	r2, [r3, #12]
 8009b1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a22      	ldr	r2, [pc, #136]	; (8009bac <HAL_TIM_MspPostInit+0xa8>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d11d      	bne.n	8009b62 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009b26:	4b22      	ldr	r3, [pc, #136]	; (8009bb0 <HAL_TIM_MspPostInit+0xac>)
 8009b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2a:	4a21      	ldr	r2, [pc, #132]	; (8009bb0 <HAL_TIM_MspPostInit+0xac>)
 8009b2c:	f043 0304 	orr.w	r3, r3, #4
 8009b30:	6313      	str	r3, [r2, #48]	; 0x30
 8009b32:	4b1f      	ldr	r3, [pc, #124]	; (8009bb0 <HAL_TIM_MspPostInit+0xac>)
 8009b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b36:	f003 0304 	and.w	r3, r3, #4
 8009b3a:	613b      	str	r3, [r7, #16]
 8009b3c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH3_CHOKE_Pin|TIM3_CH4_ACC_Pin;
 8009b3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b44:	2302      	movs	r3, #2
 8009b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009b48:	2302      	movs	r3, #2
 8009b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009b50:	2302      	movs	r3, #2
 8009b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b54:	f107 0314 	add.w	r3, r7, #20
 8009b58:	4619      	mov	r1, r3
 8009b5a:	4816      	ldr	r0, [pc, #88]	; (8009bb4 <HAL_TIM_MspPostInit+0xb0>)
 8009b5c:	f002 fee0 	bl	800c920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8009b60:	e020      	b.n	8009ba4 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a14      	ldr	r2, [pc, #80]	; (8009bb8 <HAL_TIM_MspPostInit+0xb4>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d11b      	bne.n	8009ba4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b6c:	4b10      	ldr	r3, [pc, #64]	; (8009bb0 <HAL_TIM_MspPostInit+0xac>)
 8009b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b70:	4a0f      	ldr	r2, [pc, #60]	; (8009bb0 <HAL_TIM_MspPostInit+0xac>)
 8009b72:	f043 0302 	orr.w	r3, r3, #2
 8009b76:	6313      	str	r3, [r2, #48]	; 0x30
 8009b78:	4b0d      	ldr	r3, [pc, #52]	; (8009bb0 <HAL_TIM_MspPostInit+0xac>)
 8009b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7c:	f003 0302 	and.w	r3, r3, #2
 8009b80:	60fb      	str	r3, [r7, #12]
 8009b82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH3N_ADC_RW_Pin;
 8009b84:	2302      	movs	r3, #2
 8009b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b88:	2302      	movs	r3, #2
 8009b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b90:	2303      	movs	r3, #3
 8009b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8009b94:	2303      	movs	r3, #3
 8009b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM8_CH3N_ADC_RW_GPIO_Port, &GPIO_InitStruct);
 8009b98:	f107 0314 	add.w	r3, r7, #20
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4807      	ldr	r0, [pc, #28]	; (8009bbc <HAL_TIM_MspPostInit+0xb8>)
 8009ba0:	f002 febe 	bl	800c920 <HAL_GPIO_Init>
}
 8009ba4:	bf00      	nop
 8009ba6:	3728      	adds	r7, #40	; 0x28
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	40000400 	.word	0x40000400
 8009bb0:	40023800 	.word	0x40023800
 8009bb4:	40020800 	.word	0x40020800
 8009bb8:	40010400 	.word	0x40010400
 8009bbc:	40020400 	.word	0x40020400

08009bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08a      	sub	sp, #40	; 0x28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bc8:	f107 0314 	add.w	r3, r7, #20
 8009bcc:	2200      	movs	r2, #0
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	605a      	str	r2, [r3, #4]
 8009bd2:	609a      	str	r2, [r3, #8]
 8009bd4:	60da      	str	r2, [r3, #12]
 8009bd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a4a      	ldr	r2, [pc, #296]	; (8009d08 <HAL_UART_MspInit+0x148>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	f040 808e 	bne.w	8009d00 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009be4:	4b49      	ldr	r3, [pc, #292]	; (8009d0c <HAL_UART_MspInit+0x14c>)
 8009be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be8:	4a48      	ldr	r2, [pc, #288]	; (8009d0c <HAL_UART_MspInit+0x14c>)
 8009bea:	f043 0310 	orr.w	r3, r3, #16
 8009bee:	6453      	str	r3, [r2, #68]	; 0x44
 8009bf0:	4b46      	ldr	r3, [pc, #280]	; (8009d0c <HAL_UART_MspInit+0x14c>)
 8009bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bf4:	f003 0310 	and.w	r3, r3, #16
 8009bf8:	613b      	str	r3, [r7, #16]
 8009bfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bfc:	4b43      	ldr	r3, [pc, #268]	; (8009d0c <HAL_UART_MspInit+0x14c>)
 8009bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c00:	4a42      	ldr	r2, [pc, #264]	; (8009d0c <HAL_UART_MspInit+0x14c>)
 8009c02:	f043 0301 	orr.w	r3, r3, #1
 8009c06:	6313      	str	r3, [r2, #48]	; 0x30
 8009c08:	4b40      	ldr	r3, [pc, #256]	; (8009d0c <HAL_UART_MspInit+0x14c>)
 8009c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	60fb      	str	r3, [r7, #12]
 8009c12:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009c14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c1a:	2302      	movs	r3, #2
 8009c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c22:	2303      	movs	r3, #3
 8009c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009c26:	2307      	movs	r3, #7
 8009c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c2a:	f107 0314 	add.w	r3, r7, #20
 8009c2e:	4619      	mov	r1, r3
 8009c30:	4837      	ldr	r0, [pc, #220]	; (8009d10 <HAL_UART_MspInit+0x150>)
 8009c32:	f002 fe75 	bl	800c920 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8009c36:	4b37      	ldr	r3, [pc, #220]	; (8009d14 <HAL_UART_MspInit+0x154>)
 8009c38:	4a37      	ldr	r2, [pc, #220]	; (8009d18 <HAL_UART_MspInit+0x158>)
 8009c3a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8009c3c:	4b35      	ldr	r3, [pc, #212]	; (8009d14 <HAL_UART_MspInit+0x154>)
 8009c3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009c42:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009c44:	4b33      	ldr	r3, [pc, #204]	; (8009d14 <HAL_UART_MspInit+0x154>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009c4a:	4b32      	ldr	r3, [pc, #200]	; (8009d14 <HAL_UART_MspInit+0x154>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009c50:	4b30      	ldr	r3, [pc, #192]	; (8009d14 <HAL_UART_MspInit+0x154>)
 8009c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c56:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009c58:	4b2e      	ldr	r3, [pc, #184]	; (8009d14 <HAL_UART_MspInit+0x154>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009c5e:	4b2d      	ldr	r3, [pc, #180]	; (8009d14 <HAL_UART_MspInit+0x154>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8009c64:	4b2b      	ldr	r3, [pc, #172]	; (8009d14 <HAL_UART_MspInit+0x154>)
 8009c66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c6a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009c6c:	4b29      	ldr	r3, [pc, #164]	; (8009d14 <HAL_UART_MspInit+0x154>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009c72:	4b28      	ldr	r3, [pc, #160]	; (8009d14 <HAL_UART_MspInit+0x154>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009c78:	4826      	ldr	r0, [pc, #152]	; (8009d14 <HAL_UART_MspInit+0x154>)
 8009c7a:	f002 fab9 	bl	800c1f0 <HAL_DMA_Init>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8009c84:	f7fe fffc 	bl	8008c80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a22      	ldr	r2, [pc, #136]	; (8009d14 <HAL_UART_MspInit+0x154>)
 8009c8c:	66da      	str	r2, [r3, #108]	; 0x6c
 8009c8e:	4a21      	ldr	r2, [pc, #132]	; (8009d14 <HAL_UART_MspInit+0x154>)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8009c94:	4b21      	ldr	r3, [pc, #132]	; (8009d1c <HAL_UART_MspInit+0x15c>)
 8009c96:	4a22      	ldr	r2, [pc, #136]	; (8009d20 <HAL_UART_MspInit+0x160>)
 8009c98:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8009c9a:	4b20      	ldr	r3, [pc, #128]	; (8009d1c <HAL_UART_MspInit+0x15c>)
 8009c9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009ca0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009ca2:	4b1e      	ldr	r3, [pc, #120]	; (8009d1c <HAL_UART_MspInit+0x15c>)
 8009ca4:	2240      	movs	r2, #64	; 0x40
 8009ca6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009ca8:	4b1c      	ldr	r3, [pc, #112]	; (8009d1c <HAL_UART_MspInit+0x15c>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009cae:	4b1b      	ldr	r3, [pc, #108]	; (8009d1c <HAL_UART_MspInit+0x15c>)
 8009cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009cb4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009cb6:	4b19      	ldr	r3, [pc, #100]	; (8009d1c <HAL_UART_MspInit+0x15c>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009cbc:	4b17      	ldr	r3, [pc, #92]	; (8009d1c <HAL_UART_MspInit+0x15c>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8009cc2:	4b16      	ldr	r3, [pc, #88]	; (8009d1c <HAL_UART_MspInit+0x15c>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009cc8:	4b14      	ldr	r3, [pc, #80]	; (8009d1c <HAL_UART_MspInit+0x15c>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009cce:	4b13      	ldr	r3, [pc, #76]	; (8009d1c <HAL_UART_MspInit+0x15c>)
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8009cd4:	4811      	ldr	r0, [pc, #68]	; (8009d1c <HAL_UART_MspInit+0x15c>)
 8009cd6:	f002 fa8b 	bl	800c1f0 <HAL_DMA_Init>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d001      	beq.n	8009ce4 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8009ce0:	f7fe ffce 	bl	8008c80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a0d      	ldr	r2, [pc, #52]	; (8009d1c <HAL_UART_MspInit+0x15c>)
 8009ce8:	669a      	str	r2, [r3, #104]	; 0x68
 8009cea:	4a0c      	ldr	r2, [pc, #48]	; (8009d1c <HAL_UART_MspInit+0x15c>)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 9, 0);
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	2109      	movs	r1, #9
 8009cf4:	2025      	movs	r0, #37	; 0x25
 8009cf6:	f002 f848 	bl	800bd8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009cfa:	2025      	movs	r0, #37	; 0x25
 8009cfc:	f002 f861 	bl	800bdc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009d00:	bf00      	nop
 8009d02:	3728      	adds	r7, #40	; 0x28
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	40011000 	.word	0x40011000
 8009d0c:	40023800 	.word	0x40023800
 8009d10:	40020000 	.word	0x40020000
 8009d14:	20024a00 	.word	0x20024a00
 8009d18:	40026440 	.word	0x40026440
 8009d1c:	20024958 	.word	0x20024958
 8009d20:	400264b8 	.word	0x400264b8

08009d24 <__NVIC_SystemReset>:
{
 8009d24:	b480      	push	{r7}
 8009d26:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009d28:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009d2c:	4b05      	ldr	r3, [pc, #20]	; (8009d44 <__NVIC_SystemReset+0x20>)
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009d34:	4903      	ldr	r1, [pc, #12]	; (8009d44 <__NVIC_SystemReset+0x20>)
 8009d36:	4b04      	ldr	r3, [pc, #16]	; (8009d48 <__NVIC_SystemReset+0x24>)
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	60cb      	str	r3, [r1, #12]
 8009d3c:	f3bf 8f4f 	dsb	sy
    __NOP();
 8009d40:	bf00      	nop
 8009d42:	e7fd      	b.n	8009d40 <__NVIC_SystemReset+0x1c>
 8009d44:	e000ed00 	.word	0xe000ed00
 8009d48:	05fa0004 	.word	0x05fa0004

08009d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009d50:	e7fe      	b.n	8009d50 <NMI_Handler+0x4>

08009d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  NVIC_SystemReset();
 8009d56:	f7ff ffe5 	bl	8009d24 <__NVIC_SystemReset>

08009d5a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009d5e:	e7fe      	b.n	8009d5e <MemManage_Handler+0x4>

08009d60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009d60:	b480      	push	{r7}
 8009d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009d64:	e7fe      	b.n	8009d64 <BusFault_Handler+0x4>

08009d66 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009d66:	b480      	push	{r7}
 8009d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009d6a:	e7fe      	b.n	8009d6a <UsageFault_Handler+0x4>

08009d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009d70:	bf00      	nop
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009d7e:	bf00      	nop
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009d8c:	bf00      	nop
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009d9a:	f001 faf9 	bl	800b390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009d9e:	bf00      	nop
 8009da0:	bd80      	pop	{r7, pc}
	...

08009da4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim7_up);
 8009da8:	4802      	ldr	r0, [pc, #8]	; (8009db4 <DMA1_Stream2_IRQHandler+0x10>)
 8009daa:	f002 fb51 	bl	800c450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8009dae:	bf00      	nop
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	20024824 	.word	0x20024824

08009db8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8009dbc:	4802      	ldr	r0, [pc, #8]	; (8009dc8 <DMA1_Stream3_IRQHandler+0x10>)
 8009dbe:	f002 fb47 	bl	800c450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8009dc2:	bf00      	nop
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	200248b8 	.word	0x200248b8

08009dcc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8009dd0:	4802      	ldr	r0, [pc, #8]	; (8009ddc <DMA1_Stream4_IRQHandler+0x10>)
 8009dd2:	f002 fb3d 	bl	800c450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8009dd6:	bf00      	nop
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	20024b50 	.word	0x20024b50

08009de0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8009de4:	4802      	ldr	r0, [pc, #8]	; (8009df0 <SPI2_IRQHandler+0x10>)
 8009de6:	f004 fe11 	bl	800ea0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8009dea:	bf00      	nop
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	20024740 	.word	0x20024740

08009df4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009df8:	4802      	ldr	r0, [pc, #8]	; (8009e04 <USART1_IRQHandler+0x10>)
 8009dfa:	f006 fe97 	bl	8010b2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009dfe:	bf00      	nop
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	20024a60 	.word	0x20024a60

08009e08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8009e0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009e10:	f002 ff52 	bl	800ccb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8009e14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009e18:	f002 ff4e 	bl	800ccb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8009e1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009e20:	f002 ff4a 	bl	800ccb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8009e24:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009e28:	f002 ff46 	bl	800ccb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009e2c:	bf00      	nop
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009e34:	4802      	ldr	r0, [pc, #8]	; (8009e40 <TIM4_IRQHandler+0x10>)
 8009e36:	f005 fcfa 	bl	800f82e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8009e3a:	bf00      	nop
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	200247e4 	.word	0x200247e4

08009e44 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8009e48:	4802      	ldr	r0, [pc, #8]	; (8009e54 <TIM7_IRQHandler+0x10>)
 8009e4a:	f005 fcf0 	bl	800f82e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8009e4e:	bf00      	nop
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20024bb0 	.word	0x20024bb0

08009e58 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009e5c:	4802      	ldr	r0, [pc, #8]	; (8009e68 <DMA2_Stream0_IRQHandler+0x10>)
 8009e5e:	f002 faf7 	bl	800c450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8009e62:	bf00      	nop
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	20024ae0 	.word	0x20024ae0

08009e6c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8009e70:	4802      	ldr	r0, [pc, #8]	; (8009e7c <DMA2_Stream2_IRQHandler+0x10>)
 8009e72:	f002 faed 	bl	800c450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8009e76:	bf00      	nop
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	20024a00 	.word	0x20024a00

08009e80 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8009e84:	4802      	ldr	r0, [pc, #8]	; (8009e90 <DMA2_Stream7_IRQHandler+0x10>)
 8009e86:	f002 fae3 	bl	800c450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8009e8a:	bf00      	nop
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	20024958 	.word	0x20024958

08009e94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009e94:	b480      	push	{r7}
 8009e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009e98:	4b08      	ldr	r3, [pc, #32]	; (8009ebc <SystemInit+0x28>)
 8009e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e9e:	4a07      	ldr	r2, [pc, #28]	; (8009ebc <SystemInit+0x28>)
 8009ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009ea8:	4b04      	ldr	r3, [pc, #16]	; (8009ebc <SystemInit+0x28>)
 8009eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009eae:	609a      	str	r2, [r3, #8]
#endif
}
 8009eb0:	bf00      	nop
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	e000ed00 	.word	0xe000ed00

08009ec0 <SCB_InvalidateDCache_by_Addr>:
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b087      	sub	sp, #28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8009ed2:	2320      	movs	r3, #32
 8009ed4:	60fb      	str	r3, [r7, #12]
 8009ed6:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 8009eda:	e00b      	b.n	8009ef4 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 8009edc:	4a0c      	ldr	r2, [pc, #48]	; (8009f10 <SCB_InvalidateDCache_by_Addr+0x50>)
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	4413      	add	r3, r2
 8009eea:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009eec:	697a      	ldr	r2, [r7, #20]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	dcf0      	bgt.n	8009edc <SCB_InvalidateDCache_by_Addr+0x1c>
 8009efa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009efe:	f3bf 8f6f 	isb	sy
}
 8009f02:	bf00      	nop
 8009f04:	371c      	adds	r7, #28
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	e000ed00 	.word	0xe000ed00

08009f14 <SCB_CleanDCache_by_Addr>:
{
 8009f14:	b480      	push	{r7}
 8009f16:	b087      	sub	sp, #28
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8009f26:	2320      	movs	r3, #32
 8009f28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009f2a:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 8009f2e:	e00b      	b.n	8009f48 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 8009f30:	4a0c      	ldr	r2, [pc, #48]	; (8009f64 <SCB_CleanDCache_by_Addr+0x50>)
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009f40:	697a      	ldr	r2, [r7, #20]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	1ad3      	subs	r3, r2, r3
 8009f46:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	dcf0      	bgt.n	8009f30 <SCB_CleanDCache_by_Addr+0x1c>
 8009f4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009f52:	f3bf 8f6f 	isb	sy
}
 8009f56:	bf00      	nop
 8009f58:	371c      	adds	r7, #28
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	e000ed00 	.word	0xe000ed00

08009f68 <entercritical>:

#ifndef taskENTER_CRITICAL
#define configMAX_SYSCALL_INTERRUPT_PRIORITY 5
#define taskENTER_CRITICAL entercritical
static inline void entercritical(void)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	af00      	add	r7, sp, #0
    " dsb                           \n" \
    " cpsie i                         \n" \
    :"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
  );
  */
}
 8009f6c:	bf00      	nop
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <exitcritical>:
#endif

#ifndef taskEXIT_CRITICAL
#define taskEXIT_CRITICAL exitcritical
static inline void exitcritical(void)
{
 8009f76:	b480      	push	{r7}
 8009f78:	af00      	add	r7, sp, #0
  __asm volatile
  (
    " msr basepri, %0 " :: "r" ( 0 ) : "memory"
  );
  */
}
 8009f7a:	bf00      	nop
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <Msg_GetSrc>:

static sGetterHandle xHandles[] = {
    {{0},{0},{0},{0},{0},{0}, &huart1, {etrCTRL,etrPC,etrNone} },
};

static inline int Msg_GetSrc(uint8_t xValue) { return (xValue & 7); }
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	71fb      	strb	r3, [r7, #7]
 8009f8e:	79fb      	ldrb	r3, [r7, #7]
 8009f90:	f003 0307 	and.w	r3, r3, #7
 8009f94:	4618      	mov	r0, r3
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <Msg_GetDest>:
static inline int Msg_GetDest(uint8_t xValue) { return ((xValue >> 3) & 7); }
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	71fb      	strb	r3, [r7, #7]
 8009faa:	79fb      	ldrb	r3, [r7, #7]
 8009fac:	08db      	lsrs	r3, r3, #3
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	f003 0307 	and.w	r3, r3, #7
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <CacheInvalidate>:

static inline void CacheInvalidate(void * buffer, uint32_t size)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f003 031f 	and.w	r3, r3, #31
 8009fd0:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d105      	bne.n	8009fe4 <CacheInvalidate+0x24>
    SCB_InvalidateDCache_by_Addr((uint32_t*)buffer, size);
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f7ff ff6f 	bl	8009ec0 <SCB_InvalidateDCache_by_Addr>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 8009fe2:	e009      	b.n	8009ff8 <CacheInvalidate+0x38>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	4618      	mov	r0, r3
 8009fec:	683a      	ldr	r2, [r7, #0]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	f7ff ff64 	bl	8009ec0 <SCB_InvalidateDCache_by_Addr>
}
 8009ff8:	bf00      	nop
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <CacheClean>:

static inline void CacheClean(void * buffer, uint32_t size)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f003 031f 	and.w	r3, r3, #31
 800a010:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d105      	bne.n	800a024 <CacheClean+0x24>
    SCB_CleanDCache_by_Addr((uint32_t*)buffer, size);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7ff ff79 	bl	8009f14 <SCB_CleanDCache_by_Addr>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 800a022:	e009      	b.n	800a038 <CacheClean+0x38>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	4618      	mov	r0, r3
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	4413      	add	r3, r2
 800a032:	4619      	mov	r1, r3
 800a034:	f7ff ff6e 	bl	8009f14 <SCB_CleanDCache_by_Addr>
}
 800a038:	bf00      	nop
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <calculatePacketId>:

static inline uint16_t calculatePacketId(void)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
  static uint16_t counter = 0;
  uint16_t returnvalue;
  do
  {
    counter++;
 800a046:	4b19      	ldr	r3, [pc, #100]	; (800a0ac <calculatePacketId+0x6c>)
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	3301      	adds	r3, #1
 800a04c:	b29a      	uxth	r2, r3
 800a04e:	4b17      	ldr	r3, [pc, #92]	; (800a0ac <calculatePacketId+0x6c>)
 800a050:	801a      	strh	r2, [r3, #0]
    uint16_t localcounter = counter;
 800a052:	4b16      	ldr	r3, [pc, #88]	; (800a0ac <calculatePacketId+0x6c>)
 800a054:	881b      	ldrh	r3, [r3, #0]
 800a056:	81fb      	strh	r3, [r7, #14]
    uint32_t now = Delay_Tick;
 800a058:	4b15      	ldr	r3, [pc, #84]	; (800a0b0 <calculatePacketId+0x70>)
 800a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05c:	60bb      	str	r3, [r7, #8]
    uint8_t crcdata[6] = {(localcounter >> 8) & 0xFF,localcounter & 0xFF, (now >> 24) & 0xFF, (now >> 16) & 0xFF, (now >> 8) & 0xFF, now & 0xFF } ;
 800a05e:	89fb      	ldrh	r3, [r7, #14]
 800a060:	0a1b      	lsrs	r3, r3, #8
 800a062:	b29b      	uxth	r3, r3
 800a064:	b2db      	uxtb	r3, r3
 800a066:	703b      	strb	r3, [r7, #0]
 800a068:	89fb      	ldrh	r3, [r7, #14]
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	707b      	strb	r3, [r7, #1]
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	0e1b      	lsrs	r3, r3, #24
 800a072:	b2db      	uxtb	r3, r3
 800a074:	70bb      	strb	r3, [r7, #2]
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	0c1b      	lsrs	r3, r3, #16
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	70fb      	strb	r3, [r7, #3]
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	0a1b      	lsrs	r3, r3, #8
 800a082:	b2db      	uxtb	r3, r3
 800a084:	713b      	strb	r3, [r7, #4]
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	717b      	strb	r3, [r7, #5]
    returnvalue = CRC16_Generate(crcdata, sizeof(crcdata));
 800a08c:	463b      	mov	r3, r7
 800a08e:	2106      	movs	r1, #6
 800a090:	4618      	mov	r0, r3
 800a092:	f7fd f89d 	bl	80071d0 <CRC16_Generate>
 800a096:	4603      	mov	r3, r0
 800a098:	80fb      	strh	r3, [r7, #6]
  } while(returnvalue == 0);
 800a09a:	88fb      	ldrh	r3, [r7, #6]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d0d2      	beq.n	800a046 <calculatePacketId+0x6>
  return returnvalue;
 800a0a0:	88fb      	ldrh	r3, [r7, #6]

}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	20021468 	.word	0x20021468
 800a0b0:	40000c00 	.word	0x40000c00

0800a0b4 <packager>:

static inline void packager(sGetterHandle* xHandle, uint8_t* xMsgPtr, uint16_t xMsgLen, eTransChannels xChaDest, uint16_t aPacketId) {
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b086      	sub	sp, #24
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	4611      	mov	r1, r2
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	80fb      	strh	r3, [r7, #6]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	717b      	strb	r3, [r7, #5]

    if (xHandle && xMsgLen<MAX_PACK_LEN)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f000 80ed 	beq.w	800a2ac <packager+0x1f8>
 800a0d2:	88fb      	ldrh	r3, [r7, #6]
 800a0d4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800a0d8:	f080 80e8 	bcs.w	800a2ac <packager+0x1f8>
    {
        uint16_t aCrc15 = 0;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	823b      	strh	r3, [r7, #16]
        uint16_t aTotLen = xMsgLen ? xMsgLen + 10 : 8;
 800a0e0:	88fb      	ldrh	r3, [r7, #6]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d003      	beq.n	800a0ee <packager+0x3a>
 800a0e6:	88fb      	ldrh	r3, [r7, #6]
 800a0e8:	330a      	adds	r3, #10
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	e000      	b.n	800a0f0 <packager+0x3c>
 800a0ee:	2308      	movs	r3, #8
 800a0f0:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = etrACIS | ( xChaDest << 3 );
 800a0f2:	797b      	ldrb	r3, [r7, #5]
 800a0f4:	00db      	lsls	r3, r3, #3
 800a0f6:	b25b      	sxtb	r3, r3
 800a0f8:	f043 0302 	orr.w	r3, r3, #2
 800a0fc:	b25b      	sxtb	r3, r3
 800a0fe:	74fb      	strb	r3, [r7, #19]


        xHandle->BufSender[0] = 0x55;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800a106:	2255      	movs	r2, #85	; 0x55
 800a108:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[1] = 0x55;
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	f241 0381 	movw	r3, #4225	; 0x1081
 800a110:	4413      	add	r3, r2
 800a112:	2255      	movs	r2, #85	; 0x55
 800a114:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[2] = aHeadByte;
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	f241 0382 	movw	r3, #4226	; 0x1082
 800a11c:	4413      	add	r3, r2
 800a11e:	7cfa      	ldrb	r2, [r7, #19]
 800a120:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[3] = aTotLen & 0xFF;
 800a122:	8abb      	ldrh	r3, [r7, #20]
 800a124:	b2d9      	uxtb	r1, r3
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	f241 0383 	movw	r3, #4227	; 0x1083
 800a12c:	4413      	add	r3, r2
 800a12e:	460a      	mov	r2, r1
 800a130:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[4] = (aTotLen >> 8) & 0xFF;
 800a132:	8abb      	ldrh	r3, [r7, #20]
 800a134:	0a1b      	lsrs	r3, r3, #8
 800a136:	b29b      	uxth	r3, r3
 800a138:	b2d9      	uxtb	r1, r3
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	f241 0384 	movw	r3, #4228	; 0x1084
 800a140:	4413      	add	r3, r2
 800a142:	460a      	mov	r2, r1
 800a144:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[5] = aPacketId & 0xFF;
 800a146:	8c3b      	ldrh	r3, [r7, #32]
 800a148:	b2d9      	uxtb	r1, r3
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	f241 0385 	movw	r3, #4229	; 0x1085
 800a150:	4413      	add	r3, r2
 800a152:	460a      	mov	r2, r1
 800a154:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[6] = (aPacketId >> 8) & 0xFF;
 800a156:	8c3b      	ldrh	r3, [r7, #32]
 800a158:	0a1b      	lsrs	r3, r3, #8
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	b2d9      	uxtb	r1, r3
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	f241 0386 	movw	r3, #4230	; 0x1086
 800a164:	4413      	add	r3, r2
 800a166:	460a      	mov	r2, r1
 800a168:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[7] = CRC8_Generate(xHandle->BufSender, 7);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800a170:	2107      	movs	r1, #7
 800a172:	4618      	mov	r0, r3
 800a174:	f7fd f848 	bl	8007208 <CRC8_Generate>
 800a178:	4603      	mov	r3, r0
 800a17a:	4619      	mov	r1, r3
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	f241 0387 	movw	r3, #4231	; 0x1087
 800a182:	4413      	add	r3, r2
 800a184:	460a      	mov	r2, r1
 800a186:	701a      	strb	r2, [r3, #0]


        if (xMsgLen)
 800a188:	88fb      	ldrh	r3, [r7, #6]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d013      	beq.n	800a1b6 <packager+0x102>
        {
          memcpy(&xHandle->BufSender[8], xMsgPtr, xMsgLen);
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	f241 0388 	movw	r3, #4232	; 0x1088
 800a194:	4413      	add	r3, r2
 800a196:	88fa      	ldrh	r2, [r7, #6]
 800a198:	68b9      	ldr	r1, [r7, #8]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f007 fb46 	bl	801182c <memcpy>
          aCrc15 = CRC16_Generate(xHandle->BufSender, xMsgLen + 8);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 800a1a6:	88fb      	ldrh	r3, [r7, #6]
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	f7fd f80f 	bl	80071d0 <CRC16_Generate>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	823b      	strh	r3, [r7, #16]
        }

        uint8_t handled = 0;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	75fb      	strb	r3, [r7, #23]

        if(!protIsSome(&xHandle->xTxFifo))
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	f241 3388 	movw	r3, #5000	; 0x1388
 800a1c0:	4413      	add	r3, r2
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f001 f861 	bl	800b28a <protIsSome>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d147      	bne.n	800a25e <packager+0x1aa>
        {
          taskENTER_CRITICAL();
 800a1ce:	f7ff fecb 	bl	8009f68 <entercritical>
          if(!xHandle->TxBusy)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d13c      	bne.n	800a25a <packager+0x1a6>
          {
            xHandle->TxBusy = 1;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	701a      	strb	r2, [r3, #0]
            handled = 1;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 800a1ee:	f7ff fec2 	bl	8009f76 <exitcritical>

            memcpy(&xHandle->BufTx[0],xHandle->BufSender,8);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f503 7040 	add.w	r0, r3, #768	; 0x300
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800a1fe:	2208      	movs	r2, #8
 800a200:	4619      	mov	r1, r3
 800a202:	f007 fb13 	bl	801182c <memcpy>
            if (xMsgLen) {
 800a206:	88fb      	ldrh	r3, [r7, #6]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d012      	beq.n	800a232 <packager+0x17e>
              memcpy(&xHandle->BufTx[8], &xHandle->BufSender[8],xMsgLen);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f503 7042 	add.w	r0, r3, #776	; 0x308
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	f241 0388 	movw	r3, #4232	; 0x1088
 800a218:	4413      	add	r3, r2
 800a21a:	88fa      	ldrh	r2, [r7, #6]
 800a21c:	4619      	mov	r1, r3
 800a21e:	f007 fb05 	bl	801182c <memcpy>
              memcpy(&xHandle->BufTx[xMsgLen+8], &aCrc15,2);
 800a222:	88fb      	ldrh	r3, [r7, #6]
 800a224:	3308      	adds	r3, #8
 800a226:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	4413      	add	r3, r2
 800a22e:	8a3a      	ldrh	r2, [r7, #16]
 800a230:	801a      	strh	r2, [r3, #0]
            }

            CacheClean(xHandle->BufTx, aTotLen);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a238:	8aba      	ldrh	r2, [r7, #20]
 800a23a:	4611      	mov	r1, r2
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7ff fedf 	bl	800a000 <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, aTotLen);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a248:	6818      	ldr	r0, [r3, #0]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a250:	8aba      	ldrh	r2, [r7, #20]
 800a252:	4619      	mov	r1, r3
 800a254:	f006 fb6a 	bl	801092c <HAL_UART_Transmit_DMA>
 800a258:	e001      	b.n	800a25e <packager+0x1aa>
          }
          else taskEXIT_CRITICAL();
 800a25a:	f7ff fe8c 	bl	8009f76 <exitcritical>
        }

        if(!handled)
 800a25e:	7dfb      	ldrb	r3, [r7, #23]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d123      	bne.n	800a2ac <packager+0x1f8>
        {
          protPushSequence(&xHandle->xTxFifo,xHandle->BufSender,8);
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	f241 3388 	movw	r3, #5000	; 0x1388
 800a26a:	4413      	add	r3, r2
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	f502 5184 	add.w	r1, r2, #4224	; 0x1080
 800a272:	2208      	movs	r2, #8
 800a274:	4618      	mov	r0, r3
 800a276:	f000 ffb0 	bl	800b1da <protPushSequence>
          if (xMsgLen) {
 800a27a:	88fb      	ldrh	r3, [r7, #6]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d015      	beq.n	800a2ac <packager+0x1f8>
              protPushSequence(&xHandle->xTxFifo,&xHandle->BufSender[8],xMsgLen);
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	f241 3388 	movw	r3, #5000	; 0x1388
 800a286:	4413      	add	r3, r2
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	f241 0188 	movw	r1, #4232	; 0x1088
 800a28e:	4411      	add	r1, r2
 800a290:	88fa      	ldrh	r2, [r7, #6]
 800a292:	4618      	mov	r0, r3
 800a294:	f000 ffa1 	bl	800b1da <protPushSequence>
              protPushSequence(&xHandle->xTxFifo,&aCrc15,2);
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a29e:	4413      	add	r3, r2
 800a2a0:	f107 0110 	add.w	r1, r7, #16
 800a2a4:	2202      	movs	r2, #2
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 ff97 	bl	800b1da <protPushSequence>
          }
        }
    }
}
 800a2ac:	bf00      	nop
 800a2ae:	3718      	adds	r7, #24
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <acker>:

static inline void acker(sGetterHandle* xHandle, uint16_t aPacketId, eTransChannels xChaDest) {
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	807b      	strh	r3, [r7, #2]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	707b      	strb	r3, [r7, #1]

    if (xHandle)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d06f      	beq.n	800a3aa <acker+0xf6>
    {
        uint16_t aTotLen = 8;
 800a2ca:	2308      	movs	r3, #8
 800a2cc:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = (( etrACIS | ( xChaDest << 3 ) ) | HEADER_ACK_BIT);
 800a2ce:	787b      	ldrb	r3, [r7, #1]
 800a2d0:	00db      	lsls	r3, r3, #3
 800a2d2:	b25b      	sxtb	r3, r3
 800a2d4:	f063 037d 	orn	r3, r3, #125	; 0x7d
 800a2d8:	b25b      	sxtb	r3, r3
 800a2da:	74fb      	strb	r3, [r7, #19]
        uint8_t header[8];

        header[0] = 0x55;
 800a2dc:	2355      	movs	r3, #85	; 0x55
 800a2de:	723b      	strb	r3, [r7, #8]
        header[1] = 0x55;
 800a2e0:	2355      	movs	r3, #85	; 0x55
 800a2e2:	727b      	strb	r3, [r7, #9]
        header[2] = aHeadByte;
 800a2e4:	7cfb      	ldrb	r3, [r7, #19]
 800a2e6:	72bb      	strb	r3, [r7, #10]
        header[3] = aTotLen & 0xFF;
 800a2e8:	8abb      	ldrh	r3, [r7, #20]
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	72fb      	strb	r3, [r7, #11]
        header[4] = (aTotLen >> 8) & 0xFF;
 800a2ee:	8abb      	ldrh	r3, [r7, #20]
 800a2f0:	0a1b      	lsrs	r3, r3, #8
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	733b      	strb	r3, [r7, #12]
        header[5] = aPacketId & 0xFF;
 800a2f8:	887b      	ldrh	r3, [r7, #2]
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	737b      	strb	r3, [r7, #13]
        header[6] = (aPacketId >> 8) & 0xFF;
 800a2fe:	887b      	ldrh	r3, [r7, #2]
 800a300:	0a1b      	lsrs	r3, r3, #8
 800a302:	b29b      	uxth	r3, r3
 800a304:	b2db      	uxtb	r3, r3
 800a306:	73bb      	strb	r3, [r7, #14]
        header[7] = CRC8_Generate(header, 7);
 800a308:	f107 0308 	add.w	r3, r7, #8
 800a30c:	2107      	movs	r1, #7
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fc ff7a 	bl	8007208 <CRC8_Generate>
 800a314:	4603      	mov	r3, r0
 800a316:	73fb      	strb	r3, [r7, #15]

        uint8_t handled = 0;
 800a318:	2300      	movs	r3, #0
 800a31a:	75fb      	strb	r3, [r7, #23]
        if(!protIsSome(&xHandle->xTxFifo))
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	f241 3388 	movw	r3, #5000	; 0x1388
 800a322:	4413      	add	r3, r2
 800a324:	4618      	mov	r0, r3
 800a326:	f000 ffb0 	bl	800b28a <protIsSome>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d12f      	bne.n	800a390 <acker+0xdc>
        {
          taskENTER_CRITICAL();
 800a330:	f7ff fe1a 	bl	8009f68 <entercritical>
          if(!xHandle->TxBusy)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d124      	bne.n	800a38c <acker+0xd8>
          {
            xHandle->TxBusy = 1;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a348:	2201      	movs	r2, #1
 800a34a:	701a      	strb	r2, [r3, #0]
            handled = 1;
 800a34c:	2301      	movs	r3, #1
 800a34e:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 800a350:	f7ff fe11 	bl	8009f76 <exitcritical>
            memcpy(xHandle->BufTx,header,8);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a35a:	461a      	mov	r2, r3
 800a35c:	f107 0308 	add.w	r3, r7, #8
 800a360:	cb03      	ldmia	r3!, {r0, r1}
 800a362:	6010      	str	r0, [r2, #0]
 800a364:	6051      	str	r1, [r2, #4]
            CacheClean(xHandle->BufTx, 8);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a36c:	2108      	movs	r1, #8
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff fe46 	bl	800a000 <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, 8);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a37a:	6818      	ldr	r0, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a382:	2208      	movs	r2, #8
 800a384:	4619      	mov	r1, r3
 800a386:	f006 fad1 	bl	801092c <HAL_UART_Transmit_DMA>
 800a38a:	e001      	b.n	800a390 <acker+0xdc>
          }
          else taskEXIT_CRITICAL();
 800a38c:	f7ff fdf3 	bl	8009f76 <exitcritical>
        }

        if(!handled)
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d109      	bne.n	800a3aa <acker+0xf6>
        {
          protPushSequence(&xHandle->xTxFifo,header,8);
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	f241 3388 	movw	r3, #5000	; 0x1388
 800a39c:	4413      	add	r3, r2
 800a39e:	f107 0108 	add.w	r1, r7, #8
 800a3a2:	2208      	movs	r2, #8
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 ff18 	bl	800b1da <protPushSequence>
        }
    }
}
 800a3aa:	bf00      	nop
 800a3ac:	3718      	adds	r7, #24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
	...

0800a3b4 <xSender>:


int8_t xSender(eTransChannels xChaDest, uint8_t* xMsgPtr, uint32_t xMsgLen)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b088      	sub	sp, #32
 800a3b8:	af02      	add	r7, sp, #8
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
 800a3c0:	73fb      	strb	r3, [r7, #15]
  uint32_t now = Delay_Tick;
 800a3c2:	4b3d      	ldr	r3, [pc, #244]	; (800a4b8 <xSender+0x104>)
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c6:	617b      	str	r3, [r7, #20]

  sGetterHandle * handle = &xHandles[0];
 800a3c8:	4b3c      	ldr	r3, [pc, #240]	; (800a4bc <xSender+0x108>)
 800a3ca:	613b      	str	r3, [r7, #16]
    if(handle)
      break;
  }
  */

  if(handle)
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d06c      	beq.n	800a4ac <xSender+0xf8>
  {
    taskENTER_CRITICAL();
 800a3d2:	f7ff fdc9 	bl	8009f68 <entercritical>
    if(NeedAckPacket)
 800a3d6:	4b3a      	ldr	r3, [pc, #232]	; (800a4c0 <xSender+0x10c>)
 800a3d8:	881b      	ldrh	r3, [r3, #0]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d045      	beq.n	800a46c <xSender+0xb8>
    {
      if(ReceivedAckPacket)
 800a3e0:	4b38      	ldr	r3, [pc, #224]	; (800a4c4 <xSender+0x110>)
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d009      	beq.n	800a3fe <xSender+0x4a>
      {
        NeedAckPacket = 0;
 800a3ea:	4b35      	ldr	r3, [pc, #212]	; (800a4c0 <xSender+0x10c>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	801a      	strh	r2, [r3, #0]
        NeededAckPacketId = 0;
 800a3f0:	4b35      	ldr	r3, [pc, #212]	; (800a4c8 <xSender+0x114>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	801a      	strh	r2, [r3, #0]
        taskEXIT_CRITICAL();
 800a3f6:	f7ff fdbe 	bl	8009f76 <exitcritical>
        return 1;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e057      	b.n	800a4ae <xSender+0xfa>
      }
      else
      {
        if(DelayDiff(now, LastNotAckedTime) > RETRIES_TIMEOUT)
 800a3fe:	4b33      	ldr	r3, [pc, #204]	; (800a4cc <xSender+0x118>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4619      	mov	r1, r3
 800a404:	6978      	ldr	r0, [r7, #20]
 800a406:	f7fd fced 	bl	8007de4 <DelayDiff>
 800a40a:	4602      	mov	r2, r0
 800a40c:	f641 3358 	movw	r3, #7000	; 0x1b58
 800a410:	429a      	cmp	r2, r3
 800a412:	d928      	bls.n	800a466 <xSender+0xb2>
        {
          if(RetriesPacket > RETRIES_MAX)
 800a414:	4b2e      	ldr	r3, [pc, #184]	; (800a4d0 <xSender+0x11c>)
 800a416:	881b      	ldrh	r3, [r3, #0]
 800a418:	b29b      	uxth	r3, r3
 800a41a:	2b05      	cmp	r3, #5
 800a41c:	d90a      	bls.n	800a434 <xSender+0x80>
          {
            NeedAckPacket = 0;
 800a41e:	4b28      	ldr	r3, [pc, #160]	; (800a4c0 <xSender+0x10c>)
 800a420:	2200      	movs	r2, #0
 800a422:	801a      	strh	r2, [r3, #0]
            NeededAckPacketId = 0;
 800a424:	4b28      	ldr	r3, [pc, #160]	; (800a4c8 <xSender+0x114>)
 800a426:	2200      	movs	r2, #0
 800a428:	801a      	strh	r2, [r3, #0]
            taskEXIT_CRITICAL();
 800a42a:	f7ff fda4 	bl	8009f76 <exitcritical>
            return -1;
 800a42e:	f04f 33ff 	mov.w	r3, #4294967295
 800a432:	e03c      	b.n	800a4ae <xSender+0xfa>
          }
          LastNotAckedTime = now;
 800a434:	4a25      	ldr	r2, [pc, #148]	; (800a4cc <xSender+0x118>)
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	6013      	str	r3, [r2, #0]
          RetriesPacket++;
 800a43a:	4b25      	ldr	r3, [pc, #148]	; (800a4d0 <xSender+0x11c>)
 800a43c:	881b      	ldrh	r3, [r3, #0]
 800a43e:	b29b      	uxth	r3, r3
 800a440:	3301      	adds	r3, #1
 800a442:	b29a      	uxth	r2, r3
 800a444:	4b22      	ldr	r3, [pc, #136]	; (800a4d0 <xSender+0x11c>)
 800a446:	801a      	strh	r2, [r3, #0]
          taskEXIT_CRITICAL();
 800a448:	f7ff fd95 	bl	8009f76 <exitcritical>
          packager(handle, xMsgPtr, xMsgLen, xChaDest, NeededAckPacketId);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	b29a      	uxth	r2, r3
 800a450:	4b1d      	ldr	r3, [pc, #116]	; (800a4c8 <xSender+0x114>)
 800a452:	881b      	ldrh	r3, [r3, #0]
 800a454:	b29b      	uxth	r3, r3
 800a456:	7bf9      	ldrb	r1, [r7, #15]
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	460b      	mov	r3, r1
 800a45c:	68b9      	ldr	r1, [r7, #8]
 800a45e:	6938      	ldr	r0, [r7, #16]
 800a460:	f7ff fe28 	bl	800a0b4 <packager>
 800a464:	e022      	b.n	800a4ac <xSender+0xf8>
        }
        else taskEXIT_CRITICAL();
 800a466:	f7ff fd86 	bl	8009f76 <exitcritical>
 800a46a:	e01f      	b.n	800a4ac <xSender+0xf8>
      }
    }
    else
    {
      ReceivedAckPacket = 0;
 800a46c:	4b15      	ldr	r3, [pc, #84]	; (800a4c4 <xSender+0x110>)
 800a46e:	2200      	movs	r2, #0
 800a470:	801a      	strh	r2, [r3, #0]
      NeedAckPacket = 1;
 800a472:	4b13      	ldr	r3, [pc, #76]	; (800a4c0 <xSender+0x10c>)
 800a474:	2201      	movs	r2, #1
 800a476:	801a      	strh	r2, [r3, #0]
      LastNotAckedTime = now;
 800a478:	4a14      	ldr	r2, [pc, #80]	; (800a4cc <xSender+0x118>)
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	6013      	str	r3, [r2, #0]
      RetriesPacket = 0;
 800a47e:	4b14      	ldr	r3, [pc, #80]	; (800a4d0 <xSender+0x11c>)
 800a480:	2200      	movs	r2, #0
 800a482:	801a      	strh	r2, [r3, #0]
      taskEXIT_CRITICAL();
 800a484:	f7ff fd77 	bl	8009f76 <exitcritical>
      NeededAckPacketId = calculatePacketId();
 800a488:	f7ff fdda 	bl	800a040 <calculatePacketId>
 800a48c:	4603      	mov	r3, r0
 800a48e:	461a      	mov	r2, r3
 800a490:	4b0d      	ldr	r3, [pc, #52]	; (800a4c8 <xSender+0x114>)
 800a492:	801a      	strh	r2, [r3, #0]
      packager(handle, xMsgPtr, xMsgLen, xChaDest, NeededAckPacketId);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	b29a      	uxth	r2, r3
 800a498:	4b0b      	ldr	r3, [pc, #44]	; (800a4c8 <xSender+0x114>)
 800a49a:	881b      	ldrh	r3, [r3, #0]
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	7bf9      	ldrb	r1, [r7, #15]
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	68b9      	ldr	r1, [r7, #8]
 800a4a6:	6938      	ldr	r0, [r7, #16]
 800a4a8:	f7ff fe04 	bl	800a0b4 <packager>
    }
  }
  return 0;
 800a4ac:	2300      	movs	r3, #0

}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3718      	adds	r7, #24
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	40000c00 	.word	0x40000c00
 800a4bc:	200104e0 	.word	0x200104e0
 800a4c0:	2002145e 	.word	0x2002145e
 800a4c4:	200104c8 	.word	0x200104c8
 800a4c8:	20021460 	.word	0x20021460
 800a4cc:	20021464 	.word	0x20021464
 800a4d0:	2002145c 	.word	0x2002145c

0800a4d4 <parser>:

static inline void parser(sProFIFO* xFifo, uint32_t xPacketId, uint32_t xDataLen, eTransChannels xChaSrc, eTransChannels xChaDest) {
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b08e      	sub	sp, #56	; 0x38
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
 800a4e0:	70fb      	strb	r3, [r7, #3]

  uint32_t aCount;
  uint8_t data;
  uint8_t sCount;
  sGetterHandle * hDest = NULL;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t header[8];
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4ea:	e027      	b.n	800a53c <parser+0x68>
  {
    for(int j = 0; j < sizeof(xHandles[j].xChannels) / sizeof(xHandles[j].xChannels[0]); j++)
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4f0:	e01b      	b.n	800a52a <parser+0x56>
    {
      if(xHandles[i].xChannels[j] == xChaSrc)
 800a4f2:	4aa7      	ldr	r2, [pc, #668]	; (800a790 <parser+0x2bc>)
 800a4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f6:	f241 31c4 	movw	r1, #5060	; 0x13c4
 800a4fa:	fb01 f303 	mul.w	r3, r1, r3
 800a4fe:	441a      	add	r2, r3
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	441a      	add	r2, r3
 800a504:	f241 3384 	movw	r3, #4996	; 0x1384
 800a508:	4413      	add	r3, r2
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	78fa      	ldrb	r2, [r7, #3]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d108      	bne.n	800a524 <parser+0x50>
      {
        hDest = &xHandles[i];
 800a512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a514:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800a518:	fb02 f303 	mul.w	r3, r2, r3
 800a51c:	4a9c      	ldr	r2, [pc, #624]	; (800a790 <parser+0x2bc>)
 800a51e:	4413      	add	r3, r2
 800a520:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800a522:	e005      	b.n	800a530 <parser+0x5c>
    for(int j = 0; j < sizeof(xHandles[j].xChannels) / sizeof(xHandles[j].xChannels[0]); j++)
 800a524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a526:	3301      	adds	r3, #1
 800a528:	62bb      	str	r3, [r7, #40]	; 0x28
 800a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52c:	2b03      	cmp	r3, #3
 800a52e:	d9e0      	bls.n	800a4f2 <parser+0x1e>
      }
    }
    if(hDest)
 800a530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a532:	2b00      	cmp	r3, #0
 800a534:	d106      	bne.n	800a544 <parser+0x70>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800a536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a538:	3301      	adds	r3, #1
 800a53a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d0d4      	beq.n	800a4ec <parser+0x18>
 800a542:	e000      	b.n	800a546 <parser+0x72>
      break;
 800a544:	bf00      	nop
  }


  switch (xChaDest)
 800a546:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d006      	beq.n	800a55c <parser+0x88>
 800a54e:	2b03      	cmp	r3, #3
 800a550:	f000 808f 	beq.w	800a672 <parser+0x19e>
 800a554:	2b01      	cmp	r3, #1
 800a556:	f000 808c 	beq.w	800a672 <parser+0x19e>
 800a55a:	e0fb      	b.n	800a754 <parser+0x280>
  {

      case etrACIS:
      {
          if (xDataLen)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d04f      	beq.n	800a602 <parser+0x12e>
          {
              for(int i = 0; i < 8; i++)
 800a562:	2300      	movs	r3, #0
 800a564:	627b      	str	r3, [r7, #36]	; 0x24
 800a566:	e00a      	b.n	800a57e <parser+0xaa>
                protPull(xFifo, &header[i]);
 800a568:	f107 0214 	add.w	r2, r7, #20
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56e:	4413      	add	r3, r2
 800a570:	4619      	mov	r1, r3
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 fe51 	bl	800b21a <protPull>
              for(int i = 0; i < 8; i++)
 800a578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57a:	3301      	adds	r3, #1
 800a57c:	627b      	str	r3, [r7, #36]	; 0x24
 800a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a580:	2b07      	cmp	r3, #7
 800a582:	ddf1      	ble.n	800a568 <parser+0x94>

              for (aCount = 0; aCount < xDataLen - 10; aCount++)
 800a584:	2300      	movs	r3, #0
 800a586:	637b      	str	r3, [r7, #52]	; 0x34
 800a588:	e010      	b.n	800a5ac <parser+0xd8>
              {
                protPull(xFifo, &data);
 800a58a:	f107 031d 	add.w	r3, r7, #29
 800a58e:	4619      	mov	r1, r3
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f000 fe42 	bl	800b21a <protPull>
                hDest->BufParser[aCount]=data;
 800a596:	7f79      	ldrb	r1, [r7, #29]
 800a598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a59c:	4413      	add	r3, r2
 800a59e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800a5a2:	460a      	mov	r2, r1
 800a5a4:	701a      	strb	r2, [r3, #0]
              for (aCount = 0; aCount < xDataLen - 10; aCount++)
 800a5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	637b      	str	r3, [r7, #52]	; 0x34
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	3b0a      	subs	r3, #10
 800a5b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d3e9      	bcc.n	800a58a <parser+0xb6>
              }
              protPull(xFifo, &data);
 800a5b6:	f107 031d 	add.w	r3, r7, #29
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f000 fe2c 	bl	800b21a <protPull>
              protPull(xFifo, &data);
 800a5c2:	f107 031d 	add.w	r3, r7, #29
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f000 fe26 	bl	800b21a <protPull>

              hDest->BufParser[aCount]=0;
 800a5ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800a5d8:	2200      	movs	r2, #0
 800a5da:	701a      	strb	r2, [r3, #0]

              if(hDest) acker(hDest,xPacketId,xChaSrc);
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d006      	beq.n	800a5f0 <parser+0x11c>
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	78fa      	ldrb	r2, [r7, #3]
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5ec:	f7ff fe62 	bl	800a2b4 <acker>

              acis_parse_command(xChaSrc, hDest->BufParser, aCount);
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f2:	f503 5190 	add.w	r1, r3, #4608	; 0x1200
 800a5f6:	78fb      	ldrb	r3, [r7, #3]
 800a5f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7f9 fc46 	bl	8003e8c <acis_parse_command>
              }
              taskEXIT_CRITICAL();

          }

          break;
 800a600:	e0c2      	b.n	800a788 <parser+0x2b4>
              for (aCount = 0; aCount < 8; aCount++)
 800a602:	2300      	movs	r3, #0
 800a604:	637b      	str	r3, [r7, #52]	; 0x34
 800a606:	e013      	b.n	800a630 <parser+0x15c>
                for(int i = 0; i < 8; i++)
 800a608:	2300      	movs	r3, #0
 800a60a:	623b      	str	r3, [r7, #32]
 800a60c:	e00a      	b.n	800a624 <parser+0x150>
                  protPull(xFifo, &header[i]);
 800a60e:	f107 0214 	add.w	r2, r7, #20
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	4413      	add	r3, r2
 800a616:	4619      	mov	r1, r3
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f000 fdfe 	bl	800b21a <protPull>
                for(int i = 0; i < 8; i++)
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	3301      	adds	r3, #1
 800a622:	623b      	str	r3, [r7, #32]
 800a624:	6a3b      	ldr	r3, [r7, #32]
 800a626:	2b07      	cmp	r3, #7
 800a628:	ddf1      	ble.n	800a60e <parser+0x13a>
              for (aCount = 0; aCount < 8; aCount++)
 800a62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a62c:	3301      	adds	r3, #1
 800a62e:	637b      	str	r3, [r7, #52]	; 0x34
 800a630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a632:	2b07      	cmp	r3, #7
 800a634:	d9e8      	bls.n	800a608 <parser+0x134>
              taskENTER_CRITICAL();
 800a636:	f7ff fc97 	bl	8009f68 <entercritical>
              if(NeedAckPacket && NeededAckPacketId != 0 && NeededAckPacketId == xPacketId && !ReceivedAckPacket)
 800a63a:	4b56      	ldr	r3, [pc, #344]	; (800a794 <parser+0x2c0>)
 800a63c:	881b      	ldrh	r3, [r3, #0]
 800a63e:	b29b      	uxth	r3, r3
 800a640:	2b00      	cmp	r3, #0
 800a642:	d013      	beq.n	800a66c <parser+0x198>
 800a644:	4b54      	ldr	r3, [pc, #336]	; (800a798 <parser+0x2c4>)
 800a646:	881b      	ldrh	r3, [r3, #0]
 800a648:	b29b      	uxth	r3, r3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00e      	beq.n	800a66c <parser+0x198>
 800a64e:	4b52      	ldr	r3, [pc, #328]	; (800a798 <parser+0x2c4>)
 800a650:	881b      	ldrh	r3, [r3, #0]
 800a652:	b29b      	uxth	r3, r3
 800a654:	461a      	mov	r2, r3
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	4293      	cmp	r3, r2
 800a65a:	d107      	bne.n	800a66c <parser+0x198>
 800a65c:	4b4f      	ldr	r3, [pc, #316]	; (800a79c <parser+0x2c8>)
 800a65e:	881b      	ldrh	r3, [r3, #0]
 800a660:	b29b      	uxth	r3, r3
 800a662:	2b00      	cmp	r3, #0
 800a664:	d102      	bne.n	800a66c <parser+0x198>
                ReceivedAckPacket = 1;
 800a666:	4b4d      	ldr	r3, [pc, #308]	; (800a79c <parser+0x2c8>)
 800a668:	2201      	movs	r2, #1
 800a66a:	801a      	strh	r2, [r3, #0]
              taskEXIT_CRITICAL();
 800a66c:	f7ff fc83 	bl	8009f76 <exitcritical>
          break;
 800a670:	e08a      	b.n	800a788 <parser+0x2b4>
      }

      case etrCTRL:
      case etrPC:
      {
        sCount = (xDataLen > 10) ? xDataLen : 8;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b0a      	cmp	r3, #10
 800a676:	d902      	bls.n	800a67e <parser+0x1aa>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	e000      	b.n	800a680 <parser+0x1ac>
 800a67e:	2308      	movs	r3, #8
 800a680:	77bb      	strb	r3, [r7, #30]

        if(hDest)
 800a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a684:	2b00      	cmp	r3, #0
 800a686:	d065      	beq.n	800a754 <parser+0x280>
        {

          uint8_t handled = 0;
 800a688:	2300      	movs	r3, #0
 800a68a:	77fb      	strb	r3, [r7, #31]
          if(!protIsSome(&hDest->xTxFifo))
 800a68c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a68e:	f241 3388 	movw	r3, #5000	; 0x1388
 800a692:	4413      	add	r3, r2
 800a694:	4618      	mov	r0, r3
 800a696:	f000 fdf8 	bl	800b28a <protIsSome>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d13b      	bne.n	800a718 <parser+0x244>
          {
            taskENTER_CRITICAL();
 800a6a0:	f7ff fc62 	bl	8009f68 <entercritical>
            if(!hDest->TxBusy)
 800a6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d130      	bne.n	800a714 <parser+0x240>
            {
              hDest->TxBusy = 1;
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b4:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	701a      	strb	r2, [r3, #0]
              handled = 1;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	77fb      	strb	r3, [r7, #31]
              taskEXIT_CRITICAL();
 800a6c0:	f7ff fc59 	bl	8009f76 <exitcritical>

              for (aCount = 0; aCount < sCount; aCount++)
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	637b      	str	r3, [r7, #52]	; 0x34
 800a6c8:	e00b      	b.n	800a6e2 <parser+0x20e>
              {
                protPull(xFifo, &hDest->BufTx[aCount]);
 800a6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6cc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a6d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6d2:	4413      	add	r3, r2
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f000 fd9f 	bl	800b21a <protPull>
              for (aCount = 0; aCount < sCount; aCount++)
 800a6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6de:	3301      	adds	r3, #1
 800a6e0:	637b      	str	r3, [r7, #52]	; 0x34
 800a6e2:	7fbb      	ldrb	r3, [r7, #30]
 800a6e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d3ef      	bcc.n	800a6ca <parser+0x1f6>
              }

              CacheClean(hDest->BufTx, sCount);
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a6f0:	7fba      	ldrb	r2, [r7, #30]
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7ff fc83 	bl	800a000 <CacheClean>
              HAL_UART_Transmit_DMA(hDest->xUart, hDest->BufTx, sCount);
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a700:	6818      	ldr	r0, [r3, #0]
 800a702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a704:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a708:	7fba      	ldrb	r2, [r7, #30]
 800a70a:	b292      	uxth	r2, r2
 800a70c:	4619      	mov	r1, r3
 800a70e:	f006 f90d 	bl	801092c <HAL_UART_Transmit_DMA>
 800a712:	e001      	b.n	800a718 <parser+0x244>
            }
            else taskEXIT_CRITICAL();
 800a714:	f7ff fc2f 	bl	8009f76 <exitcritical>
          }

          if(!handled)
 800a718:	7ffb      	ldrb	r3, [r7, #31]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d133      	bne.n	800a786 <parser+0x2b2>
          {
            for (aCount = 0; aCount < sCount; aCount++)
 800a71e:	2300      	movs	r3, #0
 800a720:	637b      	str	r3, [r7, #52]	; 0x34
 800a722:	e012      	b.n	800a74a <parser+0x276>
            {
              protPull(xFifo, &data);
 800a724:	f107 031d 	add.w	r3, r7, #29
 800a728:	4619      	mov	r1, r3
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f000 fd75 	bl	800b21a <protPull>
              protPush(&hDest->xTxFifo, &data);
 800a730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a732:	f241 3388 	movw	r3, #5000	; 0x1388
 800a736:	4413      	add	r3, r2
 800a738:	f107 021d 	add.w	r2, r7, #29
 800a73c:	4611      	mov	r1, r2
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 fd5c 	bl	800b1fc <protPush>
            for (aCount = 0; aCount < sCount; aCount++)
 800a744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a746:	3301      	adds	r3, #1
 800a748:	637b      	str	r3, [r7, #52]	; 0x34
 800a74a:	7fbb      	ldrb	r3, [r7, #30]
 800a74c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a74e:	429a      	cmp	r2, r3
 800a750:	d3e8      	bcc.n	800a724 <parser+0x250>
            }
          }

          break;
 800a752:	e018      	b.n	800a786 <parser+0x2b2>
      }
      /* no break */

      default:
      {
        sCount = (xDataLen > 10) ? xDataLen : 8;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b0a      	cmp	r3, #10
 800a758:	d902      	bls.n	800a760 <parser+0x28c>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	e000      	b.n	800a762 <parser+0x28e>
 800a760:	2308      	movs	r3, #8
 800a762:	77bb      	strb	r3, [r7, #30]
        for (aCount = 0; aCount < sCount; aCount++)
 800a764:	2300      	movs	r3, #0
 800a766:	637b      	str	r3, [r7, #52]	; 0x34
 800a768:	e008      	b.n	800a77c <parser+0x2a8>
        {
          protPull(xFifo, &data);
 800a76a:	f107 031d 	add.w	r3, r7, #29
 800a76e:	4619      	mov	r1, r3
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 fd52 	bl	800b21a <protPull>
        for (aCount = 0; aCount < sCount; aCount++)
 800a776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a778:	3301      	adds	r3, #1
 800a77a:	637b      	str	r3, [r7, #52]	; 0x34
 800a77c:	7fbb      	ldrb	r3, [r7, #30]
 800a77e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a780:	429a      	cmp	r2, r3
 800a782:	d3f2      	bcc.n	800a76a <parser+0x296>
        }
        break;
 800a784:	e000      	b.n	800a788 <parser+0x2b4>
          break;
 800a786:	bf00      	nop
      }
  }
}
 800a788:	bf00      	nop
 800a78a:	3738      	adds	r7, #56	; 0x38
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	200104e0 	.word	0x200104e0
 800a794:	2002145e 	.word	0x2002145e
 800a798:	20021460 	.word	0x20021460
 800a79c:	200104c8 	.word	0x200104c8

0800a7a0 <lookByte>:

static inline uint8_t lookByte(sProFIFO* xFifo, uint32_t xOffset) { uint8_t aByte; protLook(xFifo,xOffset,&aByte); return aByte; }
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
 800a7aa:	f107 030f 	add.w	r3, r7, #15
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fd40 	bl	800b238 <protLook>
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <countCRC8>:

static inline uint8_t countCRC8(sGetterHandle * handle) {
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b084      	sub	sp, #16
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
    uint32_t i; uint8_t aCrc8 = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	72fb      	strb	r3, [r7, #11]
    for (i=0; i<7; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	60fb      	str	r3, [r7, #12]
 800a7d2:	e013      	b.n	800a7fc <countCRC8+0x3a>
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	f241 339c 	movw	r3, #5020	; 0x139c
 800a7da:	4413      	add	r3, r2
 800a7dc:	68f9      	ldr	r1, [r7, #12]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff ffde 	bl	800a7a0 <lookByte>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800a7f2:	460a      	mov	r2, r1
 800a7f4:	701a      	strb	r2, [r3, #0]
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	60fb      	str	r3, [r7, #12]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2b06      	cmp	r3, #6
 800a800:	d9e8      	bls.n	800a7d4 <countCRC8+0x12>
    aCrc8 = CRC8_Generate(handle->BufParser, 7);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800a808:	2107      	movs	r1, #7
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7fc fcfc 	bl	8007208 <CRC8_Generate>
 800a810:	4603      	mov	r3, r0
 800a812:	72fb      	strb	r3, [r7, #11]
    return aCrc8;
 800a814:	7afb      	ldrb	r3, [r7, #11]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <countCRC16>:

static inline int32_t countCRC16(sGetterHandle * handle, uint32_t xLen) {
 800a81e:	b580      	push	{r7, lr}
 800a820:	b084      	sub	sp, #16
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	6039      	str	r1, [r7, #0]
    uint32_t i; int32_t aCrc16 = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	60bb      	str	r3, [r7, #8]
    for (i=0; i<xLen-2; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 800a82c:	2300      	movs	r3, #0
 800a82e:	60fb      	str	r3, [r7, #12]
 800a830:	e013      	b.n	800a85a <countCRC16+0x3c>
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	f241 339c 	movw	r3, #5020	; 0x139c
 800a838:	4413      	add	r3, r2
 800a83a:	68f9      	ldr	r1, [r7, #12]
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7ff ffaf 	bl	800a7a0 <lookByte>
 800a842:	4603      	mov	r3, r0
 800a844:	4619      	mov	r1, r3
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	4413      	add	r3, r2
 800a84c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800a850:	460a      	mov	r2, r1
 800a852:	701a      	strb	r2, [r3, #0]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	3301      	adds	r3, #1
 800a858:	60fb      	str	r3, [r7, #12]
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	3b02      	subs	r3, #2
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	429a      	cmp	r2, r3
 800a862:	d3e6      	bcc.n	800a832 <countCRC16+0x14>
    aCrc16 = CRC16_Generate(handle->BufParser, xLen-2);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	3b02      	subs	r3, #2
 800a86e:	4619      	mov	r1, r3
 800a870:	4610      	mov	r0, r2
 800a872:	f7fc fcad 	bl	80071d0 <CRC16_Generate>
 800a876:	4603      	mov	r3, r0
 800a878:	60bb      	str	r3, [r7, #8]
    return aCrc16;
 800a87a:	68bb      	ldr	r3, [r7, #8]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <Getter>:

static void Getter(sGetterHandle * handle)
{
 800a884:	b5b0      	push	{r4, r5, r7, lr}
 800a886:	b08c      	sub	sp, #48	; 0x30
 800a888:	af02      	add	r7, sp, #8
 800a88a:	6078      	str	r0, [r7, #4]
  uint32_t dataSkip = 0;
 800a88c:	2300      	movs	r3, #0
 800a88e:	627b      	str	r3, [r7, #36]	; 0x24
  sProFIFO* xFifo = &handle->xRxFifo;
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	f241 339c 	movw	r3, #5020	; 0x139c
 800a896:	4413      	add	r3, r2
 800a898:	617b      	str	r3, [r7, #20]
  uint32_t * pDataReceiving = &handle->dataReceiving;
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a8a0:	4413      	add	r3, r2
 800a8a2:	613b      	str	r3, [r7, #16]
  uint32_t * pDataLen = &handle->dataLen;
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	f241 33b4 	movw	r3, #5044	; 0x13b4
 800a8aa:	4413      	add	r3, r2
 800a8ac:	60fb      	str	r3, [r7, #12]
  uint16_t * pPacketId = &handle->packetId;
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a8b4:	4413      	add	r3, r2
 800a8b6:	60bb      	str	r3, [r7, #8]

  uint16_t packetId = *pPacketId;
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	881b      	ldrh	r3, [r3, #0]
 800a8bc:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t dataLen = *pDataLen;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	61fb      	str	r3, [r7, #28]
  uint32_t dataReceiving = *pDataReceiving;
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	61bb      	str	r3, [r7, #24]
  if(dataReceiving)
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d043      	beq.n	800a958 <Getter+0xd4>
  {
    // Check if we got a data
    if (protGetSize(xFifo) >= dataLen)
 800a8d0:	6978      	ldr	r0, [r7, #20]
 800a8d2:	f000 fb97 	bl	800b004 <protGetSize>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	f200 80ad 	bhi.w	800aa3a <Getter+0x1b6>
    {
        if (countCRC16(handle,dataLen) == lookByte(xFifo,dataLen-2) + (lookByte(xFifo,dataLen-1) << 8))
 800a8e0:	69f9      	ldr	r1, [r7, #28]
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f7ff ff9b 	bl	800a81e <countCRC16>
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	69fb      	ldr	r3, [r7, #28]
 800a8ec:	3b02      	subs	r3, #2
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	6978      	ldr	r0, [r7, #20]
 800a8f2:	f7ff ff55 	bl	800a7a0 <lookByte>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	461d      	mov	r5, r3
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	4619      	mov	r1, r3
 800a900:	6978      	ldr	r0, [r7, #20]
 800a902:	f7ff ff4d 	bl	800a7a0 <lookByte>
 800a906:	4603      	mov	r3, r0
 800a908:	021b      	lsls	r3, r3, #8
 800a90a:	442b      	add	r3, r5
 800a90c:	429c      	cmp	r4, r3
 800a90e:	d11c      	bne.n	800a94a <Getter+0xc6>
        {
            // Got True package
            parser(xFifo,packetId,dataLen,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 800a910:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800a912:	2102      	movs	r1, #2
 800a914:	6978      	ldr	r0, [r7, #20]
 800a916:	f7ff ff43 	bl	800a7a0 <lookByte>
 800a91a:	4603      	mov	r3, r0
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7ff fb31 	bl	8009f84 <Msg_GetSrc>
 800a922:	4603      	mov	r3, r0
 800a924:	b2dd      	uxtb	r5, r3
 800a926:	2102      	movs	r1, #2
 800a928:	6978      	ldr	r0, [r7, #20]
 800a92a:	f7ff ff39 	bl	800a7a0 <lookByte>
 800a92e:	4603      	mov	r3, r0
 800a930:	4618      	mov	r0, r3
 800a932:	f7ff fb35 	bl	8009fa0 <Msg_GetDest>
 800a936:	4603      	mov	r3, r0
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	462b      	mov	r3, r5
 800a93e:	69fa      	ldr	r2, [r7, #28]
 800a940:	4621      	mov	r1, r4
 800a942:	6978      	ldr	r0, [r7, #20]
 800a944:	f7ff fdc6 	bl	800a4d4 <parser>
 800a948:	e001      	b.n	800a94e <Getter+0xca>
        }
        else { dataSkip=1; } // Wrong CRC16, so skip 1 byte
 800a94a:	2301      	movs	r3, #1
 800a94c:	627b      	str	r3, [r7, #36]	; 0x24
        dataReceiving = 0;
 800a94e:	2300      	movs	r3, #0
 800a950:	61bb      	str	r3, [r7, #24]
        dataLen = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	61fb      	str	r3, [r7, #28]
 800a956:	e070      	b.n	800aa3a <Getter+0x1b6>
    }
  }
  else
  {
    if (protGetSize(xFifo) > 7)
 800a958:	6978      	ldr	r0, [r7, #20]
 800a95a:	f000 fb53 	bl	800b004 <protGetSize>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b07      	cmp	r3, #7
 800a962:	d96a      	bls.n	800aa3a <Getter+0x1b6>
    {
      if(lookByte(xFifo,0) == 0x55 && lookByte(xFifo,1) == 0x55)
 800a964:	2100      	movs	r1, #0
 800a966:	6978      	ldr	r0, [r7, #20]
 800a968:	f7ff ff1a 	bl	800a7a0 <lookByte>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b55      	cmp	r3, #85	; 0x55
 800a970:	d161      	bne.n	800aa36 <Getter+0x1b2>
 800a972:	2101      	movs	r1, #1
 800a974:	6978      	ldr	r0, [r7, #20]
 800a976:	f7ff ff13 	bl	800a7a0 <lookByte>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b55      	cmp	r3, #85	; 0x55
 800a97e:	d15a      	bne.n	800aa36 <Getter+0x1b2>
      {
        if (countCRC8(handle) == lookByte(xFifo,7))
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f7ff ff1e 	bl	800a7c2 <countCRC8>
 800a986:	4603      	mov	r3, r0
 800a988:	461c      	mov	r4, r3
 800a98a:	2107      	movs	r1, #7
 800a98c:	6978      	ldr	r0, [r7, #20]
 800a98e:	f7ff ff07 	bl	800a7a0 <lookByte>
 800a992:	4603      	mov	r3, r0
 800a994:	429c      	cmp	r4, r3
 800a996:	d14a      	bne.n	800aa2e <Getter+0x1aa>
        {
          dataLen = lookByte(xFifo,3) + (lookByte(xFifo,4) << 8);
 800a998:	2103      	movs	r1, #3
 800a99a:	6978      	ldr	r0, [r7, #20]
 800a99c:	f7ff ff00 	bl	800a7a0 <lookByte>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	461c      	mov	r4, r3
 800a9a4:	2104      	movs	r1, #4
 800a9a6:	6978      	ldr	r0, [r7, #20]
 800a9a8:	f7ff fefa 	bl	800a7a0 <lookByte>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	021b      	lsls	r3, r3, #8
 800a9b0:	4423      	add	r3, r4
 800a9b2:	61fb      	str	r3, [r7, #28]
          packetId = lookByte(xFifo,5) + (lookByte(xFifo,6) << 8);
 800a9b4:	2105      	movs	r1, #5
 800a9b6:	6978      	ldr	r0, [r7, #20]
 800a9b8:	f7ff fef2 	bl	800a7a0 <lookByte>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	b29c      	uxth	r4, r3
 800a9c0:	2106      	movs	r1, #6
 800a9c2:	6978      	ldr	r0, [r7, #20]
 800a9c4:	f7ff feec 	bl	800a7a0 <lookByte>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	021b      	lsls	r3, r3, #8
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	4423      	add	r3, r4
 800a9d2:	847b      	strh	r3, [r7, #34]	; 0x22
          if (packetId > 0 && dataLen < MAX_PACK_LEN)
 800a9d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d026      	beq.n	800aa28 <Getter+0x1a4>
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800a9e0:	d222      	bcs.n	800aa28 <Getter+0x1a4>
          {
              if (dataLen>10)
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	2b0a      	cmp	r3, #10
 800a9e6:	d902      	bls.n	800a9ee <Getter+0x16a>
              {
                dataReceiving = 1;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	61bb      	str	r3, [r7, #24]
              if (dataLen>10)
 800a9ec:	e022      	b.n	800aa34 <Getter+0x1b0>
              }
              else
              {
                  // Got ShortPackage (Header Only)
                  parser(xFifo,packetId,0,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 800a9ee:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800a9f0:	2102      	movs	r1, #2
 800a9f2:	6978      	ldr	r0, [r7, #20]
 800a9f4:	f7ff fed4 	bl	800a7a0 <lookByte>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7ff fac2 	bl	8009f84 <Msg_GetSrc>
 800aa00:	4603      	mov	r3, r0
 800aa02:	b2dd      	uxtb	r5, r3
 800aa04:	2102      	movs	r1, #2
 800aa06:	6978      	ldr	r0, [r7, #20]
 800aa08:	f7ff feca 	bl	800a7a0 <lookByte>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7ff fac6 	bl	8009fa0 <Msg_GetDest>
 800aa14:	4603      	mov	r3, r0
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	462b      	mov	r3, r5
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	4621      	mov	r1, r4
 800aa20:	6978      	ldr	r0, [r7, #20]
 800aa22:	f7ff fd57 	bl	800a4d4 <parser>
              if (dataLen>10)
 800aa26:	e005      	b.n	800aa34 <Getter+0x1b0>
              }
          }
          else { dataSkip=1; } // Wrong data length or packet id, so skip 1 byte
 800aa28:	2301      	movs	r3, #1
 800aa2a:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 800aa2c:	e005      	b.n	800aa3a <Getter+0x1b6>
        }
        else { dataSkip=1; } // Wrong CRC8, so skip 1 byte
 800aa2e:	2301      	movs	r3, #1
 800aa30:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 800aa32:	e002      	b.n	800aa3a <Getter+0x1b6>
 800aa34:	e001      	b.n	800aa3a <Getter+0x1b6>
      }
      else { dataSkip=1; } // Wrong sync bytes
 800aa36:	2301      	movs	r3, #1
 800aa38:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (dataSkip)
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d003      	beq.n	800aa48 <Getter+0x1c4>
  {
    protMoveRead(xFifo,dataSkip);
 800aa40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa42:	6978      	ldr	r0, [r7, #20]
 800aa44:	f000 fc10 	bl	800b268 <protMoveRead>
  }

  *pDataReceiving = dataReceiving;
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	69ba      	ldr	r2, [r7, #24]
 800aa4c:	601a      	str	r2, [r3, #0]
  *pDataLen = dataLen;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	69fa      	ldr	r2, [r7, #28]
 800aa52:	601a      	str	r2, [r3, #0]
  *pPacketId = packetId;
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800aa58:	801a      	strh	r2, [r3, #0]
}
 800aa5a:	bf00      	nop
 800aa5c:	3728      	adds	r7, #40	; 0x28
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800aa64 <xDmaTxIrqHandler>:



inline void xDmaTxIrqHandler(UART_HandleTypeDef *huart)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	617b      	str	r3, [r7, #20]
 800aa70:	e053      	b.n	800ab1a <xDmaTxIrqHandler+0xb6>
  {
    handle = &xHandles[i];
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800aa78:	fb02 f303 	mul.w	r3, r2, r3
 800aa7c:	4a2a      	ldr	r2, [pc, #168]	; (800ab28 <xDmaTxIrqHandler+0xc4>)
 800aa7e:	4413      	add	r3, r2
 800aa80:	60fb      	str	r3, [r7, #12]
    uint32_t length = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	613b      	str	r3, [r7, #16]
    if(huart == handle->xUart)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d13f      	bne.n	800ab14 <xDmaTxIrqHandler+0xb0>
    {
      if(protIsSome(&handle->xTxFifo))
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	f241 3388 	movw	r3, #5000	; 0x1388
 800aa9a:	4413      	add	r3, r2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f000 fbf4 	bl	800b28a <protIsSome>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d02f      	beq.n	800ab08 <xDmaTxIrqHandler+0xa4>
      {
        handle->TxBusy = 1;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800aaae:	2201      	movs	r2, #1
 800aab0:	701a      	strb	r2, [r3, #0]
        while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 800aab2:	bf00      	nop
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	f241 3388 	movw	r3, #5000	; 0x1388
 800aaba:	4413      	add	r3, r2
 800aabc:	693a      	ldr	r2, [r7, #16]
 800aabe:	1c51      	adds	r1, r2, #1
 800aac0:	6139      	str	r1, [r7, #16]
 800aac2:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800aac6:	68f9      	ldr	r1, [r7, #12]
 800aac8:	440a      	add	r2, r1
 800aaca:	4611      	mov	r1, r2
 800aacc:	4618      	mov	r0, r3
 800aace:	f000 fba4 	bl	800b21a <protPull>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d003      	beq.n	800aae0 <xDmaTxIrqHandler+0x7c>
            && length < MAX_PACK_LEN);
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800aade:	d3e9      	bcc.n	800aab4 <xDmaTxIrqHandler+0x50>
        CacheClean(handle->BufTx, length);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800aae6:	6939      	ldr	r1, [r7, #16]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7ff fa89 	bl	800a000 <CacheClean>
        HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800aaf4:	6818      	ldr	r0, [r3, #0]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800aafc:	693a      	ldr	r2, [r7, #16]
 800aafe:	b292      	uxth	r2, r2
 800ab00:	4619      	mov	r1, r3
 800ab02:	f005 ff13 	bl	801092c <HAL_UART_Transmit_DMA>
      }
      else handle->TxBusy = 0;
      break;
 800ab06:	e00b      	b.n	800ab20 <xDmaTxIrqHandler+0xbc>
      else handle->TxBusy = 0;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ab0e:	2200      	movs	r2, #0
 800ab10:	701a      	strb	r2, [r3, #0]
      break;
 800ab12:	e005      	b.n	800ab20 <xDmaTxIrqHandler+0xbc>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	3301      	adds	r3, #1
 800ab18:	617b      	str	r3, [r7, #20]
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d0a8      	beq.n	800aa72 <xDmaTxIrqHandler+0xe>
    }
  }
}
 800ab20:	bf00      	nop
 800ab22:	3718      	adds	r7, #24
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	200104e0 	.word	0x200104e0

0800ab2c <xDmaErIrqHandler>:

inline void xDmaErIrqHandler(UART_HandleTypeDef *huart)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800ab34:	2300      	movs	r3, #0
 800ab36:	60fb      	str	r3, [r7, #12]
 800ab38:	e028      	b.n	800ab8c <xDmaErIrqHandler+0x60>
  {
    handle = &xHandles[i];
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800ab40:	fb02 f303 	mul.w	r3, r2, r3
 800ab44:	4a15      	ldr	r2, [pc, #84]	; (800ab9c <xDmaErIrqHandler+0x70>)
 800ab46:	4413      	add	r3, r2
 800ab48:	60bb      	str	r3, [r7, #8]
    if(huart == handle->xUart)
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d116      	bne.n	800ab86 <xDmaErIrqHandler+0x5a>
    {
      HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68b9      	ldr	r1, [r7, #8]
 800ab62:	f44f 7240 	mov.w	r2, #768	; 0x300
 800ab66:	4618      	mov	r0, r3
 800ab68:	f005 ff5c 	bl	8010a24 <HAL_UART_Receive_DMA>
      handle->RxPointer = handle->xUart->RxXferSize;
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ab78:	4619      	mov	r1, r3
 800ab7a:	68ba      	ldr	r2, [r7, #8]
 800ab7c:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800ab80:	4413      	add	r3, r2
 800ab82:	6019      	str	r1, [r3, #0]
      break;
 800ab84:	e005      	b.n	800ab92 <xDmaErIrqHandler+0x66>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	60fb      	str	r3, [r7, #12]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d0d3      	beq.n	800ab3a <xDmaErIrqHandler+0xe>
    }
  }
}
 800ab92:	bf00      	nop
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	200104e0 	.word	0x200104e0

0800aba0 <xFifosInit>:


void xFifosInit(void)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800aba6:	2300      	movs	r3, #0
 800aba8:	607b      	str	r3, [r7, #4]
 800abaa:	e040      	b.n	800ac2e <xFifosInit+0x8e>
  {
    protInit(&xHandles[i].xTxFifo,xHandles[i].xTxFifoBuf,1,MAX_PACK_LEN*4);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800abb2:	fb02 f203 	mul.w	r2, r2, r3
 800abb6:	f241 3388 	movw	r3, #5000	; 0x1388
 800abba:	4413      	add	r3, r2
 800abbc:	4a1f      	ldr	r2, [pc, #124]	; (800ac3c <xFifosInit+0x9c>)
 800abbe:	1898      	adds	r0, r3, r2
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800abc6:	fb02 f303 	mul.w	r3, r2, r3
 800abca:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 800abce:	4a1b      	ldr	r2, [pc, #108]	; (800ac3c <xFifosInit+0x9c>)
 800abd0:	1899      	adds	r1, r3, r2
 800abd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800abd6:	2201      	movs	r2, #1
 800abd8:	f000 fa24 	bl	800b024 <protInit>
    protInit(&xHandles[i].xRxFifo,xHandles[i].xRxFifoBuf,1,MAX_PACK_LEN*4);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800abe2:	fb02 f203 	mul.w	r2, r2, r3
 800abe6:	f241 3398 	movw	r3, #5016	; 0x1398
 800abea:	4413      	add	r3, r2
 800abec:	4a13      	ldr	r2, [pc, #76]	; (800ac3c <xFifosInit+0x9c>)
 800abee:	4413      	add	r3, r2
 800abf0:	1d18      	adds	r0, r3, #4
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800abf8:	fb02 f303 	mul.w	r3, r2, r3
 800abfc:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800ac00:	4a0e      	ldr	r2, [pc, #56]	; (800ac3c <xFifosInit+0x9c>)
 800ac02:	1899      	adds	r1, r3, r2
 800ac04:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f000 fa0b 	bl	800b024 <protInit>
    xHandles[i].RxPointer = 0xFFFFFFFF;
 800ac0e:	4a0b      	ldr	r2, [pc, #44]	; (800ac3c <xFifosInit+0x9c>)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f241 31c4 	movw	r1, #5060	; 0x13c4
 800ac16:	fb01 f303 	mul.w	r3, r1, r3
 800ac1a:	441a      	add	r2, r3
 800ac1c:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800ac20:	4413      	add	r3, r2
 800ac22:	f04f 32ff 	mov.w	r2, #4294967295
 800ac26:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	607b      	str	r3, [r7, #4]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d0bb      	beq.n	800abac <xFifosInit+0xc>
  }
}
 800ac34:	bf00      	nop
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	200104e0 	.word	0x200104e0

0800ac40 <xGetterInit>:

void xGetterInit(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
  sGetterHandle * handle;

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800ac46:	2300      	movs	r3, #0
 800ac48:	607b      	str	r3, [r7, #4]
 800ac4a:	e026      	b.n	800ac9a <xGetterInit+0x5a>
  {
    handle = &xHandles[i];
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800ac52:	fb02 f303 	mul.w	r3, r2, r3
 800ac56:	4a14      	ldr	r2, [pc, #80]	; (800aca8 <xGetterInit+0x68>)
 800ac58:	4413      	add	r3, r2
 800ac5a:	603b      	str	r3, [r7, #0]
    CacheClean(handle->BufRx, UART_DMA_BUFFER);
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	f44f 7140 	mov.w	r1, #768	; 0x300
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7ff f9cc 	bl	800a000 <CacheClean>
    HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	6839      	ldr	r1, [r7, #0]
 800ac72:	f44f 7240 	mov.w	r2, #768	; 0x300
 800ac76:	4618      	mov	r0, r3
 800ac78:	f005 fed4 	bl	8010a24 <HAL_UART_Receive_DMA>
    handle->RxPointer = handle->xUart->RxXferSize;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ac88:	4619      	mov	r1, r3
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800ac90:	4413      	add	r3, r2
 800ac92:	6019      	str	r1, [r3, #0]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	3301      	adds	r3, #1
 800ac98:	607b      	str	r3, [r7, #4]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d0d5      	beq.n	800ac4c <xGetterInit+0xc>
  }
}
 800aca0:	bf00      	nop
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	200104e0 	.word	0x200104e0

0800acac <xGetterLoop>:

void xGetterLoop(void)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b0e6      	sub	sp, #408	; 0x198
 800acb0:	af00      	add	r7, sp, #0
  uint32_t dmacnt;
  uint32_t length;
  uint32_t dmasize;
  uint8_t tempbuffer[MAX_PACK_LEN];

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800acb2:	2300      	movs	r3, #0
 800acb4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800acb8:	e11f      	b.n	800aefa <xGetterLoop+0x24e>
  {
    handle = &xHandles[i];
 800acba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800acbe:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800acc2:	fb02 f303 	mul.w	r3, r2, r3
 800acc6:	4a92      	ldr	r2, [pc, #584]	; (800af10 <xGetterLoop+0x264>)
 800acc8:	4413      	add	r3, r2
 800acca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    do
    {
      dmacnt = handle->xUart->hdmarx->Instance->NDTR;
 800acce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800acd2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
      dmasize = handle->xUart->RxXferSize;
 800ace2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800ace6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800acf0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
      if(handle->RxPointer == 0xFFFFFFFF) handle->RxPointer = dmacnt;
 800acf4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800acf8:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800acfc:	4413      	add	r3, r2
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad04:	d107      	bne.n	800ad16 <xGetterLoop+0x6a>
 800ad06:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800ad0a:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800ad0e:	4413      	add	r3, r2
 800ad10:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800ad14:	601a      	str	r2, [r3, #0]
      if(dmacnt > handle->RxPointer)
 800ad16:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800ad1a:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800ad1e:	4413      	add	r3, r2
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d90e      	bls.n	800ad48 <xGetterLoop+0x9c>
        length = (dmasize-dmacnt)+handle->RxPointer;
 800ad2a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800ad2e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800ad32:	1ad2      	subs	r2, r2, r3
 800ad34:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 800ad38:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800ad3c:	440b      	add	r3, r1
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4413      	add	r3, r2
 800ad42:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800ad46:	e00a      	b.n	800ad5e <xGetterLoop+0xb2>
      else length = handle->RxPointer-dmacnt;
 800ad48:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800ad4c:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800ad50:	4413      	add	r3, r2
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800ad58:	1ad3      	subs	r3, r2, r3
 800ad5a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

      if(length > MAX_PACK_LEN) length = MAX_PACK_LEN;
 800ad5e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800ad62:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800ad66:	d903      	bls.n	800ad70 <xGetterLoop+0xc4>
 800ad68:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800ad6c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
      if(length > 0)
 800ad70:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d050      	beq.n	800ae1a <xGetterLoop+0x16e>
      {
        CacheInvalidate(handle->BufRx, UART_DMA_BUFFER);
 800ad78:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800ad7c:	f44f 7140 	mov.w	r1, #768	; 0x300
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7ff f91d 	bl	8009fc0 <CacheInvalidate>
        for(i=0;i<length;i++)
 800ad86:	2300      	movs	r3, #0
 800ad88:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800ad8c:	e034      	b.n	800adf8 <xGetterLoop+0x14c>
        {
          tempbuffer[i] = handle->BufRx[dmasize-handle->RxPointer];
 800ad8e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800ad92:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800ad96:	4413      	add	r3, r2
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800ada4:	5cd1      	ldrb	r1, [r2, r3]
 800ada6:	1d3a      	adds	r2, r7, #4
 800ada8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800adac:	4413      	add	r3, r2
 800adae:	460a      	mov	r2, r1
 800adb0:	701a      	strb	r2, [r3, #0]
          if(handle->RxPointer == 1) handle->RxPointer = dmasize;
 800adb2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800adb6:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800adba:	4413      	add	r3, r2
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d108      	bne.n	800add4 <xGetterLoop+0x128>
 800adc2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800adc6:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800adca:	4413      	add	r3, r2
 800adcc:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800add0:	601a      	str	r2, [r3, #0]
 800add2:	e00c      	b.n	800adee <xGetterLoop+0x142>
          else handle->RxPointer--;
 800add4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800add8:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800addc:	4413      	add	r3, r2
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	1e5a      	subs	r2, r3, #1
 800ade2:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 800ade6:	f241 33bc 	movw	r3, #5052	; 0x13bc
 800adea:	440b      	add	r3, r1
 800adec:	601a      	str	r2, [r3, #0]
        for(i=0;i<length;i++)
 800adee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800adf2:	3301      	adds	r3, #1
 800adf4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800adf8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800adfc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d8c4      	bhi.n	800ad8e <xGetterLoop+0xe2>
        }

        protPushSequence(&handle->xRxFifo, tempbuffer, length);
 800ae04:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800ae08:	f241 339c 	movw	r3, #5020	; 0x139c
 800ae0c:	4413      	add	r3, r2
 800ae0e:	1d39      	adds	r1, r7, #4
 800ae10:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800ae14:	4618      	mov	r0, r3
 800ae16:	f000 f9e0 	bl	800b1da <protPushSequence>
      }
    } while(length > 0);
 800ae1a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	f47f af55 	bne.w	800acce <xGetterLoop+0x22>

    if(protIsSome(&handle->xRxFifo))
 800ae24:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800ae28:	f241 339c 	movw	r3, #5020	; 0x139c
 800ae2c:	4413      	add	r3, r2
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 fa2b 	bl	800b28a <protIsSome>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d003      	beq.n	800ae42 <xGetterLoop+0x196>
    {
      Getter(handle);
 800ae3a:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 800ae3e:	f7ff fd21 	bl	800a884 <Getter>
    }

    taskENTER_CRITICAL();
 800ae42:	f7ff f891 	bl	8009f68 <entercritical>
    if(!handle->TxBusy && protIsSome(&handle->xTxFifo))
 800ae46:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800ae4a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d14a      	bne.n	800aeec <xGetterLoop+0x240>
 800ae56:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800ae5a:	f241 3388 	movw	r3, #5000	; 0x1388
 800ae5e:	4413      	add	r3, r2
 800ae60:	4618      	mov	r0, r3
 800ae62:	f000 fa12 	bl	800b28a <protIsSome>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d03f      	beq.n	800aeec <xGetterLoop+0x240>
    {
      length = 0;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
      handle->TxBusy = 1;
 800ae72:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800ae76:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	701a      	strb	r2, [r3, #0]
      taskEXIT_CRITICAL();
 800ae7e:	f7ff f87a 	bl	8009f76 <exitcritical>
      while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 800ae82:	bf00      	nop
 800ae84:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800ae88:	f241 3388 	movw	r3, #5000	; 0x1388
 800ae8c:	4413      	add	r3, r2
 800ae8e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800ae92:	1c51      	adds	r1, r2, #1
 800ae94:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 800ae98:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800ae9c:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 800aea0:	440a      	add	r2, r1
 800aea2:	4611      	mov	r1, r2
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 f9b8 	bl	800b21a <protPull>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d004      	beq.n	800aeba <xGetterLoop+0x20e>
          && length < MAX_PACK_LEN);
 800aeb0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800aeb4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800aeb8:	d3e4      	bcc.n	800ae84 <xGetterLoop+0x1d8>
      CacheClean(handle->BufTx, length);
 800aeba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800aebe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800aec2:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7ff f89a 	bl	800a000 <CacheClean>
      HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 800aecc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800aed0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800aed4:	6818      	ldr	r0, [r3, #0]
 800aed6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800aeda:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800aede:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800aee2:	b292      	uxth	r2, r2
 800aee4:	4619      	mov	r1, r3
 800aee6:	f005 fd21 	bl	801092c <HAL_UART_Transmit_DMA>
 800aeea:	e001      	b.n	800aef0 <xGetterLoop+0x244>
    }
    else taskEXIT_CRITICAL();
 800aeec:	f7ff f843 	bl	8009f76 <exitcritical>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800aef0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800aef4:	3301      	adds	r3, #1
 800aef6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800aefa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f43f aedb 	beq.w	800acba <xGetterLoop+0xe>
  }
}
 800af04:	bf00      	nop
 800af06:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	200104e0 	.word	0x200104e0

0800af14 <infoGetSize>:

#include "xProFIFO.h"
#include <string.h>


static inline int infoGetSize(sProInfo* info) {
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
    if(info->write >= info->read) return (info->write - info->read);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	689a      	ldr	r2, [r3, #8]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	429a      	cmp	r2, r3
 800af26:	d305      	bcc.n	800af34 <infoGetSize+0x20>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	689a      	ldr	r2, [r3, #8]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	1ad3      	subs	r3, r2, r3
 800af32:	e007      	b.n	800af44 <infoGetSize+0x30>
    else return (info->capacity - info->read + info->write);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	1ad2      	subs	r2, r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	4413      	add	r3, r2
}
 800af44:	4618      	mov	r0, r3
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <infoGetAvail>:

static uint32_t infoGetAvail(sProInfo* info) { return info->capacity-infoGetSize(info); }
 800af50:	b590      	push	{r4, r7, lr}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681c      	ldr	r4, [r3, #0]
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7ff ffd9 	bl	800af14 <infoGetSize>
 800af62:	4603      	mov	r3, r0
 800af64:	1ae3      	subs	r3, r4, r3
 800af66:	4618      	mov	r0, r3
 800af68:	370c      	adds	r7, #12
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd90      	pop	{r4, r7, pc}

0800af6e <infoCorrect>:
static inline uint32_t infoCorrect(sProInfo* info, uint32_t* param, uint32_t move) { return ((*param + move) % info->capacity); }
 800af6e:	b480      	push	{r7}
 800af70:	b085      	sub	sp, #20
 800af72:	af00      	add	r7, sp, #0
 800af74:	60f8      	str	r0, [r7, #12]
 800af76:	60b9      	str	r1, [r7, #8]
 800af78:	607a      	str	r2, [r7, #4]
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4413      	add	r3, r2
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	6812      	ldr	r2, [r2, #0]
 800af86:	fbb3 f1f2 	udiv	r1, r3, r2
 800af8a:	fb02 f201 	mul.w	r2, r2, r1
 800af8e:	1a9b      	subs	r3, r3, r2
 800af90:	4618      	mov	r0, r3
 800af92:	3714      	adds	r7, #20
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <infoMovePar>:
static inline void infoMovePar(sProInfo* info, uint32_t* param, uint32_t move) { *param = (uint32_t)infoCorrect(info,param,move); }
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	68b9      	ldr	r1, [r7, #8]
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f7ff ffde 	bl	800af6e <infoCorrect>
 800afb2:	4602      	mov	r2, r0
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	601a      	str	r2, [r3, #0]
 800afb8:	bf00      	nop
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <infoIsSome>:
static uint8_t infoIsSome(sProInfo* info) { return info->read != info->write; }
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	685a      	ldr	r2, [r3, #4]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	bf14      	ite	ne
 800afd4:	2301      	movne	r3, #1
 800afd6:	2300      	moveq	r3, #0
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	4618      	mov	r0, r3
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <protMovePar>:

static void protMovePar(sProInfo* info, uint32_t* param, uint32_t move) {
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b084      	sub	sp, #16
 800afea:	af00      	add	r7, sp, #0
 800afec:	60f8      	str	r0, [r7, #12]
 800afee:	60b9      	str	r1, [r7, #8]
 800aff0:	607a      	str	r2, [r7, #4]
        infoMovePar(info,param,move);
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	68b9      	ldr	r1, [r7, #8]
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f7ff ffd0 	bl	800af9c <infoMovePar>
}
 800affc:	bf00      	nop
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <protGetSize>:


uint32_t protGetSize(sProFIFO* fifo) {
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
    uint32_t value;
        value = infoGetSize(&fifo->info);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	3304      	adds	r3, #4
 800b010:	4618      	mov	r0, r3
 800b012:	f7ff ff7f 	bl	800af14 <infoGetSize>
 800b016:	4603      	mov	r3, r0
 800b018:	60fb      	str	r3, [r7, #12]
    return value;
 800b01a:	68fb      	ldr	r3, [r7, #12]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <protInit>:
    uint32_t value;
        value = infoGetAvail(&fifo->info);
    return value;
}

void protInit(sProFIFO* fifo, void* xBuffer, uint8_t xElemSize, int xCapacity) {
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	603b      	str	r3, [r7, #0]
 800b030:	4613      	mov	r3, r2
 800b032:	71fb      	strb	r3, [r7, #7]
    fifo->buffer = xBuffer;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	601a      	str	r2, [r3, #0]
    fifo->info.capacity = xCapacity;
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	605a      	str	r2, [r3, #4]
    fifo->info.read = 0;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	609a      	str	r2, [r3, #8]
    fifo->info.write = 0;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	60da      	str	r2, [r3, #12]
    fifo->info.overflow = 0;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2200      	movs	r2, #0
 800b050:	745a      	strb	r2, [r3, #17]
    fifo->info.elemsize = xElemSize;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	79fa      	ldrb	r2, [r7, #7]
 800b056:	741a      	strb	r2, [r3, #16]
}
 800b058:	bf00      	nop
 800b05a:	3714      	adds	r7, #20
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <interPut>:
        fifo->info.read = 0;
        fifo->info.write = 0;
        fifo->info.overflow = 0;
}

static inline void interPut(sProFIFO* fifo, void* xData) {
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)((uint32_t)fifo->buffer + fifo->info.write * fifo->info.elemsize), (uint8_t*)xData, fifo->info.elemsize);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4619      	mov	r1, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	7c12      	ldrb	r2, [r2, #16]
 800b07c:	fb02 f303 	mul.w	r3, r2, r3
 800b080:	440b      	add	r3, r1
 800b082:	4618      	mov	r0, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	7c1b      	ldrb	r3, [r3, #16]
 800b088:	461a      	mov	r2, r3
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	f006 fbce 	bl	801182c <memcpy>
}
 800b090:	bf00      	nop
 800b092:	3708      	adds	r7, #8
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <interGet>:

static inline void interGet(sProFIFO* fifo, void* xData) {
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + fifo->info.read * fifo->info.elemsize), fifo->info.elemsize);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	7c12      	ldrb	r2, [r2, #16]
 800b0b0:	fb02 f303 	mul.w	r3, r2, r3
 800b0b4:	440b      	add	r3, r1
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	7c1b      	ldrb	r3, [r3, #16]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	6838      	ldr	r0, [r7, #0]
 800b0c0:	f006 fbb4 	bl	801182c <memcpy>
}
 800b0c4:	bf00      	nop
 800b0c6:	3708      	adds	r7, #8
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <interLook>:

static inline void interLook(sProFIFO* fifo, uint32_t xIndex, void* xData) {
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + xIndex * fifo->info.elemsize), fifo->info.elemsize);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	7c1b      	ldrb	r3, [r3, #16]
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	fb03 f301 	mul.w	r3, r3, r1
 800b0ea:	4413      	add	r3, r2
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	7c1b      	ldrb	r3, [r3, #16]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f006 fb99 	bl	801182c <memcpy>
}
 800b0fa:	bf00      	nop
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <interPush>:

static inline uint32_t interPush(sProFIFO* fifo, void* xData) {
 800b102:	b580      	push	{r7, lr}
 800b104:	b084      	sub	sp, #16
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    if ((retval = infoGetAvail(&fifo->info))) {
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	3304      	adds	r3, #4
 800b110:	4618      	mov	r0, r3
 800b112:	f7ff ff1d 	bl	800af50 <infoGetAvail>
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00c      	beq.n	800b138 <interPush+0x36>
        interPut(fifo,xData);
 800b11e:	6839      	ldr	r1, [r7, #0]
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7ff ff9f 	bl	800b064 <interPut>
        infoMovePar(&fifo->info, &fifo->info.write, 1);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	1d18      	adds	r0, r3, #4
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	330c      	adds	r3, #12
 800b12e:	2201      	movs	r2, #1
 800b130:	4619      	mov	r1, r3
 800b132:	f7ff ff33 	bl	800af9c <infoMovePar>
 800b136:	e002      	b.n	800b13e <interPush+0x3c>
    } else { fifo->info.overflow=1; }
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	745a      	strb	r2, [r3, #17]
    return retval;
 800b13e:	68fb      	ldr	r3, [r7, #12]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <interPull>:

static inline uint32_t interPull(sProFIFO* fifo, void* xDest) {
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    if ((retval = infoIsSome(&fifo->info))) {
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	3304      	adds	r3, #4
 800b156:	4618      	mov	r0, r3
 800b158:	f7ff ff32 	bl	800afc0 <infoIsSome>
 800b15c:	4603      	mov	r3, r0
 800b15e:	60fb      	str	r3, [r7, #12]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00b      	beq.n	800b17e <interPull+0x36>
        interGet(fifo,xDest);
 800b166:	6839      	ldr	r1, [r7, #0]
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f7ff ff95 	bl	800b098 <interGet>
        infoMovePar(&fifo->info, &fifo->info.read, 1);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	1d18      	adds	r0, r3, #4
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	3308      	adds	r3, #8
 800b176:	2201      	movs	r2, #1
 800b178:	4619      	mov	r1, r3
 800b17a:	f7ff ff0f 	bl	800af9c <infoMovePar>
    }
    return retval;
 800b17e:	68fb      	ldr	r3, [r7, #12]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <interPushSequence>:

static inline uint32_t interPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 800b188:	b580      	push	{r7, lr}
 800b18a:	b086      	sub	sp, #24
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
    uint32_t retval = 0; uint32_t i;
 800b194:	2300      	movs	r3, #0
 800b196:	617b      	str	r3, [r7, #20]
    for (i=0; i<xCount; i++) {
 800b198:	2300      	movs	r3, #0
 800b19a:	613b      	str	r3, [r7, #16]
 800b19c:	e012      	b.n	800b1c4 <interPushSequence+0x3c>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	7c1b      	ldrb	r3, [r3, #16]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	fb03 f202 	mul.w	r2, r3, r2
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f7ff ffa6 	bl	800b102 <interPush>
 800b1b6:	6178      	str	r0, [r7, #20]
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d007      	beq.n	800b1ce <interPushSequence+0x46>
    for (i=0; i<xCount; i++) {
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	613b      	str	r3, [r7, #16]
 800b1c4:	693a      	ldr	r2, [r7, #16]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d3e8      	bcc.n	800b19e <interPushSequence+0x16>
 800b1cc:	e000      	b.n	800b1d0 <interPushSequence+0x48>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 800b1ce:	bf00      	nop
    }
    return retval;
 800b1d0:	697b      	ldr	r3, [r7, #20]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3718      	adds	r7, #24
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <protPushSequence>:

uint32_t protPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b086      	sub	sp, #24
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	60f8      	str	r0, [r7, #12]
 800b1e2:	60b9      	str	r1, [r7, #8]
 800b1e4:	607a      	str	r2, [r7, #4]
    uint32_t retval;
        retval=interPushSequence(fifo,xData,xCount);
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	68b9      	ldr	r1, [r7, #8]
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f7ff ffcc 	bl	800b188 <interPushSequence>
 800b1f0:	6178      	str	r0, [r7, #20]
    return retval;
 800b1f2:	697b      	ldr	r3, [r7, #20]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3718      	adds	r7, #24
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <protPush>:

uint32_t protPush(sProFIFO* fifo, void* xData) {
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
    uint32_t retval;
        retval=interPush(fifo,xData);
 800b206:	6839      	ldr	r1, [r7, #0]
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f7ff ff7a 	bl	800b102 <interPush>
 800b20e:	60f8      	str	r0, [r7, #12]
    return retval;
 800b210:	68fb      	ldr	r3, [r7, #12]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <protPull>:

uint32_t protPull(sProFIFO* fifo, void* xDest) {
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b084      	sub	sp, #16
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	6039      	str	r1, [r7, #0]
    uint32_t retval;
        retval=interPull(fifo,xDest);
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7ff ff8e 	bl	800b148 <interPull>
 800b22c:	60f8      	str	r0, [r7, #12]
    return retval;
 800b22e:	68fb      	ldr	r3, [r7, #12]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <protLook>:

void protLook(sProFIFO* fifo, uint32_t xOffset, void* xDest) {
 800b238:	b580      	push	{r7, lr}
 800b23a:	b086      	sub	sp, #24
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
        uint32_t aIndex = infoCorrect(&fifo->info, &fifo->info.read, xOffset);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	1d18      	adds	r0, r3, #4
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	3308      	adds	r3, #8
 800b24c:	68ba      	ldr	r2, [r7, #8]
 800b24e:	4619      	mov	r1, r3
 800b250:	f7ff fe8d 	bl	800af6e <infoCorrect>
 800b254:	6178      	str	r0, [r7, #20]
        interLook(fifo,aIndex,xDest);
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	6979      	ldr	r1, [r7, #20]
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f7ff ff36 	bl	800b0cc <interLook>
}
 800b260:	bf00      	nop
 800b262:	3718      	adds	r7, #24
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <protMoveRead>:

void protMoveWrite(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.write, amove); }
void protMoveRead(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.read, amove); }
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	1d18      	adds	r0, r3, #4
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	3308      	adds	r3, #8
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	4619      	mov	r1, r3
 800b27e:	f7ff feb2 	bl	800afe6 <protMovePar>
 800b282:	bf00      	nop
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <protIsSome>:

uint8_t protIsSome(sProFIFO* fifo) { return fifo->info.read != fifo->info.write; }
 800b28a:	b480      	push	{r7}
 800b28c:	b083      	sub	sp, #12
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	689a      	ldr	r2, [r3, #8]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	bf14      	ite	ne
 800b29e:	2301      	movne	r3, #1
 800b2a0:	2300      	moveq	r3, #0
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b2b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b2e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b2b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b2b6:	e003      	b.n	800b2c0 <LoopCopyDataInit>

0800b2b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b2b8:	4b0c      	ldr	r3, [pc, #48]	; (800b2ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b2ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b2bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b2be:	3104      	adds	r1, #4

0800b2c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b2c0:	480b      	ldr	r0, [pc, #44]	; (800b2f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b2c2:	4b0c      	ldr	r3, [pc, #48]	; (800b2f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b2c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b2c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b2c8:	d3f6      	bcc.n	800b2b8 <CopyDataInit>
  ldr  r2, =_sbss
 800b2ca:	4a0b      	ldr	r2, [pc, #44]	; (800b2f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b2cc:	e002      	b.n	800b2d4 <LoopFillZerobss>

0800b2ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b2ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b2d0:	f842 3b04 	str.w	r3, [r2], #4

0800b2d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b2d4:	4b09      	ldr	r3, [pc, #36]	; (800b2fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b2d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b2d8:	d3f9      	bcc.n	800b2ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b2da:	f7fe fddb 	bl	8009e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b2de:	f006 fa81 	bl	80117e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b2e2:	f7fc fecf 	bl	8008084 <main>
  bx  lr    
 800b2e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b2e8:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 800b2ec:	0801196c 	.word	0x0801196c
  ldr  r0, =_sdata
 800b2f0:	20010000 	.word	0x20010000
  ldr  r3, =_edata
 800b2f4:	200118c8 	.word	0x200118c8
  ldr  r2, =_sbss
 800b2f8:	200118e0 	.word	0x200118e0
  ldr  r3, = _ebss
 800b2fc:	200253f4 	.word	0x200253f4

0800b300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b300:	e7fe      	b.n	800b300 <ADC_IRQHandler>
	...

0800b304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800b308:	4b08      	ldr	r3, [pc, #32]	; (800b32c <HAL_Init+0x28>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a07      	ldr	r2, [pc, #28]	; (800b32c <HAL_Init+0x28>)
 800b30e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b312:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b314:	2003      	movs	r0, #3
 800b316:	f000 fd2d 	bl	800bd74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b31a:	2000      	movs	r0, #0
 800b31c:	f000 f808 	bl	800b330 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800b320:	f7fe f9b4 	bl	800968c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	40023c00 	.word	0x40023c00

0800b330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b338:	4b12      	ldr	r3, [pc, #72]	; (800b384 <HAL_InitTick+0x54>)
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	4b12      	ldr	r3, [pc, #72]	; (800b388 <HAL_InitTick+0x58>)
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	4619      	mov	r1, r3
 800b342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b346:	fbb3 f3f1 	udiv	r3, r3, r1
 800b34a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 fd45 	bl	800bdde <HAL_SYSTICK_Config>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d001      	beq.n	800b35e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	e00e      	b.n	800b37c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2b0f      	cmp	r3, #15
 800b362:	d80a      	bhi.n	800b37a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b364:	2200      	movs	r2, #0
 800b366:	6879      	ldr	r1, [r7, #4]
 800b368:	f04f 30ff 	mov.w	r0, #4294967295
 800b36c:	f000 fd0d 	bl	800bd8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b370:	4a06      	ldr	r2, [pc, #24]	; (800b38c <HAL_InitTick+0x5c>)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	e000      	b.n	800b37c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	200104c4 	.word	0x200104c4
 800b388:	200118c4 	.word	0x200118c4
 800b38c:	200118c0 	.word	0x200118c0

0800b390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b390:	b480      	push	{r7}
 800b392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b394:	4b06      	ldr	r3, [pc, #24]	; (800b3b0 <HAL_IncTick+0x20>)
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	461a      	mov	r2, r3
 800b39a:	4b06      	ldr	r3, [pc, #24]	; (800b3b4 <HAL_IncTick+0x24>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4413      	add	r3, r2
 800b3a0:	4a04      	ldr	r2, [pc, #16]	; (800b3b4 <HAL_IncTick+0x24>)
 800b3a2:	6013      	str	r3, [r2, #0]
}
 800b3a4:	bf00      	nop
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	200118c4 	.word	0x200118c4
 800b3b4:	200253f0 	.word	0x200253f0

0800b3b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	af00      	add	r7, sp, #0
  return uwTick;
 800b3bc:	4b03      	ldr	r3, [pc, #12]	; (800b3cc <HAL_GetTick+0x14>)
 800b3be:	681b      	ldr	r3, [r3, #0]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	200253f0 	.word	0x200253f0

0800b3d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e031      	b.n	800b44a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d109      	bne.n	800b402 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7fe f970 	bl	80096d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b406:	f003 0310 	and.w	r3, r3, #16
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d116      	bne.n	800b43c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b412:	4b10      	ldr	r3, [pc, #64]	; (800b454 <HAL_ADC_Init+0x84>)
 800b414:	4013      	ands	r3, r2
 800b416:	f043 0202 	orr.w	r2, r3, #2
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 fa5c 	bl	800b8dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b42e:	f023 0303 	bic.w	r3, r3, #3
 800b432:	f043 0201 	orr.w	r2, r3, #1
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	641a      	str	r2, [r3, #64]	; 0x40
 800b43a:	e001      	b.n	800b440 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b448:	7bfb      	ldrb	r3, [r7, #15]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	ffffeefd 	.word	0xffffeefd

0800b458 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b086      	sub	sp, #24
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800b464:	2300      	movs	r3, #0
 800b466:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d101      	bne.n	800b476 <HAL_ADC_Start_DMA+0x1e>
 800b472:	2302      	movs	r3, #2
 800b474:	e0c7      	b.n	800b606 <HAL_ADC_Start_DMA+0x1ae>
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2201      	movs	r2, #1
 800b47a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	f003 0301 	and.w	r3, r3, #1
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d018      	beq.n	800b4be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	689a      	ldr	r2, [r3, #8]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f042 0201 	orr.w	r2, r2, #1
 800b49a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800b49c:	4b5c      	ldr	r3, [pc, #368]	; (800b610 <HAL_ADC_Start_DMA+0x1b8>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a5c      	ldr	r2, [pc, #368]	; (800b614 <HAL_ADC_Start_DMA+0x1bc>)
 800b4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4a6:	0c9a      	lsrs	r2, r3, #18
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	005b      	lsls	r3, r3, #1
 800b4ac:	4413      	add	r3, r2
 800b4ae:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800b4b0:	e002      	b.n	800b4b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d1f9      	bne.n	800b4b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	f003 0301 	and.w	r3, r3, #1
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	f040 809b 	bne.w	800b604 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b4d2:	4b51      	ldr	r3, [pc, #324]	; (800b618 <HAL_ADC_Start_DMA+0x1c0>)
 800b4d4:	4013      	ands	r3, r2
 800b4d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d007      	beq.n	800b4fc <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b4f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b508:	d106      	bne.n	800b518 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b50e:	f023 0206 	bic.w	r2, r3, #6
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	645a      	str	r2, [r3, #68]	; 0x44
 800b516:	e002      	b.n	800b51e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2200      	movs	r2, #0
 800b51c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52a:	4a3c      	ldr	r2, [pc, #240]	; (800b61c <HAL_ADC_Start_DMA+0x1c4>)
 800b52c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b532:	4a3b      	ldr	r2, [pc, #236]	; (800b620 <HAL_ADC_Start_DMA+0x1c8>)
 800b534:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53a:	4a3a      	ldr	r2, [pc, #232]	; (800b624 <HAL_ADC_Start_DMA+0x1cc>)
 800b53c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800b546:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b556:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	689a      	ldr	r2, [r3, #8]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b566:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	334c      	adds	r3, #76	; 0x4c
 800b572:	4619      	mov	r1, r3
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f000 fee8 	bl	800c34c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800b57c:	4b2a      	ldr	r3, [pc, #168]	; (800b628 <HAL_ADC_Start_DMA+0x1d0>)
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	f003 031f 	and.w	r3, r3, #31
 800b584:	2b00      	cmp	r3, #0
 800b586:	d10f      	bne.n	800b5a8 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b592:	2b00      	cmp	r3, #0
 800b594:	d136      	bne.n	800b604 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	689a      	ldr	r2, [r3, #8]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b5a4:	609a      	str	r2, [r3, #8]
 800b5a6:	e02d      	b.n	800b604 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a1f      	ldr	r2, [pc, #124]	; (800b62c <HAL_ADC_Start_DMA+0x1d4>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d10e      	bne.n	800b5d0 <HAL_ADC_Start_DMA+0x178>
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d107      	bne.n	800b5d0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	689a      	ldr	r2, [r3, #8]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b5ce:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800b5d0:	4b15      	ldr	r3, [pc, #84]	; (800b628 <HAL_ADC_Start_DMA+0x1d0>)
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	f003 0310 	and.w	r3, r3, #16
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d113      	bne.n	800b604 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a13      	ldr	r2, [pc, #76]	; (800b630 <HAL_ADC_Start_DMA+0x1d8>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d10e      	bne.n	800b604 <HAL_ADC_Start_DMA+0x1ac>
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d107      	bne.n	800b604 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	689a      	ldr	r2, [r3, #8]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b602:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3718      	adds	r7, #24
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	200104c4 	.word	0x200104c4
 800b614:	431bde83 	.word	0x431bde83
 800b618:	fffff8fe 	.word	0xfffff8fe
 800b61c:	0800bad1 	.word	0x0800bad1
 800b620:	0800bb8b 	.word	0x0800bb8b
 800b624:	0800bba7 	.word	0x0800bba7
 800b628:	40012300 	.word	0x40012300
 800b62c:	40012000 	.word	0x40012000
 800b630:	40012200 	.word	0x40012200

0800b634 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800b63c:	bf00      	nop
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800b652:	2300      	movs	r3, #0
 800b654:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d101      	bne.n	800b664 <HAL_ADC_ConfigChannel+0x1c>
 800b660:	2302      	movs	r3, #2
 800b662:	e12a      	b.n	800b8ba <HAL_ADC_ConfigChannel+0x272>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b09      	cmp	r3, #9
 800b672:	d93a      	bls.n	800b6ea <HAL_ADC_ConfigChannel+0xa2>
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b67c:	d035      	beq.n	800b6ea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	68d9      	ldr	r1, [r3, #12]
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	b29b      	uxth	r3, r3
 800b68a:	461a      	mov	r2, r3
 800b68c:	4613      	mov	r3, r2
 800b68e:	005b      	lsls	r3, r3, #1
 800b690:	4413      	add	r3, r2
 800b692:	3b1e      	subs	r3, #30
 800b694:	2207      	movs	r2, #7
 800b696:	fa02 f303 	lsl.w	r3, r2, r3
 800b69a:	43da      	mvns	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	400a      	ands	r2, r1
 800b6a2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a87      	ldr	r2, [pc, #540]	; (800b8c8 <HAL_ADC_ConfigChannel+0x280>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d10a      	bne.n	800b6c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	68d9      	ldr	r1, [r3, #12]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	061a      	lsls	r2, r3, #24
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	430a      	orrs	r2, r1
 800b6c0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b6c2:	e035      	b.n	800b730 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	68d9      	ldr	r1, [r3, #12]
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	689a      	ldr	r2, [r3, #8]
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	005b      	lsls	r3, r3, #1
 800b6da:	4403      	add	r3, r0
 800b6dc:	3b1e      	subs	r3, #30
 800b6de:	409a      	lsls	r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	430a      	orrs	r2, r1
 800b6e6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b6e8:	e022      	b.n	800b730 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	6919      	ldr	r1, [r3, #16]
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	4413      	add	r3, r2
 800b6fe:	2207      	movs	r2, #7
 800b700:	fa02 f303 	lsl.w	r3, r2, r3
 800b704:	43da      	mvns	r2, r3
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	400a      	ands	r2, r1
 800b70c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	6919      	ldr	r1, [r3, #16]
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	689a      	ldr	r2, [r3, #8]
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	4618      	mov	r0, r3
 800b720:	4603      	mov	r3, r0
 800b722:	005b      	lsls	r3, r3, #1
 800b724:	4403      	add	r3, r0
 800b726:	409a      	lsls	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	430a      	orrs	r2, r1
 800b72e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	2b06      	cmp	r3, #6
 800b736:	d824      	bhi.n	800b782 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	685a      	ldr	r2, [r3, #4]
 800b742:	4613      	mov	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	4413      	add	r3, r2
 800b748:	3b05      	subs	r3, #5
 800b74a:	221f      	movs	r2, #31
 800b74c:	fa02 f303 	lsl.w	r3, r2, r3
 800b750:	43da      	mvns	r2, r3
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	400a      	ands	r2, r1
 800b758:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	b29b      	uxth	r3, r3
 800b766:	4618      	mov	r0, r3
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	4613      	mov	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	3b05      	subs	r3, #5
 800b774:	fa00 f203 	lsl.w	r2, r0, r3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	430a      	orrs	r2, r1
 800b77e:	635a      	str	r2, [r3, #52]	; 0x34
 800b780:	e04c      	b.n	800b81c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	2b0c      	cmp	r3, #12
 800b788:	d824      	bhi.n	800b7d4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	4613      	mov	r3, r2
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	4413      	add	r3, r2
 800b79a:	3b23      	subs	r3, #35	; 0x23
 800b79c:	221f      	movs	r2, #31
 800b79e:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a2:	43da      	mvns	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	400a      	ands	r2, r1
 800b7aa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	685a      	ldr	r2, [r3, #4]
 800b7be:	4613      	mov	r3, r2
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	4413      	add	r3, r2
 800b7c4:	3b23      	subs	r3, #35	; 0x23
 800b7c6:	fa00 f203 	lsl.w	r2, r0, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	430a      	orrs	r2, r1
 800b7d0:	631a      	str	r2, [r3, #48]	; 0x30
 800b7d2:	e023      	b.n	800b81c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	685a      	ldr	r2, [r3, #4]
 800b7de:	4613      	mov	r3, r2
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	4413      	add	r3, r2
 800b7e4:	3b41      	subs	r3, #65	; 0x41
 800b7e6:	221f      	movs	r2, #31
 800b7e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ec:	43da      	mvns	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	400a      	ands	r2, r1
 800b7f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	b29b      	uxth	r3, r3
 800b802:	4618      	mov	r0, r3
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	685a      	ldr	r2, [r3, #4]
 800b808:	4613      	mov	r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4413      	add	r3, r2
 800b80e:	3b41      	subs	r3, #65	; 0x41
 800b810:	fa00 f203 	lsl.w	r2, r0, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	430a      	orrs	r2, r1
 800b81a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a2a      	ldr	r2, [pc, #168]	; (800b8cc <HAL_ADC_ConfigChannel+0x284>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d10a      	bne.n	800b83c <HAL_ADC_ConfigChannel+0x1f4>
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b82e:	d105      	bne.n	800b83c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800b830:	4b27      	ldr	r3, [pc, #156]	; (800b8d0 <HAL_ADC_ConfigChannel+0x288>)
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	4a26      	ldr	r2, [pc, #152]	; (800b8d0 <HAL_ADC_ConfigChannel+0x288>)
 800b836:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800b83a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a22      	ldr	r2, [pc, #136]	; (800b8cc <HAL_ADC_ConfigChannel+0x284>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d109      	bne.n	800b85a <HAL_ADC_ConfigChannel+0x212>
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2b12      	cmp	r3, #18
 800b84c:	d105      	bne.n	800b85a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800b84e:	4b20      	ldr	r3, [pc, #128]	; (800b8d0 <HAL_ADC_ConfigChannel+0x288>)
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	4a1f      	ldr	r2, [pc, #124]	; (800b8d0 <HAL_ADC_ConfigChannel+0x288>)
 800b854:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b858:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a1b      	ldr	r2, [pc, #108]	; (800b8cc <HAL_ADC_ConfigChannel+0x284>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d125      	bne.n	800b8b0 <HAL_ADC_ConfigChannel+0x268>
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a17      	ldr	r2, [pc, #92]	; (800b8c8 <HAL_ADC_ConfigChannel+0x280>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d003      	beq.n	800b876 <HAL_ADC_ConfigChannel+0x22e>
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b11      	cmp	r3, #17
 800b874:	d11c      	bne.n	800b8b0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800b876:	4b16      	ldr	r3, [pc, #88]	; (800b8d0 <HAL_ADC_ConfigChannel+0x288>)
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	4a15      	ldr	r2, [pc, #84]	; (800b8d0 <HAL_ADC_ConfigChannel+0x288>)
 800b87c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b880:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a10      	ldr	r2, [pc, #64]	; (800b8c8 <HAL_ADC_ConfigChannel+0x280>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d111      	bne.n	800b8b0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800b88c:	4b11      	ldr	r3, [pc, #68]	; (800b8d4 <HAL_ADC_ConfigChannel+0x28c>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a11      	ldr	r2, [pc, #68]	; (800b8d8 <HAL_ADC_ConfigChannel+0x290>)
 800b892:	fba2 2303 	umull	r2, r3, r2, r3
 800b896:	0c9a      	lsrs	r2, r3, #18
 800b898:	4613      	mov	r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4413      	add	r3, r2
 800b89e:	005b      	lsls	r3, r3, #1
 800b8a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800b8a2:	e002      	b.n	800b8aa <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	3b01      	subs	r3, #1
 800b8a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d1f9      	bne.n	800b8a4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	10000012 	.word	0x10000012
 800b8cc:	40012000 	.word	0x40012000
 800b8d0:	40012300 	.word	0x40012300
 800b8d4:	200104c4 	.word	0x200104c4
 800b8d8:	431bde83 	.word	0x431bde83

0800b8dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800b8e4:	4b78      	ldr	r3, [pc, #480]	; (800bac8 <ADC_Init+0x1ec>)
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	4a77      	ldr	r2, [pc, #476]	; (800bac8 <ADC_Init+0x1ec>)
 800b8ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800b8ee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800b8f0:	4b75      	ldr	r3, [pc, #468]	; (800bac8 <ADC_Init+0x1ec>)
 800b8f2:	685a      	ldr	r2, [r3, #4]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	4973      	ldr	r1, [pc, #460]	; (800bac8 <ADC_Init+0x1ec>)
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	685a      	ldr	r2, [r3, #4]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b90c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	6859      	ldr	r1, [r3, #4]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	691b      	ldr	r3, [r3, #16]
 800b918:	021a      	lsls	r2, r3, #8
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	430a      	orrs	r2, r1
 800b920:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	685a      	ldr	r2, [r3, #4]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800b930:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	6859      	ldr	r1, [r3, #4]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	689a      	ldr	r2, [r3, #8]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	430a      	orrs	r2, r1
 800b942:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	689a      	ldr	r2, [r3, #8]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b952:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	6899      	ldr	r1, [r3, #8]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	68da      	ldr	r2, [r3, #12]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	430a      	orrs	r2, r1
 800b964:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b96a:	4a58      	ldr	r2, [pc, #352]	; (800bacc <ADC_Init+0x1f0>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d022      	beq.n	800b9b6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	689a      	ldr	r2, [r3, #8]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b97e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	6899      	ldr	r1, [r3, #8]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	430a      	orrs	r2, r1
 800b990:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	689a      	ldr	r2, [r3, #8]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b9a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	6899      	ldr	r1, [r3, #8]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	430a      	orrs	r2, r1
 800b9b2:	609a      	str	r2, [r3, #8]
 800b9b4:	e00f      	b.n	800b9d6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	689a      	ldr	r2, [r3, #8]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b9c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	689a      	ldr	r2, [r3, #8]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b9d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	689a      	ldr	r2, [r3, #8]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f022 0202 	bic.w	r2, r2, #2
 800b9e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	6899      	ldr	r1, [r3, #8]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	699b      	ldr	r3, [r3, #24]
 800b9f0:	005a      	lsls	r2, r3, #1
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	430a      	orrs	r2, r1
 800b9f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d01b      	beq.n	800ba3c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	685a      	ldr	r2, [r3, #4]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	685a      	ldr	r2, [r3, #4]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ba22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	6859      	ldr	r1, [r3, #4]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	035a      	lsls	r2, r3, #13
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	430a      	orrs	r2, r1
 800ba38:	605a      	str	r2, [r3, #4]
 800ba3a:	e007      	b.n	800ba4c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	685a      	ldr	r2, [r3, #4]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ba4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800ba5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	69db      	ldr	r3, [r3, #28]
 800ba66:	3b01      	subs	r3, #1
 800ba68:	051a      	lsls	r2, r3, #20
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	430a      	orrs	r2, r1
 800ba70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	689a      	ldr	r2, [r3, #8]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ba80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	6899      	ldr	r1, [r3, #8]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ba8e:	025a      	lsls	r2, r3, #9
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	430a      	orrs	r2, r1
 800ba96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	689a      	ldr	r2, [r3, #8]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800baa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	6899      	ldr	r1, [r3, #8]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	695b      	ldr	r3, [r3, #20]
 800bab2:	029a      	lsls	r2, r3, #10
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	430a      	orrs	r2, r1
 800baba:	609a      	str	r2, [r3, #8]
}
 800babc:	bf00      	nop
 800babe:	370c      	adds	r7, #12
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr
 800bac8:	40012300 	.word	0x40012300
 800bacc:	0f000001 	.word	0x0f000001

0800bad0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800badc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d13c      	bne.n	800bb64 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d12b      	bne.n	800bb5c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d127      	bne.n	800bb5c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d006      	beq.n	800bb28 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d119      	bne.n	800bb5c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	685a      	ldr	r2, [r3, #4]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f022 0220 	bic.w	r2, r2, #32
 800bb36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d105      	bne.n	800bb5c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb54:	f043 0201 	orr.w	r2, r3, #1
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bb5c:	68f8      	ldr	r0, [r7, #12]
 800bb5e:	f7fc fa7b 	bl	8008058 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800bb62:	e00e      	b.n	800bb82 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb68:	f003 0310 	and.w	r3, r3, #16
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d003      	beq.n	800bb78 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f7ff fd5f 	bl	800b634 <HAL_ADC_ErrorCallback>
}
 800bb76:	e004      	b.n	800bb82 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	4798      	blx	r3
}
 800bb82:	bf00      	nop
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b084      	sub	sp, #16
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb96:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f7fc fa47 	bl	800802c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bb9e:	bf00      	nop
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b084      	sub	sp, #16
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2240      	movs	r2, #64	; 0x40
 800bbb8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbbe:	f043 0204 	orr.w	r2, r3, #4
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	f7ff fd34 	bl	800b634 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bbcc:	bf00      	nop
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <__NVIC_SetPriorityGrouping>:
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f003 0307 	and.w	r3, r3, #7
 800bbe2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bbe4:	4b0b      	ldr	r3, [pc, #44]	; (800bc14 <__NVIC_SetPriorityGrouping+0x40>)
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bbea:	68ba      	ldr	r2, [r7, #8]
 800bbec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bbf0:	4013      	ands	r3, r2
 800bbf2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800bbfc:	4b06      	ldr	r3, [pc, #24]	; (800bc18 <__NVIC_SetPriorityGrouping+0x44>)
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bc02:	4a04      	ldr	r2, [pc, #16]	; (800bc14 <__NVIC_SetPriorityGrouping+0x40>)
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	60d3      	str	r3, [r2, #12]
}
 800bc08:	bf00      	nop
 800bc0a:	3714      	adds	r7, #20
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr
 800bc14:	e000ed00 	.word	0xe000ed00
 800bc18:	05fa0000 	.word	0x05fa0000

0800bc1c <__NVIC_GetPriorityGrouping>:
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bc20:	4b04      	ldr	r3, [pc, #16]	; (800bc34 <__NVIC_GetPriorityGrouping+0x18>)
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	0a1b      	lsrs	r3, r3, #8
 800bc26:	f003 0307 	and.w	r3, r3, #7
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr
 800bc34:	e000ed00 	.word	0xe000ed00

0800bc38 <__NVIC_EnableIRQ>:
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	4603      	mov	r3, r0
 800bc40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bc42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	db0b      	blt.n	800bc62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bc4a:	79fb      	ldrb	r3, [r7, #7]
 800bc4c:	f003 021f 	and.w	r2, r3, #31
 800bc50:	4907      	ldr	r1, [pc, #28]	; (800bc70 <__NVIC_EnableIRQ+0x38>)
 800bc52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc56:	095b      	lsrs	r3, r3, #5
 800bc58:	2001      	movs	r0, #1
 800bc5a:	fa00 f202 	lsl.w	r2, r0, r2
 800bc5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bc62:	bf00      	nop
 800bc64:	370c      	adds	r7, #12
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr
 800bc6e:	bf00      	nop
 800bc70:	e000e100 	.word	0xe000e100

0800bc74 <__NVIC_SetPriority>:
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	6039      	str	r1, [r7, #0]
 800bc7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bc80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	db0a      	blt.n	800bc9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	b2da      	uxtb	r2, r3
 800bc8c:	490c      	ldr	r1, [pc, #48]	; (800bcc0 <__NVIC_SetPriority+0x4c>)
 800bc8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc92:	0112      	lsls	r2, r2, #4
 800bc94:	b2d2      	uxtb	r2, r2
 800bc96:	440b      	add	r3, r1
 800bc98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bc9c:	e00a      	b.n	800bcb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	b2da      	uxtb	r2, r3
 800bca2:	4908      	ldr	r1, [pc, #32]	; (800bcc4 <__NVIC_SetPriority+0x50>)
 800bca4:	79fb      	ldrb	r3, [r7, #7]
 800bca6:	f003 030f 	and.w	r3, r3, #15
 800bcaa:	3b04      	subs	r3, #4
 800bcac:	0112      	lsls	r2, r2, #4
 800bcae:	b2d2      	uxtb	r2, r2
 800bcb0:	440b      	add	r3, r1
 800bcb2:	761a      	strb	r2, [r3, #24]
}
 800bcb4:	bf00      	nop
 800bcb6:	370c      	adds	r7, #12
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr
 800bcc0:	e000e100 	.word	0xe000e100
 800bcc4:	e000ed00 	.word	0xe000ed00

0800bcc8 <NVIC_EncodePriority>:
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b089      	sub	sp, #36	; 0x24
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f003 0307 	and.w	r3, r3, #7
 800bcda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	f1c3 0307 	rsb	r3, r3, #7
 800bce2:	2b04      	cmp	r3, #4
 800bce4:	bf28      	it	cs
 800bce6:	2304      	movcs	r3, #4
 800bce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	3304      	adds	r3, #4
 800bcee:	2b06      	cmp	r3, #6
 800bcf0:	d902      	bls.n	800bcf8 <NVIC_EncodePriority+0x30>
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	3b03      	subs	r3, #3
 800bcf6:	e000      	b.n	800bcfa <NVIC_EncodePriority+0x32>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bcfc:	f04f 32ff 	mov.w	r2, #4294967295
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	fa02 f303 	lsl.w	r3, r2, r3
 800bd06:	43da      	mvns	r2, r3
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	401a      	ands	r2, r3
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bd10:	f04f 31ff 	mov.w	r1, #4294967295
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	fa01 f303 	lsl.w	r3, r1, r3
 800bd1a:	43d9      	mvns	r1, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd20:	4313      	orrs	r3, r2
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3724      	adds	r7, #36	; 0x24
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
	...

0800bd30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd40:	d301      	bcc.n	800bd46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bd42:	2301      	movs	r3, #1
 800bd44:	e00f      	b.n	800bd66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bd46:	4a0a      	ldr	r2, [pc, #40]	; (800bd70 <SysTick_Config+0x40>)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bd4e:	210f      	movs	r1, #15
 800bd50:	f04f 30ff 	mov.w	r0, #4294967295
 800bd54:	f7ff ff8e 	bl	800bc74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bd58:	4b05      	ldr	r3, [pc, #20]	; (800bd70 <SysTick_Config+0x40>)
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bd5e:	4b04      	ldr	r3, [pc, #16]	; (800bd70 <SysTick_Config+0x40>)
 800bd60:	2207      	movs	r2, #7
 800bd62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	e000e010 	.word	0xe000e010

0800bd74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f7ff ff29 	bl	800bbd4 <__NVIC_SetPriorityGrouping>
}
 800bd82:	bf00      	nop
 800bd84:	3708      	adds	r7, #8
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}

0800bd8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bd8a:	b580      	push	{r7, lr}
 800bd8c:	b086      	sub	sp, #24
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	4603      	mov	r3, r0
 800bd92:	60b9      	str	r1, [r7, #8]
 800bd94:	607a      	str	r2, [r7, #4]
 800bd96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bd9c:	f7ff ff3e 	bl	800bc1c <__NVIC_GetPriorityGrouping>
 800bda0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	68b9      	ldr	r1, [r7, #8]
 800bda6:	6978      	ldr	r0, [r7, #20]
 800bda8:	f7ff ff8e 	bl	800bcc8 <NVIC_EncodePriority>
 800bdac:	4602      	mov	r2, r0
 800bdae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7ff ff5d 	bl	800bc74 <__NVIC_SetPriority>
}
 800bdba:	bf00      	nop
 800bdbc:	3718      	adds	r7, #24
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b082      	sub	sp, #8
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	4603      	mov	r3, r0
 800bdca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bdcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff ff31 	bl	800bc38 <__NVIC_EnableIRQ>
}
 800bdd6:	bf00      	nop
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b082      	sub	sp, #8
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7ff ffa2 	bl	800bd30 <SysTick_Config>
 800bdec:	4603      	mov	r3, r0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
	...

0800bdf8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d101      	bne.n	800be0a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	e054      	b.n	800beb4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	7f5b      	ldrb	r3, [r3, #29]
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	2b00      	cmp	r3, #0
 800be12:	d105      	bne.n	800be20 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f7fd fcda 	bl	80097d4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2202      	movs	r2, #2
 800be24:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	791b      	ldrb	r3, [r3, #4]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10c      	bne.n	800be48 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a22      	ldr	r2, [pc, #136]	; (800bebc <HAL_CRC_Init+0xc4>)
 800be34:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	689a      	ldr	r2, [r3, #8]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f022 0218 	bic.w	r2, r2, #24
 800be44:	609a      	str	r2, [r3, #8]
 800be46:	e00c      	b.n	800be62 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6899      	ldr	r1, [r3, #8]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	461a      	mov	r2, r3
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f946 	bl	800c0e4 <HAL_CRCEx_Polynomial_Set>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d001      	beq.n	800be62 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	e028      	b.n	800beb4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	795b      	ldrb	r3, [r3, #5]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d105      	bne.n	800be76 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f04f 32ff 	mov.w	r2, #4294967295
 800be72:	611a      	str	r2, [r3, #16]
 800be74:	e004      	b.n	800be80 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	6912      	ldr	r2, [r2, #16]
 800be7e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	689b      	ldr	r3, [r3, #8]
 800be86:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	695a      	ldr	r2, [r3, #20]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	430a      	orrs	r2, r1
 800be94:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	689b      	ldr	r3, [r3, #8]
 800be9c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	699a      	ldr	r2, [r3, #24]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	430a      	orrs	r2, r1
 800beaa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2201      	movs	r2, #1
 800beb0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800beb2:	2300      	movs	r3, #0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3708      	adds	r7, #8
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	04c11db7 	.word	0x04c11db7

0800bec0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
inline uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b086      	sub	sp, #24
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800becc:	2300      	movs	r3, #0
 800bece:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2202      	movs	r2, #2
 800bed4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	689a      	ldr	r2, [r3, #8]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f042 0201 	orr.w	r2, r2, #1
 800bee4:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6a1b      	ldr	r3, [r3, #32]
 800beea:	2b02      	cmp	r3, #2
 800beec:	d022      	beq.n	800bf34 <HAL_CRC_Calculate+0x74>
 800beee:	2b03      	cmp	r3, #3
 800bef0:	d002      	beq.n	800bef8 <HAL_CRC_Calculate+0x38>
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d017      	beq.n	800bf26 <HAL_CRC_Calculate+0x66>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800bef6:	e024      	b.n	800bf42 <HAL_CRC_Calculate+0x82>
      for (index = 0U; index < BufferLength; index++)
 800bef8:	2300      	movs	r3, #0
 800befa:	617b      	str	r3, [r7, #20]
 800befc:	e00a      	b.n	800bf14 <HAL_CRC_Calculate+0x54>
        hcrc->Instance->DR = pBuffer[index];
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	68ba      	ldr	r2, [r7, #8]
 800bf04:	441a      	add	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	6812      	ldr	r2, [r2, #0]
 800bf0c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	3301      	adds	r3, #1
 800bf12:	617b      	str	r3, [r7, #20]
 800bf14:	697a      	ldr	r2, [r7, #20]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d3f0      	bcc.n	800befe <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	613b      	str	r3, [r7, #16]
      break;
 800bf24:	e00d      	b.n	800bf42 <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	68b9      	ldr	r1, [r7, #8]
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f000 f811 	bl	800bf52 <CRC_Handle_8>
 800bf30:	6138      	str	r0, [r7, #16]
      break;
 800bf32:	e006      	b.n	800bf42 <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	68b9      	ldr	r1, [r7, #8]
 800bf38:	68f8      	ldr	r0, [r7, #12]
 800bf3a:	f000 f898 	bl	800c06e <CRC_Handle_16>
 800bf3e:	6138      	str	r0, [r7, #16]
      break;
 800bf40:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2201      	movs	r2, #1
 800bf46:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800bf48:	693b      	ldr	r3, [r7, #16]
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3718      	adds	r7, #24
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static inline uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800bf52:	b480      	push	{r7}
 800bf54:	b089      	sub	sp, #36	; 0x24
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	60f8      	str	r0, [r7, #12]
 800bf5a:	60b9      	str	r1, [r7, #8]
 800bf5c:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800bf5e:	2300      	movs	r3, #0
 800bf60:	61fb      	str	r3, [r7, #28]
 800bf62:	e023      	b.n	800bfac <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	3301      	adds	r3, #1
 800bf76:	68b9      	ldr	r1, [r7, #8]
 800bf78:	440b      	add	r3, r1
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bf7e:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	3302      	adds	r3, #2
 800bf86:	68b9      	ldr	r1, [r7, #8]
 800bf88:	440b      	add	r3, r1
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800bf8e:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	3303      	adds	r3, #3
 800bf96:	68b9      	ldr	r1, [r7, #8]
 800bf98:	440b      	add	r3, r1
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800bfa2:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bfa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	61fb      	str	r3, [r7, #28]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	089b      	lsrs	r3, r3, #2
 800bfb0:	69fa      	ldr	r2, [r7, #28]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d3d6      	bcc.n	800bf64 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f003 0303 	and.w	r3, r3, #3
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d04d      	beq.n	800c05c <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f003 0303 	and.w	r3, r3, #3
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d107      	bne.n	800bfda <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	6812      	ldr	r2, [r2, #0]
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f003 0303 	and.w	r3, r3, #3
 800bfe0:	2b02      	cmp	r3, #2
 800bfe2:	d116      	bne.n	800c012 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	4413      	add	r3, r2
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	021b      	lsls	r3, r3, #8
 800bff0:	b21a      	sxth	r2, r3
 800bff2:	69fb      	ldr	r3, [r7, #28]
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	3301      	adds	r3, #1
 800bff8:	68b9      	ldr	r1, [r7, #8]
 800bffa:	440b      	add	r3, r1
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	b21b      	sxth	r3, r3
 800c000:	4313      	orrs	r3, r2
 800c002:	b21b      	sxth	r3, r3
 800c004:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	8b7a      	ldrh	r2, [r7, #26]
 800c010:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f003 0303 	and.w	r3, r3, #3
 800c018:	2b03      	cmp	r3, #3
 800c01a:	d11f      	bne.n	800c05c <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	68ba      	ldr	r2, [r7, #8]
 800c022:	4413      	add	r3, r2
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	021b      	lsls	r3, r3, #8
 800c028:	b21a      	sxth	r2, r3
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	3301      	adds	r3, #1
 800c030:	68b9      	ldr	r1, [r7, #8]
 800c032:	440b      	add	r3, r1
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	b21b      	sxth	r3, r3
 800c038:	4313      	orrs	r3, r2
 800c03a:	b21b      	sxth	r3, r3
 800c03c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	8b7a      	ldrh	r2, [r7, #26]
 800c048:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	3302      	adds	r3, #2
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	4413      	add	r3, r2
 800c054:	68fa      	ldr	r2, [r7, #12]
 800c056:	6812      	ldr	r2, [r2, #0]
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	681b      	ldr	r3, [r3, #0]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3724      	adds	r7, #36	; 0x24
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr

0800c06e <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static inline uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800c06e:	b480      	push	{r7}
 800c070:	b087      	sub	sp, #28
 800c072:	af00      	add	r7, sp, #0
 800c074:	60f8      	str	r0, [r7, #12]
 800c076:	60b9      	str	r1, [r7, #8]
 800c078:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800c07a:	2300      	movs	r3, #0
 800c07c:	617b      	str	r3, [r7, #20]
 800c07e:	e013      	b.n	800c0a8 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	68ba      	ldr	r2, [r7, #8]
 800c086:	4413      	add	r3, r2
 800c088:	881b      	ldrh	r3, [r3, #0]
 800c08a:	041a      	lsls	r2, r3, #16
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	3302      	adds	r3, #2
 800c092:	68b9      	ldr	r1, [r7, #8]
 800c094:	440b      	add	r3, r1
 800c096:	881b      	ldrh	r3, [r3, #0]
 800c098:	4619      	mov	r1, r3
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	430a      	orrs	r2, r1
 800c0a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	617b      	str	r3, [r7, #20]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	085b      	lsrs	r3, r3, #1
 800c0ac:	697a      	ldr	r2, [r7, #20]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d3e6      	bcc.n	800c080 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f003 0301 	and.w	r3, r3, #1
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d009      	beq.n	800c0d0 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	68ba      	ldr	r2, [r7, #8]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	881a      	ldrh	r2, [r3, #0]
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681b      	ldr	r3, [r3, #0]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	371c      	adds	r7, #28
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
	...

0800c0e4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c0f4:	231f      	movs	r3, #31
 800c0f6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c0f8:	bf00      	nop
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	1e5a      	subs	r2, r3, #1
 800c0fe:	613a      	str	r2, [r7, #16]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d009      	beq.n	800c118 <HAL_CRCEx_Polynomial_Set+0x34>
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	f003 031f 	and.w	r3, r3, #31
 800c10a:	68ba      	ldr	r2, [r7, #8]
 800c10c:	fa22 f303 	lsr.w	r3, r2, r3
 800c110:	f003 0301 	and.w	r3, r3, #1
 800c114:	2b00      	cmp	r3, #0
 800c116:	d0f0      	beq.n	800c0fa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b18      	cmp	r3, #24
 800c11c:	d846      	bhi.n	800c1ac <HAL_CRCEx_Polynomial_Set+0xc8>
 800c11e:	a201      	add	r2, pc, #4	; (adr r2, 800c124 <HAL_CRCEx_Polynomial_Set+0x40>)
 800c120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c124:	0800c1b3 	.word	0x0800c1b3
 800c128:	0800c1ad 	.word	0x0800c1ad
 800c12c:	0800c1ad 	.word	0x0800c1ad
 800c130:	0800c1ad 	.word	0x0800c1ad
 800c134:	0800c1ad 	.word	0x0800c1ad
 800c138:	0800c1ad 	.word	0x0800c1ad
 800c13c:	0800c1ad 	.word	0x0800c1ad
 800c140:	0800c1ad 	.word	0x0800c1ad
 800c144:	0800c1a1 	.word	0x0800c1a1
 800c148:	0800c1ad 	.word	0x0800c1ad
 800c14c:	0800c1ad 	.word	0x0800c1ad
 800c150:	0800c1ad 	.word	0x0800c1ad
 800c154:	0800c1ad 	.word	0x0800c1ad
 800c158:	0800c1ad 	.word	0x0800c1ad
 800c15c:	0800c1ad 	.word	0x0800c1ad
 800c160:	0800c1ad 	.word	0x0800c1ad
 800c164:	0800c195 	.word	0x0800c195
 800c168:	0800c1ad 	.word	0x0800c1ad
 800c16c:	0800c1ad 	.word	0x0800c1ad
 800c170:	0800c1ad 	.word	0x0800c1ad
 800c174:	0800c1ad 	.word	0x0800c1ad
 800c178:	0800c1ad 	.word	0x0800c1ad
 800c17c:	0800c1ad 	.word	0x0800c1ad
 800c180:	0800c1ad 	.word	0x0800c1ad
 800c184:	0800c189 	.word	0x0800c189
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	2b06      	cmp	r3, #6
 800c18c:	d913      	bls.n	800c1b6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800c18e:	2301      	movs	r3, #1
 800c190:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c192:	e010      	b.n	800c1b6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	2b07      	cmp	r3, #7
 800c198:	d90f      	bls.n	800c1ba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800c19a:	2301      	movs	r3, #1
 800c19c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c19e:	e00c      	b.n	800c1ba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	2b0f      	cmp	r3, #15
 800c1a4:	d90b      	bls.n	800c1be <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c1aa:	e008      	b.n	800c1be <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	75fb      	strb	r3, [r7, #23]
      break;
 800c1b0:	e006      	b.n	800c1c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c1b2:	bf00      	nop
 800c1b4:	e004      	b.n	800c1c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c1b6:	bf00      	nop
 800c1b8:	e002      	b.n	800c1c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c1ba:	bf00      	nop
 800c1bc:	e000      	b.n	800c1c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c1be:	bf00      	nop
  }
  if (status == HAL_OK)
 800c1c0:	7dfb      	ldrb	r3, [r7, #23]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d10d      	bne.n	800c1e2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	68ba      	ldr	r2, [r7, #8]
 800c1cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	f023 0118 	bic.w	r1, r3, #24
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	430a      	orrs	r2, r1
 800c1e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800c1e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	371c      	adds	r7, #28
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c1fc:	f7ff f8dc 	bl	800b3b8 <HAL_GetTick>
 800c200:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d101      	bne.n	800c20c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c208:	2301      	movs	r3, #1
 800c20a:	e099      	b.n	800c340 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2202      	movs	r2, #2
 800c218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f022 0201 	bic.w	r2, r2, #1
 800c22a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c22c:	e00f      	b.n	800c24e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c22e:	f7ff f8c3 	bl	800b3b8 <HAL_GetTick>
 800c232:	4602      	mov	r2, r0
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	2b05      	cmp	r3, #5
 800c23a:	d908      	bls.n	800c24e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2220      	movs	r2, #32
 800c240:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2203      	movs	r2, #3
 800c246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c24a:	2303      	movs	r3, #3
 800c24c:	e078      	b.n	800c340 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f003 0301 	and.w	r3, r3, #1
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1e8      	bne.n	800c22e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c264:	697a      	ldr	r2, [r7, #20]
 800c266:	4b38      	ldr	r3, [pc, #224]	; (800c348 <HAL_DMA_Init+0x158>)
 800c268:	4013      	ands	r3, r2
 800c26a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	685a      	ldr	r2, [r3, #4]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c27a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	699b      	ldr	r3, [r3, #24]
 800c28c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a1b      	ldr	r3, [r3, #32]
 800c298:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c29a:	697a      	ldr	r2, [r7, #20]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a4:	2b04      	cmp	r3, #4
 800c2a6:	d107      	bne.n	800c2b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	697a      	ldr	r2, [r7, #20]
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	695b      	ldr	r3, [r3, #20]
 800c2c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	f023 0307 	bic.w	r3, r3, #7
 800c2ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d4:	697a      	ldr	r2, [r7, #20]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2de:	2b04      	cmp	r3, #4
 800c2e0:	d117      	bne.n	800c312 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00e      	beq.n	800c312 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 fa99 	bl	800c82c <DMA_CheckFifoParam>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d008      	beq.n	800c312 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2240      	movs	r2, #64	; 0x40
 800c304:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2201      	movs	r2, #1
 800c30a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c30e:	2301      	movs	r3, #1
 800c310:	e016      	b.n	800c340 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	697a      	ldr	r2, [r7, #20]
 800c318:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 fa50 	bl	800c7c0 <DMA_CalcBaseAndBitshift>
 800c320:	4603      	mov	r3, r0
 800c322:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c328:	223f      	movs	r2, #63	; 0x3f
 800c32a:	409a      	lsls	r2, r3
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2201      	movs	r2, #1
 800c33a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c33e:	2300      	movs	r3, #0
}
 800c340:	4618      	mov	r0, r3
 800c342:	3718      	adds	r7, #24
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	e010803f 	.word	0xe010803f

0800c34c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b086      	sub	sp, #24
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	607a      	str	r2, [r7, #4]
 800c358:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c35a:	2300      	movs	r3, #0
 800c35c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c362:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d101      	bne.n	800c372 <HAL_DMA_Start_IT+0x26>
 800c36e:	2302      	movs	r3, #2
 800c370:	e048      	b.n	800c404 <HAL_DMA_Start_IT+0xb8>
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2201      	movs	r2, #1
 800c376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c380:	b2db      	uxtb	r3, r3
 800c382:	2b01      	cmp	r3, #1
 800c384:	d137      	bne.n	800c3f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2202      	movs	r2, #2
 800c38a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2200      	movs	r2, #0
 800c392:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	68b9      	ldr	r1, [r7, #8]
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f000 f9e2 	bl	800c764 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3a4:	223f      	movs	r2, #63	; 0x3f
 800c3a6:	409a      	lsls	r2, r3
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f042 0216 	orr.w	r2, r2, #22
 800c3ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	695a      	ldr	r2, [r3, #20]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c3ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d007      	beq.n	800c3e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f042 0208 	orr.w	r2, r2, #8
 800c3e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0201 	orr.w	r2, r2, #1
 800c3f2:	601a      	str	r2, [r3, #0]
 800c3f4:	e005      	b.n	800c402 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c3fe:	2302      	movs	r3, #2
 800c400:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c402:	7dfb      	ldrb	r3, [r7, #23]
}
 800c404:	4618      	mov	r0, r3
 800c406:	3718      	adds	r7, #24
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	2b02      	cmp	r3, #2
 800c41e:	d004      	beq.n	800c42a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2280      	movs	r2, #128	; 0x80
 800c424:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c426:	2301      	movs	r3, #1
 800c428:	e00c      	b.n	800c444 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2205      	movs	r2, #5
 800c42e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	681a      	ldr	r2, [r3, #0]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f022 0201 	bic.w	r2, r2, #1
 800c440:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c442:	2300      	movs	r3, #0
}
 800c444:	4618      	mov	r0, r3
 800c446:	370c      	adds	r7, #12
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
inline void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b086      	sub	sp, #24
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800c458:	2300      	movs	r3, #0
 800c45a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800c45c:	4b92      	ldr	r3, [pc, #584]	; (800c6a8 <HAL_DMA_IRQHandler+0x258>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a92      	ldr	r2, [pc, #584]	; (800c6ac <HAL_DMA_IRQHandler+0x25c>)
 800c462:	fba2 2303 	umull	r2, r3, r2, r3
 800c466:	0a9b      	lsrs	r3, r3, #10
 800c468:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c46e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c47a:	2208      	movs	r2, #8
 800c47c:	409a      	lsls	r2, r3
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	4013      	ands	r3, r2
 800c482:	2b00      	cmp	r3, #0
 800c484:	d01a      	beq.n	800c4bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f003 0304 	and.w	r3, r3, #4
 800c490:	2b00      	cmp	r3, #0
 800c492:	d013      	beq.n	800c4bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f022 0204 	bic.w	r2, r2, #4
 800c4a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4a8:	2208      	movs	r2, #8
 800c4aa:	409a      	lsls	r2, r3
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4b4:	f043 0201 	orr.w	r2, r3, #1
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	409a      	lsls	r2, r3
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	4013      	ands	r3, r2
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d012      	beq.n	800c4f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	695b      	ldr	r3, [r3, #20]
 800c4d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d00b      	beq.n	800c4f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4de:	2201      	movs	r2, #1
 800c4e0:	409a      	lsls	r2, r3
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ea:	f043 0202 	orr.w	r2, r3, #2
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4f6:	2204      	movs	r2, #4
 800c4f8:	409a      	lsls	r2, r3
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	4013      	ands	r3, r2
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d012      	beq.n	800c528 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f003 0302 	and.w	r3, r3, #2
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00b      	beq.n	800c528 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c514:	2204      	movs	r2, #4
 800c516:	409a      	lsls	r2, r3
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c520:	f043 0204 	orr.w	r2, r3, #4
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c52c:	2210      	movs	r2, #16
 800c52e:	409a      	lsls	r2, r3
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	4013      	ands	r3, r2
 800c534:	2b00      	cmp	r3, #0
 800c536:	d043      	beq.n	800c5c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f003 0308 	and.w	r3, r3, #8
 800c542:	2b00      	cmp	r3, #0
 800c544:	d03c      	beq.n	800c5c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c54a:	2210      	movs	r2, #16
 800c54c:	409a      	lsls	r2, r3
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d018      	beq.n	800c592 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d108      	bne.n	800c580 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c572:	2b00      	cmp	r3, #0
 800c574:	d024      	beq.n	800c5c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	4798      	blx	r3
 800c57e:	e01f      	b.n	800c5c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c584:	2b00      	cmp	r3, #0
 800c586:	d01b      	beq.n	800c5c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	4798      	blx	r3
 800c590:	e016      	b.n	800c5c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d107      	bne.n	800c5b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f022 0208 	bic.w	r2, r2, #8
 800c5ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d003      	beq.n	800c5c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5c4:	2220      	movs	r2, #32
 800c5c6:	409a      	lsls	r2, r3
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	4013      	ands	r3, r2
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f000 808e 	beq.w	800c6ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f003 0310 	and.w	r3, r3, #16
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f000 8086 	beq.w	800c6ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5e6:	2220      	movs	r2, #32
 800c5e8:	409a      	lsls	r2, r3
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	2b05      	cmp	r3, #5
 800c5f8:	d136      	bne.n	800c668 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f022 0216 	bic.w	r2, r2, #22
 800c608:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	695a      	ldr	r2, [r3, #20]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c618:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d103      	bne.n	800c62a <HAL_DMA_IRQHandler+0x1da>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c626:	2b00      	cmp	r3, #0
 800c628:	d007      	beq.n	800c63a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f022 0208 	bic.w	r2, r2, #8
 800c638:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c63e:	223f      	movs	r2, #63	; 0x3f
 800c640:	409a      	lsls	r2, r3
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2200      	movs	r2, #0
 800c64a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2201      	movs	r2, #1
 800c652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d07d      	beq.n	800c75a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	4798      	blx	r3
        }
        return;
 800c666:	e078      	b.n	800c75a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c672:	2b00      	cmp	r3, #0
 800c674:	d01c      	beq.n	800c6b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c680:	2b00      	cmp	r3, #0
 800c682:	d108      	bne.n	800c696 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d030      	beq.n	800c6ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	4798      	blx	r3
 800c694:	e02b      	b.n	800c6ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d027      	beq.n	800c6ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	4798      	blx	r3
 800c6a6:	e022      	b.n	800c6ee <HAL_DMA_IRQHandler+0x29e>
 800c6a8:	200104c4 	.word	0x200104c4
 800c6ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10f      	bne.n	800c6de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f022 0210 	bic.w	r2, r2, #16
 800c6cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d003      	beq.n	800c6ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d032      	beq.n	800c75c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6fa:	f003 0301 	and.w	r3, r3, #1
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d022      	beq.n	800c748 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2205      	movs	r2, #5
 800c706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f022 0201 	bic.w	r2, r2, #1
 800c718:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	3301      	adds	r3, #1
 800c71e:	60bb      	str	r3, [r7, #8]
 800c720:	697a      	ldr	r2, [r7, #20]
 800c722:	429a      	cmp	r2, r3
 800c724:	d307      	bcc.n	800c736 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f003 0301 	and.w	r3, r3, #1
 800c730:	2b00      	cmp	r3, #0
 800c732:	d1f2      	bne.n	800c71a <HAL_DMA_IRQHandler+0x2ca>
 800c734:	e000      	b.n	800c738 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c736:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2201      	movs	r2, #1
 800c744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d005      	beq.n	800c75c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	4798      	blx	r3
 800c758:	e000      	b.n	800c75c <HAL_DMA_IRQHandler+0x30c>
        return;
 800c75a:	bf00      	nop
    }
  }
}
 800c75c:	3718      	adds	r7, #24
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop

0800c764 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c764:	b480      	push	{r7}
 800c766:	b085      	sub	sp, #20
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
 800c770:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c780:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	2b40      	cmp	r3, #64	; 0x40
 800c790:	d108      	bne.n	800c7a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	68ba      	ldr	r2, [r7, #8]
 800c7a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c7a2:	e007      	b.n	800c7b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	68ba      	ldr	r2, [r7, #8]
 800c7aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	60da      	str	r2, [r3, #12]
}
 800c7b4:	bf00      	nop
 800c7b6:	3714      	adds	r7, #20
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr

0800c7c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	3b10      	subs	r3, #16
 800c7d0:	4a13      	ldr	r2, [pc, #76]	; (800c820 <DMA_CalcBaseAndBitshift+0x60>)
 800c7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7d6:	091b      	lsrs	r3, r3, #4
 800c7d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c7da:	4a12      	ldr	r2, [pc, #72]	; (800c824 <DMA_CalcBaseAndBitshift+0x64>)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	4413      	add	r3, r2
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2b03      	cmp	r3, #3
 800c7ec:	d908      	bls.n	800c800 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	4b0c      	ldr	r3, [pc, #48]	; (800c828 <DMA_CalcBaseAndBitshift+0x68>)
 800c7f6:	4013      	ands	r3, r2
 800c7f8:	1d1a      	adds	r2, r3, #4
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	659a      	str	r2, [r3, #88]	; 0x58
 800c7fe:	e006      	b.n	800c80e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	461a      	mov	r2, r3
 800c806:	4b08      	ldr	r3, [pc, #32]	; (800c828 <DMA_CalcBaseAndBitshift+0x68>)
 800c808:	4013      	ands	r3, r2
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c812:	4618      	mov	r0, r3
 800c814:	3714      	adds	r7, #20
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop
 800c820:	aaaaaaab 	.word	0xaaaaaaab
 800c824:	08011954 	.word	0x08011954
 800c828:	fffffc00 	.word	0xfffffc00

0800c82c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b085      	sub	sp, #20
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c834:	2300      	movs	r3, #0
 800c836:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c83c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	699b      	ldr	r3, [r3, #24]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d11f      	bne.n	800c886 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	2b03      	cmp	r3, #3
 800c84a:	d855      	bhi.n	800c8f8 <DMA_CheckFifoParam+0xcc>
 800c84c:	a201      	add	r2, pc, #4	; (adr r2, 800c854 <DMA_CheckFifoParam+0x28>)
 800c84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c852:	bf00      	nop
 800c854:	0800c865 	.word	0x0800c865
 800c858:	0800c877 	.word	0x0800c877
 800c85c:	0800c865 	.word	0x0800c865
 800c860:	0800c8f9 	.word	0x0800c8f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d045      	beq.n	800c8fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800c870:	2301      	movs	r3, #1
 800c872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c874:	e042      	b.n	800c8fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c87e:	d13f      	bne.n	800c900 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800c880:	2301      	movs	r3, #1
 800c882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c884:	e03c      	b.n	800c900 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	699b      	ldr	r3, [r3, #24]
 800c88a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c88e:	d121      	bne.n	800c8d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	2b03      	cmp	r3, #3
 800c894:	d836      	bhi.n	800c904 <DMA_CheckFifoParam+0xd8>
 800c896:	a201      	add	r2, pc, #4	; (adr r2, 800c89c <DMA_CheckFifoParam+0x70>)
 800c898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c89c:	0800c8ad 	.word	0x0800c8ad
 800c8a0:	0800c8b3 	.word	0x0800c8b3
 800c8a4:	0800c8ad 	.word	0x0800c8ad
 800c8a8:	0800c8c5 	.word	0x0800c8c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c8b0:	e02f      	b.n	800c912 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d024      	beq.n	800c908 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c8c2:	e021      	b.n	800c908 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c8cc:	d11e      	bne.n	800c90c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c8d2:	e01b      	b.n	800c90c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	2b02      	cmp	r3, #2
 800c8d8:	d902      	bls.n	800c8e0 <DMA_CheckFifoParam+0xb4>
 800c8da:	2b03      	cmp	r3, #3
 800c8dc:	d003      	beq.n	800c8e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c8de:	e018      	b.n	800c912 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	73fb      	strb	r3, [r7, #15]
      break;
 800c8e4:	e015      	b.n	800c912 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d00e      	beq.n	800c910 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	73fb      	strb	r3, [r7, #15]
      break;
 800c8f6:	e00b      	b.n	800c910 <DMA_CheckFifoParam+0xe4>
      break;
 800c8f8:	bf00      	nop
 800c8fa:	e00a      	b.n	800c912 <DMA_CheckFifoParam+0xe6>
      break;
 800c8fc:	bf00      	nop
 800c8fe:	e008      	b.n	800c912 <DMA_CheckFifoParam+0xe6>
      break;
 800c900:	bf00      	nop
 800c902:	e006      	b.n	800c912 <DMA_CheckFifoParam+0xe6>
      break;
 800c904:	bf00      	nop
 800c906:	e004      	b.n	800c912 <DMA_CheckFifoParam+0xe6>
      break;
 800c908:	bf00      	nop
 800c90a:	e002      	b.n	800c912 <DMA_CheckFifoParam+0xe6>
      break;   
 800c90c:	bf00      	nop
 800c90e:	e000      	b.n	800c912 <DMA_CheckFifoParam+0xe6>
      break;
 800c910:	bf00      	nop
    }
  } 
  
  return status; 
 800c912:	7bfb      	ldrb	r3, [r7, #15]
}
 800c914:	4618      	mov	r0, r3
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c920:	b480      	push	{r7}
 800c922:	b089      	sub	sp, #36	; 0x24
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800c92a:	2300      	movs	r3, #0
 800c92c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800c92e:	2300      	movs	r3, #0
 800c930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800c932:	2300      	movs	r3, #0
 800c934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800c936:	2300      	movs	r3, #0
 800c938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800c93a:	2300      	movs	r3, #0
 800c93c:	61fb      	str	r3, [r7, #28]
 800c93e:	e169      	b.n	800cc14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800c940:	2201      	movs	r2, #1
 800c942:	69fb      	ldr	r3, [r7, #28]
 800c944:	fa02 f303 	lsl.w	r3, r2, r3
 800c948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	697a      	ldr	r2, [r7, #20]
 800c950:	4013      	ands	r3, r2
 800c952:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c954:	693a      	ldr	r2, [r7, #16]
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	429a      	cmp	r2, r3
 800c95a:	f040 8158 	bne.w	800cc0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	2b01      	cmp	r3, #1
 800c964:	d00b      	beq.n	800c97e <HAL_GPIO_Init+0x5e>
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d007      	beq.n	800c97e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c972:	2b11      	cmp	r3, #17
 800c974:	d003      	beq.n	800c97e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	2b12      	cmp	r3, #18
 800c97c:	d130      	bne.n	800c9e0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	005b      	lsls	r3, r3, #1
 800c988:	2203      	movs	r2, #3
 800c98a:	fa02 f303 	lsl.w	r3, r2, r3
 800c98e:	43db      	mvns	r3, r3
 800c990:	69ba      	ldr	r2, [r7, #24]
 800c992:	4013      	ands	r3, r2
 800c994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	68da      	ldr	r2, [r3, #12]
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	005b      	lsls	r3, r3, #1
 800c99e:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a2:	69ba      	ldr	r2, [r7, #24]
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	69ba      	ldr	r2, [r7, #24]
 800c9ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c9bc:	43db      	mvns	r3, r3
 800c9be:	69ba      	ldr	r2, [r7, #24]
 800c9c0:	4013      	ands	r3, r2
 800c9c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	091b      	lsrs	r3, r3, #4
 800c9ca:	f003 0201 	and.w	r2, r3, #1
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9d4:	69ba      	ldr	r2, [r7, #24]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	69ba      	ldr	r2, [r7, #24]
 800c9de:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	2203      	movs	r2, #3
 800c9ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c9f0:	43db      	mvns	r3, r3
 800c9f2:	69ba      	ldr	r2, [r7, #24]
 800c9f4:	4013      	ands	r3, r2
 800c9f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	689a      	ldr	r2, [r3, #8]
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	005b      	lsls	r3, r3, #1
 800ca00:	fa02 f303 	lsl.w	r3, r2, r3
 800ca04:	69ba      	ldr	r2, [r7, #24]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	69ba      	ldr	r2, [r7, #24]
 800ca0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	2b02      	cmp	r3, #2
 800ca16:	d003      	beq.n	800ca20 <HAL_GPIO_Init+0x100>
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	2b12      	cmp	r3, #18
 800ca1e:	d123      	bne.n	800ca68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	08da      	lsrs	r2, r3, #3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	3208      	adds	r2, #8
 800ca28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	f003 0307 	and.w	r3, r3, #7
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	220f      	movs	r2, #15
 800ca38:	fa02 f303 	lsl.w	r3, r2, r3
 800ca3c:	43db      	mvns	r3, r3
 800ca3e:	69ba      	ldr	r2, [r7, #24]
 800ca40:	4013      	ands	r3, r2
 800ca42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	691a      	ldr	r2, [r3, #16]
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	f003 0307 	and.w	r3, r3, #7
 800ca4e:	009b      	lsls	r3, r3, #2
 800ca50:	fa02 f303 	lsl.w	r3, r2, r3
 800ca54:	69ba      	ldr	r2, [r7, #24]
 800ca56:	4313      	orrs	r3, r2
 800ca58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800ca5a:	69fb      	ldr	r3, [r7, #28]
 800ca5c:	08da      	lsrs	r2, r3, #3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	3208      	adds	r2, #8
 800ca62:	69b9      	ldr	r1, [r7, #24]
 800ca64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	005b      	lsls	r3, r3, #1
 800ca72:	2203      	movs	r2, #3
 800ca74:	fa02 f303 	lsl.w	r3, r2, r3
 800ca78:	43db      	mvns	r3, r3
 800ca7a:	69ba      	ldr	r2, [r7, #24]
 800ca7c:	4013      	ands	r3, r2
 800ca7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	f003 0203 	and.w	r2, r3, #3
 800ca88:	69fb      	ldr	r3, [r7, #28]
 800ca8a:	005b      	lsls	r3, r3, #1
 800ca8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca90:	69ba      	ldr	r2, [r7, #24]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	69ba      	ldr	r2, [r7, #24]
 800ca9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	f000 80b2 	beq.w	800cc0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800caaa:	4b5f      	ldr	r3, [pc, #380]	; (800cc28 <HAL_GPIO_Init+0x308>)
 800caac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caae:	4a5e      	ldr	r2, [pc, #376]	; (800cc28 <HAL_GPIO_Init+0x308>)
 800cab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cab4:	6453      	str	r3, [r2, #68]	; 0x44
 800cab6:	4b5c      	ldr	r3, [pc, #368]	; (800cc28 <HAL_GPIO_Init+0x308>)
 800cab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cabe:	60fb      	str	r3, [r7, #12]
 800cac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800cac2:	4a5a      	ldr	r2, [pc, #360]	; (800cc2c <HAL_GPIO_Init+0x30c>)
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	089b      	lsrs	r3, r3, #2
 800cac8:	3302      	adds	r3, #2
 800caca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cace:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	f003 0303 	and.w	r3, r3, #3
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	220f      	movs	r2, #15
 800cada:	fa02 f303 	lsl.w	r3, r2, r3
 800cade:	43db      	mvns	r3, r3
 800cae0:	69ba      	ldr	r2, [r7, #24]
 800cae2:	4013      	ands	r3, r2
 800cae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4a51      	ldr	r2, [pc, #324]	; (800cc30 <HAL_GPIO_Init+0x310>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d02b      	beq.n	800cb46 <HAL_GPIO_Init+0x226>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4a50      	ldr	r2, [pc, #320]	; (800cc34 <HAL_GPIO_Init+0x314>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d025      	beq.n	800cb42 <HAL_GPIO_Init+0x222>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	4a4f      	ldr	r2, [pc, #316]	; (800cc38 <HAL_GPIO_Init+0x318>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d01f      	beq.n	800cb3e <HAL_GPIO_Init+0x21e>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	4a4e      	ldr	r2, [pc, #312]	; (800cc3c <HAL_GPIO_Init+0x31c>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d019      	beq.n	800cb3a <HAL_GPIO_Init+0x21a>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	4a4d      	ldr	r2, [pc, #308]	; (800cc40 <HAL_GPIO_Init+0x320>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d013      	beq.n	800cb36 <HAL_GPIO_Init+0x216>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	4a4c      	ldr	r2, [pc, #304]	; (800cc44 <HAL_GPIO_Init+0x324>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d00d      	beq.n	800cb32 <HAL_GPIO_Init+0x212>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4a4b      	ldr	r2, [pc, #300]	; (800cc48 <HAL_GPIO_Init+0x328>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d007      	beq.n	800cb2e <HAL_GPIO_Init+0x20e>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4a4a      	ldr	r2, [pc, #296]	; (800cc4c <HAL_GPIO_Init+0x32c>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d101      	bne.n	800cb2a <HAL_GPIO_Init+0x20a>
 800cb26:	2307      	movs	r3, #7
 800cb28:	e00e      	b.n	800cb48 <HAL_GPIO_Init+0x228>
 800cb2a:	2308      	movs	r3, #8
 800cb2c:	e00c      	b.n	800cb48 <HAL_GPIO_Init+0x228>
 800cb2e:	2306      	movs	r3, #6
 800cb30:	e00a      	b.n	800cb48 <HAL_GPIO_Init+0x228>
 800cb32:	2305      	movs	r3, #5
 800cb34:	e008      	b.n	800cb48 <HAL_GPIO_Init+0x228>
 800cb36:	2304      	movs	r3, #4
 800cb38:	e006      	b.n	800cb48 <HAL_GPIO_Init+0x228>
 800cb3a:	2303      	movs	r3, #3
 800cb3c:	e004      	b.n	800cb48 <HAL_GPIO_Init+0x228>
 800cb3e:	2302      	movs	r3, #2
 800cb40:	e002      	b.n	800cb48 <HAL_GPIO_Init+0x228>
 800cb42:	2301      	movs	r3, #1
 800cb44:	e000      	b.n	800cb48 <HAL_GPIO_Init+0x228>
 800cb46:	2300      	movs	r3, #0
 800cb48:	69fa      	ldr	r2, [r7, #28]
 800cb4a:	f002 0203 	and.w	r2, r2, #3
 800cb4e:	0092      	lsls	r2, r2, #2
 800cb50:	4093      	lsls	r3, r2
 800cb52:	69ba      	ldr	r2, [r7, #24]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800cb58:	4934      	ldr	r1, [pc, #208]	; (800cc2c <HAL_GPIO_Init+0x30c>)
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	089b      	lsrs	r3, r3, #2
 800cb5e:	3302      	adds	r3, #2
 800cb60:	69ba      	ldr	r2, [r7, #24]
 800cb62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cb66:	4b3a      	ldr	r3, [pc, #232]	; (800cc50 <HAL_GPIO_Init+0x330>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	43db      	mvns	r3, r3
 800cb70:	69ba      	ldr	r2, [r7, #24]
 800cb72:	4013      	ands	r3, r2
 800cb74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d003      	beq.n	800cb8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800cb82:	69ba      	ldr	r2, [r7, #24]
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	4313      	orrs	r3, r2
 800cb88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cb8a:	4a31      	ldr	r2, [pc, #196]	; (800cc50 <HAL_GPIO_Init+0x330>)
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800cb90:	4b2f      	ldr	r3, [pc, #188]	; (800cc50 <HAL_GPIO_Init+0x330>)
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	43db      	mvns	r3, r3
 800cb9a:	69ba      	ldr	r2, [r7, #24]
 800cb9c:	4013      	ands	r3, r2
 800cb9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d003      	beq.n	800cbb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800cbac:	69ba      	ldr	r2, [r7, #24]
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cbb4:	4a26      	ldr	r2, [pc, #152]	; (800cc50 <HAL_GPIO_Init+0x330>)
 800cbb6:	69bb      	ldr	r3, [r7, #24]
 800cbb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cbba:	4b25      	ldr	r3, [pc, #148]	; (800cc50 <HAL_GPIO_Init+0x330>)
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	43db      	mvns	r3, r3
 800cbc4:	69ba      	ldr	r2, [r7, #24]
 800cbc6:	4013      	ands	r3, r2
 800cbc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d003      	beq.n	800cbde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800cbd6:	69ba      	ldr	r2, [r7, #24]
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cbde:	4a1c      	ldr	r2, [pc, #112]	; (800cc50 <HAL_GPIO_Init+0x330>)
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cbe4:	4b1a      	ldr	r3, [pc, #104]	; (800cc50 <HAL_GPIO_Init+0x330>)
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	43db      	mvns	r3, r3
 800cbee:	69ba      	ldr	r2, [r7, #24]
 800cbf0:	4013      	ands	r3, r2
 800cbf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d003      	beq.n	800cc08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800cc00:	69ba      	ldr	r2, [r7, #24]
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	4313      	orrs	r3, r2
 800cc06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cc08:	4a11      	ldr	r2, [pc, #68]	; (800cc50 <HAL_GPIO_Init+0x330>)
 800cc0a:	69bb      	ldr	r3, [r7, #24]
 800cc0c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	3301      	adds	r3, #1
 800cc12:	61fb      	str	r3, [r7, #28]
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	2b0f      	cmp	r3, #15
 800cc18:	f67f ae92 	bls.w	800c940 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800cc1c:	bf00      	nop
 800cc1e:	3724      	adds	r7, #36	; 0x24
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr
 800cc28:	40023800 	.word	0x40023800
 800cc2c:	40013800 	.word	0x40013800
 800cc30:	40020000 	.word	0x40020000
 800cc34:	40020400 	.word	0x40020400
 800cc38:	40020800 	.word	0x40020800
 800cc3c:	40020c00 	.word	0x40020c00
 800cc40:	40021000 	.word	0x40021000
 800cc44:	40021400 	.word	0x40021400
 800cc48:	40021800 	.word	0x40021800
 800cc4c:	40021c00 	.word	0x40021c00
 800cc50:	40013c00 	.word	0x40013c00

0800cc54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
inline GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b085      	sub	sp, #20
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	691a      	ldr	r2, [r3, #16]
 800cc64:	887b      	ldrh	r3, [r7, #2]
 800cc66:	4013      	ands	r3, r2
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d002      	beq.n	800cc72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	73fb      	strb	r3, [r7, #15]
 800cc70:	e001      	b.n	800cc76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800cc72:	2300      	movs	r3, #0
 800cc74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cc76:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3714      	adds	r7, #20
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr

0800cc84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
inline void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	807b      	strh	r3, [r7, #2]
 800cc90:	4613      	mov	r3, r2
 800cc92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cc94:	787b      	ldrb	r3, [r7, #1]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d003      	beq.n	800cca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cc9a:	887a      	ldrh	r2, [r7, #2]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800cca0:	e003      	b.n	800ccaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800cca2:	887b      	ldrh	r3, [r7, #2]
 800cca4:	041a      	lsls	r2, r3, #16
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	619a      	str	r2, [r3, #24]
}
 800ccaa:	bf00      	nop
 800ccac:	370c      	adds	r7, #12
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr
	...

0800ccb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
inline void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ccc2:	4b08      	ldr	r3, [pc, #32]	; (800cce4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ccc4:	695a      	ldr	r2, [r3, #20]
 800ccc6:	88fb      	ldrh	r3, [r7, #6]
 800ccc8:	4013      	ands	r3, r2
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d006      	beq.n	800ccdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ccce:	4a05      	ldr	r2, [pc, #20]	; (800cce4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ccd0:	88fb      	ldrh	r3, [r7, #6]
 800ccd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ccd4:	88fb      	ldrh	r3, [r7, #6]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7fb f8fe 	bl	8007ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 800ccdc:	bf00      	nop
 800ccde:	3708      	adds	r7, #8
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	40013c00 	.word	0x40013c00

0800cce8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d101      	bne.n	800ccfa <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	e038      	b.n	800cd6c <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800cd02:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f245 5255 	movw	r2, #21845	; 0x5555
 800cd0c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	6852      	ldr	r2, [r2, #4]
 800cd16:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	6892      	ldr	r2, [r2, #8]
 800cd20:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800cd22:	f7fe fb49 	bl	800b3b8 <HAL_GetTick>
 800cd26:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800cd28:	e008      	b.n	800cd3c <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800cd2a:	f7fe fb45 	bl	800b3b8 <HAL_GetTick>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	1ad3      	subs	r3, r2, r3
 800cd34:	2b30      	cmp	r3, #48	; 0x30
 800cd36:	d901      	bls.n	800cd3c <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800cd38:	2303      	movs	r3, #3
 800cd3a:	e017      	b.n	800cd6c <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	68db      	ldr	r3, [r3, #12]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d1f1      	bne.n	800cd2a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	691a      	ldr	r2, [r3, #16]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d005      	beq.n	800cd60 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	68d2      	ldr	r2, [r2, #12]
 800cd5c:	611a      	str	r2, [r3, #16]
 800cd5e:	e004      	b.n	800cd6a <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800cd68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cd6a:	2300      	movs	r3, #0
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3710      	adds	r7, #16
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800cd84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cd86:	2300      	movs	r3, #0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	370c      	adds	r7, #12
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800cd9e:	4b23      	ldr	r3, [pc, #140]	; (800ce2c <HAL_PWREx_EnableOverDrive+0x98>)
 800cda0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cda2:	4a22      	ldr	r2, [pc, #136]	; (800ce2c <HAL_PWREx_EnableOverDrive+0x98>)
 800cda4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cda8:	6413      	str	r3, [r2, #64]	; 0x40
 800cdaa:	4b20      	ldr	r3, [pc, #128]	; (800ce2c <HAL_PWREx_EnableOverDrive+0x98>)
 800cdac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdb2:	603b      	str	r3, [r7, #0]
 800cdb4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800cdb6:	4b1e      	ldr	r3, [pc, #120]	; (800ce30 <HAL_PWREx_EnableOverDrive+0x9c>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a1d      	ldr	r2, [pc, #116]	; (800ce30 <HAL_PWREx_EnableOverDrive+0x9c>)
 800cdbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cdc0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cdc2:	f7fe faf9 	bl	800b3b8 <HAL_GetTick>
 800cdc6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800cdc8:	e009      	b.n	800cdde <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800cdca:	f7fe faf5 	bl	800b3b8 <HAL_GetTick>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	1ad3      	subs	r3, r2, r3
 800cdd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cdd8:	d901      	bls.n	800cdde <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800cdda:	2303      	movs	r3, #3
 800cddc:	e022      	b.n	800ce24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800cdde:	4b14      	ldr	r3, [pc, #80]	; (800ce30 <HAL_PWREx_EnableOverDrive+0x9c>)
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cde6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdea:	d1ee      	bne.n	800cdca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800cdec:	4b10      	ldr	r3, [pc, #64]	; (800ce30 <HAL_PWREx_EnableOverDrive+0x9c>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a0f      	ldr	r2, [pc, #60]	; (800ce30 <HAL_PWREx_EnableOverDrive+0x9c>)
 800cdf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cdf6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cdf8:	f7fe fade 	bl	800b3b8 <HAL_GetTick>
 800cdfc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800cdfe:	e009      	b.n	800ce14 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ce00:	f7fe fada 	bl	800b3b8 <HAL_GetTick>
 800ce04:	4602      	mov	r2, r0
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce0e:	d901      	bls.n	800ce14 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800ce10:	2303      	movs	r3, #3
 800ce12:	e007      	b.n	800ce24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ce14:	4b06      	ldr	r3, [pc, #24]	; (800ce30 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce20:	d1ee      	bne.n	800ce00 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800ce22:	2300      	movs	r3, #0
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	40023800 	.word	0x40023800
 800ce30:	40007000 	.word	0x40007000

0800ce34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b086      	sub	sp, #24
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d101      	bne.n	800ce4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800ce46:	2301      	movs	r3, #1
 800ce48:	e291      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f003 0301 	and.w	r3, r3, #1
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	f000 8087 	beq.w	800cf66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ce58:	4b96      	ldr	r3, [pc, #600]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	f003 030c 	and.w	r3, r3, #12
 800ce60:	2b04      	cmp	r3, #4
 800ce62:	d00c      	beq.n	800ce7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ce64:	4b93      	ldr	r3, [pc, #588]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	f003 030c 	and.w	r3, r3, #12
 800ce6c:	2b08      	cmp	r3, #8
 800ce6e:	d112      	bne.n	800ce96 <HAL_RCC_OscConfig+0x62>
 800ce70:	4b90      	ldr	r3, [pc, #576]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce7c:	d10b      	bne.n	800ce96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ce7e:	4b8d      	ldr	r3, [pc, #564]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d06c      	beq.n	800cf64 <HAL_RCC_OscConfig+0x130>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d168      	bne.n	800cf64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ce92:	2301      	movs	r3, #1
 800ce94:	e26b      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce9e:	d106      	bne.n	800ceae <HAL_RCC_OscConfig+0x7a>
 800cea0:	4b84      	ldr	r3, [pc, #528]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4a83      	ldr	r2, [pc, #524]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ceaa:	6013      	str	r3, [r2, #0]
 800ceac:	e02e      	b.n	800cf0c <HAL_RCC_OscConfig+0xd8>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10c      	bne.n	800ced0 <HAL_RCC_OscConfig+0x9c>
 800ceb6:	4b7f      	ldr	r3, [pc, #508]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a7e      	ldr	r2, [pc, #504]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cec0:	6013      	str	r3, [r2, #0]
 800cec2:	4b7c      	ldr	r3, [pc, #496]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a7b      	ldr	r2, [pc, #492]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cecc:	6013      	str	r3, [r2, #0]
 800cece:	e01d      	b.n	800cf0c <HAL_RCC_OscConfig+0xd8>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ced8:	d10c      	bne.n	800cef4 <HAL_RCC_OscConfig+0xc0>
 800ceda:	4b76      	ldr	r3, [pc, #472]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4a75      	ldr	r2, [pc, #468]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cee4:	6013      	str	r3, [r2, #0]
 800cee6:	4b73      	ldr	r3, [pc, #460]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4a72      	ldr	r2, [pc, #456]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800ceec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cef0:	6013      	str	r3, [r2, #0]
 800cef2:	e00b      	b.n	800cf0c <HAL_RCC_OscConfig+0xd8>
 800cef4:	4b6f      	ldr	r3, [pc, #444]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a6e      	ldr	r2, [pc, #440]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cefa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cefe:	6013      	str	r3, [r2, #0]
 800cf00:	4b6c      	ldr	r3, [pc, #432]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4a6b      	ldr	r2, [pc, #428]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cf06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d013      	beq.n	800cf3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf14:	f7fe fa50 	bl	800b3b8 <HAL_GetTick>
 800cf18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cf1a:	e008      	b.n	800cf2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cf1c:	f7fe fa4c 	bl	800b3b8 <HAL_GetTick>
 800cf20:	4602      	mov	r2, r0
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	1ad3      	subs	r3, r2, r3
 800cf26:	2b64      	cmp	r3, #100	; 0x64
 800cf28:	d901      	bls.n	800cf2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cf2a:	2303      	movs	r3, #3
 800cf2c:	e21f      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cf2e:	4b61      	ldr	r3, [pc, #388]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d0f0      	beq.n	800cf1c <HAL_RCC_OscConfig+0xe8>
 800cf3a:	e014      	b.n	800cf66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf3c:	f7fe fa3c 	bl	800b3b8 <HAL_GetTick>
 800cf40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cf42:	e008      	b.n	800cf56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cf44:	f7fe fa38 	bl	800b3b8 <HAL_GetTick>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	1ad3      	subs	r3, r2, r3
 800cf4e:	2b64      	cmp	r3, #100	; 0x64
 800cf50:	d901      	bls.n	800cf56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800cf52:	2303      	movs	r3, #3
 800cf54:	e20b      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cf56:	4b57      	ldr	r3, [pc, #348]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d1f0      	bne.n	800cf44 <HAL_RCC_OscConfig+0x110>
 800cf62:	e000      	b.n	800cf66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cf64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f003 0302 	and.w	r3, r3, #2
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d069      	beq.n	800d046 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cf72:	4b50      	ldr	r3, [pc, #320]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	f003 030c 	and.w	r3, r3, #12
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00b      	beq.n	800cf96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cf7e:	4b4d      	ldr	r3, [pc, #308]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cf80:	689b      	ldr	r3, [r3, #8]
 800cf82:	f003 030c 	and.w	r3, r3, #12
 800cf86:	2b08      	cmp	r3, #8
 800cf88:	d11c      	bne.n	800cfc4 <HAL_RCC_OscConfig+0x190>
 800cf8a:	4b4a      	ldr	r3, [pc, #296]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d116      	bne.n	800cfc4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cf96:	4b47      	ldr	r3, [pc, #284]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f003 0302 	and.w	r3, r3, #2
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d005      	beq.n	800cfae <HAL_RCC_OscConfig+0x17a>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	68db      	ldr	r3, [r3, #12]
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d001      	beq.n	800cfae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e1df      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cfae:	4b41      	ldr	r3, [pc, #260]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	691b      	ldr	r3, [r3, #16]
 800cfba:	00db      	lsls	r3, r3, #3
 800cfbc:	493d      	ldr	r1, [pc, #244]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cfc2:	e040      	b.n	800d046 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d023      	beq.n	800d014 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cfcc:	4b39      	ldr	r3, [pc, #228]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4a38      	ldr	r2, [pc, #224]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cfd2:	f043 0301 	orr.w	r3, r3, #1
 800cfd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfd8:	f7fe f9ee 	bl	800b3b8 <HAL_GetTick>
 800cfdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cfde:	e008      	b.n	800cff2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cfe0:	f7fe f9ea 	bl	800b3b8 <HAL_GetTick>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	1ad3      	subs	r3, r2, r3
 800cfea:	2b02      	cmp	r3, #2
 800cfec:	d901      	bls.n	800cff2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800cfee:	2303      	movs	r3, #3
 800cff0:	e1bd      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cff2:	4b30      	ldr	r3, [pc, #192]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f003 0302 	and.w	r3, r3, #2
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d0f0      	beq.n	800cfe0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cffe:	4b2d      	ldr	r3, [pc, #180]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	691b      	ldr	r3, [r3, #16]
 800d00a:	00db      	lsls	r3, r3, #3
 800d00c:	4929      	ldr	r1, [pc, #164]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d00e:	4313      	orrs	r3, r2
 800d010:	600b      	str	r3, [r1, #0]
 800d012:	e018      	b.n	800d046 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d014:	4b27      	ldr	r3, [pc, #156]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4a26      	ldr	r2, [pc, #152]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d01a:	f023 0301 	bic.w	r3, r3, #1
 800d01e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d020:	f7fe f9ca 	bl	800b3b8 <HAL_GetTick>
 800d024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d026:	e008      	b.n	800d03a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d028:	f7fe f9c6 	bl	800b3b8 <HAL_GetTick>
 800d02c:	4602      	mov	r2, r0
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	1ad3      	subs	r3, r2, r3
 800d032:	2b02      	cmp	r3, #2
 800d034:	d901      	bls.n	800d03a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d036:	2303      	movs	r3, #3
 800d038:	e199      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d03a:	4b1e      	ldr	r3, [pc, #120]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f003 0302 	and.w	r3, r3, #2
 800d042:	2b00      	cmp	r3, #0
 800d044:	d1f0      	bne.n	800d028 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f003 0308 	and.w	r3, r3, #8
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d038      	beq.n	800d0c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	695b      	ldr	r3, [r3, #20]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d019      	beq.n	800d08e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d05a:	4b16      	ldr	r3, [pc, #88]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d05c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d05e:	4a15      	ldr	r2, [pc, #84]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d060:	f043 0301 	orr.w	r3, r3, #1
 800d064:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d066:	f7fe f9a7 	bl	800b3b8 <HAL_GetTick>
 800d06a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d06c:	e008      	b.n	800d080 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d06e:	f7fe f9a3 	bl	800b3b8 <HAL_GetTick>
 800d072:	4602      	mov	r2, r0
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	1ad3      	subs	r3, r2, r3
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d901      	bls.n	800d080 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d07c:	2303      	movs	r3, #3
 800d07e:	e176      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d080:	4b0c      	ldr	r3, [pc, #48]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d084:	f003 0302 	and.w	r3, r3, #2
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d0f0      	beq.n	800d06e <HAL_RCC_OscConfig+0x23a>
 800d08c:	e01a      	b.n	800d0c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d08e:	4b09      	ldr	r3, [pc, #36]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d092:	4a08      	ldr	r2, [pc, #32]	; (800d0b4 <HAL_RCC_OscConfig+0x280>)
 800d094:	f023 0301 	bic.w	r3, r3, #1
 800d098:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d09a:	f7fe f98d 	bl	800b3b8 <HAL_GetTick>
 800d09e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d0a0:	e00a      	b.n	800d0b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d0a2:	f7fe f989 	bl	800b3b8 <HAL_GetTick>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	1ad3      	subs	r3, r2, r3
 800d0ac:	2b02      	cmp	r3, #2
 800d0ae:	d903      	bls.n	800d0b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d0b0:	2303      	movs	r3, #3
 800d0b2:	e15c      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
 800d0b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d0b8:	4b91      	ldr	r3, [pc, #580]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d0ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0bc:	f003 0302 	and.w	r3, r3, #2
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d1ee      	bne.n	800d0a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f003 0304 	and.w	r3, r3, #4
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f000 80a4 	beq.w	800d21a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d0d2:	4b8b      	ldr	r3, [pc, #556]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d10d      	bne.n	800d0fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800d0de:	4b88      	ldr	r3, [pc, #544]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0e2:	4a87      	ldr	r2, [pc, #540]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d0e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0e8:	6413      	str	r3, [r2, #64]	; 0x40
 800d0ea:	4b85      	ldr	r3, [pc, #532]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0f2:	60bb      	str	r3, [r7, #8]
 800d0f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d0fa:	4b82      	ldr	r3, [pc, #520]	; (800d304 <HAL_RCC_OscConfig+0x4d0>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d102:	2b00      	cmp	r3, #0
 800d104:	d118      	bne.n	800d138 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800d106:	4b7f      	ldr	r3, [pc, #508]	; (800d304 <HAL_RCC_OscConfig+0x4d0>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a7e      	ldr	r2, [pc, #504]	; (800d304 <HAL_RCC_OscConfig+0x4d0>)
 800d10c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d112:	f7fe f951 	bl	800b3b8 <HAL_GetTick>
 800d116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d118:	e008      	b.n	800d12c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d11a:	f7fe f94d 	bl	800b3b8 <HAL_GetTick>
 800d11e:	4602      	mov	r2, r0
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	1ad3      	subs	r3, r2, r3
 800d124:	2b64      	cmp	r3, #100	; 0x64
 800d126:	d901      	bls.n	800d12c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800d128:	2303      	movs	r3, #3
 800d12a:	e120      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d12c:	4b75      	ldr	r3, [pc, #468]	; (800d304 <HAL_RCC_OscConfig+0x4d0>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d134:	2b00      	cmp	r3, #0
 800d136:	d0f0      	beq.n	800d11a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d106      	bne.n	800d14e <HAL_RCC_OscConfig+0x31a>
 800d140:	4b6f      	ldr	r3, [pc, #444]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d144:	4a6e      	ldr	r2, [pc, #440]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d146:	f043 0301 	orr.w	r3, r3, #1
 800d14a:	6713      	str	r3, [r2, #112]	; 0x70
 800d14c:	e02d      	b.n	800d1aa <HAL_RCC_OscConfig+0x376>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d10c      	bne.n	800d170 <HAL_RCC_OscConfig+0x33c>
 800d156:	4b6a      	ldr	r3, [pc, #424]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d15a:	4a69      	ldr	r2, [pc, #420]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d15c:	f023 0301 	bic.w	r3, r3, #1
 800d160:	6713      	str	r3, [r2, #112]	; 0x70
 800d162:	4b67      	ldr	r3, [pc, #412]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d166:	4a66      	ldr	r2, [pc, #408]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d168:	f023 0304 	bic.w	r3, r3, #4
 800d16c:	6713      	str	r3, [r2, #112]	; 0x70
 800d16e:	e01c      	b.n	800d1aa <HAL_RCC_OscConfig+0x376>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	2b05      	cmp	r3, #5
 800d176:	d10c      	bne.n	800d192 <HAL_RCC_OscConfig+0x35e>
 800d178:	4b61      	ldr	r3, [pc, #388]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d17a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d17c:	4a60      	ldr	r2, [pc, #384]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d17e:	f043 0304 	orr.w	r3, r3, #4
 800d182:	6713      	str	r3, [r2, #112]	; 0x70
 800d184:	4b5e      	ldr	r3, [pc, #376]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d188:	4a5d      	ldr	r2, [pc, #372]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d18a:	f043 0301 	orr.w	r3, r3, #1
 800d18e:	6713      	str	r3, [r2, #112]	; 0x70
 800d190:	e00b      	b.n	800d1aa <HAL_RCC_OscConfig+0x376>
 800d192:	4b5b      	ldr	r3, [pc, #364]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d196:	4a5a      	ldr	r2, [pc, #360]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d198:	f023 0301 	bic.w	r3, r3, #1
 800d19c:	6713      	str	r3, [r2, #112]	; 0x70
 800d19e:	4b58      	ldr	r3, [pc, #352]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d1a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1a2:	4a57      	ldr	r2, [pc, #348]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d1a4:	f023 0304 	bic.w	r3, r3, #4
 800d1a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	689b      	ldr	r3, [r3, #8]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d015      	beq.n	800d1de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d1b2:	f7fe f901 	bl	800b3b8 <HAL_GetTick>
 800d1b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d1b8:	e00a      	b.n	800d1d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d1ba:	f7fe f8fd 	bl	800b3b8 <HAL_GetTick>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	1ad3      	subs	r3, r2, r3
 800d1c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d901      	bls.n	800d1d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800d1cc:	2303      	movs	r3, #3
 800d1ce:	e0ce      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d1d0:	4b4b      	ldr	r3, [pc, #300]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d1d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1d4:	f003 0302 	and.w	r3, r3, #2
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d0ee      	beq.n	800d1ba <HAL_RCC_OscConfig+0x386>
 800d1dc:	e014      	b.n	800d208 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d1de:	f7fe f8eb 	bl	800b3b8 <HAL_GetTick>
 800d1e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d1e4:	e00a      	b.n	800d1fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d1e6:	f7fe f8e7 	bl	800b3b8 <HAL_GetTick>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	1ad3      	subs	r3, r2, r3
 800d1f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d901      	bls.n	800d1fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800d1f8:	2303      	movs	r3, #3
 800d1fa:	e0b8      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d1fc:	4b40      	ldr	r3, [pc, #256]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d1fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d200:	f003 0302 	and.w	r3, r3, #2
 800d204:	2b00      	cmp	r3, #0
 800d206:	d1ee      	bne.n	800d1e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d208:	7dfb      	ldrb	r3, [r7, #23]
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d105      	bne.n	800d21a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d20e:	4b3c      	ldr	r3, [pc, #240]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d212:	4a3b      	ldr	r2, [pc, #236]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d218:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	699b      	ldr	r3, [r3, #24]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f000 80a4 	beq.w	800d36c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d224:	4b36      	ldr	r3, [pc, #216]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	f003 030c 	and.w	r3, r3, #12
 800d22c:	2b08      	cmp	r3, #8
 800d22e:	d06b      	beq.n	800d308 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	699b      	ldr	r3, [r3, #24]
 800d234:	2b02      	cmp	r3, #2
 800d236:	d149      	bne.n	800d2cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d238:	4b31      	ldr	r3, [pc, #196]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a30      	ldr	r2, [pc, #192]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d23e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d244:	f7fe f8b8 	bl	800b3b8 <HAL_GetTick>
 800d248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d24a:	e008      	b.n	800d25e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d24c:	f7fe f8b4 	bl	800b3b8 <HAL_GetTick>
 800d250:	4602      	mov	r2, r0
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	1ad3      	subs	r3, r2, r3
 800d256:	2b02      	cmp	r3, #2
 800d258:	d901      	bls.n	800d25e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800d25a:	2303      	movs	r3, #3
 800d25c:	e087      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d25e:	4b28      	ldr	r3, [pc, #160]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1f0      	bne.n	800d24c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	69da      	ldr	r2, [r3, #28]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6a1b      	ldr	r3, [r3, #32]
 800d272:	431a      	orrs	r2, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d278:	019b      	lsls	r3, r3, #6
 800d27a:	431a      	orrs	r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d280:	085b      	lsrs	r3, r3, #1
 800d282:	3b01      	subs	r3, #1
 800d284:	041b      	lsls	r3, r3, #16
 800d286:	431a      	orrs	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d28c:	061b      	lsls	r3, r3, #24
 800d28e:	4313      	orrs	r3, r2
 800d290:	4a1b      	ldr	r2, [pc, #108]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d292:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d296:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d298:	4b19      	ldr	r3, [pc, #100]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a18      	ldr	r2, [pc, #96]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d29e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d2a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2a4:	f7fe f888 	bl	800b3b8 <HAL_GetTick>
 800d2a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d2aa:	e008      	b.n	800d2be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d2ac:	f7fe f884 	bl	800b3b8 <HAL_GetTick>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	1ad3      	subs	r3, r2, r3
 800d2b6:	2b02      	cmp	r3, #2
 800d2b8:	d901      	bls.n	800d2be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800d2ba:	2303      	movs	r3, #3
 800d2bc:	e057      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d2be:	4b10      	ldr	r3, [pc, #64]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d0f0      	beq.n	800d2ac <HAL_RCC_OscConfig+0x478>
 800d2ca:	e04f      	b.n	800d36c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d2cc:	4b0c      	ldr	r3, [pc, #48]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a0b      	ldr	r2, [pc, #44]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d2d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d2d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2d8:	f7fe f86e 	bl	800b3b8 <HAL_GetTick>
 800d2dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d2de:	e008      	b.n	800d2f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d2e0:	f7fe f86a 	bl	800b3b8 <HAL_GetTick>
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	1ad3      	subs	r3, r2, r3
 800d2ea:	2b02      	cmp	r3, #2
 800d2ec:	d901      	bls.n	800d2f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800d2ee:	2303      	movs	r3, #3
 800d2f0:	e03d      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d2f2:	4b03      	ldr	r3, [pc, #12]	; (800d300 <HAL_RCC_OscConfig+0x4cc>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1f0      	bne.n	800d2e0 <HAL_RCC_OscConfig+0x4ac>
 800d2fe:	e035      	b.n	800d36c <HAL_RCC_OscConfig+0x538>
 800d300:	40023800 	.word	0x40023800
 800d304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800d308:	4b1b      	ldr	r3, [pc, #108]	; (800d378 <HAL_RCC_OscConfig+0x544>)
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	699b      	ldr	r3, [r3, #24]
 800d312:	2b01      	cmp	r3, #1
 800d314:	d028      	beq.n	800d368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d320:	429a      	cmp	r2, r3
 800d322:	d121      	bne.n	800d368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d32e:	429a      	cmp	r2, r3
 800d330:	d11a      	bne.n	800d368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d338:	4013      	ands	r3, r2
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d33e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d340:	4293      	cmp	r3, r2
 800d342:	d111      	bne.n	800d368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d34e:	085b      	lsrs	r3, r3, #1
 800d350:	3b01      	subs	r3, #1
 800d352:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d354:	429a      	cmp	r2, r3
 800d356:	d107      	bne.n	800d368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d362:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d364:	429a      	cmp	r2, r3
 800d366:	d001      	beq.n	800d36c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800d368:	2301      	movs	r3, #1
 800d36a:	e000      	b.n	800d36e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3718      	adds	r7, #24
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	40023800 	.word	0x40023800

0800d37c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800d386:	2300      	movs	r3, #0
 800d388:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d101      	bne.n	800d394 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d390:	2301      	movs	r3, #1
 800d392:	e0d0      	b.n	800d536 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d394:	4b6a      	ldr	r3, [pc, #424]	; (800d540 <HAL_RCC_ClockConfig+0x1c4>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f003 030f 	and.w	r3, r3, #15
 800d39c:	683a      	ldr	r2, [r7, #0]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d910      	bls.n	800d3c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d3a2:	4b67      	ldr	r3, [pc, #412]	; (800d540 <HAL_RCC_ClockConfig+0x1c4>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f023 020f 	bic.w	r2, r3, #15
 800d3aa:	4965      	ldr	r1, [pc, #404]	; (800d540 <HAL_RCC_ClockConfig+0x1c4>)
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d3b2:	4b63      	ldr	r3, [pc, #396]	; (800d540 <HAL_RCC_ClockConfig+0x1c4>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f003 030f 	and.w	r3, r3, #15
 800d3ba:	683a      	ldr	r2, [r7, #0]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d001      	beq.n	800d3c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	e0b8      	b.n	800d536 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f003 0302 	and.w	r3, r3, #2
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d020      	beq.n	800d412 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f003 0304 	and.w	r3, r3, #4
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d005      	beq.n	800d3e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d3dc:	4b59      	ldr	r3, [pc, #356]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	4a58      	ldr	r2, [pc, #352]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d3e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d3e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f003 0308 	and.w	r3, r3, #8
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d005      	beq.n	800d400 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d3f4:	4b53      	ldr	r3, [pc, #332]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d3f6:	689b      	ldr	r3, [r3, #8]
 800d3f8:	4a52      	ldr	r2, [pc, #328]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d3fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d3fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d400:	4b50      	ldr	r3, [pc, #320]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d402:	689b      	ldr	r3, [r3, #8]
 800d404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	494d      	ldr	r1, [pc, #308]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d40e:	4313      	orrs	r3, r2
 800d410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f003 0301 	and.w	r3, r3, #1
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d040      	beq.n	800d4a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	2b01      	cmp	r3, #1
 800d424:	d107      	bne.n	800d436 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d426:	4b47      	ldr	r3, [pc, #284]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d115      	bne.n	800d45e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d432:	2301      	movs	r3, #1
 800d434:	e07f      	b.n	800d536 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	2b02      	cmp	r3, #2
 800d43c:	d107      	bne.n	800d44e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d43e:	4b41      	ldr	r3, [pc, #260]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d446:	2b00      	cmp	r3, #0
 800d448:	d109      	bne.n	800d45e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d44a:	2301      	movs	r3, #1
 800d44c:	e073      	b.n	800d536 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d44e:	4b3d      	ldr	r3, [pc, #244]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f003 0302 	and.w	r3, r3, #2
 800d456:	2b00      	cmp	r3, #0
 800d458:	d101      	bne.n	800d45e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d45a:	2301      	movs	r3, #1
 800d45c:	e06b      	b.n	800d536 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d45e:	4b39      	ldr	r3, [pc, #228]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	f023 0203 	bic.w	r2, r3, #3
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	4936      	ldr	r1, [pc, #216]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d46c:	4313      	orrs	r3, r2
 800d46e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d470:	f7fd ffa2 	bl	800b3b8 <HAL_GetTick>
 800d474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d476:	e00a      	b.n	800d48e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d478:	f7fd ff9e 	bl	800b3b8 <HAL_GetTick>
 800d47c:	4602      	mov	r2, r0
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	1ad3      	subs	r3, r2, r3
 800d482:	f241 3288 	movw	r2, #5000	; 0x1388
 800d486:	4293      	cmp	r3, r2
 800d488:	d901      	bls.n	800d48e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800d48a:	2303      	movs	r3, #3
 800d48c:	e053      	b.n	800d536 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d48e:	4b2d      	ldr	r3, [pc, #180]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d490:	689b      	ldr	r3, [r3, #8]
 800d492:	f003 020c 	and.w	r2, r3, #12
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d1eb      	bne.n	800d478 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d4a0:	4b27      	ldr	r3, [pc, #156]	; (800d540 <HAL_RCC_ClockConfig+0x1c4>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f003 030f 	and.w	r3, r3, #15
 800d4a8:	683a      	ldr	r2, [r7, #0]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d210      	bcs.n	800d4d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d4ae:	4b24      	ldr	r3, [pc, #144]	; (800d540 <HAL_RCC_ClockConfig+0x1c4>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f023 020f 	bic.w	r2, r3, #15
 800d4b6:	4922      	ldr	r1, [pc, #136]	; (800d540 <HAL_RCC_ClockConfig+0x1c4>)
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d4be:	4b20      	ldr	r3, [pc, #128]	; (800d540 <HAL_RCC_ClockConfig+0x1c4>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f003 030f 	and.w	r3, r3, #15
 800d4c6:	683a      	ldr	r2, [r7, #0]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d001      	beq.n	800d4d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e032      	b.n	800d536 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f003 0304 	and.w	r3, r3, #4
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d008      	beq.n	800d4ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d4dc:	4b19      	ldr	r3, [pc, #100]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d4de:	689b      	ldr	r3, [r3, #8]
 800d4e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	4916      	ldr	r1, [pc, #88]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f003 0308 	and.w	r3, r3, #8
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d009      	beq.n	800d50e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d4fa:	4b12      	ldr	r3, [pc, #72]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d4fc:	689b      	ldr	r3, [r3, #8]
 800d4fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	691b      	ldr	r3, [r3, #16]
 800d506:	00db      	lsls	r3, r3, #3
 800d508:	490e      	ldr	r1, [pc, #56]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d50a:	4313      	orrs	r3, r2
 800d50c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d50e:	f000 f821 	bl	800d554 <HAL_RCC_GetSysClockFreq>
 800d512:	4601      	mov	r1, r0
 800d514:	4b0b      	ldr	r3, [pc, #44]	; (800d544 <HAL_RCC_ClockConfig+0x1c8>)
 800d516:	689b      	ldr	r3, [r3, #8]
 800d518:	091b      	lsrs	r3, r3, #4
 800d51a:	f003 030f 	and.w	r3, r3, #15
 800d51e:	4a0a      	ldr	r2, [pc, #40]	; (800d548 <HAL_RCC_ClockConfig+0x1cc>)
 800d520:	5cd3      	ldrb	r3, [r2, r3]
 800d522:	fa21 f303 	lsr.w	r3, r1, r3
 800d526:	4a09      	ldr	r2, [pc, #36]	; (800d54c <HAL_RCC_ClockConfig+0x1d0>)
 800d528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800d52a:	4b09      	ldr	r3, [pc, #36]	; (800d550 <HAL_RCC_ClockConfig+0x1d4>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4618      	mov	r0, r3
 800d530:	f7fd fefe 	bl	800b330 <HAL_InitTick>

  return HAL_OK;
 800d534:	2300      	movs	r3, #0
}
 800d536:	4618      	mov	r0, r3
 800d538:	3710      	adds	r7, #16
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	bf00      	nop
 800d540:	40023c00 	.word	0x40023c00
 800d544:	40023800 	.word	0x40023800
 800d548:	0801193c 	.word	0x0801193c
 800d54c:	200104c4 	.word	0x200104c4
 800d550:	200118c0 	.word	0x200118c0

0800d554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d554:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d556:	b085      	sub	sp, #20
 800d558:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800d55a:	2300      	movs	r3, #0
 800d55c:	607b      	str	r3, [r7, #4]
 800d55e:	2300      	movs	r3, #0
 800d560:	60fb      	str	r3, [r7, #12]
 800d562:	2300      	movs	r3, #0
 800d564:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800d566:	2300      	movs	r3, #0
 800d568:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d56a:	4b50      	ldr	r3, [pc, #320]	; (800d6ac <HAL_RCC_GetSysClockFreq+0x158>)
 800d56c:	689b      	ldr	r3, [r3, #8]
 800d56e:	f003 030c 	and.w	r3, r3, #12
 800d572:	2b04      	cmp	r3, #4
 800d574:	d007      	beq.n	800d586 <HAL_RCC_GetSysClockFreq+0x32>
 800d576:	2b08      	cmp	r3, #8
 800d578:	d008      	beq.n	800d58c <HAL_RCC_GetSysClockFreq+0x38>
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	f040 808d 	bne.w	800d69a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d580:	4b4b      	ldr	r3, [pc, #300]	; (800d6b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800d582:	60bb      	str	r3, [r7, #8]
      break;
 800d584:	e08c      	b.n	800d6a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d586:	4b4b      	ldr	r3, [pc, #300]	; (800d6b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800d588:	60bb      	str	r3, [r7, #8]
      break;
 800d58a:	e089      	b.n	800d6a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d58c:	4b47      	ldr	r3, [pc, #284]	; (800d6ac <HAL_RCC_GetSysClockFreq+0x158>)
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d594:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d596:	4b45      	ldr	r3, [pc, #276]	; (800d6ac <HAL_RCC_GetSysClockFreq+0x158>)
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d023      	beq.n	800d5ea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d5a2:	4b42      	ldr	r3, [pc, #264]	; (800d6ac <HAL_RCC_GetSysClockFreq+0x158>)
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	099b      	lsrs	r3, r3, #6
 800d5a8:	f04f 0400 	mov.w	r4, #0
 800d5ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d5b0:	f04f 0200 	mov.w	r2, #0
 800d5b4:	ea03 0501 	and.w	r5, r3, r1
 800d5b8:	ea04 0602 	and.w	r6, r4, r2
 800d5bc:	4a3d      	ldr	r2, [pc, #244]	; (800d6b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800d5be:	fb02 f106 	mul.w	r1, r2, r6
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	fb02 f205 	mul.w	r2, r2, r5
 800d5c8:	440a      	add	r2, r1
 800d5ca:	493a      	ldr	r1, [pc, #232]	; (800d6b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800d5cc:	fba5 0101 	umull	r0, r1, r5, r1
 800d5d0:	1853      	adds	r3, r2, r1
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f04f 0400 	mov.w	r4, #0
 800d5da:	461a      	mov	r2, r3
 800d5dc:	4623      	mov	r3, r4
 800d5de:	f7f3 fa3d 	bl	8000a5c <__aeabi_uldivmod>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	460c      	mov	r4, r1
 800d5e6:	60fb      	str	r3, [r7, #12]
 800d5e8:	e049      	b.n	800d67e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d5ea:	4b30      	ldr	r3, [pc, #192]	; (800d6ac <HAL_RCC_GetSysClockFreq+0x158>)
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	099b      	lsrs	r3, r3, #6
 800d5f0:	f04f 0400 	mov.w	r4, #0
 800d5f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d5f8:	f04f 0200 	mov.w	r2, #0
 800d5fc:	ea03 0501 	and.w	r5, r3, r1
 800d600:	ea04 0602 	and.w	r6, r4, r2
 800d604:	4629      	mov	r1, r5
 800d606:	4632      	mov	r2, r6
 800d608:	f04f 0300 	mov.w	r3, #0
 800d60c:	f04f 0400 	mov.w	r4, #0
 800d610:	0154      	lsls	r4, r2, #5
 800d612:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d616:	014b      	lsls	r3, r1, #5
 800d618:	4619      	mov	r1, r3
 800d61a:	4622      	mov	r2, r4
 800d61c:	1b49      	subs	r1, r1, r5
 800d61e:	eb62 0206 	sbc.w	r2, r2, r6
 800d622:	f04f 0300 	mov.w	r3, #0
 800d626:	f04f 0400 	mov.w	r4, #0
 800d62a:	0194      	lsls	r4, r2, #6
 800d62c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d630:	018b      	lsls	r3, r1, #6
 800d632:	1a5b      	subs	r3, r3, r1
 800d634:	eb64 0402 	sbc.w	r4, r4, r2
 800d638:	f04f 0100 	mov.w	r1, #0
 800d63c:	f04f 0200 	mov.w	r2, #0
 800d640:	00e2      	lsls	r2, r4, #3
 800d642:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d646:	00d9      	lsls	r1, r3, #3
 800d648:	460b      	mov	r3, r1
 800d64a:	4614      	mov	r4, r2
 800d64c:	195b      	adds	r3, r3, r5
 800d64e:	eb44 0406 	adc.w	r4, r4, r6
 800d652:	f04f 0100 	mov.w	r1, #0
 800d656:	f04f 0200 	mov.w	r2, #0
 800d65a:	02a2      	lsls	r2, r4, #10
 800d65c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800d660:	0299      	lsls	r1, r3, #10
 800d662:	460b      	mov	r3, r1
 800d664:	4614      	mov	r4, r2
 800d666:	4618      	mov	r0, r3
 800d668:	4621      	mov	r1, r4
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f04f 0400 	mov.w	r4, #0
 800d670:	461a      	mov	r2, r3
 800d672:	4623      	mov	r3, r4
 800d674:	f7f3 f9f2 	bl	8000a5c <__aeabi_uldivmod>
 800d678:	4603      	mov	r3, r0
 800d67a:	460c      	mov	r4, r1
 800d67c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800d67e:	4b0b      	ldr	r3, [pc, #44]	; (800d6ac <HAL_RCC_GetSysClockFreq+0x158>)
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	0c1b      	lsrs	r3, r3, #16
 800d684:	f003 0303 	and.w	r3, r3, #3
 800d688:	3301      	adds	r3, #1
 800d68a:	005b      	lsls	r3, r3, #1
 800d68c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800d68e:	68fa      	ldr	r2, [r7, #12]
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	fbb2 f3f3 	udiv	r3, r2, r3
 800d696:	60bb      	str	r3, [r7, #8]
      break;
 800d698:	e002      	b.n	800d6a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d69a:	4b05      	ldr	r3, [pc, #20]	; (800d6b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800d69c:	60bb      	str	r3, [r7, #8]
      break;
 800d69e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d6a0:	68bb      	ldr	r3, [r7, #8]
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3714      	adds	r7, #20
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	40023800 	.word	0x40023800
 800d6b0:	00f42400 	.word	0x00f42400
 800d6b4:	017d7840 	.word	0x017d7840

0800d6b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d6bc:	4b03      	ldr	r3, [pc, #12]	; (800d6cc <HAL_RCC_GetHCLKFreq+0x14>)
 800d6be:	681b      	ldr	r3, [r3, #0]
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	200104c4 	.word	0x200104c4

0800d6d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d6d4:	f7ff fff0 	bl	800d6b8 <HAL_RCC_GetHCLKFreq>
 800d6d8:	4601      	mov	r1, r0
 800d6da:	4b05      	ldr	r3, [pc, #20]	; (800d6f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	0a9b      	lsrs	r3, r3, #10
 800d6e0:	f003 0307 	and.w	r3, r3, #7
 800d6e4:	4a03      	ldr	r2, [pc, #12]	; (800d6f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d6e6:	5cd3      	ldrb	r3, [r2, r3]
 800d6e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	40023800 	.word	0x40023800
 800d6f4:	0801194c 	.word	0x0801194c

0800d6f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d6fc:	f7ff ffdc 	bl	800d6b8 <HAL_RCC_GetHCLKFreq>
 800d700:	4601      	mov	r1, r0
 800d702:	4b05      	ldr	r3, [pc, #20]	; (800d718 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	0b5b      	lsrs	r3, r3, #13
 800d708:	f003 0307 	and.w	r3, r3, #7
 800d70c:	4a03      	ldr	r2, [pc, #12]	; (800d71c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d70e:	5cd3      	ldrb	r3, [r2, r3]
 800d710:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d714:	4618      	mov	r0, r3
 800d716:	bd80      	pop	{r7, pc}
 800d718:	40023800 	.word	0x40023800
 800d71c:	0801194c 	.word	0x0801194c

0800d720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b088      	sub	sp, #32
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d728:	2300      	movs	r3, #0
 800d72a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800d72c:	2300      	movs	r3, #0
 800d72e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800d730:	2300      	movs	r3, #0
 800d732:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800d734:	2300      	movs	r3, #0
 800d736:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f003 0301 	and.w	r3, r3, #1
 800d740:	2b00      	cmp	r3, #0
 800d742:	d012      	beq.n	800d76a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d744:	4b65      	ldr	r3, [pc, #404]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	4a64      	ldr	r2, [pc, #400]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d74a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d74e:	6093      	str	r3, [r2, #8]
 800d750:	4b62      	ldr	r3, [pc, #392]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d752:	689a      	ldr	r2, [r3, #8]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d758:	4960      	ldr	r1, [pc, #384]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d75a:	4313      	orrs	r3, r2
 800d75c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d762:	2b00      	cmp	r3, #0
 800d764:	d101      	bne.n	800d76a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800d766:	2301      	movs	r3, #1
 800d768:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d772:	2b00      	cmp	r3, #0
 800d774:	d017      	beq.n	800d7a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d776:	4b59      	ldr	r3, [pc, #356]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d77c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d784:	4955      	ldr	r1, [pc, #340]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d786:	4313      	orrs	r3, r2
 800d788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d790:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d794:	d101      	bne.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800d796:	2301      	movs	r3, #1
 800d798:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d101      	bne.n	800d7a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d017      	beq.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d7b2:	4b4a      	ldr	r3, [pc, #296]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d7b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c0:	4946      	ldr	r1, [pc, #280]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d7d0:	d101      	bne.n	800d7d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d101      	bne.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f003 0320 	and.w	r3, r3, #32
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	f000 808b 	beq.w	800d906 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d7f0:	4b3a      	ldr	r3, [pc, #232]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f4:	4a39      	ldr	r2, [pc, #228]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d7f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7fa:	6413      	str	r3, [r2, #64]	; 0x40
 800d7fc:	4b37      	ldr	r3, [pc, #220]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d804:	60fb      	str	r3, [r7, #12]
 800d806:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d808:	4b35      	ldr	r3, [pc, #212]	; (800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a34      	ldr	r2, [pc, #208]	; (800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800d80e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d814:	f7fd fdd0 	bl	800b3b8 <HAL_GetTick>
 800d818:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d81a:	e008      	b.n	800d82e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d81c:	f7fd fdcc 	bl	800b3b8 <HAL_GetTick>
 800d820:	4602      	mov	r2, r0
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	1ad3      	subs	r3, r2, r3
 800d826:	2b64      	cmp	r3, #100	; 0x64
 800d828:	d901      	bls.n	800d82e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d82a:	2303      	movs	r3, #3
 800d82c:	e2ba      	b.n	800dda4 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d82e:	4b2c      	ldr	r3, [pc, #176]	; (800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d836:	2b00      	cmp	r3, #0
 800d838:	d0f0      	beq.n	800d81c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d83a:	4b28      	ldr	r3, [pc, #160]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d83c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d83e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d842:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d035      	beq.n	800d8b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d84e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d852:	693a      	ldr	r2, [r7, #16]
 800d854:	429a      	cmp	r2, r3
 800d856:	d02e      	beq.n	800d8b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d858:	4b20      	ldr	r3, [pc, #128]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d85a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d85c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d860:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d862:	4b1e      	ldr	r3, [pc, #120]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d866:	4a1d      	ldr	r2, [pc, #116]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d86c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d86e:	4b1b      	ldr	r3, [pc, #108]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d872:	4a1a      	ldr	r2, [pc, #104]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d878:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800d87a:	4a18      	ldr	r2, [pc, #96]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d880:	4b16      	ldr	r3, [pc, #88]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d884:	f003 0301 	and.w	r3, r3, #1
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d114      	bne.n	800d8b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d88c:	f7fd fd94 	bl	800b3b8 <HAL_GetTick>
 800d890:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d892:	e00a      	b.n	800d8aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d894:	f7fd fd90 	bl	800b3b8 <HAL_GetTick>
 800d898:	4602      	mov	r2, r0
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	1ad3      	subs	r3, r2, r3
 800d89e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d901      	bls.n	800d8aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800d8a6:	2303      	movs	r3, #3
 800d8a8:	e27c      	b.n	800dda4 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d8aa:	4b0c      	ldr	r3, [pc, #48]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d8ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ae:	f003 0302 	and.w	r3, r3, #2
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d0ee      	beq.n	800d894 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d8c2:	d111      	bne.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800d8c4:	4b05      	ldr	r3, [pc, #20]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d8c6:	689b      	ldr	r3, [r3, #8]
 800d8c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800d8d0:	4b04      	ldr	r3, [pc, #16]	; (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800d8d2:	400b      	ands	r3, r1
 800d8d4:	4901      	ldr	r1, [pc, #4]	; (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d8d6:	4313      	orrs	r3, r2
 800d8d8:	608b      	str	r3, [r1, #8]
 800d8da:	e00b      	b.n	800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800d8dc:	40023800 	.word	0x40023800
 800d8e0:	40007000 	.word	0x40007000
 800d8e4:	0ffffcff 	.word	0x0ffffcff
 800d8e8:	4ba3      	ldr	r3, [pc, #652]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	4aa2      	ldr	r2, [pc, #648]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d8ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d8f2:	6093      	str	r3, [r2, #8]
 800d8f4:	4ba0      	ldr	r3, [pc, #640]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d8f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d900:	499d      	ldr	r1, [pc, #628]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d902:	4313      	orrs	r3, r2
 800d904:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f003 0310 	and.w	r3, r3, #16
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d010      	beq.n	800d934 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d912:	4b99      	ldr	r3, [pc, #612]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d918:	4a97      	ldr	r2, [pc, #604]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d91a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d91e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800d922:	4b95      	ldr	r3, [pc, #596]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d924:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d92c:	4992      	ldr	r1, [pc, #584]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d92e:	4313      	orrs	r3, r2
 800d930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d00a      	beq.n	800d956 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d940:	4b8d      	ldr	r3, [pc, #564]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d946:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d94e:	498a      	ldr	r1, [pc, #552]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d950:	4313      	orrs	r3, r2
 800d952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00a      	beq.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d962:	4b85      	ldr	r3, [pc, #532]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d968:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d970:	4981      	ldr	r1, [pc, #516]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d972:	4313      	orrs	r3, r2
 800d974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d980:	2b00      	cmp	r3, #0
 800d982:	d00a      	beq.n	800d99a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d984:	4b7c      	ldr	r3, [pc, #496]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d98a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d992:	4979      	ldr	r1, [pc, #484]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d994:	4313      	orrs	r3, r2
 800d996:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00a      	beq.n	800d9bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d9a6:	4b74      	ldr	r3, [pc, #464]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d9a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9ac:	f023 0203 	bic.w	r2, r3, #3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9b4:	4970      	ldr	r1, [pc, #448]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d00a      	beq.n	800d9de <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d9c8:	4b6b      	ldr	r3, [pc, #428]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d9ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9ce:	f023 020c 	bic.w	r2, r3, #12
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d6:	4968      	ldr	r1, [pc, #416]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d9d8:	4313      	orrs	r3, r2
 800d9da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d00a      	beq.n	800da00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d9ea:	4b63      	ldr	r3, [pc, #396]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d9ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9f8:	495f      	ldr	r1, [pc, #380]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d00a      	beq.n	800da22 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800da0c:	4b5a      	ldr	r3, [pc, #360]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800da0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da1a:	4957      	ldr	r1, [pc, #348]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800da1c:	4313      	orrs	r3, r2
 800da1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00a      	beq.n	800da44 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800da2e:	4b52      	ldr	r3, [pc, #328]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800da30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da3c:	494e      	ldr	r1, [pc, #312]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800da3e:	4313      	orrs	r3, r2
 800da40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d00a      	beq.n	800da66 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800da50:	4b49      	ldr	r3, [pc, #292]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800da52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da5e:	4946      	ldr	r1, [pc, #280]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800da60:	4313      	orrs	r3, r2
 800da62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00a      	beq.n	800da88 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800da72:	4b41      	ldr	r3, [pc, #260]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800da74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da80:	493d      	ldr	r1, [pc, #244]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800da82:	4313      	orrs	r3, r2
 800da84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800da90:	2b00      	cmp	r3, #0
 800da92:	d00a      	beq.n	800daaa <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800da94:	4b38      	ldr	r3, [pc, #224]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800da96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800daa2:	4935      	ldr	r1, [pc, #212]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800daa4:	4313      	orrs	r3, r2
 800daa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d011      	beq.n	800dada <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800dab6:	4b30      	ldr	r3, [pc, #192]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800dab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dabc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dac4:	492c      	ldr	r1, [pc, #176]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800dac6:	4313      	orrs	r3, r2
 800dac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dad4:	d101      	bne.n	800dada <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800dad6:	2301      	movs	r3, #1
 800dad8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00a      	beq.n	800dafc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dae6:	4b24      	ldr	r3, [pc, #144]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800dae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800daec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daf4:	4920      	ldr	r1, [pc, #128]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800daf6:	4313      	orrs	r3, r2
 800daf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00a      	beq.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800db08:	4b1b      	ldr	r3, [pc, #108]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800db0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db16:	4918      	ldr	r1, [pc, #96]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800db18:	4313      	orrs	r3, r2
 800db1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800db26:	2b00      	cmp	r3, #0
 800db28:	d00a      	beq.n	800db40 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800db2a:	4b13      	ldr	r3, [pc, #76]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800db2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db30:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db38:	490f      	ldr	r1, [pc, #60]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800db3a:	4313      	orrs	r3, r2
 800db3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800db40:	69fb      	ldr	r3, [r7, #28]
 800db42:	2b01      	cmp	r3, #1
 800db44:	d005      	beq.n	800db52 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db4e:	f040 809c 	bne.w	800dc8a <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800db52:	4b09      	ldr	r3, [pc, #36]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4a08      	ldr	r2, [pc, #32]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800db58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800db5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db5e:	f7fd fc2b 	bl	800b3b8 <HAL_GetTick>
 800db62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800db64:	e00a      	b.n	800db7c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800db66:	f7fd fc27 	bl	800b3b8 <HAL_GetTick>
 800db6a:	4602      	mov	r2, r0
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	1ad3      	subs	r3, r2, r3
 800db70:	2b64      	cmp	r3, #100	; 0x64
 800db72:	d903      	bls.n	800db7c <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800db74:	2303      	movs	r3, #3
 800db76:	e115      	b.n	800dda4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800db78:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800db7c:	4b8b      	ldr	r3, [pc, #556]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db84:	2b00      	cmp	r3, #0
 800db86:	d1ee      	bne.n	800db66 <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f003 0301 	and.w	r3, r3, #1
 800db90:	2b00      	cmp	r3, #0
 800db92:	d017      	beq.n	800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d113      	bne.n	800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800db9c:	4b83      	ldr	r3, [pc, #524]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800db9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dba2:	0e1b      	lsrs	r3, r3, #24
 800dba4:	f003 030f 	and.w	r3, r3, #15
 800dba8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	685b      	ldr	r3, [r3, #4]
 800dbae:	019a      	lsls	r2, r3, #6
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	061b      	lsls	r3, r3, #24
 800dbb4:	431a      	orrs	r2, r3
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	689b      	ldr	r3, [r3, #8]
 800dbba:	071b      	lsls	r3, r3, #28
 800dbbc:	497b      	ldr	r1, [pc, #492]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d004      	beq.n	800dbda <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbd8:	d00a      	beq.n	800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d024      	beq.n	800dc30 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dbee:	d11f      	bne.n	800dc30 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800dbf0:	4b6e      	ldr	r3, [pc, #440]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dbf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbf6:	0f1b      	lsrs	r3, r3, #28
 800dbf8:	f003 0307 	and.w	r3, r3, #7
 800dbfc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	019a      	lsls	r2, r3, #6
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	061b      	lsls	r3, r3, #24
 800dc0a:	431a      	orrs	r2, r3
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	071b      	lsls	r3, r3, #28
 800dc10:	4966      	ldr	r1, [pc, #408]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dc12:	4313      	orrs	r3, r2
 800dc14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800dc18:	4b64      	ldr	r3, [pc, #400]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dc1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc1e:	f023 021f 	bic.w	r2, r3, #31
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	69db      	ldr	r3, [r3, #28]
 800dc26:	3b01      	subs	r3, #1
 800dc28:	4960      	ldr	r1, [pc, #384]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d00d      	beq.n	800dc58 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	019a      	lsls	r2, r3, #6
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	061b      	lsls	r3, r3, #24
 800dc48:	431a      	orrs	r2, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	689b      	ldr	r3, [r3, #8]
 800dc4e:	071b      	lsls	r3, r3, #28
 800dc50:	4956      	ldr	r1, [pc, #344]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dc52:	4313      	orrs	r3, r2
 800dc54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800dc58:	4b54      	ldr	r3, [pc, #336]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4a53      	ldr	r2, [pc, #332]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dc5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dc62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc64:	f7fd fba8 	bl	800b3b8 <HAL_GetTick>
 800dc68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800dc6a:	e008      	b.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800dc6c:	f7fd fba4 	bl	800b3b8 <HAL_GetTick>
 800dc70:	4602      	mov	r2, r0
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	1ad3      	subs	r3, r2, r3
 800dc76:	2b64      	cmp	r3, #100	; 0x64
 800dc78:	d901      	bls.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800dc7a:	2303      	movs	r3, #3
 800dc7c:	e092      	b.n	800dda4 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800dc7e:	4b4b      	ldr	r3, [pc, #300]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d0f0      	beq.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	f040 8088 	bne.w	800dda2 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800dc92:	4b46      	ldr	r3, [pc, #280]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	4a45      	ldr	r2, [pc, #276]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dc98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc9e:	f7fd fb8b 	bl	800b3b8 <HAL_GetTick>
 800dca2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800dca4:	e008      	b.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800dca6:	f7fd fb87 	bl	800b3b8 <HAL_GetTick>
 800dcaa:	4602      	mov	r2, r0
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	1ad3      	subs	r3, r2, r3
 800dcb0:	2b64      	cmp	r3, #100	; 0x64
 800dcb2:	d901      	bls.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800dcb4:	2303      	movs	r3, #3
 800dcb6:	e075      	b.n	800dda4 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800dcb8:	4b3c      	ldr	r3, [pc, #240]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dcc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dcc4:	d0ef      	beq.n	800dca6 <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d003      	beq.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d009      	beq.n	800dcee <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d024      	beq.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d120      	bne.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800dcee:	4b2f      	ldr	r3, [pc, #188]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dcf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcf4:	0c1b      	lsrs	r3, r3, #16
 800dcf6:	f003 0303 	and.w	r3, r3, #3
 800dcfa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	691b      	ldr	r3, [r3, #16]
 800dd00:	019a      	lsls	r2, r3, #6
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	041b      	lsls	r3, r3, #16
 800dd06:	431a      	orrs	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	695b      	ldr	r3, [r3, #20]
 800dd0c:	061b      	lsls	r3, r3, #24
 800dd0e:	4927      	ldr	r1, [pc, #156]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dd10:	4313      	orrs	r3, r2
 800dd12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800dd16:	4b25      	ldr	r3, [pc, #148]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dd18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6a1b      	ldr	r3, [r3, #32]
 800dd24:	3b01      	subs	r3, #1
 800dd26:	021b      	lsls	r3, r3, #8
 800dd28:	4920      	ldr	r1, [pc, #128]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d018      	beq.n	800dd6e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dd44:	d113      	bne.n	800dd6e <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800dd46:	4b19      	ldr	r3, [pc, #100]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dd48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd4c:	0e1b      	lsrs	r3, r3, #24
 800dd4e:	f003 030f 	and.w	r3, r3, #15
 800dd52:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	691b      	ldr	r3, [r3, #16]
 800dd58:	019a      	lsls	r2, r3, #6
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	699b      	ldr	r3, [r3, #24]
 800dd5e:	041b      	lsls	r3, r3, #16
 800dd60:	431a      	orrs	r2, r3
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	061b      	lsls	r3, r3, #24
 800dd66:	4911      	ldr	r1, [pc, #68]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800dd6e:	4b0f      	ldr	r3, [pc, #60]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4a0e      	ldr	r2, [pc, #56]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dd74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd7a:	f7fd fb1d 	bl	800b3b8 <HAL_GetTick>
 800dd7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800dd80:	e008      	b.n	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800dd82:	f7fd fb19 	bl	800b3b8 <HAL_GetTick>
 800dd86:	4602      	mov	r2, r0
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	1ad3      	subs	r3, r2, r3
 800dd8c:	2b64      	cmp	r3, #100	; 0x64
 800dd8e:	d901      	bls.n	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800dd90:	2303      	movs	r3, #3
 800dd92:	e007      	b.n	800dda4 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800dd94:	4b05      	ldr	r3, [pc, #20]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dda0:	d1ef      	bne.n	800dd82 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 800dda2:	2300      	movs	r3, #0
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3720      	adds	r7, #32
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	40023800 	.word	0x40023800

0800ddb0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d101      	bne.n	800ddc2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	e01c      	b.n	800ddfc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	795b      	ldrb	r3, [r3, #5]
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d105      	bne.n	800ddd8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f7fb fd1e 	bl	8009814 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2202      	movs	r2, #2
 800dddc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f042 0204 	orr.w	r2, r2, #4
 800ddec:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800ddfa:	2300      	movs	r3, #0
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3708      	adds	r7, #8
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d101      	bne.n	800de16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800de12:	2301      	movs	r3, #1
 800de14:	e084      	b.n	800df20 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2200      	movs	r2, #0
 800de1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de22:	b2db      	uxtb	r3, r3
 800de24:	2b00      	cmp	r3, #0
 800de26:	d106      	bne.n	800de36 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2200      	movs	r2, #0
 800de2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f7fb fd0f 	bl	8009854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2202      	movs	r2, #2
 800de3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	681a      	ldr	r2, [r3, #0]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de4c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	68db      	ldr	r3, [r3, #12]
 800de52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800de56:	d902      	bls.n	800de5e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800de58:	2300      	movs	r3, #0
 800de5a:	60fb      	str	r3, [r7, #12]
 800de5c:	e002      	b.n	800de64 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800de5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de62:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	68db      	ldr	r3, [r3, #12]
 800de68:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800de6c:	d007      	beq.n	800de7e <HAL_SPI_Init+0x7a>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	68db      	ldr	r3, [r3, #12]
 800de72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800de76:	d002      	beq.n	800de7e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2200      	movs	r2, #0
 800de7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de82:	2b00      	cmp	r3, #0
 800de84:	d10b      	bne.n	800de9e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800de8e:	d903      	bls.n	800de98 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2202      	movs	r2, #2
 800de94:	631a      	str	r2, [r3, #48]	; 0x30
 800de96:	e002      	b.n	800de9e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2201      	movs	r2, #1
 800de9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	685a      	ldr	r2, [r3, #4]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	689b      	ldr	r3, [r3, #8]
 800dea6:	431a      	orrs	r2, r3
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	691b      	ldr	r3, [r3, #16]
 800deac:	431a      	orrs	r2, r3
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	695b      	ldr	r3, [r3, #20]
 800deb2:	431a      	orrs	r2, r3
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	699b      	ldr	r3, [r3, #24]
 800deb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800debc:	431a      	orrs	r2, r3
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	69db      	ldr	r3, [r3, #28]
 800dec2:	431a      	orrs	r2, r3
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6a1b      	ldr	r3, [r3, #32]
 800dec8:	ea42 0103 	orr.w	r1, r2, r3
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	430a      	orrs	r2, r1
 800ded6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	699b      	ldr	r3, [r3, #24]
 800dedc:	0c1b      	lsrs	r3, r3, #16
 800dede:	f003 0204 	and.w	r2, r3, #4
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee6:	431a      	orrs	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deec:	431a      	orrs	r2, r3
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	68db      	ldr	r3, [r3, #12]
 800def2:	ea42 0103 	orr.w	r1, r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	68fa      	ldr	r2, [r7, #12]
 800defc:	430a      	orrs	r2, r1
 800defe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	69da      	ldr	r2, [r3, #28]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2200      	movs	r2, #0
 800df14:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2201      	movs	r2, #1
 800df1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800df1e:	2300      	movs	r3, #0
}
 800df20:	4618      	mov	r0, r3
 800df22:	3710      	adds	r7, #16
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800df28:	b480      	push	{r7}
 800df2a:	b087      	sub	sp, #28
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	4613      	mov	r3, r2
 800df34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800df36:	2300      	movs	r3, #0
 800df38:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800df40:	2b01      	cmp	r3, #1
 800df42:	d101      	bne.n	800df48 <HAL_SPI_Transmit_IT+0x20>
 800df44:	2302      	movs	r3, #2
 800df46:	e06a      	b.n	800e01e <HAL_SPI_Transmit_IT+0xf6>
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2201      	movs	r2, #1
 800df4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d002      	beq.n	800df5c <HAL_SPI_Transmit_IT+0x34>
 800df56:	88fb      	ldrh	r3, [r7, #6]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d102      	bne.n	800df62 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800df5c:	2301      	movs	r3, #1
 800df5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800df60:	e058      	b.n	800e014 <HAL_SPI_Transmit_IT+0xec>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800df68:	b2db      	uxtb	r3, r3
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d002      	beq.n	800df74 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800df6e:	2302      	movs	r3, #2
 800df70:	75fb      	strb	r3, [r7, #23]
    goto error;
 800df72:	e04f      	b.n	800e014 <HAL_SPI_Transmit_IT+0xec>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2203      	movs	r2, #3
 800df78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2200      	movs	r2, #0
 800df80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	68ba      	ldr	r2, [r7, #8]
 800df86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	88fa      	ldrh	r2, [r7, #6]
 800df8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	88fa      	ldrh	r2, [r7, #6]
 800df92:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2200      	movs	r2, #0
 800df98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2200      	movs	r2, #0
 800df9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2200      	movs	r2, #0
 800dfae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dfb8:	d903      	bls.n	800dfc2 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	4a1b      	ldr	r2, [pc, #108]	; (800e02c <HAL_SPI_Transmit_IT+0x104>)
 800dfbe:	651a      	str	r2, [r3, #80]	; 0x50
 800dfc0:	e002      	b.n	800dfc8 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	4a1a      	ldr	r2, [pc, #104]	; (800e030 <HAL_SPI_Transmit_IT+0x108>)
 800dfc6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfd0:	d107      	bne.n	800dfe2 <HAL_SPI_Transmit_IT+0xba>
  {
    SPI_1LINE_TX(hspi);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dfe0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	685a      	ldr	r2, [r3, #4]
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800dff0:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dffc:	2b40      	cmp	r3, #64	; 0x40
 800dffe:	d008      	beq.n	800e012 <HAL_SPI_Transmit_IT+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e00e:	601a      	str	r2, [r3, #0]
 800e010:	e000      	b.n	800e014 <HAL_SPI_Transmit_IT+0xec>
  }

error :
 800e012:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	2200      	movs	r2, #0
 800e018:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e01c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e01e:	4618      	mov	r0, r3
 800e020:	371c      	adds	r7, #28
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr
 800e02a:	bf00      	nop
 800e02c:	0800f1bf 	.word	0x0800f1bf
 800e030:	0800f179 	.word	0x0800f179

0800e034 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b086      	sub	sp, #24
 800e038:	af00      	add	r7, sp, #0
 800e03a:	60f8      	str	r0, [r7, #12]
 800e03c:	60b9      	str	r1, [r7, #8]
 800e03e:	4613      	mov	r3, r2
 800e040:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e042:	2300      	movs	r3, #0
 800e044:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d110      	bne.n	800e070 <HAL_SPI_Receive_IT+0x3c>
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e056:	d10b      	bne.n	800e070 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2204      	movs	r2, #4
 800e05c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800e060:	88fb      	ldrh	r3, [r7, #6]
 800e062:	68ba      	ldr	r2, [r7, #8]
 800e064:	68b9      	ldr	r1, [r7, #8]
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	f000 f88c 	bl	800e184 <HAL_SPI_TransmitReceive_IT>
 800e06c:	4603      	mov	r3, r0
 800e06e:	e081      	b.n	800e174 <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e076:	2b01      	cmp	r3, #1
 800e078:	d101      	bne.n	800e07e <HAL_SPI_Receive_IT+0x4a>
 800e07a:	2302      	movs	r3, #2
 800e07c:	e07a      	b.n	800e174 <HAL_SPI_Receive_IT+0x140>
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2201      	movs	r2, #1
 800e082:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d002      	beq.n	800e098 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800e092:	2302      	movs	r3, #2
 800e094:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e096:	e068      	b.n	800e16a <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d002      	beq.n	800e0a4 <HAL_SPI_Receive_IT+0x70>
 800e09e:	88fb      	ldrh	r3, [r7, #6]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d102      	bne.n	800e0aa <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e0a8:	e05f      	b.n	800e16a <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2204      	movs	r2, #4
 800e0ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	68ba      	ldr	r2, [r7, #8]
 800e0bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	88fa      	ldrh	r2, [r7, #6]
 800e0c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	88fa      	ldrh	r2, [r7, #6]
 800e0ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	68db      	ldr	r3, [r3, #12]
 800e0ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e0ee:	d90b      	bls.n	800e108 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	685a      	ldr	r2, [r3, #4]
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e0fe:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	4a1e      	ldr	r2, [pc, #120]	; (800e17c <HAL_SPI_Receive_IT+0x148>)
 800e104:	64da      	str	r2, [r3, #76]	; 0x4c
 800e106:	e00a      	b.n	800e11e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	685a      	ldr	r2, [r3, #4]
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e116:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	4a19      	ldr	r2, [pc, #100]	; (800e180 <HAL_SPI_Receive_IT+0x14c>)
 800e11c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	689b      	ldr	r3, [r3, #8]
 800e122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e126:	d107      	bne.n	800e138 <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	681a      	ldr	r2, [r3, #0]
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e136:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	685a      	ldr	r2, [r3, #4]
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800e146:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e152:	2b40      	cmp	r3, #64	; 0x40
 800e154:	d008      	beq.n	800e168 <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e164:	601a      	str	r2, [r3, #0]
 800e166:	e000      	b.n	800e16a <HAL_SPI_Receive_IT+0x136>
  }

error :
 800e168:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	2200      	movs	r2, #0
 800e16e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e172:	7dfb      	ldrb	r3, [r7, #23]
}
 800e174:	4618      	mov	r0, r3
 800e176:	3718      	adds	r7, #24
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}
 800e17c:	0800f12d 	.word	0x0800f12d
 800e180:	0800f0dd 	.word	0x0800f0dd

0800e184 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800e184:	b480      	push	{r7}
 800e186:	b087      	sub	sp, #28
 800e188:	af00      	add	r7, sp, #0
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	607a      	str	r2, [r7, #4]
 800e190:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e192:	2300      	movs	r3, #0
 800e194:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d101      	bne.n	800e1a4 <HAL_SPI_TransmitReceive_IT+0x20>
 800e1a0:	2302      	movs	r3, #2
 800e1a2:	e091      	b.n	800e2c8 <HAL_SPI_TransmitReceive_IT+0x144>
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e1b2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e1ba:	7dbb      	ldrb	r3, [r7, #22]
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d00d      	beq.n	800e1dc <HAL_SPI_TransmitReceive_IT+0x58>
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e1c6:	d106      	bne.n	800e1d6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	689b      	ldr	r3, [r3, #8]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d102      	bne.n	800e1d6 <HAL_SPI_TransmitReceive_IT+0x52>
 800e1d0:	7dbb      	ldrb	r3, [r7, #22]
 800e1d2:	2b04      	cmp	r3, #4
 800e1d4:	d002      	beq.n	800e1dc <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800e1d6:	2302      	movs	r3, #2
 800e1d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e1da:	e070      	b.n	800e2be <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d005      	beq.n	800e1ee <HAL_SPI_TransmitReceive_IT+0x6a>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d002      	beq.n	800e1ee <HAL_SPI_TransmitReceive_IT+0x6a>
 800e1e8:	887b      	ldrh	r3, [r7, #2]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d102      	bne.n	800e1f4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e1f2:	e064      	b.n	800e2be <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	2b04      	cmp	r3, #4
 800e1fe:	d003      	beq.n	800e208 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2205      	movs	r2, #5
 800e204:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2200      	movs	r2, #0
 800e20c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	68ba      	ldr	r2, [r7, #8]
 800e212:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	887a      	ldrh	r2, [r7, #2]
 800e218:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	887a      	ldrh	r2, [r7, #2]
 800e21e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	887a      	ldrh	r2, [r7, #2]
 800e22a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	887a      	ldrh	r2, [r7, #2]
 800e232:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e23e:	d906      	bls.n	800e24e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	4a24      	ldr	r2, [pc, #144]	; (800e2d4 <HAL_SPI_TransmitReceive_IT+0x150>)
 800e244:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	4a23      	ldr	r2, [pc, #140]	; (800e2d8 <HAL_SPI_TransmitReceive_IT+0x154>)
 800e24a:	651a      	str	r2, [r3, #80]	; 0x50
 800e24c:	e005      	b.n	800e25a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	4a22      	ldr	r2, [pc, #136]	; (800e2dc <HAL_SPI_TransmitReceive_IT+0x158>)
 800e252:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	4a22      	ldr	r2, [pc, #136]	; (800e2e0 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800e258:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e262:	d802      	bhi.n	800e26a <HAL_SPI_TransmitReceive_IT+0xe6>
 800e264:	887b      	ldrh	r3, [r7, #2]
 800e266:	2b01      	cmp	r3, #1
 800e268:	d908      	bls.n	800e27c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	685a      	ldr	r2, [r3, #4]
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e278:	605a      	str	r2, [r3, #4]
 800e27a:	e007      	b.n	800e28c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	685a      	ldr	r2, [r3, #4]
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e28a:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	685a      	ldr	r2, [r3, #4]
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800e29a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2a6:	2b40      	cmp	r3, #64	; 0x40
 800e2a8:	d008      	beq.n	800e2bc <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	681a      	ldr	r2, [r3, #0]
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2b8:	601a      	str	r2, [r3, #0]
 800e2ba:	e000      	b.n	800e2be <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800e2bc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e2c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	371c      	adds	r7, #28
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr
 800e2d4:	0800f017 	.word	0x0800f017
 800e2d8:	0800f07d 	.word	0x0800f07d
 800e2dc:	0800eec7 	.word	0x0800eec7
 800e2e0:	0800ef85 	.word	0x0800ef85

0800e2e4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b086      	sub	sp, #24
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	4613      	mov	r3, r2
 800e2f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d101      	bne.n	800e304 <HAL_SPI_Transmit_DMA+0x20>
 800e300:	2302      	movs	r3, #2
 800e302:	e0d0      	b.n	800e4a6 <HAL_SPI_Transmit_DMA+0x1c2>
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2201      	movs	r2, #1
 800e308:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e312:	b2db      	uxtb	r3, r3
 800e314:	2b01      	cmp	r3, #1
 800e316:	d002      	beq.n	800e31e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800e318:	2302      	movs	r3, #2
 800e31a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e31c:	e0be      	b.n	800e49c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d002      	beq.n	800e32a <HAL_SPI_Transmit_DMA+0x46>
 800e324:	88fb      	ldrh	r3, [r7, #6]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d102      	bne.n	800e330 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800e32a:	2301      	movs	r3, #1
 800e32c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e32e:	e0b5      	b.n	800e49c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2203      	movs	r2, #3
 800e334:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	2200      	movs	r2, #0
 800e33c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	68ba      	ldr	r2, [r7, #8]
 800e342:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	88fa      	ldrh	r2, [r7, #6]
 800e348:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	88fa      	ldrh	r2, [r7, #6]
 800e34e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	2200      	movs	r2, #0
 800e354:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2200      	movs	r2, #0
 800e35a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2200      	movs	r2, #0
 800e360:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2200      	movs	r2, #0
 800e366:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	2200      	movs	r2, #0
 800e36e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	689b      	ldr	r3, [r3, #8]
 800e376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e37a:	d107      	bne.n	800e38c <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e38a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e390:	4a47      	ldr	r2, [pc, #284]	; (800e4b0 <HAL_SPI_Transmit_DMA+0x1cc>)
 800e392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e398:	4a46      	ldr	r2, [pc, #280]	; (800e4b4 <HAL_SPI_Transmit_DMA+0x1d0>)
 800e39a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3a0:	4a45      	ldr	r2, [pc, #276]	; (800e4b8 <HAL_SPI_Transmit_DMA+0x1d4>)
 800e3a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	685a      	ldr	r2, [r3, #4]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e3ba:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	68db      	ldr	r3, [r3, #12]
 800e3c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e3c4:	d82d      	bhi.n	800e422 <HAL_SPI_Transmit_DMA+0x13e>
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3ca:	699b      	ldr	r3, [r3, #24]
 800e3cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3d0:	d127      	bne.n	800e422 <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	f003 0301 	and.w	r3, r3, #1
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d10f      	bne.n	800e400 <HAL_SPI_Transmit_DMA+0x11c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	685a      	ldr	r2, [r3, #4]
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e3ee:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	085b      	lsrs	r3, r3, #1
 800e3f8:	b29a      	uxth	r2, r3
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e3fe:	e010      	b.n	800e422 <HAL_SPI_Transmit_DMA+0x13e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	685a      	ldr	r2, [r3, #4]
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e40e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e414:	b29b      	uxth	r3, r3
 800e416:	085b      	lsrs	r3, r3, #1
 800e418:	b29b      	uxth	r3, r3
 800e41a:	3301      	adds	r3, #1
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e42a:	4619      	mov	r1, r3
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	330c      	adds	r3, #12
 800e432:	461a      	mov	r2, r3
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e438:	b29b      	uxth	r3, r3
 800e43a:	f7fd ff87 	bl	800c34c <HAL_DMA_Start_IT>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00c      	beq.n	800e45e <HAL_SPI_Transmit_DMA+0x17a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e448:	f043 0210 	orr.w	r2, r3, #16
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e450:	2301      	movs	r3, #1
 800e452:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2201      	movs	r2, #1
 800e458:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e45c:	e01e      	b.n	800e49c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e468:	2b40      	cmp	r3, #64	; 0x40
 800e46a:	d007      	beq.n	800e47c <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e47a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	685a      	ldr	r2, [r3, #4]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f042 0220 	orr.w	r2, r2, #32
 800e48a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	685a      	ldr	r2, [r3, #4]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f042 0202 	orr.w	r2, r2, #2
 800e49a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e4a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3718      	adds	r7, #24
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	0800ee09 	.word	0x0800ee09
 800e4b4:	0800ec49 	.word	0x0800ec49
 800e4b8:	0800ee5d 	.word	0x0800ee5d

0800e4bc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b086      	sub	sp, #24
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	689b      	ldr	r3, [r3, #8]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d110      	bne.n	800e4f8 <HAL_SPI_Receive_DMA+0x3c>
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e4de:	d10b      	bne.n	800e4f8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2204      	movs	r2, #4
 800e4e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800e4e8:	88fb      	ldrh	r3, [r7, #6]
 800e4ea:	68ba      	ldr	r2, [r7, #8]
 800e4ec:	68b9      	ldr	r1, [r7, #8]
 800e4ee:	68f8      	ldr	r0, [r7, #12]
 800e4f0:	f000 f900 	bl	800e6f4 <HAL_SPI_TransmitReceive_DMA>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	e0f3      	b.n	800e6e0 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e4fe:	2b01      	cmp	r3, #1
 800e500:	d101      	bne.n	800e506 <HAL_SPI_Receive_DMA+0x4a>
 800e502:	2302      	movs	r3, #2
 800e504:	e0ec      	b.n	800e6e0 <HAL_SPI_Receive_DMA+0x224>
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2201      	movs	r2, #1
 800e50a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e514:	b2db      	uxtb	r3, r3
 800e516:	2b01      	cmp	r3, #1
 800e518:	d002      	beq.n	800e520 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800e51a:	2302      	movs	r3, #2
 800e51c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e51e:	e0da      	b.n	800e6d6 <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d002      	beq.n	800e52c <HAL_SPI_Receive_DMA+0x70>
 800e526:	88fb      	ldrh	r3, [r7, #6]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d102      	bne.n	800e532 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800e52c:	2301      	movs	r3, #1
 800e52e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e530:	e0d1      	b.n	800e6d6 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2204      	movs	r2, #4
 800e536:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2200      	movs	r2, #0
 800e53e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	68ba      	ldr	r2, [r7, #8]
 800e544:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	88fa      	ldrh	r2, [r7, #6]
 800e54a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	88fa      	ldrh	r2, [r7, #6]
 800e552:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	2200      	movs	r2, #0
 800e55a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2200      	movs	r2, #0
 800e560:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2200      	movs	r2, #0
 800e566:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2200      	movs	r2, #0
 800e56c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	689b      	ldr	r3, [r3, #8]
 800e572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e576:	d107      	bne.n	800e588 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	681a      	ldr	r2, [r3, #0]
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e586:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	685a      	ldr	r2, [r3, #4]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e596:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e5a0:	d908      	bls.n	800e5b4 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	685a      	ldr	r2, [r3, #4]
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e5b0:	605a      	str	r2, [r3, #4]
 800e5b2:	e042      	b.n	800e63a <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	685a      	ldr	r2, [r3, #4]
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e5c2:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5c8:	699b      	ldr	r3, [r3, #24]
 800e5ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5ce:	d134      	bne.n	800e63a <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	685a      	ldr	r2, [r3, #4]
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e5de:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	f003 0301 	and.w	r3, r3, #1
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d111      	bne.n	800e614 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	685a      	ldr	r2, [r3, #4]
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e5fe:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e606:	b29b      	uxth	r3, r3
 800e608:	085b      	lsrs	r3, r3, #1
 800e60a:	b29a      	uxth	r2, r3
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e612:	e012      	b.n	800e63a <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	685a      	ldr	r2, [r3, #4]
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e622:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	085b      	lsrs	r3, r3, #1
 800e62e:	b29b      	uxth	r3, r3
 800e630:	3301      	adds	r3, #1
 800e632:	b29a      	uxth	r2, r3
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e63e:	4a2a      	ldr	r2, [pc, #168]	; (800e6e8 <HAL_SPI_Receive_DMA+0x22c>)
 800e640:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e646:	4a29      	ldr	r2, [pc, #164]	; (800e6ec <HAL_SPI_Receive_DMA+0x230>)
 800e648:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e64e:	4a28      	ldr	r2, [pc, #160]	; (800e6f0 <HAL_SPI_Receive_DMA+0x234>)
 800e650:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e656:	2200      	movs	r2, #0
 800e658:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	330c      	adds	r3, #12
 800e664:	4619      	mov	r1, r3
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e66a:	461a      	mov	r2, r3
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e672:	b29b      	uxth	r3, r3
 800e674:	f7fd fe6a 	bl	800c34c <HAL_DMA_Start_IT>
 800e678:	4603      	mov	r3, r0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d00c      	beq.n	800e698 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e682:	f043 0210 	orr.w	r2, r3, #16
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e68a:	2301      	movs	r3, #1
 800e68c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2201      	movs	r2, #1
 800e692:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e696:	e01e      	b.n	800e6d6 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6a2:	2b40      	cmp	r3, #64	; 0x40
 800e6a4:	d007      	beq.n	800e6b6 <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e6b4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	685a      	ldr	r2, [r3, #4]
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f042 0220 	orr.w	r2, r2, #32
 800e6c4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	685a      	ldr	r2, [r3, #4]
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f042 0201 	orr.w	r2, r2, #1
 800e6d4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e6de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3718      	adds	r7, #24
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	0800ee25 	.word	0x0800ee25
 800e6ec:	0800ecf1 	.word	0x0800ecf1
 800e6f0:	0800ee5d 	.word	0x0800ee5d

0800e6f4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b086      	sub	sp, #24
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	60b9      	str	r1, [r7, #8]
 800e6fe:	607a      	str	r2, [r7, #4]
 800e700:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e702:	2300      	movs	r3, #0
 800e704:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d101      	bne.n	800e714 <HAL_SPI_TransmitReceive_DMA+0x20>
 800e710:	2302      	movs	r3, #2
 800e712:	e16c      	b.n	800e9ee <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2201      	movs	r2, #1
 800e718:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e722:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	685b      	ldr	r3, [r3, #4]
 800e728:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800e72a:	7dbb      	ldrb	r3, [r7, #22]
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	d00d      	beq.n	800e74c <HAL_SPI_TransmitReceive_DMA+0x58>
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e736:	d106      	bne.n	800e746 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	689b      	ldr	r3, [r3, #8]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d102      	bne.n	800e746 <HAL_SPI_TransmitReceive_DMA+0x52>
 800e740:	7dbb      	ldrb	r3, [r7, #22]
 800e742:	2b04      	cmp	r3, #4
 800e744:	d002      	beq.n	800e74c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800e746:	2302      	movs	r3, #2
 800e748:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e74a:	e14b      	b.n	800e9e4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d005      	beq.n	800e75e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d002      	beq.n	800e75e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800e758:	887b      	ldrh	r3, [r7, #2]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d102      	bne.n	800e764 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800e75e:	2301      	movs	r3, #1
 800e760:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e762:	e13f      	b.n	800e9e4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	2b04      	cmp	r3, #4
 800e76e:	d003      	beq.n	800e778 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2205      	movs	r2, #5
 800e774:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2200      	movs	r2, #0
 800e77c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	68ba      	ldr	r2, [r7, #8]
 800e782:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	887a      	ldrh	r2, [r7, #2]
 800e788:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	887a      	ldrh	r2, [r7, #2]
 800e78e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	687a      	ldr	r2, [r7, #4]
 800e794:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	887a      	ldrh	r2, [r7, #2]
 800e79a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	887a      	ldrh	r2, [r7, #2]
 800e7a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	685a      	ldr	r2, [r3, #4]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800e7c0:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	68db      	ldr	r3, [r3, #12]
 800e7c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e7ca:	d908      	bls.n	800e7de <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	685a      	ldr	r2, [r3, #4]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e7da:	605a      	str	r2, [r3, #4]
 800e7dc:	e06f      	b.n	800e8be <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	685a      	ldr	r2, [r3, #4]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e7ec:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7f2:	699b      	ldr	r3, [r3, #24]
 800e7f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7f8:	d126      	bne.n	800e848 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e7fe:	f003 0301 	and.w	r3, r3, #1
 800e802:	2b00      	cmp	r3, #0
 800e804:	d10f      	bne.n	800e826 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	685a      	ldr	r2, [r3, #4]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e814:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	085b      	lsrs	r3, r3, #1
 800e81e:	b29a      	uxth	r2, r3
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e824:	e010      	b.n	800e848 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	685a      	ldr	r2, [r3, #4]
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e834:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	085b      	lsrs	r3, r3, #1
 800e83e:	b29b      	uxth	r3, r3
 800e840:	3301      	adds	r3, #1
 800e842:	b29a      	uxth	r2, r3
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e84c:	699b      	ldr	r3, [r3, #24]
 800e84e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e852:	d134      	bne.n	800e8be <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	685a      	ldr	r2, [r3, #4]
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e862:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	f003 0301 	and.w	r3, r3, #1
 800e870:	2b00      	cmp	r3, #0
 800e872:	d111      	bne.n	800e898 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	685a      	ldr	r2, [r3, #4]
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e882:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	085b      	lsrs	r3, r3, #1
 800e88e:	b29a      	uxth	r2, r3
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e896:	e012      	b.n	800e8be <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	685a      	ldr	r2, [r3, #4]
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e8a6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e8ae:	b29b      	uxth	r3, r3
 800e8b0:	085b      	lsrs	r3, r3, #1
 800e8b2:	b29b      	uxth	r3, r3
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e8c4:	b2db      	uxtb	r3, r3
 800e8c6:	2b04      	cmp	r3, #4
 800e8c8:	d108      	bne.n	800e8dc <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8ce:	4a4a      	ldr	r2, [pc, #296]	; (800e9f8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800e8d0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8d6:	4a49      	ldr	r2, [pc, #292]	; (800e9fc <HAL_SPI_TransmitReceive_DMA+0x308>)
 800e8d8:	63da      	str	r2, [r3, #60]	; 0x3c
 800e8da:	e007      	b.n	800e8ec <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8e0:	4a47      	ldr	r2, [pc, #284]	; (800ea00 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800e8e2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8e8:	4a46      	ldr	r2, [pc, #280]	; (800ea04 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800e8ea:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8f0:	4a45      	ldr	r2, [pc, #276]	; (800ea08 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800e8f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	330c      	adds	r3, #12
 800e906:	4619      	mov	r1, r3
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e90c:	461a      	mov	r2, r3
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e914:	b29b      	uxth	r3, r3
 800e916:	f7fd fd19 	bl	800c34c <HAL_DMA_Start_IT>
 800e91a:	4603      	mov	r3, r0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d00c      	beq.n	800e93a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e924:	f043 0210 	orr.w	r2, r3, #16
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e92c:	2301      	movs	r3, #1
 800e92e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2201      	movs	r2, #1
 800e934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e938:	e054      	b.n	800e9e4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	685a      	ldr	r2, [r3, #4]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f042 0201 	orr.w	r2, r2, #1
 800e948:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e94e:	2200      	movs	r2, #0
 800e950:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e956:	2200      	movs	r2, #0
 800e958:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e95e:	2200      	movs	r2, #0
 800e960:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e966:	2200      	movs	r2, #0
 800e968:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e972:	4619      	mov	r1, r3
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	330c      	adds	r3, #12
 800e97a:	461a      	mov	r2, r3
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e980:	b29b      	uxth	r3, r3
 800e982:	f7fd fce3 	bl	800c34c <HAL_DMA_Start_IT>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d00c      	beq.n	800e9a6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e990:	f043 0210 	orr.w	r2, r3, #16
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e998:	2301      	movs	r3, #1
 800e99a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2201      	movs	r2, #1
 800e9a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e9a4:	e01e      	b.n	800e9e4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9b0:	2b40      	cmp	r3, #64	; 0x40
 800e9b2:	d007      	beq.n	800e9c4 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e9c2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	685a      	ldr	r2, [r3, #4]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f042 0220 	orr.w	r2, r2, #32
 800e9d2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	685a      	ldr	r2, [r3, #4]
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f042 0202 	orr.w	r2, r2, #2
 800e9e2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e9ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3718      	adds	r7, #24
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	0800ee25 	.word	0x0800ee25
 800e9fc:	0800ecf1 	.word	0x0800ecf1
 800ea00:	0800ee41 	.word	0x0800ee41
 800ea04:	0800ed77 	.word	0x0800ed77
 800ea08:	0800ee5d 	.word	0x0800ee5d

0800ea0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
inline void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b088      	sub	sp, #32
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	689b      	ldr	r3, [r3, #8]
 800ea22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	099b      	lsrs	r3, r3, #6
 800ea28:	f003 0301 	and.w	r3, r3, #1
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d10f      	bne.n	800ea50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d00a      	beq.n	800ea50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ea3a:	69fb      	ldr	r3, [r7, #28]
 800ea3c:	099b      	lsrs	r3, r3, #6
 800ea3e:	f003 0301 	and.w	r3, r3, #1
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d004      	beq.n	800ea50 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	4798      	blx	r3
    return;
 800ea4e:	e0d8      	b.n	800ec02 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ea50:	69bb      	ldr	r3, [r7, #24]
 800ea52:	085b      	lsrs	r3, r3, #1
 800ea54:	f003 0301 	and.w	r3, r3, #1
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d00a      	beq.n	800ea72 <HAL_SPI_IRQHandler+0x66>
 800ea5c:	69fb      	ldr	r3, [r7, #28]
 800ea5e:	09db      	lsrs	r3, r3, #7
 800ea60:	f003 0301 	and.w	r3, r3, #1
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d004      	beq.n	800ea72 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	4798      	blx	r3
    return;
 800ea70:	e0c7      	b.n	800ec02 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ea72:	69bb      	ldr	r3, [r7, #24]
 800ea74:	095b      	lsrs	r3, r3, #5
 800ea76:	f003 0301 	and.w	r3, r3, #1
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d10c      	bne.n	800ea98 <HAL_SPI_IRQHandler+0x8c>
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	099b      	lsrs	r3, r3, #6
 800ea82:	f003 0301 	and.w	r3, r3, #1
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d106      	bne.n	800ea98 <HAL_SPI_IRQHandler+0x8c>
 800ea8a:	69bb      	ldr	r3, [r7, #24]
 800ea8c:	0a1b      	lsrs	r3, r3, #8
 800ea8e:	f003 0301 	and.w	r3, r3, #1
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	f000 80b5 	beq.w	800ec02 <HAL_SPI_IRQHandler+0x1f6>
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	095b      	lsrs	r3, r3, #5
 800ea9c:	f003 0301 	and.w	r3, r3, #1
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	f000 80ae 	beq.w	800ec02 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800eaa6:	69bb      	ldr	r3, [r7, #24]
 800eaa8:	099b      	lsrs	r3, r3, #6
 800eaaa:	f003 0301 	and.w	r3, r3, #1
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d023      	beq.n	800eafa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	2b03      	cmp	r3, #3
 800eabc:	d011      	beq.n	800eae2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eac2:	f043 0204 	orr.w	r2, r3, #4
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eaca:	2300      	movs	r3, #0
 800eacc:	617b      	str	r3, [r7, #20]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	68db      	ldr	r3, [r3, #12]
 800ead4:	617b      	str	r3, [r7, #20]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	689b      	ldr	r3, [r3, #8]
 800eadc:	617b      	str	r3, [r7, #20]
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	e00b      	b.n	800eafa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eae2:	2300      	movs	r3, #0
 800eae4:	613b      	str	r3, [r7, #16]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	613b      	str	r3, [r7, #16]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	689b      	ldr	r3, [r3, #8]
 800eaf4:	613b      	str	r3, [r7, #16]
 800eaf6:	693b      	ldr	r3, [r7, #16]
        return;
 800eaf8:	e083      	b.n	800ec02 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800eafa:	69bb      	ldr	r3, [r7, #24]
 800eafc:	095b      	lsrs	r3, r3, #5
 800eafe:	f003 0301 	and.w	r3, r3, #1
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d014      	beq.n	800eb30 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb0a:	f043 0201 	orr.w	r2, r3, #1
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eb12:	2300      	movs	r3, #0
 800eb14:	60fb      	str	r3, [r7, #12]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	689b      	ldr	r3, [r3, #8]
 800eb1c:	60fb      	str	r3, [r7, #12]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb2c:	601a      	str	r2, [r3, #0]
 800eb2e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800eb30:	69bb      	ldr	r3, [r7, #24]
 800eb32:	0a1b      	lsrs	r3, r3, #8
 800eb34:	f003 0301 	and.w	r3, r3, #1
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d00c      	beq.n	800eb56 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb40:	f043 0208 	orr.w	r2, r3, #8
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800eb48:	2300      	movs	r3, #0
 800eb4a:	60bb      	str	r3, [r7, #8]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	689b      	ldr	r3, [r3, #8]
 800eb52:	60bb      	str	r3, [r7, #8]
 800eb54:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d050      	beq.n	800ec00 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	685a      	ldr	r2, [r3, #4]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800eb6c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2201      	movs	r2, #1
 800eb72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800eb76:	69fb      	ldr	r3, [r7, #28]
 800eb78:	f003 0302 	and.w	r3, r3, #2
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d104      	bne.n	800eb8a <HAL_SPI_IRQHandler+0x17e>
 800eb80:	69fb      	ldr	r3, [r7, #28]
 800eb82:	f003 0301 	and.w	r3, r3, #1
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d034      	beq.n	800ebf4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	685a      	ldr	r2, [r3, #4]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f022 0203 	bic.w	r2, r2, #3
 800eb98:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d011      	beq.n	800ebc6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eba6:	4a18      	ldr	r2, [pc, #96]	; (800ec08 <HAL_SPI_IRQHandler+0x1fc>)
 800eba8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7fd fc2c 	bl	800c40c <HAL_DMA_Abort_IT>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d005      	beq.n	800ebc6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ebbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d016      	beq.n	800ebfc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebd2:	4a0d      	ldr	r2, [pc, #52]	; (800ec08 <HAL_SPI_IRQHandler+0x1fc>)
 800ebd4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7fd fc16 	bl	800c40c <HAL_DMA_Abort_IT>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d00a      	beq.n	800ebfc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ebea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800ebf2:	e003      	b.n	800ebfc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f7f9 f9d1 	bl	8007f9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ebfa:	e000      	b.n	800ebfe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ebfc:	bf00      	nop
    return;
 800ebfe:	bf00      	nop
 800ec00:	bf00      	nop
  }
}
 800ec02:	3720      	adds	r7, #32
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	0800ee9d 	.word	0x0800ee9d

0800ec0c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ec14:	bf00      	nop
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b083      	sub	sp, #12
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ec28:	bf00      	nop
 800ec2a:	370c      	adds	r7, #12
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec32:	4770      	bx	lr

0800ec34 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ec3c:	bf00      	nop
 800ec3e:	370c      	adds	r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr

0800ec48 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b086      	sub	sp, #24
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec54:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec56:	f7fc fbaf 	bl	800b3b8 <HAL_GetTick>
 800ec5a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec6a:	d03b      	beq.n	800ece4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	685a      	ldr	r2, [r3, #4]
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f022 0220 	bic.w	r2, r2, #32
 800ec7a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	685a      	ldr	r2, [r3, #4]
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f022 0202 	bic.w	r2, r2, #2
 800ec8a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ec8c:	693a      	ldr	r2, [r7, #16]
 800ec8e:	2164      	movs	r1, #100	; 0x64
 800ec90:	6978      	ldr	r0, [r7, #20]
 800ec92:	f000 fbe5 	bl	800f460 <SPI_EndRxTxTransaction>
 800ec96:	4603      	mov	r3, r0
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d005      	beq.n	800eca8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eca0:	f043 0220 	orr.w	r2, r3, #32
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	689b      	ldr	r3, [r3, #8]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d10a      	bne.n	800ecc6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	60fb      	str	r3, [r7, #12]
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	68db      	ldr	r3, [r3, #12]
 800ecba:	60fb      	str	r3, [r7, #12]
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	60fb      	str	r3, [r7, #12]
 800ecc4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	2201      	movs	r2, #1
 800ecd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d003      	beq.n	800ece4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ecdc:	6978      	ldr	r0, [r7, #20]
 800ecde:	f7f9 f95d 	bl	8007f9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ece2:	e002      	b.n	800ecea <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800ece4:	6978      	ldr	r0, [r7, #20]
 800ece6:	f7f9 f96b 	bl	8007fc0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ecea:	3718      	adds	r7, #24
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecfc:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ecfe:	f7fc fb5b 	bl	800b3b8 <HAL_GetTick>
 800ed02:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed12:	d02a      	beq.n	800ed6a <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	685a      	ldr	r2, [r3, #4]
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f022 0220 	bic.w	r2, r2, #32
 800ed22:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	685a      	ldr	r2, [r3, #4]
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f022 0203 	bic.w	r2, r2, #3
 800ed32:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ed34:	68ba      	ldr	r2, [r7, #8]
 800ed36:	2164      	movs	r1, #100	; 0x64
 800ed38:	68f8      	ldr	r0, [r7, #12]
 800ed3a:	f000 fb39 	bl	800f3b0 <SPI_EndRxTransaction>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d002      	beq.n	800ed4a <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	2220      	movs	r2, #32
 800ed48:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	2201      	movs	r2, #1
 800ed56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d003      	beq.n	800ed6a <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ed62:	68f8      	ldr	r0, [r7, #12]
 800ed64:	f7f9 f91a 	bl	8007f9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ed68:	e002      	b.n	800ed70 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800ed6a:	68f8      	ldr	r0, [r7, #12]
 800ed6c:	f7f9 f93a 	bl	8007fe4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ed70:	3710      	adds	r7, #16
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}

0800ed76 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ed76:	b580      	push	{r7, lr}
 800ed78:	b084      	sub	sp, #16
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed82:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ed84:	f7fc fb18 	bl	800b3b8 <HAL_GetTick>
 800ed88:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed98:	d030      	beq.n	800edfc <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	685a      	ldr	r2, [r3, #4]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	f022 0220 	bic.w	r2, r2, #32
 800eda8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800edaa:	68ba      	ldr	r2, [r7, #8]
 800edac:	2164      	movs	r1, #100	; 0x64
 800edae:	68f8      	ldr	r0, [r7, #12]
 800edb0:	f000 fb56 	bl	800f460 <SPI_EndRxTxTransaction>
 800edb4:	4603      	mov	r3, r0
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d005      	beq.n	800edc6 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edbe:	f043 0220 	orr.w	r2, r3, #32
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	685a      	ldr	r2, [r3, #4]
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f022 0203 	bic.w	r2, r2, #3
 800edd4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	2200      	movs	r2, #0
 800edda:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2200      	movs	r2, #0
 800ede0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	2201      	movs	r2, #1
 800ede8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d003      	beq.n	800edfc <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800edf4:	68f8      	ldr	r0, [r7, #12]
 800edf6:	f7f9 f8d1 	bl	8007f9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800edfa:	e002      	b.n	800ee02 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f7f9 f903 	bl	8008008 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ee02:	3710      	adds	r7, #16
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b084      	sub	sp, #16
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee14:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	f7ff fef8 	bl	800ec0c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ee1c:	bf00      	nop
 800ee1e:	3710      	adds	r7, #16
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b084      	sub	sp, #16
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee30:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ee32:	68f8      	ldr	r0, [r7, #12]
 800ee34:	f7ff fef4 	bl	800ec20 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ee38:	bf00      	nop
 800ee3a:	3710      	adds	r7, #16
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee4c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ee4e:	68f8      	ldr	r0, [r7, #12]
 800ee50:	f7ff fef0 	bl	800ec34 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ee54:	bf00      	nop
 800ee56:	3710      	adds	r7, #16
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b084      	sub	sp, #16
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee68:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	685a      	ldr	r2, [r3, #4]
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	f022 0203 	bic.w	r2, r2, #3
 800ee78:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee7e:	f043 0210 	orr.w	r2, r3, #16
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ee8e:	68f8      	ldr	r0, [r7, #12]
 800ee90:	f7f9 f884 	bl	8007f9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ee94:	bf00      	nop
 800ee96:	3710      	adds	r7, #16
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}

0800ee9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eea8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2200      	movs	r2, #0
 800eeae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800eeb8:	68f8      	ldr	r0, [r7, #12]
 800eeba:	f7f9 f86f 	bl	8007f9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800eebe:	bf00      	nop
 800eec0:	3710      	adds	r7, #16
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800eec6:	b580      	push	{r7, lr}
 800eec8:	b082      	sub	sp, #8
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800eed4:	b29b      	uxth	r3, r3
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d923      	bls.n	800ef22 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	68da      	ldr	r2, [r3, #12]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eee4:	b292      	uxth	r2, r2
 800eee6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeec:	1c9a      	adds	r2, r3, #2
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	3b02      	subs	r3, #2
 800eefc:	b29a      	uxth	r2, r3
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d11f      	bne.n	800ef50 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	685a      	ldr	r2, [r3, #4]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ef1e:	605a      	str	r2, [r3, #4]
 800ef20:	e016      	b.n	800ef50 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f103 020c 	add.w	r2, r3, #12
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef2e:	7812      	ldrb	r2, [r2, #0]
 800ef30:	b2d2      	uxtb	r2, r2
 800ef32:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef38:	1c5a      	adds	r2, r3, #1
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	3b01      	subs	r3, #1
 800ef48:	b29a      	uxth	r2, r3
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ef56:	b29b      	uxth	r3, r3
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d10f      	bne.n	800ef7c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	685a      	ldr	r2, [r3, #4]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ef6a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d102      	bne.n	800ef7c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f000 fab8 	bl	800f4ec <SPI_CloseRxTx_ISR>
    }
  }
}
 800ef7c:	bf00      	nop
 800ef7e:	3708      	adds	r7, #8
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	2b01      	cmp	r3, #1
 800ef94:	d912      	bls.n	800efbc <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef9a:	881a      	ldrh	r2, [r3, #0]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efa6:	1c9a      	adds	r2, r3, #2
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	3b02      	subs	r3, #2
 800efb4:	b29a      	uxth	r2, r3
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800efba:	e012      	b.n	800efe2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	330c      	adds	r3, #12
 800efc6:	7812      	ldrb	r2, [r2, #0]
 800efc8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efce:	1c5a      	adds	r2, r3, #1
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800efd8:	b29b      	uxth	r3, r3
 800efda:	3b01      	subs	r3, #1
 800efdc:	b29a      	uxth	r2, r3
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d110      	bne.n	800f00e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	685a      	ldr	r2, [r3, #4]
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800effa:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f002:	b29b      	uxth	r3, r3
 800f004:	2b00      	cmp	r3, #0
 800f006:	d102      	bne.n	800f00e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f000 fa6f 	bl	800f4ec <SPI_CloseRxTx_ISR>
    }
  }
}
 800f00e:	bf00      	nop
 800f010:	3708      	adds	r7, #8
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}

0800f016 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f016:	b580      	push	{r7, lr}
 800f018:	b082      	sub	sp, #8
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	68da      	ldr	r2, [r3, #12]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f028:	b292      	uxth	r2, r2
 800f02a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f030:	1c9a      	adds	r2, r3, #2
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	3b01      	subs	r3, #1
 800f040:	b29a      	uxth	r2, r3
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f04e:	b29b      	uxth	r3, r3
 800f050:	2b00      	cmp	r3, #0
 800f052:	d10f      	bne.n	800f074 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	685a      	ldr	r2, [r3, #4]
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f062:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f068:	b29b      	uxth	r3, r3
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d102      	bne.n	800f074 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f000 fa3c 	bl	800f4ec <SPI_CloseRxTx_ISR>
    }
  }
}
 800f074:	bf00      	nop
 800f076:	3708      	adds	r7, #8
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f088:	881a      	ldrh	r2, [r3, #0]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f094:	1c9a      	adds	r2, r3, #2
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	3b01      	subs	r3, #1
 800f0a2:	b29a      	uxth	r2, r3
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d110      	bne.n	800f0d4 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	685a      	ldr	r2, [r3, #4]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f0c0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d102      	bne.n	800f0d4 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f000 fa0c 	bl	800f4ec <SPI_CloseRxTx_ISR>
    }
  }
}
 800f0d4:	bf00      	nop
 800f0d6:	3708      	adds	r7, #8
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f103 020c 	add.w	r2, r3, #12
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0f0:	7812      	ldrb	r2, [r2, #0]
 800f0f2:	b2d2      	uxtb	r2, r2
 800f0f4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0fa:	1c5a      	adds	r2, r3, #1
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f106:	b29b      	uxth	r3, r3
 800f108:	3b01      	subs	r3, #1
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f118:	b29b      	uxth	r3, r3
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d102      	bne.n	800f124 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f000 fa26 	bl	800f570 <SPI_CloseRx_ISR>
  }
}
 800f124:	bf00      	nop
 800f126:	3708      	adds	r7, #8
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b082      	sub	sp, #8
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	68da      	ldr	r2, [r3, #12]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f13e:	b292      	uxth	r2, r2
 800f140:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f146:	1c9a      	adds	r2, r3, #2
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f152:	b29b      	uxth	r3, r3
 800f154:	3b01      	subs	r3, #1
 800f156:	b29a      	uxth	r2, r3
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f164:	b29b      	uxth	r3, r3
 800f166:	2b00      	cmp	r3, #0
 800f168:	d102      	bne.n	800f170 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f000 fa00 	bl	800f570 <SPI_CloseRx_ISR>
  }
}
 800f170:	bf00      	nop
 800f172:	3708      	adds	r7, #8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	330c      	adds	r3, #12
 800f18a:	7812      	ldrb	r2, [r2, #0]
 800f18c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f192:	1c5a      	adds	r2, r3, #1
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	3b01      	subs	r3, #1
 800f1a0:	b29a      	uxth	r2, r3
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d102      	bne.n	800f1b6 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f000 fa0d 	bl	800f5d0 <SPI_CloseTx_ISR>
  }
}
 800f1b6:	bf00      	nop
 800f1b8:	3708      	adds	r7, #8
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}

0800f1be <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f1be:	b580      	push	{r7, lr}
 800f1c0:	b082      	sub	sp, #8
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1ca:	881a      	ldrh	r2, [r3, #0]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1d6:	1c9a      	adds	r2, r3, #2
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	3b01      	subs	r3, #1
 800f1e4:	b29a      	uxth	r2, r3
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d102      	bne.n	800f1fa <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 f9eb 	bl	800f5d0 <SPI_CloseTx_ISR>
  }
}
 800f1fa:	bf00      	nop
 800f1fc:	3708      	adds	r7, #8
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}

0800f202 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f202:	b580      	push	{r7, lr}
 800f204:	b084      	sub	sp, #16
 800f206:	af00      	add	r7, sp, #0
 800f208:	60f8      	str	r0, [r7, #12]
 800f20a:	60b9      	str	r1, [r7, #8]
 800f20c:	603b      	str	r3, [r7, #0]
 800f20e:	4613      	mov	r3, r2
 800f210:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f212:	e04c      	b.n	800f2ae <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f21a:	d048      	beq.n	800f2ae <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f21c:	f7fc f8cc 	bl	800b3b8 <HAL_GetTick>
 800f220:	4602      	mov	r2, r0
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	1ad3      	subs	r3, r2, r3
 800f226:	683a      	ldr	r2, [r7, #0]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d902      	bls.n	800f232 <SPI_WaitFlagStateUntilTimeout+0x30>
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d13d      	bne.n	800f2ae <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	685a      	ldr	r2, [r3, #4]
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f240:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f24a:	d111      	bne.n	800f270 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	689b      	ldr	r3, [r3, #8]
 800f250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f254:	d004      	beq.n	800f260 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f25e:	d107      	bne.n	800f270 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f26e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f278:	d10f      	bne.n	800f29a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	681a      	ldr	r2, [r3, #0]
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f288:	601a      	str	r2, [r3, #0]
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	681a      	ldr	r2, [r3, #0]
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f298:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	2201      	movs	r2, #1
 800f29e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f2aa:	2303      	movs	r3, #3
 800f2ac:	e00f      	b.n	800f2ce <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	689a      	ldr	r2, [r3, #8]
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	4013      	ands	r3, r2
 800f2b8:	68ba      	ldr	r2, [r7, #8]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	bf0c      	ite	eq
 800f2be:	2301      	moveq	r3, #1
 800f2c0:	2300      	movne	r3, #0
 800f2c2:	b2db      	uxtb	r3, r3
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	79fb      	ldrb	r3, [r7, #7]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d1a3      	bne.n	800f214 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f2cc:	2300      	movs	r3, #0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3710      	adds	r7, #16
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b084      	sub	sp, #16
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	60f8      	str	r0, [r7, #12]
 800f2de:	60b9      	str	r1, [r7, #8]
 800f2e0:	607a      	str	r2, [r7, #4]
 800f2e2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800f2e4:	e057      	b.n	800f396 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f2ec:	d106      	bne.n	800f2fc <SPI_WaitFifoStateUntilTimeout+0x26>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d103      	bne.n	800f2fc <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	330c      	adds	r3, #12
 800f2fa:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f302:	d048      	beq.n	800f396 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f304:	f7fc f858 	bl	800b3b8 <HAL_GetTick>
 800f308:	4602      	mov	r2, r0
 800f30a:	69bb      	ldr	r3, [r7, #24]
 800f30c:	1ad3      	subs	r3, r2, r3
 800f30e:	683a      	ldr	r2, [r7, #0]
 800f310:	429a      	cmp	r2, r3
 800f312:	d902      	bls.n	800f31a <SPI_WaitFifoStateUntilTimeout+0x44>
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d13d      	bne.n	800f396 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	685a      	ldr	r2, [r3, #4]
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f328:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	685b      	ldr	r3, [r3, #4]
 800f32e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f332:	d111      	bne.n	800f358 <SPI_WaitFifoStateUntilTimeout+0x82>
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	689b      	ldr	r3, [r3, #8]
 800f338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f33c:	d004      	beq.n	800f348 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	689b      	ldr	r3, [r3, #8]
 800f342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f346:	d107      	bne.n	800f358 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f356:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f35c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f360:	d10f      	bne.n	800f382 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f370:	601a      	str	r2, [r3, #0]
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	681a      	ldr	r2, [r3, #0]
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f380:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2201      	movs	r2, #1
 800f386:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	2200      	movs	r2, #0
 800f38e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f392:	2303      	movs	r3, #3
 800f394:	e008      	b.n	800f3a8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	689a      	ldr	r2, [r3, #8]
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	4013      	ands	r3, r2
 800f3a0:	687a      	ldr	r2, [r7, #4]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d19f      	bne.n	800f2e6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800f3a6:	2300      	movs	r3, #0
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3710      	adds	r7, #16
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b086      	sub	sp, #24
 800f3b4:	af02      	add	r7, sp, #8
 800f3b6:	60f8      	str	r0, [r7, #12]
 800f3b8:	60b9      	str	r1, [r7, #8]
 800f3ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f3c4:	d111      	bne.n	800f3ea <SPI_EndRxTransaction+0x3a>
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	689b      	ldr	r3, [r3, #8]
 800f3ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3ce:	d004      	beq.n	800f3da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3d8:	d107      	bne.n	800f3ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f3e8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	9300      	str	r3, [sp, #0]
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	2180      	movs	r1, #128	; 0x80
 800f3f4:	68f8      	ldr	r0, [r7, #12]
 800f3f6:	f7ff ff04 	bl	800f202 <SPI_WaitFlagStateUntilTimeout>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d007      	beq.n	800f410 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f404:	f043 0220 	orr.w	r2, r3, #32
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f40c:	2303      	movs	r3, #3
 800f40e:	e023      	b.n	800f458 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f418:	d11d      	bne.n	800f456 <SPI_EndRxTransaction+0xa6>
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	689b      	ldr	r3, [r3, #8]
 800f41e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f422:	d004      	beq.n	800f42e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	689b      	ldr	r3, [r3, #8]
 800f428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f42c:	d113      	bne.n	800f456 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	9300      	str	r3, [sp, #0]
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	2200      	movs	r2, #0
 800f436:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f7ff ff4b 	bl	800f2d6 <SPI_WaitFifoStateUntilTimeout>
 800f440:	4603      	mov	r3, r0
 800f442:	2b00      	cmp	r3, #0
 800f444:	d007      	beq.n	800f456 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f44a:	f043 0220 	orr.w	r2, r3, #32
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800f452:	2303      	movs	r3, #3
 800f454:	e000      	b.n	800f458 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800f456:	2300      	movs	r3, #0
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3710      	adds	r7, #16
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b086      	sub	sp, #24
 800f464:	af02      	add	r7, sp, #8
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	9300      	str	r3, [sp, #0]
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	2200      	movs	r2, #0
 800f474:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800f478:	68f8      	ldr	r0, [r7, #12]
 800f47a:	f7ff ff2c 	bl	800f2d6 <SPI_WaitFifoStateUntilTimeout>
 800f47e:	4603      	mov	r3, r0
 800f480:	2b00      	cmp	r3, #0
 800f482:	d007      	beq.n	800f494 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f488:	f043 0220 	orr.w	r2, r3, #32
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f490:	2303      	movs	r3, #3
 800f492:	e027      	b.n	800f4e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	9300      	str	r3, [sp, #0]
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	2200      	movs	r2, #0
 800f49c:	2180      	movs	r1, #128	; 0x80
 800f49e:	68f8      	ldr	r0, [r7, #12]
 800f4a0:	f7ff feaf 	bl	800f202 <SPI_WaitFlagStateUntilTimeout>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d007      	beq.n	800f4ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f4ae:	f043 0220 	orr.w	r2, r3, #32
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f4b6:	2303      	movs	r3, #3
 800f4b8:	e014      	b.n	800f4e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	9300      	str	r3, [sp, #0]
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f4c6:	68f8      	ldr	r0, [r7, #12]
 800f4c8:	f7ff ff05 	bl	800f2d6 <SPI_WaitFifoStateUntilTimeout>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d007      	beq.n	800f4e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f4d6:	f043 0220 	orr.w	r2, r3, #32
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f4de:	2303      	movs	r3, #3
 800f4e0:	e000      	b.n	800f4e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f4e2:	2300      	movs	r3, #0
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3710      	adds	r7, #16
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b084      	sub	sp, #16
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800f4f4:	f7fb ff60 	bl	800b3b8 <HAL_GetTick>
 800f4f8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	685a      	ldr	r2, [r3, #4]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	f022 0220 	bic.w	r2, r2, #32
 800f508:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f50a:	68fa      	ldr	r2, [r7, #12]
 800f50c:	2164      	movs	r1, #100	; 0x64
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f7ff ffa6 	bl	800f460 <SPI_EndRxTxTransaction>
 800f514:	4603      	mov	r3, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d005      	beq.n	800f526 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f51e:	f043 0220 	orr.w	r2, r3, #32
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d115      	bne.n	800f55a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f534:	b2db      	uxtb	r3, r3
 800f536:	2b04      	cmp	r3, #4
 800f538:	d107      	bne.n	800f54a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2201      	movs	r2, #1
 800f53e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f7f8 fd4e 	bl	8007fe4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800f548:	e00e      	b.n	800f568 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2201      	movs	r2, #1
 800f54e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f7f8 fd58 	bl	8008008 <HAL_SPI_TxRxCpltCallback>
}
 800f558:	e006      	b.n	800f568 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2201      	movs	r2, #1
 800f55e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f7f8 fd1a 	bl	8007f9c <HAL_SPI_ErrorCallback>
}
 800f568:	bf00      	nop
 800f56a:	3710      	adds	r7, #16
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}

0800f570 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b082      	sub	sp, #8
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	685a      	ldr	r2, [r3, #4]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800f586:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800f588:	f7fb ff16 	bl	800b3b8 <HAL_GetTick>
 800f58c:	4603      	mov	r3, r0
 800f58e:	461a      	mov	r2, r3
 800f590:	2164      	movs	r1, #100	; 0x64
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f7ff ff0c 	bl	800f3b0 <SPI_EndRxTransaction>
 800f598:	4603      	mov	r3, r0
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d005      	beq.n	800f5aa <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f5a2:	f043 0220 	orr.w	r2, r3, #32
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2201      	movs	r2, #1
 800f5ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d103      	bne.n	800f5c2 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f7f8 fd12 	bl	8007fe4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800f5c0:	e002      	b.n	800f5c8 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f7f8 fcea 	bl	8007f9c <HAL_SPI_ErrorCallback>
}
 800f5c8:	bf00      	nop
 800f5ca:	3708      	adds	r7, #8
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f5d8:	f7fb feee 	bl	800b3b8 <HAL_GetTick>
 800f5dc:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	685a      	ldr	r2, [r3, #4]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800f5ec:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f5ee:	68fa      	ldr	r2, [r7, #12]
 800f5f0:	2164      	movs	r1, #100	; 0x64
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f7ff ff34 	bl	800f460 <SPI_EndRxTxTransaction>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d005      	beq.n	800f60a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f602:	f043 0220 	orr.w	r2, r3, #32
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d10a      	bne.n	800f628 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f612:	2300      	movs	r3, #0
 800f614:	60bb      	str	r3, [r7, #8]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	68db      	ldr	r3, [r3, #12]
 800f61c:	60bb      	str	r3, [r7, #8]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	689b      	ldr	r3, [r3, #8]
 800f624:	60bb      	str	r3, [r7, #8]
 800f626:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2201      	movs	r2, #1
 800f62c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f634:	2b00      	cmp	r3, #0
 800f636:	d003      	beq.n	800f640 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f7f8 fcaf 	bl	8007f9c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800f63e:	e002      	b.n	800f646 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f7f8 fcbd 	bl	8007fc0 <HAL_SPI_TxCpltCallback>
}
 800f646:	bf00      	nop
 800f648:	3710      	adds	r7, #16
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}

0800f64e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f64e:	b580      	push	{r7, lr}
 800f650:	b082      	sub	sp, #8
 800f652:	af00      	add	r7, sp, #0
 800f654:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d101      	bne.n	800f660 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f65c:	2301      	movs	r3, #1
 800f65e:	e01d      	b.n	800f69c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f666:	b2db      	uxtb	r3, r3
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d106      	bne.n	800f67a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2200      	movs	r2, #0
 800f670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f7fa f9d1 	bl	8009a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2202      	movs	r2, #2
 800f67e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	3304      	adds	r3, #4
 800f68a:	4619      	mov	r1, r3
 800f68c:	4610      	mov	r0, r2
 800f68e:	f000 fbe7 	bl	800fe60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2201      	movs	r2, #1
 800f696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f69a:	2300      	movs	r3, #0
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3708      	adds	r7, #8
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b085      	sub	sp, #20
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2202      	movs	r2, #2
 800f6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	689a      	ldr	r2, [r3, #8]
 800f6ba:	4b0e      	ldr	r3, [pc, #56]	; (800f6f4 <HAL_TIM_Base_Start+0x50>)
 800f6bc:	4013      	ands	r3, r2
 800f6be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	2b06      	cmp	r3, #6
 800f6c4:	d00b      	beq.n	800f6de <HAL_TIM_Base_Start+0x3a>
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6cc:	d007      	beq.n	800f6de <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	681a      	ldr	r2, [r3, #0]
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	f042 0201 	orr.w	r2, r2, #1
 800f6dc:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2201      	movs	r2, #1
 800f6e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800f6e6:	2300      	movs	r3, #0
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3714      	adds	r7, #20
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr
 800f6f4:	00010007 	.word	0x00010007

0800f6f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
inline HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b085      	sub	sp, #20
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	68da      	ldr	r2, [r3, #12]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f042 0201 	orr.w	r2, r2, #1
 800f70e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	689a      	ldr	r2, [r3, #8]
 800f716:	4b0c      	ldr	r3, [pc, #48]	; (800f748 <HAL_TIM_Base_Start_IT+0x50>)
 800f718:	4013      	ands	r3, r2
 800f71a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	2b06      	cmp	r3, #6
 800f720:	d00b      	beq.n	800f73a <HAL_TIM_Base_Start_IT+0x42>
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f728:	d007      	beq.n	800f73a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	681a      	ldr	r2, [r3, #0]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	f042 0201 	orr.w	r2, r2, #1
 800f738:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f73a:	2300      	movs	r3, #0
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3714      	adds	r7, #20
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr
 800f748:	00010007 	.word	0x00010007

0800f74c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d101      	bne.n	800f75e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f75a:	2301      	movs	r3, #1
 800f75c:	e01d      	b.n	800f79a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f764:	b2db      	uxtb	r3, r3
 800f766:	2b00      	cmp	r3, #0
 800f768:	d106      	bne.n	800f778 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2200      	movs	r2, #0
 800f76e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f7fa f91e 	bl	80099b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2202      	movs	r2, #2
 800f77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	3304      	adds	r3, #4
 800f788:	4619      	mov	r1, r3
 800f78a:	4610      	mov	r0, r2
 800f78c:	f000 fb68 	bl	800fe60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2201      	movs	r2, #1
 800f794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f798:	2300      	movs	r3, #0
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3708      	adds	r7, #8
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800f7a2:	b580      	push	{r7, lr}
 800f7a4:	b082      	sub	sp, #8
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	6078      	str	r0, [r7, #4]
 800f7aa:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d101      	bne.n	800f7b6 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	e02d      	b.n	800f812 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d106      	bne.n	800f7d0 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f000 f825 	bl	800f81a <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2202      	movs	r2, #2
 800f7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681a      	ldr	r2, [r3, #0]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	3304      	adds	r3, #4
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	4610      	mov	r0, r2
 800f7e4:	f000 fb3c 	bl	800fe60 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	681a      	ldr	r2, [r3, #0]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f022 0208 	bic.w	r2, r2, #8
 800f7f6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	6819      	ldr	r1, [r3, #0]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	683a      	ldr	r2, [r7, #0]
 800f804:	430a      	orrs	r2, r1
 800f806:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2201      	movs	r2, #1
 800f80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f810:	2300      	movs	r3, #0
}
 800f812:	4618      	mov	r0, r3
 800f814:	3708      	adds	r7, #8
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}

0800f81a <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800f81a:	b480      	push	{r7}
 800f81c:	b083      	sub	sp, #12
 800f81e:	af00      	add	r7, sp, #0
 800f820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800f822:	bf00      	nop
 800f824:	370c      	adds	r7, #12
 800f826:	46bd      	mov	sp, r7
 800f828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82c:	4770      	bx	lr

0800f82e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
inline void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f82e:	b580      	push	{r7, lr}
 800f830:	b082      	sub	sp, #8
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	691b      	ldr	r3, [r3, #16]
 800f83c:	f003 0302 	and.w	r3, r3, #2
 800f840:	2b02      	cmp	r3, #2
 800f842:	d122      	bne.n	800f88a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	f003 0302 	and.w	r3, r3, #2
 800f84e:	2b02      	cmp	r3, #2
 800f850:	d11b      	bne.n	800f88a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f06f 0202 	mvn.w	r2, #2
 800f85a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2201      	movs	r2, #1
 800f860:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	699b      	ldr	r3, [r3, #24]
 800f868:	f003 0303 	and.w	r3, r3, #3
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d003      	beq.n	800f878 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 fad7 	bl	800fe24 <HAL_TIM_IC_CaptureCallback>
 800f876:	e005      	b.n	800f884 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 fac9 	bl	800fe10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f000 fada 	bl	800fe38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2200      	movs	r2, #0
 800f888:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	691b      	ldr	r3, [r3, #16]
 800f890:	f003 0304 	and.w	r3, r3, #4
 800f894:	2b04      	cmp	r3, #4
 800f896:	d122      	bne.n	800f8de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	f003 0304 	and.w	r3, r3, #4
 800f8a2:	2b04      	cmp	r3, #4
 800f8a4:	d11b      	bne.n	800f8de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	f06f 0204 	mvn.w	r2, #4
 800f8ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2202      	movs	r2, #2
 800f8b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	699b      	ldr	r3, [r3, #24]
 800f8bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d003      	beq.n	800f8cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f000 faad 	bl	800fe24 <HAL_TIM_IC_CaptureCallback>
 800f8ca:	e005      	b.n	800f8d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f000 fa9f 	bl	800fe10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f000 fab0 	bl	800fe38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2200      	movs	r2, #0
 800f8dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	691b      	ldr	r3, [r3, #16]
 800f8e4:	f003 0308 	and.w	r3, r3, #8
 800f8e8:	2b08      	cmp	r3, #8
 800f8ea:	d122      	bne.n	800f932 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	68db      	ldr	r3, [r3, #12]
 800f8f2:	f003 0308 	and.w	r3, r3, #8
 800f8f6:	2b08      	cmp	r3, #8
 800f8f8:	d11b      	bne.n	800f932 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	f06f 0208 	mvn.w	r2, #8
 800f902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2204      	movs	r2, #4
 800f908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	69db      	ldr	r3, [r3, #28]
 800f910:	f003 0303 	and.w	r3, r3, #3
 800f914:	2b00      	cmp	r3, #0
 800f916:	d003      	beq.n	800f920 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f000 fa83 	bl	800fe24 <HAL_TIM_IC_CaptureCallback>
 800f91e:	e005      	b.n	800f92c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f000 fa75 	bl	800fe10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f000 fa86 	bl	800fe38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2200      	movs	r2, #0
 800f930:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	691b      	ldr	r3, [r3, #16]
 800f938:	f003 0310 	and.w	r3, r3, #16
 800f93c:	2b10      	cmp	r3, #16
 800f93e:	d122      	bne.n	800f986 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	68db      	ldr	r3, [r3, #12]
 800f946:	f003 0310 	and.w	r3, r3, #16
 800f94a:	2b10      	cmp	r3, #16
 800f94c:	d11b      	bne.n	800f986 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f06f 0210 	mvn.w	r2, #16
 800f956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2208      	movs	r2, #8
 800f95c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	69db      	ldr	r3, [r3, #28]
 800f964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d003      	beq.n	800f974 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f000 fa59 	bl	800fe24 <HAL_TIM_IC_CaptureCallback>
 800f972:	e005      	b.n	800f980 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f000 fa4b 	bl	800fe10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f000 fa5c 	bl	800fe38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2200      	movs	r2, #0
 800f984:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	691b      	ldr	r3, [r3, #16]
 800f98c:	f003 0301 	and.w	r3, r3, #1
 800f990:	2b01      	cmp	r3, #1
 800f992:	d10e      	bne.n	800f9b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	68db      	ldr	r3, [r3, #12]
 800f99a:	f003 0301 	and.w	r3, r3, #1
 800f99e:	2b01      	cmp	r3, #1
 800f9a0:	d107      	bne.n	800f9b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	f06f 0201 	mvn.w	r2, #1
 800f9aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f7f8 fab3 	bl	8007f18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	691b      	ldr	r3, [r3, #16]
 800f9b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9bc:	2b80      	cmp	r3, #128	; 0x80
 800f9be:	d10e      	bne.n	800f9de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	68db      	ldr	r3, [r3, #12]
 800f9c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9ca:	2b80      	cmp	r3, #128	; 0x80
 800f9cc:	d107      	bne.n	800f9de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f9d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f000 ff1f 	bl	801081c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	691b      	ldr	r3, [r3, #16]
 800f9e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9ec:	d10e      	bne.n	800fa0c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	68db      	ldr	r3, [r3, #12]
 800f9f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9f8:	2b80      	cmp	r3, #128	; 0x80
 800f9fa:	d107      	bne.n	800fa0c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fa04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f000 ff12 	bl	8010830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	691b      	ldr	r3, [r3, #16]
 800fa12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa16:	2b40      	cmp	r3, #64	; 0x40
 800fa18:	d10e      	bne.n	800fa38 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	68db      	ldr	r3, [r3, #12]
 800fa20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa24:	2b40      	cmp	r3, #64	; 0x40
 800fa26:	d107      	bne.n	800fa38 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fa30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f000 fa0a 	bl	800fe4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	691b      	ldr	r3, [r3, #16]
 800fa3e:	f003 0320 	and.w	r3, r3, #32
 800fa42:	2b20      	cmp	r3, #32
 800fa44:	d10e      	bne.n	800fa64 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	68db      	ldr	r3, [r3, #12]
 800fa4c:	f003 0320 	and.w	r3, r3, #32
 800fa50:	2b20      	cmp	r3, #32
 800fa52:	d107      	bne.n	800fa64 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f06f 0220 	mvn.w	r2, #32
 800fa5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f000 fed2 	bl	8010808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fa64:	bf00      	nop
 800fa66:	3708      	adds	r7, #8
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b084      	sub	sp, #16
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	60f8      	str	r0, [r7, #12]
 800fa74:	60b9      	str	r1, [r7, #8]
 800fa76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa7e:	2b01      	cmp	r3, #1
 800fa80:	d101      	bne.n	800fa86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800fa82:	2302      	movs	r3, #2
 800fa84:	e105      	b.n	800fc92 <HAL_TIM_PWM_ConfigChannel+0x226>
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	2201      	movs	r2, #1
 800fa8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	2202      	movs	r2, #2
 800fa92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2b14      	cmp	r3, #20
 800fa9a:	f200 80f0 	bhi.w	800fc7e <HAL_TIM_PWM_ConfigChannel+0x212>
 800fa9e:	a201      	add	r2, pc, #4	; (adr r2, 800faa4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800faa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faa4:	0800faf9 	.word	0x0800faf9
 800faa8:	0800fc7f 	.word	0x0800fc7f
 800faac:	0800fc7f 	.word	0x0800fc7f
 800fab0:	0800fc7f 	.word	0x0800fc7f
 800fab4:	0800fb39 	.word	0x0800fb39
 800fab8:	0800fc7f 	.word	0x0800fc7f
 800fabc:	0800fc7f 	.word	0x0800fc7f
 800fac0:	0800fc7f 	.word	0x0800fc7f
 800fac4:	0800fb7b 	.word	0x0800fb7b
 800fac8:	0800fc7f 	.word	0x0800fc7f
 800facc:	0800fc7f 	.word	0x0800fc7f
 800fad0:	0800fc7f 	.word	0x0800fc7f
 800fad4:	0800fbbb 	.word	0x0800fbbb
 800fad8:	0800fc7f 	.word	0x0800fc7f
 800fadc:	0800fc7f 	.word	0x0800fc7f
 800fae0:	0800fc7f 	.word	0x0800fc7f
 800fae4:	0800fbfd 	.word	0x0800fbfd
 800fae8:	0800fc7f 	.word	0x0800fc7f
 800faec:	0800fc7f 	.word	0x0800fc7f
 800faf0:	0800fc7f 	.word	0x0800fc7f
 800faf4:	0800fc3d 	.word	0x0800fc3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	68b9      	ldr	r1, [r7, #8]
 800fafe:	4618      	mov	r0, r3
 800fb00:	f000 fa4e 	bl	800ffa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	699a      	ldr	r2, [r3, #24]
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	f042 0208 	orr.w	r2, r2, #8
 800fb12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	699a      	ldr	r2, [r3, #24]
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	f022 0204 	bic.w	r2, r2, #4
 800fb22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	6999      	ldr	r1, [r3, #24]
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	691a      	ldr	r2, [r3, #16]
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	430a      	orrs	r2, r1
 800fb34:	619a      	str	r2, [r3, #24]
      break;
 800fb36:	e0a3      	b.n	800fc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	68b9      	ldr	r1, [r7, #8]
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f000 faa0 	bl	8010084 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	699a      	ldr	r2, [r3, #24]
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	699a      	ldr	r2, [r3, #24]
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	6999      	ldr	r1, [r3, #24]
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	691b      	ldr	r3, [r3, #16]
 800fb6e:	021a      	lsls	r2, r3, #8
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	430a      	orrs	r2, r1
 800fb76:	619a      	str	r2, [r3, #24]
      break;
 800fb78:	e082      	b.n	800fc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	68b9      	ldr	r1, [r7, #8]
 800fb80:	4618      	mov	r0, r3
 800fb82:	f000 faf7 	bl	8010174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	69da      	ldr	r2, [r3, #28]
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	f042 0208 	orr.w	r2, r2, #8
 800fb94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	69da      	ldr	r2, [r3, #28]
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	f022 0204 	bic.w	r2, r2, #4
 800fba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	69d9      	ldr	r1, [r3, #28]
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	691a      	ldr	r2, [r3, #16]
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	430a      	orrs	r2, r1
 800fbb6:	61da      	str	r2, [r3, #28]
      break;
 800fbb8:	e062      	b.n	800fc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	68b9      	ldr	r1, [r7, #8]
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f000 fb4d 	bl	8010260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	69da      	ldr	r2, [r3, #28]
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fbd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	69da      	ldr	r2, [r3, #28]
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fbe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	69d9      	ldr	r1, [r3, #28]
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	691b      	ldr	r3, [r3, #16]
 800fbf0:	021a      	lsls	r2, r3, #8
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	430a      	orrs	r2, r1
 800fbf8:	61da      	str	r2, [r3, #28]
      break;
 800fbfa:	e041      	b.n	800fc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	68b9      	ldr	r1, [r7, #8]
 800fc02:	4618      	mov	r0, r3
 800fc04:	f000 fb84 	bl	8010310 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f042 0208 	orr.w	r2, r2, #8
 800fc16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f022 0204 	bic.w	r2, r2, #4
 800fc26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	691a      	ldr	r2, [r3, #16]
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	430a      	orrs	r2, r1
 800fc38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fc3a:	e021      	b.n	800fc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	68b9      	ldr	r1, [r7, #8]
 800fc42:	4618      	mov	r0, r3
 800fc44:	f000 fbb6 	bl	80103b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fc56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fc66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	691b      	ldr	r3, [r3, #16]
 800fc72:	021a      	lsls	r2, r3, #8
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	430a      	orrs	r2, r1
 800fc7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fc7c:	e000      	b.n	800fc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800fc7e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	2201      	movs	r2, #1
 800fc84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc90:	2300      	movs	r3, #0
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	3710      	adds	r7, #16
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}
 800fc9a:	bf00      	nop

0800fc9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b084      	sub	sp, #16
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fcac:	2b01      	cmp	r3, #1
 800fcae:	d101      	bne.n	800fcb4 <HAL_TIM_ConfigClockSource+0x18>
 800fcb0:	2302      	movs	r3, #2
 800fcb2:	e0a6      	b.n	800fe02 <HAL_TIM_ConfigClockSource+0x166>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2202      	movs	r2, #2
 800fcc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	689b      	ldr	r3, [r3, #8]
 800fcca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fccc:	68fa      	ldr	r2, [r7, #12]
 800fcce:	4b4f      	ldr	r3, [pc, #316]	; (800fe0c <HAL_TIM_ConfigClockSource+0x170>)
 800fcd0:	4013      	ands	r3, r2
 800fcd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fcda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	68fa      	ldr	r2, [r7, #12]
 800fce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	2b40      	cmp	r3, #64	; 0x40
 800fcea:	d067      	beq.n	800fdbc <HAL_TIM_ConfigClockSource+0x120>
 800fcec:	2b40      	cmp	r3, #64	; 0x40
 800fcee:	d80b      	bhi.n	800fd08 <HAL_TIM_ConfigClockSource+0x6c>
 800fcf0:	2b10      	cmp	r3, #16
 800fcf2:	d073      	beq.n	800fddc <HAL_TIM_ConfigClockSource+0x140>
 800fcf4:	2b10      	cmp	r3, #16
 800fcf6:	d802      	bhi.n	800fcfe <HAL_TIM_ConfigClockSource+0x62>
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d06f      	beq.n	800fddc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800fcfc:	e078      	b.n	800fdf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800fcfe:	2b20      	cmp	r3, #32
 800fd00:	d06c      	beq.n	800fddc <HAL_TIM_ConfigClockSource+0x140>
 800fd02:	2b30      	cmp	r3, #48	; 0x30
 800fd04:	d06a      	beq.n	800fddc <HAL_TIM_ConfigClockSource+0x140>
      break;
 800fd06:	e073      	b.n	800fdf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800fd08:	2b70      	cmp	r3, #112	; 0x70
 800fd0a:	d00d      	beq.n	800fd28 <HAL_TIM_ConfigClockSource+0x8c>
 800fd0c:	2b70      	cmp	r3, #112	; 0x70
 800fd0e:	d804      	bhi.n	800fd1a <HAL_TIM_ConfigClockSource+0x7e>
 800fd10:	2b50      	cmp	r3, #80	; 0x50
 800fd12:	d033      	beq.n	800fd7c <HAL_TIM_ConfigClockSource+0xe0>
 800fd14:	2b60      	cmp	r3, #96	; 0x60
 800fd16:	d041      	beq.n	800fd9c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800fd18:	e06a      	b.n	800fdf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800fd1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd1e:	d066      	beq.n	800fdee <HAL_TIM_ConfigClockSource+0x152>
 800fd20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fd24:	d017      	beq.n	800fd56 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800fd26:	e063      	b.n	800fdf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	6818      	ldr	r0, [r3, #0]
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	6899      	ldr	r1, [r3, #8]
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	685a      	ldr	r2, [r3, #4]
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	68db      	ldr	r3, [r3, #12]
 800fd38:	f000 fc0a 	bl	8010550 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	689b      	ldr	r3, [r3, #8]
 800fd42:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fd4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	68fa      	ldr	r2, [r7, #12]
 800fd52:	609a      	str	r2, [r3, #8]
      break;
 800fd54:	e04c      	b.n	800fdf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	6818      	ldr	r0, [r3, #0]
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	6899      	ldr	r1, [r3, #8]
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	685a      	ldr	r2, [r3, #4]
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	68db      	ldr	r3, [r3, #12]
 800fd66:	f000 fbf3 	bl	8010550 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	689a      	ldr	r2, [r3, #8]
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fd78:	609a      	str	r2, [r3, #8]
      break;
 800fd7a:	e039      	b.n	800fdf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6818      	ldr	r0, [r3, #0]
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	6859      	ldr	r1, [r3, #4]
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	461a      	mov	r2, r3
 800fd8a:	f000 fb67 	bl	801045c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	2150      	movs	r1, #80	; 0x50
 800fd94:	4618      	mov	r0, r3
 800fd96:	f000 fbc0 	bl	801051a <TIM_ITRx_SetConfig>
      break;
 800fd9a:	e029      	b.n	800fdf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6818      	ldr	r0, [r3, #0]
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	6859      	ldr	r1, [r3, #4]
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	68db      	ldr	r3, [r3, #12]
 800fda8:	461a      	mov	r2, r3
 800fdaa:	f000 fb86 	bl	80104ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	2160      	movs	r1, #96	; 0x60
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f000 fbb0 	bl	801051a <TIM_ITRx_SetConfig>
      break;
 800fdba:	e019      	b.n	800fdf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	6818      	ldr	r0, [r3, #0]
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	6859      	ldr	r1, [r3, #4]
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	68db      	ldr	r3, [r3, #12]
 800fdc8:	461a      	mov	r2, r3
 800fdca:	f000 fb47 	bl	801045c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	2140      	movs	r1, #64	; 0x40
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f000 fba0 	bl	801051a <TIM_ITRx_SetConfig>
      break;
 800fdda:	e009      	b.n	800fdf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681a      	ldr	r2, [r3, #0]
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	4619      	mov	r1, r3
 800fde6:	4610      	mov	r0, r2
 800fde8:	f000 fb97 	bl	801051a <TIM_ITRx_SetConfig>
      break;
 800fdec:	e000      	b.n	800fdf0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800fdee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe00:	2300      	movs	r3, #0
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3710      	adds	r7, #16
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
 800fe0a:	bf00      	nop
 800fe0c:	fffeff88 	.word	0xfffeff88

0800fe10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b083      	sub	sp, #12
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fe18:	bf00      	nop
 800fe1a:	370c      	adds	r7, #12
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr

0800fe24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b083      	sub	sp, #12
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fe2c:	bf00      	nop
 800fe2e:	370c      	adds	r7, #12
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr

0800fe38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b083      	sub	sp, #12
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fe40:	bf00      	nop
 800fe42:	370c      	adds	r7, #12
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr

0800fe4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fe4c:	b480      	push	{r7}
 800fe4e:	b083      	sub	sp, #12
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fe54:	bf00      	nop
 800fe56:	370c      	adds	r7, #12
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5e:	4770      	bx	lr

0800fe60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fe60:	b480      	push	{r7}
 800fe62:	b085      	sub	sp, #20
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	4a40      	ldr	r2, [pc, #256]	; (800ff74 <TIM_Base_SetConfig+0x114>)
 800fe74:	4293      	cmp	r3, r2
 800fe76:	d013      	beq.n	800fea0 <TIM_Base_SetConfig+0x40>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe7e:	d00f      	beq.n	800fea0 <TIM_Base_SetConfig+0x40>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	4a3d      	ldr	r2, [pc, #244]	; (800ff78 <TIM_Base_SetConfig+0x118>)
 800fe84:	4293      	cmp	r3, r2
 800fe86:	d00b      	beq.n	800fea0 <TIM_Base_SetConfig+0x40>
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	4a3c      	ldr	r2, [pc, #240]	; (800ff7c <TIM_Base_SetConfig+0x11c>)
 800fe8c:	4293      	cmp	r3, r2
 800fe8e:	d007      	beq.n	800fea0 <TIM_Base_SetConfig+0x40>
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	4a3b      	ldr	r2, [pc, #236]	; (800ff80 <TIM_Base_SetConfig+0x120>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d003      	beq.n	800fea0 <TIM_Base_SetConfig+0x40>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	4a3a      	ldr	r2, [pc, #232]	; (800ff84 <TIM_Base_SetConfig+0x124>)
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d108      	bne.n	800feb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	685b      	ldr	r3, [r3, #4]
 800feac:	68fa      	ldr	r2, [r7, #12]
 800feae:	4313      	orrs	r3, r2
 800feb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	4a2f      	ldr	r2, [pc, #188]	; (800ff74 <TIM_Base_SetConfig+0x114>)
 800feb6:	4293      	cmp	r3, r2
 800feb8:	d02b      	beq.n	800ff12 <TIM_Base_SetConfig+0xb2>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fec0:	d027      	beq.n	800ff12 <TIM_Base_SetConfig+0xb2>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	4a2c      	ldr	r2, [pc, #176]	; (800ff78 <TIM_Base_SetConfig+0x118>)
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d023      	beq.n	800ff12 <TIM_Base_SetConfig+0xb2>
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	4a2b      	ldr	r2, [pc, #172]	; (800ff7c <TIM_Base_SetConfig+0x11c>)
 800fece:	4293      	cmp	r3, r2
 800fed0:	d01f      	beq.n	800ff12 <TIM_Base_SetConfig+0xb2>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	4a2a      	ldr	r2, [pc, #168]	; (800ff80 <TIM_Base_SetConfig+0x120>)
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d01b      	beq.n	800ff12 <TIM_Base_SetConfig+0xb2>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	4a29      	ldr	r2, [pc, #164]	; (800ff84 <TIM_Base_SetConfig+0x124>)
 800fede:	4293      	cmp	r3, r2
 800fee0:	d017      	beq.n	800ff12 <TIM_Base_SetConfig+0xb2>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	4a28      	ldr	r2, [pc, #160]	; (800ff88 <TIM_Base_SetConfig+0x128>)
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d013      	beq.n	800ff12 <TIM_Base_SetConfig+0xb2>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	4a27      	ldr	r2, [pc, #156]	; (800ff8c <TIM_Base_SetConfig+0x12c>)
 800feee:	4293      	cmp	r3, r2
 800fef0:	d00f      	beq.n	800ff12 <TIM_Base_SetConfig+0xb2>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	4a26      	ldr	r2, [pc, #152]	; (800ff90 <TIM_Base_SetConfig+0x130>)
 800fef6:	4293      	cmp	r3, r2
 800fef8:	d00b      	beq.n	800ff12 <TIM_Base_SetConfig+0xb2>
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	4a25      	ldr	r2, [pc, #148]	; (800ff94 <TIM_Base_SetConfig+0x134>)
 800fefe:	4293      	cmp	r3, r2
 800ff00:	d007      	beq.n	800ff12 <TIM_Base_SetConfig+0xb2>
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	4a24      	ldr	r2, [pc, #144]	; (800ff98 <TIM_Base_SetConfig+0x138>)
 800ff06:	4293      	cmp	r3, r2
 800ff08:	d003      	beq.n	800ff12 <TIM_Base_SetConfig+0xb2>
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	4a23      	ldr	r2, [pc, #140]	; (800ff9c <TIM_Base_SetConfig+0x13c>)
 800ff0e:	4293      	cmp	r3, r2
 800ff10:	d108      	bne.n	800ff24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	68db      	ldr	r3, [r3, #12]
 800ff1e:	68fa      	ldr	r2, [r7, #12]
 800ff20:	4313      	orrs	r3, r2
 800ff22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	695b      	ldr	r3, [r3, #20]
 800ff2e:	4313      	orrs	r3, r2
 800ff30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	68fa      	ldr	r2, [r7, #12]
 800ff36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	689a      	ldr	r2, [r3, #8]
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	4a0a      	ldr	r2, [pc, #40]	; (800ff74 <TIM_Base_SetConfig+0x114>)
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	d003      	beq.n	800ff58 <TIM_Base_SetConfig+0xf8>
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	4a0c      	ldr	r2, [pc, #48]	; (800ff84 <TIM_Base_SetConfig+0x124>)
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d103      	bne.n	800ff60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	691a      	ldr	r2, [r3, #16]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2201      	movs	r2, #1
 800ff64:	615a      	str	r2, [r3, #20]
}
 800ff66:	bf00      	nop
 800ff68:	3714      	adds	r7, #20
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff70:	4770      	bx	lr
 800ff72:	bf00      	nop
 800ff74:	40010000 	.word	0x40010000
 800ff78:	40000400 	.word	0x40000400
 800ff7c:	40000800 	.word	0x40000800
 800ff80:	40000c00 	.word	0x40000c00
 800ff84:	40010400 	.word	0x40010400
 800ff88:	40014000 	.word	0x40014000
 800ff8c:	40014400 	.word	0x40014400
 800ff90:	40014800 	.word	0x40014800
 800ff94:	40001800 	.word	0x40001800
 800ff98:	40001c00 	.word	0x40001c00
 800ff9c:	40002000 	.word	0x40002000

0800ffa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b087      	sub	sp, #28
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6a1b      	ldr	r3, [r3, #32]
 800ffae:	f023 0201 	bic.w	r2, r3, #1
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6a1b      	ldr	r3, [r3, #32]
 800ffba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	685b      	ldr	r3, [r3, #4]
 800ffc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	699b      	ldr	r3, [r3, #24]
 800ffc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ffc8:	68fa      	ldr	r2, [r7, #12]
 800ffca:	4b2b      	ldr	r3, [pc, #172]	; (8010078 <TIM_OC1_SetConfig+0xd8>)
 800ffcc:	4013      	ands	r3, r2
 800ffce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f023 0303 	bic.w	r3, r3, #3
 800ffd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	68fa      	ldr	r2, [r7, #12]
 800ffde:	4313      	orrs	r3, r2
 800ffe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	f023 0302 	bic.w	r3, r3, #2
 800ffe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	697a      	ldr	r2, [r7, #20]
 800fff0:	4313      	orrs	r3, r2
 800fff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	4a21      	ldr	r2, [pc, #132]	; (801007c <TIM_OC1_SetConfig+0xdc>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d003      	beq.n	8010004 <TIM_OC1_SetConfig+0x64>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	4a20      	ldr	r2, [pc, #128]	; (8010080 <TIM_OC1_SetConfig+0xe0>)
 8010000:	4293      	cmp	r3, r2
 8010002:	d10c      	bne.n	801001e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	f023 0308 	bic.w	r3, r3, #8
 801000a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	68db      	ldr	r3, [r3, #12]
 8010010:	697a      	ldr	r2, [r7, #20]
 8010012:	4313      	orrs	r3, r2
 8010014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	f023 0304 	bic.w	r3, r3, #4
 801001c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	4a16      	ldr	r2, [pc, #88]	; (801007c <TIM_OC1_SetConfig+0xdc>)
 8010022:	4293      	cmp	r3, r2
 8010024:	d003      	beq.n	801002e <TIM_OC1_SetConfig+0x8e>
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	4a15      	ldr	r2, [pc, #84]	; (8010080 <TIM_OC1_SetConfig+0xe0>)
 801002a:	4293      	cmp	r3, r2
 801002c:	d111      	bne.n	8010052 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801003c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	695b      	ldr	r3, [r3, #20]
 8010042:	693a      	ldr	r2, [r7, #16]
 8010044:	4313      	orrs	r3, r2
 8010046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	699b      	ldr	r3, [r3, #24]
 801004c:	693a      	ldr	r2, [r7, #16]
 801004e:	4313      	orrs	r3, r2
 8010050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	693a      	ldr	r2, [r7, #16]
 8010056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	68fa      	ldr	r2, [r7, #12]
 801005c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	685a      	ldr	r2, [r3, #4]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	697a      	ldr	r2, [r7, #20]
 801006a:	621a      	str	r2, [r3, #32]
}
 801006c:	bf00      	nop
 801006e:	371c      	adds	r7, #28
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr
 8010078:	fffeff8f 	.word	0xfffeff8f
 801007c:	40010000 	.word	0x40010000
 8010080:	40010400 	.word	0x40010400

08010084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010084:	b480      	push	{r7}
 8010086:	b087      	sub	sp, #28
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6a1b      	ldr	r3, [r3, #32]
 8010092:	f023 0210 	bic.w	r2, r3, #16
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6a1b      	ldr	r3, [r3, #32]
 801009e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	685b      	ldr	r3, [r3, #4]
 80100a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	699b      	ldr	r3, [r3, #24]
 80100aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80100ac:	68fa      	ldr	r2, [r7, #12]
 80100ae:	4b2e      	ldr	r3, [pc, #184]	; (8010168 <TIM_OC2_SetConfig+0xe4>)
 80100b0:	4013      	ands	r3, r2
 80100b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80100ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	021b      	lsls	r3, r3, #8
 80100c2:	68fa      	ldr	r2, [r7, #12]
 80100c4:	4313      	orrs	r3, r2
 80100c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	f023 0320 	bic.w	r3, r3, #32
 80100ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	689b      	ldr	r3, [r3, #8]
 80100d4:	011b      	lsls	r3, r3, #4
 80100d6:	697a      	ldr	r2, [r7, #20]
 80100d8:	4313      	orrs	r3, r2
 80100da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	4a23      	ldr	r2, [pc, #140]	; (801016c <TIM_OC2_SetConfig+0xe8>)
 80100e0:	4293      	cmp	r3, r2
 80100e2:	d003      	beq.n	80100ec <TIM_OC2_SetConfig+0x68>
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	4a22      	ldr	r2, [pc, #136]	; (8010170 <TIM_OC2_SetConfig+0xec>)
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d10d      	bne.n	8010108 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80100f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	68db      	ldr	r3, [r3, #12]
 80100f8:	011b      	lsls	r3, r3, #4
 80100fa:	697a      	ldr	r2, [r7, #20]
 80100fc:	4313      	orrs	r3, r2
 80100fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010106:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	4a18      	ldr	r2, [pc, #96]	; (801016c <TIM_OC2_SetConfig+0xe8>)
 801010c:	4293      	cmp	r3, r2
 801010e:	d003      	beq.n	8010118 <TIM_OC2_SetConfig+0x94>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	4a17      	ldr	r2, [pc, #92]	; (8010170 <TIM_OC2_SetConfig+0xec>)
 8010114:	4293      	cmp	r3, r2
 8010116:	d113      	bne.n	8010140 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801011e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	695b      	ldr	r3, [r3, #20]
 801012c:	009b      	lsls	r3, r3, #2
 801012e:	693a      	ldr	r2, [r7, #16]
 8010130:	4313      	orrs	r3, r2
 8010132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	699b      	ldr	r3, [r3, #24]
 8010138:	009b      	lsls	r3, r3, #2
 801013a:	693a      	ldr	r2, [r7, #16]
 801013c:	4313      	orrs	r3, r2
 801013e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	693a      	ldr	r2, [r7, #16]
 8010144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	68fa      	ldr	r2, [r7, #12]
 801014a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	685a      	ldr	r2, [r3, #4]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	697a      	ldr	r2, [r7, #20]
 8010158:	621a      	str	r2, [r3, #32]
}
 801015a:	bf00      	nop
 801015c:	371c      	adds	r7, #28
 801015e:	46bd      	mov	sp, r7
 8010160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010164:	4770      	bx	lr
 8010166:	bf00      	nop
 8010168:	feff8fff 	.word	0xfeff8fff
 801016c:	40010000 	.word	0x40010000
 8010170:	40010400 	.word	0x40010400

08010174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010174:	b480      	push	{r7}
 8010176:	b087      	sub	sp, #28
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6a1b      	ldr	r3, [r3, #32]
 8010182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6a1b      	ldr	r3, [r3, #32]
 801018e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	69db      	ldr	r3, [r3, #28]
 801019a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801019c:	68fa      	ldr	r2, [r7, #12]
 801019e:	4b2d      	ldr	r3, [pc, #180]	; (8010254 <TIM_OC3_SetConfig+0xe0>)
 80101a0:	4013      	ands	r3, r2
 80101a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f023 0303 	bic.w	r3, r3, #3
 80101aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	68fa      	ldr	r2, [r7, #12]
 80101b2:	4313      	orrs	r3, r2
 80101b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80101bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	689b      	ldr	r3, [r3, #8]
 80101c2:	021b      	lsls	r3, r3, #8
 80101c4:	697a      	ldr	r2, [r7, #20]
 80101c6:	4313      	orrs	r3, r2
 80101c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	4a22      	ldr	r2, [pc, #136]	; (8010258 <TIM_OC3_SetConfig+0xe4>)
 80101ce:	4293      	cmp	r3, r2
 80101d0:	d003      	beq.n	80101da <TIM_OC3_SetConfig+0x66>
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	4a21      	ldr	r2, [pc, #132]	; (801025c <TIM_OC3_SetConfig+0xe8>)
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d10d      	bne.n	80101f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80101da:	697b      	ldr	r3, [r7, #20]
 80101dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80101e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	68db      	ldr	r3, [r3, #12]
 80101e6:	021b      	lsls	r3, r3, #8
 80101e8:	697a      	ldr	r2, [r7, #20]
 80101ea:	4313      	orrs	r3, r2
 80101ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80101f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	4a17      	ldr	r2, [pc, #92]	; (8010258 <TIM_OC3_SetConfig+0xe4>)
 80101fa:	4293      	cmp	r3, r2
 80101fc:	d003      	beq.n	8010206 <TIM_OC3_SetConfig+0x92>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	4a16      	ldr	r2, [pc, #88]	; (801025c <TIM_OC3_SetConfig+0xe8>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d113      	bne.n	801022e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010206:	693b      	ldr	r3, [r7, #16]
 8010208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801020c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	695b      	ldr	r3, [r3, #20]
 801021a:	011b      	lsls	r3, r3, #4
 801021c:	693a      	ldr	r2, [r7, #16]
 801021e:	4313      	orrs	r3, r2
 8010220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	699b      	ldr	r3, [r3, #24]
 8010226:	011b      	lsls	r3, r3, #4
 8010228:	693a      	ldr	r2, [r7, #16]
 801022a:	4313      	orrs	r3, r2
 801022c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	693a      	ldr	r2, [r7, #16]
 8010232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	68fa      	ldr	r2, [r7, #12]
 8010238:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	685a      	ldr	r2, [r3, #4]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	697a      	ldr	r2, [r7, #20]
 8010246:	621a      	str	r2, [r3, #32]
}
 8010248:	bf00      	nop
 801024a:	371c      	adds	r7, #28
 801024c:	46bd      	mov	sp, r7
 801024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010252:	4770      	bx	lr
 8010254:	fffeff8f 	.word	0xfffeff8f
 8010258:	40010000 	.word	0x40010000
 801025c:	40010400 	.word	0x40010400

08010260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010260:	b480      	push	{r7}
 8010262:	b087      	sub	sp, #28
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6a1b      	ldr	r3, [r3, #32]
 801026e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6a1b      	ldr	r3, [r3, #32]
 801027a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	69db      	ldr	r3, [r3, #28]
 8010286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010288:	68fa      	ldr	r2, [r7, #12]
 801028a:	4b1e      	ldr	r3, [pc, #120]	; (8010304 <TIM_OC4_SetConfig+0xa4>)
 801028c:	4013      	ands	r3, r2
 801028e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	021b      	lsls	r3, r3, #8
 801029e:	68fa      	ldr	r2, [r7, #12]
 80102a0:	4313      	orrs	r3, r2
 80102a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80102aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	689b      	ldr	r3, [r3, #8]
 80102b0:	031b      	lsls	r3, r3, #12
 80102b2:	693a      	ldr	r2, [r7, #16]
 80102b4:	4313      	orrs	r3, r2
 80102b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	4a13      	ldr	r2, [pc, #76]	; (8010308 <TIM_OC4_SetConfig+0xa8>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d003      	beq.n	80102c8 <TIM_OC4_SetConfig+0x68>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	4a12      	ldr	r2, [pc, #72]	; (801030c <TIM_OC4_SetConfig+0xac>)
 80102c4:	4293      	cmp	r3, r2
 80102c6:	d109      	bne.n	80102dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80102ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	695b      	ldr	r3, [r3, #20]
 80102d4:	019b      	lsls	r3, r3, #6
 80102d6:	697a      	ldr	r2, [r7, #20]
 80102d8:	4313      	orrs	r3, r2
 80102da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	697a      	ldr	r2, [r7, #20]
 80102e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	68fa      	ldr	r2, [r7, #12]
 80102e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	685a      	ldr	r2, [r3, #4]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	693a      	ldr	r2, [r7, #16]
 80102f4:	621a      	str	r2, [r3, #32]
}
 80102f6:	bf00      	nop
 80102f8:	371c      	adds	r7, #28
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr
 8010302:	bf00      	nop
 8010304:	feff8fff 	.word	0xfeff8fff
 8010308:	40010000 	.word	0x40010000
 801030c:	40010400 	.word	0x40010400

08010310 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010310:	b480      	push	{r7}
 8010312:	b087      	sub	sp, #28
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
 8010318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	6a1b      	ldr	r3, [r3, #32]
 801031e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6a1b      	ldr	r3, [r3, #32]
 801032a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	685b      	ldr	r3, [r3, #4]
 8010330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010338:	68fa      	ldr	r2, [r7, #12]
 801033a:	4b1b      	ldr	r3, [pc, #108]	; (80103a8 <TIM_OC5_SetConfig+0x98>)
 801033c:	4013      	ands	r3, r2
 801033e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	68fa      	ldr	r2, [r7, #12]
 8010346:	4313      	orrs	r3, r2
 8010348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010350:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	689b      	ldr	r3, [r3, #8]
 8010356:	041b      	lsls	r3, r3, #16
 8010358:	693a      	ldr	r2, [r7, #16]
 801035a:	4313      	orrs	r3, r2
 801035c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	4a12      	ldr	r2, [pc, #72]	; (80103ac <TIM_OC5_SetConfig+0x9c>)
 8010362:	4293      	cmp	r3, r2
 8010364:	d003      	beq.n	801036e <TIM_OC5_SetConfig+0x5e>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	4a11      	ldr	r2, [pc, #68]	; (80103b0 <TIM_OC5_SetConfig+0xa0>)
 801036a:	4293      	cmp	r3, r2
 801036c:	d109      	bne.n	8010382 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010374:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	695b      	ldr	r3, [r3, #20]
 801037a:	021b      	lsls	r3, r3, #8
 801037c:	697a      	ldr	r2, [r7, #20]
 801037e:	4313      	orrs	r3, r2
 8010380:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	697a      	ldr	r2, [r7, #20]
 8010386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	68fa      	ldr	r2, [r7, #12]
 801038c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	685a      	ldr	r2, [r3, #4]
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	693a      	ldr	r2, [r7, #16]
 801039a:	621a      	str	r2, [r3, #32]
}
 801039c:	bf00      	nop
 801039e:	371c      	adds	r7, #28
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr
 80103a8:	fffeff8f 	.word	0xfffeff8f
 80103ac:	40010000 	.word	0x40010000
 80103b0:	40010400 	.word	0x40010400

080103b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b087      	sub	sp, #28
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6a1b      	ldr	r3, [r3, #32]
 80103c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	6a1b      	ldr	r3, [r3, #32]
 80103ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	685b      	ldr	r3, [r3, #4]
 80103d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80103dc:	68fa      	ldr	r2, [r7, #12]
 80103de:	4b1c      	ldr	r3, [pc, #112]	; (8010450 <TIM_OC6_SetConfig+0x9c>)
 80103e0:	4013      	ands	r3, r2
 80103e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	021b      	lsls	r3, r3, #8
 80103ea:	68fa      	ldr	r2, [r7, #12]
 80103ec:	4313      	orrs	r3, r2
 80103ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80103f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	689b      	ldr	r3, [r3, #8]
 80103fc:	051b      	lsls	r3, r3, #20
 80103fe:	693a      	ldr	r2, [r7, #16]
 8010400:	4313      	orrs	r3, r2
 8010402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	4a13      	ldr	r2, [pc, #76]	; (8010454 <TIM_OC6_SetConfig+0xa0>)
 8010408:	4293      	cmp	r3, r2
 801040a:	d003      	beq.n	8010414 <TIM_OC6_SetConfig+0x60>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	4a12      	ldr	r2, [pc, #72]	; (8010458 <TIM_OC6_SetConfig+0xa4>)
 8010410:	4293      	cmp	r3, r2
 8010412:	d109      	bne.n	8010428 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801041a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	695b      	ldr	r3, [r3, #20]
 8010420:	029b      	lsls	r3, r3, #10
 8010422:	697a      	ldr	r2, [r7, #20]
 8010424:	4313      	orrs	r3, r2
 8010426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	697a      	ldr	r2, [r7, #20]
 801042c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	68fa      	ldr	r2, [r7, #12]
 8010432:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	685a      	ldr	r2, [r3, #4]
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	693a      	ldr	r2, [r7, #16]
 8010440:	621a      	str	r2, [r3, #32]
}
 8010442:	bf00      	nop
 8010444:	371c      	adds	r7, #28
 8010446:	46bd      	mov	sp, r7
 8010448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044c:	4770      	bx	lr
 801044e:	bf00      	nop
 8010450:	feff8fff 	.word	0xfeff8fff
 8010454:	40010000 	.word	0x40010000
 8010458:	40010400 	.word	0x40010400

0801045c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801045c:	b480      	push	{r7}
 801045e:	b087      	sub	sp, #28
 8010460:	af00      	add	r7, sp, #0
 8010462:	60f8      	str	r0, [r7, #12]
 8010464:	60b9      	str	r1, [r7, #8]
 8010466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	6a1b      	ldr	r3, [r3, #32]
 801046c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	6a1b      	ldr	r3, [r3, #32]
 8010472:	f023 0201 	bic.w	r2, r3, #1
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	699b      	ldr	r3, [r3, #24]
 801047e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010480:	693b      	ldr	r3, [r7, #16]
 8010482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	011b      	lsls	r3, r3, #4
 801048c:	693a      	ldr	r2, [r7, #16]
 801048e:	4313      	orrs	r3, r2
 8010490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	f023 030a 	bic.w	r3, r3, #10
 8010498:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801049a:	697a      	ldr	r2, [r7, #20]
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	4313      	orrs	r3, r2
 80104a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	693a      	ldr	r2, [r7, #16]
 80104a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	697a      	ldr	r2, [r7, #20]
 80104ac:	621a      	str	r2, [r3, #32]
}
 80104ae:	bf00      	nop
 80104b0:	371c      	adds	r7, #28
 80104b2:	46bd      	mov	sp, r7
 80104b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b8:	4770      	bx	lr

080104ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80104ba:	b480      	push	{r7}
 80104bc:	b087      	sub	sp, #28
 80104be:	af00      	add	r7, sp, #0
 80104c0:	60f8      	str	r0, [r7, #12]
 80104c2:	60b9      	str	r1, [r7, #8]
 80104c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	6a1b      	ldr	r3, [r3, #32]
 80104ca:	f023 0210 	bic.w	r2, r3, #16
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	699b      	ldr	r3, [r3, #24]
 80104d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	6a1b      	ldr	r3, [r3, #32]
 80104dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80104e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	031b      	lsls	r3, r3, #12
 80104ea:	697a      	ldr	r2, [r7, #20]
 80104ec:	4313      	orrs	r3, r2
 80104ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80104f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80104f8:	68bb      	ldr	r3, [r7, #8]
 80104fa:	011b      	lsls	r3, r3, #4
 80104fc:	693a      	ldr	r2, [r7, #16]
 80104fe:	4313      	orrs	r3, r2
 8010500:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	697a      	ldr	r2, [r7, #20]
 8010506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	693a      	ldr	r2, [r7, #16]
 801050c:	621a      	str	r2, [r3, #32]
}
 801050e:	bf00      	nop
 8010510:	371c      	adds	r7, #28
 8010512:	46bd      	mov	sp, r7
 8010514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010518:	4770      	bx	lr

0801051a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801051a:	b480      	push	{r7}
 801051c:	b085      	sub	sp, #20
 801051e:	af00      	add	r7, sp, #0
 8010520:	6078      	str	r0, [r7, #4]
 8010522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010532:	683a      	ldr	r2, [r7, #0]
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	4313      	orrs	r3, r2
 8010538:	f043 0307 	orr.w	r3, r3, #7
 801053c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	68fa      	ldr	r2, [r7, #12]
 8010542:	609a      	str	r2, [r3, #8]
}
 8010544:	bf00      	nop
 8010546:	3714      	adds	r7, #20
 8010548:	46bd      	mov	sp, r7
 801054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054e:	4770      	bx	lr

08010550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010550:	b480      	push	{r7}
 8010552:	b087      	sub	sp, #28
 8010554:	af00      	add	r7, sp, #0
 8010556:	60f8      	str	r0, [r7, #12]
 8010558:	60b9      	str	r1, [r7, #8]
 801055a:	607a      	str	r2, [r7, #4]
 801055c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	689b      	ldr	r3, [r3, #8]
 8010562:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010564:	697b      	ldr	r3, [r7, #20]
 8010566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801056a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	021a      	lsls	r2, r3, #8
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	431a      	orrs	r2, r3
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	4313      	orrs	r3, r2
 8010578:	697a      	ldr	r2, [r7, #20]
 801057a:	4313      	orrs	r3, r2
 801057c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	697a      	ldr	r2, [r7, #20]
 8010582:	609a      	str	r2, [r3, #8]
}
 8010584:	bf00      	nop
 8010586:	371c      	adds	r7, #28
 8010588:	46bd      	mov	sp, r7
 801058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058e:	4770      	bx	lr

08010590 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b084      	sub	sp, #16
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	2204      	movs	r2, #4
 80105a0:	6839      	ldr	r1, [r7, #0]
 80105a2:	4618      	mov	r0, r3
 80105a4:	f000 f94e 	bl	8010844 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80105b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	689a      	ldr	r2, [r3, #8]
 80105be:	4b0b      	ldr	r3, [pc, #44]	; (80105ec <HAL_TIMEx_PWMN_Start+0x5c>)
 80105c0:	4013      	ands	r3, r2
 80105c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2b06      	cmp	r3, #6
 80105c8:	d00b      	beq.n	80105e2 <HAL_TIMEx_PWMN_Start+0x52>
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105d0:	d007      	beq.n	80105e2 <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	681a      	ldr	r2, [r3, #0]
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	f042 0201 	orr.w	r2, r2, #1
 80105e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80105e2:	2300      	movs	r3, #0
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3710      	adds	r7, #16
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}
 80105ec:	00010007 	.word	0x00010007

080105f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80105f0:	b480      	push	{r7}
 80105f2:	b085      	sub	sp, #20
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010600:	2b01      	cmp	r3, #1
 8010602:	d101      	bne.n	8010608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010604:	2302      	movs	r3, #2
 8010606:	e06d      	b.n	80106e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2201      	movs	r2, #1
 801060c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2202      	movs	r2, #2
 8010614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	689b      	ldr	r3, [r3, #8]
 8010626:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4a30      	ldr	r2, [pc, #192]	; (80106f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801062e:	4293      	cmp	r3, r2
 8010630:	d004      	beq.n	801063c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	4a2f      	ldr	r2, [pc, #188]	; (80106f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010638:	4293      	cmp	r3, r2
 801063a:	d108      	bne.n	801064e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010642:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	685b      	ldr	r3, [r3, #4]
 8010648:	68fa      	ldr	r2, [r7, #12]
 801064a:	4313      	orrs	r3, r2
 801064c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010654:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	68fa      	ldr	r2, [r7, #12]
 801065c:	4313      	orrs	r3, r2
 801065e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	68fa      	ldr	r2, [r7, #12]
 8010666:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	4a20      	ldr	r2, [pc, #128]	; (80106f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801066e:	4293      	cmp	r3, r2
 8010670:	d022      	beq.n	80106b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801067a:	d01d      	beq.n	80106b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	4a1d      	ldr	r2, [pc, #116]	; (80106f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010682:	4293      	cmp	r3, r2
 8010684:	d018      	beq.n	80106b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	4a1c      	ldr	r2, [pc, #112]	; (80106fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801068c:	4293      	cmp	r3, r2
 801068e:	d013      	beq.n	80106b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4a1a      	ldr	r2, [pc, #104]	; (8010700 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d00e      	beq.n	80106b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	4a15      	ldr	r2, [pc, #84]	; (80106f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80106a0:	4293      	cmp	r3, r2
 80106a2:	d009      	beq.n	80106b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	4a16      	ldr	r2, [pc, #88]	; (8010704 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d004      	beq.n	80106b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	4a15      	ldr	r2, [pc, #84]	; (8010708 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80106b4:	4293      	cmp	r3, r2
 80106b6:	d10c      	bne.n	80106d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80106be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	689b      	ldr	r3, [r3, #8]
 80106c4:	68ba      	ldr	r2, [r7, #8]
 80106c6:	4313      	orrs	r3, r2
 80106c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	68ba      	ldr	r2, [r7, #8]
 80106d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2201      	movs	r2, #1
 80106d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2200      	movs	r2, #0
 80106de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80106e2:	2300      	movs	r3, #0
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	3714      	adds	r7, #20
 80106e8:	46bd      	mov	sp, r7
 80106ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ee:	4770      	bx	lr
 80106f0:	40010000 	.word	0x40010000
 80106f4:	40010400 	.word	0x40010400
 80106f8:	40000400 	.word	0x40000400
 80106fc:	40000800 	.word	0x40000800
 8010700:	40000c00 	.word	0x40000c00
 8010704:	40014000 	.word	0x40014000
 8010708:	40001800 	.word	0x40001800

0801070c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801070c:	b480      	push	{r7}
 801070e:	b085      	sub	sp, #20
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010716:	2300      	movs	r3, #0
 8010718:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010720:	2b01      	cmp	r3, #1
 8010722:	d101      	bne.n	8010728 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010724:	2302      	movs	r3, #2
 8010726:	e065      	b.n	80107f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2201      	movs	r2, #1
 801072c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	68db      	ldr	r3, [r3, #12]
 801073a:	4313      	orrs	r3, r2
 801073c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	689b      	ldr	r3, [r3, #8]
 8010748:	4313      	orrs	r3, r2
 801074a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	4313      	orrs	r3, r2
 8010758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	4313      	orrs	r3, r2
 8010766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	691b      	ldr	r3, [r3, #16]
 8010772:	4313      	orrs	r3, r2
 8010774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	695b      	ldr	r3, [r3, #20]
 8010780:	4313      	orrs	r3, r2
 8010782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801078e:	4313      	orrs	r3, r2
 8010790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	699b      	ldr	r3, [r3, #24]
 801079c:	041b      	lsls	r3, r3, #16
 801079e:	4313      	orrs	r3, r2
 80107a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	4a16      	ldr	r2, [pc, #88]	; (8010800 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d004      	beq.n	80107b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	4a14      	ldr	r2, [pc, #80]	; (8010804 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d115      	bne.n	80107e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107c0:	051b      	lsls	r3, r3, #20
 80107c2:	4313      	orrs	r3, r2
 80107c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	69db      	ldr	r3, [r3, #28]
 80107d0:	4313      	orrs	r3, r2
 80107d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	6a1b      	ldr	r3, [r3, #32]
 80107de:	4313      	orrs	r3, r2
 80107e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	68fa      	ldr	r2, [r7, #12]
 80107e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2200      	movs	r2, #0
 80107ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80107f2:	2300      	movs	r3, #0
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3714      	adds	r7, #20
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr
 8010800:	40010000 	.word	0x40010000
 8010804:	40010400 	.word	0x40010400

08010808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010808:	b480      	push	{r7}
 801080a:	b083      	sub	sp, #12
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010810:	bf00      	nop
 8010812:	370c      	adds	r7, #12
 8010814:	46bd      	mov	sp, r7
 8010816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081a:	4770      	bx	lr

0801081c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801081c:	b480      	push	{r7}
 801081e:	b083      	sub	sp, #12
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010824:	bf00      	nop
 8010826:	370c      	adds	r7, #12
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr

08010830 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010830:	b480      	push	{r7}
 8010832:	b083      	sub	sp, #12
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010838:	bf00      	nop
 801083a:	370c      	adds	r7, #12
 801083c:	46bd      	mov	sp, r7
 801083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010842:	4770      	bx	lr

08010844 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8010844:	b480      	push	{r7}
 8010846:	b087      	sub	sp, #28
 8010848:	af00      	add	r7, sp, #0
 801084a:	60f8      	str	r0, [r7, #12]
 801084c:	60b9      	str	r1, [r7, #8]
 801084e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	f003 031f 	and.w	r3, r3, #31
 8010856:	2204      	movs	r2, #4
 8010858:	fa02 f303 	lsl.w	r3, r2, r3
 801085c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	6a1a      	ldr	r2, [r3, #32]
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	43db      	mvns	r3, r3
 8010866:	401a      	ands	r2, r3
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	6a1a      	ldr	r2, [r3, #32]
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	f003 031f 	and.w	r3, r3, #31
 8010876:	6879      	ldr	r1, [r7, #4]
 8010878:	fa01 f303 	lsl.w	r3, r1, r3
 801087c:	431a      	orrs	r2, r3
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	621a      	str	r2, [r3, #32]
}
 8010882:	bf00      	nop
 8010884:	371c      	adds	r7, #28
 8010886:	46bd      	mov	sp, r7
 8010888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088c:	4770      	bx	lr

0801088e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801088e:	b580      	push	{r7, lr}
 8010890:	b082      	sub	sp, #8
 8010892:	af00      	add	r7, sp, #0
 8010894:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d101      	bne.n	80108a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801089c:	2301      	movs	r3, #1
 801089e:	e040      	b.n	8010922 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d106      	bne.n	80108b6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2200      	movs	r2, #0
 80108ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f7f9 f985 	bl	8009bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2224      	movs	r2, #36	; 0x24
 80108ba:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	681a      	ldr	r2, [r3, #0]
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	f022 0201 	bic.w	r2, r2, #1
 80108ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	f000 fa7d 	bl	8010dcc <UART_SetConfig>
 80108d2:	4603      	mov	r3, r0
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	d101      	bne.n	80108dc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80108d8:	2301      	movs	r3, #1
 80108da:	e022      	b.n	8010922 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d002      	beq.n	80108ea <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f000 fd1b 	bl	8011320 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	685a      	ldr	r2, [r3, #4]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80108f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	689a      	ldr	r2, [r3, #8]
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010908:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	681a      	ldr	r2, [r3, #0]
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	f042 0201 	orr.w	r2, r2, #1
 8010918:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f000 fda2 	bl	8011464 <UART_CheckIdleState>
 8010920:	4603      	mov	r3, r0
}
 8010922:	4618      	mov	r0, r3
 8010924:	3708      	adds	r7, #8
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
	...

0801092c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b084      	sub	sp, #16
 8010930:	af00      	add	r7, sp, #0
 8010932:	60f8      	str	r0, [r7, #12]
 8010934:	60b9      	str	r1, [r7, #8]
 8010936:	4613      	mov	r3, r2
 8010938:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801093e:	2b20      	cmp	r3, #32
 8010940:	d164      	bne.n	8010a0c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d002      	beq.n	801094e <HAL_UART_Transmit_DMA+0x22>
 8010948:	88fb      	ldrh	r3, [r7, #6]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d101      	bne.n	8010952 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 801094e:	2301      	movs	r3, #1
 8010950:	e05d      	b.n	8010a0e <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010958:	2b01      	cmp	r3, #1
 801095a:	d101      	bne.n	8010960 <HAL_UART_Transmit_DMA+0x34>
 801095c:	2302      	movs	r3, #2
 801095e:	e056      	b.n	8010a0e <HAL_UART_Transmit_DMA+0xe2>
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	2201      	movs	r2, #1
 8010964:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	68ba      	ldr	r2, [r7, #8]
 801096c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	88fa      	ldrh	r2, [r7, #6]
 8010972:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	88fa      	ldrh	r2, [r7, #6]
 801097a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	2200      	movs	r2, #0
 8010982:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	2221      	movs	r2, #33	; 0x21
 8010988:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801098e:	2b00      	cmp	r3, #0
 8010990:	d02a      	beq.n	80109e8 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010996:	4a20      	ldr	r2, [pc, #128]	; (8010a18 <HAL_UART_Transmit_DMA+0xec>)
 8010998:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801099e:	4a1f      	ldr	r2, [pc, #124]	; (8010a1c <HAL_UART_Transmit_DMA+0xf0>)
 80109a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80109a6:	4a1e      	ldr	r2, [pc, #120]	; (8010a20 <HAL_UART_Transmit_DMA+0xf4>)
 80109a8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80109ae:	2200      	movs	r2, #0
 80109b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80109ba:	4619      	mov	r1, r3
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	3328      	adds	r3, #40	; 0x28
 80109c2:	461a      	mov	r2, r3
 80109c4:	88fb      	ldrh	r3, [r7, #6]
 80109c6:	f7fb fcc1 	bl	800c34c <HAL_DMA_Start_IT>
 80109ca:	4603      	mov	r3, r0
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d00b      	beq.n	80109e8 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	2210      	movs	r2, #16
 80109d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	2200      	movs	r2, #0
 80109da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	2220      	movs	r2, #32
 80109e2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80109e4:	2301      	movs	r3, #1
 80109e6:	e012      	b.n	8010a0e <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	2240      	movs	r2, #64	; 0x40
 80109ee:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2200      	movs	r2, #0
 80109f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	689a      	ldr	r2, [r3, #8]
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010a06:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	e000      	b.n	8010a0e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8010a0c:	2302      	movs	r3, #2
  }
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	3710      	adds	r7, #16
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}
 8010a16:	bf00      	nop
 8010a18:	08011623 	.word	0x08011623
 8010a1c:	08011673 	.word	0x08011673
 8010a20:	0801170f 	.word	0x0801170f

08010a24 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b084      	sub	sp, #16
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	60f8      	str	r0, [r7, #12]
 8010a2c:	60b9      	str	r1, [r7, #8]
 8010a2e:	4613      	mov	r3, r2
 8010a30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010a36:	2b20      	cmp	r3, #32
 8010a38:	d16c      	bne.n	8010b14 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d002      	beq.n	8010a46 <HAL_UART_Receive_DMA+0x22>
 8010a40:	88fb      	ldrh	r3, [r7, #6]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d101      	bne.n	8010a4a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8010a46:	2301      	movs	r3, #1
 8010a48:	e065      	b.n	8010b16 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010a50:	2b01      	cmp	r3, #1
 8010a52:	d101      	bne.n	8010a58 <HAL_UART_Receive_DMA+0x34>
 8010a54:	2302      	movs	r3, #2
 8010a56:	e05e      	b.n	8010b16 <HAL_UART_Receive_DMA+0xf2>
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	2201      	movs	r2, #1
 8010a5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	68ba      	ldr	r2, [r7, #8]
 8010a64:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	88fa      	ldrh	r2, [r7, #6]
 8010a6a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	2200      	movs	r2, #0
 8010a72:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2222      	movs	r2, #34	; 0x22
 8010a78:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d02a      	beq.n	8010ad8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a86:	4a26      	ldr	r2, [pc, #152]	; (8010b20 <HAL_UART_Receive_DMA+0xfc>)
 8010a88:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a8e:	4a25      	ldr	r2, [pc, #148]	; (8010b24 <HAL_UART_Receive_DMA+0x100>)
 8010a90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a96:	4a24      	ldr	r2, [pc, #144]	; (8010b28 <HAL_UART_Receive_DMA+0x104>)
 8010a98:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	3324      	adds	r3, #36	; 0x24
 8010aac:	4619      	mov	r1, r3
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ab2:	461a      	mov	r2, r3
 8010ab4:	88fb      	ldrh	r3, [r7, #6]
 8010ab6:	f7fb fc49 	bl	800c34c <HAL_DMA_Start_IT>
 8010aba:	4603      	mov	r3, r0
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d00b      	beq.n	8010ad8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	2210      	movs	r2, #16
 8010ac4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	2220      	movs	r2, #32
 8010ad2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	e01e      	b.n	8010b16 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2200      	movs	r2, #0
 8010adc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	681a      	ldr	r2, [r3, #0]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010aee:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	689a      	ldr	r2, [r3, #8]
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f042 0201 	orr.w	r2, r2, #1
 8010afe:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	689a      	ldr	r2, [r3, #8]
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010b0e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8010b10:	2300      	movs	r3, #0
 8010b12:	e000      	b.n	8010b16 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8010b14:	2302      	movs	r3, #2
  }
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3710      	adds	r7, #16
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}
 8010b1e:	bf00      	nop
 8010b20:	0801168f 	.word	0x0801168f
 8010b24:	080116f3 	.word	0x080116f3
 8010b28:	0801170f 	.word	0x0801170f

08010b2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
inline void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b088      	sub	sp, #32
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	69db      	ldr	r3, [r3, #28]
 8010b3a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	689b      	ldr	r3, [r3, #8]
 8010b4a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010b4c:	69fa      	ldr	r2, [r7, #28]
 8010b4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8010b52:	4013      	ands	r3, r2
 8010b54:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d113      	bne.n	8010b84 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8010b5c:	69fb      	ldr	r3, [r7, #28]
 8010b5e:	f003 0320 	and.w	r3, r3, #32
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d00e      	beq.n	8010b84 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	f003 0320 	and.w	r3, r3, #32
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d009      	beq.n	8010b84 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	f000 8100 	beq.w	8010d7a <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	4798      	blx	r3
      }
      return;
 8010b82:	e0fa      	b.n	8010d7a <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	f000 80d5 	beq.w	8010d36 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	f003 0301 	and.w	r3, r3, #1
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d105      	bne.n	8010ba2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8010b96:	69bb      	ldr	r3, [r7, #24]
 8010b98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	f000 80ca 	beq.w	8010d36 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010ba2:	69fb      	ldr	r3, [r7, #28]
 8010ba4:	f003 0301 	and.w	r3, r3, #1
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d00e      	beq.n	8010bca <HAL_UART_IRQHandler+0x9e>
 8010bac:	69bb      	ldr	r3, [r7, #24]
 8010bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d009      	beq.n	8010bca <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	2201      	movs	r2, #1
 8010bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010bc2:	f043 0201 	orr.w	r2, r3, #1
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010bca:	69fb      	ldr	r3, [r7, #28]
 8010bcc:	f003 0302 	and.w	r3, r3, #2
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d00e      	beq.n	8010bf2 <HAL_UART_IRQHandler+0xc6>
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	f003 0301 	and.w	r3, r3, #1
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d009      	beq.n	8010bf2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	2202      	movs	r2, #2
 8010be4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010bea:	f043 0204 	orr.w	r2, r3, #4
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010bf2:	69fb      	ldr	r3, [r7, #28]
 8010bf4:	f003 0304 	and.w	r3, r3, #4
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d00e      	beq.n	8010c1a <HAL_UART_IRQHandler+0xee>
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	f003 0301 	and.w	r3, r3, #1
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d009      	beq.n	8010c1a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	2204      	movs	r2, #4
 8010c0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c12:	f043 0202 	orr.w	r2, r3, #2
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010c1a:	69fb      	ldr	r3, [r7, #28]
 8010c1c:	f003 0308 	and.w	r3, r3, #8
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d013      	beq.n	8010c4c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010c24:	69bb      	ldr	r3, [r7, #24]
 8010c26:	f003 0320 	and.w	r3, r3, #32
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d104      	bne.n	8010c38 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d009      	beq.n	8010c4c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	2208      	movs	r2, #8
 8010c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c44:	f043 0208 	orr.w	r2, r3, #8
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010c4c:	69fb      	ldr	r3, [r7, #28]
 8010c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d00f      	beq.n	8010c76 <HAL_UART_IRQHandler+0x14a>
 8010c56:	69bb      	ldr	r3, [r7, #24]
 8010c58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d00a      	beq.n	8010c76 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010c68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c6e:	f043 0220 	orr.w	r2, r3, #32
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d07f      	beq.n	8010d7e <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8010c7e:	69fb      	ldr	r3, [r7, #28]
 8010c80:	f003 0320 	and.w	r3, r3, #32
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d00c      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010c88:	69bb      	ldr	r3, [r7, #24]
 8010c8a:	f003 0320 	and.w	r3, r3, #32
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d007      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d003      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ca6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	689b      	ldr	r3, [r3, #8]
 8010cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cb2:	2b40      	cmp	r3, #64	; 0x40
 8010cb4:	d004      	beq.n	8010cc0 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d031      	beq.n	8010d24 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f000 fc8e 	bl	80115e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	689b      	ldr	r3, [r3, #8]
 8010ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cd0:	2b40      	cmp	r3, #64	; 0x40
 8010cd2:	d123      	bne.n	8010d1c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	689a      	ldr	r2, [r3, #8]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010ce2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d013      	beq.n	8010d14 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cf0:	4a26      	ldr	r2, [pc, #152]	; (8010d8c <HAL_UART_IRQHandler+0x260>)
 8010cf2:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f7fb fb87 	bl	800c40c <HAL_DMA_Abort_IT>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d016      	beq.n	8010d32 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d0a:	687a      	ldr	r2, [r7, #4]
 8010d0c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8010d0e:	4610      	mov	r0, r2
 8010d10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d12:	e00e      	b.n	8010d32 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f7f7 f936 	bl	8007f86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d1a:	e00a      	b.n	8010d32 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f7f7 f932 	bl	8007f86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d22:	e006      	b.n	8010d32 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f7f7 f92e 	bl	8007f86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8010d30:	e025      	b.n	8010d7e <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d32:	bf00      	nop
    return;
 8010d34:	e023      	b.n	8010d7e <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8010d36:	69fb      	ldr	r3, [r7, #28]
 8010d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d00d      	beq.n	8010d5c <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8010d40:	69bb      	ldr	r3, [r7, #24]
 8010d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d008      	beq.n	8010d5c <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d017      	beq.n	8010d82 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	4798      	blx	r3
    }
    return;
 8010d5a:	e012      	b.n	8010d82 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010d5c:	69fb      	ldr	r3, [r7, #28]
 8010d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d00e      	beq.n	8010d84 <HAL_UART_IRQHandler+0x258>
 8010d66:	69bb      	ldr	r3, [r7, #24]
 8010d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d009      	beq.n	8010d84 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f000 fd1e 	bl	80117b2 <UART_EndTransmit_IT>
    return;
 8010d76:	bf00      	nop
 8010d78:	e004      	b.n	8010d84 <HAL_UART_IRQHandler+0x258>
      return;
 8010d7a:	bf00      	nop
 8010d7c:	e002      	b.n	8010d84 <HAL_UART_IRQHandler+0x258>
    return;
 8010d7e:	bf00      	nop
 8010d80:	e000      	b.n	8010d84 <HAL_UART_IRQHandler+0x258>
    return;
 8010d82:	bf00      	nop
  }

}
 8010d84:	3720      	adds	r7, #32
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	08011787 	.word	0x08011787

08010d90 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010d90:	b480      	push	{r7}
 8010d92:	b083      	sub	sp, #12
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010d98:	bf00      	nop
 8010d9a:	370c      	adds	r7, #12
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da2:	4770      	bx	lr

08010da4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010da4:	b480      	push	{r7}
 8010da6:	b083      	sub	sp, #12
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8010dac:	bf00      	nop
 8010dae:	370c      	adds	r7, #12
 8010db0:	46bd      	mov	sp, r7
 8010db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db6:	4770      	bx	lr

08010db8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010dc0:	bf00      	nop
 8010dc2:	370c      	adds	r7, #12
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dca:	4770      	bx	lr

08010dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b088      	sub	sp, #32
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	689a      	ldr	r2, [r3, #8]
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	691b      	ldr	r3, [r3, #16]
 8010de4:	431a      	orrs	r2, r3
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	695b      	ldr	r3, [r3, #20]
 8010dea:	431a      	orrs	r2, r3
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	69db      	ldr	r3, [r3, #28]
 8010df0:	4313      	orrs	r3, r2
 8010df2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	4bb1      	ldr	r3, [pc, #708]	; (80110c0 <UART_SetConfig+0x2f4>)
 8010dfc:	4013      	ands	r3, r2
 8010dfe:	687a      	ldr	r2, [r7, #4]
 8010e00:	6812      	ldr	r2, [r2, #0]
 8010e02:	6939      	ldr	r1, [r7, #16]
 8010e04:	430b      	orrs	r3, r1
 8010e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	68da      	ldr	r2, [r3, #12]
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	430a      	orrs	r2, r1
 8010e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	699b      	ldr	r3, [r3, #24]
 8010e22:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6a1b      	ldr	r3, [r3, #32]
 8010e28:	693a      	ldr	r2, [r7, #16]
 8010e2a:	4313      	orrs	r3, r2
 8010e2c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	689b      	ldr	r3, [r3, #8]
 8010e34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	693a      	ldr	r2, [r7, #16]
 8010e3e:	430a      	orrs	r2, r1
 8010e40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	4a9f      	ldr	r2, [pc, #636]	; (80110c4 <UART_SetConfig+0x2f8>)
 8010e48:	4293      	cmp	r3, r2
 8010e4a:	d121      	bne.n	8010e90 <UART_SetConfig+0xc4>
 8010e4c:	4b9e      	ldr	r3, [pc, #632]	; (80110c8 <UART_SetConfig+0x2fc>)
 8010e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e52:	f003 0303 	and.w	r3, r3, #3
 8010e56:	2b03      	cmp	r3, #3
 8010e58:	d816      	bhi.n	8010e88 <UART_SetConfig+0xbc>
 8010e5a:	a201      	add	r2, pc, #4	; (adr r2, 8010e60 <UART_SetConfig+0x94>)
 8010e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e60:	08010e71 	.word	0x08010e71
 8010e64:	08010e7d 	.word	0x08010e7d
 8010e68:	08010e77 	.word	0x08010e77
 8010e6c:	08010e83 	.word	0x08010e83
 8010e70:	2301      	movs	r3, #1
 8010e72:	77fb      	strb	r3, [r7, #31]
 8010e74:	e151      	b.n	801111a <UART_SetConfig+0x34e>
 8010e76:	2302      	movs	r3, #2
 8010e78:	77fb      	strb	r3, [r7, #31]
 8010e7a:	e14e      	b.n	801111a <UART_SetConfig+0x34e>
 8010e7c:	2304      	movs	r3, #4
 8010e7e:	77fb      	strb	r3, [r7, #31]
 8010e80:	e14b      	b.n	801111a <UART_SetConfig+0x34e>
 8010e82:	2308      	movs	r3, #8
 8010e84:	77fb      	strb	r3, [r7, #31]
 8010e86:	e148      	b.n	801111a <UART_SetConfig+0x34e>
 8010e88:	2310      	movs	r3, #16
 8010e8a:	77fb      	strb	r3, [r7, #31]
 8010e8c:	bf00      	nop
 8010e8e:	e144      	b.n	801111a <UART_SetConfig+0x34e>
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	4a8d      	ldr	r2, [pc, #564]	; (80110cc <UART_SetConfig+0x300>)
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d134      	bne.n	8010f04 <UART_SetConfig+0x138>
 8010e9a:	4b8b      	ldr	r3, [pc, #556]	; (80110c8 <UART_SetConfig+0x2fc>)
 8010e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ea0:	f003 030c 	and.w	r3, r3, #12
 8010ea4:	2b0c      	cmp	r3, #12
 8010ea6:	d829      	bhi.n	8010efc <UART_SetConfig+0x130>
 8010ea8:	a201      	add	r2, pc, #4	; (adr r2, 8010eb0 <UART_SetConfig+0xe4>)
 8010eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eae:	bf00      	nop
 8010eb0:	08010ee5 	.word	0x08010ee5
 8010eb4:	08010efd 	.word	0x08010efd
 8010eb8:	08010efd 	.word	0x08010efd
 8010ebc:	08010efd 	.word	0x08010efd
 8010ec0:	08010ef1 	.word	0x08010ef1
 8010ec4:	08010efd 	.word	0x08010efd
 8010ec8:	08010efd 	.word	0x08010efd
 8010ecc:	08010efd 	.word	0x08010efd
 8010ed0:	08010eeb 	.word	0x08010eeb
 8010ed4:	08010efd 	.word	0x08010efd
 8010ed8:	08010efd 	.word	0x08010efd
 8010edc:	08010efd 	.word	0x08010efd
 8010ee0:	08010ef7 	.word	0x08010ef7
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	77fb      	strb	r3, [r7, #31]
 8010ee8:	e117      	b.n	801111a <UART_SetConfig+0x34e>
 8010eea:	2302      	movs	r3, #2
 8010eec:	77fb      	strb	r3, [r7, #31]
 8010eee:	e114      	b.n	801111a <UART_SetConfig+0x34e>
 8010ef0:	2304      	movs	r3, #4
 8010ef2:	77fb      	strb	r3, [r7, #31]
 8010ef4:	e111      	b.n	801111a <UART_SetConfig+0x34e>
 8010ef6:	2308      	movs	r3, #8
 8010ef8:	77fb      	strb	r3, [r7, #31]
 8010efa:	e10e      	b.n	801111a <UART_SetConfig+0x34e>
 8010efc:	2310      	movs	r3, #16
 8010efe:	77fb      	strb	r3, [r7, #31]
 8010f00:	bf00      	nop
 8010f02:	e10a      	b.n	801111a <UART_SetConfig+0x34e>
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	4a71      	ldr	r2, [pc, #452]	; (80110d0 <UART_SetConfig+0x304>)
 8010f0a:	4293      	cmp	r3, r2
 8010f0c:	d120      	bne.n	8010f50 <UART_SetConfig+0x184>
 8010f0e:	4b6e      	ldr	r3, [pc, #440]	; (80110c8 <UART_SetConfig+0x2fc>)
 8010f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010f18:	2b10      	cmp	r3, #16
 8010f1a:	d00f      	beq.n	8010f3c <UART_SetConfig+0x170>
 8010f1c:	2b10      	cmp	r3, #16
 8010f1e:	d802      	bhi.n	8010f26 <UART_SetConfig+0x15a>
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d005      	beq.n	8010f30 <UART_SetConfig+0x164>
 8010f24:	e010      	b.n	8010f48 <UART_SetConfig+0x17c>
 8010f26:	2b20      	cmp	r3, #32
 8010f28:	d005      	beq.n	8010f36 <UART_SetConfig+0x16a>
 8010f2a:	2b30      	cmp	r3, #48	; 0x30
 8010f2c:	d009      	beq.n	8010f42 <UART_SetConfig+0x176>
 8010f2e:	e00b      	b.n	8010f48 <UART_SetConfig+0x17c>
 8010f30:	2300      	movs	r3, #0
 8010f32:	77fb      	strb	r3, [r7, #31]
 8010f34:	e0f1      	b.n	801111a <UART_SetConfig+0x34e>
 8010f36:	2302      	movs	r3, #2
 8010f38:	77fb      	strb	r3, [r7, #31]
 8010f3a:	e0ee      	b.n	801111a <UART_SetConfig+0x34e>
 8010f3c:	2304      	movs	r3, #4
 8010f3e:	77fb      	strb	r3, [r7, #31]
 8010f40:	e0eb      	b.n	801111a <UART_SetConfig+0x34e>
 8010f42:	2308      	movs	r3, #8
 8010f44:	77fb      	strb	r3, [r7, #31]
 8010f46:	e0e8      	b.n	801111a <UART_SetConfig+0x34e>
 8010f48:	2310      	movs	r3, #16
 8010f4a:	77fb      	strb	r3, [r7, #31]
 8010f4c:	bf00      	nop
 8010f4e:	e0e4      	b.n	801111a <UART_SetConfig+0x34e>
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	4a5f      	ldr	r2, [pc, #380]	; (80110d4 <UART_SetConfig+0x308>)
 8010f56:	4293      	cmp	r3, r2
 8010f58:	d120      	bne.n	8010f9c <UART_SetConfig+0x1d0>
 8010f5a:	4b5b      	ldr	r3, [pc, #364]	; (80110c8 <UART_SetConfig+0x2fc>)
 8010f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010f64:	2b40      	cmp	r3, #64	; 0x40
 8010f66:	d00f      	beq.n	8010f88 <UART_SetConfig+0x1bc>
 8010f68:	2b40      	cmp	r3, #64	; 0x40
 8010f6a:	d802      	bhi.n	8010f72 <UART_SetConfig+0x1a6>
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d005      	beq.n	8010f7c <UART_SetConfig+0x1b0>
 8010f70:	e010      	b.n	8010f94 <UART_SetConfig+0x1c8>
 8010f72:	2b80      	cmp	r3, #128	; 0x80
 8010f74:	d005      	beq.n	8010f82 <UART_SetConfig+0x1b6>
 8010f76:	2bc0      	cmp	r3, #192	; 0xc0
 8010f78:	d009      	beq.n	8010f8e <UART_SetConfig+0x1c2>
 8010f7a:	e00b      	b.n	8010f94 <UART_SetConfig+0x1c8>
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	77fb      	strb	r3, [r7, #31]
 8010f80:	e0cb      	b.n	801111a <UART_SetConfig+0x34e>
 8010f82:	2302      	movs	r3, #2
 8010f84:	77fb      	strb	r3, [r7, #31]
 8010f86:	e0c8      	b.n	801111a <UART_SetConfig+0x34e>
 8010f88:	2304      	movs	r3, #4
 8010f8a:	77fb      	strb	r3, [r7, #31]
 8010f8c:	e0c5      	b.n	801111a <UART_SetConfig+0x34e>
 8010f8e:	2308      	movs	r3, #8
 8010f90:	77fb      	strb	r3, [r7, #31]
 8010f92:	e0c2      	b.n	801111a <UART_SetConfig+0x34e>
 8010f94:	2310      	movs	r3, #16
 8010f96:	77fb      	strb	r3, [r7, #31]
 8010f98:	bf00      	nop
 8010f9a:	e0be      	b.n	801111a <UART_SetConfig+0x34e>
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	4a4d      	ldr	r2, [pc, #308]	; (80110d8 <UART_SetConfig+0x30c>)
 8010fa2:	4293      	cmp	r3, r2
 8010fa4:	d124      	bne.n	8010ff0 <UART_SetConfig+0x224>
 8010fa6:	4b48      	ldr	r3, [pc, #288]	; (80110c8 <UART_SetConfig+0x2fc>)
 8010fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010fb4:	d012      	beq.n	8010fdc <UART_SetConfig+0x210>
 8010fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010fba:	d802      	bhi.n	8010fc2 <UART_SetConfig+0x1f6>
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d007      	beq.n	8010fd0 <UART_SetConfig+0x204>
 8010fc0:	e012      	b.n	8010fe8 <UART_SetConfig+0x21c>
 8010fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fc6:	d006      	beq.n	8010fd6 <UART_SetConfig+0x20a>
 8010fc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010fcc:	d009      	beq.n	8010fe2 <UART_SetConfig+0x216>
 8010fce:	e00b      	b.n	8010fe8 <UART_SetConfig+0x21c>
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	77fb      	strb	r3, [r7, #31]
 8010fd4:	e0a1      	b.n	801111a <UART_SetConfig+0x34e>
 8010fd6:	2302      	movs	r3, #2
 8010fd8:	77fb      	strb	r3, [r7, #31]
 8010fda:	e09e      	b.n	801111a <UART_SetConfig+0x34e>
 8010fdc:	2304      	movs	r3, #4
 8010fde:	77fb      	strb	r3, [r7, #31]
 8010fe0:	e09b      	b.n	801111a <UART_SetConfig+0x34e>
 8010fe2:	2308      	movs	r3, #8
 8010fe4:	77fb      	strb	r3, [r7, #31]
 8010fe6:	e098      	b.n	801111a <UART_SetConfig+0x34e>
 8010fe8:	2310      	movs	r3, #16
 8010fea:	77fb      	strb	r3, [r7, #31]
 8010fec:	bf00      	nop
 8010fee:	e094      	b.n	801111a <UART_SetConfig+0x34e>
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	4a39      	ldr	r2, [pc, #228]	; (80110dc <UART_SetConfig+0x310>)
 8010ff6:	4293      	cmp	r3, r2
 8010ff8:	d124      	bne.n	8011044 <UART_SetConfig+0x278>
 8010ffa:	4b33      	ldr	r3, [pc, #204]	; (80110c8 <UART_SetConfig+0x2fc>)
 8010ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011000:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011008:	d012      	beq.n	8011030 <UART_SetConfig+0x264>
 801100a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801100e:	d802      	bhi.n	8011016 <UART_SetConfig+0x24a>
 8011010:	2b00      	cmp	r3, #0
 8011012:	d007      	beq.n	8011024 <UART_SetConfig+0x258>
 8011014:	e012      	b.n	801103c <UART_SetConfig+0x270>
 8011016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801101a:	d006      	beq.n	801102a <UART_SetConfig+0x25e>
 801101c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011020:	d009      	beq.n	8011036 <UART_SetConfig+0x26a>
 8011022:	e00b      	b.n	801103c <UART_SetConfig+0x270>
 8011024:	2301      	movs	r3, #1
 8011026:	77fb      	strb	r3, [r7, #31]
 8011028:	e077      	b.n	801111a <UART_SetConfig+0x34e>
 801102a:	2302      	movs	r3, #2
 801102c:	77fb      	strb	r3, [r7, #31]
 801102e:	e074      	b.n	801111a <UART_SetConfig+0x34e>
 8011030:	2304      	movs	r3, #4
 8011032:	77fb      	strb	r3, [r7, #31]
 8011034:	e071      	b.n	801111a <UART_SetConfig+0x34e>
 8011036:	2308      	movs	r3, #8
 8011038:	77fb      	strb	r3, [r7, #31]
 801103a:	e06e      	b.n	801111a <UART_SetConfig+0x34e>
 801103c:	2310      	movs	r3, #16
 801103e:	77fb      	strb	r3, [r7, #31]
 8011040:	bf00      	nop
 8011042:	e06a      	b.n	801111a <UART_SetConfig+0x34e>
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	4a25      	ldr	r2, [pc, #148]	; (80110e0 <UART_SetConfig+0x314>)
 801104a:	4293      	cmp	r3, r2
 801104c:	d124      	bne.n	8011098 <UART_SetConfig+0x2cc>
 801104e:	4b1e      	ldr	r3, [pc, #120]	; (80110c8 <UART_SetConfig+0x2fc>)
 8011050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011054:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8011058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801105c:	d012      	beq.n	8011084 <UART_SetConfig+0x2b8>
 801105e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011062:	d802      	bhi.n	801106a <UART_SetConfig+0x29e>
 8011064:	2b00      	cmp	r3, #0
 8011066:	d007      	beq.n	8011078 <UART_SetConfig+0x2ac>
 8011068:	e012      	b.n	8011090 <UART_SetConfig+0x2c4>
 801106a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801106e:	d006      	beq.n	801107e <UART_SetConfig+0x2b2>
 8011070:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011074:	d009      	beq.n	801108a <UART_SetConfig+0x2be>
 8011076:	e00b      	b.n	8011090 <UART_SetConfig+0x2c4>
 8011078:	2300      	movs	r3, #0
 801107a:	77fb      	strb	r3, [r7, #31]
 801107c:	e04d      	b.n	801111a <UART_SetConfig+0x34e>
 801107e:	2302      	movs	r3, #2
 8011080:	77fb      	strb	r3, [r7, #31]
 8011082:	e04a      	b.n	801111a <UART_SetConfig+0x34e>
 8011084:	2304      	movs	r3, #4
 8011086:	77fb      	strb	r3, [r7, #31]
 8011088:	e047      	b.n	801111a <UART_SetConfig+0x34e>
 801108a:	2308      	movs	r3, #8
 801108c:	77fb      	strb	r3, [r7, #31]
 801108e:	e044      	b.n	801111a <UART_SetConfig+0x34e>
 8011090:	2310      	movs	r3, #16
 8011092:	77fb      	strb	r3, [r7, #31]
 8011094:	bf00      	nop
 8011096:	e040      	b.n	801111a <UART_SetConfig+0x34e>
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	4a11      	ldr	r2, [pc, #68]	; (80110e4 <UART_SetConfig+0x318>)
 801109e:	4293      	cmp	r3, r2
 80110a0:	d139      	bne.n	8011116 <UART_SetConfig+0x34a>
 80110a2:	4b09      	ldr	r3, [pc, #36]	; (80110c8 <UART_SetConfig+0x2fc>)
 80110a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80110ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80110b0:	d027      	beq.n	8011102 <UART_SetConfig+0x336>
 80110b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80110b6:	d817      	bhi.n	80110e8 <UART_SetConfig+0x31c>
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d01c      	beq.n	80110f6 <UART_SetConfig+0x32a>
 80110bc:	e027      	b.n	801110e <UART_SetConfig+0x342>
 80110be:	bf00      	nop
 80110c0:	efff69f3 	.word	0xefff69f3
 80110c4:	40011000 	.word	0x40011000
 80110c8:	40023800 	.word	0x40023800
 80110cc:	40004400 	.word	0x40004400
 80110d0:	40004800 	.word	0x40004800
 80110d4:	40004c00 	.word	0x40004c00
 80110d8:	40005000 	.word	0x40005000
 80110dc:	40011400 	.word	0x40011400
 80110e0:	40007800 	.word	0x40007800
 80110e4:	40007c00 	.word	0x40007c00
 80110e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80110ec:	d006      	beq.n	80110fc <UART_SetConfig+0x330>
 80110ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80110f2:	d009      	beq.n	8011108 <UART_SetConfig+0x33c>
 80110f4:	e00b      	b.n	801110e <UART_SetConfig+0x342>
 80110f6:	2300      	movs	r3, #0
 80110f8:	77fb      	strb	r3, [r7, #31]
 80110fa:	e00e      	b.n	801111a <UART_SetConfig+0x34e>
 80110fc:	2302      	movs	r3, #2
 80110fe:	77fb      	strb	r3, [r7, #31]
 8011100:	e00b      	b.n	801111a <UART_SetConfig+0x34e>
 8011102:	2304      	movs	r3, #4
 8011104:	77fb      	strb	r3, [r7, #31]
 8011106:	e008      	b.n	801111a <UART_SetConfig+0x34e>
 8011108:	2308      	movs	r3, #8
 801110a:	77fb      	strb	r3, [r7, #31]
 801110c:	e005      	b.n	801111a <UART_SetConfig+0x34e>
 801110e:	2310      	movs	r3, #16
 8011110:	77fb      	strb	r3, [r7, #31]
 8011112:	bf00      	nop
 8011114:	e001      	b.n	801111a <UART_SetConfig+0x34e>
 8011116:	2310      	movs	r3, #16
 8011118:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	69db      	ldr	r3, [r3, #28]
 801111e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011122:	d17f      	bne.n	8011224 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8011124:	7ffb      	ldrb	r3, [r7, #31]
 8011126:	2b08      	cmp	r3, #8
 8011128:	d85c      	bhi.n	80111e4 <UART_SetConfig+0x418>
 801112a:	a201      	add	r2, pc, #4	; (adr r2, 8011130 <UART_SetConfig+0x364>)
 801112c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011130:	08011155 	.word	0x08011155
 8011134:	08011175 	.word	0x08011175
 8011138:	08011195 	.word	0x08011195
 801113c:	080111e5 	.word	0x080111e5
 8011140:	080111ad 	.word	0x080111ad
 8011144:	080111e5 	.word	0x080111e5
 8011148:	080111e5 	.word	0x080111e5
 801114c:	080111e5 	.word	0x080111e5
 8011150:	080111cd 	.word	0x080111cd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011154:	f7fc fabc 	bl	800d6d0 <HAL_RCC_GetPCLK1Freq>
 8011158:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	005a      	lsls	r2, r3, #1
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	085b      	lsrs	r3, r3, #1
 8011164:	441a      	add	r2, r3
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	fbb2 f3f3 	udiv	r3, r2, r3
 801116e:	b29b      	uxth	r3, r3
 8011170:	61bb      	str	r3, [r7, #24]
        break;
 8011172:	e03a      	b.n	80111ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011174:	f7fc fac0 	bl	800d6f8 <HAL_RCC_GetPCLK2Freq>
 8011178:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	005a      	lsls	r2, r3, #1
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	085b      	lsrs	r3, r3, #1
 8011184:	441a      	add	r2, r3
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	fbb2 f3f3 	udiv	r3, r2, r3
 801118e:	b29b      	uxth	r3, r3
 8011190:	61bb      	str	r3, [r7, #24]
        break;
 8011192:	e02a      	b.n	80111ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	685b      	ldr	r3, [r3, #4]
 8011198:	085a      	lsrs	r2, r3, #1
 801119a:	4b5f      	ldr	r3, [pc, #380]	; (8011318 <UART_SetConfig+0x54c>)
 801119c:	4413      	add	r3, r2
 801119e:	687a      	ldr	r2, [r7, #4]
 80111a0:	6852      	ldr	r2, [r2, #4]
 80111a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80111a6:	b29b      	uxth	r3, r3
 80111a8:	61bb      	str	r3, [r7, #24]
        break;
 80111aa:	e01e      	b.n	80111ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80111ac:	f7fc f9d2 	bl	800d554 <HAL_RCC_GetSysClockFreq>
 80111b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	005a      	lsls	r2, r3, #1
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	685b      	ldr	r3, [r3, #4]
 80111ba:	085b      	lsrs	r3, r3, #1
 80111bc:	441a      	add	r2, r3
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	685b      	ldr	r3, [r3, #4]
 80111c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80111c6:	b29b      	uxth	r3, r3
 80111c8:	61bb      	str	r3, [r7, #24]
        break;
 80111ca:	e00e      	b.n	80111ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	085b      	lsrs	r3, r3, #1
 80111d2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	685b      	ldr	r3, [r3, #4]
 80111da:	fbb2 f3f3 	udiv	r3, r2, r3
 80111de:	b29b      	uxth	r3, r3
 80111e0:	61bb      	str	r3, [r7, #24]
        break;
 80111e2:	e002      	b.n	80111ea <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80111e4:	2301      	movs	r3, #1
 80111e6:	75fb      	strb	r3, [r7, #23]
        break;
 80111e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80111ea:	69bb      	ldr	r3, [r7, #24]
 80111ec:	2b0f      	cmp	r3, #15
 80111ee:	d916      	bls.n	801121e <UART_SetConfig+0x452>
 80111f0:	69bb      	ldr	r3, [r7, #24]
 80111f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111f6:	d212      	bcs.n	801121e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80111f8:	69bb      	ldr	r3, [r7, #24]
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	f023 030f 	bic.w	r3, r3, #15
 8011200:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011202:	69bb      	ldr	r3, [r7, #24]
 8011204:	085b      	lsrs	r3, r3, #1
 8011206:	b29b      	uxth	r3, r3
 8011208:	f003 0307 	and.w	r3, r3, #7
 801120c:	b29a      	uxth	r2, r3
 801120e:	897b      	ldrh	r3, [r7, #10]
 8011210:	4313      	orrs	r3, r2
 8011212:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	897a      	ldrh	r2, [r7, #10]
 801121a:	60da      	str	r2, [r3, #12]
 801121c:	e070      	b.n	8011300 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 801121e:	2301      	movs	r3, #1
 8011220:	75fb      	strb	r3, [r7, #23]
 8011222:	e06d      	b.n	8011300 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8011224:	7ffb      	ldrb	r3, [r7, #31]
 8011226:	2b08      	cmp	r3, #8
 8011228:	d859      	bhi.n	80112de <UART_SetConfig+0x512>
 801122a:	a201      	add	r2, pc, #4	; (adr r2, 8011230 <UART_SetConfig+0x464>)
 801122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011230:	08011255 	.word	0x08011255
 8011234:	08011273 	.word	0x08011273
 8011238:	08011291 	.word	0x08011291
 801123c:	080112df 	.word	0x080112df
 8011240:	080112a9 	.word	0x080112a9
 8011244:	080112df 	.word	0x080112df
 8011248:	080112df 	.word	0x080112df
 801124c:	080112df 	.word	0x080112df
 8011250:	080112c7 	.word	0x080112c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011254:	f7fc fa3c 	bl	800d6d0 <HAL_RCC_GetPCLK1Freq>
 8011258:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	085a      	lsrs	r2, r3, #1
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	441a      	add	r2, r3
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	fbb2 f3f3 	udiv	r3, r2, r3
 801126c:	b29b      	uxth	r3, r3
 801126e:	61bb      	str	r3, [r7, #24]
        break;
 8011270:	e038      	b.n	80112e4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011272:	f7fc fa41 	bl	800d6f8 <HAL_RCC_GetPCLK2Freq>
 8011276:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	685b      	ldr	r3, [r3, #4]
 801127c:	085a      	lsrs	r2, r3, #1
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	441a      	add	r2, r3
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	fbb2 f3f3 	udiv	r3, r2, r3
 801128a:	b29b      	uxth	r3, r3
 801128c:	61bb      	str	r3, [r7, #24]
        break;
 801128e:	e029      	b.n	80112e4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	685b      	ldr	r3, [r3, #4]
 8011294:	085a      	lsrs	r2, r3, #1
 8011296:	4b21      	ldr	r3, [pc, #132]	; (801131c <UART_SetConfig+0x550>)
 8011298:	4413      	add	r3, r2
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	6852      	ldr	r2, [r2, #4]
 801129e:	fbb3 f3f2 	udiv	r3, r3, r2
 80112a2:	b29b      	uxth	r3, r3
 80112a4:	61bb      	str	r3, [r7, #24]
        break;
 80112a6:	e01d      	b.n	80112e4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80112a8:	f7fc f954 	bl	800d554 <HAL_RCC_GetSysClockFreq>
 80112ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	085a      	lsrs	r2, r3, #1
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	441a      	add	r2, r3
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80112c0:	b29b      	uxth	r3, r3
 80112c2:	61bb      	str	r3, [r7, #24]
        break;
 80112c4:	e00e      	b.n	80112e4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	085b      	lsrs	r3, r3, #1
 80112cc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	685b      	ldr	r3, [r3, #4]
 80112d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80112d8:	b29b      	uxth	r3, r3
 80112da:	61bb      	str	r3, [r7, #24]
        break;
 80112dc:	e002      	b.n	80112e4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80112de:	2301      	movs	r3, #1
 80112e0:	75fb      	strb	r3, [r7, #23]
        break;
 80112e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80112e4:	69bb      	ldr	r3, [r7, #24]
 80112e6:	2b0f      	cmp	r3, #15
 80112e8:	d908      	bls.n	80112fc <UART_SetConfig+0x530>
 80112ea:	69bb      	ldr	r3, [r7, #24]
 80112ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112f0:	d204      	bcs.n	80112fc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	69ba      	ldr	r2, [r7, #24]
 80112f8:	60da      	str	r2, [r3, #12]
 80112fa:	e001      	b.n	8011300 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80112fc:	2301      	movs	r3, #1
 80112fe:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2200      	movs	r2, #0
 8011304:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2200      	movs	r2, #0
 801130a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 801130c:	7dfb      	ldrb	r3, [r7, #23]
}
 801130e:	4618      	mov	r0, r3
 8011310:	3720      	adds	r7, #32
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	01e84800 	.word	0x01e84800
 801131c:	00f42400 	.word	0x00f42400

08011320 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011320:	b480      	push	{r7}
 8011322:	b083      	sub	sp, #12
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801132c:	f003 0301 	and.w	r3, r3, #1
 8011330:	2b00      	cmp	r3, #0
 8011332:	d00a      	beq.n	801134a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	685b      	ldr	r3, [r3, #4]
 801133a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	430a      	orrs	r2, r1
 8011348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801134e:	f003 0302 	and.w	r3, r3, #2
 8011352:	2b00      	cmp	r3, #0
 8011354:	d00a      	beq.n	801136c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	685b      	ldr	r3, [r3, #4]
 801135c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	430a      	orrs	r2, r1
 801136a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011370:	f003 0304 	and.w	r3, r3, #4
 8011374:	2b00      	cmp	r3, #0
 8011376:	d00a      	beq.n	801138e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	430a      	orrs	r2, r1
 801138c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011392:	f003 0308 	and.w	r3, r3, #8
 8011396:	2b00      	cmp	r3, #0
 8011398:	d00a      	beq.n	80113b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	685b      	ldr	r3, [r3, #4]
 80113a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	430a      	orrs	r2, r1
 80113ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b4:	f003 0310 	and.w	r3, r3, #16
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d00a      	beq.n	80113d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	689b      	ldr	r3, [r3, #8]
 80113c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	430a      	orrs	r2, r1
 80113d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113d6:	f003 0320 	and.w	r3, r3, #32
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d00a      	beq.n	80113f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	689b      	ldr	r3, [r3, #8]
 80113e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	430a      	orrs	r2, r1
 80113f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d01a      	beq.n	8011436 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	685b      	ldr	r3, [r3, #4]
 8011406:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	430a      	orrs	r2, r1
 8011414:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801141a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801141e:	d10a      	bne.n	8011436 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	685b      	ldr	r3, [r3, #4]
 8011426:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	430a      	orrs	r2, r1
 8011434:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801143a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801143e:	2b00      	cmp	r3, #0
 8011440:	d00a      	beq.n	8011458 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	430a      	orrs	r2, r1
 8011456:	605a      	str	r2, [r3, #4]
  }
}
 8011458:	bf00      	nop
 801145a:	370c      	adds	r7, #12
 801145c:	46bd      	mov	sp, r7
 801145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011462:	4770      	bx	lr

08011464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b086      	sub	sp, #24
 8011468:	af02      	add	r7, sp, #8
 801146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2200      	movs	r2, #0
 8011470:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8011472:	f7f9 ffa1 	bl	800b3b8 <HAL_GetTick>
 8011476:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f003 0308 	and.w	r3, r3, #8
 8011482:	2b08      	cmp	r3, #8
 8011484:	d10e      	bne.n	80114a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011486:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801148a:	9300      	str	r3, [sp, #0]
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	2200      	movs	r2, #0
 8011490:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	f000 f814 	bl	80114c2 <UART_WaitOnFlagUntilTimeout>
 801149a:	4603      	mov	r3, r0
 801149c:	2b00      	cmp	r3, #0
 801149e:	d001      	beq.n	80114a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80114a0:	2303      	movs	r3, #3
 80114a2:	e00a      	b.n	80114ba <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2220      	movs	r2, #32
 80114a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2220      	movs	r2, #32
 80114ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2200      	movs	r2, #0
 80114b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80114b8:	2300      	movs	r3, #0
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3710      	adds	r7, #16
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}

080114c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80114c2:	b580      	push	{r7, lr}
 80114c4:	b084      	sub	sp, #16
 80114c6:	af00      	add	r7, sp, #0
 80114c8:	60f8      	str	r0, [r7, #12]
 80114ca:	60b9      	str	r1, [r7, #8]
 80114cc:	603b      	str	r3, [r7, #0]
 80114ce:	4613      	mov	r3, r2
 80114d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80114d2:	e05d      	b.n	8011590 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80114d4:	69bb      	ldr	r3, [r7, #24]
 80114d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114da:	d059      	beq.n	8011590 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80114dc:	f7f9 ff6c 	bl	800b3b8 <HAL_GetTick>
 80114e0:	4602      	mov	r2, r0
 80114e2:	683b      	ldr	r3, [r7, #0]
 80114e4:	1ad3      	subs	r3, r2, r3
 80114e6:	69ba      	ldr	r2, [r7, #24]
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d302      	bcc.n	80114f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80114ec:	69bb      	ldr	r3, [r7, #24]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d11b      	bne.n	801152a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	681a      	ldr	r2, [r3, #0]
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011500:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	689a      	ldr	r2, [r3, #8]
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	f022 0201 	bic.w	r2, r2, #1
 8011510:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	2220      	movs	r2, #32
 8011516:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	2220      	movs	r2, #32
 801151c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	2200      	movs	r2, #0
 8011522:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8011526:	2303      	movs	r3, #3
 8011528:	e042      	b.n	80115b0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	f003 0304 	and.w	r3, r3, #4
 8011534:	2b00      	cmp	r3, #0
 8011536:	d02b      	beq.n	8011590 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	69db      	ldr	r3, [r3, #28]
 801153e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011546:	d123      	bne.n	8011590 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011550:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	681a      	ldr	r2, [r3, #0]
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011560:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	689a      	ldr	r2, [r3, #8]
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	f022 0201 	bic.w	r2, r2, #1
 8011570:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	2220      	movs	r2, #32
 8011576:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	2220      	movs	r2, #32
 801157c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	2220      	movs	r2, #32
 8011582:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	2200      	movs	r2, #0
 8011588:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 801158c:	2303      	movs	r3, #3
 801158e:	e00f      	b.n	80115b0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	69da      	ldr	r2, [r3, #28]
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	4013      	ands	r3, r2
 801159a:	68ba      	ldr	r2, [r7, #8]
 801159c:	429a      	cmp	r2, r3
 801159e:	bf0c      	ite	eq
 80115a0:	2301      	moveq	r3, #1
 80115a2:	2300      	movne	r3, #0
 80115a4:	b2db      	uxtb	r3, r3
 80115a6:	461a      	mov	r2, r3
 80115a8:	79fb      	ldrb	r3, [r7, #7]
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d092      	beq.n	80114d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80115ae:	2300      	movs	r3, #0
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3710      	adds	r7, #16
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}

080115b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80115b8:	b480      	push	{r7}
 80115ba:	b083      	sub	sp, #12
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	681a      	ldr	r2, [r3, #0]
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80115ce:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2220      	movs	r2, #32
 80115d4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80115d6:	bf00      	nop
 80115d8:	370c      	adds	r7, #12
 80115da:	46bd      	mov	sp, r7
 80115dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e0:	4770      	bx	lr

080115e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80115e2:	b480      	push	{r7}
 80115e4:	b083      	sub	sp, #12
 80115e6:	af00      	add	r7, sp, #0
 80115e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	681a      	ldr	r2, [r3, #0]
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80115f8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	689a      	ldr	r2, [r3, #8]
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f022 0201 	bic.w	r2, r2, #1
 8011608:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2220      	movs	r2, #32
 801160e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2200      	movs	r2, #0
 8011614:	661a      	str	r2, [r3, #96]	; 0x60
}
 8011616:	bf00      	nop
 8011618:	370c      	adds	r7, #12
 801161a:	46bd      	mov	sp, r7
 801161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011620:	4770      	bx	lr

08011622 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011622:	b580      	push	{r7, lr}
 8011624:	b084      	sub	sp, #16
 8011626:	af00      	add	r7, sp, #0
 8011628:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801162e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	69db      	ldr	r3, [r3, #28]
 8011634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011638:	d014      	beq.n	8011664 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	2200      	movs	r2, #0
 801163e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	689a      	ldr	r2, [r3, #8]
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011650:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	681a      	ldr	r2, [r3, #0]
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011660:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011662:	e002      	b.n	801166a <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8011664:	68f8      	ldr	r0, [r7, #12]
 8011666:	f7f6 fc83 	bl	8007f70 <HAL_UART_TxCpltCallback>
}
 801166a:	bf00      	nop
 801166c:	3710      	adds	r7, #16
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}

08011672 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011672:	b580      	push	{r7, lr}
 8011674:	b084      	sub	sp, #16
 8011676:	af00      	add	r7, sp, #0
 8011678:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801167e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011680:	68f8      	ldr	r0, [r7, #12]
 8011682:	f7ff fb85 	bl	8010d90 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011686:	bf00      	nop
 8011688:	3710      	adds	r7, #16
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}

0801168e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801168e:	b580      	push	{r7, lr}
 8011690:	b084      	sub	sp, #16
 8011692:	af00      	add	r7, sp, #0
 8011694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801169a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	69db      	ldr	r3, [r3, #28]
 80116a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80116a4:	d01e      	beq.n	80116e4 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	2200      	movs	r2, #0
 80116aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	681a      	ldr	r2, [r3, #0]
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80116bc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	689a      	ldr	r2, [r3, #8]
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	f022 0201 	bic.w	r2, r2, #1
 80116cc:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	689a      	ldr	r2, [r3, #8]
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80116dc:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2220      	movs	r2, #32
 80116e2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80116e4:	68f8      	ldr	r0, [r7, #12]
 80116e6:	f7ff fb5d 	bl	8010da4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80116ea:	bf00      	nop
 80116ec:	3710      	adds	r7, #16
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}

080116f2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80116f2:	b580      	push	{r7, lr}
 80116f4:	b084      	sub	sp, #16
 80116f6:	af00      	add	r7, sp, #0
 80116f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8011700:	68f8      	ldr	r0, [r7, #12]
 8011702:	f7ff fb59 	bl	8010db8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011706:	bf00      	nop
 8011708:	3710      	adds	r7, #16
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}

0801170e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801170e:	b580      	push	{r7, lr}
 8011710:	b086      	sub	sp, #24
 8011712:	af00      	add	r7, sp, #0
 8011714:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801171a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011720:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011726:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	689b      	ldr	r3, [r3, #8]
 801172e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011732:	2b80      	cmp	r3, #128	; 0x80
 8011734:	d109      	bne.n	801174a <UART_DMAError+0x3c>
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	2b21      	cmp	r3, #33	; 0x21
 801173a:	d106      	bne.n	801174a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	2200      	movs	r2, #0
 8011740:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8011744:	6978      	ldr	r0, [r7, #20]
 8011746:	f7ff ff37 	bl	80115b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	689b      	ldr	r3, [r3, #8]
 8011750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011754:	2b40      	cmp	r3, #64	; 0x40
 8011756:	d109      	bne.n	801176c <UART_DMAError+0x5e>
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	2b22      	cmp	r3, #34	; 0x22
 801175c:	d106      	bne.n	801176c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	2200      	movs	r2, #0
 8011762:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8011766:	6978      	ldr	r0, [r7, #20]
 8011768:	f7ff ff3b 	bl	80115e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011770:	f043 0210 	orr.w	r2, r3, #16
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011778:	6978      	ldr	r0, [r7, #20]
 801177a:	f7f6 fc04 	bl	8007f86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801177e:	bf00      	nop
 8011780:	3718      	adds	r7, #24
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}

08011786 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011786:	b580      	push	{r7, lr}
 8011788:	b084      	sub	sp, #16
 801178a:	af00      	add	r7, sp, #0
 801178c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011792:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	2200      	movs	r2, #0
 8011798:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	2200      	movs	r2, #0
 80117a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80117a4:	68f8      	ldr	r0, [r7, #12]
 80117a6:	f7f6 fbee 	bl	8007f86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80117aa:	bf00      	nop
 80117ac:	3710      	adds	r7, #16
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}

080117b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80117b2:	b580      	push	{r7, lr}
 80117b4:	b082      	sub	sp, #8
 80117b6:	af00      	add	r7, sp, #0
 80117b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	681a      	ldr	r2, [r3, #0]
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80117c8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2220      	movs	r2, #32
 80117ce:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2200      	movs	r2, #0
 80117d4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f7f6 fbca 	bl	8007f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80117dc:	bf00      	nop
 80117de:	3708      	adds	r7, #8
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}

080117e4 <__libc_init_array>:
 80117e4:	b570      	push	{r4, r5, r6, lr}
 80117e6:	4e0d      	ldr	r6, [pc, #52]	; (801181c <__libc_init_array+0x38>)
 80117e8:	4c0d      	ldr	r4, [pc, #52]	; (8011820 <__libc_init_array+0x3c>)
 80117ea:	1ba4      	subs	r4, r4, r6
 80117ec:	10a4      	asrs	r4, r4, #2
 80117ee:	2500      	movs	r5, #0
 80117f0:	42a5      	cmp	r5, r4
 80117f2:	d109      	bne.n	8011808 <__libc_init_array+0x24>
 80117f4:	4e0b      	ldr	r6, [pc, #44]	; (8011824 <__libc_init_array+0x40>)
 80117f6:	4c0c      	ldr	r4, [pc, #48]	; (8011828 <__libc_init_array+0x44>)
 80117f8:	f000 f834 	bl	8011864 <_init>
 80117fc:	1ba4      	subs	r4, r4, r6
 80117fe:	10a4      	asrs	r4, r4, #2
 8011800:	2500      	movs	r5, #0
 8011802:	42a5      	cmp	r5, r4
 8011804:	d105      	bne.n	8011812 <__libc_init_array+0x2e>
 8011806:	bd70      	pop	{r4, r5, r6, pc}
 8011808:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801180c:	4798      	blx	r3
 801180e:	3501      	adds	r5, #1
 8011810:	e7ee      	b.n	80117f0 <__libc_init_array+0xc>
 8011812:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011816:	4798      	blx	r3
 8011818:	3501      	adds	r5, #1
 801181a:	e7f2      	b.n	8011802 <__libc_init_array+0x1e>
 801181c:	08011964 	.word	0x08011964
 8011820:	08011964 	.word	0x08011964
 8011824:	08011964 	.word	0x08011964
 8011828:	08011968 	.word	0x08011968

0801182c <memcpy>:
 801182c:	b510      	push	{r4, lr}
 801182e:	1e43      	subs	r3, r0, #1
 8011830:	440a      	add	r2, r1
 8011832:	4291      	cmp	r1, r2
 8011834:	d100      	bne.n	8011838 <memcpy+0xc>
 8011836:	bd10      	pop	{r4, pc}
 8011838:	f811 4b01 	ldrb.w	r4, [r1], #1
 801183c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011840:	e7f7      	b.n	8011832 <memcpy+0x6>

08011842 <memset>:
 8011842:	4402      	add	r2, r0
 8011844:	4603      	mov	r3, r0
 8011846:	4293      	cmp	r3, r2
 8011848:	d100      	bne.n	801184c <memset+0xa>
 801184a:	4770      	bx	lr
 801184c:	f803 1b01 	strb.w	r1, [r3], #1
 8011850:	e7f9      	b.n	8011846 <memset+0x4>

08011852 <strcpy>:
 8011852:	4603      	mov	r3, r0
 8011854:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011858:	f803 2b01 	strb.w	r2, [r3], #1
 801185c:	2a00      	cmp	r2, #0
 801185e:	d1f9      	bne.n	8011854 <strcpy+0x2>
 8011860:	4770      	bx	lr
	...

08011864 <_init>:
 8011864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011866:	bf00      	nop
 8011868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801186a:	bc08      	pop	{r3}
 801186c:	469e      	mov	lr, r3
 801186e:	4770      	bx	lr

08011870 <_fini>:
 8011870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011872:	bf00      	nop
 8011874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011876:	bc08      	pop	{r3}
 8011878:	469e      	mov	lr, r3
 801187a:	4770      	bx	lr
